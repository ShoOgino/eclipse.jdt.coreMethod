	public void testPerfBuildCompilerUsingBatchCompiler() throws IOException {
		IWorkspace workspace = ResourcesPlugin.getWorkspace();
		final IWorkspaceRoot workspaceRoot = workspace.getRoot();
		final String targetWorkspacePath =  workspaceRoot.getProject(JavaCore.PLUGIN_ID).getLocation().toFile().getCanonicalPath();
		final String compilerPath = targetWorkspacePath + File.separator + "src"; //$NON-NLS-1$
		final String sources = targetWorkspacePath + File.separator + "compiler"; //$NON-NLS-1$
		final String bins = targetWorkspacePath + File.separator + "bin"; //$NON-NLS-1$
		final String logs = targetWorkspacePath + File.separator + "log.txt"; //$NON-NLS-1$

		// Note this test is not a finger print test, so we don't want to use tagAsGlobalSummary(...)
		tagAsSummary("Build jdt-core/compiler using batch compiler", Dimension.CPU_TIME);
		
		// Compile 10 times
		Main.compile(sources + " -1.4 -g -preserveAllLocals -enableJavadoc -nowarn -d " + bins + " -log " + logs); //$NON-NLS-1$ //$NON-NLS-2$
		for (int i = 0; i < 10; i++) {
			startMeasuring();
			Main.compile(sources + " -1.4 -g -preserveAllLocals -enableJavadoc -nowarn -d " + bins + " -log " + logs); //$NON-NLS-1$ //$NON-NLS-2$
			stopMeasuring();
			cleanupDirectory(new File(bins));
		}
		commitMeasurements();
		assertPerformance();
		
		File logsFile = new File(logs);
		assertTrue("No log file", logsFile.exists());
		assertEquals("Has errors", 0, logsFile.length());
	}

