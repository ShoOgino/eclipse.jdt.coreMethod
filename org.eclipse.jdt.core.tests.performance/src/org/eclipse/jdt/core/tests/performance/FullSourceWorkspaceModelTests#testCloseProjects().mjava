public void testCloseProjects() throws JavaModelException {
	// store current settings
	long oldSnapInterval = ENV.getWorkspace().getDescription().getSnapshotInterval();
	boolean oldAutoBuildPolicy = ENV.isAutoBuilding();
	
	// prevent snapshots and autobuilds from disturbing our measures
	ENV.getWorkspace().getDescription().setSnapshotInterval(100000);
	ENV.getWorkspace().getDescription().setAutoBuilding(false);
	
	try {
		int length=ALL_PROJECTS.length;
		// Warm-up
		for (int i=0; i<WARMUP_COUNT; i++) {
			for (int j=0; j<length; j++) {
				ENV.closeProject(ALL_PROJECTS[j].getPath());
			}
			for (int j=0; j<length; j++) {
				ENV.openProject(ALL_PROJECTS[j].getPath());
			}
		}
	
		// Measures
		for (int i=0; i<MEASURES_COUNT; i++) {
			AbstractJavaModelTests.waitUntilIndexesReady();
			// should not be autobuilding...
			if (ENV.isAutoBuilding()) {
				ENV.waitForAutoBuild();
			}
			runGc();
			startMeasuring();
			for (int j=0; j<length; j++) {
				ENV.closeProject(ALL_PROJECTS[j].getPath());
			}
			stopMeasuring();
			for (int j=0; j<length; j++) {
				ENV.openProject(ALL_PROJECTS[j].getPath());
			}
		}
		// Commit
		commitMeasurements();
		assertPerformance();
	}
	finally {
		// restore previous settings
		ENV.getWorkspace().getDescription().setSnapshotInterval(oldSnapInterval);
		ENV.getWorkspace().getDescription().setAutoBuilding(oldAutoBuildPolicy);
	}
}

