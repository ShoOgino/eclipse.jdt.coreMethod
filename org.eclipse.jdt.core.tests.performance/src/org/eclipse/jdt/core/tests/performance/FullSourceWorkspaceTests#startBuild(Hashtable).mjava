	/**
	 * Start a build on workspace using given options.
	 * @param options
	 * @throws IOException
	 * @throws CoreException
	 */
	protected int startBuild(Hashtable options) throws IOException, CoreException {
		if (DEBUG) System.out.print("\tstart build...");
		JavaCore.setOptions(options);
		startMeasuring();
		ENV.fullBuild();
		stopMeasuring();
		IMarker[] markers = ResourcesPlugin.getWorkspace().getRoot().findMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, true, IResource.DEPTH_INFINITE);
		int warnings = 0;
		for (int i = 0, length = markers.length; i < length; i++) {
			IMarker marker = markers[i];
			switch (((Integer) marker.getAttribute(IMarker.SEVERITY)).intValue()) {
				case IMarker.SEVERITY_ERROR:
					assertTrue("Unexpected marker: " + marker.getAttribute(IMarker.MESSAGE), false);
					break;
				case IMarker.SEVERITY_WARNING:
					warnings++;
					break;
			}
		}
		if (DEBUG) System.out.println("done");
		{
			commitMeasurements();
			assertPerformance();
		}
		return warnings;
	}

