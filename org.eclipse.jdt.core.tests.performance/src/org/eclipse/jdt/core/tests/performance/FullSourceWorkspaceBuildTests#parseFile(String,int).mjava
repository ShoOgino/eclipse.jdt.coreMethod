	/*
	 * Parse several times a file giving its name.
	 */
	private long[] parseFile(String fileName, int repeat) throws InvalidInputException, IOException {

		// Test for parser
		File file = new File(fileName);
		char[] content = Util.getFileCharContent(file, null);
		CompilerOptions options = new CompilerOptions();
		options.sourceLevel = ClassFileConstants.JDK1_4;
		options.targetJDK = ClassFileConstants.JDK1_4;
		ProblemReporter problemReporter = 
				new ProblemReporter(
					DefaultErrorHandlingPolicies.exitAfterAllProblems(), 
					options, 
					new DefaultProblemFactory());
        Parser parser = new Parser(problemReporter, true);

		// warm-up
		for (int i = 0; i < 2; i++) {
			ICompilationUnit unit = new CompilationUnit(content, file.getName(), null);
			CompilationResult unitResult = new CompilationResult(unit, 0, 1, options.maxProblemsPerUnit);				
			CompilationUnitDeclaration unitDeclaration = parser.dietParse(unit, unitResult);
			parser.getMethodBodies(unitDeclaration);
		}

		// loop for time measuring
		long parsedLines = 0;
		long parsedCharacters = 0;
		long start = 0;
		startMeasuring();
		for (int i = 0; i < REPEAT; i++) {
			if (DEBUG) {
				start = System.currentTimeMillis();
			}
			// Measure time for parse
			for (int j = 0; j < repeat; j++) {
				ICompilationUnit unit = new CompilationUnit(content, file.getName(), null);
				CompilationResult unitResult = new CompilationResult(unit, 0, 1, options.maxProblemsPerUnit);				
				CompilationUnitDeclaration unitDeclaration = parser.dietParse(unit, unitResult);
				parser.getMethodBodies(unitDeclaration);
				parsedCharacters += content.length;
				parsedLines += unitResult.lineSeparatorPositions.length;
            }

			// Warn if measure time is not enough while debugging
			if (DEBUG) {
				long time = System.currentTimeMillis() - start;
				if (time < TIME_THRESHOLD) {
		            System.err.print(parsedLines + " lines/"+ parsedCharacters + " characters parsed");
				} else {
		            System.out.print(parsedLines + " lines/"+ parsedCharacters + " characters parsed");
				}
			}
		}
		stopMeasuring();

		// Return stats
		return new long[] { parsedCharacters, parsedLines };
	}

