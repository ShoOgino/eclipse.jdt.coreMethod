	public void testBuildCompilerUsingBatchCompiler() throws IOException, CoreException {
		String batchCompilerSource = getPluginDirectoryPath() + File.separator + "compiler-R3_0.zip"; //$NON-NLS-1$
		IWorkspace workspace = ResourcesPlugin.getWorkspace();
		final IWorkspaceRoot workspaceRoot = workspace.getRoot();
		final String targetWorkspacePath = workspaceRoot.getLocation().toFile().getCanonicalPath();
		final String compilerPath = targetWorkspacePath + File.separator + "compiler"; //$NON-NLS-1$
		final String sources = compilerPath + File.separator + "src"; //$NON-NLS-1$
		final String bins = compilerPath + File.separator + "bin"; //$NON-NLS-1$
		final String logs = compilerPath + File.separator + "log.txt"; //$NON-NLS-1$
		Util.unzip(batchCompilerSource, targetWorkspacePath);

		tagAsGlobalSummary("Build compiler source using batch compiler", Dimension.CPU_TIME); //$NON-NLS-1$
		Main.compile(sources + " -1.4 -g -preserveAllLocals -enableJavadoc -nowarn -d " + bins + " -log " + logs); //$NON-NLS-1$ //$NON-NLS-2$
		for (int i = 0; i < 10; i++) {
			startMeasuring();
			Main.compile(sources + " -1.4 -g -preserveAllLocals -enableJavadoc -nowarn -d " + bins + " -log " + logs); //$NON-NLS-1$ //$NON-NLS-2$
			stopMeasuring();
			cleanupDirectory(new File(bins));
		}
		commitMeasurements();
		assertPerformance();
		
		File logsFile = new File(logs);
		assertTrue("No log file", logsFile.exists());
		assertEquals("Has errors", 0, logsFile.length());
		cleanupDirectory(new File(compilerPath));
	}

