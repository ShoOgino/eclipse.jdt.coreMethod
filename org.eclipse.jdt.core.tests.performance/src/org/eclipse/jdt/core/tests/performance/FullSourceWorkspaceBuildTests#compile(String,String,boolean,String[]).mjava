	/*
	 * Compile given paths using batch compiler
	 */
	void compile(String pluginID, String options, boolean log, String[] srcPaths) throws IOException, CoreException {
		IWorkspace workspace = ResourcesPlugin.getWorkspace();
		final IWorkspaceRoot workspaceRoot = workspace.getRoot();
		final String targetWorkspacePath = workspaceRoot.getProject(pluginID).getLocation().toFile().getCanonicalPath();
		String logFileName = targetWorkspacePath + File.separator + getName()+".log";
		String workspacePath = workspaceRoot.getLocation().toFile().getCanonicalPath()+File.separator;
		String binPath = File.separator+"bin"+File.pathSeparator;
		String classpath = " -cp " +
			workspacePath+"org.eclipse.osgi" + binPath +
			workspacePath+"org.eclipse.jface" + binPath +
			workspacePath+"org.eclipse.core.runtime" + binPath +
			workspacePath+"org.eclipse.core.resources"+binPath +
			workspacePath+"org.eclipse.text"+binPath;
		String sources = srcPaths == null ? " "+targetWorkspacePath : "";
		if (srcPaths != null) {
			for (int i=0, l=srcPaths.length; i<l; i++) {
				String path = workspacePath + pluginID + File.separator + srcPaths[i];
				if (path.indexOf(" ") > 0) {
					path = "\"" + path + "\"";
				}
				sources += " " + path;
			}
		}

		// Warm up
		String compliance = " -" + (COMPLIANCE==null ? "1.4" : COMPLIANCE);
		final String cmdLine = classpath + compliance + " -g -preserveAllLocals "+(options==null?"":options)+" -d " + COMPILER_OUTPUT_DIR + (log?" -log "+logFileName:"") + sources;
		if (PRINT) System.out.println("	Compiler command line = "+cmdLine);
		int warnings = 0;
		StringWriter errStrWriter = new StringWriter();
		PrintWriter err = new PrintWriter(errStrWriter);
		PrintWriter out = new PrintWriter(new StringWriter());
		Main warmup = new Main(out, err, false/*systemExit*/, null/*options*/, null/*progress*/);
		for (int i=1; i<WARMUP_COUNT; i++) {
			warmup.compile(Main.tokenize(cmdLine));
		}
		if (warmup.globalErrorsCount > 0) {
			System.out.println(this.scenarioShortName+": "+warmup.globalErrorsCount+" Unexpected compile ERROR!");
			if (DEBUG) {
				System.out.println(errStrWriter.toString());
				System.out.println("--------------------");
			}
		}
		if (!"none".equals(COMPILER_OUTPUT_DIR)) {
			org.eclipse.jdt.core.tests.util.Util.delete(COMPILER_OUTPUT_DIR);
		}
		warnings = warmup.globalWarningsCount;
		if (!log) org.eclipse.jdt.core.tests.util.Util.writeToFile(errStrWriter.toString(), logFileName);

		// Clean writer
		err = null;
		out = null;
		errStrWriter = null;

		// Measures
		for (int i = 0; i < MEASURES_COUNT; i++) {
			runGc();
			NullPrintWriter nullPrint= new NullPrintWriter();
			Main main = new Main(nullPrint, nullPrint, false/*systemExit*/, null/*options*/, null/*progress*/);
			startMeasuring();
			main.compile(Main.tokenize(cmdLine));
			stopMeasuring();
			if (!"none".equals(COMPILER_OUTPUT_DIR)) {
				org.eclipse.jdt.core.tests.util.Util.delete(COMPILER_OUTPUT_DIR);
			}
		}
		
		// Commit measures
		commitMeasurements();
		assertPerformance();

		// Store warning
		if (warnings>0) {
			System.out.println("\t- "+warnings+" warnings found while performing batch compilation.");
		}
		if (this.scenarioComment == null) {
			this.scenarioComment = new StringBuffer("["+TEST_POSITION+"]");
		} else {
			this.scenarioComment.append(' ');
		}
		this.scenarioComment.append("warn=");
		this.scenarioComment.append(warnings);
	}

