	private void complete(
			String testName,
			String projectName,
			String packageName,
			String unitName,
			String completeAt,
			String completeBehind,
			int[] ignoredKinds,
			int warmupCount,
			int iterationCount) throws JavaModelException {
		
		tagAsSummary(testName, Dimension.CPU_TIME, false/* do NOT put in fingerprint*/);
		
		waitUntilIndexesReady();
		
		TestCompletionRequestor requestor = new TestCompletionRequestor();
		if(ignoredKinds != null) {
			for (int i = 0; i < ignoredKinds.length; i++) {
				requestor.setIgnored(ignoredKinds[i], true);
			}
		}
		
		ICompilationUnit unit =
			getCompilationUnit(projectName, packageName, unitName);
		
		String str = unit.getSource();
		int completionIndex = str.indexOf(completeAt) + completeBehind.length();
		
		if (DEBUG) System.out.print("Perform code assist inside " + unitName + "...");
		
		// Warm up
		if(warmupCount > 0) {
			unit.codeComplete(completionIndex, requestor);
			for (int i = 1; i < warmupCount; i++) {
				unit.codeComplete(completionIndex, requestor);
			}
		}
		
		// Measure loops
		for (int i=0; i<MEASURES_COUNT; i++) {
			startMeasuring();
			for (int j = 0; j < iterationCount; j++) {
				unit.codeComplete(completionIndex, requestor);
			}
			stopMeasuring();
		}
		if (DEBUG) System.out.println("done!");
		
		// Commit measure
		commitMeasurements();
		assertPerformance();
		
		// Print statistics
		System.out.println("-------------------------------------");
		System.out.println("Completion performance test statistics:");
		NumberFormat intFormat = NumberFormat.getIntegerInstance();
		System.out.println("  - "+intFormat.format(iterationCount)+" completions have been performed");
		System.out.println("  - "+intFormat.format(requestor.proposalCount)+" proposals have been proposed");
		System.out.println("-------------------------------------\n");
	}

