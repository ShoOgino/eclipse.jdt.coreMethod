	/*
	 * Full Build using batch compiler
	 */
	protected void buildUsingBatchCompiler(String options) throws IOException {
		IWorkspace workspace = ResourcesPlugin.getWorkspace();
		final IWorkspaceRoot workspaceRoot = workspace.getRoot();
		final String targetWorkspacePath = workspaceRoot.getProject(JavaCore.PLUGIN_ID).getLocation().toFile().getCanonicalPath();
		final String sources = targetWorkspacePath + File.separator + "compiler";
		final String bins = targetWorkspacePath + File.separator + "bin"; //$NON-NLS-1$
		final String logs = targetWorkspacePath + File.separator + "log.txt"; //$NON-NLS-1$

		// Warm up
		PrintWriter out = new PrintWriter(new StringWriter());
		PrintWriter err = new PrintWriter(new StringWriter());
		String cmdLine = sources + " -1.4 -g -preserveAllLocals "+(options==null?"":options)+" -d " + bins + " -log " + logs; //$NON-NLS-1$ //$NON-NLS-2$
		for (int i=0; i<2; i++) {
			Main main = new Main(out, err, false);
			main.compile(Main.tokenize(cmdLine));
		}

		// Measures
		int max = MEASURES_COUNT * 2;
		int warnings = 0;
		for (int i = 0; i < max; i++) {
			runGc();
			startMeasuring();
			Main main = new Main(out, err, false);
			main.compile(Main.tokenize(cmdLine));
			stopMeasuring();
			cleanupDirectory(new File(bins));
			warnings = main.globalWarningsCount;
		}
		
		// Commit measures
		commitMeasurements();
		assertPerformance();

		// Store warning
		if (warnings>0) {
			System.out.println("\t- "+warnings+" warnings found while performing batch compilation.");
		}
		if (this.scenarioComment == null) {
			this.scenarioComment = new StringBuffer("["+TEST_POSITION+"]");
		} else {
			this.scenarioComment.append(' ');
		}
		this.scenarioComment.append("warn=");
		this.scenarioComment.append(warnings);
	}

