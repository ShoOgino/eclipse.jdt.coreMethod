	/**
	 * Check the types of some fields (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=248163)
	 * @see #TEST_FIELD_TYPE_SOURCE
	 */
	public void testFieldType(RoundEnvironment roundEnv, Element e, String arg0, String arg1) 
			throws Exception 
	{
		Map<String, VariableElement> fields = new HashMap<String, VariableElement>();
		Iterable<? extends Element> elements;
		// With this line uncommented, test would pass:
		// elements = e.getEnclosedElements();
		// With this line uncommented, test would fail:
		elements = roundEnv.getElementsAnnotatedWith(LookAt.class);
		for (VariableElement field : ElementFilter.fieldsIn(elements)) {
			fields.put(field.getSimpleName().toString(), field);
		}
		
		VariableElement fInt = fields.get("_fInt");
		if (fInt == null) {
			ProcessorTestStatus.fail("Field _fInt was not found");
		}
		if (fInt.getKind() != ElementKind.FIELD) {
			ProcessorTestStatus.fail("ElementKind of field _fInt was " + fInt.getKind() + 
					", expected FIELD");
		}
		TypeMirror fIntType = fInt.asType();
		if (fIntType.getKind() != TypeKind.INT) {
			ProcessorTestStatus.fail("Field _fInt asType returned type kind of " + fIntType.getKind() +
					", expected INT");
		}

		VariableElement fString = fields.get("_fString");
		if (fString == null) {
			ProcessorTestStatus.fail("Field _fString was not found");
		}
		if (fString.getKind() != ElementKind.FIELD) {
			ProcessorTestStatus.fail("ElementKind of field _fString was " + fString.getKind() + 
					", expected FIELD");
		}
		TypeMirror fStringType = fString.asType();
		if (fStringType.getKind() != TypeKind.DECLARED) {
			ProcessorTestStatus.fail("Field _fString asType returned type kind of " + fStringType.getKind() +
					", expected DECLARED");
		}
		VariableElement fFoo = fields.get("_fFoo");
		if (fFoo == null) {
			ProcessorTestStatus.fail("Field _fFoo was not found");
		}
		if (fFoo.getKind() != ElementKind.FIELD) {
			ProcessorTestStatus.fail("ElementKind of field _fFoo was " + fFoo.getKind() + 
					", expected FIELD");
		}
		TypeMirror fFooType = fFoo.asType();
		if (fFooType.getKind() != TypeKind.DECLARED) {
			ProcessorTestStatus.fail("Field _fFoo asType returned type kind of " + fFooType.getKind() +
					", expected DECLARED");
		}
	}

