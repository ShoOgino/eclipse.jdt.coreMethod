	/**
	 * Check the types of some methods (check that the annotation processing uses the parsed MethodParameters
	 * attribute from class files according to JEP 118)
	 * @see #TEST_METHOD_PARAMETERS_TYPE1_SOURCE
	 * @see #TEST_METHOD_PARAMETERS_TYPE2_SOURCE
	 * @see #TEST_METHOD_PARAMETERS_TYPE3_SOURCE
	 */
	public void testMethodParameters(RoundEnvironment roundEnv, Element e, String arg0, String arg1) throws Exception {
		Map<String, ExecutableElement> methods = new HashMap<String, ExecutableElement>();
		Iterable<? extends Element> elements;

		elements = roundEnv.getElementsAnnotatedWith(LookAt.class);
		for (ExecutableElement method : ElementFilter.methodsIn(elements)) {
			methods.put(method.getSimpleName().toString(), method);
		}

		// Examine the easy case, the Foo.doStuff method
		ExecutableElement mDoStuff = methods.get("doStuff");
		if (mDoStuff == null) {
			ProcessorTestStatus.fail("Method doStuff() was not found");
		}
		if (mDoStuff.getKind() != ElementKind.METHOD) {
			ProcessorTestStatus.fail("ElementKind of method doStuff() was " + mDoStuff.getKind() + 
					", expected METHOD");
		}
		// Examine parameters
		List<? extends VariableElement> parameters = mDoStuff.getParameters();
		if (parameters.size() != 2) {
			ProcessorTestStatus.fail("Expected two parameters for doStuff()");
		}
		ProcessorTestStatus.assertEquals("Wrong name", "number", parameters.get(0).getSimpleName().toString());
		ProcessorTestStatus.assertEquals("Wrong name", "textual", parameters.get(1).getSimpleName().toString());

		///////////////////////////////////////////////////////////////////////////////////

		// Cool, now check 'p.Bar.otherStuff' which is also the return type of doStuff
		TypeMirror returnType = mDoStuff.getReturnType();
		if (returnType.getKind() != TypeKind.DECLARED)
			ProcessorTestStatus.fail("TypeKind of method doStuff()'s return type " + returnType.getKind() + 
					", expected DECLARED");

		DeclaredType barType = (DeclaredType) returnType;
		TypeElement bar = (TypeElement) barType.asElement();

		for (Element method : bar.getEnclosedElements()) {
			if (method.getKind() == ElementKind.METHOD)
				methods.put(method.getSimpleName().toString(), (ExecutableElement)method);
		}

		ExecutableElement mOtherStuff = methods.get("otherStuff");
		if (mOtherStuff == null) {
			ProcessorTestStatus.fail("Method otherStuff() was not found");
		}
		if (mOtherStuff.getKind() != ElementKind.METHOD) {
			ProcessorTestStatus.fail("ElementKind of method otherStuff() was " + mOtherStuff.getKind() + 
					", expected METHOD");
		}
		// Examine parameters
		List<? extends VariableElement> otherParameters = mOtherStuff.getParameters();
		if (otherParameters.size() != 2) {
			ProcessorTestStatus.fail("Expected two parameters for otherStuff()");
		}
		ProcessorTestStatus.assertEquals("Wrong name", "fun", otherParameters.get(0).getSimpleName().toString());
		ProcessorTestStatus.assertEquals("Wrong name", "beans", otherParameters.get(1).getSimpleName().toString());

		///////////////////////////////////////////////////////////////////////////////////

		// Examine the enum as returned by Foo.guess method
		ExecutableElement mGuess = methods.get("guess");
		if (mGuess == null) {
			ProcessorTestStatus.fail("Method guess() was not found");
		}
		if (mGuess.getKind() != ElementKind.METHOD) {
			ProcessorTestStatus.fail("ElementKind of method doStuff() was " + mGuess.getKind() + 
					", expected METHOD");
		}

		// Cool, now check 'p.Bar.otherStuff' which is also the return type of doStuff
		TypeMirror guessReturnType = mGuess.getReturnType();
		if (guessReturnType.getKind() != TypeKind.DECLARED)
			ProcessorTestStatus.fail("TypeKind of method guess()'s return type " + guessReturnType.getKind() + 
					", expected DECLARED");

		DeclaredType myEnumType = (DeclaredType) guessReturnType;
		TypeElement myEnumClass = (TypeElement) myEnumType.asElement();

		List<ExecutableElement> ctors = new LinkedList<ExecutableElement>();
		for (Element method : myEnumClass.getEnclosedElements()) {
			if (method.getKind() == ElementKind.CONSTRUCTOR) {
				ctors.add((ExecutableElement)method);
			}
		}

		ProcessorTestStatus.assertEquals("Bad # of constructors for MyEnum", 1, ctors.size());
		// Examine parameters
		List<? extends VariableElement> ctorParameters = ctors.get(0).getParameters();
		ProcessorTestStatus.assertEquals("Bad # of parameters for MyEnum ctor", 1, ctorParameters.size());
		ProcessorTestStatus.assertEquals("Wrong name", "finalIntValue", ctorParameters.get(0).getSimpleName().toString());
	}

