	/**
	 * What this tests test.
	 * This makes sure the internal apt rounding occurs correctly in batch mode.
	 * @throws CoreException
	 */
	public void testAPTRoundingInMixedMode0()
	{
		IProject project = env.getProject( getProjectName() );
		IPath srcRoot = getSourcePath();
		
		String codeX = "package p1;\n"
			+ "\n import org.eclipse.jdt.apt.tests.annotations.aptrounding.*;"
			+ "\n@GenBean\n"
			+ "public class X {}\n";
		
		env.addClass( srcRoot, "p1", "X", codeX );
		
		String codeY = "package p1;\n"
			+ "\n import org.eclipse.jdt.apt.tests.annotations.aptrounding.*;"
			+ "public class Y { @GenBean2 test.Bean _bean = null; }\n";
		
		env.addClass( srcRoot, "p1", "Y", codeY );
		
		String codeA = "package p1;\n"
			+ "\n import org.eclipse.jdt.apt.tests.external.annotations.batch.*;"
			+ "\n@Batch\n"
			+ "public class A {}\n";
		
		env.addClass( srcRoot, "p1", "A", codeA );
		
		String codeB = "package p1;\n"
			+ "\n@Deprecated\n"
			+ "public class B {}\n";
		
		env.addClass( srcRoot, "p1", "B", codeB );
		
		String codeC = "package p1;\n"
			+ "\n import org.eclipse.jdt.apt.tests.external.annotations.batch.*;"
			+ "\n@Batch\n"
			+ "public class C {}\n";
		
		env.addClass( srcRoot, "p1", "C", codeC );
		
		// This one doesn't have annotations.
		String codeD = "package p1; public class D{}";
		env.addClass( srcRoot, "p1", "D", codeD );

		fullBuild( project.getFullPath() );
		expectingMarkers(new String[]{"CompletedSuccessfully", "Called 2 times."});
		
		expectingNoProblems();
		
		// Now run it again to verify that the classloader was successfully bounced
		fullBuild( project.getFullPath() );
		expectingMarkers(new String[]{"CompletedSuccessfully", "Called 2 times."});
		
		expectingNoProblems();
	}

