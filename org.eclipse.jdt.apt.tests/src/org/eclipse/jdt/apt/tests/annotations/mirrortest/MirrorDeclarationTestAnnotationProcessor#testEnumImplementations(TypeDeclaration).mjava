	/**
	 * Tests for:
	 * EnumConstantDeclaration
	 * EnumDeclaration 
	 * 
	 * @param testClass
	 */
	private void testEnumImplementations(TypeDeclaration testClass) {
		
		//EnumDeclaration tests
		Collection<TypeDeclaration> nestedTypes = testClass.getNestedTypes();
		EnumDeclaration enumDecl = null;
		for(TypeDeclaration decl : nestedTypes) {
			if(decl.toString().endsWith("EnumDec"))
				enumDecl = (EnumDeclaration)decl;
		}
		assertTrue("EnumDeclaration exists", enumDecl != null);

		Collection<EnumConstantDeclaration> enumConstDecls = enumDecl.getEnumConstants();
		assertEquals("Number of enum constants", 2, enumConstDecls.size());
		EnumConstantDeclaration enumConstAardvark = null;
		EnumConstantDeclaration enumConstAnteater = null;
		for(EnumConstantDeclaration enumConst : enumConstDecls) {
			if(enumConst.toString().equals("aardvark"))
				enumConstAardvark = enumConst;
			if(enumConst.toString().equals("anteater"))
				enumConstAnteater = enumConst;
		}
		assertTrue("enum constant \"aardvark\" exists", enumConstAardvark != null);
		assertTrue("enum constant \"anteater\" exists", enumConstAnteater != null);
		
		//EnumConstantDeclaration tests
		EnumDeclaration declaringTypeAardvark = enumConstAardvark.getDeclaringType();
		EnumDeclaration declaringTypeAnteater = enumConstAnteater.getDeclaringType();
		assertEquals("Declaring type is EnumDec", "mirrortestpackage.DeclarationTestClass.EnumDec", declaringTypeAardvark.toString());
		assertEquals("Declaring type is EnumDec", "mirrortestpackage.DeclarationTestClass.EnumDec", declaringTypeAnteater.toString());
		
		
		//Modifier tests
		Modifier[] valuesArray = Modifier.values();
		int valuesArrayLength = valuesArray.length;
		assertEquals("Modifier.values() array length", 11, valuesArrayLength);

		assertEquals("Modifier.ABSTRACT", "abstract", Modifier.ABSTRACT.toString());
		assertEquals("Modifier.FINAL", "final", Modifier.FINAL.toString());
		assertEquals("Modifier.NATIVE", "native", Modifier.NATIVE.toString());
		assertEquals("Modifier.PRIVATE", "private", Modifier.PRIVATE.toString());
		assertEquals("Modifier.PROTECTED", "protected", Modifier.PROTECTED.toString());
		assertEquals("Modifier.PUBLIC", "public", Modifier.PUBLIC.toString());
		assertEquals("Modifier.STATIC", "static", Modifier.STATIC.toString());
		assertEquals("Modifier.STRICTFP", "strictfp", Modifier.STRICTFP.toString());
		assertEquals("Modifier.SYNCHRONIZED", "synchronized", Modifier.SYNCHRONIZED.toString());
		assertEquals("Modifier.TRANSIENT", "transient", Modifier.TRANSIENT.toString());
		assertEquals("Modifier.VOLATILE", "volatile", Modifier.VOLATILE.toString());
		assertEquals("Modifier.valueOf(\"PUBLIC\")", Modifier.PUBLIC, Modifier.valueOf("PUBLIC"));
	}

