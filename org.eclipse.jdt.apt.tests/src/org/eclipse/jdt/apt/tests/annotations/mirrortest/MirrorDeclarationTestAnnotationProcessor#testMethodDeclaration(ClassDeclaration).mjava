	/**
	 * Tests for:
	 * MethodDeclaration
	 * ParameterDeclaration
	 * 
	 * @param testClassDec
	 */
	private void testMethodDeclaration(ClassDeclaration testClassDec) {
		
		//Tests for MethodDeclaration
		Collection<MethodDeclaration> methodDecls = testClassDec.getMethods();
		MethodDeclaration methodDec = null;
		MethodDeclaration methodDecNoArg = null;
		for(MethodDeclaration method : methodDecls) {
			if(method.toString().endsWith("methodDec(int k, String[] t)"))
				methodDec = method;
			if(method.toString().endsWith("methodDecNoArg()"))
				methodDecNoArg = method;
		}
		assertTrue("Method methodDec exists", methodDec != null);

		Collection<ReferenceType> thrownTypes = methodDec.getThrownTypes();
		assertEquals("Number of types thrown", 1, thrownTypes.size());
		
		ReferenceType thrownType = thrownTypes.iterator().next();
		assertEquals("methodDec throws Exception", "java.lang.Exception", thrownType.toString());
		assertTrue("methodDec is varargs", methodDec.isVarArgs());
		assertTrue("Method methodDecNoArg exists", methodDecNoArg != null);
		assertEquals("Number of types thrown", 0, methodDecNoArg.getThrownTypes().size());
		assertTrue("methodDecNoArg is not varargs", !methodDecNoArg.isVarArgs());

		
		//Tests for ParameterDeclaration
		Collection<ParameterDeclaration> paramDecls = methodDec.getParameters();
		ParameterDeclaration paramDeclInt = null;
		ParameterDeclaration paramDeclString = null;
		for(ParameterDeclaration param : paramDecls) {
			if(param.toString().startsWith("int"))
				paramDeclInt = param;
			if(param.toString().startsWith("String[]"))
				paramDeclString = param;
		}
		assertTrue("int parameter exists", paramDeclInt != null);
		assertEquals("Parameter type is int", "int", paramDeclInt.getType().toString());
		assertTrue("String[] parameter exists", paramDeclString != null);
		assertEquals("Parameter type is String[]", "java.lang.String[]", paramDeclString.getType().toString());
		assertEquals("Number of parameters in methodDecNoArg", 0, methodDecNoArg.getParameters().size());
	}

