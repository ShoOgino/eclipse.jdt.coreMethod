	/**
	 * Tests for:
	 * ClassDeclaration
	 * ConstructorDeclaration
	 * 
	 * @param testClass
	 */
	private void testClassDeclaration(ClassDeclaration testClassDec) {
			
		//ClassDeclaration tests
		Collection<ConstructorDeclaration> constructDecls = testClassDec.getConstructors();
		ProcessorTestStatus.assertEquals("Number of constructors", 2, constructDecls.size());

		ConstructorDeclaration constructNoArg = null;
		ConstructorDeclaration constructIntArg = null;
		for(ConstructorDeclaration construct : constructDecls) {
			if(construct.toString().endsWith("()"))
				constructNoArg = construct;
			if(construct.toString().endsWith("(int j)"))
				constructIntArg = construct;
		}
		ProcessorTestStatus.assertTrue("constructor with no args", constructNoArg != null);
		ProcessorTestStatus.assertTrue("constructor with one (int) arg", constructIntArg != null);
		
		Collection<MethodDeclaration> methodDecls = testClassDec.getMethods();
		ProcessorTestStatus.assertEquals("Number of methods", 2, methodDecls.size());

		MethodDeclaration methodDecl = null;
		methodDecl = methodDecls.iterator().next();
		ProcessorTestStatus.assertTrue("method declaration exists", methodDecl != null);
		
		ClassType superClass = testClassDec.getSuperclass();
		ProcessorTestStatus.assertEquals("Object is only super", "java.lang.Object", superClass.toString());	
	}

