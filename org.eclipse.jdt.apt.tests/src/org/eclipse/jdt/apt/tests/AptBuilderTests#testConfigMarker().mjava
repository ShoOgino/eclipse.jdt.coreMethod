	// After fix for https://bugs.eclipse.org/bugs/show_bug.cgi?id=185601,
	// the config marker 'Generated source folder * is not in classpath'
	// is not easy to simulate. So, this test doesn't really do anything
	public void testConfigMarker() throws Exception{
		final String projectName = "ConfigMarkerTestProject";
		final IJavaProject javaProj = createJavaProject( projectName );
		// apt is currently disabled save off the cp before configuration
		final IClasspathEntry[] cp = javaProj.getRawClasspath();
		IProject project = env.getProject( projectName );
		IPath srcRoot = getSourcePath( projectName );
		// this will cause a type generation.
		String code = "package pkg;\n"
			+ "import org.eclipse.jdt.apt.tests.annotations.helloworld.HelloWorldAnnotation;"
			+ "\npublic class Foo{\n"
			+ "    @HelloWorldAnnotation\n"
			+ "    public static void main( String[] argv ){}"
			+ "\n}";

		env.addClass( srcRoot, "pkg", "Foo", code );

		AptConfig.setEnabled(javaProj, true);
		fullBuild( project.getFullPath() );
		expectingNoProblems();
		expectingNoMarkers();

		// wipe out the source folder from the classpath.
		javaProj.setRawClasspath(cp, null);
		fullBuild( project.getFullPath() );
		expectingNoProblems();
		// classpath should be updated with an entry for the source folder
		// make sure we do not post the marker about the incorrect classpath
		expectingNoMarkers();

		// take out the annotation and no type generation will occur.
		code = "package pkg;\n"
			+ "\npublic class Foo{\n"
			+ "    public static void main( String[] argv ){}"
			+ "\n}";

		env.addClass( srcRoot, "pkg", "Foo", code );
		fullBuild( project.getFullPath() );
		expectingNoProblems();
		// Make sure we cleaned out config marker from previous build
		// We don't need to generate types, hence we should not register the config marker
		expectingNoMarkers();
	}

