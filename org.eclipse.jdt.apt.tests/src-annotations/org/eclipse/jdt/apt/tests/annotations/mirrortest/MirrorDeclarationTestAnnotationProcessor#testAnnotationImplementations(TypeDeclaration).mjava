	/**
	 * Tests for:
	 * Annotation Mirror
	 * AnnotationTypeDeclaration
	 * AnnotationTypeElementDeclaration
	 * AnnotationValue
	 * 
	 * @param testClass TypeDeclaration
	 * 
	 */
	private void testAnnotationImplementations(TypeDeclaration testClass) {
		
		//AnnotationMirror tests
		Collection<AnnotationMirror> annoMirrors = testClass.getAnnotationMirrors();
		ProcessorTestStatus.assertEquals("Number of annotation mirrors", 1, annoMirrors.size());
		
        AnnotationMirror annoMirror = annoMirrors.iterator().next();
        ProcessorTestStatus.assertTrue("Annotation mirror contents", annoMirror.toString().startsWith("@MirrorDeclarationTestAnnotation"));
        
        AnnotationType annoType = annoMirror.getAnnotationType();
        ProcessorTestStatus.assertTrue("AnnotationType name", annoType.toString().endsWith("mirrortest.MirrorDeclarationTestAnnotation"));
        

        //AnnotationTypeDeclaration tests
        AnnotationTypeDeclaration annoTypeDecl = annoType.getDeclaration();
        ProcessorTestStatus.assertEquals("AnnotationTypeDeclaration same as AnnotationType", annoType, annoTypeDecl);
        
        
        //AnnotationTypeElementDeclaration and AnnotationValue tests
        Collection<AnnotationTypeElementDeclaration> elementDeclarations = annoTypeDecl.getMethods();
        ProcessorTestStatus.assertEquals("Number of methods on annotation", 2, elementDeclarations.size());

        AnnotationTypeElementDeclaration elementString = null;
        AnnotationTypeElementDeclaration elementInt = null;
        for(AnnotationTypeElementDeclaration ated : elementDeclarations) {
        	if(ated.toString().startsWith("S")) {
        		elementString = ated;
                SourcePosition posAted = ated.getPosition();
                ProcessorTestStatus.assertTrue("position should be null", posAted == null); // the anno is declared in binary - no AST.
        	}        		
        	if(ated.toString().startsWith("i"))
        		elementInt = ated;
        }
        ProcessorTestStatus.assertEquals("declaring type same as AnnotationTypeDeclaration", annoTypeDecl, elementString.getDeclaringType());
        ProcessorTestStatus.assertEquals("declaring type same as AnnotationTypeDeclaration", annoTypeDecl, elementInt.getDeclaringType());

        AnnotationValue valueString = elementString.getDefaultValue();
        SourcePosition posVS = valueString.getPosition();
        ProcessorTestStatus.assertTrue("position should be null", posVS == null); // the anno is declared in binary - no AST.
        AnnotationValue valueInt = elementInt.getDefaultValue();
        ProcessorTestStatus.assertEquals("", "bob", valueString.getValue());
        ProcessorTestStatus.assertEquals("", new Integer(3), valueInt.getValue());
        ProcessorTestStatus.assertEquals("", "bob", valueString.toString());
        ProcessorTestStatus.assertEquals("", "3", valueInt.toString());
	}

