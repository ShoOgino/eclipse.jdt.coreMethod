	private void compare(final String name, final Object actualValue){
		if( name.length() == 1 )
		{
			final Class<?> expectedType;
			final Object expectedValue;
			switch(name.charAt(0))
			{
			case 'z':
				expectedType = Boolean.class;
				expectedValue = Boolean.TRUE;
				break;
			case 'b':
				expectedType = Byte.class;
				expectedValue = BYTE_49;
				break;
			case 'c':
				expectedType = Character.class;
				expectedValue = CHAR_ONE;
				break;
			case 's':
				expectedType = Short.class;
				expectedValue = SHORT_49;
				break;
			case 'i':
				expectedType = Integer.class;
				expectedValue = INTEGER_49;
				break;
			case 'l':
				expectedType = Long.class;
				expectedValue = LONG_49;
				break;
			case 'f':
				expectedType = Float.class;
				expectedValue = FLOAT_49;
				break;
			case 'd':
				expectedType = Double.class;
				expectedValue = DOUBLE_49;
				break;
			default:
				junit.framework.TestCase.assertNotNull("unexpected member " + name, null);
				throw new IllegalStateException(); // won't get here.
			}
			assertValueTypeMatch(name, actualValue, expectedType, expectedValue);
		}
		else{
			final Class<?> expectedElementType;
			final Object[] expectedElementValues;
			if( "booleans".equals(name) ){
				expectedElementType = Boolean.class;
				expectedElementValues = new Object[]{Boolean.TRUE, Boolean.TRUE};
			}
			else if( "chars".equals(name) ){
				expectedElementType = Character.class;
				expectedElementValues = new Object[]{CHAR_ONE, CHAR_TWO};
			}
			else if( "bytes".equals(name) ){
				expectedElementType = Byte.class;
				expectedElementValues = new Object[]{BYTE_49, BYTE_50};
			}
			else if( "shorts".equals(name) ){
				expectedElementType = Short.class;
				expectedElementValues = new Object[]{SHORT_49, SHORT_50};
			}
			else if( "ints".equals(name) ){
				expectedElementType = Integer.class;
				expectedElementValues = new Object[]{INTEGER_49, INTEGER_50};
			}
			else if( "longs".equals(name) ){
				expectedElementType = Long.class;
				expectedElementValues = new Object[]{LONG_49, LONG_50};
			}
			else if( "floats".equals(name) ){
				expectedElementType = Float.class;
				expectedElementValues = new Object[]{FLOAT_49, FLOAT_50};

			}
			else if( "doubles".equals(name) ){
				expectedElementType = Double.class;
				expectedElementValues = new Object[]{DOUBLE_49, DOUBLE_50};
			}
			else if( "str".equals(name) ){
				assertValueTypeMatch(name, actualValue, String.class, "string");
				return;
			}
			else{
				junit.framework.TestCase.assertNotNull("unexpected member " + name, null);
				throw new IllegalStateException(); // won't get here.
			}
			@SuppressWarnings("unchecked")
			List<AnnotationValue> actualList = (List<AnnotationValue>)actualValue;
			assertArrayValueTypeMatch(name, actualList, expectedElementType, expectedElementValues);
		}
	}

