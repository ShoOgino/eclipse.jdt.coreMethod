	private static String annoValueToString(AnnotationValue value) {
		if (value == null) {
			return "null";
		}
		Object v = value.getValue();
		if (v == null) {
			return "null";
		}
		if (v instanceof EnumConstantDeclaration) {
			return ((EnumConstantDeclaration)v).getSimpleName();
		}
		else if (v instanceof TypeMirror) {
			// TODO: clearly we also need a typeMirrorToString utility function
			return ((TypeMirror)v).toString();
		}
		else if (v instanceof AnnotationMirror) {
			return annoMirrorToString((AnnotationMirror)v);
		}
		else if (v instanceof Collection<?>) {
			// Collection<AnnotationValue>, for an array value
			StringBuilder sb = new StringBuilder();
			sb.append('{');
			boolean first = true;
			for (Object item : (Collection<?>)v) {
				if (!first) {
					sb.append(", ");
				}
				first = false;
				sb.append(annoValueToString((AnnotationValue)item));
			}
			sb.append('}');
			return sb.toString();
		}
		// boxed primitive or String
		return v.toString();
	}

