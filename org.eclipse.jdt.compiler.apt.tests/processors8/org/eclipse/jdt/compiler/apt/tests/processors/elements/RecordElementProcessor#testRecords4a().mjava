	public void testRecords4a() {
		Set<? extends Element> elements = roundEnv.getRootElements();
		TypeElement record = null;
		for (Element element : elements) {
			if ("Point".equals(element.getSimpleName().toString())) {
				record = (TypeElement) element;
			}
		}
		assertNotNull("TypeElement for record should not be null", record);
		verifyAnnotations(record, new String[]{"@Deprecated()"});

		List<? extends Element> enclosedElements = record.getEnclosedElements();
		assertNotNull("enclosedElements for record should not be null", enclosedElements);
		List<RecordComponentElement> recordComponentsIn = ElementFilter.recordComponentsIn(enclosedElements);
		int size = recordComponentsIn.size();
		assertEquals("incorrect no of record components", 5, size);

		Element element = recordComponentsIn.get(2);
		assertEquals("Incorrect kind of element", ElementKind.RECORD_COMPONENT, element.getKind());
		RecordComponentElement recordComponent = (RecordComponentElement) element;
		verifyAnnotations(recordComponent, new String[]{});

		element = recordComponentsIn.get(3);
		assertEquals("Incorrect kind of element", ElementKind.RECORD_COMPONENT, element.getKind());
		recordComponent = (RecordComponentElement) element;
		verifyAnnotations(recordComponent, new String[]{});

		element = recordComponentsIn.get(4);
		assertEquals("Incorrect kind of element", ElementKind.RECORD_COMPONENT, element.getKind());
		recordComponent = (RecordComponentElement) element;
		verifyAnnotations(recordComponent, new String[]{});
		List<ExecutableElement> methodsIn = ElementFilter.methodsIn(enclosedElements);
		List<String> actualMethodNames = methodsIn.stream().filter((m) -> m.getSimpleName().toString().startsWith("comp"))
																	.map((m) -> m.getSimpleName().toString())
																	.collect(Collectors.toList());
		assertEquals("incorrect method", 5, actualMethodNames.size());
		for (ExecutableElement method : methodsIn) {
			if (method.getSimpleName().toString().equals("comp_")) {
				verifyAnnotations(method, new String[]{});
				TypeMirror asType = method.asType();
				verifyAnnotations(asType, new String[]{});
			} else if (method.getSimpleName().toString().equals("comp2_")) {
				verifyAnnotations(method, new String[]{"@MyAnnot2()"});
				TypeMirror asType = method.asType();
				verifyAnnotations(asType, new String[]{});
			} else if (method.getSimpleName().toString().equals("comp3_")) {
				verifyAnnotations(method, new String[]{"@MyAnnot3()"});
				TypeMirror asType = method.asType();
				verifyAnnotations(asType, new String[]{});
			} else if (method.getSimpleName().toString().equals("comp4_")) {
				verifyAnnotations(method, new String[]{});
				TypeMirror asType = method.asType();
				verifyAnnotations(asType, new String[]{});
			} else if (method.getSimpleName().toString().equals("comp5_")) {
				verifyAnnotations(method, new String[]{});
				TypeMirror asType = method.asType();
				verifyAnnotations(asType, new String[]{});
			}
		}
		methodsIn = ElementFilter.constructorsIn(enclosedElements);
		assertEquals("incorrect method", 1, methodsIn.size());
		ExecutableElement m = methodsIn.get(0);
		verifyAnnotations(m, new String[]{});
		TypeMirror asType = m.asType();
		verifyAnnotations(asType, new String[]{});
		List<? extends VariableElement> parameters = m.getParameters();
		assertEquals("incorrect parameters", 5, parameters.size());
		for (VariableElement v : parameters) {
			if (v.getSimpleName().toString().equals("comp_")) {
				verifyAnnotations(v, new String[]{"@MyAnnot()"}); // ECJ fails
			} else if (v.getSimpleName().toString().equals("comp2_")) {
				verifyAnnotations(v, new String[]{"@MyAnnot2()"});
			} else if (v.getSimpleName().toString().equals("comp3_")) {
				verifyAnnotations(v, new String[]{}); // ECJ fails
			} else if (v.getSimpleName().toString().equals("comp4_")) {
				verifyAnnotations(v, new String[]{}); // ECJ fails
			} else if (v.getSimpleName().toString().equals("comp5_")) {
				verifyAnnotations(v, new String[]{});
			}
		}
	}

