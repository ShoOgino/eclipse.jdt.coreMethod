	public void testRecords9() {
			String[] arr1 = new String[] { "x", "bigInt", "r1", "floatValue", "c", "recordInstance" };
			TypeKind[] arr2 = new TypeKind[] { TypeKind.INT, TypeKind.DECLARED, TypeKind.DECLARED, TypeKind.FLOAT,
					TypeKind.DECLARED, TypeKind.DECLARED };
			List<String> names = Arrays.asList(arr1);
			List<TypeKind> types = Arrays.asList(arr2);
			
	        Element record = _elementUtils.getTypeElement("records.R3");
	        List<? extends Element> allElements = record.getEnclosedElements();
	        List<RecordComponentElement> components = ElementFilter.recordComponentsIn(allElements);
	        List<ExecutableElement> accessors = components.stream().map
	                (RecordComponentElement::getAccessor).collect(Collectors.toList());
	        assertEquals("Size mismatch", names.size(), accessors.size());
	        for (ExecutableElement accessor : accessors) {
	            String name = accessor.getSimpleName().toString();
	            int indexOf = names.indexOf(name);
	            assertSame("Type kind not same for \"" + name + "\".", types.get(indexOf), accessor.getReturnType().getKind());
	            assertTrue("should be executable type for \"" + name + "\".", (accessor.asType() instanceof ExecutableType));
	            assertNull("should be null", accessor.getDefaultValue());
	            if (accessor.getSimpleName().toString().equals("c")) {
	            	assertEquals("annotations count mismatch for \"" + name + "\".", 1, accessor.getAnnotationMirrors().size());
	            	Set<? extends ExecutableElement> accessorAnnotations = accessor.getAnnotationMirrors().get(0)
	                        .getElementValues().keySet();
	            	assertEquals("annotations type element mismatch for \"" + name + "\".", 1, accessorAnnotations.size());
	            	int val = (int) accessorAnnotations.toArray(new ExecutableElement[0])[0].getDefaultValue()
	                        .getValue();
	            	assertEquals("Incorrect default value for \"" + name + "\".", 1, val);
	            }
	            assertTrue("Parameters should be empty for \"" + name + "\".", accessor.getParameters().isEmpty());
	            assertTrue("Thrown types should be empty for \"" + name + "\".", accessor.getThrownTypes().isEmpty());
	            assertTrue("Type parameters should be empty for \"" + name + "\".", accessor.getTypeParameters().isEmpty());
	            assertFalse("Should not be default for \"" + name + "\".", accessor.isDefault());
	            assertFalse("Should not be varargs for \"" + name + "\".", accessor.isVarArgs());
	        }
	}

