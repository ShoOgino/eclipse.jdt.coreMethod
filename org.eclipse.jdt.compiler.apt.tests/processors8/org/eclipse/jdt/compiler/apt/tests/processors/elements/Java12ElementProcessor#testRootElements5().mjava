	public void testRootElements5() throws IOException {
		Set<? extends Element> rootElements = this.roundEnv.getRootElements();
		List<String> names = new ArrayList<>();
		Set<Element> modules = new HashSet<Element>();
		for (Element element : rootElements) {
			Element root = getRoot(element);
			String modName = null;
			ModuleElement mod = null;
			if (element instanceof ModuleElement) {
				mod = (ModuleElement) element;
				modName = mod.getQualifiedName().toString();
				if (!modName.equals("java.base")) {
					names.add(modName);
					modules.add(element);
				}
				assertNull("module should not have an enclosing element", root);

			} else {
				if (root instanceof ModuleElement) {
					modName = ((ModuleElement) root).getQualifiedName().toString();
					if (!modName.equals("java.base")) {
						names.add(modName);
						modules.add(root);
					}
				}
			}
		}
		// Deliberately ignoring the extra bogus module to let this pass, so we can test the binary mode in next round
		assertTrue("incorrect no of modules in root elements in "+ this.mode + " mode", (3 <= modules.size()));
	}

