	public void testBug498022b() {
		Set<? extends Element> rootElements = roundEnv.getRootElements();
		TypeElement type = null;
		TypeElement anotherType = null;
		for (Element element : rootElements) {
			if (element.getSimpleName().toString().equals("OtherAnnotatedClass")) {
				type = (TypeElement) element;
			} else if (element.getSimpleName().toString().equals("SomeAnnotatedClass")) {
				anotherType = (TypeElement) element;
			}
		}
		verifyAnnotations(type, new String[] {"@targets.model9.q.FooBarAnnotation()"});
		verifyAnnotations(anotherType, new String[] {"@targets.model9.q.FooBarAnnotation(otherClasses=[targets.model9.q.OtherAnnotatedClass.class,])"});
		List<? extends AnnotationMirror> annots = anotherType.getAnnotationMirrors();
		AnnotationMirror annotationMirror = annots.get(0);
		Map<? extends ExecutableElement, ? extends AnnotationValue> values = annotationMirror.getElementValues();
		AnnotationValue value = null;
		Set<? extends ExecutableElement> keys = values.keySet();
		for (ExecutableElement executableElement : keys) {
			if (executableElement.getSimpleName().toString().equals("otherClasses"))
				value = values.get(executableElement);
		}
		assertNotNull("value should not be null", value);
		@SuppressWarnings("rawtypes")
		List list = (List) value.getValue();
		assertEquals("Incorrect no of values", 1, list.size());
		AnnotationValue annotVal = (AnnotationValue) list.get(0);
		DeclaredType declaredType = (DeclaredType) annotVal.getValue();
		TypeElement typeEl = (TypeElement) declaredType.asElement();
		verifyAnnotations(typeEl, new String[] {"@targets.model9.q.FooBarAnnotation()"});
	}

