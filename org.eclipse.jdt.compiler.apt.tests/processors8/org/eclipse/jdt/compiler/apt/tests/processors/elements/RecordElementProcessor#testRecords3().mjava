	/*
	 * Test that the implicit modifiers are set for a record and its methods
	 */
	public void testRecords3() {
		Set<? extends Element> elements = roundEnv.getRootElements();
		TypeElement record = null;
		for (Element element : elements) {
			if ("Point".equals(element.getSimpleName().toString())) {
				record = (TypeElement) element;
			}
		}
		assertNotNull("TypeElement for record should not be null", record);
		Set<Modifier> modifiers = record.getModifiers();
		assertTrue("record should be public", modifiers.contains(Modifier.PUBLIC));
		assertTrue("record should be final", modifiers.contains(Modifier.FINAL));
		List<? extends Element> enclosedElements = record.getEnclosedElements();
		List<ExecutableElement> methods = ElementFilter.methodsIn(enclosedElements);
		ExecutableElement equalsMethod = null;
		ExecutableElement toSMethod = null;
		ExecutableElement hashMethod = null;
		for (ExecutableElement executableElement : methods) {
			if (executableElement.getSimpleName().toString().equals("equals")) {
				equalsMethod = executableElement;
			} else if (executableElement.getSimpleName().toString().equals("hashCode")) {
				hashMethod = executableElement;
			} else if (executableElement.getSimpleName().toString().equals("toString")) {
				toSMethod = executableElement;
			}
		}

		modifiers = equalsMethod.getModifiers();
		assertTrue("should be public", modifiers.contains(Modifier.PUBLIC));
		assertFalse("should not be final", modifiers.contains(Modifier.FINAL));
		modifiers = toSMethod.getModifiers();
		assertTrue("should be public", modifiers.contains(Modifier.PUBLIC));
		assertFalse("should not be final", modifiers.contains(Modifier.FINAL));
		modifiers = hashMethod.getModifiers();
		assertTrue("should be public", modifiers.contains(Modifier.PUBLIC));
		assertFalse("should not be final", modifiers.contains(Modifier.FINAL));
	}

