	public void testRecords6() {
		TypeElement recordElement = _elementUtils.getTypeElement("records.Record2");
		final List<? extends Element> members = _elementUtils.getAllMembers(recordElement);
		final List<? extends Element> enclosedElements = recordElement.getEnclosedElements();

		final HashSet<? extends Element> enclosedElementsSet = new HashSet<Element>(recordElement.getEnclosedElements());

		List<ExecutableElement> constructors = ElementFilter.constructorsIn(enclosedElements);
		List<ExecutableElement> methods = ElementFilter.methodsIn(enclosedElements);
		List<VariableElement> fields = ElementFilter.fieldsIn(enclosedElements);

		Set<ExecutableElement> constructorsSet = ElementFilter.constructorsIn(enclosedElementsSet);
		Set<ExecutableElement> methodsSet = ElementFilter.methodsIn(enclosedElementsSet);
		Set<VariableElement> fieldsSet = ElementFilter.fieldsIn(enclosedElementsSet);

		assertTrue("Constructors must be within all members", members.containsAll(constructors));
		assertTrue("Constructors must be within enclosed elements", enclosedElements.containsAll(constructors));
		assertEquals("Overloaded versions of ElementFilter.constructorsIn() must return equal results",
				new HashSet<Element>(constructors), constructorsSet);

		assertTrue("Methods must be within all members", members.containsAll(methods));
		assertTrue("Methods must be within enclosed elements", enclosedElements.containsAll(methods));
		assertEquals("Overloaded versions of ElementFilter.methodsIn() must return equal results",
				new HashSet<Element>(methods), methodsSet);

		assertTrue("Fields must be within all members", members.containsAll(fields));
		assertTrue("Fields must be within enclosed elements", enclosedElements.containsAll(fields));
		assertEquals("Overloaded versions of ElementFilter.fieldsIn() must return equal results", new HashSet<Element>(fields), fieldsSet);
	}

