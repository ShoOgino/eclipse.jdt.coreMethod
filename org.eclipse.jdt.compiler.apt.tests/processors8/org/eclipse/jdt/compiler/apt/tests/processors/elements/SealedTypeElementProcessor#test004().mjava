	public void test004() {
		fetchElements();
		assertNotNull("package null", topPkg2);
		List<? extends Element> enclosedElements = topPkg2.getEnclosedElements();
		assertEquals("incorrect no of enclosed elements", 1, enclosedElements.size());
		TypeElement topType = null;
		for (Element element : enclosedElements) {
			if (element instanceof TypeElement) {
				TypeElement temp = (TypeElement) element;
				if (temp.getQualifiedName().toString().equals("sealed.sub2.TopMain2")) {
					topType = (TypeElement) element;
					break;
				}
			}
		}
		assertNotNull("type should not be null", topType);
		enclosedElements = topType.getEnclosedElements();
		assertEquals("incorrect no of enclosed elements", 3, enclosedElements.size());
		
		for (Element element : enclosedElements) {
			if (!(element instanceof TypeElement))
				continue;
			TypeElement typeEl = (TypeElement) element;
			if (typeEl.getQualifiedName().toString().equals("sealed.sub2.TopMain2.SealedIntf")) {
				Set<Modifier> modifiers = typeEl.getModifiers();
				assertTrue("should contain modifier sealed", modifiers.contains(sealed));
				assertTrue("should contain modifier static", modifiers.contains(modifierStatic));
				assertFalse("should not contain modifier final", modifiers.contains(modifierFinal));
				assertFalse("should not contain modifier non-sealed", modifiers.contains(non_Sealed));
				TypeMirror superclass = typeEl.getSuperclass();
				assertTrue("should be a NoType", (superclass instanceof NoType));
				List<? extends TypeMirror> permittedSubclasses = typeEl.getPermittedSubclasses();
				assertEquals("incorrect no of permitted types", 1, permittedSubclasses.size());
				for (TypeMirror typeMirror : permittedSubclasses) {
					TypeElement permittedTypeEl = (TypeElement) _typeUtils.asElement(typeMirror);
					if (permittedTypeEl.getQualifiedName().toString().equals("sealed.sub2.TopMain2.MyRecord")) {
						superclass = permittedTypeEl.getSuperclass();
						modifiers = permittedTypeEl.getModifiers();
						assertTrue("record should contain modifier final", modifiers.contains(modifierFinal));
						assertTrue("should contain modifier static", modifiers.contains(modifierStatic));
						assertFalse("should not contain modifier sealed", modifiers.contains(sealed));
						assertFalse("should not contain modifier non-sealed", modifiers.contains(non_Sealed));
						assertFalse("should not be a NoType", (superclass instanceof NoType));
						TypeElement superClassElement = (TypeElement) _typeUtils.asElement(superclass);
						assertNotNull("type element should not be null", superClassElement);
						assertEquals("incorrect super class", "java.lang.Record", superClassElement.getQualifiedName().toString());
						List<? extends TypeMirror> interfaces = permittedTypeEl.getInterfaces();
						assertEquals("incorrect no of super interfaces", 1, interfaces.size());
						TypeElement superInterfaceElement = (TypeElement) _typeUtils.asElement(interfaces.get(0));
						assertEquals("incorrect super interface", "sealed.sub2.TopMain2.SealedIntf", superInterfaceElement.getQualifiedName().toString());
						modifiers = superInterfaceElement.getModifiers();
						assertTrue("should contain modifier sealed", modifiers.contains(sealed));
						assertTrue("should contain modifier static", modifiers.contains(modifierStatic));
						assertFalse("should not contain modifier final", modifiers.contains(modifierFinal));
						assertFalse("should not contain modifier non-sealed", modifiers.contains(non_Sealed));
					}
				}
				break;
			}
		}
	}

