	public void _test005() {
		fetchElements();
		assertNotNull("package null", topPkg3);
		List<? extends Element> enclosedElements = topPkg3.getEnclosedElements();
		assertEquals("incorrect no of enclosed elements", 1, enclosedElements.size());
		TypeElement topType = null;
		for (Element element : enclosedElements) {
			if (element instanceof TypeElement) {
				TypeElement temp = (TypeElement) element;
				if (temp.getQualifiedName().toString().equals("sealed.sub3.TopMain3")) {
					topType = (TypeElement) element;
					break;
				}
			}
		}
		assertNotNull("type should not be null", topType);
		enclosedElements = topType.getEnclosedElements();
		assertEquals("incorrect no of enclosed elements", 4, enclosedElements.size());
		TypeElement sealedIntf = null;
		TypeElement enumElement = null;
		for (Element element : enclosedElements) {
			if (!(element instanceof TypeElement))
				continue;
			TypeElement typeEl = (TypeElement) element;
			Set<Modifier> modifiers = null;
			if (typeEl.getQualifiedName().toString().equals("sealed.sub3.TopMain3.SealedIntf")) {
				sealedIntf = typeEl;
				modifiers = typeEl.getModifiers();
				assertTrue("should contain modifier sealed", modifiers.contains(sealed));
				assertFalse("should not contain modifier final", modifiers.contains(modifierFinal));
				assertTrue("should contain modifier static", modifiers.contains(modifierStatic));
				assertFalse("should not contain modifier non-sealed", modifiers.contains(non_Sealed));
			} else if (typeEl.getQualifiedName().toString().equals("sealed.sub3.TopMain3.MyEnum")) {
				enumElement = typeEl;
				modifiers = typeEl.getModifiers();
				assertTrue("should contain modifier sealed", modifiers.contains(sealed));
				assertFalse("enum should not contain modifier final", modifiers.contains(modifierFinal));
				assertTrue("should contain modifier static", modifiers.contains(modifierStatic));
				assertFalse("should not contain modifier non-sealed", modifiers.contains(non_Sealed));
			}
		}
		assertNotNull("type element should not null", sealedIntf);
		assertNotNull("type element should not null", enumElement);
	}

