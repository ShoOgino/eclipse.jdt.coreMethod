	// Same as above, but use getRecordComponents() instead of getEnclosedElements()
	public void testRecords5a() {
		Map<String, TypeKind> expRecComps = new HashMap<>();
		expRecComps.put("x", TypeKind.INT);
		expRecComps.put("i", TypeKind.DECLARED);
		expRecComps.put( "r", TypeKind.DECLARED);
		expRecComps.put("t", TypeKind.DECLARED);

		String[] arr2 = new String[] {"x", "i", "r", "t"};
		List<String> expRecComppNames = Arrays.asList(arr2);

        TypeElement recordElement = _elementUtils.getTypeElement("records.Record2");
        List<? extends Element> recordElements = recordElement.getRecordComponents();
        List<RecordComponentElement> actRecComps = ElementFilter.recordComponentsIn(recordElements);
        //checking recComp  size
        assertEquals("expected enclosed Record Components size mismatch", expRecComps.size(), actRecComps.size());
        //checking for types for the given record component name.
        for (RecordComponentElement actRecComp : actRecComps) {
            String key = actRecComp.getSimpleName().toString();
            assertEquals("expected enclosed Record Components mismatch", expRecComps.get(key), actRecComp.asType().getKind());
        }

        List<String> actualRecordCompNames = actRecComps.stream().map((m) -> m.getSimpleName().toString()).collect(Collectors.toList());

        if (!actualRecordCompNames.containsAll(expRecComppNames)) {
        	fail(" expected enclosed record components mismatch - expected at least : " + expRecComppNames + " " +
                    "actual : " + actualRecordCompNames);
        }
	}

