	public void test003() {
		fetchElements();
		assertNotNull("package null", topPkg);
		List<? extends Element> enclosedElements = topPkg.getEnclosedElements();
		assertEquals("incorrect no of enclosed elements", 3, enclosedElements.size());
		TypeElement sealedType = null;
		for (Element element : enclosedElements) {
			if (element instanceof TypeElement) {
				TypeElement temp = (TypeElement) element;
				if (temp.getQualifiedName().toString().equals("sealed.sub.TopSecond")) {
					sealedType = (TypeElement) element;
					break;
				}
			}
		}
		assertNotNull("type should not be null", sealedType);
		List<? extends TypeMirror> permittedSubclasses = sealedType.getPermittedSubclasses();
		assertEquals("incorrect no of permitted types", 2, permittedSubclasses.size());
		for (TypeMirror typeMirror : permittedSubclasses) {
			TypeElement typeEl = (TypeElement) _typeUtils.asElement(typeMirror);
			if (typeEl.getQualifiedName().toString().equals("sealed.sub.TopThird")) {
				Set<Modifier> modifiers = typeEl.getModifiers();
				assertTrue("should contain modifier final", modifiers.contains(modifierFinal));
				assertFalse("should not contain modifier sealed", modifiers.contains(sealed));
				assertFalse("should not contain modifier static", modifiers.contains(modifierStatic));
				assertFalse("should not contain modifier non-sealed", modifiers.contains(non_Sealed));
				TypeMirror superclass = typeEl.getSuperclass();
				assertFalse("should be a valid type", (superclass instanceof NoType));
				TypeElement temp = (TypeElement) _typeUtils.asElement(superclass);
				assertNotNull("type element should not be null", temp);
				assertEquals("incorrect super class", "sealed.sub.TopSecond", temp.getQualifiedName().toString());
				modifiers = temp.getModifiers();
				assertTrue("should contain modifier sealed", modifiers.contains(sealed));
				assertFalse("should not contain modifier static", modifiers.contains(modifierStatic));
				assertFalse("should not contain modifier final", modifiers.contains(modifierFinal));
				assertFalse("should not contain modifier non-sealed", modifiers.contains(non_Sealed));
				enclosedElements = temp.getEnclosedElements();
				assertEquals("incorrect no of enclosed elements", 1, enclosedElements.size());
				Element element = enclosedElements.get(0);
				assertEquals("should be a constructor", ElementKind.CONSTRUCTOR, element.getKind());
				ExecutableElement method = (ExecutableElement) element;
				assertEquals("incorrect constructor name", "<init>", method.getSimpleName().toString());
				continue;
			}
			if (typeEl.getQualifiedName().toString().equals("sealed.sub.TopThird.NonSealedStaticNested")) {
				Set<Modifier> modifiers = typeEl.getModifiers();
				assertTrue("should contain modifier static", modifiers.contains(modifierStatic));
				if (isBinaryMode)
					assertFalse("should not contain modifier non-sealed in binary", modifiers.contains(non_Sealed));
				else
					assertTrue("should contain modifier non-sealed in source mode", modifiers.contains(non_Sealed));
				assertFalse("should not contain modifier sealed", modifiers.contains(sealed));
				assertFalse("should not contain modifier final", modifiers.contains(modifierFinal));
				TypeMirror superclass = typeEl.getSuperclass();
				assertFalse("should be a valid type", (superclass instanceof NoType));
				TypeElement temp = (TypeElement) _typeUtils.asElement(superclass);
				assertNotNull("type element should not be null", temp);
				assertEquals("incorrect super class", "sealed.sub.TopSecond", temp.getQualifiedName().toString());
				modifiers = temp.getModifiers();
				assertTrue("should contain modifier sealed", modifiers.contains(sealed));
				assertFalse("should not contain modifier static", modifiers.contains(modifierStatic));
				assertFalse("should not contain modifier final", modifiers.contains(modifierFinal));
				assertFalse("should not contain modifier non-sealed", modifiers.contains(non_Sealed));
				enclosedElements = temp.getEnclosedElements();
				assertEquals("incorrect no of enclosed elements", 1, enclosedElements.size());
				Element element = enclosedElements.get(0);
				assertEquals("should be a constructor", ElementKind.CONSTRUCTOR, element.getKind());
				ExecutableElement method = (ExecutableElement) element;
				assertEquals("incorrect constructor name", "<init>", method.getSimpleName().toString());
				continue;
			}
		}
	}

