	/**
	 * Check the annotations in the model of targets.negative.pa.Negative1
	 * @return true if all tests passed
	 */
	private boolean checkAnnotations() {
		AnnotationMirror am3 = findAnnotation(_elementN1, "A3");
		if (_reportFailingCases && null == am3) {
			reportError("Couldn't find annotation A3 on class Negative1");
			return false;
		}
		List<? extends Element> enclosedElements = _elementN1.getEnclosedElements();
		boolean foundM1 = false; // do we find an element of unresolved type?
		for (Element element : enclosedElements) {
			String name = element.getSimpleName().toString();
			if ("m1".equals(name)) {
				foundM1 = true;
				TypeKind tk = element.asType().getKind();
				if (tk != TypeKind.ERROR && tk != TypeKind.DECLARED) {
					reportError("Field Negative1.m1 has a type of unexpected kind " + tk);
					return false;
				}
				AnnotationMirror am4 = findAnnotation(element, "A4");
				if (_reportFailingCases && null == am4) {
					reportError("Couldn't find annotation A4 on field Negative1.m1");
					return false;
				}
			}
			else if ("i1".equals(name)) {
				AnnotationMirror am5 = findAnnotation(element, "A5");
				if (_reportFailingCases && null == am5) {
					reportError("Couldn't find annotation A5 on field Negative1.i1");
					return false;
				}
			}
			else if ("m2".equals(name)) {
				AnnotationMirror am8 = findAnnotation(element, "A8");
				if (_reportFailingCases && null == am8) {
					reportError("Couldn't find annotation A8 on field Negative1.m2");
					return false;
				}
			}
			else if ("s1".equals(name)) {
				AnnotationMirror am = findAnnotation(element, "Anno1");
				if (null == am) {
					reportError("Couldn't find annotation Anno on field Negative1.s1");
					return false;
				}
				Map<? extends ExecutableElement, ? extends AnnotationValue> values = am.getElementValues();
				for (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : values.entrySet()) {
					if ("value".equals(entry.getKey().getSimpleName().toString())) {
						if (!"spud".equals(entry.getValue().getValue())) {
							reportError("Unexpected value for Anno1 on Negative1.s1: " + entry.getValue().getValue());
							return false;
						}
					}
				}
			}
		}
		if (_reportFailingCases && !foundM1) {
			reportError("Couldn't find field Negative1.m1, presumably because its type is missing");
			return false;
		}
		return true;
	}

