	/**
	 * Test the implementation of {@link javax.lang.model.util.Types#getDeclaredType()}
	 * @return true if tests passed
	 */
	private boolean examineGetDeclaredType() {
		TypeElement elementD = _elementUtils.getTypeElement("targets.model.pb.D");
		TypeElement elementAB = _elementUtils.getTypeElement("targets.model.pb.AB");
		TypeMirror typeAB = _typeUtils.getDeclaredType(elementAB);
		if (!(typeAB instanceof DeclaredType) || typeAB.getKind() != TypeKind.DECLARED) {
			reportError("Types.getDeclaredType(elementAB) returned bad value: " + typeAB);
			return false;
		}
		TypeMirror typeDSuper = elementD.getSuperclass();
		if (typeDSuper == null || !_typeUtils.isSameType(typeAB, typeDSuper)) {
			reportError("Type of AB and superclass of D are not same type");
			return false;
		}
		TypeMirror typeD = elementD.asType();
		if (!_typeUtils.isSubtype(typeD, typeAB)) {
			reportError("Type of D is not a subtype of type AB");
			return false;
		}
		ArrayType arrayOfTypeD = _typeUtils.getArrayType(typeD);
		ArrayType arrayOfTypeAB = _typeUtils.getArrayType(typeAB);
		if (!_typeUtils.isSubtype(arrayOfTypeD, arrayOfTypeAB)) {
			reportError("Array of type D is not a subtype of array of type AB");
			return false;
		}
		PrimitiveType typeInt = _typeUtils.getPrimitiveType(TypeKind.INT);
		ArrayType arrayOfInt = _typeUtils.getArrayType(typeInt);
		ArrayType arrayOfIntInt = _typeUtils.getArrayType(arrayOfInt);
		TypeElement objectTypeElement = _elementUtils.getTypeElement("java.lang.Object");
		TypeMirror javaLangObject = objectTypeElement.asType();
		if (!_typeUtils.isSubtype(arrayOfIntInt, javaLangObject)) {
			reportError("int[][] is not a subtype of Object");
			return false;
		}
		TypeElement stringTypeElement = _elementUtils.getTypeElement("java.lang.String");
		TypeMirror javaLangString = stringTypeElement.asType();
		ArrayType arrayOfString = _typeUtils.getArrayType(javaLangString);
		ArrayType arrayOfObject = _typeUtils.getArrayType(javaLangObject);
		ArrayType arrayOfObjectObject = _typeUtils.getArrayType(arrayOfObject);
		if (_typeUtils.isSubtype(arrayOfString, arrayOfObjectObject)) {
			reportError("String[] is a subtype of Object[][]");
			return false;
		}
		if (!_typeUtils.isSubtype(arrayOfString, arrayOfObject)) {
			reportError("String[] is not a subtype of Object[]");
			return false;
		}
		return true;
	}

