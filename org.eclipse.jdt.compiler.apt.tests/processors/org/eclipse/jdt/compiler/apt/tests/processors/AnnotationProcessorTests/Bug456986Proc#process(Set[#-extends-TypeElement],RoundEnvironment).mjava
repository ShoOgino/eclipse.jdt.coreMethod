	@Override
	public boolean process(Set<? extends TypeElement> annotations,
			RoundEnvironment roundEnv) {
		Filer filer = processingEnv.getFiler();
		if (!annotations.isEmpty()) {
			try {
				JavaFileObject jfo = filer.createSourceFile("gen.anno.Annos");
				Writer writer = jfo.openWriter();
				writer.write("package gen.anno;\n");
				writer.write("import java.lang.annotation.ElementType;\n");
				writer.write("import java.lang.annotation.Retention;\n");
				writer.write("import java.lang.annotation.RetentionPolicy;\n");
				writer.write("import java.lang.annotation.Target;\n");
				writer.write("public final class Annos {\n");
				writer.write("  @Retention(RetentionPolicy.RUNTIME)\n");
				writer.write("  @Target({ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER})\n");
				writer.write("  public @interface GenAnno {}\n");
				writer.write("\n");
				writer.write("  private Annos() {}\n");
				writer.write("}\n");
				writer.close();
				return true;
			} catch (IOException e) {
				return false;
			}
		}
		return true;
	}

