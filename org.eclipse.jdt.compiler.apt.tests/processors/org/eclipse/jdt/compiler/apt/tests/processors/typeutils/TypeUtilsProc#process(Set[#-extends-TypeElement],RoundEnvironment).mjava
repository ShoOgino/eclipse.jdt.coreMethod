	// Always return false from this processor, because it supports "*".
	// The return value does not signify success or failure!
	@Override
	public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)
	{
		if (roundEnv.processingOver()) {
			// We're not interested in the postprocessing round.
			return false;
		}
		Map<String, String> options = processingEnv.getOptions();
		if (!options.containsKey(this.getClass().getName())) {
			// Disable this processor unless we are intentionally performing the test.
			return false;
		}
		
		try {
    		if (!examinePrimitives()) {
    			return false;
    		}
    		
    		if (!examineNoType()) {
    			return false;
    		}
    		
    		if (!examineGetDeclaredType()) {
    			return false;
    		}
    		
    		if (!examineGetDeclaredTypeParameterized()) {
    			return false;
    		}
    
    		if (!examineGetDeclaredTypeNested()) {
    			return false;
    		}
    		
    		if (!examineGetArrayTypeParameterized()) {
    			return false;
    		}
    		
    		if (!examineTypesAsMemberOf()) {
    			return false;
    		}
    		
    		if (!examineTypesAsMemberOfSubclass()) {
    		    return false;
    		}
		} catch (RuntimeException e) {
		    StringWriter sw = new StringWriter();
		    PrintWriter w = new PrintWriter(sw);
		    e.printStackTrace(w);
		    reportError(sw.toString());
		    return false;
		}

		reportSuccess();
		return false;
	}

