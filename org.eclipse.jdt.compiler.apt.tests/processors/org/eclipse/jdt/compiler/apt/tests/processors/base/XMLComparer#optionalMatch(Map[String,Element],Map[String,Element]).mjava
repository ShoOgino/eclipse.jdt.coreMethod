	/**
	 * Compare actual and expected.  Ignore the presence of any elements in
	 * 'expected' that are absent from 'actual' iff the elements are tagged
	 * with the "optional" attribute.
	 * @return true if the collections match. 
	 */
	private boolean optionalMatch(Map<String, Element> actual, Map<String, Element> expected) {
		// Does actual contain anything that is not in expected?
		Set<String> extraActuals = new HashSet<String>(actual.keySet());
		extraActuals.removeAll(expected.keySet());
		if (!extraActuals.isEmpty()) {
			return false;
		}
		
		// Does expected contain anything that is not in actual, that is not optional?
		Set<String> extraExpecteds = new HashSet<String>(expected.keySet());
		extraExpecteds.removeAll(actual.keySet());
		Iterator<String> iter = extraExpecteds.iterator();
		while (iter.hasNext()) {
			Element e = expected.get(iter.next());
			boolean optional = Boolean.parseBoolean(e.getAttribute(OPTIONAL_TAG));
			if (optional) {
				iter.remove();
			}
		}
		return extraExpecteds.isEmpty();
	}

