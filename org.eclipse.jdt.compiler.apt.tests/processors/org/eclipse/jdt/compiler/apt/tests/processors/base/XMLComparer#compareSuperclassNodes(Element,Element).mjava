	/**
	 * Compare two &lt;superclass&gt; nodes.  Each is expected to contain
	 * exactly one &lt;type-mirror&gt; node.
	 *
	 * @param actual the observed &lt;superclass&gt; node; must not be null
	 * @param expected the reference &lt;superclass&gt; node; must not be null
	 * @return true if the superclass types are equivalent
	 */
	private boolean compareSuperclassNodes(Element actual, Element expected) {
		Element expectedType = findNamedChildElement(expected, TYPE_MIRROR_TAG);
		if (expectedType == null) {
			// Syntax error in the reference model, i.e., problem in test code
			printProblem("Bug in reference model: a <superclass> node was missing its <type-mirror> element");
			printDifferences();
			return false;
		}
		Element actualType = findNamedChildElement(actual, TYPE_MIRROR_TAG);
		if (actualType == null) {
			// This probably indicates a problem in the XMLConverter class
			printProblem("Bug in test code: a <superclass> node was missing its <type-mirror> element in the XML model of the observed language model");
			printDifferences();
			return false;
		}
		return compareTypeMirrors(actualType, expectedType);
	}

