	/** 
	 * Compare two interface lists, i.e., &lt;interfaces&gt; nodes.  
	 * Each is expected to contain zero or more &lt;type-mirror&gt; nodes. 
	 * The spec for {@link javax.lang.model.element.TypeElement#getInterfaces()}
	 * does not say anything about the order of the items returned, so here we
	 * load them into a Map<String, Element> keyed by the type's toString()
	 * output.  Note that toString() on a TypeMirror is not very well
	 * specified either, so this is not guaranteed to produce good results.
	 * @param actual the observed &lt;interfaces&gt; node, must be non-null.
	 * @param expected the reference &lt;interfaces&gt; node, must be non-null
	 * @return true if the nodes are equivalent.
	 */
	private boolean compareInterfacesNodes(Element actual, Element expected) {
		Map<String, Element> expectedTypes = new TreeMap<String, Element>();
		Map<String, Element> actualTypes = new TreeMap<String, Element>();
		if (!collectTypes(expected, expectedTypes)) {
			return false;
		}
		if (!collectTypes(actual, actualTypes)) {
			return false;
		}
		if (expectedTypes.size() != actualTypes.size()) {
			if (_ignoreJavacBugs) {
				// javac has a known bug where it does not correctly model 
				// unresolved interface types.  Ideally we could still verify
				// the resolved ones but that seems like more work than it's worth.
				return true;
			}
			printProblem("Actual and expected interface lists have different sizes: expected = " +
					expectedTypes.size() + ", actual = " + actualTypes.size());
			printDifferences();
			return false;
		}
		Iterator<Entry<String, Element>> expectedIter = expectedTypes.entrySet().iterator();
		Iterator<Entry<String, Element>> actualIter = actualTypes.entrySet().iterator();
		// if we got this far, the two maps are the same size
		while (expectedIter.hasNext()) {
			Entry<String, Element> expectedEntry = expectedIter.next();
			Entry<String, Element> actualEntry = actualIter.next();
			if (!compareTypeMirrors(actualEntry.getValue(), expectedEntry.getValue())) {
				return false;
			}
		}
		return true;
	}

