	private void processClass(Element element) {

		String actionName = ArgsConstructor.class.getName();
		AnnotationValue action = null;
		for (AnnotationMirror am : processingEnv.getElementUtils()
				.getAllAnnotationMirrors(element)) {
			if (actionName.equals(am.getAnnotationType().toString())) {
				for (Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : am
						.getElementValues().entrySet()) {
					if ("value".equals(entry.getKey().getSimpleName()
							.toString())) {
						action = entry.getValue();
						break;
					}

				}

			}
		}

		if (action == null) {
			processingEnv.getMessager()
					.printMessage(
							Kind.WARNING,
							"Class " + element
									+ " lacks a annotation with required args",
							element);
			return;
		}

		List<TypeMirror> mirrors = new ArrayList<TypeMirror>();
		for (Object val : (List<?>) action.getValue()) {
			AnnotationValue v = (AnnotationValue) val;
			TypeMirror m = (TypeMirror) v.getValue();
			mirrors.add(m);
		}

		if (!doesClassContainArgsConstructor(element, mirrors)) {
			String s = "";
			for (TypeMirror tm : mirrors) {
				if (!s.isEmpty()) {
					s += ",";
				}
				s += tm.toString();

			}
			processingEnv.getMessager().printMessage(
					Kind.ERROR,
					"Class " + element
							+ " lacks a public constructor with args: " + s,
					element);
		} else {
			processingEnv.getMessager().printMessage(Kind.NOTE,
					"Processed type: " + element);
		}
	}

