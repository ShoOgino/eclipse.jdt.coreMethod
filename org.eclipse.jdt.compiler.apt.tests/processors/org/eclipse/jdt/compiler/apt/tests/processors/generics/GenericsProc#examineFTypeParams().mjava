	/**
	 * Examine the type parameters of element F
	 * @return true if all tests passed
	 */
	private boolean examineFTypeParams()
	{
		TypeElement elementF = _elementUtils.getTypeElement("targets.model.pc.F");
		if (null == elementF || elementF.getKind() != ElementKind.CLASS) {
			reportError("examineFTypeParams: couldn't load element F");
			return false;
		}
		List<? extends TypeParameterElement> params = elementF.getTypeParameters();
		if (null == params || params.size() != 1) {
			reportError("examineFTypeParams: F reports an unexpected number of type parameters: " + params);
			return false;
		}
		TypeParameterElement param = params.iterator().next();
		Element enclosingElement = param.getEnclosingElement();
		if (enclosingElement == null) {
			reportError("examineFTypeParams: F's type parameter has no enclosing element");
			return false;
		}
		if (!enclosingElement.equals(param.getGenericElement())) {
			reportError("examineFTypeParams: F's type parameter's enclosing element is not equals to its generic element");
			return false;
		}
		List<? extends TypeMirror> bounds = param.getBounds();
		if (null == bounds || bounds.size() != 1) {
			reportError("examineFTypeParams: F's type parameter has an unexpected number of bounds: " + bounds);
			return false;
		}
		TypeMirror elementType = _elementObject.asType();
		if (!elementType.equals(bounds.iterator().next())) {
			reportError("examineFTypeParams: F's type bounds should only contain Object");
			return false;
		}
		return true;
	}

