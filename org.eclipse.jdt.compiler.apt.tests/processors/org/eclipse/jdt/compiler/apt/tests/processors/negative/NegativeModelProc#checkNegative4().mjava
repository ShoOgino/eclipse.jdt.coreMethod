	/**
	 * Check the model of targets.negative.pa.Negative4
	 * @return true if all tests passed
	 */
	private boolean checkNegative4() {
		TypeElement elementN4 = _elementUtils.getTypeElement("targets.negative.pa.Negative4");
		if (null == elementN4 || elementN4.getKind() != ElementKind.CLASS) {
			reportError("Element Negative3 was not found or was not a class");
			return false;
		}
		boolean foundZorkRaw = false;
		boolean foundZorkOfString = false;
		boolean foundIFooOfString = false;
		boolean foundIBarRaw = false;
		boolean foundIBarOfT1T2 = false;
		List<? extends Element> enclosedElements = elementN4.getEnclosedElements();
		for (Element element : enclosedElements) {
			ElementKind kind = element.getKind();
			if (kind != ElementKind.METHOD)
				continue;
			String name = element.getSimpleName().toString();
			if ("zorkRaw".equals(name)) {
				foundZorkRaw = true;
				TypeMirror retType = ((ExecutableElement)element).getReturnType();
				TypeKind retKind = retType.getKind();
				// javac returns ERROR type
				if (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {
					reportError("Return type of Negative4." + name + " should be DECLARED or ERROR, but is reported as " + retKind);
					return false;
				}
			}
			else if ("zorkOfString".equals(name)) {
				foundZorkOfString = true;
				TypeMirror retType = ((ExecutableElement)element).getReturnType();
				TypeKind retKind = retType.getKind();
				// javac returns ERROR type
				if (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {
					reportError("Return type of Negative4." + name + " should be DECLARED or ERROR, but is reported as " + retKind);
					return false;
				}
			}
			else if ("ifooOfString".equals(name)) {
				foundIFooOfString = true;
				TypeMirror retType = ((ExecutableElement)element).getReturnType();
				TypeKind retKind = retType.getKind();
				// javac returns ERROR type
				if (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {
					reportError("Return type of Negative4." + name + " should be DECLARED or ERROR, but is reported as " + retKind);
					return false;
				}
			}
			else if ("ibarRaw".equals(name)) {
				foundIBarRaw = true;
				TypeMirror retType = ((ExecutableElement)element).getReturnType();
				TypeKind retKind = retType.getKind();
				if (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {
					reportError("Return type of Negative4." + name + " should be DECLARED or ERROR, but is reported as " + retKind);
					return false;
				}
			}
			else if ("ibarOfT1T2".equals(name)) {
				foundIBarOfT1T2 = true;
				TypeMirror retType = ((ExecutableElement)element).getReturnType();
				TypeKind retKind = retType.getKind();
				// javac returns ERROR type
				if (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {
					reportError("Return type of Negative4." + name + " should be DECLARED or ERROR, but is reported as " + retKind);
					return false;
				}
			}
		}
		if (!foundZorkRaw) {
			reportError("Didn't find element Negative4.zorkRaw");
			return false;
		}
		if (!foundZorkOfString) {
			reportError("Didn't find element Negative4.zorkOfString");
			return false;
		}
		if (!foundIFooOfString) {
			reportError("Didn't find element Negative4.ifooOfString");
			return false;
		}
		if (!foundIBarRaw) {
			reportError("Didn't find element Negative4.ibarRaw");
			return false;
		}
		if (!foundIBarOfT1T2) {
			reportError("Didn't find element Negative4.ibarOfT1T2");
			return false;
		}
		return true;
	}

