	/**
	 * Compare an actual declaration to the expected reference. It is assumed that the element name
	 * (e.g., type-element, variable-element) and sname (e.g., "Foo") have already been compared.
	 * Attributes that exist on the actual declaration element but not on the expected declaration
	 * element are not considered to be a mismatch.
	 *
	 * @param actualDecl
	 *            must be non-null
	 * @param expectedDecl
	 *            must be non-null
	 * @return true if the declarations are equivalent
	 */
	private boolean compareDeclarations(Element actualDecl, Element expectedDecl) {
		// compare the element kinds and any other relevant attributes
		// Intentionally ignore the presence of additional actual attributes not present in the
		// expected model
		if (!compareAttributes(actualDecl, expectedDecl)) {
			return false;
		}


		// Find nested element and <annotations> nodes
		DeclarationContents actualContents = new DeclarationContents();
		if (!collectDeclarationContents(actualDecl, actualContents)) {
			return false;
		}
		DeclarationContents expectedContents = new DeclarationContents();
		if (!collectDeclarationContents(expectedDecl, expectedContents)) {
			return false;
		}

		// compare annotations on the element
		if (actualContents.annotations != null && expectedContents.annotations != null) {
			if (!compareAnnotationsNodes(actualContents.annotations, expectedContents.annotations)) {
				return false;
			}
		} else if (actualContents.annotations != null) {
			// expectedAnnots == null
			printProblem("Unexpected annotations within element: "
					+ expectedDecl.getAttribute(SNAME_TAG));
			printDifferences();
			return false;
		} else if (expectedContents.annotations != null) {
			// actualAnnots == null
			printProblem("Missing expected annotations within element: "
					+ actualDecl.getAttribute(SNAME_TAG));
			printDifferences();
			return false;
		}
		// both null at the same time is okay, not a mismatch

		// compare superclasses.  Ignore if reference does not specify a superclass.
		if (expectedContents.superclass != null) {
			if (actualContents.superclass == null) {
				printProblem("No superclass found for element: " + actualDecl.getAttribute(SNAME_TAG));
				printDifferences();
				return false;
			}
			if (!compareSuperclassNodes(actualContents.superclass, expectedContents.superclass)) {
				return false;
			}
		}

		// compare interface lists.  Ignore if reference does not specify interfaces.
		// TODO: javac fails to provide unresolved interfaces.  Here, we ignore interfaces altogether
		// if we're ignoring javac bugs, which means we also ignore the non-error cases.
		if (expectedContents.interfaces != null && !_ignoreJavacBugs) {
			if (actualContents.interfaces == null) {
				printProblem("No interfaces list found for element: " + actualDecl.getAttribute(SNAME_TAG));
				printDifferences();
				return false;
			}
			if (!compareInterfacesNodes(actualContents.interfaces, expectedContents.interfaces)) {
				return false;
			}
		}

		// compare the child elements
		if (!compareDeclarationContents(actualContents, expectedContents)) {
			return false;
		}

		return true;
	}

