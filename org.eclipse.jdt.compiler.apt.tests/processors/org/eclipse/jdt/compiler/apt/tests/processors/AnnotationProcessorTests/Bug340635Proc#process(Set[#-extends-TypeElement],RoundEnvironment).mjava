	@Override
	public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
		final Types types = processingEnv.getTypeUtils();
		final Messager messager = processingEnv.getMessager();

		for (TypeElement annotation : annotations) {
			final Set<? extends Element> elements = roundEnv.getElementsAnnotatedWith(annotation);

			// process the annotations
			for (Element element : elements) {
				// search and display informations about the first generic type
				// found in the
				// class or interface hierarchy.
				if (element.getKind().isInterface() || element.getKind().isClass()) {
					DeclaredType genericType = element.asType().accept(new GenericTypeVisitor(types), null);
					DeclaredType erasedType = (DeclaredType) types.erasure(genericType);

					StringBuffer message = new StringBuffer();
					message.append("Erased type: " + erasedType);
					message.append(" - type arguments: ");
					for (TypeMirror typeArgument : erasedType.getTypeArguments()) {
						message.append(typeArgument + ",");
					}
					messager.printMessage(Kind.WARNING, message.toString(), element);
				}
			}

		}

		return ALLOW_OTHER_PROCESSORS_TO_PROCESS;
	}

