	/**
	 * @param genResourceMirror
	 */
	private void generateType(GenResource genResourceMirror, Element annotatedEl) {
		// Collect and validate the parameters of the annotation
		String pkg = null;
		String relativeName = null;
		String stringContent = null;
		byte[] binaryContent = null;
		try {
			pkg = genResourceMirror.pkg();
			relativeName = genResourceMirror.relativeName();
			stringContent = genResourceMirror.stringContent();
			binaryContent = genResourceMirror.binaryContent();
		} catch (Exception e) {
			_messager.printMessage(Diagnostic.Kind.WARNING, "Unable to read @GenResource annotation" + e.getLocalizedMessage(), annotatedEl);
			return;
		}
		if (relativeName.length() == 0) {
			// User hasn't specified relativeName yet
			_messager.printMessage(Diagnostic.Kind.WARNING, "The relativeName attribute is missing", annotatedEl);
			return;
		}

		FileObject fo = null;
		try {
			fo = _filer.createResource(StandardLocation.SOURCE_OUTPUT, pkg, relativeName, annotatedEl);
		} catch (IOException e) {
			_messager.printMessage(Diagnostic.Kind.WARNING, 
					"Unable to open resource file for pkg " + pkg + ", relativeName " + 
					relativeName + ": " + e.getLocalizedMessage(), annotatedEl);
			return;
		}
		if (null == fo) {
			_messager.printMessage(Diagnostic.Kind.WARNING, "Filer.createResource() returned null", annotatedEl);
			return;
		}
		if (stringContent.isEmpty()) {
			// Binary content.  Open an OutputStream.
			OutputStream os = null;
			try {
				os = fo.openOutputStream();
				os.write(binaryContent);
			}
			catch (Exception e) {
				_messager.printMessage(Kind.ERROR, e.getLocalizedMessage(), annotatedEl);
				return;
			}
			finally {
				try {
					os.close();
				} catch (IOException e) {
					_messager.printMessage(Kind.ERROR, e.getLocalizedMessage(), annotatedEl);
				}
			}
		}
		else {
			// String content.  Open a Writer.
			Writer w = null;
			try {
				w = fo.openWriter();
				w.write(stringContent);
			}
			catch (Exception e) {
				_messager.printMessage(Kind.ERROR, e.getLocalizedMessage(), annotatedEl);
				return;
			}
			finally {
				try {
					w.close();
				} catch (IOException e) {
					_messager.printMessage(Kind.ERROR, e.getLocalizedMessage(), annotatedEl);
				}
			}
		}
		
		
	}

