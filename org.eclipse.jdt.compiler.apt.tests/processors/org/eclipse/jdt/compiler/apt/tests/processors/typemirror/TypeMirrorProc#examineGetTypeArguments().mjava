	/**
	 * Examine the DeclaredType.getTypeArguments() implementation
	 * @return true if all tests passed
	 */
	private boolean examineGetTypeArguments() {
		VariableElement fieldMapStringNumber = null;
		VariableElement fieldRawList = null;
		for (VariableElement field : ElementFilter.fieldsIn(_elementAC.getEnclosedElements())) {
			String name = field.getSimpleName().toString();
			if ("_fieldMapStringNumber".equals(name)) {
				fieldMapStringNumber = field;
			}
			else if ("_fieldRawList".equals(name)) {
				fieldRawList = field;
			}
		}
		if (null == fieldMapStringNumber || fieldMapStringNumber.getKind() != ElementKind.FIELD) {
			reportError("Unable to find field AC._fieldMapStringNumber");
			return false;
		}
		if (null == fieldRawList || fieldRawList.getKind() != ElementKind.FIELD) {
			reportError("Unable to find field AC._fieldRawList");
			return false;
		}
		TypeMirror typeMap = fieldMapStringNumber.asType();
		if (typeMap == null || typeMap.getKind() != TypeKind.DECLARED) {
			reportError("Field AC._fieldMapStringNumber was not found or had wrong type kind");
			return false;
		}
		TypeMirror typeRawList = fieldRawList.asType();
		if (typeRawList == null || typeRawList.getKind() != TypeKind.DECLARED) {
			reportError("Field AC._fieldRawList was not found or had wrong type kind");
			return false;
		}
		List<? extends TypeMirror> args = ((DeclaredType)typeMap).getTypeArguments();
		if (args == null || args.size() != 2) {
			reportError("AC._fieldMapStringNumber.asType().getTypeArguments() returned wrong number of args: " + args);
			return false;
		}
		Iterator<? extends TypeMirror> argsIterator = args.iterator();
		if (!_typeUtils.isSameType(_typeString, argsIterator.next()) ||
				!_typeUtils.isSameType(_typeNumber, argsIterator.next())) {
			reportError("AC._fieldMapStringNumber.asType().getTypeArguments() returned wrong args: " + args);
			return false;
		}
		args = ((DeclaredType)typeRawList).getTypeArguments();
		if (args == null || args.size() != 0) {
			reportError("AC._fieldRawList.asType().getTypeArguments() returned wrong number of args: " + args);
			return false;
		}

		return true;
	}

