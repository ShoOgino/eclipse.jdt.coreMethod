	/* (non-Javadoc)
	 * @see javax.annotation.processing.AbstractProcessor#process(java.util.Set, javax.annotation.processing.RoundEnvironment)
	 */
	@Override
	public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
		if (roundEnv.processingOver())
			return true;
		
		Map<String, String> options = new HashMap<String, String>(processingEnv.getOptions());
		options.remove("phase");
		if (_expected.length/2 != options.size()) {
			throw new IllegalStateException(
					"Bad processor arguments: expected " + _expected.length/2 +
					" arguments but found " + options.size());
		}
		for (int i = 0; i < _expected.length; ++i) {
			String key = _expected[i++];
			String value = _expected[i];
			String observedValue = options.get(key);
			if (value == null && observedValue != null) {
				throw new IllegalStateException(
						"Bad processor arguments: key " + key + 
						" expected null value but observed value " + observedValue);
			}
			else if (value != null && !value.equals(observedValue)){
				throw new IllegalStateException(
						"Bad processor arguments: key " + key + 
						" expected value " + value + " but observed value " + observedValue);
			}
		}
		return true;
	}

