	/**
	 * Collect the &lt;type-mirror&gt; children of a parent node into a map,
	 * keyed and sorted by the canonicalized type name.
	 * For now, we use the toString() output as the canonical name, even though
	 * that is unspecified and implementation-dependent.
	 * Reject duplicated types.
	 * TODO: revisit this - we need to model duplications, in order to handle incorrect code.
	 * @param parent the parent node
	 * @param typesMap the map, presumed to be empty on entry
	 * @return true if no errors were reported
	 */
	private boolean collectTypes(Node parent, Map<String, Element> typesMap) {
		for (Node n = parent.getFirstChild(); n != null; n = n.getNextSibling()) {
			if (n.getNodeType() == Node.ELEMENT_NODE & TYPE_MIRROR_TAG.equals(n.getNodeName())) {
				Element typeMirror = (Element)n;
				String toStringAttr = typeMirror.getAttribute(TO_STRING_TAG);
				if (null == toStringAttr || toStringAttr.length() < 1) {
					printProblem("<type-mirror> node was missing its \"to-string\" attribute");
					printDifferences();
					return false;
				}
				Element old = typesMap.put(toStringAttr, typeMirror);
				if (null != old) {
					printProblem("Two <type-mirror> nodes had the same \"to-string\" attribute: " + toStringAttr);
					printDifferences();
					return false;
				}
			}
		}
		return true;
	}

