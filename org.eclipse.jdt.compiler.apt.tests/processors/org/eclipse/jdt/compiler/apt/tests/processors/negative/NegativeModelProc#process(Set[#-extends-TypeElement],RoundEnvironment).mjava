	// Always return false from this processor, because it supports "*".
	// The return value does not signify success or failure!
	@Override
	public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
		if (!_processorEnabled) {
			// Disable this processor unless we are intentionally performing the test.
			return false;
		}
		if (roundEnv.processingOver()) {
			// We're not interested in the postprocessing round.
			return false;
		}
		if (_oneTest < 0 || _oneTest > testMethodNames.length) {
			reportError("Invalid test method specified: " + processingEnv.getOptions().get(CLASSNAME));
			return false;
		}

		// Reflectively invoke the specified tests.
		try {
			if (_oneTest == 0) {
				for (Method testMethod : testMethods) {
					Object success = testMethod.invoke(this);
					if (!(success instanceof Boolean) || !(Boolean)success) {
						return false;
					}
				}
			}
			else {
				Object success = testMethods[_oneTest - 1].invoke(this);
				if (!(success instanceof Boolean) || !(Boolean)success) {
					return false;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			reportError("Exception thrown while invoking test method: " + e);
			return false;
		}

		reportSuccess();
		return false;
	}

