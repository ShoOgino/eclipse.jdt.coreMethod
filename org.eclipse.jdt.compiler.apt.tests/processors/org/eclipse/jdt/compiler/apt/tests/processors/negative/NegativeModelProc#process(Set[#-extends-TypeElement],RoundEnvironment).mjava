	// Always return false from this processor, because it supports "*".
	// The return value does not signify success or failure!
	@Override
	public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
		if (roundEnv.processingOver()) {
			// We're not interested in the postprocessing round.
			return false;
		}
		
		// Selectively enable just one of the test routines
		Map<String, String> options = processingEnv.getOptions();
		if (!options.containsKey(CLASSNAME)) {
			// Disable this processor unless we are intentionally performing the test.
			return false;
		}
		String oneTest = options.get(CLASSNAME);
		if (oneTest != null && oneTest.length() > 0) {
			int enable = 0;
			try {
				enable = Integer.parseInt(oneTest);
			}
			catch (NumberFormatException e) {
				reportError("Option value '" + oneTest + "' must be an integer indicating what test to enable");
				return false;
			}
			if (enable > 4) {
				reportError("Option value must be an integer 1 to 4");
				return false;
			}
			if (enable >= 1) {
				testNegative1 = enable == 1;
				testNegative2 = enable == 2;
				testNegative3 = enable == 3;
				testNegative4 = enable == 4;
			}
		}
		
		if (testNegative1 && !checkNegative1()) {
			return false;
		}
		
		if (testNegative2 && !checkNegative2()) {
			return false;
		}
		
		if (testNegative3 && !checkNegative3()) {
			return false;
		}
		
		if (testNegative4 && !checkNegative4()) {
			return false;
		}
		
		reportSuccess();
		return false;
	}

