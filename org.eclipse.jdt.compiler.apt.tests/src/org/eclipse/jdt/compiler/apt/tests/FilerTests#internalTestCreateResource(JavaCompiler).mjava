	/**
	 * Test the createResource() by processing resources/targets/filer/FilerTarget1.java
	 * and verifying the existence and content of the resulting files.
	 * @throws IOException
	 */
	private void internalTestCreateResource(JavaCompiler compiler) throws IOException {
		File targetFolder = TestUtils.concatPath(BatchTestUtils.getSrcFolderName(), "targets", "filer");
		File inputFile = BatchTestUtils.copyResource("targets/filer/FilerTarget1.java", targetFolder);
		assertNotNull("No input file", inputFile);

		List<String> options = new ArrayList<String>();
		BatchTestUtils.compileOneClass(compiler, options, inputFile);

		// check that the resource and class files were generated
 		File genTextFile = TestUtils.concatPath(BatchTestUtils.getGenFolderName(), "resources", "txt", "text.txt");
 		assertTrue("generated text file does not exist", genTextFile.exists());
 		
 		File genBinaryFile = TestUtils.concatPath(BatchTestUtils.getGenFolderName(), "resources", "dat", "binary.dat");
 		assertTrue("generated binary file does not exist", genBinaryFile.exists());

 		File classFile = TestUtils.concatPath(BatchTestUtils.getBinFolderName(), "targets", "filer", "FilerTarget1.class");
 		assertTrue("ordinary src file was not compiled", classFile.exists());
 		
 		// See corresponding test data in FilerTarget1.java
 		assertTrue(BatchTestUtils.fileContentsEqualText(genTextFile, "A generated string"));
 		assertTrue(BatchTestUtils.fileContentsEqualText(genBinaryFile, new String(new byte[] {102, 110, 111, 114, 100})));
	}

