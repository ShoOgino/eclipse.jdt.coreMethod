	/*
	 * First compiles the given files without processor, then processes them
	 * with the just compiled binaries.
	 */
	public static void compileTreeAndProcessBinaries(JavaCompiler compiler, List<String> options, String processor,
			File targetFolder, DiagnosticListener<? super JavaFileObject> listener) {
		StandardJavaFileManager manager = compiler.getStandardFileManager(null, Locale.getDefault(), Charset.defaultCharset());
		Iterable<? extends File> location = manager.getLocation(StandardLocation.CLASS_PATH);
		// create new list containing inputfile
		List<File> files = new ArrayList<File>();
		findFilesUnder(targetFolder, files);
		Iterable<? extends JavaFileObject> units = manager.getJavaFileObjectsFromFiles(files);
		StringWriter stringWriter = new StringWriter();
		PrintWriter printWriter = new PrintWriter(stringWriter);
		List<String> copyOptions = new ArrayList<>();
		copyOptions.addAll(options);
		copyOptions.add("-d");
		copyOptions.add(_tmpBinFolderName);
		copyOptions.add("-s");
		copyOptions.add(_tmpGenFolderName);
		addProcessorPaths(copyOptions, true, true);
		options.add("-XprintRounds");
		CompilationTask task = compiler.getTask(printWriter, manager, listener, copyOptions, null, units);
		Boolean result = task.call();

		if (!result.booleanValue()) {
			String errorOutput = stringWriter.getBuffer().toString();
			System.err.println("Compilation failed: " + errorOutput);
	 		junit.framework.TestCase.assertTrue("Compilation failed : " + errorOutput, false);
		}
		List<String> classes = new ArrayList<>();
		try {
			System.clearProperty(processor);
			copyOptions = new ArrayList<>();
			copyOptions.addAll(options);
			copyOptions.add("-cp");
			copyOptions.add(_tmpBinFolderName + File.pathSeparator + _jls8ProcessorJarPath + File.pathSeparator + _tmpGenFolderName);
			copyOptions.add("-processorpath");
			copyOptions.add(_jls8ProcessorJarPath);
			classes.add("java.lang.Object"); // This is required to make sure BTB for Object is fully populated.
			findClassesUnder(Paths.get(_tmpBinFolderName), null, classes);
			manager.setLocation(StandardLocation.CLASS_PATH, location);
			task = compiler.getTask(printWriter, manager, listener, copyOptions, classes, null);
			result = task.call();
			if (!result.booleanValue()) {
				String errorOutput = stringWriter.getBuffer().toString();
				System.err.println("Compilation failed: " + errorOutput);
		 		junit.framework.TestCase.assertTrue("Compilation failed : " + errorOutput, false);
			}
		} catch (IOException e) {
			// print the stack just in case.
			e.printStackTrace();
		}
	}

