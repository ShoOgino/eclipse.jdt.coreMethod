	protected void handleLocations() {
		ArrayList<FileSystem.Classpath> fileSystemClasspaths = new ArrayList<>();
		EclipseFileManager eclipseJavaFileManager = null;
		StandardJavaFileManager standardJavaFileManager = null;
		JavaFileManager javaFileManager = null;
		boolean havePlatformPaths = false;
		boolean haveClassPaths = false;
		if (this.fileManager instanceof EclipseFileManager) {
			eclipseJavaFileManager = (EclipseFileManager) this.fileManager;
		}
		if (this.fileManager instanceof StandardJavaFileManager) {
			standardJavaFileManager = (StandardJavaFileManager) this.fileManager;
		}
		javaFileManager = this.fileManager;

		if (eclipseJavaFileManager != null) {
			if ((eclipseJavaFileManager.flags & EclipseFileManager.HAS_ENDORSED_DIRS) == 0
					&& (eclipseJavaFileManager.flags & EclipseFileManager.HAS_BOOTCLASSPATH) != 0) {
				fileSystemClasspaths.addAll(this.handleEndorseddirs(null));
			}
		}
		Iterable<? extends File> locationFiles = null;
		if (standardJavaFileManager != null) {
			locationFiles = standardJavaFileManager.getLocation(StandardLocation.PLATFORM_CLASS_PATH);
			if (locationFiles != null) {
				for (File file : locationFiles) {
					if (file.isDirectory()) {
						List<Classpath> platformLocations = getPlatformLocations(fileSystemClasspaths, file);
						if (standardJavaFileManager instanceof EclipseFileManager) {
							if (platformLocations.size() == 1) {
								Classpath jrt = platformLocations.get(0);
								if (jrt instanceof ClasspathJrt) {
									// TODO: double check, should it be platform or system module?
									try {
										((EclipseFileManager) standardJavaFileManager).locationHandler.newSystemLocation(StandardLocation.SYSTEM_MODULES, (ClasspathJrt) jrt);
									} catch (IOException e) {
										e.printStackTrace();
									}
								}
							}
						}
						fileSystemClasspaths.addAll(platformLocations);
						break; // Only possible scenario is, we have one and only entry representing the Java home.
					} else {
						Classpath classpath = FileSystem.getClasspath(
								file.getAbsolutePath(),
								null,
								null, this.options);
							if (classpath != null) {
								fileSystemClasspaths.add(classpath);
								havePlatformPaths = true;
							}
					}
				}
			}
		} else if (javaFileManager != null) {
			File javaHome = Util.getJavaHome();
			long jdkLevel = Util.getJDKLevel(javaHome);
			if (jdkLevel >= ClassFileConstants.JDK9) {
				Classpath system = null;
				if (this.releaseVersion != null && this.complianceLevel < jdkLevel) {
					String versionFromJdkLevel = CompilerOptions.versionFromJdkLevel(this.complianceLevel);
					if (versionFromJdkLevel.length() >= 3) {
						versionFromJdkLevel = versionFromJdkLevel.substring(2);
					}
					// TODO: Revisit for access rules
					system = FileSystem.getOlderSystemRelease(javaHome.getAbsolutePath(), versionFromJdkLevel, null);
				} else {
					system = FileSystem.getJrtClasspath(javaHome.toString(), null, null, null);
				}						
				Classpath classpath = new ClasspathJsr199(system, this.fileManager, StandardLocation.PLATFORM_CLASS_PATH);
				fileSystemClasspaths.add(classpath);
			} else {
				Classpath classpath = new ClasspathJsr199(this.fileManager, StandardLocation.PLATFORM_CLASS_PATH);
				fileSystemClasspaths.add(classpath);
			}
			havePlatformPaths = true;
		}
		if (eclipseJavaFileManager != null) {
			if ((eclipseJavaFileManager.flags & EclipseFileManager.HAS_EXT_DIRS) == 0
					&& (eclipseJavaFileManager.flags & EclipseFileManager.HAS_BOOTCLASSPATH) != 0) {
				fileSystemClasspaths.addAll(this.handleExtdirs(null));
			}
		}
		if (standardJavaFileManager != null) {
			locationFiles = standardJavaFileManager.getLocation(StandardLocation.SOURCE_PATH);
			if (locationFiles != null) {
				for (File file : locationFiles) {
					Classpath classpath = FileSystem.getClasspath(
							file.getAbsolutePath(),
							null,
							null, this.options);
					if (classpath != null) {
						fileSystemClasspaths.add(classpath);
					}
				}
			}
			locationFiles = standardJavaFileManager.getLocation(StandardLocation.CLASS_PATH);
			if (locationFiles != null) {
				for (File file : locationFiles) {
					Classpath classpath = FileSystem.getClasspath(
						file.getAbsolutePath(),
						null,
						null, this.options);
					if (classpath != null) {
						fileSystemClasspaths.add(classpath);
						haveClassPaths = true;
					}
				}
			}
			if (SourceVersion.latest().compareTo(SourceVersion.RELEASE_8) > 0) {
				try {
					Iterable<? extends Path> locationAsPaths = standardJavaFileManager.getLocationAsPaths(StandardLocation.MODULE_SOURCE_PATH);
					if (locationAsPaths != null) {
						StringBuilder builder = new StringBuilder();
						for (Path path : locationAsPaths) {
							// Append all of them
							builder.append(path.toFile().getCanonicalPath());
							builder.append(File.pathSeparator);
						}
						ArrayList<Classpath> modulepaths = handleModuleSourcepath(builder.toString());
						for (Classpath classpath : modulepaths) {
							Collection<String> moduleNames = classpath.getModuleNames(null);
							for (String modName : moduleNames) {
								Path p = Paths.get(classpath.getPath());
								standardJavaFileManager.setLocationForModule(StandardLocation.MODULE_SOURCE_PATH, modName, 
										Collections.singletonList(p));
								p = Paths.get(classpath.getDestinationPath());
							}
						}
						fileSystemClasspaths.addAll(modulepaths);
					}
				} catch (Exception e) {
					// TODO: Revisit when JRE 9 no longer throws IllegalStateException for getLocation.
				}
				try {
					locationFiles = standardJavaFileManager.getLocation(StandardLocation.MODULE_PATH);
					if (locationFiles != null) {
						for (File file : locationFiles) {
							try {
								ArrayList<Classpath> modulepaths = handleModulepath(file.getCanonicalPath());
								for (Classpath classpath : modulepaths) {
									Collection<String> moduleNames = classpath.getModuleNames(null);
									for (String string : moduleNames) {
										Path path = Paths.get(classpath.getPath());
										standardJavaFileManager.setLocationForModule(StandardLocation.MODULE_PATH, string, 
												Collections.singletonList(path));
									}
								}
								fileSystemClasspaths.addAll(modulepaths);
							} catch (IOException e) {
								throw new AbortCompilationUnit(null, e, null);
							}
						}
					}
				} catch (Exception e) {
					// TODO: Revisit when JRE 9 no longer throws IllegalStateException for getLocation.
				}
			}
		} else if (javaFileManager != null) {
			Classpath classpath = null;
			if (this.fileManager.hasLocation(StandardLocation.SOURCE_PATH)) {
				classpath = new ClasspathJsr199(this.fileManager, StandardLocation.SOURCE_PATH);
				fileSystemClasspaths.add(classpath);
			}
			if (SourceVersion.latest().compareTo(SourceVersion.RELEASE_8) > 0) {
				// Add the locations to search for in specific order
				if (this.fileManager.hasLocation(StandardLocation.UPGRADE_MODULE_PATH)) {
					classpath = new ClasspathJsr199(this.fileManager, StandardLocation.UPGRADE_MODULE_PATH);
				}
				if (this.fileManager.hasLocation(StandardLocation.SYSTEM_MODULES)) {
					classpath = new ClasspathJsr199(this.fileManager, StandardLocation.SYSTEM_MODULES);
					fileSystemClasspaths.add(classpath);
				}				
				if (this.fileManager.hasLocation(StandardLocation.PATCH_MODULE_PATH)) {
					classpath = new ClasspathJsr199(this.fileManager, StandardLocation.PATCH_MODULE_PATH);
					fileSystemClasspaths.add(classpath);
				}
				if (this.fileManager.hasLocation(StandardLocation.MODULE_SOURCE_PATH)) {
					classpath = new ClasspathJsr199(this.fileManager, StandardLocation.MODULE_SOURCE_PATH);
					fileSystemClasspaths.add(classpath);
				}
				if (this.fileManager.hasLocation(StandardLocation.MODULE_PATH)) {
					classpath = new ClasspathJsr199(this.fileManager, StandardLocation.MODULE_PATH);
					fileSystemClasspaths.add(classpath);
				}
			}
			classpath = new ClasspathJsr199(this.fileManager, StandardLocation.CLASS_PATH);
			fileSystemClasspaths.add(classpath);
			haveClassPaths = true;
		}
		if (this.checkedClasspaths == null) {
			// It appears to be necessary to handleBootclasspath() for IBM JVMs
			// in order to have visibility to java.lang.String (not present in rt.jar).
			// The jars returned by StandardFileManager.getLocation(PLATFORM_CLASS_PATH) are
			// not sufficient to resolve all standard classes.
			if (!havePlatformPaths) fileSystemClasspaths.addAll(this.handleBootclasspath(null, null));
			if (!haveClassPaths) fileSystemClasspaths.addAll(this.handleClasspath(null, null));
		}
		fileSystemClasspaths = FileSystem.ClasspathNormalizer.normalize(fileSystemClasspaths);
		final int size = fileSystemClasspaths.size();
		if (size != 0) {
			this.checkedClasspaths = new FileSystem.Classpath[size];
			int i = 0;
			for (FileSystem.Classpath classpath : fileSystemClasspaths) {
				this.checkedClasspaths[i++] = classpath;
			}
		}
	}

