	/* (non-Javadoc)
	 * @see javax.tools.JavaFileManager#inferBinaryName(javax.tools.JavaFileManager.Location, javax.tools.JavaFileObject)
	 */
	@Override
	public String inferBinaryName(Location location, JavaFileObject file) {
		validateNonModuleLocation(location);
		Iterable<? extends Path> paths = getLocationAsPaths(location);
		if (paths == null) {
			return null;
		}
		if (file instanceof JrtFileObject) {
			Path filePath = ((JrtFileObject) file).path;
			filePath = filePath.subpath(2, filePath.getNameCount());
			String name = filePath.toString();
			int index = name.lastIndexOf('.');
			if (index != -1) {
				name = name.substring(0, index);
			}
			return name.replace('/', '.');
		}
		String name = file.getName();
		JavaFileObject javaFileObject = null;
		int index = name.lastIndexOf('.');
		if (index != -1) {
			name = name.substring(0, index);
		}
		try {
			javaFileObject = getJavaFileForInput(location, name, file.getKind());
		} catch (IOException e) {
			// ignore
		} catch (IllegalArgumentException iae) {
			return null; // Either unknown kind or location not present
		}
		if (javaFileObject == null) {
			return null;
		}
		return name.replace('/', '.');
	}

