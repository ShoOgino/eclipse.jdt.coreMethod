	/* (non-Javadoc)
	 * @see javax.tools.JavaFileManager#handleOption(java.lang.String, java.util.Iterator)
	 */
	public boolean handleOption(String current, Iterator<String> remaining) {
		if ("-bootclasspath".equals(current)) {
			remaining.remove(); // remove the current option
			if (remaining.hasNext()) {
				final Iterable<? extends File> bootclasspaths = getBootclasspathFrom(remaining.next());
				if (bootclasspaths != null) {
					Iterable<? extends File> iterable = getLocation(StandardLocation.PLATFORM_CLASS_PATH);
					if ((this.flags & HAS_ENDORSED_DIRS) == 0
							&& (this.flags & HAS_EXT_DIRS) == 0) {
						// override default bootclasspath
						setLocation(StandardLocation.PLATFORM_CLASS_PATH, bootclasspaths);
					} else if ((this.flags & HAS_ENDORSED_DIRS) != 0) {
						// endorseddirs have been processed first
						setLocation(StandardLocation.PLATFORM_CLASS_PATH, 
								concatFiles(iterable, bootclasspaths));
					} else {
						// extdirs have been processed first
						setLocation(StandardLocation.PLATFORM_CLASS_PATH, 
								prependFiles(iterable, bootclasspaths));
					}
				}
				remaining.remove();
				this.flags |= HAS_BOOTCLASSPATH;
				return true;
			} else {
				throw new IllegalArgumentException();
			}
		}
		if ("-classpath".equals(current) || "-cp".equals(current)) {
			remaining.remove(); // remove the current option
			if (remaining.hasNext()) {
				final Iterable<? extends File> classpaths = getClasspathFrom(remaining.next());
				if (classpaths != null) setLocation(StandardLocation.CLASS_PATH, classpaths);
				remaining.remove();
				return true;
			} else {
				throw new IllegalArgumentException();
			}
		}
		if ("-encoding".equals(current)) {
			remaining.remove(); // remove the current option
			if (remaining.hasNext()) {
				this.charset = Charset.forName(remaining.next());
				remaining.remove();
				return true;
			} else {
				throw new IllegalArgumentException();
			}
		}
		if ("-sourcepath".equals(current)) {
			remaining.remove(); // remove the current option
			if (remaining.hasNext()) {
				final Iterable<? extends File> sourcepaths = getSourcepathFrom(remaining.next());
				if (sourcepaths != null) setLocation(StandardLocation.SOURCE_PATH, sourcepaths);
				remaining.remove();
				return true;
			} else {
				throw new IllegalArgumentException();
			}
		}
		if ("-extdirs".equals(current)) {
			remaining.remove(); // remove the current option
			if (remaining.hasNext()) {
				Iterable<? extends File> iterable = getLocation(StandardLocation.PLATFORM_CLASS_PATH);
				setLocation(StandardLocation.PLATFORM_CLASS_PATH, 
						concatFiles(iterable, getExtdirsFrom(remaining.next())));
				remaining.remove();
				this.flags |= HAS_EXT_DIRS;
				return true;
			} else {
				throw new IllegalArgumentException();
			}
		}
		if ("-endorseddirs".equals(current)) {
			remaining.remove(); // remove the current option
			if (remaining.hasNext()) {
				Iterable<? extends File> iterable = getLocation(StandardLocation.PLATFORM_CLASS_PATH);
				setLocation(StandardLocation.PLATFORM_CLASS_PATH, 
						prependFiles(iterable, getEndorsedDirsFrom(remaining.next())));
				remaining.remove();
				this.flags |= HAS_ENDORSED_DIRS;
				return true;
			} else {
				throw new IllegalArgumentException();
			}
		}
		if ("-d".equals(current)) {
			remaining.remove(); // remove the current option
			if (remaining.hasNext()) {
				final Iterable<? extends File> outputDir = getOutputDir(remaining.next());
				if (outputDir != null) {
					setLocation(StandardLocation.CLASS_OUTPUT, outputDir);
				}
				remaining.remove();
				return true;
			} else {
				throw new IllegalArgumentException();
			}
		}
		return false;
	}

