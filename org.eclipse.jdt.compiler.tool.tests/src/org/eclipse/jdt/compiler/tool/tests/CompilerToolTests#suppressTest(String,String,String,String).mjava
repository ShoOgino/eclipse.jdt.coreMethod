	private void suppressTest(String fileName, String source, String expectedDiagnostics, String expectedOutput) throws Exception {
		String tmpFolder = new File(System.getProperty("java.io.tmpdir")).getCanonicalPath();
		File inputFile = new File(tmpFolder, fileName);
		BufferedWriter writer = null;
		try {
			writer = new BufferedWriter(new FileWriter(inputFile));
			writer.write(source);
			writer.flush();
			writer.close();
		} catch (IOException e) {
			// ignore
		} finally {
			if (writer != null) {
				try {
					writer.close();
				} catch (IOException e) {
					// ignore
				}
			}
		}

		// System compiler
		StandardJavaFileManager manager = compiler.getStandardFileManager(null, Locale.getDefault(), Charset.defaultCharset());

		// create new list containing inputfile
		List<File> files = new ArrayList<File>();
		files.add(inputFile);
		Iterable<? extends JavaFileObject> units = manager.getJavaFileObjectsFromFiles(files);
		StringWriter stringWriter = new StringWriter();
		PrintWriter printWriter = new PrintWriter(stringWriter);

		List<String> options = new ArrayList<String>();
		options.add("-d");
		options.add(tmpFolder);
		options.add("-warn:+unused,boxing");
		final List<Diagnostic<JavaFileObject>> errors = new ArrayList<>();
 		CompilationTask task = compiler.getTask(printWriter, manager, new DiagnosticListener<JavaFileObject>() {

			@SuppressWarnings("unchecked")
			@Override
			public void report(Diagnostic<? extends JavaFileObject> diagnostic) {
				errors.add((Diagnostic<JavaFileObject>) diagnostic);
			}

		}, options, null, units);
		task.call();
		printWriter.flush();
		printWriter.close();

		assertEquals("Unexpected diagnostics:", expectedDiagnostics,
				errors.stream()
				.map(d -> d.getKind().toString() + ' ' + 
						d.getLineNumber() + ": " + d.getMessage(Locale.getDefault()))
				.collect(Collectors.joining("\n")));

		
		String expected = expectedOutput.replaceAll(OUTPUT_DIR_PLACEHOLDER, normalized(tmpFolder));
		String actual = normalized(stringWriter.toString());
		
		assertEquals("Unexpected output:", expected, actual);
	}

