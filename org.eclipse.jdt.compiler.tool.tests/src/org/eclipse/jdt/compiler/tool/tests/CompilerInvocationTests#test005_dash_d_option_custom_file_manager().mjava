// exploring -d / FileManager interaction
// ecj does not call setLocation on standard Java file managers; it uses 
// handleOption instead; javac does the same
public void test005_dash_d_option_custom_file_manager() {
	if (JAVAC_COMPILER == null) {
		System.out.println("No system java compiler available");
		return;
	}
	StandardJavaFileManager javacJavaFileManager = JAVAC_COMPILER.getStandardFileManager(null, null, null);
	SetLocationDetector customJavaFileManager =
		new SetLocationDetector(
				javacJavaFileManager, 
				StandardLocation.CLASS_OUTPUT);
	runTest(
		true /* shouldCompileOK */,
		new String [] { /* sourceFiles */
			"X.java",
			"public class X {}",
		}, 
		customJavaFileManager /* standardJavaFileManager */,
		Arrays.asList("-d", OUTPUT_DIR) /* options */, 
		new String[] { /* compileFileNames */
			"X.java"
		}, 
		"" /* expectedOutOutputString */, 
		"" /* expectedErrOutputString */,
		true /* shouldFlushOutputDirectory */,
		new String[] { /* classFileNames */
			"X.class"
		});
	assertEquals(OUTPUT_DIR, customJavaFileManager.getLocation(StandardLocation.CLASS_OUTPUT).toString());
	assertFalse(customJavaFileManager.matchFound());
	if (RUN_JAVAC && JAVAC_COMPILER != null) {
		customJavaFileManager =	new SetLocationDetector(javacJavaFileManager, 
					StandardLocation.CLASS_OUTPUT);
		assertTrue(JAVAC_COMPILER.getTask(null, customJavaFileManager, null, 
				Arrays.asList("-d", OUTPUT_DIR), null, 
				customJavaFileManager.getJavaFileObjectsFromFiles(
						Arrays.asList(new File(OUTPUT_DIR + File.separator + "X.java")))).call());
		assertFalse(customJavaFileManager.matchFound());
	}
}

