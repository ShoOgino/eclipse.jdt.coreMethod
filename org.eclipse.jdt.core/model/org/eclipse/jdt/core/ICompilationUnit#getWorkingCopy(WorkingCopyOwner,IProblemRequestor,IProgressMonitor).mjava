/**
 * TODO: revise spec
 * Returns a new working copy of this element using the given factory to create
 * the buffer, or this element if this element is already a working copy.
 * Note that this factory will be used for the life time of this working copy, that is if the 
 * working copy is closed then reopened, this factory will be reused.
 * The buffer will be automatically initialized with the original's compilation unit content
 * upon creation.
 * <p>
 * Note: if intending to share a working copy amongst several clients, then 
 * <code>#getSharedWorkingCopy</code> should be used instead.
 * </p><p>
 * When the working copy instance is created, an ADDED IJavaElementDelta is 
 * reported on this working copy.
 * </p><p>
 * Since 2.1, a working copy can be created on a not-yet existing compilation
 * unit. In particular, such a working copy can then be committed in order to create
 * the corresponding compilation unit.
 * </p>
 * @param owner the working copy owner that creates a buffer that is used to get the content 
 * 				of the working copy
 * @param problemRequestor a requestor which will get notified of problems detected during
 * 	reconciling as they are discovered. The requestor can be set to <code>null</code> indicating
 * 	that the client is not interested in problems.
 * @param monitor a progress monitor used to report progress while opening this compilation unit
 *                 or <code>null</code> if no progress should be reported 
 * @exception JavaModelException if the contents of this element can
 *   not be determined. 
 * @return a new working copy of this element using the given factory to create
 * the buffer, or this element if this element is already a working copy
 * @since 2.0
 */
ICompilationUnit getWorkingCopy(WorkingCopyOwner owner, IProblemRequestor problemRequestor, IProgressMonitor monitor) throws JavaModelException;

