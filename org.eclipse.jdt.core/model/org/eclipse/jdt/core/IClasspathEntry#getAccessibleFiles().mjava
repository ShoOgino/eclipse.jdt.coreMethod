	/**
	 * Returns the set of patterns used to explicitly allow access to files 
	 * associated with this classpath entry. Only project, library, container 
	 * and variable entries support accessible files patterns. An empty array 
	 * is returned for source entries.
	 * <p>
	 * Each path specified is a relative path encoding a package-qualified class name
	 * (e.g., <code>java/lang/String.class</code>). Class names that match
	 * the accessible files pattern can be legally referred to by source code in the
	 * project.
	 * </p>
	 * <p>
	 * See {@link #getNonAccessibleFiles()} for a discussion of the syntax and
	 * semantics of path patterns. The absence of any accessible files patterns is
	 * semantically equivalent to the explicit accessible files pattern
	 * <code>&#42;&#42;</code>.
	 * </p>
	 * <p>
	 * Example patterns in library entries:
	 * <ul>
	 * <li>
	 * The accessible files pattern <code>src/&#42;&#42;</code> by itself includes all
	 * files under a root folder named <code>lib</code>.
	 * </li>
	 * <li>
	 * The accessible files patterns <code>lib/&#42;&#42;</code> and
	 * <code>tests/&#42;&#42;</code> makes all files under the root folders
	 * named <code>lib</code> and <code>tests</code> accessible.
	 * </li>
	 * <li>
	 * The accessible files pattern <code>lib/&#42;&#42;</code> together with the
	 * non accessible files pattern <code>lib/&#42;&#42;/Foo.class</code> makes all
	 * files under a root folder named <code>lib</code> accessible except for ones
	 * named <code>Foo.class</code>.
	 * </li>
	 * </ul>
	 * </p>
	 * 
	 * @return the possibly empty list of accessible files patterns 
	 *   associated with this classpath entry, or an empty array if this kind
	 *   of classpath entry does not support accessible files patterns
	 * @since 3.1
	 */
	IPath[] getAccessibleFiles();

