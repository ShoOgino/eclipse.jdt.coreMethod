	/**
	 * Sets the current table of options. All and only the options explicitly included in the given table 
	 * are remembered; all previous option settings are forgotten, including ones not explicitly
	 * mentioned.
	 * <p>
	 * For a complete description of the configurable options, see <code>getDefaultOptions</code>.
	 * </p>
	 * <p>
	 * [Issue: The parameter should be a java.util.Map rather than a concrete Hashtable.]
	 * </p>
	 * <p>
	 * [Issue: If any client ever passes in a "short" table that is missing some options, 
	 *  then getOptions() will nevermore return a table containing this option. The
	 *  client would have to call getDefaultOptions() to discover its default setting.
	 * ]
	 * </p>
	 * 
	 * @param newOptions the new options (key type: <code>String</code>; value type: <code>String</code>),
	 *   or <code>null</code> to reset all options to their default values
	 * @see JavaCore#getDefaultOptions
	 * @since 2.0
	 */
	public static void setOptions(Hashtable newOptions) {
		if (newOptions == null){
			Options = getDefaultOptions();
		} else {
			Options = (Hashtable)newOptions.clone();
		}
	}

