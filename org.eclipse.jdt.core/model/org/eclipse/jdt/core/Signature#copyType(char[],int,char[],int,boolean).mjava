private static long copyType(char[] signature, int sigPos, char[] dest, int index, boolean fullyQualifyTypeNames) {
	int arrayCount = 0;
	loop: while (true) {
		switch (signature[sigPos++]) {
			case C_ARRAY :
				arrayCount++;
				break;
			case C_BOOLEAN :
				int length = BOOLEAN.length;
				System.arraycopy(BOOLEAN, 0, dest, index, length);
				index += length;
				break loop;
			case C_BYTE :
				length = BYTE.length;
				System.arraycopy(BYTE, 0, dest, index, length);
				index += length;
				break loop;
			case C_CHAR :
				length = CHAR.length;
				System.arraycopy(CHAR, 0, dest, index, length);
				index += length;
				break loop;
			case C_DOUBLE :
				length = DOUBLE.length;
				System.arraycopy(DOUBLE, 0, dest, index, length);
				index += length;
				break loop;
			case C_FLOAT :
				length = FLOAT.length;
				System.arraycopy(FLOAT, 0, dest, index, length);
				index += length;
				break loop;
			case C_INT :
				length = INT.length;
				System.arraycopy(INT, 0, dest, index, length);
				index += length;
				break loop;
			case C_LONG :
				length = LONG.length;
				System.arraycopy(LONG, 0, dest, index, length);
				index += length;
				break loop;
			case C_SHORT :
				length = SHORT.length;
				System.arraycopy(SHORT, 0, dest, index, length);
				index += length;
				break loop;
			case C_VOID :
				length = VOID.length;
				System.arraycopy(VOID, 0, dest, index, length);
				index += length;
				break loop;
			case C_RESOLVED :
			case C_UNRESOLVED :
				int end = CharOperation.indexOf(C_SEMICOLON, signature, sigPos);
				if (end == -1) throw new IllegalArgumentException();
				int start;
				if (fullyQualifyTypeNames) {
					start = sigPos;
				} else {
					start = CharOperation.lastIndexOf(C_DOT, signature, sigPos, end)+1;
					if (start == 0) start = sigPos;
				} 
				length = end-start;
				System.arraycopy(signature, start, dest, index, length);
				sigPos = end+1;
				index += length;
				break loop;
		}
	}
	while (arrayCount-- > 0) {
		dest[index++] = '[';
		dest[index++] = ']';
	}
	return (((long) index) << 32) + sigPos;
}

