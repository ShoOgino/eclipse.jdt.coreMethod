/**
 * Answers if a value is valide for an option
 * 
 * @return IJavaModelStatusConstants.INVALID_OPTION_VALUE if option value
 * are not correct and IJavaModelStatusConstants.INVALID_OPTION if option
 * doesn't exist.
 */
public static IJavaModelStatus validateOptionValue(String id, String value){
	ConfigurableOption option = (ConfigurableOption) getOptions().get(id);
	
	if(option != null){
		String[] values = option.getPossibleValues();
		if(values == ConfigurableOption.NoDiscreteValue){
			try{
				if(option.getType().equals(ConfigurableOption.INT)){
					int max = option.getMax().intValue();
					int min = option.getMin().intValue();
					int val = Integer.parseInt(value);
					if(val > max || val < min)
						return new JavaModelStatus(IJavaModelStatusConstants.INVALID_OPTION_VALUE);
				}
				else if(option.getType().equals(ConfigurableOption.FLOAT)){
					float max = option.getMax().floatValue();
					float min = option.getMin().floatValue();
					float val = Float.parseFloat(value);
					if(val > max || val < min)
						return new JavaModelStatus(IJavaModelStatusConstants.INVALID_OPTION_VALUE);
				}
			} catch(NumberFormatException e){
				return new JavaModelStatus(IJavaModelStatusConstants.INVALID_OPTION_VALUE);
			}
			return JavaModelStatus.VERIFIED_OK;
		} else {
			for(int i = 0 ; i < values.length ; i++){
				if(values[i].equals(value))
					return JavaModelStatus.VERIFIED_OK;
			}
			return new JavaModelStatus(IJavaModelStatusConstants.INVALID_OPTION_VALUE);
		}
	}
	return new JavaModelStatus(IJavaModelStatusConstants.INVALID_OPTION);
}

