/**
 * Creates a method signature from the given parameter and return type 
 * signatures. The encoded method signature is dot-based.
 *
 * @param parameterTypes the list of parameter type signatures
 * @param returnType the return type signature
 * @param formalTypeParameters the list of formal type parameter signatures
 * @param thrownExceptions the list of type signatures for thrown exceptions
 * @return the encoded method signature
 * @since 3.0
 */
public static char[] createMethodSignature(
		char[][] parameterTypes,
		char[] returnType,
		char[][] formalTypeParameters,
		char[][] thrownExceptions) {
	int formalTypeParameterCount = formalTypeParameters.length;
	int formalTypeLength = 0;
	for (int i = 0; i < formalTypeParameterCount; i++) {
		formalTypeLength += formalTypeParameters[i].length;
	}
	int parameterTypesCount = parameterTypes.length;
	int parameterLength = 0;
	for (int i = 0; i < parameterTypesCount; i++) {
		parameterLength += parameterTypes[i].length;
	}
	int returnTypeLength = returnType.length;
	int thrownExceptionsCount = thrownExceptions.length;
	int exceptionsLength = 0;
	for (int i = 0; i < thrownExceptionsCount; i++) {
		exceptionsLength += thrownExceptions[i].length;
	}
	int extras = 2; // "(" and ")"
	if (formalTypeParameterCount > 0) {
		extras += 2;   // "<" and ">"
	}
	if (thrownExceptionsCount > 0) {
		extras += thrownExceptionsCount;   // one "^" per
	}
	char[] result = new char[extras+ formalTypeLength + parameterLength + returnTypeLength + exceptionsLength];
	int index = 0;
	if (formalTypeParameterCount > 0) {
		result[index++] = C_GENERIC_START;
		for (int i = 0; i < formalTypeParameterCount; i++) {
			char[] formalTypeParameter = formalTypeParameters[i];
			int length = formalTypeParameter.length;
			System.arraycopy(formalTypeParameter, 0, result, index, length);
			index += length;
		}
		result[index++] = C_GENERIC_END;
	}
	result[index++] = C_PARAM_START;
	for (int i = 0; i < parameterTypesCount; i++) {
		char[] parameterType = parameterTypes[i];
		int length = parameterType.length;
		System.arraycopy(parameterType, 0, result, index, length);
		index += length;
	}
	result[index++] = C_PARAM_END;
	System.arraycopy(returnType, 0, result, index, returnTypeLength);
	index += returnTypeLength;
	if (thrownExceptionsCount > 0) {
		for (int i = 0; i < thrownExceptionsCount; i++) {
			result[index++] = C_THROWS;
			char[] thrownException = thrownExceptions[i];
			int length = thrownException.length;
			System.arraycopy(thrownException, 0, result, index, length);
			index += length;
		}
	}
	return result;
}

