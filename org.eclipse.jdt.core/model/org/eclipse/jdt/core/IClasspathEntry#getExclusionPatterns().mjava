	/**
	 * Returns the set of patterns excluding resources associated with this entry.
	 * <p>
	 * Exclusion patterns allows to filter out some portions of the resource tree 
	 * rooted at the entry path. By default, a classpath entry is all inclusive.
	 * File patterns are case sensitive, and the paths are relative to the entry path.
	 * A source folder entry already filters out ".class" files implicitly from the resource 
	 * subtree. Reciprocally a library folder will exclude ".java" files.
	 * <p>
	 * Each exclusion pattern follows the Ant pattern syntax, where a pattern represents 
	 * a resource file path pattern, for which the matching will be done on a per folder basis. 
	 * It can use standard wildcards such as '*' and '?', where '*' will match any directory or 
	 * file name. In order to allow matching multiple folder levels, the extra wildcard '**' is 
	 * supported. When '**' is used as the name of a folder in a pattern, it matches zero or
	 * more folders.
	 * <br>
	 * e.g. pattern "/test/**" matches all files under "/test/"
	 * <br>
	 * If a pattern ends with '/' or '\', then '**' is appended. For example, "test/" is interpreted as "test/**".
	 * <p>
	 * @return the resource exclusion patterns associated with this entry, or <code>null</code> if none
	 * was specified. 
	 * @since 2.1	 */
	String[] getExclusionPatterns();

