	/**
	 * Returns a table of all known configurable options with their default values.
	 * These options allow to configure the behavior of the underlying components.
	 * The client may safely use the result as a template that they can modify and
	 * then pass to <code>setOptions</code>.
	 * 
	 * Note: more options might be added in further releases.
	 * </pre>
	 * RECOGNIZED OPTIONS:
	 *  COMPILER / Generating Local Variable Debug Attribute
 	 *    When generated, this attribute will enable local variable names 
	 *    to be displayed in debugger, only in place where variables are 
	 *    definitely assigned (.class file is then bigger)
	 *     - option id:				"org.eclipse.jdt.core.compiler.debug.localVariable"
	 *     - possible values:	{ "generate", "do not generate" }
	 *     - default:				"generate"
	 *
	 *  COMPILER / Generating Line Number Debug Attribute 
	 *    When generated, this attribute will enable source code highlighting in debugger 
	 *    (.class file is then bigger).
	 *     - option id:				"org.eclipse.jdt.core.compiler.debug.lineNumber"
	 *     - possible values:	{ "generate", "do not generate" }
	 *     - default:				"generate"
	 *		
	 *  COMPILER / Generating Source Debug Attribute 
	 *    When generated, this attribute will enable the debugger to present the 
	 *    corresponding source code.
	 *     - option id:				"org.eclipse.jdt.core.compiler.debug.sourceFile"
	 *     - possible values:	{ "generate", "do not generate" }
	 *     - default:				"generate"
	 *		
	 *  COMPILER / Preserving Unused Local Variables
	 *    Unless requested to preserve unused local variables (i.e. never read), the 
	 *    compiler will optimize them out, potentially altering debugging
	 *     - option id:				"org.eclipse.jdt.core.compiler.codegen.unusedLocal"
	 *     - possible values:	{ "preserve", "optimize out" }
	 *     - default:				"preserve"
	 * 
	 *  COMPILER / Defining Target Java Platform
	 *    For binary compatibility reason, .class files can be tagged to with certain VM versions and later.
	 *     - option id:				"org.eclipse.jdt.core.compiler.codegen.targetPlatform"
	 *     - possible values:	{ "1.1", "1.2", "1.3", "1.4" }
	 *     - default:				"1.1"
	 *
	 *	COMPILER / Reporting Unreachable Code
	 *    Unreachable code can optionally be reported as an error, warning or simply 
	 *    ignored. The bytecode generation will always optimized it out.
	 *     - option id:				"org.eclipse.jdt.core.compiler.problem.unreachableCode"
	 *     - possible values:	{ "error", "warning", "ignore" }
	 *     - default:				"error"
	 *
	 *	COMPILER / Reporting Invalid Import
	 *    An import statement that cannot be resolved might optionally be reported 
	 *    as an error, as a warning or ignored.
	 *     - option id:				"org.eclipse.jdt.core.compiler.problem.invalidImport"
	 *     - possible values:	{ "error", "warning", "ignore" }
	 *     - default:				"error"
	 *
	 *	COMPILER / Reporting Attempt to Override Package-Default Method
	 *    A package default method is not visible in a different package, and thus 
	 *    cannot be overriden. When enabling this option, the compiler will signal 
	 *    such scenarii either as an error or a warning.
	 *     - option id:				"org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod"
	 *     - possible values:	{ "error", "warning", "ignore" }
	 *     - default:				"warning"
	 *
	 *  COMPILER / Reporting Method With Constructor Name
	 *    Naming a method with a constructor name is generally considered poor 
	 *    style programming. When enabling this option, the compiler will signal such 
	 *    scenarii either as an error or a warning.
	 *     - option id:				"org.eclipse.jdt.core.compiler.problem.methodWithConstructorName"
	 *     - possible values:	{ "error", "warning", "ignore" }
	 *     - default:				"warning"
	 *
	 *  COMPILER / Reporting Deprecation
	 *    When enabled, the compiler will signal use of deprecated API either as an 
	 *    error or a warning.
	 *     - option id:				"org.eclipse.jdt.core.compiler.problem.deprecation"
	 *     - possible values:	{ "error", "warning", "ignore" }
	 *     - default:				"warning"
	 *
	 *	COMPILER / Reporting Hidden Catch Block
	 *    Locally to a try statement, some catch blocks may hide others , e.g.
	 *      try {	throw new java.io.CharConversionException();
	 *      } catch (java.io.CharConversionException e) {
	 *      } catch (java.io.IOException e) {}. 
	 *    When enabling this option, the compiler will issue an error or a warning for hidden 
	 *    catch blocks corresponding to checked exceptions
	 *     - option id:				"org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock"
	 *     - possible values:	{ "error", "warning", "ignore" }
	 *     - default:				"warning"
	 *
	 *  COMPILER / Reporting Unused Local
	 *    When enabled, the compiler will issue an error or a warning for unused local 
	 *    variables (i.e. variables never read from)
	 *     - option id:				"org.eclipse.jdt.core.compiler.problem.unusedLocal"
	 *     - possible values:	{ "error", "warning", "ignore" }
	 *     - default:				"ignore"
	 *
	 *	COMPILER / Reporting Unused Parameter
	 *    When enabled, the compiler will issue an error or a warning for unused method 
	 *    parameters (i.e. parameters never read from)
	 *     - option id:				"org.eclipse.jdt.core.compiler.problem.unusedParameter"
	 *     - possible values:	{ "error", "warning", "ignore" }
	 *     - default:				"ignore"
	 *
	 *	COMPILER / Reporting Synthetic Access Emulation
	 *    When enabled, the compiler will issue an error or a warning whenever it emulates 
	 *    access to a non-accessible member of an enclosing type. Such access can have
	 *    performance implications.
	 *     - option id:				"org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation"
	 *     - possible values:	{ "error", "warning", "ignore" }
	 *     - default:				"ignore"
	 *
	 * COMPILER / Reporting Non-Externalized String Literal
	 *    When enabled, the compiler will issue an error or a warning for non externalized 
	 *    String literal (i.e. non tagged with //$NON-NLS-<n>$). 
	 *     - option id:				"org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral"
	 *     - possible values:	{ "error", "warning", "ignore" }
	 *     - default:				"ignore"
	 * 
	 * COMPILER / Reporting Usage of 'assert' Identifier
	 *    When enabled, the compiler will issue an error or a warning whenever 'assert' is 
	 *    used as an identifier (reserved keyword in 1.4)
	 *     - option id:				"org.eclipse.jdt.core.compiler.problem.assertIdentifier"
	 *     - possible values:	{ "error", "warning", "ignore" }
	 *     - default:				"ignore"
	 * 
	 * COMPILER / Setting Source Compatibility Mode
	 *    Specify whether source is 1.3 or 1.4 compatible. From 1.4 on, 'assert' is a keyword
	 *    reserved for assertion support.
	 *     - option id:				"org.eclipse.jdt.core.compiler.source"
	 *     - possible values:	{ "1.3", "1.4" }
	 *     - default:				"1.3"
	 * 
	 * COMPILER / Setting JCK Compliance Level
	 *    Select the JCK compliance level for the compiler.
	 *     - option id:				"org.eclipse.jdt.core.compiler.compliance"
	 *     - possible values:	{ "1.3", "1.4" }
	 *     - default:				"1.3"
	 * 
	 *	JAVACORE / Computing Project Build Order
	 *    Indicate whether JavaCore should enforce the project build order to be based on
	 *    the classpath prerequisite chain. When requesting to compute, this takes over
	 *    the platform default order (based on project references).
	 *     - option id:				"org.eclipse.jdt.core.computeJavaBuildOrder"
	 *     - possible values:	{ "compute", "ignore" }
	 *     - default:				"ignore"	 
	 * 
	 *	FORMATTER / Inserting New Line Before Opening Brace
	 *    When Insert, a new line is inserted before an opening brace, otherwise nothing
	 *    is inserted
	 *     - option id:				"org.eclipse.jdt.core.formatter.newline.openingBrace"
	 *     - possible values:	{ "insert", "do not insert" }
	 *     - default:				"do not insert"
	 * 
	 *	FORMATTER / Inserting New Line Inside Control Statement
	 *    When Insert, a new line is inserted between } and following else, catch, finally
	 *     - option id:				"org.eclipse.jdt.core.formatter.newline.controlStatement"
	 *     - possible values:	{ "insert", "do not insert" }
	 *     - default:				"do not insert"
	 * 
	 *	FORMATTER / Clearing Blank Lines
	 *    When Clear all, all blank lines are removed. When Preserve one, only one is kept
	 *    and all others removed.
	 *     - option id:				"org.eclipse.jdt.core.formatter.newline.clearAll"
	 *     - possible values:	{ "clear all", "preserve one" }
	 *     - default:				"preserve one"
	 * 
	 *	FORMATTER / Inserting New Line Between Else/If 
	 *    When Insert, a blank line is inserted between an else and an if when they are 
	 *    contiguous. When choosing to not insert, else-if will be kept on the same
	 *    line when possible.
	 *     - option id:				"org.eclipse.jdt.core.formatter.newline.elseIf"
	 *     - possible values:	{ "insert", "do not insert" }
	 *     - default:				"do not insert"
	 * 
	 *	FORMATTER / Inserting New Line In Empty Block
	 *    When insert, a line break is inserted between contiguous { and }, if } is not followed
	 *    by a keyword.
	 *     - option id:				"org.eclipse.jdt.core.formatter.newline.emptyBlock"
	 *     - possible values:	{ "insert", "do not insert" }
	 *     - default:				"insert"
	 * 
	 *	FORMATTER / Splitting Lines Exceeding Length
	 *    Enable splitting of long lines (exceeding the configurable length). Length of 0 will
	 *    disable line splitting
	 *     - option id:				"org.eclipse.jdt.core.formatter.lineSplit"
	 *     - possible values:	"<n>", where n is zero or a positive integer
	 *     - default:				"80"
	 * 
	 *	FORMATTER / Compacting Assignment
	 *    Assignments can be formatted asymmetrically, e.g. 'int x= 2;', when Normal, a space
	 *    is inserted before the assignment operator
	 *     - option id:				"org.eclipse.jdt.core.formatter.style.assignment"
	 *     - possible values:	{ "compact", "normal" }
	 *     - default:				"normal"
	 * 
	 *	FORMATTER / Defining Indentation Character
	 *    Either choose to indent with tab characters or spaces
	 *     - option id:				"org.eclipse.jdt.core.formatter.tabulation.char"
	 *     - possible values:	{ "tab", "space" }
	 *     - default:				"tab"
	 * 
	 *	FORMATTER / Defining Space Indentation Length
	 *    When using spaces, set the amount of space characters to use for each 
	 *    indentation mark.
	 *     - option id:				"org.eclipse.jdt.core.formatter.tabulation.size"
	 *     - possible values:	"<n>", where n is a positive integer
	 *     - default:				"4"
	 * 
	 *	CODEASSIST / Activate Visibility Sensitive Completion
	 *    When active, completion doesn't show that you can not see
	 *    (eg. you can not see private methods of a super class).
	 *     - option id:				"org.eclipse.jdt.core.codeComplete.visibilityCheck"
	 *     - possible values:	{ "enabled", "disabled" }
	 *     - default:				"disabled"
	 * 
	 *	CODEASSIST / Automatic Qualification of Implicit Members
	 *    When active, completion automatically qualifies completion on implicit
	 *    field references and message expressions.
	 *     - option id:				"org.eclipse.jdt.core.codeComplete.forceImplicitQualification"
	 *     - possible values:	{ "enabled", "disabled" }
	 *     - default:				"disabled"
	 * </pre>
	 * 
	 * @return a mutable table containing the default settings of all known options
	 *   (key type: <code>String</code>; value type: <code>String</code>)
	 * @see #setOptions
	 */
 	public static Hashtable getDefaultOptions(){
	
		Hashtable defaultOptions = new Hashtable(10);
	
		// Compiler settings
		defaultOptions.put("org.eclipse.jdt.core.compiler.debug.localVariable", "generate"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.compiler.debug.lineNumber", "generate"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.compiler.debug.sourceFile", "generate"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.compiler.codegen.unusedLocal", "preserve"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.1"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.compiler.problem.unreachableCode", "error"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.compiler.problem.invalidImport", "error"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod", "warning"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.compiler.problem.methodWithConstructorName", "warning"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.compiler.problem.deprecation", "warning"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock", "warning"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.compiler.problem.unusedLocal", "ignore"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.compiler.problem.unusedParameter", "ignore"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation", "ignore"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral", "ignore"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.compiler.problem.assertIdentifier", "ignore"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.compiler.source", "1.3"); //$NON-NLS-1$ //$NON-NLS-2$

		// JavaCore settings
		defaultOptions.put("org.eclipse.jdt.core.computeJavaBuildOrder", "ignore"); //$NON-NLS-1$ //$NON-NLS-2$
	
		// Formatter settings
		defaultOptions.put("org.eclipse.jdt.core.formatter.newline.openingBrace", "do not insert"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.formatter.newline.controlStatement", "do not insert"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.formatter.newline.clearAll", "preserve one"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.formatter.newline.elseIf", "do not insert"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.formatter.newline.emptyBlock", "insert"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.formatter.lineSplit", "80"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.formatter.style.assignment", "normal"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.formatter.tabulation.char", "tab"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.formatter.tabulation.size", "4"); //$NON-NLS-1$ //$NON-NLS-2$
		
		// CodeAssist settings
		defaultOptions.put("org.eclipse.jdt.core.codeComplete.visibilityCheck", "disabled"); //$NON-NLS-1$ //$NON-NLS-2$
		defaultOptions.put("org.eclipse.jdt.core.codeComplete.forceImplicitQualification", "disabled"); //$NON-NLS-1$ //$NON-NLS-2$
		
		return defaultOptions;
	}

