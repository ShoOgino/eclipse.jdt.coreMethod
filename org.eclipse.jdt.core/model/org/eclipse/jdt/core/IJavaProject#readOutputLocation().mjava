	/**
	 * Returns the default output location for the project as defined by its <code>.classpath</code> file from disk, or <code>null</code>
	 * if unable to read the file. 
	 * <p>
	 * This output location may differ from the in-memory one returned by <code>getOutputLocation</code>, in case the 
	 * automatic reconciliation mechanism has not been performed yet. Usually, any change to the <code>.classpath</code> file 
	 * is automatically noticed and reconciled at the next resource change notification event. 
	 * However, if the file is modified within an operation, where this change needs to be taken into account before the 
	 * operation ends, then the output location from disk can be read using this method, and further assigned to the project 
	 * using <code>setRawClasspath(...)</code>.
	 * <p>
	 * The default output location is where class files are ordinarily generated
	 * (and resource files, copied). Each source classpath entry can also
	 * specify an output location for the generated class files (and copied
	 * resource files) corresponding to compilation units under that source
	 * folder. This makes it possible to arrange generated class files for
	 * different source folders in different output folders, and not
	 * necessarily the default output folder. This means that the generated
	 * class files for the project may end up scattered across several folders,
	 * rather than all in the default output folder (which is more standard).
	 * <p>
	 * In order to manually force a project classpath refresh, one can simply assign the project classpath using the result of this 
	 * method, as follows:
	 * <code>proj.setRawClasspath(proj.readRawClasspath(), proj.readOutputLocation(), monitor)</code>
	 * (note that the <code>readRawClasspath/readOutputLocation</code> methods could return <code>null</code>).
	 * <p>
	 * @return the workspace-relative absolute path of the default output folder
	 * @see #getOutputLocation()
	 * @since 3.0
	 */
	IPath readOutputLocation();

