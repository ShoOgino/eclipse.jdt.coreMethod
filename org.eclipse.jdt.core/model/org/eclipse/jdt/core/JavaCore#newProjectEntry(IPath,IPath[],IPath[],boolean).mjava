	/**
	 * Creates and returns a new classpath entry of kind <code>CPE_PROJECT</code>
	 * for the project identified by the given absolute path.
	 * <p>
	 * A project entry is used to denote a prerequisite project on a classpath.
	 * The referenced project will be contributed as a whole, either as sources (in the Java Model, it
	 * contributes all its package fragment roots) or as binaries (when building, it contributes its 
	 * whole output location).
	 * <p>
	 * A project reference allows to indirect through another project, independently from its internal layout. 
	 * <p>
	 * The prerequisite project is referred to using an absolute path relative to the workspace root.
	 * <p>
	 * <p>
	 * The <code>inclusionPatterns</code> and <code>exclusionPatterns</code> control which packages
	 * and type arising from this entry are available with the project itself.
	 * [TODO (jerome) - the spec for inclusionPatterns and exclusionPatterns is incomplete.
	 * Need to describe the format of the patterns and how there are applied.
	 * Nees to describe how package names and type names are mapper to IPaths.
	 * Nees to describe how wildcarding works.
	 * Need to cover what happens when one, the other, or both are empty.]
	 * </p>
	 * <p>
	 * The <code>isExported</code> flag indicates whether this entry is contributed to dependent
	 * projects. If not exported, dependent projects will not see any of the classes from this entry.
	 * [TODO (jerome) - check above specs for isExported, inclusionPatterns, and exclusionPatterns.]
	 * </p>
	 * 
	 * @param path the absolute path of the prerequisite project
	 * @param inclusionPatterns the possibly empty list of inclusion patterns
	 *    represented as relative paths
	 * @param exclusionPatterns the possibly empty list of exclusion patterns
	 *    represented as relative paths
	 * @param isExported indicates whether this entry is contributed to dependent
	 * 	  projects in addition to the output location
	 * @return a new project classpath entry
	 * @since 3.1
	 */
	public static IClasspathEntry newProjectEntry(
			IPath path, 
			IPath[] inclusionPatterns, 
			IPath[] exclusionPatterns, 
			boolean isExported) {
		
		if (!path.isAbsolute()) Assert.isTrue(false, "Path for IClasspathEntry must be absolute"); //$NON-NLS-1$
		
		return new ClasspathEntry(
			IPackageFragmentRoot.K_SOURCE,
			IClasspathEntry.CPE_PROJECT,
			path,
			inclusionPatterns, 
			exclusionPatterns, 
			null, // source attachment
			null, // source attachment root
			null, // specific output folder
			isExported);
	}

