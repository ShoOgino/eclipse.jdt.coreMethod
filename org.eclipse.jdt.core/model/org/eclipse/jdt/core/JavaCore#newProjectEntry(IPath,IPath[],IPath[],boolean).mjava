	/**
	 * Creates and returns a new classpath entry of kind <code>CPE_PROJECT</code>
	 * for the project identified by the given absolute path.
	 * <p>
	 * A project entry is used to denote a prerequisite project on a classpath.
	 * The referenced project will be contributed as a whole, either as sources (in the Java Model, it
	 * contributes all its package fragment roots) or as binaries (when building, it contributes its 
	 * whole output location).
	 * </p>
	 * <p>
	 * A project reference allows to indirect through another project, independently from its internal layout. 
	 * </p><p>
	 * The prerequisite project is referred to using an absolute path relative to the workspace root.
	 * </p>
	 * <p>
	 * The inclusion patterns determines the initial set of accessible source and class files in 
	 * the project; the exclusion patterns are then used to reduce this
	 * set. A source or class file that is not accessible can still be refered to but it is 
	 * tagged as being not accessible - the Java builder will create a problem 
	 * marker for example. The severity of this marker is controled through
	 * the {@link #COMPILER_PB_FORBIDDEN_REFERENCE} compiler option.
	 * Note this is different from inclusion and 
	 * exclusion patterns on source classpath entries, where a source file that
	 * is excluded is not even compiled.
	 * When no inclusion patterns are specified, all source and class files
	 * in the project are initially accessible. On the other hand, specifying one 
	 * or more inclusion patterns means that all <b>and only</b> source and
	 * class files matching at least one of the specified patterns are accessible. 
	 * If exclusion patterns are specified, the initial set of accessible source and 
	 * class files is then reduced by eliminating source and class files matched 
	 * by at least one of the exclusion patterns. Inclusion and exclusion 
	 * patterns look like relative file paths with wildcards and are interpreted 
	 * relative to each entry's path of the project. Patterns are case-sensitive 
	 * and they can contain '**', '*' or '?' wildcards (see 
	 * {@link IClasspathEntry#getExclusionPatterns()} for the full description
	 * of their syntax and semantics).
	 * </p>
	 * <p>
	 * For example, if one of the project's entry path is 
	 * <code>/Project/someLib.jar</code>, there are no inclusion filters, and the
	 * exclusion pattern is 
	 * <code>com/xyz/tests/&#42;&#42;</code>, then class files
	 * like <code>/Project/someLib.jar/com/xyz/Foo.class</code>
	 * and <code>/Project/someLib.jar/com/xyz/utils/Bar.class</code> would be accessible,
	 * whereas <code>/Project/someLib.jar/com/xyz/tests/T1.class</code>
	 * and <code>/Project/someLib.jar/com/xyz/tests/quick/T2.class</code> would not be
	 * accessible. 
	 * </p>
	 * <p>
	 * The <code>isExported</code> flag indicates whether this entry is contributed to dependent
	 * projects. If not exported, dependent projects will not see any of the classes from this entry.
	 * If exported, dependent projects will concatenate the inclusion patterns of this entry with the
	 * inclusion patterns of the projects, and they will concatenate the exclusion patterns of this entry
	 * with the exclusion patterns of the project. 
	 * </p>
	 * 
	 * @param path the absolute path of the prerequisite project
	 * @param inclusionPatterns the possibly empty list of inclusion patterns
	 *    represented as relative paths
	 * @param exclusionPatterns the possibly empty list of exclusion patterns
	 *    represented as relative paths
	 * @param isExported indicates whether this entry is contributed to dependent
	 * 	  projects in addition to the output location
	 * @return a new project classpath entry
	 * @since 3.1
	 */
	public static IClasspathEntry newProjectEntry(
			IPath path, 
			IPath[] inclusionPatterns, 
			IPath[] exclusionPatterns, 
			boolean isExported) {
		
		if (!path.isAbsolute()) Assert.isTrue(false, "Path for IClasspathEntry must be absolute"); //$NON-NLS-1$
		
		return new ClasspathEntry(
			IPackageFragmentRoot.K_SOURCE,
			IClasspathEntry.CPE_PROJECT,
			path,
			inclusionPatterns, 
			exclusionPatterns, 
			null, // source attachment
			null, // source attachment root
			null, // specific output folder
			isExported);
	}

