/**
 * Extracts the interface bounds from the given formal type parameter
 * signature. The signature is expected to be dot-based.
 * <p>
 * Note that for types coming from source files, the first bound
 * may be incorrectly classified as the class bound when it should
 * in fact be an interface bound (and there is no class bound).
 * This stems from the fact that it is impossible to make a correct
 * classification based on syntactic information alone. In contrast,
 * for formal type parameter signatures coming from class files, the
 * classification of the first bound should be accurate.
 * </p>
 *
 * @param formalTypeParameterSignature the formal type parameter signature
 * @return the (possibly empty) interface bound type signatures
 * @exception IllegalArgumentException if the signature is syntactically
 *   incorrect
 * @since 3.0
 * TODO (jeem) should be merged with interface bounds into #getTypeParameterBounds(). Clients will know which is class, and which is interface. No need to distinguish from API, and better handle source cases.
 */
public static char[][] getInterfaceBounds(char[] formalTypeParameterSignature) throws IllegalArgumentException {
	int p1 = CharOperation.indexOf(C_COLON, formalTypeParameterSignature);
	if (p1 < 0) {
		// no ":" means can't be a formal type parameter signature
		throw new IllegalArgumentException();
	}
	int p2 = CharOperation.indexOf(C_COLON, formalTypeParameterSignature, p1 + 1);
	if (p2 < 0) {
		// no class or interface bounds
		return CharOperation.NO_CHAR_CHAR;
	}
	return CharOperation.splitOn(C_COLON, formalTypeParameterSignature, p2 + 1, formalTypeParameterSignature.length);
}

