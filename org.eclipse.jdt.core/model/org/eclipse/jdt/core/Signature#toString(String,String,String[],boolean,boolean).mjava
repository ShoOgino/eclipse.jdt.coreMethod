	/**
	 * Converts the given method signature to a readable string.
	 * <p>
	 * For example:
	 * <pre>
	 * <code>
	 * toString("([Ljava.lang.String;)V", "main", new String[] {"args"}, false, true) -> "void main(String[] args)"
	 * </code>
	 * </pre>
	 * </p>
	 * 
	 * @param methodSignature the method signature to convert
	 * @param methodName the name of the method to insert in the result, or 
	 *   <code>null</code> if no method name is to be included
	 * @param parameterNames the parameter names to insert in the result, or 
	 *   <code>null</code> if no parameter names are to be included; if supplied,
	 *   the number of parameter names must match that of the method signature
	 * @param fullyQualifyTypeNames <code>true</code> if type names should be fully
	 *   qualified, and <code>false</code> to use only simple names
	 * @param includeReturnType <code>true</code> if the return type is to be
	 *   included
	 * @return the string representation of the method signature
	 */
	public static String toString(
		String methodSignature,
		String methodName,
		String[] parameterNames,
		boolean fullyQualifyTypeNames,
		boolean includeReturnType) {
		StringBuffer sb = new StringBuffer();
		String[] paramTypes = getParameterTypes(methodSignature);
		if (includeReturnType) {
			String returnType = getReturnType(methodSignature);
			if (returnType.length() != 0) {
				sb.append(toString(returnType));
				sb.append(' ');
			}
		}
		if (methodName != null)
			sb.append(methodName);
		sb.append(C_PARAM_START);
		for (int i = 0; i < paramTypes.length; ++i) {
			if (i != 0)
				sb.append(", ");
			String readableParamType = toString(paramTypes[i]);
			if (!fullyQualifyTypeNames) {
				int lastDot = readableParamType.lastIndexOf(C_DOT);
				if (lastDot != -1) {
					readableParamType = readableParamType.substring(lastDot + 1);
				}
			}
			sb.append(readableParamType);
			if (parameterNames != null) {
				sb.append(' ');
				sb.append(parameterNames[i]);
			}
		}
		sb.append(C_PARAM_END);
		return sb.toString();
	}

