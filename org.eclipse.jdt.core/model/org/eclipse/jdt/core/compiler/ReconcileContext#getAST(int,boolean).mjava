/**
 * Returns the AST created from the current state of the working copy.
 * Creates one if none exists yet.
 * Returns <code>null</code> if the current state of the working copy
 * doesn't allow the AST to be created (e.g. if the working copy's content 
 * cannot be parsed).
 * <p>
 * If the requested AST level is different from the {@link #getASTLevel() current AST level}
 * or if binding resolutions is requested when no {@link #isResolvingBindings() binding resolution}
 * was requested when reconciling, then a different AST is created. Note that this AST does not 
 * become the current AST and it is only valid for the requestor.
 * </p>
 * 
 * @param astLevel the level of AST requested
 * @param resolveBindings whether the bindings in the returned AST should be resolved
 * @return the AST created from the current state of the working copy,
 *   or <code>null</code> if none could be created
 * @exception JavaModelException  if the contents of the working copy
 *		cannot be accessed. Reasons include:
 * <ul>
 * <li> The working copy does not exist (ELEMENT_DOES_NOT_EXIST)</li>
 * </ul>
 */
public org.eclipse.jdt.core.dom.CompilationUnit getAST(int astLevel, boolean resolveBindings) throws JavaModelException {
	if (this.operation.astLevel != astLevel || !this.operation.resolveBindings & resolveBindings) {
		// create AST (optionally resolving bindings)
		ASTParser parser = ASTParser.newParser(astLevel);
		parser.setCompilerOptions(workingCopy.getJavaProject().getOptions(true));
		if (resolveBindings && JavaProject.hasJavaNature(workingCopy.getJavaProject().getProject()))
			parser.setResolveBindings(true);
		parser.setSource(workingCopy);
		return (org.eclipse.jdt.core.dom.CompilationUnit) parser.createAST(this.operation.progressMonitor);		
	}
	return this.operation.makeConsistent(this.workingCopy, null/*don't report problems to the working copy's problem requestor*/);
}

