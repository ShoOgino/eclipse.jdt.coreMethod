	/** TODO: (jim) improve doc to mention classpath containers
	 * This is a helper method returning the resolved classpath for the project, as a list of classpath entries, 
	 * where all classpath variable entries have been resolved and substituted with their final target entries.
	 * <p>
	 * A resolved classpath corresponds to a particular instance of the raw classpath bound in the context of 
	 * the current values of the referred variables, and thus should not be persisted.
	 * <p>
	 * A classpath variable provides an indirection level for better sharing a classpath. As an example, it allows
	 * a classpath to no longer refer directly to external JARs located in some user specific location. The classpath
	 * can simply refer to some variables defining the proper locations of these external JARs.
	 * <p>
	 * The boolean argument <code>ignoreUnresolvedVariable</code> allows to specify how to handle unresolvable variables,
	 * when set to <code>true</code>, missing variables are simply ignored, the resulting path is then only formed of the
	 * resolvable entries, without any indication about which variable(s) was ignored. When set to <code>false</code>, a
	 * JavaModelException will be thrown for the first unresolved variable (from left to right).
	 * 
	 * @param ignoreUnresolvedVariable specify how to handle unresolvable variables
	 * @return the resolved classpath for the project, as a list of classpath entries, 
	 * where all classpath variable entries have been resolved and substituted with their final target entries
	 * @exception JavaModelException in one of the corresponding situation:
	 * <ul>
	 *    <li> this element does not exist </li>
	 *    <li> an exception occurs while accessing its corresponding resource </li>
	 *    <li> a classpath variable was not resolvable and <code>ignoreUnresolvedVariable</code> was set to <code>false</code>. </li>
	 * </ul>
	 * @see IClasspathEntry 
	 */
	IClasspathEntry[] getResolvedClasspath(boolean ignoreUnresolvedVariable) throws JavaModelException;

