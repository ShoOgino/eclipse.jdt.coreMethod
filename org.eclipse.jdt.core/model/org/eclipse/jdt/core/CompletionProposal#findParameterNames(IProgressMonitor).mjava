	/**
	 * Finds the method parameter names.
	 * This information is relevant to method reference (and
	 * method declaration proposals). Returns <code>null</code>
	 * if not available or not relevant.
	 * <p>
	 * The client must not modify the array returned.
	 * </p>
	 * <p>
	 * <b>Note that this is an expensive thing to compute, which may require
	 * parsing Java source files, etc. Use sparingly.
	 * </p>
	 * 
	 * @param monitor the progress monitor, or <code>null</code> if none
	 * @return the parameter names, or <code>null</code> if none
	 * or not available or not relevant
	 */
	public char[][] findParameterNames(IProgressMonitor monitor) {
		if (!this.parameterNamesComputed) {
			this.parameterNamesComputed = true;
			
			switch(this.completionKind) {
				case ANONYMOUS_CLASS_DECLARATION:
				case METHOD_REF:
					this.parameterNames =  this.findMethodParameterNames(
							this.declarationPackageName,
							this.declarationTypeName,
							this.name,
							this.parameterPackageNames,
							this.parameterTypeNames);
					//this.parameterNames = this.findMethodParameterNames(
					//		this.declarationSignature,
					//		this.name,
					//		Signature.getParameterTypes(this.getSignature()));
					break;
				case METHOD_DECLARATION:
					this.parameterNames =  this.findMethodParameterNames(
							this.declarationPackageName,
							this.declarationTypeName,
							this.name,
							this.parameterPackageNames,
							this.parameterTypeNames);
					//char[][] parameterTypes = Signature.getParameterTypes(this.getSignature();
					///this.parameterNames = this.findMethodParameterNames(
					//		this.declarationSignature,
					//		this.name,
					//		parameterTypes);
					if(this.parameterNames != null) {
						this.updateCompletion = true;
					}
					break;
			}			
		}
		return this.parameterNames;
	}

