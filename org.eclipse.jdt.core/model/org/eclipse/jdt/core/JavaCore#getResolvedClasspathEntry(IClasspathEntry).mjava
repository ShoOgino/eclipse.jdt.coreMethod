/**
 * This is a helper method which returns the resolved classpath entry denoted 
 * by a given entry (if it is a variable entry). It is obtained by resolving the variable 
 * reference in the first segment. Returns <node>null</code> if unable to resolve using 
 * the following algorithm:
 * <ul>
 * <li> if variable segment cannot be resolved, returns <code>null</code></li>
 * <li> finds a project, JAR or binary folder in the workspace at the resolved path location</li>
 * <li> if none finds an external JAR file or folder outside the workspace at the resolved path location </li>
 * <li> if none returns <code>null</code></li>
 * </ul>
 * <p>
 * Variable source attachment path and root path are also resolved and recorded in the resulting classpath entry.
 * <p>
 * @return the resolved library or project classpath entry, or <code>null</code>
 *   if the given variable entry could not be resolved to a valid classpath entry
 */
public static IClasspathEntry getResolvedClasspathEntry(IClasspathEntry entry) {

	if (entry.getEntryKind() != IClasspathEntry.CPE_VARIABLE) return entry;

	IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();
	IPath resolvedPath = JavaCore.getResolvedVariablePath(entry.getPath());
	if (resolvedPath == null) return null;

	Object target = JavaModel.getTarget(workspaceRoot, resolvedPath, false);
	if (target == null) return null;

	// inside the workspace
	if (target instanceof IResource){	
		IResource resolvedResource = (IResource) target;
		if (resolvedResource != null){
			switch(resolvedResource.getType()){
				case IResource.PROJECT :
					return JavaCore.newProjectEntry(resolvedPath); // internal project
				case IResource.FILE :
					String extension = resolvedResource.getFileExtension();
					if ("jar"/*nonNLS*/.equalsIgnoreCase(extension) || "zip"/*nonNLS*/.equalsIgnoreCase(extension)){ // internal binary archive
						return JavaCore.newLibraryEntry( 
								resolvedPath,
								getResolvedVariablePath(entry.getSourceAttachmentPath()),
								getResolvedVariablePath(entry.getSourceAttachmentRootPath())); 
					}
					break;
				case IResource.FOLDER :	// internal binary folder
					return JavaCore.newLibraryEntry( 
							resolvedPath,
							getResolvedVariablePath(entry.getSourceAttachmentPath()),
							getResolvedVariablePath(entry.getSourceAttachmentRootPath())); 
			}
		}
	}
	// outside the workspace
	if (target instanceof File){
		File externalFile = (File) target;
		if (externalFile.isFile()){
			String fileName = externalFile.getName().toLowerCase();
			if (fileName.endsWith(".jar"/*nonNLS*/) || fileName.endsWith(".zip"/*nonNLS*/)){ // external binary archive
				return JavaCore.newLibraryEntry( 
						resolvedPath,
						getResolvedVariablePath(entry.getSourceAttachmentPath()),
						getResolvedVariablePath(entry.getSourceAttachmentRootPath())); 
			}
		} else { // external binary folder
			return JavaCore.newLibraryEntry( 
						resolvedPath,
						getResolvedVariablePath(entry.getSourceAttachmentPath()),
						getResolvedVariablePath(entry.getSourceAttachmentRootPath())); 
		}
	}
	return null;
}

