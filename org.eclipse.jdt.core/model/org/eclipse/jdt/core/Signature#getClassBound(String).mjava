/**
 * Extracts the class bound from the given formal type parameter
 * signature. The signature is expected to be dot-based.
 * <p>
 * Note that for types coming from source files, the first bound
 * may be incorrectly classified as the class bound when it should
 * in fact be an interface bound (and there is no class bound).
 * This stems from the fact that it is impossible to make a correct
 * classification based on syntactic information alone. In contrast,
 * for formal type parameter signatures coming from class files, the
 * classification of the first bound should be accurate.
 * </p>
 *
 * @param formalTypeParameterSignature the formal type parameter signature
 * @return the class bound type signature, or <code>null</code> if none
 * @exception IllegalArgumentException if the signature is syntactically
 *   incorrect
 * @since 3.0
 * TODO (jeem) should be merged with interface bounds into #getTypeParameterBounds(). Clients will know which is class, and which is interface. No need to distinguish from API, and better handle source cases.
 */
public static String getClassBound(String formalTypeParameterSignature) throws IllegalArgumentException {
	char[] result = getClassBound(formalTypeParameterSignature.toCharArray());
	if (result == null) {
		return null;
	} else {
		return new String(result);
	}
}

