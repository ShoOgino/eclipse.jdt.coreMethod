	/**
	 * Creates and returns a new classpath entry of kind <code>CPE_CONTAINER</code>
	 * for the given path. The path of the container will be used during resolution so as to map this
	 * container entry to a set of other classpath entries the container is acting for.
	 * <p>
	 * A container entry allows to express indirect references to a set of libraries, projects and variable entries,
	 * which can be interpreted differently for each Java project where it is used.
	 * A classpath container entry can be resolved using <code>JavaCore#getResolvedClasspathContainer</code>,
	 * and updated with <code>JavaCore#classpathContainerChanged</code>
	 * <p>
	 * A container is exclusively resolved by a <code>ClasspathContainerResolver</code> registered onto the
	 * extension point "org.eclipse.jdt.core.classpathContainerResolver".
	 * <p>
	 * Example of an ClasspathContainerResolver for a classpath container named "JDK/1.2"
	 * <extension
	 *    point="org.eclipse.jdt.core.containerResolver">
	 *    <containerResolver
	 *       prefix="JDK"
	 *       class="com.example.MyResolver"/> 
	 * <p>
	 * Note that this operation does not attempt to validate classpath containers
	 * or access the resources at the given paths.
	 * <p>
	 * The resulting entry is not exported to dependent projects. This method is equivalent to
	 * <code>newContainerEntry(-,false)</code>.
	 * <p>
	 * @param containerPath - the path identifying the container, it must be formed of at least one
	 * 	segment
	 * @param isExported - a boolean indicating whether this entry is contributed to dependent
	 *		projects in addition to the output location
	 * @return a new container classpath entry
	 * 
	 * @see JavaCore#getResolvedClasspathContainer(IPath, IJavaProject)
	 * @see JavaCore#classpathContainerChanged(IPath, IJavaElement, IProgressMonitor)
	 * @see JavaCore#newContainerEntry(IPath, boolean)
	 * @since 2.0
	 */
	public static IClasspathEntry newContainerEntry(IPath containerPath) {
			
		return newContainerEntry(containerPath, false);
	}

