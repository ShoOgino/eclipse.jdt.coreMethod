	/**
	 * This method is used to sort elements within each compilation unit inside this compilationUnits array.
	 * The positions are mapped to the new positions once the sorting is done. This should be used to
	 * update the positions of markers within compilation units.
	 * The sizes of positions and compilationUnits array have to be the same.
	 * 
	 * @param compilationUnits the given working copies to process
	 * @param positions positions to map
	 * @param comparator the comparator to use for the sorting
	 * @param monitor the given progress monitor
	 * 
	 * @exception JavaModelException this exception is thrown if one of the supplied elements are not an instance of IWorkingCopy
	 * @exception IllegalArgumentException this exception is thrown if the positions and the compilationUnits arrays don't have the
	 * same size, the compilationUnits array is null or the comparator is null.
	 * 
	 * @since 2.1
	 */
	public static void sort(ICompilationUnit[] compilationUnits, int[][] positions, Comparator comparator, IProgressMonitor monitor) throws JavaModelException {
		if (comparator == null || compilationUnits == null || (positions != null && positions.length != compilationUnits.length)) {
			throw new IllegalArgumentException();
		}
		SortElementsOperation operation = new SortElementsOperation(compilationUnits , positions, comparator);
		try {
			JavaCore.run(operation, monitor);
		} catch(CoreException e) {
			throw new JavaModelException(e);
		}
	}	

