		/**
		 * The <code>DefaultJavaElementComparator</code> implementation of this
		 * <code>java.util.Comparator</code> method can only be used to compare
		 * instances of <code>org.eclipse.jdt.core.dom.BodyDeclaration</code>.
		 * <p>
		 * The categories of each body declaration are compared. If they are
		 * in different categories, they are ordered based on their category.
		 * Body declarations within the same category are ordered by signature
		 * string. Body declarations with the same signature string are ordered
		 * by their original relative positions.
		 * </p>
		 */
		public int compare(Object o1, Object o2) {
			if (!(o1 instanceof BodyDeclaration) && !(o2 instanceof BodyDeclaration)) {
				throw new ClassCastException();
			}
			BodyDeclaration node1 = (BodyDeclaration) o1;
			BodyDeclaration node2 = (BodyDeclaration) o2;
			int category1 = getCategory(node1);
			int category2 = getCategory(node2);
			
			if (category1 != category2) {
				return category1 - category2;
			}
			if (o1 == o2) {
				return 0;
			}
			String node1Signature = buildSignature(node1);
			String node2Signature = buildSignature(node2);
			// TODO: (olivier) remove unnecessary null checks
			if (node1Signature == null || node2Signature == null) {
				return 0;
			} else if (node1Signature.length() != 0 && node2Signature.length() != 0) {
				int compare = this.collator.compare(node1Signature, node2Signature);
				if (compare != 0) {
					return compare;
				}
			}
			int sourceStart1 = ((Integer) node1.getProperty(CompilationUnitSorter.RELATIVE_ORDER)).intValue();
			int sourceStart2 = ((Integer) node2.getProperty(CompilationUnitSorter.RELATIVE_ORDER)).intValue();
			return sourceStart1 - sourceStart2;
		}

