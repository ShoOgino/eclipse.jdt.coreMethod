		/**
		 * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)
		 */
		public int compare(Object o1, Object o2) {
			if (!(o1 instanceof BodyDeclaration) && !(o2 instanceof BodyDeclaration)) {
				throw new ClassCastException();
			}
			BodyDeclaration node1 = (BodyDeclaration) o1;
			BodyDeclaration node2 = (BodyDeclaration) o2;
			int category1 = getCategory(node1);
			int category2 = getCategory(node2);
			
			if (category1 != category2) {
				return category1 - category2;
			}
			if (o1 == o2) {
				return 0;
			}
			switch(node1.getNodeType()) {
				case ASTNode.METHOD_DECLARATION :
					MethodDeclaration method1 = (MethodDeclaration) node1;
					MethodDeclaration method2 = (MethodDeclaration) node2;
					
					if (method1.isConstructor()) {
						return compareParams(method1, method2);
					}
					int compare = this.collator.compare(method1.getName().getIdentifier(), method2.getName().getIdentifier());
					if (compare != 0) {
						return compare;
					}
					return compareParams(method1, method2);
				case ASTNode.FIELD_DECLARATION :
					FieldDeclaration fieldDeclaration1 = (FieldDeclaration) node1;
					FieldDeclaration fieldDeclaration2 = (FieldDeclaration) node2;
					VariableDeclarationFragment fragment1 = (VariableDeclarationFragment) fieldDeclaration1.fragments().get(0);
					VariableDeclarationFragment fragment2 = (VariableDeclarationFragment) fieldDeclaration2.fragments().get(0);
					return this.collator.compare(fragment1.getName().getIdentifier(), fragment2.getName().getIdentifier());
				case ASTNode.INITIALIZER :
					return ((Integer) node1.getProperty(CompilationUnitSorter.SOURCE_START)).intValue() - ((Integer) node2.getProperty(CompilationUnitSorter.SOURCE_START)).intValue();
				case ASTNode.TYPE_DECLARATION :
					TypeDeclaration typeDeclaration1 = (TypeDeclaration) node1;
					TypeDeclaration typeDeclaration2 = (TypeDeclaration) node2;
					return this.collator.compare(typeDeclaration1.getName().getIdentifier(), typeDeclaration2.getName().getIdentifier());
			}
			return 0;
		}

