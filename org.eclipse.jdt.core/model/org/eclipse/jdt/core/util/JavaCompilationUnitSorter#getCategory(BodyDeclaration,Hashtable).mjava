	/**
	 * This method is used to retrieve the category for a body declaration node according to the 
	 * preferences passed as options.
	 * 
	 * @param node the given node
	 * @param options the options
	 * @return the category corresponding to the given node
	 * 
	 * @since 2.1
	 */
	public static int getCategory(BodyDeclaration node, Hashtable options) {
		switch(node.getNodeType()) {
			case ASTNode.METHOD_DECLARATION :
				MethodDeclaration methodDeclaration = (MethodDeclaration) node;
				if (methodDeclaration.isConstructor()) {
					return Integer.parseInt((String)options.get(JavaCore.SORTING_CONSTRUCTOR_ORDER));
				}
				if (Flags.isStatic(methodDeclaration.getModifiers())) {
					return Integer.parseInt((String)options.get(JavaCore.SORTING_STATIC_METHOD_ORDER));
				} else {
					return Integer.parseInt((String)options.get(JavaCore.SORTING_METHOD_ORDER));
				}
			case ASTNode.FIELD_DECLARATION :
				FieldDeclaration fieldDeclaration = (FieldDeclaration) node;
				if (Flags.isStatic(fieldDeclaration.getModifiers())) {
					return Integer.parseInt((String)options.get(JavaCore.SORTING_STATIC_FIELD_ORDER));
				} else {
					return Integer.parseInt((String)options.get(JavaCore.SORTING_FIELD_ORDER));
				}
			case ASTNode.TYPE_DECLARATION :
				return Integer.parseInt((String)options.get(JavaCore.SORTING_TYPE_ORDER));
			case ASTNode.INITIALIZER :
				Initializer initializer = (Initializer) node;
				if (Flags.isStatic(initializer.getModifiers())) {
					return Integer.parseInt((String)options.get(JavaCore.SORTING_STATIC_INITIALIZER_ORDER));
				} else {
					return Integer.parseInt((String)options.get(JavaCore.SORTING_INITIALIZER_ORDER));
				}
		}
		return 0;
	}

