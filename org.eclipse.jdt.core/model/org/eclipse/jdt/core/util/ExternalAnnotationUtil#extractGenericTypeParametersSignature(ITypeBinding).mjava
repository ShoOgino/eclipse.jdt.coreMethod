	/**
	 * Answer the signature of all type parameters of this type in class file format.
	 * @param type binding representing a type, required to have type parameters
	 * @return a signature in class file format
	 * @since 3.19
	 */
	public static String extractGenericTypeParametersSignature(ITypeBinding type) {
		StringBuilder signature = new StringBuilder().append('<');
		for (ITypeBinding typeParameter : type.getTypeParameters()) {
			signature.append(typeParameter.getName());
			// superclass (if relevant, else empty ':'):
			signature.append(':');
			ITypeBinding superclass = typeParameter.getSuperclass();
			if (superclass != null) {
				String superclassSignature = extractGenericTypeSignature(superclass);
				boolean superIsRelevant = typeParameter.getInterfaces().length == 0;
				superIsRelevant |= !superclassSignature.equals(new String(ConstantPool.JavaLangObjectSignature));
				if (superIsRelevant) {
					signature.append(superclassSignature);
				}
			}
			// superinterfaces:
			for (ITypeBinding superInterface : typeParameter.getInterfaces()) {
				signature.append(':').append(extractGenericTypeSignature(superInterface));
			}
		}
		signature.append('>');
		return signature.toString();
	}

