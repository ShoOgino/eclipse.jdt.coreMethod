		private String buildSignature(Type type) {
			switch(type.getNodeType()) {
				case ASTNode.PRIMITIVE_TYPE :
					PrimitiveType.Code code = ((PrimitiveType) type).getPrimitiveTypeCode();
					if (code == PrimitiveType.INT) {
						return "int"; //$NON-NLS-1$
					} else if (code == PrimitiveType.CHAR) {
						return "char"; //$NON-NLS-1$
					} else if (code == PrimitiveType.BOOLEAN) {
						return "boolean"; //$NON-NLS-1$
					} else if (code == PrimitiveType.SHORT) {
						return "short"; //$NON-NLS-1$
					} else if (code == PrimitiveType.LONG) {
						return "long"; //$NON-NLS-1$
					} else if (code == PrimitiveType.FLOAT) {
						return "float"; //$NON-NLS-1$
					} else if (code == PrimitiveType.DOUBLE) {
						return "double"; //$NON-NLS-1$
					} else if (code == PrimitiveType.BYTE) {
						return "byte"; //$NON-NLS-1$
					} else if (code == PrimitiveType.VOID) {
						return "void"; //$NON-NLS-1$
					} else {
						return null; // should never happen
					}
				case ASTNode.ARRAY_TYPE :
					ArrayType arrayType = (ArrayType) type;
					StringBuffer buffer = new StringBuffer();
					buffer.append(buildSignature(arrayType.getElementType()));
					int dimensions = arrayType.getDimensions();
					for (int j = 0; j < dimensions; j++) {
						buffer.append("[]"); //$NON-NLS-1$
					}
					return buffer.toString();
				case ASTNode.SIMPLE_TYPE :
					SimpleType simpleType = (SimpleType) type;
					return buildSignature(simpleType.getName());
			}
			return null; // should never happen
		}

