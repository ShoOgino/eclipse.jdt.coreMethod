	private static String updateSignature(String originalSignature, String annotatedSignature, int updatePosition, MergeStrategy mergeStrategy) {
		StringBuffer buf = new StringBuffer();
		String signatureToReplace;
		String postfix = null;
		if (updatePosition <= POSITION_TYPE_PARAMETER) {
			// '<' [Annot] Identifier ClassBound {InterfaceBound} ... '>'
			assert originalSignature.charAt(0) ==  '<': "generic signature must start with '<'"; //$NON-NLS-1$
			SignatureWrapper wrapper = new SignatureWrapper(originalSignature.toCharArray(), true, true); // may already contain annotations
			wrapper.start = 1; // skip '<'
			// skip preceding type parameters:
			for (int i = 0; i < (-updatePosition+POSITION_TYPE_PARAMETER); i++) {
				wrapper.skipTypeParameter();
			}
			int start = wrapper.start;
			// copy entire prefix:
			buf.append(originalSignature, 0, start);
			// process selected type parameter:
			int end = wrapper.skipTypeParameter();
			signatureToReplace = originalSignature.substring(start, end);
			updateTypeParameter(buf, signatureToReplace.toCharArray(), annotatedSignature.toCharArray(), mergeStrategy);
			// extract postfix:
			postfix = originalSignature.substring(end, originalSignature.length());
		} else {
			switch (updatePosition) {
				case POSITION_FULL_SIGNATURE:
					signatureToReplace = originalSignature;
					break;
				case POSITION_RETURN_TYPE:
					assert originalSignature.charAt(0) == '(' || originalSignature.charAt(0) == '<': "signature must start with '(' or '<'"; //$NON-NLS-1$
					int close = originalSignature.indexOf(')');
					buf.append(originalSignature, 0, close+1);
					signatureToReplace = originalSignature.substring(close+1);
					break;
				default: // parameter
					SignatureWrapper wrapper = new SignatureWrapper(originalSignature.toCharArray(), true, true); // may already contain annotations
					wrapper.start = CharOperation.indexOf('(', wrapper.signature) + 1; // possibly skipping type parameters
					for (int i = 0; i < updatePosition; i++)
						wrapper.start = wrapper.skipAngleContents(wrapper.computeEnd()) + 1;
					int start = wrapper.start;
					int end = wrapper.skipAngleContents(wrapper.computeEnd());
					buf.append(originalSignature, 0, start);
					signatureToReplace = originalSignature.substring(start, end+1);
					postfix = originalSignature.substring(end+1, originalSignature.length());
			}
			updateType(buf, signatureToReplace.toCharArray(), annotatedSignature.toCharArray(), mergeStrategy);
		}
		if (postfix != null)
			buf.append(postfix);
		return buf.toString();
	}

