	/**
	 * Reorders the declarations in the given compilation unit. The caller is
	 * responsible for arranging in advance that the given compilation unit is
	 * a working copy, and for saving (or discarding) the changes afterwards.
	 * <p>
	 * The optional <code>positions</code> array contains a non-decreasing 
	 * ordered list of character-based source positions within the compilation
	 * unit's source code string. Upon return from this method, the positions in
	 * the array reflect the corresponding new locations in the modified source
	 * code string, Note that this operation modifies the given array in place.
	 * </p>
	 * <p>
	 * The <code>compare</code> method of the given comparator is passed pairs
	 * of AST body declarations (subclasses of <code>BodyDeclaration</code>) 
	 * representing body declarations at the same level. The comparator is
	 * called on body declarations of nested classes, including anonymous and
	 * local classes, but always at the same level. Clients must not rely on
	 * the AST nodes being properly parented or on having source range
	 * information. The class <code>DefaultJavaElementComparator</code> is a
	 * standard comparator; however, clients are free to provide their own
	 * comparator implementations.
	 * </p>
	 *
	 * @param compilationUnit the given compilation unit, which must be a 
	 * working copy
	 * @param positions an array of source positions to map, or 
	 * <code>null</code> if none. If supplied, the positions must 
	 * character-based source positions within the original source code for
	 * the given compilation unit, arranged in non-decreasing order.
	 * The array is updated in place when this method returns to reflect the
	 * corresponding source positions in the permuted source code string.
	 * @param comparator the comparator capable of ordering 
	 * <code>BodyDeclaration</code>s
	 * @param monitor the progress monitor to notify, or <code>null</code> if
	 * none
	 * @exception JavaModelException if the compilation unit could not be
	 * sorted. Reasons include:
	 * <ul>
	 * <li> The given compilation unit does not exist (ELEMENT_DOES_NOT_EXIST)</li>
	 * <li> The given compilation unit is not a working copy</li>
	 * <li> A <code>CoreException</code> occurred while updating the underlying
	 * resource
	 * </ul>
	 * @exception IllegalArgumentException this exception is thrown if either
	 * the supplied compilation unit is null or the comparator is null
	 * @see org.eclipse.jdt.core.dom.BodyDeclaration
	 * @see #DefaultJavaElementComparator
	 * @since 2.1
	 */
	public static void sort(ICompilationUnit compilationUnit, int[] positions, Comparator comparator, IProgressMonitor monitor) throws JavaModelException {
		sort(new ICompilationUnit[] { compilationUnit }, new int[][] {positions}, comparator, monitor);
	}

