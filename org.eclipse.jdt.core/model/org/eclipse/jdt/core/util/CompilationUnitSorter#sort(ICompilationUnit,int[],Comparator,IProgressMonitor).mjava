	/**
	 * Reorders the declarations in this compilation unit according to the given
	 * comparator.
	 * <p>
	 * The <code>compare</code> method of the given comparator is passed pairs
	 * of AST body declarations (subclasses of <code>BodyDeclaration</code>) 
	 * representing body declarations at the same level. The comparator is
	 * called on body declarations of nested classes, including anonymous and
	 * local classes, but always at the same level.
	 * </p>
	 * <p>
	 * The <code>positions</code> array contains character-based source
	 * positions within the source code for the compilation unit. As the
	 * declarations are rearranged, the positions in this array are updated to
	 * reflect the corresponding position in the modified source code.
	 * </p>
	 * <p>
	 * Clients cannot rely on the AST nodes being properly parented nor on their
	 * usual source ranges. The starting position of the source range for each
	 * body declaration is available as the <code>RELATIVE_ORDER</code> property
	 * of the body declaration passed to the comparator.
	 * </p>
	 * <p>
	 * <code>DefaultJavaElementComparator</code> is a standard implementation of
	 * a comparator.
	 * <ul>
	 * <li>static fields, arranged alphabetically by name and access modifier
	 * (public, protected, private, default)</li>
	 * <li>static initializers in order of appearance</li>
	 * <li>instance fields, arranged alphabetically by name and access modifier
	 * (public, protected, private, default)</li>
	 * <li>instance initializers in order of appearance</li>
	 * <li>type declarations, arranged alphabetically by name and access modifier
	 * (public, protected, private, default)</li>
	 * <li>constructors, arranged by parameter order and access modifier
	 * (public, protected, private, default)</li>
	 * <li>methods, arranged by alphabetically by name and parameter order and 
	 * access modifier (public, protected, private, default)</li>
	 * </p>
	 *
	 * @param compilationUnit the compilation unit
	 * @param positions an array of increasing positions to map. These are
	 * character-based source positions inside the original source, for which
	 * corresponding positions in the modified source will be computed (so as to
	 * relocate elements associated with the original source). It updates the
	 * positions array with updated positions. If set to <code>null</code>, then
	 * no positions are mapped.
	 * @param comparator the comparator to use for the sorting
	 * @param monitor the progress monitor to notify, or <code>null</code> if
	 * none
	 * @exception JavaModelException if the compilation unit could not be sorted.
	 * Reasons include:
	 * <ul>
	 * <li> The given compilation unit does not exist (ELEMENT_DOES_NOT_EXIST)</li>
	 * <li> The given compilation unit is not a working copy</li>
	 * <li> A <code>CoreException</code> occurred while updating the underlying
	 * resource
	 * </ul>
	 * @exception CoreException a Core exception is thrown if the supplied compilation unit is <code>null</code></li>,
	 * the supplied compilation unit is not an instance of IWorkingCopy
	 * @see org.eclipse.jdt.core.dom.BodyDeclaration
	 * @see #RELATIVE_ORDER
	 * @see #DefaultJavaElementComparator
	 * @since 2.1
	 * TODO: (olivier) Should throw JavaModelException rather than CoreException
	 */
	public static void sort(ICompilationUnit compilationUnit, int[] positions, Comparator comparator, IProgressMonitor monitor) throws CoreException {
	    // TODO: (olivier) Should throw IllegalArgumentException if compilationUnit == null
	    // TODO: (olivier) Should throw IllegalArgumentException if comparator == null
		if (comparator == null || compilationUnit == null) {
			return;
		}
		SortElementsOperation operation = new SortElementsOperation(new ICompilationUnit[] { compilationUnit }, new int[][] {positions}, comparator);
		JavaCore.run(operation, monitor);
	}

