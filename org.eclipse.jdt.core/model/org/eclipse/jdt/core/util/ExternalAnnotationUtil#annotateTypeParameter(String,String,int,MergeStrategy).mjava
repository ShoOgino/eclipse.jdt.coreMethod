	/**
	 * Apply the specified changes on a type parameter within the given signature.
	 * This method can be used as a dry run without modifying an annotation file.
	 * 
	 * @param originalSignature the original full signature, may be annotated already
	 * @param annotatedType a type signature with additional annotations (incl. {@link #NO_ANNOTATION}).
	 * @param rank the index of a type parameter to annotate
	 * @param mergeStrategy controls how old and new signatures should be merged
	 * @return an array of length four: <ul>
	 * <li>prefix up-to the changed type</li>
	 * <li>original type</li>
	 * <li>changed type</li>
	 * <li>postfix after the changed type</li>
	 * </ul>
	 * @since 3.19
	 */
	public static String[] annotateTypeParameter(String originalSignature, String annotatedType, int rank, MergeStrategy mergeStrategy)
	{
		String[] result = new String[4]; // prefix, orig, replacement, postfix
		StringBuffer buf = new StringBuffer();
		SignatureWrapper wrapper = new SignatureWrapper(originalSignature.toCharArray(), true, true); // may already contain annotations
		wrapper.start = 1; // skip '<'
		// prefix:
		for (int i = 0; i < rank; i++) {
			wrapper.skipTypeParameter();
		}
		int start = wrapper.start;
		result[0] = originalSignature.substring(0, start);
		// orig:
		int end = wrapper.skipTypeParameter();
		result[1] = originalSignature.substring(start, end);
		// replacement:
		SignatureWrapper oWrap = new SignatureWrapper(result[1].toCharArray());
		SignatureWrapper nWrap = new SignatureWrapper(annotatedType.toCharArray());
		mergeAnnotation(buf, oWrap, nWrap, mergeStrategy);
		updateTypeParameter(buf, oWrap.tail(), nWrap.tail(), mergeStrategy);
		result[2] = buf.toString();
		// postfix:
		result[3] = originalSignature.substring(end, originalSignature.length());
		return result;
	}

