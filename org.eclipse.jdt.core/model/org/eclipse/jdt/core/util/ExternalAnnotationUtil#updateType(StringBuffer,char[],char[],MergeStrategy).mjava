	/**
	 * Update 'oldType' with annotations from 'newType' guided by 'mergeStrategy'.
	 * The result is written into 'buf' as we go.
	 */
	private static boolean updateType(StringBuffer buf, char[] oldType, char[] newType, MergeStrategy mergeStrategy) {
		SignatureWrapper oWrap = new SignatureWrapper(oldType, true);
		SignatureWrapper nWrap = new SignatureWrapper(newType, true);
		if (match(buf, oWrap, nWrap, 'L', false)
			|| match(buf, oWrap, nWrap, 'T', false))
		{
			mergeAnnotation(buf, oWrap, nWrap, mergeStrategy);
			buf.append(oWrap.nextName());
			nWrap.nextName(); // skip
			if (match(buf, oWrap, nWrap, '<', false)) {
				do {
					int oStart = oWrap.start;
					int nStart = nWrap.start;
					oWrap.computeEnd();
					nWrap.computeEnd();
					if (updateType(buf, oWrap.getFrom(oStart), nWrap.getFrom(nStart), mergeStrategy))
						mergeAnnotation(buf, oWrap, nWrap, mergeStrategy);
				} while (!match(buf, oWrap, nWrap, '>', false));
			}
			match(buf, oWrap, nWrap, ';', true);
		} else if (match(buf, oWrap, nWrap, '[', false)) {
			mergeAnnotation(buf, oWrap, nWrap, mergeStrategy);
			updateType(buf, oWrap.tail(), nWrap.tail(), mergeStrategy);
		} else if (match(buf, oWrap, nWrap, '*', false)
				|| match(buf, oWrap, nWrap, '+', false)
				|| match(buf, oWrap, nWrap, '-', false))
		{
			return true; // annotation allowed after this (not included in oldType / newType)
		} else {			
			buf.append(oldType);
		}
		return false;
	}

