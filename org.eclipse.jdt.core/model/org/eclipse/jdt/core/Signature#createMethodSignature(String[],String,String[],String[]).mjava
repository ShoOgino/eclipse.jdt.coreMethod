/**
 * Creates a method signature. The encoded method signature is dot-based.
 *
 * @param parameterTypes the list of parameter type signatures
 * @param returnType the return type signature
 * @param formalTypeParameters the list of formal type parameter signatures
 * @param thrownExceptions the list of type signatures for thrown exceptions
 * @return the encoded method signature
 * @since 3.0
 */
public static String createMethodSignature(
		String[] parameterTypes,
		String returnType,
		String[] formalTypeParameters,
		String[] thrownExceptions) {
	char[][] formalTypes = new char[formalTypeParameters.length][];
	for (int i = 0; i < formalTypeParameters.length; i++) {
		formalTypes[i] = formalTypeParameters[i].toCharArray();
	}
	char[][] parameters = new char[parameterTypes.length][];
	for (int i = 0; i < parameterTypes.length; i++) {
		parameters[i] = parameterTypes[i].toCharArray();
	}
	char[][] exceptionTypes = new char[thrownExceptions.length][];
	for (int i = 0; i < thrownExceptions.length; i++) {
		exceptionTypes[i] = thrownExceptions[i].toCharArray();
	}
	return new String(createMethodSignature(parameters, returnType.toCharArray(), formalTypes, exceptionTypes));
}

