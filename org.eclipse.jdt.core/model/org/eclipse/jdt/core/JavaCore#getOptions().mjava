	/**
	 * Returns the table of the current options. Initially, all options have their default values,
	 * and this method returns a table that includes all known options.
	 * <p>
	 * For a complete description of the configurable options, see <code>getDefaultOptions</code>.
	 * </p>
	 * 
	 * @return table of current settings of all options 
	 *   (key type: <code>String</code>; value type: <code>String</code>)
	 * @see JavaCore#getDefaultOptions()
	 *///TODO should return a Map for 3.0
	public static Hashtable getOptions() {
		
		Hashtable options = new Hashtable(10);

		// see #initializeDefaultPluginPreferences() for changing default settings
		Plugin plugin = getPlugin();
		if (plugin != null) {
			Preferences preferences = getPlugin().getPluginPreferences();
			HashSet optionNames = JavaModelManager.OptionNames;
			
			// get preferences set to their default
			String[] defaultPropertyNames = preferences.defaultPropertyNames();
			for (int i = 0; i < defaultPropertyNames.length; i++){
				String propertyName = defaultPropertyNames[i];
				if (optionNames.contains(propertyName)){
					options.put(propertyName, preferences.getDefaultString(propertyName));
				}
			}		
			// get preferences not set to their default
			String[] propertyNames = preferences.propertyNames();
			for (int i = 0; i < propertyNames.length; i++){
				String propertyName = propertyNames[i];
				String value = preferences.getString(propertyName).trim();
				if (optionNames.contains(propertyName)){
					options.put(propertyName, value);
					// TODO (frederic) remove when bug 45110 will be fixed
					if (COMPILER_PB_MISSING_JAVADOC.equals(propertyName)) {
						options.put(OLD_COMPILER_PB_MISSING_ANNOTATION, value);
					}
					// end bug 45110
				}		
				// bug 45112 backward compatibility.  TODO (frederic) remove after 3.0-M6
				else if (OLD_COMPILER_PB_INVALID_ANNOTATION.equals(propertyName)) {
					options.put(COMPILER_PB_INVALID_JAVADOC, value);
				}
				else if (OLD_COMPILER_PB_MISSING_ANNOTATION.equals(propertyName)) {
					options.put(COMPILER_PB_MISSING_JAVADOC, value);
					// TODO (frederic) remove when bug 45110 will be fixed
					options.put(OLD_COMPILER_PB_MISSING_ANNOTATION, value);
				}
				// end bug 45112
			}
			// get encoding through resource plugin
			options.put(CORE_ENCODING, ResourcesPlugin.getEncoding());
			// backward compatibility
			options.put(COMPILER_PB_INVALID_IMPORT, ERROR);
			options.put(COMPILER_PB_UNREACHABLE_CODE, ERROR);

			// TODO (frederic) remove when bug 45110 will be fixed
			if (!options.containsKey(OLD_COMPILER_PB_MISSING_ANNOTATION)) {
				options.put(OLD_COMPILER_PB_MISSING_ANNOTATION, DISABLED);
			}
			// end bug 45110
		}
		return options;
	}

