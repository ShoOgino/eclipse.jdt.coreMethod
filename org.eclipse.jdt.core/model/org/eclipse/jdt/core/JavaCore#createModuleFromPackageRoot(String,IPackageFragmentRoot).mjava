	/**
	 * Creates a corresponding module-info as a String for the given source package fragment root and with
	 * the given name. The module name is optional and a null argument can be passed to indicate that the
	 * package fragment root's element name to be used as the module name.
	 *
	 * This is a utility method and computes a module configuration by looking at the source files inside
	 * the package fragment root and what modules within the project's build path are needed in order to 
	 * successfully compile the source files. For non-source package fragment roots
	 * (i.e., {@link IPackageFragmentRoot#isArchive()} returns true), this method returns null.
	 *
	 * Note this is a long-running operation and it is preferable that clients run this in a background thread.
	 *
	 * @param moduleName name to be used for the new module. A null indicates that the package fragment root element's name to be used
	 * @param root the package fragment root for which the module is sought
	 * @return the module-info content as a String
	 * @throws CoreException
	 * @since 3.13 BETA_JAVA9
	 */
	public static String createModuleFromPackageRoot(String moduleName, IPackageFragmentRoot root) throws CoreException {
		return ModuleUtil.createModuleFromPackageRoot(moduleName, root);
	}

