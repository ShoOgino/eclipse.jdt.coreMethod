/**
 * Returns a method signature with any capture information removed. 
 * Returns the method signature itself if no capture information is
 * present.
 * <p>
 * For example (using equivalent string-based method):
 * <pre>
 * <code>
 * removeCaptureFromMethod("LTest<!+Ljava.lang.Throwable;>;")
 * will return: "LTest<+Ljava.lang.Throwable;>;"
 * </code>
 * </pre>
 * </p>
 *
 * @param captureSignature the signature which may have been captured
 * @return new signature without capture information or siganture itself
 * 	if no specific capture information was there
 * @exception NullPointerException if <code>captureSignature</code> is null
 * @since 3.1
 * TODO (frederic) Create remove(char[], char) method on CharOperation and call it from here
 */
public static char[] removeCaptureFromMethod(char[] captureSignature) {
		
	char[] result = null;
	int count = 0;
	for (int i = 0, length = captureSignature.length; i < length; i++) {
		char c = captureSignature[i];
		if (c == C_CAPTURE) {
			if (result == null) {
				result = new char[length];
				System.arraycopy(captureSignature, 0, result, 0, i);
				count = i;
			}
		} else if (result != null) {
			result[count++] = c;
		}
	}
	if (result == null) return captureSignature;
	System.arraycopy(result, 0, result = new char[count], 0, count);
	return result;
}

