	/**
	 * Returns a token which can be used to suppress a given warning using 
	 * <code>@SuppressWarnings</code> annotation, for a given problem ID 
	 * ({@link IProblem }). If a particular problem is not suppressable, 
	 * <code>null</code> will be returned. 
	 * <p>
	 * <b>Note:</b> <code>@SuppressWarnings</code> can only suppress warnings, 
	 * which means that if certain problems got promoted to ERROR using certain compiler 
	 * settings ({@link IJavaProject#setOption(String, String)}), the 
	 * <code>@SuppressWarnings</code> annotation will be ineffective.
	 * </p>
	 * <p>
	 * <b>Note:</b> <code>@SuppressWarnings</code> can be argumented with 
	 * <code>"all"</code> so as to suppress all possible warnings at once.
	 * </p>
	 * <p>
	 * <b>Note:</b> The tokens returned are not necessarily standardized across Java 
	 * compilers. If you were to use one of these tokens in an @SuppressWarnings 
	 * annotation in the Java source code, the effects (if any) may vary from 
	 * compiler to compiler.
	 * </p>
	 * @param problemID
	 *         the ID of a given warning to suppress
	 * @return a String which can be used in <code>@SuppressWarnings</code> annotation, 
	 * or <code>null</code> if unable to suppress this warning.
	 * @since 3.1
	 */
	public static String getWarningToken(int problemID){
		long irritant = ProblemReporter.getIrritant(problemID);
		if (irritant != 0) {
			return CompilerOptions.warningTokenFromIrritant(irritant);
		}
		return null;
	}

