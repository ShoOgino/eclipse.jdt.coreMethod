	/**
	 * Create a classfile reader onto a classfile Java element.
	 * Create a default classfile reader, able to expose the internal representation of a given classfile
	 * according to the decoding flag used to initialize the reader.
	 * Answer null if the file named fileName doesn't represent a valid .class file.
	 * 
	 * The decoding flags are described in IClassFileReader.
	 * 
	 * @param classfile the classfile element to introspect
	 * @param decodingFlag the flag used to decode the class file reader.
	 * @return a default classfile reader
	 * 
	 * @see IClassFileReader
	 */
	public static IClassFileReader createDefaultClassFileReader(IClassFile classfile, int decodingFlag){

		IPackageFragmentRoot root = (IPackageFragmentRoot) classfile.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);
		if (root != null){
			try {
				if (root instanceof JarPackageFragmentRoot) {
						
					String archiveName = ((JarPackageFragmentRoot)root).getJar().getName();
					String entryName = classfile.getParent().getElementName();
					entryName = entryName.replace('.', '/');
					if (entryName.equals("")) { //$NON-NLS-1$
						entryName += classfile.getElementName();
					} else {
						entryName += '/' + classfile.getElementName();
					}
					return createDefaultClassFileReader(archiveName, entryName, decodingFlag);
				} else {
					return createDefaultClassFileReader(classfile.getCorrespondingResource().getLocation().toOSString(), decodingFlag);
				}
			} catch(CoreException e){
			}
		}
		return null;
	}

