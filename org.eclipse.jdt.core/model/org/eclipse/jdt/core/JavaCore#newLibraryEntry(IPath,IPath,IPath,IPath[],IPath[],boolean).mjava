	/**
	 * Creates and returns a new classpath entry of kind <code>CPE_LIBRARY</code> for the JAR or folder
	 * identified by the given absolute path. This specifies that all package fragments within the root 
	 * will have children of type <code>IClassFile</code>.
	 * This method is fully equivalent to calling
	 * {@link #newLibraryEntry(IPath, IPath, IPath, IPath[], IPath[], IClasspathAttribute[], boolean)
	 * newLibraryEntry(path, sourceAttachmentPath, sourceAttachmentRootPath, accessibleFiles, nonAccessibleFiles, new IClasspathAttribute[0], isExported)}.
	 * 
	 * @param path the absolute path of the binary archive
	 * @param sourceAttachmentPath the absolute path of the corresponding source archive or folder, 
	 *    or <code>null</code> if none. Note, since 3.0, an empty path is allowed to denote no source attachment.
	 *   and will be automatically converted to <code>null</code>.
	 * @param sourceAttachmentRootPath the location of the root within the source archive or folder
	 *    or <code>null</code> if this location should be automatically detected.
	 * @param accessibleFiles the possibly empty list of accessible files patterns
	 *    represented as relative paths
	 * @param nonAccessibleFiles the possibly empty list of non accessible files patterns
	 *    represented as relative paths
	 * @param isExported indicates whether this entry is contributed to dependent
	 * 	  projects in addition to the output location
	 * @return a new library classpath entry
	 * @since 3.1
	 * @deprecated use newLibraryEntry(IPath path, IPath sourceAttachmentPath, IPath sourceAttachmentRootPath, IAccessRule[] accessRules, IClasspathAttribute[] extraAttributes, boolean isExported) instead
	 */
	// TODO (jerome) remove before 3.1 M6
	public static IClasspathEntry newLibraryEntry(
			IPath path,
			IPath sourceAttachmentPath,
			IPath sourceAttachmentRootPath,
			IPath[] accessibleFiles, 
			IPath[] nonAccessibleFiles, 
			boolean isExported) {
		return newLibraryEntry(path, sourceAttachmentPath, sourceAttachmentRootPath, accessibleFiles, nonAccessibleFiles, ClasspathEntry.NO_EXTRA_ATTRIBUTES, isExported);
	}

