	/**
	 * Returns all segments of the given dot-separated qualified name.
	 * Returns an array with only the given name if it is not qualified.
	 * Returns an empty array if the name is empty.
	 * <p>
	 * For example:
	 * <pre>
	 * <code>
	 * getSimpleNames("java.lang.Object") -> {"java", "lang", "Object"}
	 * getSimpleNames("Object") -> {"Object"}
	 * getSimpleNames("") -> {}
	 * </code>
	 * </pre>
	 *
	 * @param name the name
	 * @return the list of simple names, possibly empty
	 */
	public static String[] getSimpleNames(String name) {
		if (name.length() == 0) {
			return new String[0];
		}
		int dot = name.indexOf(C_DOT);
		if (dot == -1) {
			return new String[] { name };
		}
		int n = 1;
		while ((dot = name.indexOf(C_DOT, dot + 1)) != -1) {
			++n;
		}
		String[] result = new String[n + 1];
		int segStart = 0;
		for (int i = 0; i < n; ++i) {
			dot = name.indexOf(C_DOT, segStart);
			result[i] = name.substring(segStart, dot);
			segStart = dot + 1;
		}
		result[n] = name.substring(segStart);
		return result;
	}

