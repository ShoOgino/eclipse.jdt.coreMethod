	/**
	 * Returns the raw classpath for the project, as a list of classpath entries. This corresponds to the exact set
	 * of entries which were assigned using <code>setRawClasspath</code>, in particular such a classpath may contain
	 * classpath variable entries. Classpath variable entries can be resolved individually (see <code>JavaCore#getClasspathVariable</code>),
	 * or the full classpath can be resolved at once using the helper method <code>getResolvedClasspath</code>.
	 * <p>
	 * A classpath variable provides an indirection level for better sharing a classpath. As an example, it allows
	 * a classpath to no longer refer directly to external JARs located in some user specific location. The classpath
	 * can simply refer to some variables defining the proper locations of these external JARs.
	 *  <p>
	 * Note that in case the project isn't yet opened, the classpath will directly be read from the associated <tt>.classpath</tt> file.
	 * <p>
	 * @exception JavaModelException in one of the corresponding situation:
	 * <ul>
	 *    <li> an exception occurs while accessing the associated <tt>.classpath</tt> file </li>
	 *    <li> an exception occurs while accessing its corresponding resource </li>
	 * </ul>
	 * @see IClasspathEntry
	 */
	IClasspathEntry[] getRawClasspath() throws JavaModelException;

