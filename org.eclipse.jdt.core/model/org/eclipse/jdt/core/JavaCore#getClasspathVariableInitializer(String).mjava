	/**
 	 * Retrieve the client classpath variable initializer registered for a given variable if any
 	 * 
 	 * @param the given variable
 	 * @return the client classpath variable initializer registered for a given variable, <code>null</code> if none
 	 */
	private static ClasspathVariableInitializer getClasspathVariableInitializer(String variable){
		
		Plugin jdtCorePlugin = JavaCore.getPlugin();
		if (jdtCorePlugin == null) return null;

		IExtensionPoint extension = jdtCorePlugin.getDescriptor().getExtensionPoint(JavaModelManager.CPVARIABLE_INITIALIZER_EXTPOINT_ID);
		if (extension != null) {
			IExtension[] extensions =  extension.getExtensions();
			for(int i = 0; i < extensions.length; i++){
				IConfigurationElement [] configElements = extensions[i].getConfigurationElements();
					IPluginDescriptor plugin = extension.getDeclaringPluginDescriptor();
					if (plugin.isPluginActivated()) {
						for(int j = 0; j < configElements.length; j++){
							try {
								String varAttribute = configElements[j].getAttribute("variable"); //$NON-NLS-1$
								if (variable.equals(varAttribute)) {
									if (JavaModelManager.CP_RESOLVE_VERBOSE) {
										System.out.println("CPVariable INIT - found initializer: "+variable+" --> " + configElements[j].getAttribute("class"));//$NON-NLS-3$//$NON-NLS-2$//$NON-NLS-1$
									}						
									Object execExt = configElements[j].createExecutableExtension("class"); //$NON-NLS-1$
									if (execExt instanceof ClasspathVariableInitializer){
										return (ClasspathVariableInitializer)execExt;
									}
								}
							} catch(CoreException e){
							}
						}
					}
			}	
		}
		return null;
	}	

