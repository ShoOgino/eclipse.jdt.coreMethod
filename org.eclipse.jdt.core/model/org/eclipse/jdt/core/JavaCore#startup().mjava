	/**
	 * Startup of the JavaCore plug-in.
	 * <p>
	 * Registers the JavaModelManager as a resource changed listener and save participant.
	 * Starts the background indexing, and restore saved classpath variable values.
	 * <p>
	 * @see org.eclipse.core.runtime.Plugin#startup()
	 */
	public void startup() {
		
		JavaModelManager manager = JavaModelManager.getJavaModelManager();
		try {
			manager.configurePluginDebugOptions();

			// request state folder creation (workaround 19885)
			JavaCore.getPlugin().getStateLocation();

			// retrieve variable values
			JavaCore.getPlugin().getPluginPreferences().addPropertyChangeListener(new JavaModelManager.PluginPreferencesListener());
			manager.loadVariablesAndContainers();

			IWorkspace workspace = ResourcesPlugin.getWorkspace();
			workspace.addResourceChangeListener(
				manager.deltaState,
				IResourceChangeEvent.PRE_AUTO_BUILD
					| IResourceChangeEvent.POST_AUTO_BUILD
					| IResourceChangeEvent.POST_CHANGE
					| IResourceChangeEvent.PRE_DELETE
					| IResourceChangeEvent.PRE_CLOSE);

			startIndexing();
			workspace.addSaveParticipant(this, manager);
			
			// TODO can be removed when the new syntax error diagnose is officially released.
			{
				final String NEW_SYNTAX_ERROR_DIAGNOSE_ACTIVATION = JavaCore.PLUGIN_ID + ".newsyntaxerrordiagnose.activation"; //$NON-NLS-1$
				Object newDiagnoseParserActivation = JavaCore.getOption(NEW_SYNTAX_ERROR_DIAGNOSE_ACTIVATION);
				if (JavaCore.ENABLED.equals(newDiagnoseParserActivation)) {
					Parser.fineErrorDiagnose = true;
				} else {
					Parser.fineErrorDiagnose = false;
				}
			}
			
		} catch (CoreException e) {
		} catch (RuntimeException e) {
			manager.shutdown();
			throw e;
		}
	}

