	/**
	 * Initializes the default preferences settings for this plug-in.
	 */
	protected void initializeDefaultPluginPreferences() {
		
		Preferences preferences = getPluginPreferences();
		HashSet optionNames = JavaModelManager.OptionNames;
		
		// Compiler settings
		preferences.setDefault(COMPILER_LOCAL_VARIABLE_ATTR, GENERATE);
		optionNames.add(COMPILER_LOCAL_VARIABLE_ATTR);

		preferences.setDefault(COMPILER_LINE_NUMBER_ATTR, GENERATE); 
		optionNames.add(COMPILER_LINE_NUMBER_ATTR);

		preferences.setDefault(COMPILER_SOURCE_FILE_ATTR, GENERATE); 
		optionNames.add(COMPILER_SOURCE_FILE_ATTR);

		preferences.setDefault(COMPILER_CODEGEN_UNUSED_LOCAL, PRESERVE); 
		optionNames.add(COMPILER_CODEGEN_UNUSED_LOCAL);

		preferences.setDefault(COMPILER_CODEGEN_TARGET_PLATFORM, VERSION_1_1); 
		optionNames.add(COMPILER_CODEGEN_TARGET_PLATFORM);

		preferences.setDefault(COMPILER_PB_UNREACHABLE_CODE, ERROR); 
		optionNames.add(COMPILER_PB_UNREACHABLE_CODE);

		preferences.setDefault(COMPILER_PB_INVALID_IMPORT, ERROR); 
		optionNames.add(COMPILER_PB_INVALID_IMPORT);

		preferences.setDefault(COMPILER_PB_OVERRIDING_PACKAGE_DEFAULT_METHOD, WARNING); 
		optionNames.add(COMPILER_PB_OVERRIDING_PACKAGE_DEFAULT_METHOD);

		preferences.setDefault(COMPILER_PB_METHOD_WITH_CONSTRUCTOR_NAME, WARNING); 
		optionNames.add(COMPILER_PB_METHOD_WITH_CONSTRUCTOR_NAME);

		preferences.setDefault(COMPILER_PB_DEPRECATION, WARNING);
		optionNames.add(COMPILER_PB_DEPRECATION);

		preferences.setDefault(COMPILER_PB_DEPRECATION_IN_DEPRECATED_CODE, DISABLED);
		optionNames.add(COMPILER_PB_DEPRECATION_IN_DEPRECATED_CODE);

		preferences.setDefault(COMPILER_PB_HIDDEN_CATCH_BLOCK, WARNING); 
		optionNames.add(COMPILER_PB_HIDDEN_CATCH_BLOCK);

		preferences.setDefault(COMPILER_PB_UNUSED_LOCAL, IGNORE); 
		optionNames.add(COMPILER_PB_UNUSED_LOCAL);

		preferences.setDefault(COMPILER_PB_UNUSED_PARAMETER, IGNORE); 
		optionNames.add(COMPILER_PB_UNUSED_PARAMETER);

		preferences.setDefault(COMPILER_PB_UNUSED_PARAMETER_WHEN_IMPLEMENTING_ABSTRACT, DISABLED); 
		optionNames.add(COMPILER_PB_UNUSED_PARAMETER_WHEN_IMPLEMENTING_ABSTRACT);

		preferences.setDefault(COMPILER_PB_UNUSED_PARAMETER_WHEN_OVERRIDING_CONCRETE, DISABLED); 
		optionNames.add(COMPILER_PB_UNUSED_PARAMETER_WHEN_OVERRIDING_CONCRETE);

		preferences.setDefault(COMPILER_PB_UNUSED_IMPORT, WARNING); 
		optionNames.add(COMPILER_PB_UNUSED_IMPORT);

		preferences.setDefault(COMPILER_PB_UNUSED_PRIVATE_MEMBER, IGNORE); 
		optionNames.add(COMPILER_PB_UNUSED_PRIVATE_MEMBER);

		preferences.setDefault(COMPILER_PB_SYNTHETIC_ACCESS_EMULATION, IGNORE); 
		optionNames.add(COMPILER_PB_SYNTHETIC_ACCESS_EMULATION);

		preferences.setDefault(COMPILER_PB_NON_NLS_STRING_LITERAL, IGNORE); 
		optionNames.add(COMPILER_PB_NON_NLS_STRING_LITERAL);

		preferences.setDefault(COMPILER_PB_ASSERT_IDENTIFIER, IGNORE); 
		optionNames.add(COMPILER_PB_ASSERT_IDENTIFIER);

		preferences.setDefault(COMPILER_PB_STATIC_ACCESS_RECEIVER, WARNING); 
		optionNames.add(COMPILER_PB_STATIC_ACCESS_RECEIVER);

		preferences.setDefault(COMPILER_PB_NO_EFFECT_ASSIGNMENT, WARNING); 
		optionNames.add(COMPILER_PB_NO_EFFECT_ASSIGNMENT);

		preferences.setDefault(COMPILER_PB_INCOMPATIBLE_NON_INHERITED_INTERFACE_METHOD, WARNING); 
		optionNames.add(COMPILER_PB_INCOMPATIBLE_NON_INHERITED_INTERFACE_METHOD);

		preferences.setDefault(COMPILER_PB_CHAR_ARRAY_IN_STRING_CONCATENATION, WARNING); 
		optionNames.add(COMPILER_PB_CHAR_ARRAY_IN_STRING_CONCATENATION);

		preferences.setDefault(COMPILER_PB_LOCAL_VARIABLE_HIDING, WARNING);
		optionNames.add(COMPILER_PB_LOCAL_VARIABLE_HIDING);

		preferences.setDefault(COMPILER_PB_FIELD_HIDING, WARNING);
		optionNames.add(COMPILER_PB_FIELD_HIDING);

		preferences.setDefault(COMPILER_PB_CONSTRUCTOR_PARAMETER_HIDING_FIELD, IGNORE);
		optionNames.add(COMPILER_PB_CONSTRUCTOR_PARAMETER_HIDING_FIELD);

		preferences.setDefault(COMPILER_TASK_TAGS, DEFAULT_TASK_TAG); 
		optionNames.add(COMPILER_TASK_TAGS);

		preferences.setDefault(COMPILER_TASK_PRIORITIES, DEFAULT_TASK_PRIORITY); 
		optionNames.add(COMPILER_TASK_PRIORITIES);

		preferences.setDefault(COMPILER_SOURCE, VERSION_1_3);
		optionNames.add(COMPILER_SOURCE);

		preferences.setDefault(COMPILER_COMPLIANCE, VERSION_1_3); 
		optionNames.add(COMPILER_COMPLIANCE);

		preferences.setDefault(COMPILER_PB_MAX_PER_UNIT, "100"); //$NON-NLS-1$
		optionNames.add(COMPILER_PB_MAX_PER_UNIT);
		
		// Builder settings
		preferences.setDefault(CORE_JAVA_BUILD_RESOURCE_COPY_FILTER, ""); //$NON-NLS-1$
		optionNames.add(CORE_JAVA_BUILD_RESOURCE_COPY_FILTER);

		preferences.setDefault(CORE_JAVA_BUILD_INVALID_CLASSPATH, ABORT); 
		optionNames.add(CORE_JAVA_BUILD_INVALID_CLASSPATH);
	
		preferences.setDefault(CORE_JAVA_BUILD_DUPLICATE_RESOURCE, WARNING); 
		optionNames.add(CORE_JAVA_BUILD_DUPLICATE_RESOURCE);
		
		preferences.setDefault(CORE_JAVA_BUILD_CLEAN_OUTPUT_FOLDER, CLEAN); 
		optionNames.add(CORE_JAVA_BUILD_CLEAN_OUTPUT_FOLDER);

		// JavaCore settings
		preferences.setDefault(CORE_JAVA_BUILD_ORDER, IGNORE); 
		optionNames.add(CORE_JAVA_BUILD_ORDER);
	
		preferences.setDefault(CORE_CIRCULAR_CLASSPATH, ERROR); 
		optionNames.add(CORE_CIRCULAR_CLASSPATH);
		
		preferences.setDefault(CORE_INCOMPLETE_CLASSPATH, ERROR); 
		optionNames.add(CORE_INCOMPLETE_CLASSPATH);
		
		preferences.setDefault(CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS, ENABLED); 
		optionNames.add(CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS);

		preferences.setDefault(CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS, ENABLED); 
		optionNames.add(CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS);

		// encoding setting comes from resource plug-in
		optionNames.add(CORE_ENCODING);
		
		// Formatter settings
		preferences.setDefault(FORMATTER_NEWLINE_OPENING_BRACE, DO_NOT_INSERT); 
		optionNames.add(FORMATTER_NEWLINE_OPENING_BRACE);

		preferences.setDefault(FORMATTER_NEWLINE_CONTROL, DO_NOT_INSERT);
		optionNames.add(FORMATTER_NEWLINE_CONTROL);

		preferences.setDefault(FORMATTER_CLEAR_BLANK_LINES, PRESERVE_ONE); 
		optionNames.add(FORMATTER_CLEAR_BLANK_LINES);

		preferences.setDefault(FORMATTER_NEWLINE_ELSE_IF, DO_NOT_INSERT);
		optionNames.add(FORMATTER_NEWLINE_ELSE_IF);

		preferences.setDefault(FORMATTER_NEWLINE_EMPTY_BLOCK, INSERT); 
		optionNames.add(FORMATTER_NEWLINE_EMPTY_BLOCK);

		preferences.setDefault(FORMATTER_LINE_SPLIT, "80"); //$NON-NLS-1$
		optionNames.add(FORMATTER_LINE_SPLIT);

		preferences.setDefault(FORMATTER_COMPACT_ASSIGNMENT, NORMAL); 
		optionNames.add(FORMATTER_COMPACT_ASSIGNMENT);

		preferences.setDefault(FORMATTER_TAB_CHAR, TAB); 
		optionNames.add(FORMATTER_TAB_CHAR);

		preferences.setDefault(FORMATTER_TAB_SIZE, "4"); //$NON-NLS-1$ 
		optionNames.add(FORMATTER_TAB_SIZE);
		
		preferences.setDefault(FORMATTER_SPACE_CASTEXPRESSION, INSERT); //$NON-NLS-1$ 
		optionNames.add(FORMATTER_SPACE_CASTEXPRESSION);

		// CodeAssist settings
		preferences.setDefault(CODEASSIST_VISIBILITY_CHECK, DISABLED); //$NON-NLS-1$
		optionNames.add(CODEASSIST_VISIBILITY_CHECK);

		preferences.setDefault(CODEASSIST_IMPLICIT_QUALIFICATION, DISABLED); //$NON-NLS-1$
		optionNames.add(CODEASSIST_IMPLICIT_QUALIFICATION);
		
		preferences.setDefault(CODEASSIST_FIELD_PREFIXES, ""); //$NON-NLS-1$
		optionNames.add(CODEASSIST_FIELD_PREFIXES);
		
		preferences.setDefault(CODEASSIST_STATIC_FIELD_PREFIXES, ""); //$NON-NLS-1$
		optionNames.add(CODEASSIST_STATIC_FIELD_PREFIXES);
		
		preferences.setDefault(CODEASSIST_LOCAL_PREFIXES, ""); //$NON-NLS-1$
		optionNames.add(CODEASSIST_LOCAL_PREFIXES);
		
		preferences.setDefault(CODEASSIST_ARGUMENT_PREFIXES, ""); //$NON-NLS-1$
		optionNames.add(CODEASSIST_ARGUMENT_PREFIXES);
		
		preferences.setDefault(CODEASSIST_FIELD_SUFFIXES, ""); //$NON-NLS-1$
		optionNames.add(CODEASSIST_FIELD_SUFFIXES);
		
		preferences.setDefault(CODEASSIST_STATIC_FIELD_SUFFIXES, ""); //$NON-NLS-1$
		optionNames.add(CODEASSIST_STATIC_FIELD_SUFFIXES);
		
		preferences.setDefault(CODEASSIST_LOCAL_SUFFIXES, ""); //$NON-NLS-1$
		optionNames.add(CODEASSIST_LOCAL_SUFFIXES);
		
		preferences.setDefault(CODEASSIST_ARGUMENT_SUFFIXES, ""); //$NON-NLS-1$
		optionNames.add(CODEASSIST_ARGUMENT_SUFFIXES);
	}

