	/**
	 * Create a scanner, indicating the level of detail requested for tokenizing. The scanner can then be
	 * used to tokenize some source in a Java aware way.
	 * Here is a typical scanning loop:
	 * 
	 * <code>
	 *   IScanner scanner = ToolFactory.createScanner(false, false, false);
	 *   scanner.setSourceBuffer("int i = 0;".toCharArray());
	 *   while (true) {
	 *     int token = scanner.getNextToken();
	 *     if (token == ITerminalSymbols.TokenNameEOF) break;
	 *     System.out.println(token + " : " + new String(scanner.getCurrentTokenSource()));
	 *   }
	 * </code>
	 * 
  	 * @return IScanner
	 * 
	 * @param tokenizeComments -  if set to <code>false</code>, comments will be silently consumed
	 * @param tokenizeWhiteSpace -  if set to <code>false</code>, white spaces will be silently consumed,
		@param assertKeyword - if set to <code>false</code>, occurrences of 'assert' will be reported as identifiers
	 * (<code>ITerminalSymbols#TokenNameIdentifier</code>), whereas if set to <code>true</code>, it
	 * would report assert keywords (<code>ITerminalSymbols#TokenNameassert</code>). Java 1.4 has introduced
	 * a new 'assert' keyword.
	 */
	public static IScanner createScanner(boolean tokenizeComments, boolean tokenizeWhiteSpace, boolean assertMode){

		return new Scanner(tokenizeComments, tokenizeWhiteSpace, false, assertMode);
	}

