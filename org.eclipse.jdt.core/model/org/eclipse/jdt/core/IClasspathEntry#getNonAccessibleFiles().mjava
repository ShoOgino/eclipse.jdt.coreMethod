	/**
	 * Returns the set of patterns used to limit access to files associated with
	 * this classpath entry. Only project, library, container and variable entries
	 * support non accessible files patterns. An empty array is returned for
	 * source entries.
	 * <p>
	 * Each path specified is a relative path encoding a package-qualified class name
	 * (e.g., <code>java/lang/String.class</code>). Class names that match
	 * the non accessible files pattern should not be referred to by source code in the
	 * project (compiler will generate a warning or error).
	 * </p>
	 * <p>
	 * The pattern mechanism is similar to Ant's. Each pattern is represented as
	 * a relative path. The path segments can be regular file or folder names or simple patterns
	 * involving standard wildcard characters.
	 * </p>
	 * <p>
	 * '*' matches 0 or more characters within a segment. So
	 * <code>*.class</code> matches <code>.class</code>, <code>a.class</code>
	 * and <code>Foo.class</code>, but not <code>Foo.properties</code>
	 * (does not end with <code>.class</code>).
	 * </p>
	 * <p>
	 * '?' matches 1 character within a segment. So <code>?.class</code> 
	 * matches <code>a.class</code>, <code>A.class</code>, 
	 * but not <code>.class</code> or <code>xyz.class</code> (neither have
	 * just one character before <code>.class</code>).
	 * </p>
	 * <p>
	 * Combinations of *'s and ?'s are allowed.
	 * </p>
	 * <p>
	 * The special pattern '**' matches zero or more segments. In a library entry,
	 * a path like <code>tests/</code> that ends in a trailing separator is interpreted
	 * as <code>tests/&#42;&#42;</code>, and would match everything under
	 * the folder named <code>tests</code>.
	 * </p>
	 * <p>
	 * Example patterns in library entries:
	 * <ul>
	 * <li>
	 * <code>tests/&#42;&#42;</code> (or simply <code>tests/</code>) 
	 * matches all files under a root folder
	 * named <code>tests</code>. This makes <code>tests/Foo.class</code>
	 * and <code>tests/com/example/Foo.class</code> non accessible, but 
	 * <code>com/example/tests/Foo.class</code> (not under a root folder named
	 * <code>tests</code>) is accessible.
	 * </li>
	 * <li>
	 * <code>tests/&#42;</code> matches all files directly below a root 
	 * folder named <code>tests</code>. This makes <code>tests/Foo.class</code>
	 * and <code>tests/FooHelp.class</code> non accessible
	 * but <code>tests/com/example/Foo.class</code> (not directly under
	 * a folder named <code>tests</code>) or 
	 * <code>com/Foo.class</code> (not under a folder named <code>tests</code>)
     * are accessible.
	 * </li>
	 * <li>
	 * <code>&#42;&#42;/tests/&#42;&#42;</code> matches all files under any
	 * folder named <code>tests</code>. This makes <code>tests/Foo.class</code>,
	 * <code>com/examples/tests/Foo.class</code>, and 
	 * <code>com/examples/tests/unit/Foo.class</code> non accessible, but
	 * <code>com/example/Foo.class</code> (not under a folder named
	 * <code>tests</code>) is accessible.
	 * </li>
	 * </ul>
	 * </p>
	 * 
	 * @return the possibly empty list of non accessible file patterns 
	 *   associated with this classpath entry, or an empty array if this kind
	 *   of classpath entry does not support non accessible file patterns
	 * @since 3.1
	 * @deprecated use getAccessRules() instead
	 */
	// TODO (jerome) remove before 3.1 M6
	IPath[] getNonAccessibleFiles();

