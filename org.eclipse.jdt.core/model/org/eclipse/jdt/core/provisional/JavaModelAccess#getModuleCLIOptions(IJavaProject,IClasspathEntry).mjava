	/**
	 * Returns the module-related command line options that are needed at runtime as equivalents
	 * of those options specified by {@link IClasspathAttribute}s of the following names:
	 * <ul>
	 * <li>{@link IClasspathAttribute#ADD_EXPORTS}</li>
	 * <li>{@link IClasspathAttribute#ADD_READS}</li>
	 * <li>{@link IClasspathAttribute#LIMIT_MODULES}</li>
	 * </ul>
	 * <p>Note that the {@link IClasspathAttribute#LIMIT_MODULES} value may be split into
	 * an {@code --add-modules} part and a {@code --limit-modules} part.</p>
	 *
	 * @param project the project holding the main class to be launched
	 * @param systemLibrary the classpath entry of the given project which represents the JRE System Library
	 * @return module-related command line options suitable for running the application.
	 * @throws JavaModelException when access to the classpath or module description of the given project fails.
	 */
	public static String getModuleCLIOptions(IJavaProject project, IClasspathEntry systemLibrary) throws JavaModelException {
		StringBuilder buf = new StringBuilder();
		for (IClasspathEntry classpathEntry : project.getRawClasspath()) {
			for (IClasspathAttribute classpathAttribute : classpathEntry.getExtraAttributes()) {
				String optName = classpathAttribute.getName();
				switch (optName) {
					case IClasspathAttribute.ADD_EXPORTS:
					case IClasspathAttribute.ADD_READS:
						for (String value : classpathAttribute.getValue().split(COMMA)) {
							buf.append(OPTION_START).append(optName).append(BLANK).append(value).append(BLANK);
						}
						break;
					case IClasspathAttribute.LIMIT_MODULES:
						addLimitModules(buf, project, systemLibrary, classpathAttribute.getValue());
						break;
				}
			}
		}
		return buf.toString().trim();
	}

