	/**
	 * Ask the engine to compute a correction for the specified problem
	 * of the given compilation unit.
	 *
	 *  @return void
	 *      correction results are answered through a requestor.
	 *
	 *  @param unit org.eclipse.jdt.internal.core.ICompilationUnit
	 *      the compilation unit.
	 *  
	 * 	@param id int
	 * 		the id of the problem.
	 * 
	 * 	@param start int
	 * 		a position in the source where the error begin.
	 *
	 *  @param end int
	 *      a position in the source where the error finish. 
	 * 
	 * 	@param arguments String[]
	 * 		arguments of the problem.
	 * 
	 * @exception IllegalArgumentException if <code>requestor</code> is <code>null</code>
	 * @since 2.0
	 */
	private void computeCorrections(ICompilationUnit unit, int id, int start, int end, String[] arguments, ICorrectionRequestor requestor) throws JavaModelException{
		if (requestor == null) {
			throw new IllegalArgumentException(Util.bind("correction.nullRequestor")); //$NON-NLS-1$
		}
		
		this.requestor = requestor;
		this.correctionStart = start;
		this.correctionEnd = end;
		this.unit = unit;
		
		String argument = null;
		try {
			switch (id) {
				// Type correction
				case FieldTypeProblemBase + NotFound :
				case ArgumentProblemBase + NotFound :
					filter = CLASSES | INTERFACES;
					argument = arguments[2];
					break;
				case InvalidSuperclassBase + NotFound :
					filter = CLASSES;
					argument = arguments[0];
					break;
				case InvalidInterfaceBase + NotFound :
					filter = INTERFACES;
					argument = arguments[0];
					break;
				case ExceptionTypeProblemBase + NotFound :
					filter = CLASSES;
					argument = arguments[1];
					break;
				case ReturnTypeProblemBase + NotFound :
					filter = CLASSES | INTERFACES;
					argument = arguments[1];
					break;
				case ImportProblemBase + NotFound :
					filter = IMPORT;
					argument = arguments[0];
					break;
				case UndefinedType :
					filter = CLASSES | INTERFACES;
					argument = arguments[0];
					break;
					
				// Method correction
				case UndefinedMethod :
					filter = METHOD;
					argument = arguments[1];
					break;
					
				// Field and local variable correction
				case UndefinedField :
					filter = FIELD;
					argument = arguments[0];
					break;
				case UndefinedName :
					filter = FIELD | LOCAL;
					argument = arguments[0];
					break;
			}
		} catch (ArrayIndexOutOfBoundsException e) {
			return;
		}
		if(argument != null) {
			correct(argument.toCharArray());
		}
	}

