	/**
	 * Returns the modifier flags for this binding key, or <code>Flags.AccDefault</code> if it has no flags. 
	 * The flags can be examined using class <code>Flags</code>.
	 * <p>
	 * Note that flags represent resolved information. Thus if an interface
	 * defines a method <code>void myMethod();</code> the flags include the
	 * 'public' flag even if it is not defined in the source.
	 *
	 * @return the modifier flags for this binding key, or <code>Flags.AccDefault</code> if it has no flags.
	 * @see Flags
	 */
	public int getFlags() {
		class FlagsDecoder extends BindingKeyParser {
			int flags = Flags.AccDefault;
			FlagsDecoder(String key) {
				super(key);
			}
			public void consumeModifiers(char[] modifiers) {
				this.flags = Integer.parseInt(new String(modifiers));
			}
		}
		FlagsDecoder decoder = new FlagsDecoder(this.key);
		decoder.parse();
		return decoder.flags;
	}

