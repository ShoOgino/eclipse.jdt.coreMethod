	/**
	 * Returns a new working copy with the given name using this working copy owner to 
	 * create its buffer. This working copy doesn't belong to any package, thus its 
	 * parent is always <code>null</code> and it cannot be resolved in any way.
	 * Problems are never reported and a DOM AST created using this working copy
	 * will not have bindings resolved.
	 * <p>
	 * When the working copy instance is created, an {@link IJavaElementDelta#ADDED} is 
	 * reported on this working copy.
	 * </p><p>
	 * Once done with the working copy, users of this method must discard it using 
	 * {@link ICompilationUnit#discardWorkingCopy()}.
	 * </p><p>
	 * Note that when such working copy is committed, only its buffer is saved (
	 * see {@link IBuffer#save(IProgressMonitor, boolean)}) but no resource is created.
	 * </p><p>
	 * This method is not intended to be overriden by clients.
	 * </p>
	 * @param monitor a progress monitor used to report progress while opening this 
	 *   working copy or <code>null</code> if no progress should be reported 
	 * @throws JavaModelException if the contents of this working copy can
	 *   not be determined. 
	 * @return a new working copy
	 * @since 3.2
	 */
	public final ICompilationUnit newWorkingCopy(String name, IClasspathEntry[] classpath, IProblemRequestor problemRequestor, IProgressMonitor monitor) throws JavaModelException {
		ExternalJavaProject project = new ExternalJavaProject(classpath);
		IPackageFragment parent = project.getPackageFragmentRoot(Path.EMPTY).getPackageFragment(IPackageFragment.DEFAULT_PACKAGE_NAME);
		CompilationUnit result = new CompilationUnit((PackageFragment) parent, name, this);
		result.becomeWorkingCopy(problemRequestor, monitor);
		return result;
	}

