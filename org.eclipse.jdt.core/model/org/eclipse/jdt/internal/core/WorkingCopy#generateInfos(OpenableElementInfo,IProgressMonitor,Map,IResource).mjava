protected boolean generateInfos(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException {

	if (getParent() instanceof JarPackageFragment) {
		// ignore .java files in jar
		throw newNotPresentException();
	} else {
		// put the info now, because getting the contents requires it
		WorkingCopyElementInfo unitInfo = (WorkingCopyElementInfo) info;

		// generate structure and compute syntax problems if needed
		CompilationUnitStructureRequestor requestor = new CompilationUnitStructureRequestor(this, unitInfo, newElements);
		IProblemFactory factory = this.computeProblems ?  CompilationUnitProblemFinder.getProblemFactory(getElementName().toCharArray(), unitInfo, pm) : new DefaultProblemFactory();
		SourceElementParser parser = new SourceElementParser(requestor, factory, new CompilerOptions(getJavaProject().getOptions(true)));
		requestor.parser = parser;
		if (this.computeProblems){
			unitInfo.problems = new ArrayList();
		}
		CompilationUnitDeclaration unit = parser.parseCompilationUnit(new org.eclipse.jdt.internal.compiler.env.ICompilationUnit() {
				public char[] getContents() {
					try {
						IBuffer buffer = getBufferManager().getBuffer(WorkingCopy.this);
						if (buffer == null) {
								buffer = openBuffer(pm); // open buffer independently from the info, since we are building the info
						}
						return buffer == null ? null : buffer.getCharacters();
					} catch (JavaModelException e) {
						return CharOperation.NO_CHAR;
					}
				}
				public char[] getMainTypeName() {
					return WorkingCopy.this.getMainTypeName();
				}
				public char[][] getPackageName() {
					return WorkingCopy.this.getPackageName();
				}
				public char[] getFileName() {
					return WorkingCopy.this.getFileName();
				}
			}, this.computeProblems /*full parse if compute problems*/);
		
		// update timestamp
		CompilationUnit original = (CompilationUnit) getOriginalElement();
		// might be IResource.NULL_STAMP if original does not exist
		unitInfo.fTimestamp = ((IFile) original.getResource()).getModificationStamp();
		
		// compute other problems if needed
		if (this.computeProblems){
			CompilationUnitProblemFinder.process(unit, this, unitInfo, pm); 
		}		
		return unitInfo.isStructureKnown();
	}
}

