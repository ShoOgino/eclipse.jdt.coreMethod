/**
 * Starting at this folder, create non-java resources for this package fragment root 
 * and add them to the non-java resources collection.
 * 
 * @exception JavaModelException  The resource associated with this package fragment does not exist
 */
private Object[] computeFolderNonJavaResources(JavaProject project, IContainer folder) throws JavaModelException {
	Object[] nonJavaResources = new IResource[5];
	int nonJavaResourcesCounter = 0;
	try {
		IResource[] members = folder.members();
		for (int i = 0, max = members.length; i < max; i++) {
			IResource member = members[i];
			if (member.getType() == IResource.FILE) {
				String fileName = member.getName();
				if (!Util.isValidCompilationUnitName(fileName) && !Util.isValidClassFileName(fileName)) {
					// check case of a .zip or .jar file on classpath
					if (project.findPackageFragmentRoot0(member.getFullPath()) == null) {
						if (nonJavaResources.length == nonJavaResourcesCounter) {
							// resize
							System.arraycopy(nonJavaResources, 0, (nonJavaResources = new IResource[nonJavaResourcesCounter * 2]), 0, nonJavaResourcesCounter);
						}
						nonJavaResources[nonJavaResourcesCounter++] = member;
					}
				}
			} else if (member.getType() == IResource.FOLDER) {
				if (!Util.isValidFolderNameForPackage(member.getName())) {
					if (nonJavaResources.length == nonJavaResourcesCounter) {
						// resize
						System.arraycopy(nonJavaResources, 0, (nonJavaResources = new IResource[nonJavaResourcesCounter * 2]), 0, nonJavaResourcesCounter);
					}
					nonJavaResources[nonJavaResourcesCounter++] = member;
				}
			}
		}
		if (nonJavaResources.length != nonJavaResourcesCounter) {
			System.arraycopy(nonJavaResources, 0, (nonJavaResources = new IResource[nonJavaResourcesCounter]), 0, nonJavaResourcesCounter);
		}
		return nonJavaResources;
	} catch (CoreException e) {
		throw new JavaModelException(e);
	}
}

