	/**
	 *	Returns an enumerator of the values in the cache with the most
	 *	recently used first.
	 */
	public Enumeration<V> elements() {
		if (this.entryQueue == null)
			return new LRUCacheEnumerator<>(null);
		LRUCacheEnumerator.LRUEnumeratorElement<V> head =
			new LRUCacheEnumerator.LRUEnumeratorElement<>(this.entryQueue.value);
		LRUCacheEntry<K, V> currentEntry = this.entryQueue.next;
		LRUCacheEnumerator.LRUEnumeratorElement<V> currentElement = head;
		while(currentEntry != null) {
			currentElement.next = new LRUCacheEnumerator.LRUEnumeratorElement<>(currentEntry.value);
			currentElement = currentElement.next;

			currentEntry = currentEntry.next;
		}
		return new LRUCacheEnumerator<>(head);
	}

