	/**
	 * Create's a classpath entry of the specified kind.
	 *
	 * Returns null if unable to create a valid entry.
	 */
	protected IClasspathEntry createClasspathEntry(IPath path, int kind, IPath sourceAttachmentPath, IPath sourceAttachmentRootPath) {
		switch(kind){

			case IClasspathEntry.CPE_PROJECT :
				if (!path.isAbsolute()) return null;
				return JavaCore.newProjectEntry(path);

			case IClasspathEntry.CPE_LIBRARY :
				if (!path.isAbsolute()) return null;
				return JavaCore.newLibraryEntry(path, sourceAttachmentPath, sourceAttachmentRootPath);

			case IClasspathEntry.CPE_SOURCE :
				if (!path.isAbsolute()) return null;
				// must be an entry in this project or specify another project
				// change zrh
				String projSegment= path.segment(0);
				if (projSegment != null && projSegment.equals(getElementName())) {
					// this project
					return JavaCore.newSourceEntry(path);
				} else {
					// another project
					return JavaCore.newProjectEntry(path);
				}
 
			case IClasspathEntry.CPE_VARIABLE :
				return JavaCore.newVariableEntry(path, sourceAttachmentPath, sourceAttachmentRootPath);
 
			case ClasspathEntry.K_OUTPUT :
				if (!path.isAbsolute()) return null;
				return new ClasspathEntry(ClasspathEntry.K_OUTPUT, IClasspathEntry.CPE_LIBRARY, path, null, null);
				
			default:
				return null;
		}
	}

