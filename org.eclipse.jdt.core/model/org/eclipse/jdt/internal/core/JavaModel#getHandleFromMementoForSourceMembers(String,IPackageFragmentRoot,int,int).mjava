/**
 * Returns the <code>IJavaElement</code> represented by the <code>String</code>
 * memento.
 * @see getHandleMemento()
 */
protected IJavaElement getHandleFromMementoForSourceMembers(String memento, IPackageFragmentRoot root, int rootEnd, int end) throws JavaModelException {

	//deal with compilation units and source members
	IPackageFragment frag = null;
	if (rootEnd == end - 1) {
		//default package
		frag= root.getPackageFragment(IPackageFragment.DEFAULT_PACKAGE_NAME);
	} else {
		frag= root.getPackageFragment(memento.substring(rootEnd + 1, end));
	}
	int oldEnd = end;
	end = memento.indexOf(JavaElement.JEM_PACKAGEDECLARATION, end);
	if (end != -1) {
		//package declaration
		ICompilationUnit cu = frag.getCompilationUnit(memento.substring(oldEnd + 1, end));
		return cu.getPackageDeclaration(memento.substring(end + 1));
	}
	end = memento.indexOf(JavaElement.JEM_IMPORTDECLARATION, oldEnd);
	if (end != -1) {
		ICompilationUnit cu = frag.getCompilationUnit(memento.substring(oldEnd + 1, end));
		if (memento.length() == end + 1) {
			// import container
			return cu.getImportContainer();
		} else {
			//import declaration with container
			return cu.getImport(memento.substring(end + 1));
		}
	}
	int typeStart = memento.indexOf(JavaElement.JEM_TYPE, oldEnd);
	if (typeStart == -1) {
		//we ended with a compilation unit
		return frag.getCompilationUnit(memento.substring(oldEnd + 1));
	}

	//source members
	ICompilationUnit cu = frag.getCompilationUnit(memento.substring(oldEnd + 1, typeStart));
	end = memento.indexOf(JavaElement.JEM_FIELD, oldEnd);
	if (end != -1) {
		//source field
		IType type = getHandleFromMementoForSourceType(memento, cu, typeStart, end);
		return type.getField(memento.substring(end + 1));
	}
	end = memento.indexOf(JavaElement.JEM_METHOD, oldEnd);
	if (end != -1) {
		//source method
		IType type = getHandleFromMementoForSourceType(memento, cu, typeStart, end);
		oldEnd = end;
		String methodName;
		end = memento.lastIndexOf(JavaElement.JEM_METHOD);
		String[] parameterTypes = null;
		if (end == oldEnd) {
			methodName = memento.substring(end + 1);
			//no parameter types
			parameterTypes = new String[] {};
		} else {
			String parameters = memento.substring(oldEnd + 1);
			StringTokenizer mTokenizer = new StringTokenizer(parameters, new String(new char[] {JavaElement.JEM_METHOD}));
			parameterTypes = new String[mTokenizer.countTokens() - 1];
			methodName = mTokenizer.nextToken();
			int i = 0;
			while (mTokenizer.hasMoreTokens()) {
				parameterTypes[i] = mTokenizer.nextToken();
				i++;
			}
		}
		return type.getMethod(methodName, parameterTypes);
	}
	
	end = memento.indexOf(JavaElement.JEM_INITIALIZER, oldEnd);
	if (end != -1 ) {
		//initializer
		IType type = getHandleFromMementoForSourceType(memento, cu, typeStart, end);
		return type.getInitializer(Integer.parseInt(memento.substring(end + 1)));
	}
	//source type
	return getHandleFromMementoForSourceType(memento, cu, typeStart, memento.length());
}

