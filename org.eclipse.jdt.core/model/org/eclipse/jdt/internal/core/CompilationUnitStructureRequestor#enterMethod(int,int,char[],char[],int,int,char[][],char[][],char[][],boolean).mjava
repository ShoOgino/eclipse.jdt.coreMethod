	/**
	 * @see ISourceElementRequestor
	 */
	protected void enterMethod(
		int declarationStart,
		int modifiers,
		char[] returnType,
		char[] name,
		int nameSourceStart,
		int nameSourceEnd,
		char[][] parameterTypes,
		char[][] parameterNames,
		char[][] exceptionTypes,
		boolean isConstructor) {

		SourceTypeElementInfo parentInfo = (SourceTypeElementInfo) fInfoStack.peek();
		JavaElement parentHandle = (JavaElement) fHandleStack.peek();
		IMethod handle = null;

		// translate nulls to empty arrays
		if (parameterTypes == null) {
			parameterTypes = fgEmptyCharChar;
		}
		if (parameterNames == null) {
			parameterNames = fgEmptyCharChar;
		}
		if (exceptionTypes == null) {
			exceptionTypes = fgEmptyCharChar;
		}

		String[] parameterTypeSigs = convertTypeNamesToSigs(parameterTypes);
		if (parentHandle.getElementType() == IJavaElement.TYPE) {
			handle =
				new SourceMethod((IType) parentHandle, new String(name), parameterTypeSigs);
		} else {
			Assert.isTrue(false); // Should not happen
		}
		resolveDuplicates(handle);

		SourceMethodElementInfo info = new SourceMethodElementInfo();
		info.setSourceRangeStart(declarationStart);
		int flags = modifiers;
		info.setName(name);
		info.setNameSourceStart(nameSourceStart);
		info.setNameSourceEnd(nameSourceEnd);
		info.setConstructor(isConstructor);
		info.setFlags(flags);
		info.setArgumentNames(parameterNames);
		info.setArgumentTypeNames(parameterTypes);
		info.setReturnType(returnType == null ? new char[] { 'v', 'o', 'i', 'd' }
		: returnType);
		info.setExceptionTypeNames(exceptionTypes);

		parentInfo.addChild(handle);
		parentInfo.addMethod(info);
		fNewElements.put(handle, info);
		fInfoStack.push(info);
		fHandleStack.push(handle);
	}

