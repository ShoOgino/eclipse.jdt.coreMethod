	/** Internal utility, which is able to answer explicit and automatic modules. */
	static IModuleDescription getModuleDescription(IPackageFragmentRoot root, Map<IPackageFragmentRoot,IModuleDescription> cache, Function<IPackageFragmentRoot,IClasspathEntry> rootToEntry) {
		IModuleDescription module = cache.get(root);
		if (module != null)
			return module;
		try {
			if (root.getKind() == IPackageFragmentRoot.K_SOURCE)
				module = root.getJavaProject().getModuleDescription(); // from any root in this project
			else
				module = root.getModuleDescription();
		} catch (JavaModelException e) {
			return null;
		}
		if (module == null) {
			// 2nd attempt: try automatic module:
			IClasspathEntry classpathEntry = rootToEntry.apply(root);
			if (classpathEntry instanceof ClasspathEntry) {
				if (((ClasspathEntry) classpathEntry).isModular()) {
					// modular but no module-info implies this is an automatic module
					module = ((PackageFragmentRoot) root).getAutomaticModuleDescription(classpathEntry);
				}
			}
		}
		if (module != null)
			cache.put(root, module);
		return module;
	}

