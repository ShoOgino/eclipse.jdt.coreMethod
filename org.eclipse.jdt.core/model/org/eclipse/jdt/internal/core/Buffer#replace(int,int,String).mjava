/**
 * Replaces <code>length</code> characters starting from <code>position</code> with <code>text<code>.
 * After that operation, the gap is placed at the end of the 
 * inserted <code>text</code>.
 */
public void replace(int position, int length, String text) {
	if (!isReadOnly()) {
		int textLength = 0;
		if (text != null) {
			textLength = text.length();
		}
		
		synchronized (this.lock) {
			// move gap
			adjustGap(position + length, textLength - length);

			// overwrite
			int min = Math.min(textLength, length);
			for (int i = position, j = 0; i < position + min; i++, j++)
				this.contents[i] = text.charAt(j);
			if (length > textLength) {
				// enlarge the gap
				this.gapStart -= (length - textLength);
			} else
				if (textLength > length) {
					// shrink gap
					this.gapStart += (textLength - length);
					for (int i = length; i < textLength; i++)
						this.contents[position + i] = text.charAt(i);
				}
		}
		this.flags |= F_HAS_UNSAVED_CHANGES;
		
		notifyChanged(new BufferChangedEvent(this, position, length, text));
	}
}

