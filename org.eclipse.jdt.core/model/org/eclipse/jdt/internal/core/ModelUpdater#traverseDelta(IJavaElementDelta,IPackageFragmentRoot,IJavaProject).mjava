	/**
	 * Converts an <code>IResourceDelta</code> and its children into
	 * the corresponding <code>IJavaElementDelta</code>s.
	 * Return whether the delta corresponds to a resource on the classpath.
	 * If it is not a resource on the classpath, it will be added as a non-java
	 * resource by the sender of this method.
	 */
	protected void traverseDelta(
		IJavaElementDelta delta,
		IPackageFragmentRoot root,
		IJavaProject project) {

		boolean processChildren = true;

		Openable element = (Openable) delta.getElement();
		switch (element.getElementType()) {
			case IJavaElement.JAVA_PROJECT :
				project = (IJavaProject) element;
				break;
			case IJavaElement.PACKAGE_FRAGMENT_ROOT :
				root = (IPackageFragmentRoot) element;
				break;
			case IJavaElement.COMPILATION_UNIT :
				// filter out working copies (we don't want to add/remove them to/from the package fragment
				if (((IWorkingCopy)element).isWorkingCopy()) {
					return;
				}
			case IJavaElement.CLASS_FILE :
				processChildren = false;
				break;
		}

		switch (delta.getKind()) {
			case IJavaElementDelta.ADDED :
				elementAdded(element);
				break;
			case IJavaElementDelta.REMOVED :
				elementRemoved(element);
				break;
			case IJavaElementDelta.CHANGED :
				if ((delta.getFlags() & IJavaElementDelta.F_CONTENT) != 0){
					elementChanged(element);
				}
				break;
		}
		if (processChildren) {
			IJavaElementDelta[] children = delta.getAffectedChildren();
			for (int i = 0; i < children.length; i++) {
				IJavaElementDelta childDelta = children[i];
				this.traverseDelta(childDelta, root, project);
			}
		}
	}

