	/**
	 * Ensures there is the specified amount of free space in the receiver,
	 * by removing old entries if necessary.  Returns true if the requested space was
	 * made available, false otherwise.  May not be able to free enough space
	 * since some elements cannot be removed until they are saved.
	 *
	 * @param space Amount of space to free up
	 */
	protected boolean makeSpace(int space) {
	
		int limit = fSpaceLimit;
		if (fOverflow == 0) {
			/* if space is already available */
			if (fCurrentSpace + space <= limit) {
				return true;
			}
		}
	
		/* Free up space by removing oldest entries */
		int spaceNeeded = (int)((1 - fLoadFactor) * fSpaceLimit);
		spaceNeeded = (spaceNeeded > space) ? spaceNeeded : space;
		LRUCacheEntry entry = fEntryQueueTail;
	
		while (fCurrentSpace + spaceNeeded > limit && entry != null) {
			LRUCacheEntry previous = entry._fPrevious;
			this.privateRemoveEntry(entry, false, false);
			entry = previous;
		}
	
		/* check again, since we may have aquired enough space */
		if (fCurrentSpace + space <= limit) {
			fOverflow = 0;
			return true;
		}
	
		/* update fOverflow */
		fOverflow = fCurrentSpace + space - limit;
		return false;
	}

