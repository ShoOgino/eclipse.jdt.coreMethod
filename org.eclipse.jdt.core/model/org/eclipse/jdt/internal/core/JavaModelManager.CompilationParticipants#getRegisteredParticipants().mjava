		private CompilationParticipant[] getRegisteredParticipants() {
			if (this.registeredParticipants != null) {
				return this.registeredParticipants;
			}
			IExtensionPoint extension = Platform.getExtensionRegistry().getExtensionPoint(JavaCore.PLUGIN_ID, COMPILATION_PARTICIPANT_EXTPOINT_ID);
			if (extension == null)
				return this.registeredParticipants = NO_PARTICIPANTS;
			final HashMap modifyingEnv = new HashMap();
			final HashMap creatingProblems = new HashMap();
			final HashMap others = new HashMap();
			IExtension[] extensions = extension.getExtensions();
			// for all extensions of this point...
			for(int i = 0; i < extensions.length; i++) {
				IConfigurationElement[] configElements = extensions[i].getConfigurationElements();
				// for all config elements named "compilationParticipant"
				for(int j = 0; j < configElements.length; j++) {
					final IConfigurationElement configElement = configElements[j];
					String elementName =configElement.getName();
					if (!("compilationParticipant".equals(elementName))) { //$NON-NLS-1$
						continue;
					}
					Platform.run(new ISafeRunnable() {
						public void handleException(Throwable exception) {
							Util.log(exception, "Exception occurred while creating compilation participant"); //$NON-NLS-1$
						}
						public void run() throws Exception {
							Object execExt = configElement.createExecutableExtension("class"); //$NON-NLS-1$ 
							if (execExt instanceof CompilationParticipant) {
								if ("true".equals(configElement.getAttribute("modifiesEnvironment"))) //$NON-NLS-1$ //$NON-NLS-2$
									modifyingEnv.put(configElement, execExt);
								else if ("true".equals(configElement.getAttribute("createsProblems"))) //$NON-NLS-1$ //$NON-NLS-2$
									creatingProblems.put(configElement, execExt);
								else
									others.put(configElement, execExt);
							}
						}
					});
				}
			}
			int size = modifyingEnv.size() + creatingProblems.size() + others.size();
			if (size == 0)
				return this.registeredParticipants = NO_PARTICIPANTS;
			CompilationParticipant[] result = new CompilationParticipant[size];
			int index = 0;
			index = sortParticipants(modifyingEnv, result, index);
			index = sortParticipants(creatingProblems, result, index);
			index = sortParticipants(others, result, index);
			return this.registeredParticipants = result;
		}

