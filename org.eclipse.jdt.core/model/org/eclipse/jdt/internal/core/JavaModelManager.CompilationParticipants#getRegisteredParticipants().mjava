		private CompilationParticipant[] getRegisteredParticipants() {
			if (this.registeredParticipants != null) {
				return this.registeredParticipants;
			}
			final ArrayList participants = new ArrayList();
			IExtensionPoint extension = Platform.getExtensionRegistry().getExtensionPoint(JavaCore.PLUGIN_ID, COMPILATION_PARTICIPANT_EXTPOINT_ID);
			if (extension == null)
				return this.registeredParticipants = NO_PARTICIPANTS;
			IExtension[] extensions = extension.getExtensions();
			for(int i = 0; i < extensions.length; i++) {
				// for all extensions of this point...
				for(int j = 0; j < extensions.length; j++) {
					IConfigurationElement [] configElements = extensions[j].getConfigurationElements();
					// for all config elements named "compilationParticipant"
					for(int k = 0; k < configElements.length; k++) {
						final IConfigurationElement configElement = configElements[k];
						String elementName =configElement.getName();
						if (!("compilationParticipant".equals(elementName))) { //$NON-NLS-1$
							continue;
						}
						Platform.run(new ISafeRunnable() {
							public void handleException(Throwable exception) {
								Util.log(exception, "Exception occurred while creating compilation participant"); //$NON-NLS-1$
							}
							public void run() throws Exception {
								Object execExt = configElement.createExecutableExtension("class"); //$NON-NLS-1$ 
								if (execExt instanceof CompilationParticipant) {
									participants.add(execExt);
								}
							}
						});
					}
				}
			}
			int size = participants.size();
			if (size == 0)
				return this.registeredParticipants = NO_PARTICIPANTS;
			CompilationParticipant[] result = new CompilationParticipant[size];
			participants.toArray(result);
			for (int i = 0; i < size; i++) {
				final CompilationParticipant participant = result[i];
				Platform.run(new ISafeRunnable() {
					public void handleException(Throwable exception) {
						Util.log(exception, "Exception occurred while configuring compilation participant"); //$NON-NLS-1$
					}
					public void run() throws Exception {
						participant.configure(participants);
					}
				});
			}
			size = participants.size();
			if (size != result.length)
				result = new CompilationParticipant[size];
			participants.toArray(result);
			return this.registeredParticipants = result;
		}

