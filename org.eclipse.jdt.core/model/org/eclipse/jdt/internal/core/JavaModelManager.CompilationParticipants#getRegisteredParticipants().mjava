		private CompilationParticipant[] getRegisteredParticipants() {
			if (this.registeredParticipants != null) {
				return this.registeredParticipants;
			}
			ArrayList participants = new ArrayList();
			IExtensionPoint extension = Platform.getExtensionRegistry().getExtensionPoint(JavaCore.PLUGIN_ID, COMPILATION_PARTICIPANT_EXTPOINT_ID);
			if (extension == null) 
				return null;
			IExtension[] extensions = extension.getExtensions();
			for(int i = 0; i < extensions.length; i++) {
				// for all extensions of this point...
				for(int j = 0; j < extensions.length; j++) {
					IConfigurationElement [] configElements = extensions[j].getConfigurationElements();
					// for all config elements named "compilationParticipant"
					for(int k = 0; k < configElements.length; k++){
						String elementName = configElements[k].getName();
						if (!("compilationParticipant".equals(elementName))) { //$NON-NLS-1$
							continue;
						}
						try {
							Object execExt = configElements[j].createExecutableExtension("class"); //$NON-NLS-1$ 
							if (execExt instanceof CompilationParticipant){
								participants.add(execExt);
							}
						} catch(CoreException e) {
							// executable extension could not be created: ignore this participant
							Util.log(e, "Unexpected exception trying to instanciate compilation participant"); //$NON-NLS-1$
						}
					}
				}
			}
			int size = participants.size();
			if (size == 0)
				return this.registeredParticipants = NO_PARTICPANTS;
			this.registeredParticipants = new CompilationParticipant[size];
			participants.toArray(this.registeredParticipants);
			return this.registeredParticipants;
		}

