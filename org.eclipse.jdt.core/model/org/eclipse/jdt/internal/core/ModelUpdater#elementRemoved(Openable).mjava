	/**
	 * Generic processing for a removed element:<ul>
	 * <li>Close the element, removing its structure from the cache
	 * <li>Remove the element from its parent's cache of children
	 * <li>Add a REMOVED entry in the delta
	 * </ul>
	 */
	protected void elementRemoved(Openable element) {

		if (element.isOpen()) {
			close(element);
		}
		removeFromParentInfo(element);
		int elementType = element.getElementType();

		switch (elementType) {
			case IJavaElement.JAVA_MODEL :
				JavaModelManager.getJavaModelManager().getIndexManager().reset();
				break;
			case IJavaElement.JAVA_PROJECT :
				JavaModelManager manager = JavaModelManager.getJavaModelManager();
				JavaProject javaProject = (JavaProject) element;
				manager.removePerProjectInfo(javaProject);
				manager.containerRemove(javaProject);
				break;
			case IJavaElement.PACKAGE_FRAGMENT_ROOT :
				this.projectsToUpdate.add(element.getJavaProject());
				break;
			case IJavaElement.PACKAGE_FRAGMENT :
				// get rid of package fragment cache
				JavaProject project = (JavaProject) element.getJavaProject();
				project.resetCaches();
				break;
		}
	}

