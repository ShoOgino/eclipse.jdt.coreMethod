private void generateModuleInfos(ClassFile classFile, ClassFileReader info, HashMap newElements, ArrayList childrenHandles) {
	IModule modDecl = info.getModuleDeclaration();
	if (modDecl != null) {
		char[] modName = modDecl.name();
		BinaryModule handle = new BinaryModule(classFile, new String(modName));
		ModuleDescriptionInfo moduleInfo = new ModuleDescriptionInfo();
		moduleInfo.name = modName;
		childrenHandles.add(handle);
		// Rest of the construction goes here
		IPackageExport[] exportedPackages = modDecl.exports();
		if (exportedPackages != null) {
			for (IPackageExport iPackageExport : exportedPackages) {
				generatePackageExportInfos(handle, newElements, iPackageExport.name(), iPackageExport.exportedTo(), childrenHandles);
			}
		}
		IModuleReference[] requiredModules = modDecl.requires();
		if (requiredModules != null) {
			for (IModuleReference iModuleReference : requiredModules) {
				generateModuleRequirementInfos(handle, newElements, iModuleReference.name(), iModuleReference.isPublic(), childrenHandles);
			}
		}
		IService[] provides = modDecl.provides();
		if (provides != null) {
			for (IService iSer : provides) {
				generateServiceInfos(handle, newElements, iSer.name(), iSer.with(), childrenHandles);
			}
		}
		moduleInfo.usedServices = modDecl.uses();
		setModule(handle);
		newElements.put(handle, info);
	}
}

