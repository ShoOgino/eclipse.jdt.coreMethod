	protected static IProblemFactory getProblemFactory(
		final char[] fileName, 
		final IProblemRequestor problemRequestor,
		final IProgressMonitor monitor) {

		return new DefaultProblemFactory(Locale.getDefault()) {
			public IProblem createProblem(
				char[] originatingFileName,
				int problemId,
				String[] problemArguments,
				String[] messageArguments,
				int severity,
				int startPosition,
				int endPosition,
				int lineNumber) {

				if (monitor != null && monitor.isCanceled()){
					throw new AbortCompilation(true, null); // silent abort
				}
				
				IProblem problem =
					super.createProblem(
						originatingFileName,
						problemId,
						problemArguments,
						messageArguments,
						severity,
						startPosition,
						endPosition,
						lineNumber);
				// only report local problems
				if (CharOperation.equals(originatingFileName, fileName)){
					if (JavaModelManager.VERBOSE){
						System.out.println("PROBLEM FOUND while reconciling : "+problem.getMessage());//$NON-NLS-1$
					}
					problemRequestor.acceptProblem(problem);
				}
				if (monitor != null && monitor.isCanceled()){
					throw new AbortCompilation(true, null); // silent abort
				}

				return problem;
			}
		};
	}

