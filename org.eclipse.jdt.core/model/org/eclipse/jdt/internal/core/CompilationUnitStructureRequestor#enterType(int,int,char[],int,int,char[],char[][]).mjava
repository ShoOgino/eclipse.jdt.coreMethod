/**
 * Common processing for classes and interfaces.
 */
protected void enterType(
	int declarationStart,
	int modifiers,
	char[] name,
	int nameSourceStart,
	int nameSourceEnd,
	char[] superclass,
	char[][] superinterfaces) {

	char[] enclosingTypeName= null;
	char[] qualifiedName= null;
	
	JavaElementInfo parentInfo = (JavaElementInfo) fInfoStack.peek();
	JavaElement parentHandle= (JavaElement)fHandleStack.peek();
	IType handle = null;
	String nameString= new String(name);
	
	if (parentHandle.getElementType() == IJavaElement.COMPILATION_UNIT) {
		handle = ((ICompilationUnit) parentHandle).getType(nameString);
		if (fPackageName == null) {
			qualifiedName= nameString.toCharArray();
		} else {
			qualifiedName= (new String(fPackageName) + "."/*nonNLS*/ + nameString).toCharArray();
		}
	}
	else if (parentHandle.getElementType() == IJavaElement.TYPE) {
		handle = ((IType) parentHandle).getType(nameString);
		enclosingTypeName= ((SourceTypeElementInfo)parentInfo).getName();
		qualifiedName= (new String(((SourceTypeElementInfo)parentInfo).getQualifiedName()) + "."/*nonNLS*/ + nameString).toCharArray();
	}
	else {
		Assert.isTrue(false); // Should not happen
	}
	resolveDuplicates(handle);
	
	SourceTypeElementInfo info = new SourceTypeElementInfo();
	info.setHandle(handle);
	info.setSourceRangeStart(declarationStart);
	info.setFlags(modifiers);
	info.setName(name);
	info.setNameSourceStart(nameSourceStart);
	info.setNameSourceEnd(nameSourceEnd);
	info.setSuperclassName(superclass);
	info.setSuperInterfaceNames(superinterfaces);
	info.setEnclosingTypeName(enclosingTypeName);
	info.setSourceFileName(fSourceFileName);
	info.setPackageName(fPackageName);
	info.setQualifiedName(qualifiedName);
	Enumeration e = fNewElements.keys();
	while(e.hasMoreElements()) {
		Object object = e.nextElement();
		if (object instanceof IImportDeclaration)
			info.addImport(((IImportDeclaration)object).getElementName().toCharArray());
	}
	

	parentInfo.addChild(handle);
	if (parentInfo instanceof SourceTypeElementInfo) {
		((SourceTypeElementInfo)parentInfo).addMemberType(info);
	}
	fNewElements.put(handle, info);

	fInfoStack.push(info);
	fHandleStack.push(handle);

}

