/**
 * Common processing for classes and interfaces.
 */
protected void enterType(
	int declarationStart,
	int modifiers,
	char[] name,
	int nameSourceStart,
	int nameSourceEnd,
	char[] superclass,
	char[][] superinterfaces) {

	char[] qualifiedName= null;
	
	JavaElementInfo parentInfo = (JavaElementInfo) infoStack.peek();
	JavaElement parentHandle= (JavaElement)handleStack.peek();
	IType handle = null;
	String nameString= new String(name);
	
	switch(parentHandle.getElementType()) {
		case IJavaElement.COMPILATION_UNIT:
			handle = ((ICompilationUnit) parentHandle).getType(nameString);
			if (packageName == null) {
				qualifiedName= nameString.toCharArray();
			} else {
				qualifiedName= (new String(packageName) + "." + nameString).toCharArray(); //$NON-NLS-1$
			}
			break;
		case IJavaElement.TYPE:
			handle = ((IType) parentHandle).getType(nameString);
			qualifiedName= (new String(((SourceTypeElementInfo)parentInfo).getQualifiedName()) + "." + nameString).toCharArray(); //$NON-NLS-1$
			break;
		case IJavaElement.FIELD:
		case IJavaElement.INITIALIZER:
		case IJavaElement.METHOD:
			handle = ((IMember) parentHandle).getType(nameString, 1); //NB: occurenceCount is computed in resolveDuplicates
			IType declaringType = (IType)parentHandle.getParent();
			// TODO: (jerome) compute qualified name
			qualifiedName= (declaringType.getFullyQualifiedName() + ".1." + nameString).toCharArray(); //$NON-NLS-1$
			break;
		default:
			Assert.isTrue(false); // Should not happen
	}
	resolveDuplicates(handle);
	
	SourceTypeElementInfo info = new SourceTypeElementInfo();
	info.setHandle(handle);
	info.setSourceRangeStart(declarationStart);
	info.setFlags(modifiers);
	info.setName(name);
	info.setNameSourceStart(nameSourceStart);
	info.setNameSourceEnd(nameSourceEnd);
	info.setSuperclassName(superclass);
	info.setSuperInterfaceNames(superinterfaces);
	info.setSourceFileName(sourceFileName);
	info.setPackageName(packageName);
	info.setQualifiedName(qualifiedName);
	parentInfo.addChild(handle);
	newElements.put(handle, info);

	infoStack.push(info);
	handleStack.push(handle);

}

