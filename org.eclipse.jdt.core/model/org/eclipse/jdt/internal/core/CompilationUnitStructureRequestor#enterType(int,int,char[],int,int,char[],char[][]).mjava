/**
 * Common processing for classes and interfaces.
 */
protected void enterType(
	int declarationStart,
	int modifiers,
	char[] name,
	int nameSourceStart,
	int nameSourceEnd,
	char[] superclass,
	char[][] superinterfaces) {

	char[] enclosingTypeName= null;
	char[] qualifiedName= null;
	
	JavaElementInfo parentInfo = (JavaElementInfo) infoStack.peek();
	JavaElement parentHandle= (JavaElement)handleStack.peek();
	IType handle = null;
	String nameString= new String(name);
	
	if (parentHandle.getElementType() == IJavaElement.COMPILATION_UNIT) {
		handle = ((ICompilationUnit) parentHandle).getType(nameString);
		if (packageName == null) {
			qualifiedName= nameString.toCharArray();
		} else {
			qualifiedName= (new String(packageName) + "." + nameString).toCharArray(); //$NON-NLS-1$
		}
	}
	else if (parentHandle.getElementType() == IJavaElement.TYPE) {
		handle = ((IType) parentHandle).getType(nameString);
		enclosingTypeName= ((SourceTypeElementInfo)parentInfo).getName();
		qualifiedName= (new String(((SourceTypeElementInfo)parentInfo).getQualifiedName()) + "." + nameString).toCharArray(); //$NON-NLS-1$
	}
	else {
		Assert.isTrue(false); // Should not happen
	}
	resolveDuplicates(handle);
	
	SourceTypeElementInfo info = new SourceTypeElementInfo();
	info.setHandle(handle);
	info.setSourceRangeStart(declarationStart);
	info.setFlags(modifiers);
	info.setName(name);
	info.setNameSourceStart(nameSourceStart);
	info.setNameSourceEnd(nameSourceEnd);
	info.setSuperclassName(superclass);
	info.setSuperInterfaceNames(superinterfaces);
	info.setEnclosingTypeName(enclosingTypeName);
	info.setSourceFileName(sourceFileName);
	info.setPackageName(packageName);
	info.setQualifiedName(qualifiedName);
	parentInfo.addChild(handle);
	newElements.put(handle, info);

	infoStack.push(info);
	handleStack.push(handle);

}

