	/*
	 * Computes the root path by scanning the first .java file in this source archive or folder.
	 * Returns null if could not compute the root path.
	 */
	private String computeRootPath(final String fullName) {
		if (Util.isArchiveFileName(this.sourcePath.lastSegment())) {
			JavaModelManager manager = JavaModelManager.getJavaModelManager();
			ZipFile zip = null;
			try {
				zip = manager.getZipFile(this.sourcePath);
				int index = Integer.MAX_VALUE;
				String foundEntry = null;
				for (Enumeration entries = zip.entries(); entries.hasMoreElements(); ) {
					ZipEntry entry = (ZipEntry) entries.nextElement();
					String name;
					if (!entry.isDirectory() && Util.isJavaFileName(name = entry.getName())) {
						if (name.endsWith(fullName)) {
							index = Math.min(index, name.indexOf(fullName));
							foundEntry = name;
						}
					}
				}
				if (foundEntry != null) {
					return foundEntry.substring(0, index);
				}
				return null;
			} catch (CoreException e) {
				return null;
			} finally {
				manager.closeZipFile(zip); // handle null case
			}
		} else {
			Object target = JavaModel.getTarget(ResourcesPlugin.getWorkspace().getRoot(), this.sourcePath, true);
			if (target instanceof IFolder) {
				IFolder folder = (IFolder)target;
				final String[] rootPathHolder = new String[1];
				final int[] index = new int[] { Integer.MAX_VALUE };
				try {
					folder.accept(
						new IResourceProxyVisitor() {
							public boolean visit(IResourceProxy proxy) throws CoreException {
								if (proxy.getType() == IResource.FILE) {
									if (Util.isJavaFileName(proxy.getName())) { 
										IResource resource = proxy.requestResource();
										IPath resourceFullPath = resource.getFullPath();
										int sourcePathSegmentCount = sourcePath.segmentCount();
										IPath javaFilePath = resourceFullPath.removeFirstSegments(sourcePathSegmentCount);
										String javaFilePathString = javaFilePath.toString();
										if (javaFilePathString.endsWith(fullName)) {
											index[0] = Math.min(index[0], javaFilePathString.indexOf(javaFilePathString));
											rootPathHolder[0] = javaFilePathString;
										}
									}
									return false;
								}
								return true;
							}
						},
						IResource.NONE
					);
				} catch (CoreException e) {
				}
				if (rootPathHolder[0] != null) {
					if (index[0] == 0) {
						return ""; //$NON-NLS-1$
					}
					return rootPathHolder[0].substring(0, index[0]);
				}
			} else if (target instanceof File) {
				File file = (File)target;
				if (file.isDirectory()) {
					final String[] rootPathHolder = new String[1];
					final int[] index = new int[] { Integer.MAX_VALUE };
					computeRootPath(file, fullName, rootPathHolder, index);
					if (rootPathHolder[0] != null) {
						if (index[0] == 0) {
							return ""; //$NON-NLS-1$
						}
						return rootPathHolder[0].substring(0, index[0]);
					}
				}
			}
		}
		return null;
	}

