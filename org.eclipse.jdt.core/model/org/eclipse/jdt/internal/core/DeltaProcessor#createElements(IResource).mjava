/**
 * Creates the openables corresponding to this resource.
 * Returns null if none was found.
 * In general, there is only one openable corresponding to a resource,
 * except for jar and zip files that can correspond to one or more
 * JarPackageFragmentRoots.
 */
protected Openable[] createElements(IResource resource) {
	if (resource == null) return null;
	String extension = resource.getFileExtension();
	extension = extension == null ? null : extension.toLowerCase();
	if ("jar".equals(extension) || "zip".equals(extension)) { //$NON-NLS-2$ //$NON-NLS-1$
		IJavaProject[] projects = null;
		try {
			projects = JavaModelManager.getJavaModel(resource.getWorkspace()).getJavaProjects();
		} catch (JavaModelException e) {
			return null;
		}
		Vector jars = new Vector();
		for (int i = 0, length = projects.length; i < length; i++) {
			IJavaProject project = projects[i];
			// Create a jar package fragment root only if on the classpath
			IPath resourcePath = resource.getFullPath();
			try {
				IClasspathEntry[] entries = project.getExpandedClasspath(true);
				for (int j = 0, length2 = entries.length; j < length2; j++) {
					IClasspathEntry entry = entries[j];
					IPath rootPath = entry.getPath();
					if (rootPath.equals(resourcePath)) {
						jars.add(project.getPackageFragmentRoot((IFile)resource));
					}
				}
			} catch (JavaModelException e) {
			}
		}
		int size = jars.size();
		if (size == 0) return null;
		Openable[] result = new Openable[size];
		jars.copyInto(result);
		return result;
	} else {
		Openable element = (Openable)JavaCore.create(resource);
		if (element == null) {
			return null;
		} else {
			return new Openable[] {element};
		}
	}
}

