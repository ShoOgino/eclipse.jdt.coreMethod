	private static char[][] generateNonConstantName(char[][] nameParts, int namePartsPtr, boolean onlyLongest) {
		char[][] names;
		if (onlyLongest) {
			names = new char[1][];
		} else {
			names = new char[namePartsPtr + 1][];
		}
		
		char[] namePart = nameParts[0];
		int namePartLength = namePart.length;
		
		
		char[] name = CharOperation.toLowerCase(namePart);
		
		if (!onlyLongest) {
			names[namePartsPtr] = name;
		}
		
		char[] nameSuffix = namePart;
		
		for (int i = 1; i <= namePartsPtr; i++) {
			namePart = nameParts[i];
			namePartLength = namePart.length;
			
			name = CharOperation.concat(CharOperation.toLowerCase(namePart), nameSuffix);
			name[namePartLength] = ScannerHelper.toUpperCase(name[namePartLength]);
			
			if (!onlyLongest) {
				names[namePartsPtr - i] = name;
			}
			
			nameSuffix = CharOperation.concat(namePart, nameSuffix);
			nameSuffix[namePartLength] = ScannerHelper.toUpperCase(nameSuffix[namePartLength]);
		}
		if (onlyLongest) {
			names[0] = name;
		}
		return names;
	}

