	/**
	 * @see org.eclipse.jdt.internal.compiler.env.IModuleAwareNameEnvironment#getModulesDeclaringPackage(char[][], char[], char[])
	 */
	@Override
	public char[][] getModulesDeclaringPackage(char[][] parentPackageName, char[] name, char[] moduleName) {
		String[] pkgName;
		if (parentPackageName == null)
			pkgName = new String[] {new String(name)};
		else {
			int length = parentPackageName.length;
			pkgName = new String[length+1];
			for (int i = 0; i < length; i++)
				pkgName[i] = new String(parentPackageName[i]);
			pkgName[length] = new String(name);
		}
		if (this.knownModuleLocations == null) {
			if ((this.owner != null && this.owner.isPackage(pkgName))
					|| this.nameLookup.isPackage(pkgName))
				return new char[][] { ModuleBinding.UNNAMED };
		} else if (moduleName == ModuleBinding.UNNAMED) {
			for (IPackageFragmentRoot packageRoot : this.nameLookup.packageFragmentRoots) {
				IModuleDescription moduleDescription = getModuleDescription(packageRoot);
				if (moduleDescription == null) {
					if (this.nameLookup.isPackage(pkgName, packageRoot)) // TODO(SHMOD): need to distinguish kinds?
						return new char[][] { moduleName };
				}
			}
			return null;
		} else if (moduleName == ModuleBinding.ANY) {
			char[][] names = CharOperation.NO_CHAR_CHAR;
			for (IPackageFragmentRoot packageRoot : this.nameLookup.packageFragmentRoots) {
				IModuleDescription moduleDescription = getModuleDescription(packageRoot);
				if (moduleDescription != null) {
					if (this.nameLookup.isPackage(pkgName, packageRoot)) // TODO(SHMOD): need to distinguish kinds?
						names = CharOperation.arrayConcat(names, moduleDescription.getElementName().toCharArray());
				}
			}
			return names == CharOperation.NO_CHAR_CHAR ? null : names;
		} else {
			IJavaElement moduleContext = findModuleContext(moduleName);
			if (moduleContext != null) {
				// (this.owner != null && this.owner.isPackage(pkgName)) // TODO(SHMOD) see old isPackage
				if (this.nameLookup.isPackage(pkgName, moduleContext)) {
					return new char[][] { moduleName };
				}
			}
		}
		return null;
	}

