	/**
	 * Converts an <code>IResourceDelta</code> and its children into
	 * the corresponding <code>IJavaElementDelta</code>s.
	 * Return whether the delta corresponds to a resource on the classpath.
	 * If it is not a resource on the classpath, it will be added as a non-java
	 * resource by the sender of this method.
	 */
	protected boolean traverseDelta(IResourceDelta delta, int parentType, IJavaProject parentProject) {

		IResource res = delta.getResource();
		
		// check if current resource is now on classpath and determine the element type
		IJavaProject currentProject = parentProject;
		IPath fullPath = res.getFullPath();
		IJavaProject projectOfRoot = (IJavaProject)this.roots.get(fullPath);
		int elementType = -1;
		if (projectOfRoot != null) {
			currentProject = projectOfRoot;
			if (parentType == IJavaElement.JAVA_MODEL && delta.getKind() != IResourceDelta.CHANGED) {
				// project is added or removed
				elementType = IJavaElement.JAVA_PROJECT;
			} else {
				elementType = IJavaElement.PACKAGE_FRAGMENT_ROOT;
			}
		} else {
			switch (parentType) {
				case IJavaElement.JAVA_MODEL:
				case IJavaElement.JAVA_PROJECT:
					if (currentProject != null) {
						elementType = IJavaElement.PACKAGE_FRAGMENT_ROOT;
					} else {
						elementType = IJavaElement.JAVA_PROJECT; // not yet in a package fragment root
					}
					break;
				case IJavaElement.PACKAGE_FRAGMENT_ROOT:
				case IJavaElement.PACKAGE_FRAGMENT:
					if (res instanceof IFolder) {
						elementType = IJavaElement.PACKAGE_FRAGMENT;
					} else {
						String extension = res.getFileExtension();
						if ("java".equalsIgnoreCase(extension)) { //$NON-NLS-1$
							elementType = IJavaElement.COMPILATION_UNIT;
						} else if ("class".equalsIgnoreCase(extension)) { //$NON-NLS-1$
							elementType = IJavaElement.CLASS_FILE;
						}
					}
					break;
			}
		}
		
		boolean processChildren = true;
		if (currentProject != null) {
			if (this.currentElement == null || !this.currentElement.getJavaProject().equals(currentProject)) {
				// force the currentProject to be used
				this.currentElement = (Openable)currentProject;
			}
			processChildren = this.updateCurrentDeltaAndIndex(delta, elementType, currentProject);
		} else {
			if (res instanceof IProject) {
				try {
					if (this.isOpen(res) && !((IProject)res).hasNature(JavaCore.NATURE_ID)) return false; // non java project
				} catch (CoreException e) {
					return false;
				}
				processChildren = this.updateCurrentDeltaAndIndex(delta, elementType, currentProject);
				if (delta.getKind() != IResourceDelta.CHANGED 
						|| (delta.getFlags() & IResourceDelta.OPEN) != 0) {
					return false; // don't go deeper for added, removed, opened or closed projects
				}
			} else {
				// not yet inside a package fragment root
				processChildren = true;
			}
		}
		boolean result;
		if (processChildren) {
			IResourceDelta[] children = delta.getAffectedChildren();
			boolean oneChildOnClasspath = false;
			int length = children.length;
			IResourceDelta[] orphanChildren = new IResourceDelta[length];
			Openable element = null;
			for (int i = 0; i < length; i++) {
				IResourceDelta child = children[i];
				if (!traverseDelta(child, elementType, currentProject)) {
					try {
						if (currentProject != null) { 
							if (element == null) {
								if (this.currentElement == null || !this.currentElement.getJavaProject().equals(currentProject)) {
									// force the currentProject to be used
									this.currentElement = (Openable)currentProject;
								}
								if (fullPath.equals(currentProject.getProject().getFullPath())) {
									element = (Openable)currentProject;
								} else {
									element = this.createElement(res, elementType, currentProject);
								}
								if (element == null) continue;
							}
							// add child as non java resource if current element on classpath
							nonJavaResourcesChanged(element, child);
						} else {
							orphanChildren[i] = child;
						}
					} catch (JavaModelException e) {
					}
				} else {
					oneChildOnClasspath = true;
				}
			}
			if (oneChildOnClasspath || res instanceof IProject) {
				// add orphan children (case of non java resources under project)
				JavaProject adoptiveProject = (JavaProject)JavaCore.getJavaCore().create(res.getProject());
				if (adoptiveProject != null) {
					for (int i = 0; i < length; i++) {
						if (orphanChildren[i] != null) {
							try {
								nonJavaResourcesChanged(adoptiveProject, orphanChildren[i]);
							} catch (JavaModelException e) {
							}
						}
					}
				}
			} // else resource delta will be added by parent
			result = currentProject != null || oneChildOnClasspath;
		} else {
			// if we changed the current project or if the element type is -1, 
			// it's a non-java resource
			result = 
				currentProject != null 
				&& currentProject.equals(parentProject)
				&& elementType != -1;
		}
		
		// other roots
		HashSet set;
		if ((set = (HashSet)this.otherRoots.get(fullPath)) != null) {
			IPackageFragmentRoot currentRoot = currentProject.getPackageFragmentRoot(res);
			Iterator iterator = set.iterator();
			while (iterator.hasNext()) {
				IJavaProject project = (IJavaProject) iterator.next();
				this.cloneCurrentDelta(project, currentRoot);
			}
		}
		
		return result;
	}

