/**
 * For testing purposes only
 */
public void printStats() {
	int forwardListLength = 0;
	LRUCacheEntry<K, V> entry = this.entryQueue;
	while(entry != null) {
		forwardListLength++;
		entry = entry.next;
	}
	System.out.println("Forward length: " + forwardListLength); //$NON-NLS-1$

	int backwardListLength = 0;
	entry = this.entryQueueTail;
	while(entry != null) {
		backwardListLength++;
		entry = entry.previous;
	}
	System.out.println("Backward length: " + backwardListLength); //$NON-NLS-1$

	class Temp {
		public Class<?> clazz;
		public int count;
		public Temp(Class<?> aClass) {
			this.clazz = aClass;
			this.count = 1;
		}
		@Override
		public String toString() {
			return "Class: " + this.clazz + " has " + this.count + " entries."; //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-1$
		}
	}
	HashMap<Class<?>, Temp> h = new HashMap<>();
	for (K k : this.entryTable.keySet()) {
		entry = this.entryTable.get(k);
		Class<?> key = entry.value.getClass();
		Temp t = h.get(key);
		if (t == null) {
			h.put(key, new Temp(key));
		} else {
			t.count++;
		}
	}
	for (Temp temp : h.values()) {
		System.out.println(temp);
	}
}

