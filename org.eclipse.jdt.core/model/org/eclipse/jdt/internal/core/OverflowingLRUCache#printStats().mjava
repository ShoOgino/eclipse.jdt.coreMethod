	/**
	 * @private	For testing purposes only
	 */
	public void printStats() {
		int forwardListLength = 0;
		LRUCacheEntry entry = fEntryQueue;
		while (entry != null) {
			forwardListLength++;
			entry = entry._fNext;
		}
		System.out.println("Forward length: " + forwardListLength);

		int backwardListLength = 0;
		entry = fEntryQueueTail;
		while (entry != null) {
			backwardListLength++;
			entry = entry._fPrevious;
		}
		System.out.println("Backward length: " + backwardListLength);

		Enumeration keys = fEntryTable.keys();
		java.util.Vector v = new java.util.Vector();
		class Temp {
			public Class fClass;
			public int fCount;
			public Temp(Class aClass) {
				fClass = aClass;
				fCount = 1;
			}
			public String toString() {
				return "Class: " + fClass + " has " + fCount + " entries.";
			}
		}
		java.util.Hashtable h = new java.util.Hashtable();
		while (keys.hasMoreElements()) {
			entry = (LRUCacheEntry) fEntryTable.get(keys.nextElement());
			Class key = entry._fValue.getClass();
			Temp t = (Temp) h.get(key);
			if (t == null) {
				h.put(key, new Temp(key));
			} else {
				t.fCount++;
			}
		}

		keys = h.keys();
		while (keys.hasMoreElements()) {
			System.out.println(h.get(keys.nextElement()));
		}
	}

