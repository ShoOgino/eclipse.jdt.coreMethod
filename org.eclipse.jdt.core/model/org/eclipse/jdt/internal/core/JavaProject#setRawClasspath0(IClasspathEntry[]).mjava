	/**
	 * NOTE: <code>null</code> specifies default classpath, and an empty
	 * array specifies an empty classpath.
	 *
	 * @exception NotPresentException if this project does not exist.
	 */
	protected void setRawClasspath0(IClasspathEntry[] rawEntries)
		throws JavaModelException {

		JavaProjectElementInfo info = getJavaProjectElementInfo();

		synchronized (info) {
			if (rawEntries == null) {
				rawEntries = defaultClasspath();
			}

			// clear the existing children
			info.setChildren(new IPackageFragmentRoot[] {});
			info.setRawClasspath(rawEntries);

			IndexManager indexManager =
				((JavaModelManager) JavaModelManager.getJavaModelManager()).getIndexManager();

			// map of all immediate (resolved) entries			
			IClasspathEntry[] resolvedEntries = getResolvedClasspath(true);
			Hashtable immediateEntries = new Hashtable(resolvedEntries.length);
			for (int i = 0; i < resolvedEntries.length; i++) {
				immediateEntries.put(resolvedEntries[i], this);
			}

			// compute the new roots, and trigger indexing of referenced JARs
			IClasspathEntry[] expandedEntries = getExpandedClasspath(true);
			for (int i = 0; i < expandedEntries.length; i++) {
				IClasspathEntry entry = expandedEntries[i];
				IPackageFragmentRoot[] roots = getPackageFragmentRoots(entry);
				for (int j = 0; j < roots.length; j++) {
					PackageFragmentRoot root = (PackageFragmentRoot) roots[j];
					if (root.exists0()) {
						// only trigger indexing of immediate libraries
						if (immediateEntries.get(entry) != null){
							if (root.getKind() == IPackageFragmentRoot.K_BINARY && indexManager != null) {
								if (root.isArchive()) {
									indexManager.indexJarFile(root.getPath(), getUnderlyingResource().getName());
								} else {
									indexManager.indexBinaryFolder(
										(IFolder) root.getUnderlyingResource(),
										(IProject) this.getUnderlyingResource());
								}
							}
						}
						info.addChild(root);
					}
				}
			}
			// flush namelookup (holds onto caches)
			info.setNameLookup(null);
			// See PR 1G8BFWS: ITPJUI:WINNT - internal jar appearing twice in packages view
			resetNonJavaResourcesForPackageFragmentRoots();
			((JavaProjectElementInfo) getElementInfo()).setNonJavaResources(null);
		}
	}

