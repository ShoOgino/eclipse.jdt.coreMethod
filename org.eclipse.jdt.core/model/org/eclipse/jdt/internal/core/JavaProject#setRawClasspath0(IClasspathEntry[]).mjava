	/**
	 * NOTE: <code>null</code> specifies default classpath, and an empty
	 * array specifies an empty classpath.
	 *
	 * @exception NotPresentException if this project does not exist.
	 */
	protected void setRawClasspath0(IClasspathEntry[] rawEntries)
		throws JavaModelException {

		JavaProjectElementInfo info = getJavaProjectElementInfo();

		synchronized (info) {
			if (rawEntries == null) {
				rawEntries = defaultClasspath();
			}

			// clear the existing children
			info.setChildren(new IPackageFragmentRoot[] {});
			info.setRawClasspath(rawEntries);

			IndexManager indexManager =
				((JavaModelManager) JavaModelManager.getJavaModelManager()).getIndexManager();


			// compute the new roots, and trigger indexing of referenced JARs
			ObjectVector accumulatedRoots = new ObjectVector();
			computePackageFragmentRoots(accumulatedRoots, new ObjectSet(5), true, true, false);
			IJavaElement[] rootArray = new IJavaElement[accumulatedRoots.size()];
			accumulatedRoots.copyInto(rootArray);
			info.setChildren(rootArray);					
			
			// only trigger indexing of immediate libraries
			IPackageFragmentRoot[] immediateRoots = getPackageFragmentRoots();						
			for(int i = 0, length = immediateRoots.length; i < length; i++){
				PackageFragmentRoot root = (PackageFragmentRoot)immediateRoots[i];
				if (root.getKind() == IPackageFragmentRoot.K_BINARY && indexManager != null) {
					if (root.isArchive()) {
						indexManager.indexJarFile(root.getPath(), getUnderlyingResource().getName());
					} else {
						indexManager.indexBinaryFolder(
							(IFolder) root.getUnderlyingResource(),
							(IProject) this.getUnderlyingResource());
					}
				}
			}
			
			// flush namelookup (holds onto caches)
			info.setNameLookup(null);
			// See PR 1G8BFWS: ITPJUI:WINNT - internal jar appearing twice in packages view
			resetNonJavaResourcesForPackageFragmentRoots();
			((JavaProjectElementInfo) getElementInfo()).setNonJavaResources(null);
		}
	}

