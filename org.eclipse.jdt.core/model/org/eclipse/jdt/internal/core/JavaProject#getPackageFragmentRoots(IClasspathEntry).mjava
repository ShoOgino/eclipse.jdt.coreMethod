	/**
	 * Returns the package fragment roots identified by the given entry.
	 * @deprecated - use findPackageFragmentRoot(IPath)
	 */
	public IPackageFragmentRoot[] getPackageFragmentRoots(IClasspathEntry entry) {

		entry = JavaCore.getResolvedClasspathEntry(entry);
		if (entry == null) {
			return new IPackageFragmentRoot[] {
			}; // variable not found			
		}
		IPath path = entry.getPath();
		IWorkspaceRoot workspaceRoot = getWorkspace().getRoot();

		String ext = path.getFileExtension();
		if (ext != null && entry.getContentKind() == IPackageFragmentRoot.K_BINARY) {
			IPackageFragmentRoot root = null;
			if (ext.equalsIgnoreCase("zip") //$NON-NLS-1$
				|| ext.equalsIgnoreCase("jar")) {  //$NON-NLS-1$
				// jar
				Object target = JavaModel.getTarget(workspaceRoot, path, false);
				if (target == null) {
					return new IPackageFragmentRoot[0];
				} else {
					if (target instanceof java.io.File) {
						// file system jar
						if (((java.io.File)target).isDirectory()) {
							return new IPackageFragmentRoot[0]; // directory not supported as external library
						} else {
							root = new JarPackageFragmentRoot(path.toOSString(), this);
						}
					} else {
						// resource jar
						IResource resource = workspaceRoot.getFile(path);
						if (resource.getType() == IResource.FOLDER) {
							root = new PackageFragmentRoot(resource, this); 
						} else {
							root = new JarPackageFragmentRoot(resource, this);
						}
					}
					return new IPackageFragmentRoot[] { root };
				}
			}
		}
		IPath projectPath = getProject().getFullPath();
		if (projectPath.isPrefixOf(path)) {
			// local to this project
			IResource resource = null;
			if (path.segmentCount() > 1) {
				resource = workspaceRoot.getFolder(path);
			} else {
				resource = workspaceRoot.findMember(path);
			}
			if (resource == null)
				return new IPackageFragmentRoot[] {
			};
			IPackageFragmentRoot root = new PackageFragmentRoot(resource, this);
			return new IPackageFragmentRoot[] { root };
		} else {
			// another project
			if (path.segmentCount() != 1) {
				if (entry.getContentKind() == IPackageFragmentRoot.K_BINARY) {
					// binary folder in another project
					IResource resource = workspaceRoot.getFolder(path);
					if (resource == null) {
						return new IPackageFragmentRoot[] {};
					} else {
						IPackageFragmentRoot root = new PackageFragmentRoot(resource, this);
						return new IPackageFragmentRoot[] { root };
					}
				} else {
					// invalid path for a project
					return new IPackageFragmentRoot[] {};
				}
			} else {
				String project = path.segment(0);
				IJavaProject javaProject = getJavaModel().getJavaProject(project);
				ArrayList sourceRoots = new ArrayList();
				IPackageFragmentRoot[] roots = null;
				try {
					roots = javaProject.getPackageFragmentRoots();
				} catch (JavaModelException e) {
					return new IPackageFragmentRoot[] {};
				}
				for (int i = 0; i < roots.length; i++) {
					try {
						if (roots[i].getKind() == IPackageFragmentRoot.K_SOURCE) {
							sourceRoots.add(roots[i]);
						}
					} catch (JavaModelException e) {
						// do nothing if the root does not exist
					}
				}
				IPackageFragmentRoot[] copy = new IPackageFragmentRoot[sourceRoots.size()];
				sourceRoots.toArray(copy);
				return copy;
			}
		}
	}

