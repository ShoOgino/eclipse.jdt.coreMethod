/**
 * Processes all the <code>IJavaElement</code>s in turn, collecting errors
 * and updating the progress monitor.
 *
 * @exception JavaModelException if one or several operation(s) was unable to
 * be completed.
 */
protected void processElements() throws JavaModelException {
	beginTask(getMainTaskName(), fElementsToProcess.length);
	IJavaModelStatus[] errors = new IJavaModelStatus[3];
	int errorsCounter = 0;
	for (int i = 0; i < fElementsToProcess.length; i++) {
		try {
			verify(fElementsToProcess[i]);
			processElement(fElementsToProcess[i]);
		} catch (JavaModelException jme) {
			if (errorsCounter == errors.length) {
				// resize
				System.arraycopy(errors, 0, (errors = new IJavaModelStatus[errorsCounter*2]), 0, errorsCounter);
			}
			errors[errorsCounter++] = jme.getJavaModelStatus();
		} finally {
			worked(1);
		}
	}
	done();
	if (errorsCounter == 1) {
		throw new JavaModelException(errors[0]);
	} else if (errorsCounter > 1) {
		if (errorsCounter != errors.length) {
			// resize
			System.arraycopy(errors, 0, (errors = new IJavaModelStatus[errorsCounter]), 0, errorsCounter);
		}
		throw new JavaModelException(JavaModelStatus.newMultiStatus(errors));
	}
}

