		/**
	 * Renames the main type in <code>cu</code>.
	 */
	private void updateTypeName(ICompilationUnit cu, CompilationUnit astCU, String oldName, String newName, IDocument document) throws JavaModelException {
		if (newName != null) {
			String oldTypeName= oldName.substring(0, oldName.length() - 5);
			String newTypeName= newName.substring(0, newName.length() - 5);
			AST ast = astCU.getAST();
			ASTRewrite rewriter = ASTRewrite.create(ast);
			// update main type name
			IType[] types = cu.getTypes();
			for (int i = 0, max = types.length; i < max; i++) {
				IType currentType = types[i];
				if (currentType.getElementName().equals(oldTypeName)) {
					AbstractTypeDeclaration typeNode = (AbstractTypeDeclaration) ((JavaElement) currentType).findNode(astCU);
					if (typeNode != null) {
						// rename type
						rewriter.replace(typeNode.getName(), ast.newSimpleName(newTypeName), null);
						if (typeNode instanceof TypeDeclaration) {
							// rename constructors
							MethodDeclaration[] methods = ((TypeDeclaration) typeNode).getMethods();
							for (int j = 0, length = methods.length; j < length; j++) {
								MethodDeclaration methodDeclaration = methods[j];
								SimpleName methodName = methodDeclaration.getName();
								if (methodName.getIdentifier().equals(oldTypeName)) {
									rewriter.replace(methodName, ast.newSimpleName(newTypeName), null);
								}
							}
						}
					}
				}
			}
	 		TextEdit edits = rewriter.rewriteAST(document, null);
	 		try {
		 		edits.apply(document);
	 		} catch (BadLocationException e) {
	 			throw new JavaModelException(e, IJavaModelStatusConstants.INVALID_CONTENTS);
	 		}
		}
	}

