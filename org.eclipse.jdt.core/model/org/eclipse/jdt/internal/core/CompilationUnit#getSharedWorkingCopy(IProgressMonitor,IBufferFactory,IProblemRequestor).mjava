/**
 * @see IWorkingCopy
 */
public IJavaElement getSharedWorkingCopy(IProgressMonitor pm, IBufferFactory factory, IProblemRequestor problemRequestor) throws JavaModelException {

	JavaModelManager manager = JavaModelManager.getJavaModelManager();
	
	// In order to be shared, working copies have to denote the same compilation unit 
	// AND use the same buffer factory.
	// Assuming there is a little set of buffer factories, then use a 2 level Map cache.
	Map sharedWorkingCopies = manager.sharedWorkingCopies;
	
	Map perFactoryWorkingCopies = 
		factory == null 
			?(Map) sharedWorkingCopies.get(CompilationUnit.DEFAULT_FACTORY) 
			: (Map) sharedWorkingCopies.get(factory);
	if (perFactoryWorkingCopies == null){
		perFactoryWorkingCopies = new HashMap();
		if (factory == null){
			sharedWorkingCopies.put(CompilationUnit.DEFAULT_FACTORY, perFactoryWorkingCopies); 
		} else {
			sharedWorkingCopies.put(factory, perFactoryWorkingCopies);
		}
	}
	WorkingCopy workingCopy = (WorkingCopy)perFactoryWorkingCopies.get(this);
	if (workingCopy != null) {
		workingCopy.useCount++;

		if (SHARED_WC_VERBOSE) {
			System.out.println("Incrementing use count of shared working copy " + workingCopy.toDebugString()); //$NON-NLS-1$
		}

		return workingCopy;
	} else {
		workingCopy = (WorkingCopy)this.getWorkingCopy(pm, factory, problemRequestor);
		perFactoryWorkingCopies.put(this, workingCopy);

		if (SHARED_WC_VERBOSE) {
			System.out.println("Creating shared working copy " + workingCopy.toDebugString()); //$NON-NLS-1$
		}

		// report added java delta
		JavaElementDelta delta = new JavaElementDelta(this.getJavaModel());
		delta.added(workingCopy);
		manager.fire(delta, JavaModelManager.DEFAULT_CHANGE_EVENT);

		return workingCopy;
	}
}

