/**
 * Determine all of the package fragments associated with this package fragment root.
 * Cache the zip entries for each package fragment in the info for the package fragment.
 * The package fragment children are all opened.
 * Add all of the package fragments to vChildren.
 *
 * @exception JavaModelException The resource (the jar) associated with this package fragment root does not exist
 */
protected void computeJarChildren(JarPackageFragmentRootInfo info, ArrayList vChildren) throws JavaModelException {
	ZipFile jar= null;
	try {
		jar= getJar();
		HashMap packageFragToTypes= new HashMap();

		// always create the default package
		packageFragToTypes.put(IPackageFragment.DEFAULT_PACKAGE_NAME, new ArrayList[] { new ArrayList(), new ArrayList()
		});

		ArrayList[] temp;
		for (Enumeration e= jar.entries(); e.hasMoreElements();) {
			ZipEntry member= (ZipEntry) e.nextElement();
			String eName= member.getName();
			if (member.isDirectory()) {
				eName= eName.substring(0, eName.length() - 1);
				eName= eName.replace('/', '.');
				temp= (ArrayList[]) packageFragToTypes.get(eName);
				if (temp == null) {
					temp= new ArrayList[] { new ArrayList(), new ArrayList()
				 };
					packageFragToTypes.put(eName, temp);
				}
			} else {
				if (Util.isClassFileName(eName)) {
					//only interested in class files
					//store the class file entry name to be cached in the appropriate package fragment
					//zip entries only use '/'
					ArrayList classTemp;
					int lastSeparator= eName.lastIndexOf('/');
					String key= IPackageFragment.DEFAULT_PACKAGE_NAME;
					String value= eName;
					if (lastSeparator != -1) {
						//not in the default package
						eName= eName.replace('/', '.');
						value= eName.substring(lastSeparator + 1);
						key= eName.substring(0, lastSeparator);
					}
					temp= (ArrayList[]) packageFragToTypes.get(key);
					if (temp == null) {
						// build all package fragments in the key
						lastSeparator= key.indexOf('.');
						while (lastSeparator > 0) {
							String prefix= key.substring(0, lastSeparator);
							if (packageFragToTypes.get(prefix) == null) {
								packageFragToTypes.put(prefix, new ArrayList[] { new ArrayList(), new ArrayList()
							 });
							}
							lastSeparator= key.indexOf('.', lastSeparator + 1);
						}
						classTemp= new ArrayList();
						classTemp.add(value);
						packageFragToTypes.put(key, new ArrayList[] {classTemp, new ArrayList()
					 });
					} else {
						classTemp= temp[0];
						classTemp.add(value);
					}
				} else {
					ArrayList resTemp;
					int lastSeparator= eName.lastIndexOf('/');
					String key= IPackageFragment.DEFAULT_PACKAGE_NAME;
					String value= eName;
					if (lastSeparator != -1) {
						//not in the default package
						eName= eName.replace('/', '.');
						key= eName.substring(0, lastSeparator);
					}
					temp= (ArrayList[]) packageFragToTypes.get(key);
					if (temp == null) {
						// build all package fragments in the key
						lastSeparator= key.indexOf('.');
						while (lastSeparator > 0) {
							String prefix= key.substring(0, lastSeparator);
							if (packageFragToTypes.get(prefix) == null) {
								packageFragToTypes.put(prefix, new ArrayList[] { new ArrayList(), new ArrayList()
							 });
							}
							lastSeparator= key.indexOf('.', lastSeparator + 1);
						}
						resTemp= new ArrayList();
						resTemp.add(value);
						packageFragToTypes.put(key, new ArrayList[] { new ArrayList(), resTemp });
					} else {
						resTemp= temp[1];
						resTemp.add(value);
					}
				}
			}
		}
		//loop through all of referenced packages, creating package fragments if necessary
		// and cache the entry names in the infos created for those package fragments
		Iterator packages = packageFragToTypes.keySet().iterator();
		while (packages.hasNext()) {
			String packName= (String) packages.next();
			ArrayList[] entries= (ArrayList[]) packageFragToTypes.get(packName);
			JarPackageFragment packFrag= (JarPackageFragment) getPackageFragment(packName);
			JarPackageFragmentInfo fragInfo= (JarPackageFragmentInfo) packFrag.createElementInfo();
			fragInfo.setEntryNames(entries[0]);
			int resLength= entries[1].size();
			if (resLength == 0) {
				packFrag.computeNonJavaResources(new String[] {}, fragInfo, jar.getName());
			} else {
				String[] resNames= new String[resLength];
				entries[1].toArray(resNames);
				packFrag.computeNonJavaResources(resNames, fragInfo, jar.getName());
			}
			packFrag.computeChildren(fragInfo);
			fgJavaModelManager.putInfo(packFrag, fragInfo);
			vChildren.add(packFrag);
		}
	} catch (CoreException e) {
		throw new JavaModelException(e);
	} finally {
		if (jar != null && JavaModelManager.getJavaModelManager().zipFiles == null) {
			try {
				jar.close();
			} catch (IOException e) {
				// ignore 
			}
		}
	}
}

