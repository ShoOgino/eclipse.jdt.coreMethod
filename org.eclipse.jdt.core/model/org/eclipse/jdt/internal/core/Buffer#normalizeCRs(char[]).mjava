/**
 * Normalizes the cariage returns in the given text.
 * They are all changed  to use this buffer's line sepatator.
 */
private char[] normalizeCRs(char[] text) {
	CharArrayBuffer buffer = new CharArrayBuffer();
	int lineStart = 0;
	int length = text.length;
	if (length == 0) return text;
	String lineSeparator = this.getLineSeparator(text);
	char nextChar = text[0];
	for (int i = 0; i < length; i++) {
		char currentChar = nextChar;
		nextChar = i < length-1 ? text[i+1] : ' ';
		switch (currentChar) {
			case '\n':
				int lineLength = i-lineStart;
				char[] line = new char[lineLength];
				System.arraycopy(text, lineStart, line, 0, lineLength);
				buffer.append(line);
				buffer.append(lineSeparator);
				lineStart = i+1;
				break;
			case '\r':
				lineLength = i-lineStart;
				if (lineLength >= 0) {
					line = new char[lineLength];
					System.arraycopy(text, lineStart, line, 0, lineLength);
					buffer.append(line);
					buffer.append(lineSeparator);
					if (nextChar == '\n') {
						nextChar = ' ';
						lineStart = i+2;
					} else {
						// when line separator are mixed in the same file
						// \r might not be followed by a \n. If not, we should increment
						// lineStart by one and not by two.
						lineStart = i+1;
					}
				} else {
					// when line separator are mixed in the same file
					// we need to prevent NegativeArraySizeException
					lineStart = i+1;
				}
				break;
		}
	}
	char[] lastLine;
	if (lineStart > 0) {
		int lastLineLength = length-lineStart;
		if (lastLineLength > 0) {
			lastLine = new char[lastLineLength];
			System.arraycopy(text, lineStart, lastLine, 0, lastLineLength);
			buffer.append(lastLine);
		}
		return buffer.getContents();
	} else {
		return text;
	}
}

