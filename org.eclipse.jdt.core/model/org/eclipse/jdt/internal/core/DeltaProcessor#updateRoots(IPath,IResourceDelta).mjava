/*
 * Update the roots that are affected by the addition or the removal of the given container resource.
 */
private void updateRoots(IPath containerPath, IResourceDelta containerDelta) {
	Map roots;
	Map otherRoots;
	if (containerDelta.getKind() == IResourceDelta.REMOVED) {
		roots = this.oldRoots;
		otherRoots = this.oldOtherRoots;
	} else {
		roots = this.roots;
		otherRoots = this.otherRoots;
	}
	Iterator iterator = roots.keySet().iterator();
	while (iterator.hasNext()) {
		IPath path = (IPath)iterator.next();
		if (containerPath.isPrefixOf(path) && !containerPath.equals(path)) {
			IResourceDelta rootDelta = containerDelta.findMember(path.removeFirstSegments(1));
			if (rootDelta == null) continue;
			RootInfo rootInfo = (RootInfo)roots.get(path);

			if (!rootInfo.project.getPath().isPrefixOf(path)) { // only consider roots that are not included in the container
				this.updateCurrentDeltaAndIndex(rootDelta, IJavaElement.PACKAGE_FRAGMENT_ROOT, rootInfo);
			}
			
			ArrayList rootList = (ArrayList)otherRoots.get(path);
			if (rootList != null) {
				Iterator otherProjects = rootList.iterator();
				while (otherProjects.hasNext()) {
					rootInfo = (RootInfo)otherProjects.next();
					if (!rootInfo.project.getPath().isPrefixOf(path)) { // only consider roots that are not included in the container
						this.updateCurrentDeltaAndIndex(rootDelta, IJavaElement.PACKAGE_FRAGMENT_ROOT, rootInfo);
					}
				}
			}
		}
	}
}

