	/**
	 * Converts an <code>IResourceDelta</code> and its children into
	 * the corresponding <code>IJavaElementDelta</code>s.
	 * The classpath is passed along. If it is null, the resource
	 * is already known to be on the classpath, if it is UNKNOWN_CLASSPATH, then 
	 * it will be computed if the resource corresponds to a Java project.
	 * Return whether the delta corresponds to a resource on the classpath.
	 */
	protected boolean traverseDelta(IResourceDelta delta, IClasspathEntry[] classpath) {

		IResource res = delta.getResource();
		boolean isOnClasspath = this.isOnClasspath(classpath, res);
		
		Openable element = null;
		fProcessChildren = true;
		JavaProject project = null;
		if (isOnClasspath) {
			Openable[] elements = this.createElements(res);
			if (elements != null) {
				for (int i = 0, length = elements.length; i < length; i++) {
					element = elements[i];
					this.updateCurrentDeltaAndIndex(element, delta);
				}
			} else {
				return false;
			}
		} else {
			if (res instanceof IProject) {
				project = (JavaProject)JavaCore.getJavaCore().create((IProject)res);
				if (project == null) return false; // not a Java project
				this.updateCurrentDeltaAndIndex(project, delta);
				if (delta.getKind() != IResourceDelta.CHANGED 
						|| (delta.getFlags() & IResourceDelta.OPEN) != 0) {
					return false; // don't go deeper for added, removed, opened or closed projects
				}
				try {
					classpath = project.getExpandedClasspath(true);
				} catch (JavaModelException e) {
				}
			} else {
				// if classpath is known, we are for sure out of classpath: stop processing children
				fProcessChildren = classpath != null;
			}
		}
		if (fProcessChildren) {
			IResourceDelta[] children = delta.getAffectedChildren();
			boolean oneChildOnClasspath = false;
			int length = children.length;
			IResourceDelta[] orphanChildren = new IResourceDelta[length];
			for (int i = 0; i < length; i++) {
				IResourceDelta child = children[i];
				if (!traverseDelta(child, isOnClasspath ? null : classpath)) {
					try {
						if (isOnClasspath) { 
							// add child as non java resource if current element on classpath
							nonJavaResourcesChanged(element, child);
						} else {
							orphanChildren[i] = child;
						}
					} catch (JavaModelException e) {
					}
				} else {
					oneChildOnClasspath = true;
				}
			}
			if (oneChildOnClasspath || project != null) {
				// add orphan children (case of non java resources under project)
				if (project == null) {
					project = (JavaProject)JavaCore.getJavaCore().create(res.getProject());
				}
				for (int i = 0; i < length; i++) {
					if (orphanChildren[i] != null) {
						try {
							nonJavaResourcesChanged(project, orphanChildren[i]);
						} catch (JavaModelException e) {
						}
					}
				}
			} // else resource delta will be added by parent
			return isOnClasspath || oneChildOnClasspath;
		} else {
			return isOnClasspath && element != null; // element is null if non-java resource in package
		}
	}

