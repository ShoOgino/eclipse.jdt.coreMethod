	private void enterAbstractMethod(MethodInfo methodInfo) {
		if (typeDepth >= 0) {
			fMemberName[typeDepth] = new String(methodInfo.name);
			fMemberNameRange[typeDepth] =
				new SourceRange(methodInfo.nameSourceStart, methodInfo.nameSourceEnd - methodInfo.nameSourceStart + 1);
			fMemberDeclarationStart[typeDepth] = methodInfo.declarationStart;
			fMethodParameterTypes[typeDepth] = methodInfo.parameterTypes;
			fMethodParameterNames[typeDepth] = methodInfo. parameterNames;
			
			if (methodInfo.typeParameters != null) {
				final IType currentType = this.types[typeDepth];
				IMethod method = currentType.getMethod(
						fMemberName[typeDepth],
						convertTypeNamesToSigs(fMethodParameterTypes[typeDepth]));
				if (method == null) return;
				
				for (int i = 0, length = methodInfo.typeParameters.length; i < length; i++) {
					final TypeParameterInfo typeParameterInfo = methodInfo.typeParameters[i];
					final ITypeParameter typeParameter = method.getTypeParameter(new String(typeParameterInfo.name));
					setSourceRange(
						typeParameter,
						new SourceRange(
							typeParameterInfo.declarationStart,
							typeParameterInfo.declarationEnd - typeParameterInfo.declarationStart + 1),
						new SourceRange(
							typeParameterInfo.nameSourceStart,
							typeParameterInfo.nameSourceEnd - typeParameterInfo.nameSourceStart + 1));
				}
			}	
		}
	}

