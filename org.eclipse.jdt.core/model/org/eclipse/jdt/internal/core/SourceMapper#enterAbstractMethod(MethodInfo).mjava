	private void enterAbstractMethod(MethodInfo methodInfo) {
		if (typeDepth >= 0) {
			this.memberName[typeDepth] = new String(methodInfo.name);
			this.memberNameRange[typeDepth] =
				new SourceRange(methodInfo.nameSourceStart, methodInfo.nameSourceEnd - methodInfo.nameSourceStart + 1);
			this.memberDeclarationStart[typeDepth] = methodInfo.declarationStart;
			this.methodParameterTypes[typeDepth] = methodInfo.parameterTypes;
			this.methodParameterNames[typeDepth] = methodInfo. parameterNames;
			
			IType currentType = this.types[typeDepth];
			IMethod method = currentType.getMethod(
					this.memberName[typeDepth],
					convertTypeNamesToSigs(this.methodParameterTypes[typeDepth]));
			
			// type parameters
			if (methodInfo.typeParameters != null) {
				for (int i = 0, length = methodInfo.typeParameters.length; i < length; i++) {
					TypeParameterInfo typeParameterInfo = methodInfo.typeParameters[i];
					ITypeParameter typeParameter = method.getTypeParameter(new String(typeParameterInfo.name));
					setSourceRange(
						typeParameter,
						new SourceRange(
							typeParameterInfo.declarationStart,
							typeParameterInfo.declarationEnd - typeParameterInfo.declarationStart + 1),
						new SourceRange(
							typeParameterInfo.nameSourceStart,
							typeParameterInfo.nameSourceEnd - typeParameterInfo.nameSourceStart + 1));
				}
			}	
			
			// categories
			addCategories(method, methodInfo.categories);
		}
	}

