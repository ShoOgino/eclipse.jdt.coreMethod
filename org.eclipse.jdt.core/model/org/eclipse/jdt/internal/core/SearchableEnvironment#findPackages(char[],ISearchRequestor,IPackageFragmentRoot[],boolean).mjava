	/**
	 * Find the packages that start with the given prefix and belong to the given module.
	 * A valid prefix is a qualified name separated by periods
	 * (ex. java.util).
	 * The packages found are passed to:
	 *    ISearchRequestor.acceptPackage(char[][] packageName)
	 */
	public void findPackages(char[] prefix, ISearchRequestor requestor, IPackageFragmentRoot[] moduleContext, boolean followRequires) {
		this.nameLookup.seekPackageFragments(
			new String(prefix),
			true,
			new SearchableEnvironmentRequestor(requestor), moduleContext);
	if (followRequires && this.knownModuleLocations != null) {
		try {
			boolean isMatchAllPrefix = CharOperation.equals(CharOperation.ALL_PREFIX, prefix);
			Set<IModuleDescription> modDescs = new HashSet<>();
			for (IPackageFragmentRoot root : moduleContext) {
				IModuleDescription desc = root.getJavaProject().getModuleDescription();
				if (desc instanceof AbstractModule)
					modDescs.add(desc);
			}
			for (IModuleDescription md : modDescs) {
				IModuleReference[] reqModules = ((AbstractModule) md).getRequiredModules();
				char[] modName = md.getElementName().toCharArray();
				for (IModuleReference moduleReference : reqModules) {
					findPackagesFromRequires(prefix, isMatchAllPrefix, requestor, moduleReference, modName);
				}
			}
		} catch (JavaModelException e) {
			// silent
		}
	}
}

