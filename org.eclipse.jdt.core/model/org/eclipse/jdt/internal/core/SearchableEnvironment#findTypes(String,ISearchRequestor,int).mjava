	/**
	 * Returns all types whose name starts with the given (qualified) <code>prefix</code>.
	 *
	 * If the <code>prefix</code> is unqualified, all types whose simple name matches
	 * the <code>prefix</code> are returned.
	 */
	private void findTypes(String prefix, ISearchRequestor storage, int type) {
		SearchableEnvironmentRequestor requestor =
			new SearchableEnvironmentRequestor(storage, this.unitToSkip);
		int index = prefix.lastIndexOf('.');
		if (index == -1) {
			this.nameLookup.seekTypes(prefix, null, true, type, requestor);
		} else {
			String packageName = prefix.substring(0, index);
			String className = prefix.substring(index + 1);
			JavaElementRequestor javaElementRequestor = new JavaElementRequestor();
			this.nameLookup.seekPackageFragments(packageName, false, javaElementRequestor);
			IPackageFragment[] packageFragments =
				javaElementRequestor.getPackageFragments();
			if (packageFragments == null)
				return;
			for (int i = 0, packagesLength = packageFragments.length;
				i < packagesLength;
				i++) {
				if (packageFragments[i] == null)
					continue;
				this.nameLookup.seekTypes(
					className,
					packageFragments[i],
					true,
					type,
					requestor);
			}
		}
	}

