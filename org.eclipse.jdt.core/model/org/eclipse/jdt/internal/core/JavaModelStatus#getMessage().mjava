	/**
	 * Returns the message that is relevant to the code of this status.
	 */
	public String getMessage() {
		if (getException() == null) {
			switch (getCode()) {
				case CORE_EXCEPTION :
					return "Core exception.";
				case BUILDER_INITIALIZATION_ERROR :
					return "Builder initialization error.";
				case BUILDER_SERIALIZATION_ERROR :
					return "Builder serialization error.";
				case DEVICE_PATH :
					return "Operation requires a path with no device. Path specified was: "
						+ getPath().toString();
				case DOM_EXCEPTION :
					return "JDOM error.";
				case ELEMENT_DOES_NOT_EXIST :
					return fElements[0].getElementName() + " does not exist.";
				case EVALUATION_ERROR :
					return "Evaluation error: " + getString();
				case INDEX_OUT_OF_BOUNDS :
					return "Index out of bounds.";
				case INVALID_CONTENTS :
					return "Invalid contents specified.";
				case INVALID_DESTINATION :
					return "Invalid destination: " + fElements[0].getElementName();
				case INVALID_ELEMENT_TYPES :
					StringBuffer buff =
						new StringBuffer("Operation not supported for specified element type(s): ");
					for (int i = 0; i < fElements.length; i++) {
						if (i > 0) {
							buff.append(", ");
						}
						buff.append(fElements[0].getElementName());
					}
					return buff.toString();
				case INVALID_NAME :
					return "Invalid name specified: " + getString();
				case INVALID_PACKAGE :
					return "Invalid package: " + getString();
				case INVALID_PATH :
					return "Invalid path: " + (getPath() == null ? "null" : getPath().toString());
				case INVALID_PROJECT :
					return "Invalid project: " + getString();
				case INVALID_RESOURCE :
					return "Invalid resource: " + getString();
				case INVALID_RESOURCE_TYPE :
					return "Invalid resource type for " + getString();
				case INVALID_SIBLING :
					return "Invalid sibling: " + fElements[0].getElementName();
				case IO_EXCEPTION :
					return "IO exception.";
				case NAME_COLLISION :
					if (fElements != null && fElements.length > 0) {
						IJavaElement element = fElements[0];
						String name = element.getElementName();
						if (element instanceof IPackageFragment
							&& name.equals(IPackageFragment.DEFAULT_PACKAGE_NAME)) {
							return "Default package cannot be renamed.";
						}
					}
					return "Name collision.";
				case NO_ELEMENTS_TO_PROCESS :
					return "Operation requires one or more elements.";
				case NULL_NAME :
					return "Operation requires a name.";
				case NULL_PATH :
					return "Operation requires a path.";
				case NULL_STRING :
					return "Operation requires a string.";
				case PATH_OUTSIDE_PROJECT :
					return "Illegal path specified: " + getPath().toString();
				case READ_ONLY :
					IJavaElement element = fElements[0];
					String name = element.getElementName();
					if (element instanceof IPackageFragment
						&& name.equals(IPackageFragment.DEFAULT_PACKAGE_NAME)) {
						name = "Default package";
					}
					return name + " is read-only.";
				case RELATIVE_PATH :
					return "Operation requires an absolute path. Relative path specified was: "
						+ getPath().toString();
				case TARGET_EXCEPTION :
					return "Target exception.";
				case UPDATE_CONFLICT :
					return "Update conflict.";
				case NO_LOCAL_CONTENTS :
					return "Cannot find local contents for resource: " + getPath().toString();
			}
			return getString();
		} else {
			if (getCode() == CORE_EXCEPTION) {
				return "Core exception: " + getException().getMessage();
			}
			return getException().getMessage();
		}
	}

