	/**
	 * Returns the message that is relevant to the code of this status.
	 */
	public String getMessage() {
		if (getException() == null) {
			switch (getCode()) {
				case CORE_EXCEPTION :
					return Util.bind("status.coreException"); //$NON-NLS-1$
				case BUILDER_INITIALIZATION_ERROR:
					return Util.bind("build.initializationError"); //$NON-NLS-1$
				case BUILDER_SERIALIZATION_ERROR:
					return Util.bind("build.serializationError"); //$NON-NLS-1$
				case DEVICE_PATH:
					return Util.bind("status.cannotUseDeviceOnPath", getPath().toString()); //$NON-NLS-1$
				case DOM_EXCEPTION:
					return Util.bind("status.JDOMError"); //$NON-NLS-1$
				case ELEMENT_DOES_NOT_EXIST:
					return Util.bind("element.doesNotExist",fElements[0].getElementName()); //$NON-NLS-1$
				case EVALUATION_ERROR:
					return Util.bind("status.evaluationError", getString()); //$NON-NLS-1$
				case INDEX_OUT_OF_BOUNDS:
					return Util.bind("status.indexOutOfBounds"); //$NON-NLS-1$
				case INVALID_CONTENTS:
					return Util.bind("status.invalidContents"); //$NON-NLS-1$
				case INVALID_DESTINATION:
					return Util.bind("status.invalidDestination", fElements[0].getElementName()); //$NON-NLS-1$
				case INVALID_ELEMENT_TYPES:
					StringBuffer buff= new StringBuffer(Util.bind("operation.notSupported")); //$NON-NLS-1$
					for (int i= 0; i < fElements.length; i++) {
						if (i > 0) {
							buff.append(", "); //$NON-NLS-1$
						}
						buff.append(fElements[0].getElementName());
					}
					return buff.toString();
				case INVALID_NAME:
					return Util.bind("status.invalidName", getString()); //$NON-NLS-1$
				case INVALID_PACKAGE:
					return Util.bind("status.invalidPackage", getString()); //$NON-NLS-1$
				case INVALID_PATH:
					return Util.bind("status.invalidPath", getPath() == null ? "null" : getPath().toString()); //$NON-NLS-1$ //$NON-NLS-2$
				case INVALID_PROJECT:
					return Util.bind("status.invalidProject", getString()); //$NON-NLS-1$
				case INVALID_RESOURCE:
					return Util.bind("status.invalidResource", getString()); //$NON-NLS-1$
				case INVALID_RESOURCE_TYPE:
					return Util.bind("status.invalidResourceType", getString()); //$NON-NLS-1$
				case INVALID_SIBLING:
					return Util.bind("status.invalidSibling", fElements[0].getElementName()); //$NON-NLS-1$
				case IO_EXCEPTION:
					return Util.bind("status.IOException"); //$NON-NLS-1$
				case NAME_COLLISION:
					if (fElements != null && fElements.length > 0) {
						IJavaElement element = fElements[0];
						String name = element.getElementName();
						if (element instanceof IPackageFragment && name.equals(IPackageFragment.DEFAULT_PACKAGE_NAME)) {
							return Util.bind("operation.cannotRenameDefaultPackage"); //$NON-NLS-1$
						}
					}
					return Util.bind("status.nameCollision"); //$NON-NLS-1$
				case NO_ELEMENTS_TO_PROCESS:
					return Util.bind("operation.needElements"); //$NON-NLS-1$
				case NULL_NAME:
					return Util.bind("operation.needName"); //$NON-NLS-1$
				case NULL_PATH:
					return Util.bind("operation.needPath"); //$NON-NLS-1$
				case NULL_STRING:
					return Util.bind("operation.needString"); //$NON-NLS-1$
				case PATH_OUTSIDE_PROJECT:
					return Util.bind("operation.pathOutsideProject", getString(), fElements[0].getElementName()); //$NON-NLS-1$
				case READ_ONLY:
					IJavaElement element = fElements[0];
					String name = element.getElementName();
					if (element instanceof IPackageFragment && name.equals(IPackageFragment.DEFAULT_PACKAGE_NAME)) {
						return Util.bind("status.defaultPackageReadOnly"); //$NON-NLS-1$
					}
					return  Util.bind("status.readOnly", name); //$NON-NLS-1$
				case RELATIVE_PATH:
					return Util.bind("operation.needAbsolutePath", getPath().toString()); //$NON-NLS-1$
				case TARGET_EXCEPTION:
					return Util.bind("status.targetException"); //$NON-NLS-1$
				case UPDATE_CONFLICT:
					return Util.bind("status.updateConflict"); //$NON-NLS-1$
				case NO_LOCAL_CONTENTS :
					return Util.bind("status.noLocalContents", getPath().toString()); //$NON-NLS-1$
			}
			return getString();
		} else {
			return getException().getMessage();
		}
	}

