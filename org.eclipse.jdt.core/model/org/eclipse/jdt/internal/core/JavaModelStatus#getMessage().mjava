/**
 * Returns the message that is relevant to the code of this status.
 */
public String getMessage() {
	if (getException() == null) {
		switch (getCode()) {
			case CORE_EXCEPTION :
				return Util.bind("status.coreException"/*nonNLS*/);
			case BUILDER_INITIALIZATION_ERROR:
				return Util.bind("build.initializationError"/*nonNLS*/);
			case BUILDER_SERIALIZATION_ERROR:
				return Util.bind("build.serializationError"/*nonNLS*/);
			case DEVICE_PATH:
				return Util.bind("status.cannotUseDeviceOnPath"/*nonNLS*/, getPath().toString());
			case DOM_EXCEPTION:
				return Util.bind("status.JDOMError"/*nonNLS*/);
			case ELEMENT_DOES_NOT_EXIST:
				return Util.bind("element.doesNotExist"/*nonNLS*/,fElements[0].getElementName());
			case EVALUATION_ERROR:
				return Util.bind("status.evaluationError"/*nonNLS*/, getString());
			case INDEX_OUT_OF_BOUNDS:
				return Util.bind("status.indexOutOfBounds"/*nonNLS*/);
			case INVALID_CONTENTS:
				return Util.bind("status.invalidContents"/*nonNLS*/);
			case INVALID_DESTINATION:
				return Util.bind("status.invalidDestination"/*nonNLS*/, fElements[0].getElementName());
			case INVALID_ELEMENT_TYPES:
				StringBuffer buff= new StringBuffer(Util.bind("operation.notSupported"/*nonNLS*/));
				for (int i= 0; i < fElements.length; i++) {
					if (i > 0) {
						buff.append(", "/*nonNLS*/);
					}
					buff.append(fElements[0].getElementName());
				}
				return buff.toString();
			case INVALID_NAME:
				return Util.bind("status.invalidName"/*nonNLS*/, getString());
			case INVALID_PACKAGE:
				return Util.bind("status.invalidPackage"/*nonNLS*/, getString());
			case INVALID_PATH:
				return Util.bind("status.invalidPath"/*nonNLS*/, getPath() == null ? "null"/*nonNLS*/ : getPath().toString());
			case INVALID_PROJECT:
				return Util.bind("status.invalidProject"/*nonNLS*/, getString());
			case INVALID_RESOURCE:
				return Util.bind("status.invalidResource"/*nonNLS*/, getString());
			case INVALID_RESOURCE_TYPE:
				return Util.bind("status.invalidResourceType"/*nonNLS*/, getString());
			case INVALID_SIBLING:
				return Util.bind("status.invalidSibling"/*nonNLS*/, fElements[0].getElementName());
			case IO_EXCEPTION:
				return Util.bind("status.IOException"/*nonNLS*/);
			case NAME_COLLISION:
				if (fElements != null && fElements.length > 0) {
					IJavaElement element = fElements[0];
					String name = element.getElementName();
					if (element instanceof IPackageFragment && name.equals(IPackageFragment.DEFAULT_PACKAGE_NAME)) {
						return Util.bind("operation.cannotRenameDefaultPackage"/*nonNLS*/);
					}
				}
				return Util.bind("status.nameCollision"/*nonNLS*/);
			case NO_ELEMENTS_TO_PROCESS:
				return Util.bind("operation.needElements"/*nonNLS*/);
			case NULL_NAME:
				return Util.bind("operation.needName"/*nonNLS*/);
			case NULL_PATH:
				return Util.bind("operation.needPath"/*nonNLS*/);
			case NULL_STRING:
				return Util.bind("operation.needString"/*nonNLS*/);
			case PATH_OUTSIDE_PROJECT:
				return Util.bind("operation.pathOutsideProject"/*nonNLS*/, getString(), fElements[0].getElementName());
			case READ_ONLY:
				IJavaElement element = fElements[0];
				String name = element.getElementName();
				if (element instanceof IPackageFragment && name.equals(IPackageFragment.DEFAULT_PACKAGE_NAME)) {
					return Util.bind("status.defaultPackageReadOnly"/*nonNLS*/);
				}
				return  Util.bind("status.readOnly"/*nonNLS*/, name);
			case RELATIVE_PATH:
				return Util.bind("operation.needAbsolutePath"/*nonNLS*/, getPath().toString());
			case TARGET_EXCEPTION:
				return Util.bind("status.targetException"/*nonNLS*/);
			case UPDATE_CONFLICT:
				return Util.bind("status.updateConflict"/*nonNLS*/);
			case NO_LOCAL_CONTENTS :
				return Util.bind("status.noLocalContents"/*nonNLS*/, getPath().toString());
		}
		return getString();
	} else {
		if (getCode() == CORE_EXCEPTION){
			return Util.bind("status.coreExceptionWithArg"/*nonNLS*/, getException().getMessage());
		}
		return getException().getMessage();
	}
}

