	/*
	 * Compute the root path from the given javaFilePath by extracting the package declaration
	 * from its contents. The javaFilePath is the relative path (/ separated and relative to the source path) to the .java file.
	 */
	String computeRootPath(String javaFilePath, char[] contents) {
		IErrorHandlingPolicy policy =
			new IErrorHandlingPolicy() {
					public boolean stopOnFirstError() {
						return false;
					}
					public boolean proceedOnErrors() {
						return true;
					}
				};						
		ProblemReporter reporter = new ProblemReporter(policy, new CompilerOptions(this.options), new DefaultProblemFactory());
		Parser parser = new Parser(reporter, false, false);
		org.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit = 
			new BasicCompilationUnit(contents, null, javaFilePath, this.encoding);
		CompilationResult unitResult = new CompilationResult(sourceUnit, 0, 1, 0); 
		CompilationUnitDeclaration unit = parser.dietParse(sourceUnit, unitResult);
		if (unit != null && unit.currentPackage != null && unit.currentPackage.tokens != null) {
			String packagePath = new String(CharOperation.concatWith(unit.currentPackage.tokens, '/'));
			if (packagePath != null) {
				if (packagePath.length() == 0) {
					int lastSlash = javaFilePath.lastIndexOf('/');
					if (lastSlash > 0) {
						return javaFilePath.substring(0, lastSlash-1);
					} else {
						return javaFilePath;
					}
				} else {
					int index = javaFilePath.indexOf(packagePath);
					if (index != -1) {
						return javaFilePath.substring(0, index);
					}
				}
			}
		}
		return null;
	}

