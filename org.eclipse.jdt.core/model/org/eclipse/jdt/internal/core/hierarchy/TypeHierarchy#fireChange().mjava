/**
 * Notifies listeners that this hierarchy has changed and needs
 * refreshing. Note that listeners can be removed as we iterate
 * through the list.
 */
protected void fireChange() {
	if (fChangeListeners == null) {
		return;
	}
	if (DEBUG) {
		System.out.println("FIRING hierarchy change ["+Thread.currentThread()+"]");
		System.out.println("    for hierarchy focused on " + ((JavaElement)fType).toStringWithAncestors()); //$NON-NLS-1$
	}
	ArrayList listeners= (ArrayList)fChangeListeners.clone();
	for (int i= 0; i < listeners.size(); i++) {
		ITypeHierarchyChangedListener listener= (ITypeHierarchyChangedListener)listeners.get(i);
		// ensure the listener is still a listener
		if (fChangeListeners != null  && fChangeListeners.indexOf(listener) >= 0) {
			listener.typeHierarchyChanged(this);
		}
	}
}

