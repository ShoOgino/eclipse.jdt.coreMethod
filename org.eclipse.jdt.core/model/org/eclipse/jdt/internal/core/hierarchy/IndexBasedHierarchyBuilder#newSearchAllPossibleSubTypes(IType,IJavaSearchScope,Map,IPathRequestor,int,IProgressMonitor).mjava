private static void newSearchAllPossibleSubTypes(IType type, IJavaSearchScope scope2, Map binariesFromIndexMatches2,
		IPathRequestor pathRequestor, int waitingPolicy, IProgressMonitor progressMonitor) {
	SubMonitor subMonitor = SubMonitor.convert(progressMonitor);
	JavaIndex index = JavaPDOM.getIndex();
	PDOM pdom = index.getPDOM();
	String fieldDefinition = JavaNames.fullyQualifiedNameToFieldDescriptor(type.getFullyQualifiedName());
	pdom.acquireReadLock();

	try {
		PDOMTypeId foundType = index.findType(fieldDefinition);

		if (foundType == null) {
			return;
		}

		ArrayDeque<PDOMType> typesToVisit = new ArrayDeque<>();
		Set<PDOMType> discoveredTypes = new HashSet<>();
		typesToVisit.addAll(foundType.getTypes());
		discoveredTypes.addAll(typesToVisit);

		while (!typesToVisit.isEmpty()) {
			PDOMType nextType = typesToVisit.removeFirst();

			String typePath = JavaNames.getIndexPathFor(nextType);
			if (!scope2.encloses(typePath)) {
				continue;
			}

			SubMonitor iterationMonitor = subMonitor
					.setWorkRemaining(Math.max(typesToVisit.size(), 10))
					.split(1)
					.setWorkRemaining(3);

			boolean isLocalClass = nextType.getDeclaringType() != null;
			pathRequestor.acceptPath(typePath, isLocalClass);

			HierarchyBinaryType binaryType = (HierarchyBinaryType)binariesFromIndexMatches2.get(typePath);
			if (binaryType == null) {
				binaryType = createBinaryTypeFrom(nextType);
				binariesFromIndexMatches2.put(typePath, binaryType);
			}

			for (PDOMType subType : nextType.getTypeId().getSubTypes()) {
				if (!discoveredTypes.contains(subType)) {
					discoveredTypes.add(subType);
					typesToVisit.add(subType);
				}
			}
		}
	} finally {
		pdom.releaseReadLock();
	}
}

