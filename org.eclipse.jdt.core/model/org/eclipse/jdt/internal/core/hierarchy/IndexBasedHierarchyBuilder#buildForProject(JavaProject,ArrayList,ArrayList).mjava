private void buildForProject(JavaProject project, ArrayList infos, ArrayList units) throws JavaModelException {
	// copy vectors into arrays
	IGenericType[] genericTypes;
	int infosSize = infos.size();
	if (infosSize > 0) {
		genericTypes = new IGenericType[infosSize];
		infos.toArray(genericTypes);
	} else {
		genericTypes = new IGenericType[0];
	}
	ICompilationUnit[] compilationUnits;
	int unitsSize = units.size();
	if (unitsSize > 0) {
		compilationUnits = new ICompilationUnit[unitsSize];
		units.toArray(compilationUnits);
	} else {
		compilationUnits = new ICompilationUnit[0];
	}

	// resolve
	if (infosSize > 0 || unitsSize > 0) {
		this.searchableEnvironment = (SearchableEnvironment)project.getSearchableNameEnvironment();
		IType focusType = this.getType();
		this.nameLookup = project.getNameLookup();
		boolean inProjectOfFocusType = focusType != null && focusType.getJavaProject().equals(project);
		if (inProjectOfFocusType) {
			org.eclipse.jdt.core.ICompilationUnit unitToLookInside = focusType.getCompilationUnit();
			if (unitToLookInside != null) {
				this.nameLookup.setUnitsToLookInside(new IWorkingCopy[] {unitToLookInside});
			}
		}
		try {
			this.hierarchyResolver = 
				new HierarchyResolver(this.searchableEnvironment, JavaCore.getOptions(), this, new DefaultProblemFactory());
			if (focusType != null) {
				char[] fullyQualifiedName = focusType.getFullyQualifiedName().toCharArray();
				ReferenceBinding focusTypeBinding = this.hierarchyResolver.setFocusType(CharOperation.splitOn('.', fullyQualifiedName));
				if (focusTypeBinding == null 
					|| (!inProjectOfFocusType && (focusTypeBinding.tagBits & TagBits.HierarchyHasProblems) > 0)) {
					// focus type is not visible in this project: no need to go further
					return;
				}
			}
			this.hierarchyResolver.resolve(genericTypes, compilationUnits);
		} finally {
			if (inProjectOfFocusType) {
				this.nameLookup.setUnitsToLookInside(null);
			}
		}
	}
}

