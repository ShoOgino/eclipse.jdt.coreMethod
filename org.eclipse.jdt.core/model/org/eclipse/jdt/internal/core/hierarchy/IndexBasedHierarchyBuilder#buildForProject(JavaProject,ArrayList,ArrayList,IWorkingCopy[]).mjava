private void buildForProject(JavaProject project, ArrayList infos, ArrayList units, IWorkingCopy[] workingCopies) throws JavaModelException {
	// copy vectors into arrays
	IGenericType[] genericTypes;
	int infosSize = infos.size();
	if (infosSize > 0) {
		genericTypes = new IGenericType[infosSize];
		infos.toArray(genericTypes);
	} else {
		genericTypes = new IGenericType[0];
	}
	ICompilationUnit[] compilationUnits;
	int unitsSize = units.size();
	if (unitsSize > 0) {
		compilationUnits = new ICompilationUnit[unitsSize];
		units.toArray(compilationUnits);
	} else {
		compilationUnits = new ICompilationUnit[0];
	}

	// resolve
	if (infosSize > 0 || unitsSize > 0) {
		this.searchableEnvironment = (SearchableEnvironment)project.getSearchableNameEnvironment();
		IType focusType = this.getType();
		this.nameLookup = project.getNameLookup();
		boolean inProjectOfFocusType = focusType != null && focusType.getJavaProject().equals(project);
		synchronized(this.nameLookup) { // prevent 2 concurrent accesses to name lookup while the units to look inside are set
			if (inProjectOfFocusType) {
				org.eclipse.jdt.core.ICompilationUnit unitToLookInside = focusType.getCompilationUnit();
				IWorkingCopy[] unitsToLookInside;
				if (unitToLookInside != null) {
					int wcLength = workingCopies == null ? 0 : workingCopies.length;
					if (wcLength == 0) {
						unitsToLookInside = new IWorkingCopy[] {unitToLookInside};
					} else {
						unitsToLookInside = new IWorkingCopy[wcLength+1];
						unitsToLookInside[0] = unitToLookInside;
						System.arraycopy(workingCopies, 0, unitsToLookInside, 1, wcLength);
					}
				} else {
					unitsToLookInside = workingCopies;
				}
				this.nameLookup.setUnitsToLookInside(unitsToLookInside);
			}
			try {
				this.hierarchyResolver = 
					new HierarchyResolver(this.searchableEnvironment, JavaCore.getOptions(), this, new DefaultProblemFactory());
				if (focusType != null) {
					char[] fullyQualifiedName = focusType.getFullyQualifiedName().toCharArray();
					ReferenceBinding focusTypeBinding = this.hierarchyResolver.setFocusType(CharOperation.splitOn('.', fullyQualifiedName));
					if (focusTypeBinding == null 
						|| (!inProjectOfFocusType && (focusTypeBinding.tagBits & TagBits.HierarchyHasProblems) > 0)) {
						// focus type is not visible in this project: no need to go further
						return;
					}
				}
				this.hierarchyResolver.resolve(genericTypes, compilationUnits);
			} finally {
				if (inProjectOfFocusType) {
					this.nameLookup.setUnitsToLookInside(null);
				}
			}
		}
	}
}

