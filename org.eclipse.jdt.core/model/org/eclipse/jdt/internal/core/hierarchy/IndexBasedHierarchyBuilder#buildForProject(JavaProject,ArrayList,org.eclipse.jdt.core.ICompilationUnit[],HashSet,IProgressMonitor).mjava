private void buildForProject(JavaProject project, ArrayList potentialSubtypes, org.eclipse.jdt.core.ICompilationUnit[] workingCopies, HashSet localTypes, IProgressMonitor monitor) throws JavaModelException {
	// copy vectors into arrays
	int openablesLength = potentialSubtypes.size();
	Openable[] openables = new Openable[openablesLength];
	potentialSubtypes.toArray(openables);

	// resolve
	if (openablesLength > 0) {
		this.searchableEnvironment = (SearchableEnvironment)project.getSearchableNameEnvironment();
		IType focusType = this.getType();
		this.nameLookup = project.getNameLookup();
		boolean inProjectOfFocusType = focusType != null && focusType.getJavaProject().equals(project);
		if (inProjectOfFocusType) {
			org.eclipse.jdt.core.ICompilationUnit unitToLookInside = focusType.getCompilationUnit();
			org.eclipse.jdt.core.ICompilationUnit[] unitsToLookInside;
			if (unitToLookInside != null) {
				int wcLength = workingCopies == null ? 0 : workingCopies.length;
				if (wcLength == 0) {
					unitsToLookInside = new org.eclipse.jdt.core.ICompilationUnit[] {unitToLookInside};
				} else {
					unitsToLookInside = new org.eclipse.jdt.core.ICompilationUnit[wcLength+1];
					unitsToLookInside[0] = unitToLookInside;
					System.arraycopy(workingCopies, 0, unitsToLookInside, 1, wcLength);
				}
			} else {
				unitsToLookInside = workingCopies;
			}
			this.nameLookup.setUnitsToLookInside(unitsToLookInside); // NB: this uses a PerThreadObject, so it is thread safe
		}
		try {
			this.hierarchyResolver = 
				new HierarchyResolver(this.searchableEnvironment, project.getOptions(true), this, new DefaultProblemFactory());
			if (focusType != null) {
				Member declaringMember = ((Member)focusType).getOuterMostLocalContext();
				if (declaringMember == null) {
					// top level or member type
					char[] fullyQualifiedName = focusType.getFullyQualifiedName().toCharArray();
					if (!inProjectOfFocusType && project.getSearchableNameEnvironment().findType(CharOperation.splitOn('.', fullyQualifiedName)) == null) {
						// focus type is not visible in this project: no need to go further
						return;
					}
				} else {
					// local or anonymous type
					this.hierarchyResolver.resolveLocalType(focusType, declaringMember);
					return;
				}
			}
			this.hierarchyResolver.resolve(openables, localTypes, monitor);
		} finally {
			if (inProjectOfFocusType) {
				this.nameLookup.setUnitsToLookInside(null);
			}
		}
	}
}

