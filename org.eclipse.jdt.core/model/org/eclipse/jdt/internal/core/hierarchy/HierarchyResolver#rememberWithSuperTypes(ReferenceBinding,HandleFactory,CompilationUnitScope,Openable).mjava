/*
 * Remember the given type and the super types in the same compilation unit
 */
private void rememberWithSuperTypes(ReferenceBinding referenceBinding, HandleFactory factory, CompilationUnitScope compilationUnitScope, Openable openable) {
	if (!(referenceBinding instanceof SourceTypeBinding)) return;
	SourceTypeBinding type = (SourceTypeBinding)referenceBinding;
	if (type.scope.compilationUnitScope() != compilationUnitScope) return;
	IJavaElement element = factory.createElement(type.scope.referenceContext, compilationUnitScope.referenceContext, openable);
	if (element == null) return;
	ISourceType sourceType = null;
	try {
		sourceType = (ISourceType)((JavaElement)element).getElementInfo();
	} catch (JavaModelException e) {
		return;
	}
	remember(sourceType, type);
	
	if (type.superclass != null) {
		rememberWithSuperTypes(type.superclass, factory, compilationUnitScope, openable);
	}
	ReferenceBinding[] superInterfaces = type.superInterfaces;
	if (superInterfaces != null) {
		for (int i = 0, length = superInterfaces.length; i < length; i++) {
			ReferenceBinding superInterface = superInterfaces[i];
			rememberWithSuperTypes(superInterface, factory, compilationUnitScope, openable);
		}
	}
	
}

