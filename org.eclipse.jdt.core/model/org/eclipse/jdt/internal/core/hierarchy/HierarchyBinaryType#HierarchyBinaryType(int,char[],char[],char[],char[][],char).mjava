public HierarchyBinaryType(int modifiers, char[] qualification, char[] typeName, char[] enclosingTypeName, char[][] typeParameterSignatures, char typeSuffix){

	this.modifiers = modifiers;
	switch(typeSuffix) {
		case IIndexConstants.CLASS_SUFFIX :
			this.kind = IGenericType.CLASS_DECL;
			break;
		case IIndexConstants.INTERFACE_SUFFIX :
			this.kind = IGenericType.INTERFACE_DECL;
			break;
		case IIndexConstants.ENUM_SUFFIX :
			this.kind = IGenericType.ENUM_DECL;
			break;
		case IIndexConstants.ANNOTATION_TYPE_SUFFIX :
			this.kind = IGenericType.ANNOTATION_TYPE_DECL;
			break;
	}
	if (enclosingTypeName == null){
		this.name = CharOperation.concat(qualification, typeName, '/');
	} else {
		this.name = CharOperation.concat(qualification, '/', enclosingTypeName, '$', typeName); //rebuild A$B name
		this.enclosingTypeName = CharOperation.concat(qualification, enclosingTypeName,'/');
		CharOperation.replace(this.enclosingTypeName, '.', '/');
	}
	this.typeParameterSignatures = typeParameterSignatures;
	CharOperation.replace(this.name, '.', '/');
}

