/**
 * @see ITypeHierarchy
 */
public void refresh(IProgressMonitor monitor) throws JavaModelException {
	try {
		boolean reactivate = isActivated();
		ArrayList listeners = this.changeListeners;
		if (reactivate) {
			deactivate();
		}
		this.progressMonitor = monitor;
		if (monitor != null) {
			monitor.beginTask(Util.bind("hierarchy.creating"), IProgressMonitor.UNKNOWN); //$NON-NLS-1$
		}
		long start = -1;
		if (DEBUG) {
			start = System.currentTimeMillis();
			if (this.computeSubtypes) {
				System.out.println("CREATING TYPE HIERARCHY [" + Thread.currentThread() + "]"); //$NON-NLS-1$ //$NON-NLS-2$
			} else {
				System.out.println("CREATING SUPER TYPE HIERARCHY [" + Thread.currentThread() + "]"); //$NON-NLS-1$ //$NON-NLS-2$
			}
			if (this.type != null) {
				System.out.println("  on type " + ((JavaElement)this.type).toStringWithAncestors()); //$NON-NLS-1$
			}
		}
		compute();
		if (reactivate) {
			activate();
			this.changeListeners = listeners;
		}
		if (monitor != null) {
			monitor.done();
		}
		this.progressMonitor = null;
		if (DEBUG) {
			if (this.computeSubtypes) {
				System.out.println("CREATED TYPE HIERARCHY in " + (System.currentTimeMillis() - start) + "ms"); //$NON-NLS-1$ //$NON-NLS-2$
			} else {
				System.out.println("CREATED SUPER TYPE HIERARCHY in " + (System.currentTimeMillis() - start) + "ms"); //$NON-NLS-1$ //$NON-NLS-2$
			}
			System.out.println(this.toString());
		}
	} catch (JavaModelException e) {
		this.progressMonitor = null;
		throw e;
	} catch (CoreException e) {
		this.progressMonitor = null;
		throw new JavaModelException(e);
	} catch (OperationCanceledException oce) {
		refreshCancelled(oce);
	}
}

