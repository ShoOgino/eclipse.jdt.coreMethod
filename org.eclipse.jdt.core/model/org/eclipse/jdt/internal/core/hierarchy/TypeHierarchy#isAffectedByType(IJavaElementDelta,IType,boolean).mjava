/*
 * The rules are:
 * - if the delta is an added type X, then the hierarchy is changed 
 *   . if one of the types in this hierarchy has a supertype whose simple name is the
 *     simple name of X
 *   . if the simple name of a supertype of X is the simple name of one of
 *     the subtypes in this hierarchy (X will be added as one of the subtypes)
 * - if the delta is a changed type X, then the hierarchy is changed
 *   . if the visibility of X has changed and if one of the types in this hierarchy has a 
 *	   supertype whose simple name is the simple name of X
 *   . if one of the supertypes of X has changed or one of the imports has changed,
 *     and if the simple name of a supertype of X is the simple name of one of 
 *     the types in this hierarchy
 * - if the delta is a removed type X, then the hierarchy is changed
 *   . if the given element is part of this hierarchy (note we cannot acces the types 
 *     because the element has been removed)
 */
protected boolean isAffectedByType(IJavaElementDelta delta, IType type, boolean hasImportChange) {
	switch (delta.getKind()) {
		case IJavaElementDelta.ADDED:
			if (typeHasSupertype(type) 
				|| subtypesIncludeSupertypeOf(type) 
				|| this.missingTypes.contains(type.getElementName())) {
				
				return true;
			}
			break;
		case IJavaElementDelta.CHANGED:
			boolean hasVisibilityChange = (delta.getFlags() & IJavaElementDelta.F_MODIFIERS) > 0;
			boolean hasSupertypeChange = (delta.getFlags() & IJavaElementDelta.F_SUPER_TYPES) > 0;
			if ((hasVisibilityChange && typeHasSupertype(type))
					|| ((hasImportChange || hasSupertypeChange) 
						&& includesTypeOrSupertype(type))) {
				return true;
			}
			break;
		case IJavaElementDelta.REMOVED:
			if (this.contains(type)) {
				return true;
			}
			break;
	}
	IJavaElementDelta[] children = delta.getAffectedChildren();
	for (int i = 0, length = children.length; i < length; i++) {
		IJavaElementDelta child = children[i];
		IJavaElement childElement = child.getElement();
		if (childElement instanceof IType) {
			if (this.isAffectedByType(child, (IType)childElement, hasImportChange)) {
				return true;
			}
		}
	}
	return false;
} 

