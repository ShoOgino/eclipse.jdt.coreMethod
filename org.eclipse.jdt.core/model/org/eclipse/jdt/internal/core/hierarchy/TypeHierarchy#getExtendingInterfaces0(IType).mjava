/**
 * Assumes that the type is an interface
 * @see getExtendingInterfaces
 */
private IType[] getExtendingInterfaces0(IType interfce) {
	Iterator iter = fTypeToSuperInterfaces.keySet().iterator();
	ArrayList xers = new ArrayList();
	while (iter.hasNext()) {
		IType type = (IType) iter.next();
		try {
			if (type.isClass()) {
				continue;
			}
		} catch (JavaModelException npe) {
			continue;
		}
		IType[] interfaces = (IType[]) fTypeToSuperInterfaces.get(type);
		if (interfaces != null) {
			for (int i = 0; i < interfaces.length; i++) {
				IType iFace = interfaces[i];
				if (iFace.equals(interfce)) {
					xers.add(type);
				}
			}
		}
	}
	IType[] extenders = new IType[xers.size()];
	xers.toArray(extenders);
	return extenders;
}

