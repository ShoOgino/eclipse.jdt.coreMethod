/**
 * Assumes that the type is an interface
 * @see #getExtendingInterfaces
 */
private IType[] getExtendingInterfaces0(IType extendedInterface) {
	Iterator iter = this.typeToSuperInterfaces.keySet().iterator();
	ArrayList interfaceList = new ArrayList();
	while (iter.hasNext()) {
		IType type = (IType) iter.next();
		if (!this.isInterface(type)) {
			continue;
		}
		IType[] superInterfaces = (IType[]) this.typeToSuperInterfaces.get(type);
		if (superInterfaces != null) {
			for (int i = 0; i < superInterfaces.length; i++) {
				IType superInterface = superInterfaces[i];
				if (superInterface.equals(extendedInterface)) {
					interfaceList.add(type);
				}
			}
		}
	}
	IType[] extendingInterfaces = new IType[interfaceList.size()];
	interfaceList.toArray(extendingInterfaces);
	return extendingInterfaces;
}

