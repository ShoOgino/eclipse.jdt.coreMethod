private void rememberWithMemberTypes(TypeDeclaration typeDeclaration, HierarchyType enclosingType, ICompilationUnit unit) {

	if (typeDeclaration.binding == null) return;

	// simple super class name
	char[] superclassName = null;
	TypeReference superclass = typeDeclaration.superclass;
	if (superclass != null) {
		char[][] typeName = superclass.getTypeName();
		superclassName = typeName == null ? null : typeName[typeName.length-1];
	}
	
	// simple super interface names
	char[][] superInterfaceNames = null;
	TypeReference[] superInterfaces = typeDeclaration.superInterfaces;
	if (superInterfaces != null) {
		int length = superInterfaces.length;
		superInterfaceNames = new char[length][];
		for (int i = 0; i < length; i++) {
			TypeReference superInterface = superInterfaces[i];
			char[][] typeName = superInterface.getTypeName();
			superInterfaceNames[i] = typeName[typeName.length-1];
		}
	}

	HierarchyType hierarchyType = new HierarchyType(
		enclosingType, 
		!typeDeclaration.isInterface(),
		typeDeclaration.name,
		typeDeclaration.binding.modifiers,
		superclassName,
		superInterfaceNames,
		unit);
	remember(hierarchyType, typeDeclaration.binding);

	// propagate into member types
	if (typeDeclaration.memberTypes == null) return;
	MemberTypeDeclaration[] memberTypes = typeDeclaration.memberTypes;
	for (int i = 0, max = memberTypes.length; i < max; i++){
		rememberWithMemberTypes(memberTypes[i], hierarchyType, unit);
	}
}

