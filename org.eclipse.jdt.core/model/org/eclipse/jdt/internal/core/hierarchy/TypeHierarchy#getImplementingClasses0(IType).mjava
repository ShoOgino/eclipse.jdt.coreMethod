/**
 * Assumes that the type is an interface
 * @see getImplementingClasses
 */
private IType[] getImplementingClasses0(IType interfce) {
	
	Iterator iter = this.typeToSuperInterfaces.keySet().iterator();
	ArrayList iMenters = new ArrayList();
	while (iter.hasNext()) {
		IType type = (IType) iter.next();
		try {
			if (this.isInterface(type)) {
				continue;
			}
		} catch (JavaModelException npe) {
			continue;
		}
		IType[] types = (IType[]) this.typeToSuperInterfaces.get(type);
		for (int i = 0; i < types.length; i++) {
			IType iFace = types[i];
			if (iFace.equals(interfce)) {
				iMenters.add(type);
			}
		}
	}
	IType[] implementers = new IType[iMenters.size()];
	iMenters.toArray(implementers);
	return implementers;
}

