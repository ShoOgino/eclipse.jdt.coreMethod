/**
 * @see IHierarchyRequestor
 */
public void connect(IGenericType suppliedType, IGenericType superclass, IGenericType[] superinterfaces) {

	this.worked(1);
	
	// convert all infos to handles
	IType typeHandle= getHandle(suppliedType);

	/*
	 * Temporary workaround for 1G2O5WK: ITPJCORE:WINNT - NullPointerException when selecting "Show in Type Hierarchy" for a inner class
	 */
	if (typeHandle == null) return;
	
	IType superHandle= null;
	if (superclass != null) {
		superHandle= getHandle(superclass);
	}
	IType[] interfaceHandles= null;
	if (superinterfaces != null && superinterfaces.length > 0) {
		int length = superinterfaces.length;
		IType[] resolvedInterfaceHandles= new IType[length];
		int index = 0;
		for (int i= 0; i < length; i++) {
			if (superinterfaces[i] != null) {
				resolvedInterfaceHandles[index++]= getHandle(superinterfaces[i]);
			}
		}
		// resize
		System.arraycopy(resolvedInterfaceHandles, 0, interfaceHandles = new IType[index], 0, index);
	}

	// now do the caching
	if (suppliedType.isClass()) {
		if (superHandle == null) {
			this.hierarchy.addRootClass(typeHandle);
		} else {
			this.hierarchy.cacheSuperclass(typeHandle, superHandle);
		}
	} else {
		this.hierarchy.addInterface(typeHandle);
	}

	if (interfaceHandles == null) {
		interfaceHandles= this.hierarchy.fgEmpty;
	}
	this.hierarchy.cacheSuperInterfaces(typeHandle, interfaceHandles);
}

