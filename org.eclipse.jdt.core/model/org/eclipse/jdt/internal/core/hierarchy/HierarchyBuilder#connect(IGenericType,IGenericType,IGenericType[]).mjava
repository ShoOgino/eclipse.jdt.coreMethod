	/**
	 * @see IHierarchyRequestor
	 */
	public void connect(
		IGenericType suppliedType,
		IGenericType superclass,
		IGenericType[] superinterfaces) {

		// convert all infos to handles
		IType typeHandle = getHandle(suppliedType);
		/*
		 * Temporary workaround for 1G2O5WK: ITPJCORE:WINNT - NullPointerException when selecting "Show in Type Hierarchy" for a inner class
		 */
		if (typeHandle == null)
			return;
		IType superHandle = null;
		if (superclass != null) {
			if (superclass instanceof HierarchyResolver.MissingType) {
				this.hierarchy.missingTypes.add(((HierarchyResolver.MissingType)superclass).simpleName);
			} else {
				superHandle = getHandle(superclass);
			}
		}
		IType[] interfaceHandles = null;
		if (superinterfaces != null && superinterfaces.length > 0) {
			int length = superinterfaces.length;
			IType[] resolvedInterfaceHandles = new IType[length];
			int index = 0;
			for (int i = 0; i < length; i++) {
				IGenericType superInterface = superinterfaces[i];
				if (superInterface != null) {
					if (superInterface instanceof HierarchyResolver.MissingType) {
						this.hierarchy.missingTypes.add(((HierarchyResolver.MissingType)superInterface).simpleName);
					} else {
						resolvedInterfaceHandles[index] = getHandle(superInterface);
						if (resolvedInterfaceHandles[index] != null) {
							index++;
						}
					}
				}
			}
			// resize
			System.arraycopy(
				resolvedInterfaceHandles,
				0,
				interfaceHandles = new IType[index],
				0,
				index);
		}
		if (TypeHierarchy.DEBUG) {
			System.out.println(
				"Connecting: " + ((JavaElement) typeHandle).toStringWithAncestors()); //$NON-NLS-1$
			System.out.println(
				"  to superclass: " //$NON-NLS-1$
					+ (superHandle == null
						? "<None>" //$NON-NLS-1$
						: ((JavaElement) superHandle).toStringWithAncestors()));
			System.out.print("  and superinterfaces:"); //$NON-NLS-1$
			if (interfaceHandles == null || interfaceHandles.length == 0) {
				System.out.println(" <None>"); //$NON-NLS-1$
			} else {
				System.out.println();
				for (int i = 0, length = interfaceHandles.length; i < length; i++) {
					System.out.println(
						"    " + ((JavaElement) interfaceHandles[i]).toStringWithAncestors()); //$NON-NLS-1$
				}
			}
		}
		// now do the caching
		if (suppliedType.isClass()) {
			if (superHandle == null) {
				this.hierarchy.addRootClass(typeHandle);
			} else {
				this.hierarchy.cacheSuperclass(typeHandle, superHandle);
			}
		} else {
			this.hierarchy.addInterface(typeHandle);
		}
		if (interfaceHandles == null) {
			interfaceHandles = TypeHierarchy.NO_TYPE;
		}
		this.hierarchy.cacheSuperInterfaces(typeHandle, interfaceHandles);
		 
		// record flags
		this.hierarchy.cacheFlags(typeHandle, suppliedType.getModifiers());
	}

