	/**
	 * Register a ClassFile, to which the annotation attachment 'annotationBase' applies.
	 * This is done for the purpose to listen to changes in the corresponding external annotations
	 * and to force reloading the class file when necessary.
	 * @param annotationBase the path of the annotation attachment (workspace absolute)
	 * @param relativeAnnotationPath path corresponding to the qualified name of the main type of the class file.
	 *  The path is relative to 'annotationBase'.
	 *  When appending the file extension for annotation files it points to the annotation file
	 *  that would correspond to the given class file. The annotation file may or may not yet exist.
	 * @param classFile the ClassFile to register.
	 */
	public static void registerClassFile(IPath annotationBase, IPath relativeAnnotationPath, ClassFile classFile) {
		int baseDepth = annotationBase.segmentCount();
		if (baseDepth == 0) {
			Util.log(new IllegalArgumentException("annotationBase cannot be empty")); //$NON-NLS-1$
		} else {
			relativeAnnotationPath = relativeAnnotationPath.addFileExtension(ExternalAnnotationProvider.ANNOTATION_FILE_EXTENSION);
			DirectoryNode base = singleton.getAnnotationBase(singleton.tree, annotationBase, baseDepth, 1);
			base.registerClassFile(relativeAnnotationPath, classFile);
		}
	}

