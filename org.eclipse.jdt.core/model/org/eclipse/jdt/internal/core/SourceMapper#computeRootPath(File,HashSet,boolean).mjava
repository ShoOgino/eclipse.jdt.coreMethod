	private void computeRootPath(File directory, HashSet firstLevelPackageNames, boolean hasDefaultPackage) {
		File[] files = directory.listFiles();
		boolean hasSubDirectories = false;
		loop: for (int i = 0, max = files.length; i < max; i++) {
			File file = files[i];
			if (file.isDirectory()) {
				hasSubDirectories = true;
				if (firstLevelPackageNames.contains(file.getName())) {
					IPath fullPath = new Path(file.getParentFile().getPath());
					IPath rootPathEntry = fullPath.removeFirstSegments(this.sourcePath.segmentCount()).setDevice(null);
					this.rootPaths.add(rootPathEntry.toString());
					break loop;
				} else {
					computeRootPath(file, firstLevelPackageNames, hasDefaultPackage);
				}
			} else if (i == max - 1 && !hasSubDirectories && hasDefaultPackage) {
				File parentDir = file.getParentFile();
				if (parentDir.list(this.filenameFilter).length != 0) {
					IPath fullPath = new Path(parentDir.getPath());
					IPath rootPathEntry = fullPath.removeFirstSegments(this.sourcePath.segmentCount()).setDevice(null);
					this.rootPaths.add(rootPathEntry.toString());
				}
			}
		}
	}	

