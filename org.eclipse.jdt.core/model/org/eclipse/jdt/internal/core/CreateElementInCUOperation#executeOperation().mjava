	/**
	 * Execute the operation - generate new source for the compilation unit
	 * and save the results.
	 *
	 * @exception JavaModelException if the operation is unable to complete
	 */
	protected void executeOperation() throws JavaModelException {
		try {
			beginTask(getMainTaskName(), getMainAmountOfWork());
			JavaElementDelta delta = newJavaElementDelta();
			ICompilationUnit unit = getCompilationUnit();
			generateNewCompilationUnitDOM(unit);
			if (fCreationOccurred) {
				//a change has really occurred
				IBuffer buffer = unit.getBuffer();
				if (buffer  == null) return;
				char[] bufferContents = buffer.getCharacters();
				if (bufferContents == null) return;
				char[] elementContents = org.eclipse.jdt.internal.core.Util.normalizeCRs(fCreatedElement.getCharacters(), bufferContents);
				switch (fReplacementLength) {
					case -1 : 
						// element is append at the end
						buffer.append(elementContents);
						break;
					case 0 :
						// element is inserted
						buffer.replace(fInsertionPosition, 0, elementContents);
						break;
					default :
						// element is replacing the previous one
						buffer.replace(fInsertionPosition, fReplacementLength, elementContents);
				}
				unit.save(null, false);
				boolean isWorkingCopy = unit.isWorkingCopy();
				if (!isWorkingCopy)
					this.setAttribute("hasModifiedResource", "true");
				worked(1);
				fResultElements = generateResultHandles();
				if (!isWorkingCopy // if unit is working copy, then save will have already fired the delta
						&& !Util.isExcluded(unit)
						&& unit.getParent().exists()) {
					for (int i = 0; i < fResultElements.length; i++) {
						delta.added(fResultElements[i]);
					}
					addDelta(delta);
				} // else unit is created outside classpath
				  // non-java resource delta will be notified by delta processor
			}
		} finally {
			done();
		}
	}

