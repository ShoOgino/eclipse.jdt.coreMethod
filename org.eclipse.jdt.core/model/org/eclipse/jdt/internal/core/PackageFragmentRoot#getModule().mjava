public org.eclipse.jdt.internal.compiler.env.IModule getModule() {
	if (!this.isModule()) {
		return null;
	}
	try {
		PackageFragmentRootInfo rootInfo = (PackageFragmentRootInfo) getElementInfo();
		org.eclipse.jdt.internal.compiler.env.IModule module = rootInfo.getModule();
		if (module != null)
			return module;
		IJavaElement[] pkgs = getChildren();
		for (int j = 0, length = pkgs.length; j < length; j++) {
			// only look in the default package
			if (pkgs[j].getElementName().length() == 0) {
				OpenableElementInfo info = null;
				if (getKind() == IPackageFragmentRoot.K_SOURCE) {
					ICompilationUnit unit = ((PackageFragment) pkgs[j])
							.getCompilationUnit(TypeConstants.MODULE_INFO_FILE_NAME_STRING);
					if (unit instanceof CompilationUnit && unit.exists()) {
						info = (CompilationUnitElementInfo) ((CompilationUnit) unit)
								.getElementInfo();
						if (info != null)
							return info.getModule();
					}
				} else {
					IClassFile classFile = ((IPackageFragment)pkgs[j]).getClassFile(TypeConstants.MODULE_INFO_CLASS_NAME_STRING);
					if (classFile instanceof ClassFile && classFile.exists()) {
						IType type = classFile.getType();
						return ((ClassFileReader)(((BinaryType)type).getElementInfo())).getModuleDeclaration();
					}
				}
				break;
			}
		}
	} catch (JavaModelException e) {
		//
	}
	return null;
}

