	/** Internal utility, which is able to answer explicit and automatic modules. */
	static IModuleDescription getModuleDescription(JavaProject project, IPackageFragmentRoot root, Map<IPackageFragmentRoot,IModuleDescription> cache, Function<IPackageFragmentRoot,IClasspathEntry> rootToEntry) {
		IModuleDescription module = cache.get(root);
		if (module != null)
			return module != NO_MODULE ? module : null;
		if (!Objects.equals(project, root.getJavaProject())) {
			IClasspathEntry classpathEntry2 = rootToEntry.apply(root);
			if (classpathEntry2 instanceof ClasspathEntry) {
				if (!((ClasspathEntry) classpathEntry2).isModular()) {
					// not on the module path and not a local source folder
					cache.put(root, NO_MODULE);
					return null;
				}
			}
		}
		try {
			if (root.getKind() == IPackageFragmentRoot.K_SOURCE)
				module = root.getJavaProject().getModuleDescription(); // from any root in this project
		} catch (JavaModelException e) {
			cache.put(root, NO_MODULE);
			return null;
		}
		if (module == null) {
			// 2nd attempt: try automatic module:
			IClasspathEntry classpathEntry = rootToEntry.apply(root);
			if (classpathEntry instanceof ClasspathEntry) {
				if (((ClasspathEntry) classpathEntry).isModular()) {
					module = root.getModuleDescription();
					if (module == null) {
						// modular but no module-info implies this is an automatic module
						module = ((PackageFragmentRoot) root).getAutomaticModuleDescription(classpathEntry);
					}
				}
			} else if (root instanceof JrtPackageFragmentRoot) {
				module = root.getModuleDescription(); // always considered modular
			}
		}
		cache.put(root, module != null ? module : NO_MODULE);
		return module;
	}

