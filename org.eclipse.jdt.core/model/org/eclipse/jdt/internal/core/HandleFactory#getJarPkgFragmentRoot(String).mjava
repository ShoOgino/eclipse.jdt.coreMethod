/**
	 * Returns the package fragment root that corresponds to the given jar path.
	 * See createOpenable(...) for the format of the jar path string.
	 */
	private IPackageFragmentRoot getJarPkgFragmentRoot(String jarPathString) {

		IPath jarPath= new Path(jarPathString);
		IResource jarFile= this.workspace.getRoot().findMember(jarPath);
		if (jarFile != null) {
			// internal jar
			return this.javaModel.getJavaProject(jarFile).getPackageFragmentRoot(jarFile);
		} else {
			// external jar: walk all projects and find the first one that has the given jar path in its classpath
			IProject[] projects= this.workspace.getRoot().getProjects();
			for (int i= 0, projectCount= projects.length; i < projectCount; i++) {
				try {
					IProject project = projects[i];
					if (!project.isAccessible() 
						|| !project.hasNature(JavaCore.NATURE_ID)) continue;
					IJavaProject javaProject= this.javaModel.getJavaProject(project);
					IClasspathEntry[] classpathEntries= ((JavaProject)javaProject).getExpandedClasspath(true);
					for (int j= 0, entryCount= classpathEntries.length; j < entryCount; j++) {
						if (classpathEntries[j].getPath().equals(jarPath)) {
							return javaProject.getPackageFragmentRoot(jarPathString);
						}
					}
				} catch (CoreException e) {
					// CoreException from hasNature - should not happen since we check that the project is accessible
					// JavaModelException from getResolvedClasspath - a problem occured while accessing project: nothing we can do, ignore
				}
			}
			return null;
		}
	}

