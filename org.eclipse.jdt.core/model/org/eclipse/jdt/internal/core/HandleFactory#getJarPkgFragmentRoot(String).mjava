	/**
	 * Returns the package fragment root that corresponds to the given jar path.
	 * See createOpenable(...) for the format of the jar path string.
	 */
	private IPackageFragmentRoot getJarPkgFragmentRoot(String jarPathString) {

		IPath jarPath = new Path(jarPathString);
		JavaModel javaModel =
			this.manager.getJavaModel(this.workspaceRoot.getWorkspace());
		IResource jarFile = this.workspaceRoot.findMember(jarPath);
		if (jarFile != null) {
			// internal jar
			return javaModel.getJavaProject(jarFile).getPackageFragmentRoot(jarFile);
		} else {
			// external jar: walk all projects and find the first one that has the given jar path in its classpath
			try {
				IProject[] projects = this.workspaceRoot.getProjects();
				for (int i = 0, projectCount = projects.length; i < projectCount; i++) {
					IProject project = projects[i];
					if (project.isAccessible()) {
						IJavaProject javaProject = javaModel.getJavaProject(project);
						IClasspathEntry[] classpathEntries = javaProject.getResolvedClasspath(true);
						for (int j = 0, entryCount = classpathEntries.length; j < entryCount; j++) {
							if (classpathEntries[j].getPath().equals(jarPath)) {
								return javaProject.getPackageFragmentRoot(jarPathString);
							}
						}
					}
				}
			} catch (JavaModelException e) {
				e.printStackTrace();
			}
			return null;
		}
	}

