	/**
	 * @see Openable
	 */
	protected boolean generateInfos(
		OpenableElementInfo info,
		IProgressMonitor pm,
		Map newElements,
		IResource underlyingResource)	throws JavaModelException {

		boolean validInfo = false;
		try {
			if (((IProject) getUnderlyingResource()).isOpen()) {
				// put the info now, because setting the classpath requires it
				JavaModelManager.getJavaModelManager().putInfo(this, info);

				// read classpath property (contains actual classpath and output location settings)
				IClasspathEntry[] classpath = this.readClasspathFile(false/*don't create markers*/, true/*log problems*/);
				IPath outputLocation = null;

				// extract out the output location
				if (classpath != null && classpath.length > 0) {
					IClasspathEntry entry = classpath[classpath.length - 1];
					if (entry.getContentKind() == ClasspathEntry.K_OUTPUT) {
						outputLocation = entry.getPath();
						IClasspathEntry[] copy = new IClasspathEntry[classpath.length - 1];
						System.arraycopy(classpath, 0, copy, 0, copy.length);
						classpath = copy;
					}
				}
				// restore output location				
				if (outputLocation == null) {
					outputLocation = defaultOutputLocation();
				}
				((JavaProjectElementInfo)info).setOutputLocation(outputLocation);

				// restore classpath
				if (classpath == null) {
					classpath = defaultClasspath();
				}
				
				/* Disable validate: classpath can contain CP variables and container that need to be resolved 
				// validate classpath and output location
				if (classpath != INVALID_CLASSPATH
						&& !JavaConventions.validateClasspath(this, classpath, outputLocation).isOK()) {
					classpath = INVALID_CLASSPATH;
				}
				*/

				setRawClasspath0(classpath);

				// only valid if reaches here				
				validInfo = true;
			}
		} catch (JavaModelException e) {
		} finally {
			if (!validInfo)
				JavaModelManager.getJavaModelManager().removeInfo(this);
		}
		return validInfo;
	}

