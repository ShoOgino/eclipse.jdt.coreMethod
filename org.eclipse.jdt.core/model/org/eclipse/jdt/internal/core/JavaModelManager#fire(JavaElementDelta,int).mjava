	/**
	 * Fire Java Model delta, flushing them after the fact after post_change notification.
	 * If the firing mode has been turned off, this has no effect. 
	 */
	public void fire(JavaElementDelta customDelta, int originalEventType) {

		if (this.isFiring) {

			int eventType;
			
			/* DEFAULT event type is used when operation doesn't know actual event type and needed to fire immediately:
			 * e.g. non-resource modifying operation, create/destroy shared working copies
			 *
			 * this is mapped to a POST-change + PRE-build change for all interested listeners
			 */
			if (originalEventType == DEFAULT_CHANGE_EVENT){
				eventType = ElementChangedEvent.POST_CHANGE;
			} else {
				eventType = originalEventType;
			}
			
			JavaElementDelta deltaToNotify;
			if (customDelta == null){
				this.mergeDeltas();
				if (this.javaModelDeltas.size() > 0){ 

					// cannot be more than 1 after merge
					deltaToNotify = (JavaElementDelta)this.javaModelDeltas.get(0);

					// empty the queue only after having fired final volley of deltas and no custom deltas was superposed
					if (eventType == ElementChangedEvent.POST_CHANGE){
						// flush now so as to keep listener reactions to post their own deltas for subsequent iteration
						this.flush();
					}
				} else {
					return;
				}
			} else {
				deltaToNotify = customDelta;
			}
				
			// Refresh internal scopes
			Iterator scopes = this.scopes.keySet().iterator();
			while (scopes.hasNext()) {
				AbstractSearchScope scope = (AbstractSearchScope)scopes.next();
				scope.processDelta(deltaToNotify);
			}
				
			// Notification

			// Important: if any listener reacts to notification by updating the listeners list or mask, these lists will
			// be duplicated, so it is necessary to remember original lists in a variable (since field values may change under us)
			IElementChangedListener[] listeners = this.elementChangedListeners;
			int[] listenerMask = this.elementChangedListenerMasks;
			int listenerCount = this.elementChangedListenerCount;

			// in case using a DEFAULT change event, will notify also all listeners also interested in PRE-build events
			if (originalEventType == DEFAULT_CHANGE_EVENT){
				if (DeltaProcessor.VERBOSE){
					System.out.println("FIRING PRE_AUTO_BUILD Delta ["+Thread.currentThread()+"]:\n" + deltaToNotify);//$NON-NLS-1$//$NON-NLS-2$
				}
				final ElementChangedEvent extraEvent = new ElementChangedEvent(deltaToNotify, ElementChangedEvent.PRE_AUTO_BUILD);
				for (int i= 0; i < listenerCount; i++) {
					if ((listenerMask[i] & ElementChangedEvent.PRE_AUTO_BUILD) != 0){
						final IElementChangedListener listener = listeners[i];
						// wrap callbacks with Safe runnable for subsequent listeners to be called when some are causing grief
						Platform.run(new ISafeRunnable() {
							public void handleException(Throwable exception) {
								Util.log(exception, "Exception occurred in listener of Java element change notification"); //$NON-NLS-1$
							}
							public void run() throws Exception {
								listener.elementChanged(extraEvent);
							}
						});
					}
				}
			}

			// regular notification
			if (DeltaProcessor.VERBOSE){
				String type = "";//$NON-NLS-1$
				switch (eventType) {
					case ElementChangedEvent.POST_CHANGE:
						type = "POST_CHANGE"; //$NON-NLS-1$
						break;
					case ElementChangedEvent.PRE_AUTO_BUILD:
						type = "PRE_AUTO_BUILD"; //$NON-NLS-1$
						break;
					case ElementChangedEvent.POST_RECONCILE:
						type = "POST_RECONCILE"; //$NON-NLS-1$
						break;
				}
				System.out.println("FIRING " + type + " Delta ["+Thread.currentThread()+"]:\n" + deltaToNotify);//$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$
			}
			final ElementChangedEvent event = new ElementChangedEvent(deltaToNotify, eventType);
			for (int i= 0; i < listenerCount; i++) {
				if ((listenerMask[i] & eventType) != 0){
					// wrap callbacks with Safe runnable for subsequent listeners to be called when some are causing grief
					final IElementChangedListener listener = listeners[i];
					Platform.run(new ISafeRunnable() {
						public void handleException(Throwable exception) {
							Util.log(exception, "Exception occurred in listener of Java element change notification"); //$NON-NLS-1$
						}
						public void run() throws Exception {
							listener.elementChanged(event);
						}
					});
				}
			}
		}
	}

