	/**
	 * Adds the given reference to the reference info for this CU.
	 */
	protected void addReference(byte kind, char[] name) {

		HashtableOfObject refCache = null;
		switch (kind) {
			case ReferenceInfo.REFTYPE_unknown :
				if ((refCache = this.unknownRefCache) == null) {
					refCache = this.unknownRefCache = new HashtableOfObject(5);
				}
				break;
			case ReferenceInfo.REFTYPE_call :
				if ((refCache = this.messageRefCache) == null) {
					refCache = this.messageRefCache = new HashtableOfObject(5);
				}
				break;
			case ReferenceInfo.REFTYPE_type :
				if ((refCache = this.typeRefCache) == null) {
					refCache = this.typeRefCache = new HashtableOfObject(5);
				}
				break;
			case ReferenceInfo.REFTYPE_var :
				if ((refCache = this.fieldRefCache) == null) {
					refCache = this.fieldRefCache = new HashtableOfObject(5);
				}
				break;
			case ReferenceInfo.REFTYPE_import :
			case ReferenceInfo.REFTYPE_derive :
			case ReferenceInfo.REFTYPE_class :
			case ReferenceInfo.REFTYPE_constant :
				}
		if (refCache == null)
			addReference0(kind, name); // backward compatible
		if (refCache.containsKey(name))
			return;
		refCache.put(name, name);
		addReference0(kind, name);
	}

