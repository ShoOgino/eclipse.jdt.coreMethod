/**
 * Resolve the binary method
 *
 * fix for 1FWFT6Q
 */
protected void acceptBinaryMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, char[] uniqueKey, boolean isConstructor) {
	IMethod method= type.getMethod(new String(selector), parameterSignatures);
	if (method.exists()) {
		try {
			if(!isConstructor || ((JavaElement)method).getSourceMapper() == null) {
				if (uniqueKey != null)
					method = new ResolvedBinaryMethod(
							(JavaElement)method.getParent(),
							method.getElementName(),
							method.getParameterTypes(),
							new String(uniqueKey));
				addElement(method);
				if(SelectionEngine.DEBUG){
					System.out.print("SELECTION - accept method("); //$NON-NLS-1$
					System.out.print(method.toString());
					System.out.println(")"); //$NON-NLS-1$
				}
			} else {
				ISourceRange range = method.getSourceRange();
				if (range.getOffset() != -1 && range.getLength() != 0 ) {
					if (uniqueKey != null)
						method = new ResolvedBinaryMethod(
								(JavaElement)method.getParent(),
								method.getElementName(),
								method.getParameterTypes(),
								new String(uniqueKey));
					addElement(method);
					if(SelectionEngine.DEBUG){
						System.out.print("SELECTION - accept method("); //$NON-NLS-1$
						System.out.print(method.toString());
						System.out.println(")"); //$NON-NLS-1$
					}
				} else {
					// no range was actually found, but a method was originally given -> default constructor
					addElement(type);
					if(SelectionEngine.DEBUG){
						System.out.print("SELECTION - accept type("); //$NON-NLS-1$
						System.out.print(type.toString());
						System.out.println(")"); //$NON-NLS-1$
					}
				}
			}
		} catch (JavaModelException e) {
			// an exception occurs, return nothing
		}
	}
}

