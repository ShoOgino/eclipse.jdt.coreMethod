/**
 * Starting at this folder, create non-java resources for this package fragment root 
 * and add them to the non-java resources collection.
 * 
 * @exception JavaModelException  The resource associated with this package fragment does not exist
 */
static Object[] computeFolderNonJavaResources(JavaProject project, IContainer folder, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException {
	Object[] nonJavaResources = new IResource[5];
	int nonJavaResourcesCounter = 0;
	try {
		IClasspathEntry[] classpath = project.getResolvedClasspath(true/*ignore unresolved variable*/);
		IResource[] members = folder.members();
		nextResource: for (int i = 0, max = members.length; i < max; i++) {
			IResource member = members[i];
			switch (member.getType()) {
				case IResource.FILE :
					String fileName = member.getName();
					
					// ignore .java files that are not excluded
					if (Util.isValidCompilationUnitName(fileName) && !Util.isExcluded(member, inclusionPatterns, exclusionPatterns)) 
						continue nextResource;
					// ignore .class files
					if (Util.isValidClassFileName(fileName)) 
						continue nextResource;
					// ignore .zip or .jar file on classpath
					if (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(fileName) && isClasspathEntry(member.getFullPath(), classpath)) 
						continue nextResource;
					break;

				case IResource.FOLDER :
					// ignore valid packages or excluded folders that correspond to a nested pkg fragment root
					if (Util.isValidFolderNameForPackage(member.getName())
							&& (!Util.isExcluded(member, inclusionPatterns, exclusionPatterns) 
								|| isClasspathEntry(member.getFullPath(), classpath)))
						continue nextResource;
					break;
			}
			if (nonJavaResources.length == nonJavaResourcesCounter) {
				// resize
				System.arraycopy(nonJavaResources, 0, (nonJavaResources = new IResource[nonJavaResourcesCounter * 2]), 0, nonJavaResourcesCounter);
			}
			nonJavaResources[nonJavaResourcesCounter++] = member;

		}
		if (nonJavaResources.length != nonJavaResourcesCounter) {
			System.arraycopy(nonJavaResources, 0, (nonJavaResources = new IResource[nonJavaResourcesCounter]), 0, nonJavaResourcesCounter);
		}
		return nonJavaResources;
	} catch (CoreException e) {
		throw new JavaModelException(e);
	}
}

