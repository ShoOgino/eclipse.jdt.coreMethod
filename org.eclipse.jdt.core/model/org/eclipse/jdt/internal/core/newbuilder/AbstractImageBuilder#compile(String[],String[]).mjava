/* Compile the given elements, adding more elements to the work queue 
* if they are affected by the changes.
*/
protected void compile(String[] filenames, String[] initialTypeNames) {
	int toDo = filenames.length;
	if (this.compiledAllAtOnce = toDo <= MAX_AT_ONCE) {
		// do them all now
		SourceFile[] toCompile = new SourceFile[toDo];
		for (int i = 0; i < toDo; i++) {
			String filename = filenames[i];
			if (JavaBuilder.DEBUG)
				System.out.println("About to compile " + filename); //$NON-NLS-1$
			String typeName = initialTypeNames[i];
			int lastIndex = typeName.lastIndexOf('/');
			lastIndex = (lastIndex > 0 ? lastIndex : typeName.length()) - 1;
			toCompile[i] = new SourceFile(filename, CharOperation.splitOn('/', typeName.toCharArray(), 0, lastIndex));
		}
		compile(toCompile, initialTypeNames, null);
	} else {
		int i = 0;
		boolean compilingFirstGroup = true;
		while (i < toDo) {
			int doNow = Math.min(toDo, MAX_AT_ONCE);
			int index = 0;
			SourceFile[] toCompile = new SourceFile[doNow];
			String[] initialNamesInLoop = new String[doNow];
			while (i < toDo && index < doNow) {
				String filename = filenames[i];
				// Although it needed compiling when this method was called, it may have
				// already been compiled when it was referenced by another unit.
				if (compilingFirstGroup || workQueue.isWaiting(filename)) {
					if (JavaBuilder.DEBUG)
						System.out.println("About to compile " + filename);//$NON-NLS-1$
					String typeName = initialTypeNames[i];
					initialNamesInLoop[index++] = typeName;
					int lastIndex = typeName.lastIndexOf('/');
					lastIndex = (lastIndex > 0 ? lastIndex : typeName.length()) - 1;
					toCompile[index] = new SourceFile(filename, CharOperation.splitOn('/', typeName.toCharArray(), 0, lastIndex));
				}
				i++;
			}
			if (index < doNow) {
				System.arraycopy(toCompile, 0, toCompile = new SourceFile[index], 0, index);
				System.arraycopy(initialNamesInLoop, 0, initialNamesInLoop = new String[index], 0, index);
			}
			String[] additionalFilenames = new String[toDo - i];
			System.arraycopy(filenames, i, additionalFilenames, 0, additionalFilenames.length);
			compilingFirstGroup = false;
			compile(toCompile, initialNamesInLoop, additionalFilenames);
		}
	}
}

