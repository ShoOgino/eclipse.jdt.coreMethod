static char[][][] internQualifiedNames(char[][][] qualifiedNames) {
	if (qualifiedNames == null) return EmptyQualifiedNames;
	int length = qualifiedNames.length;
	if (length == 0) return EmptyQualifiedNames;

	char[][][] keepers = new char[length][][];
	int index = 0;
	next : for (int i = 0; i < length; i++) {
		char[][] qualifiedName = qualifiedNames[i];
		int qLength = qualifiedName.length;
		for (int j = 0, k = WellKnownQualifiedNames.length; j < k; j++) {
			char[][] wellKnownName = WellKnownQualifiedNames[j];
			if (qLength > wellKnownName.length)
				break; // all remaining well known names are shorter
			if (CharOperation.equals(qualifiedName, wellKnownName))
				continue next;
		}

		ArrayList internedNames =
			(qLength >= 2 && qLength <= 7)
				? InternedQualifiedNames[qLength - 2]
				: InternedQualifiedNames[6];
		for (int j = 0, k = internedNames.size(); j < k; j++) {
			char[][] internedName = (char[][]) internedNames.get(j);
			if (CharOperation.equals(qualifiedName, internedName)) {
				keepers[index++] = internedName;
				continue next;
			}
		}
		qualifiedName = internSimpleNames(qualifiedName, false);
		internedNames.add(qualifiedName);
		keepers[index++] = qualifiedName;
	}
	if (length > index) {
		if (length == 0) return EmptyQualifiedNames;
		System.arraycopy(keepers, 0, keepers = new char[index][][], 0, index);
	}
	return keepers;
}

