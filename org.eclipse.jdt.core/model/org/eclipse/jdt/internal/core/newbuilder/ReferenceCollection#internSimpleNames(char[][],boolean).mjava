static char[][] internSimpleNames(char[][] simpleNames, boolean removeWellKnown) {
	if (simpleNames == null) return EmptySimpleNames;
	int length = simpleNames.length;
	if (length == 0) return EmptySimpleNames;

	char[][] keepers = new char[length][];
	int index = 0;
	next : for (int i = 0; i < length; i++) {
		char[] name = simpleNames[i];
		int sLength = name.length;
		for (int j = 0, k = WellKnownSimpleNames.length; j < k; j++) {
			char[] wellKnownName = WellKnownSimpleNames[j];
			if (sLength > wellKnownName.length)
				break; // all remaining well known names are shorter
			if (CharOperation.equals(name, wellKnownName)) {
				if (!removeWellKnown)
					keepers[index++] = WellKnownSimpleNames[j];
				continue next;
			}
		}

		ArrayList internedNames = null;
		switch (sLength) {
			case 0 : case 1 : case 2 : case 3 : case 4 : case 5 : case 6 : case 7 :
				internedNames = InternedSimpleNames[0];
				break;
			case 8 : case 9 : case 10 : case 11 :
				internedNames = InternedSimpleNames[1];
				break;
			case 12 : case 13 : case 14 : case 15 :
				internedNames = InternedSimpleNames[2];
				break;
			case 16 : case 17 : case 18 : case 19 :
				internedNames = InternedSimpleNames[3];
				break;
			case 20 : case 21 : case 22 : case 23 : case 24 :
				internedNames = InternedSimpleNames[4];
				break;
			default :
				internedNames = InternedSimpleNames[5];
				break;
		}
		for (int j = 0, k = internedNames.size(); j < k; j++) {
			char[] internedName = (char[]) internedNames.get(j);
			if (CharOperation.equals(name, internedName)) {
				keepers[index++] = internedName;
				continue next;
			}
		}
		internedNames.add(name);
		keepers[index++] = name;
	}
	if (length > index) {
		if (index == 0) return EmptySimpleNames;
		System.arraycopy(keepers, 0, keepers = new char[index][], 0, index);
	}
	return keepers;
}

