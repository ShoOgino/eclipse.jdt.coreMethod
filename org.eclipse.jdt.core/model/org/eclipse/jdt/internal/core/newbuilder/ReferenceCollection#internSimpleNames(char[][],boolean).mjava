static char[][] internSimpleNames(char[][] simpleNames, boolean removeWellKnown) {
	if (simpleNames == null) return EmptySimpleNames;
	int length = simpleNames.length;
	if (length == 0) return EmptySimpleNames;

	char[][] keepers = new char[length][];
	int index = 0;
	next : for (int i = 0; i < length; i++) {
		char[] name = simpleNames[i];
		int sLength = name.length;
		for (int j = 0, k = WellKnownSimpleNames.length; j < k; j++) {
			char[] wellKnownName = WellKnownSimpleNames[j];
			if (sLength > wellKnownName.length)
				break; // all remaining well known names are shorter
			if (sLength == wellKnownName.length && CharOperation.equals(name, wellKnownName)) {
				if (!removeWellKnown)
					keepers[index++] = WellKnownSimpleNames[j];
				continue next;
			}
		}
		for (int j = 0, k = InternedSimpleNames.size(); j < k; j++) {
			char[] internedName = (char[]) InternedSimpleNames.get(j);
			if (sLength == internedName.length && CharOperation.equals(name, internedName)) {
				keepers[index++] = internedName;
				continue next;
			}
		}
		InternedSimpleNames.add(name);
		keepers[index++] = name;
	}
	if (length > index) {
		if (index == 0) return EmptySimpleNames;
		System.arraycopy(keepers, 0, keepers = new char[index][], 0, index);
	}
	return keepers;
}

