/*
 * Initialize compilation unit encoding.
 * If we have a project, then get file name corresponding IFile and retrieve its encoding using
 * new API for encoding.
 * In case of a class file, then go through project in order to let the possibility to retrieve
 * a corresponding source file resource.
 * If we have a compilation unit, then get encoding from its resource directly...
 */
private void initAttributes(IJavaElement javaElement) {
	if (javaElement != null) {
		try {
				IModuleDescription module = null;

				search: while (javaElement != null) {
					switch (javaElement.getElementType()) {
						case IJavaElement.JAVA_PROJECT:
							module = ((IJavaProject) javaElement).getModuleDescription();
							break search;
						case IJavaElement.PACKAGE_FRAGMENT_ROOT:
							module = ((IPackageFragmentRoot) javaElement).getModuleDescription();
							break search;
						case IJavaElement.CLASS_FILE:
							if (javaElement instanceof IModularClassFile) {
								module = ((IModularClassFile) javaElement).getModule();
								break search;
							}
							break;
						case IJavaElement.COMPILATION_UNIT:
							IFile file = (IFile) javaElement.getResource();
							if (file != null) {
								this.encoding = file.getCharset();
							}
							module = ((org.eclipse.jdt.core.ICompilationUnit) javaElement).getModule();
							if (module != null)
								break search;
							break;
						default:
							break;
					}
					javaElement = javaElement.getParent();
				}

				if (module != null) {
					this.moduleName = module.getElementName().toCharArray();
				}
				if (this.encoding == null) {
					IProject project = javaElement.getJavaProject().getProject();
					if (project != null) {
						this.encoding = project.getDefaultCharset();
					}
				}
		} catch (CoreException e1) {
			this.encoding = null;
		}
	} else  {
		this.encoding = null;
	}
}

