	/**
	 * Used to perform export/restriction propagation across referring projects/containers
	 */
	public ClasspathEntry combineWith(IClasspathEntry referringEntry) {
		if (referringEntry == null) return this;
		if (referringEntry.isExported() 
				|| referringEntry.getAccessibleFiles().length > 0 
				|| referringEntry.getNonAccessibleFiles().length > 0) {
			boolean combine = this.entryKind == CPE_SOURCE || referringEntry.combineAccessRestrictions();
			return new ClasspathEntry(
								this.getContentKind(), this.getEntryKind(), this.getPath(),
								this.getInclusionPatterns(), 
								this.getExclusionPatterns(), 
								this.getSourceAttachmentPath(), this.getSourceAttachmentRootPath(), this.getOutputLocation(), 
								referringEntry.isExported()|| this.isExported, // duplicate container entry for tagging it as exported
								combine ? ClasspathEntry.concatPatterns(referringEntry.getAccessibleFiles(), this.getAccessibleFiles()) : referringEntry.getAccessibleFiles(), 
								combine ? ClasspathEntry.concatPatterns(referringEntry.getNonAccessibleFiles(), this.getNonAccessibleFiles()) : referringEntry.getNonAccessibleFiles(),
								this.combineAccessRestrictions,
								this.extraAttributes); 
		}
		// no need to clone
		return this;
	}

