/**
 * @see INameLookup
 */
public IPackageFragment findPackageFragment(IPath path) {
	if (!path.isAbsolute()) {
		throw new IllegalArgumentException(Util.bind("path.mustBeAbsolute")); //$NON-NLS-1$
	}
	IResource possibleFragment = workspace.getRoot().findMember(path);
	if (possibleFragment == null) {
		//external jar
		for (int i = 0; i < fPackageFragmentRoots.length; i++) {
			IPackageFragmentRoot root = fPackageFragmentRoots[i];
			if (!root.isExternal()) {
				continue;
			}
			IPath rootPath = root.getPath();
			int matchingCount = rootPath.matchingFirstSegments(path);
			if (matchingCount != 0) {
				String name = path.toOSString();
				// + 1 is for the File.separatorChar
				name = name.substring(rootPath.toOSString().length() + 1, name.length());
				name = name.replace(File.separatorChar, '.');
				IJavaElement[] list = null;
				try {
					list = root.getChildren();
				} catch (JavaModelException npe) {
					continue; // the package fragment root is not present;
				}
				int elementCount = list.length;
				for (int j = 0; j < elementCount; j++) {
					IPackageFragment packageFragment = (IPackageFragment) list[j];
					if (nameMatches(name, packageFragment, false)) {
						if (packageFragment.exists())
							return packageFragment;
					}
				}
			}
		}
	} else {
		IJavaElement fromFactory = JavaCore.create(possibleFragment);
		if (fromFactory == null) {
			return null;
		}
		if (fromFactory instanceof IPackageFragment) {
			return (IPackageFragment) fromFactory;
		} else
			if (fromFactory instanceof IJavaProject) {
				// default package in a default root
				JavaProject project = (JavaProject) fromFactory;
				try {
					IClasspathEntry entry = project.getClasspathEntryFor(path);
					if (entry != null) {
						IPackageFragmentRoot root =
							project.getPackageFragmentRoot(project.getUnderlyingResource());
						IPackageFragment[] pkgs = (IPackageFragment[]) fPackageFragments.get(IPackageFragment.DEFAULT_PACKAGE_NAME);
						if (pkgs == null) {
							return null;
						}
						for (int i = 0; i < pkgs.length; i++) {
							if (pkgs[i].getParent().equals(root)) {
								return pkgs[i];
							}
						}
					}
				} catch (JavaModelException e) {
					return null;
				}
			}
	}
	return null;
}

