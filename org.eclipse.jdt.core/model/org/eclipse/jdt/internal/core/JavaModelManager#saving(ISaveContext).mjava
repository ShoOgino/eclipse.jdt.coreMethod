	/**
	 * @see ISaveParticipant
	 */
	public void saving(ISaveContext context) throws CoreException {
		
	    // save container values on snapshot/full save
		IJavaProject[] projects = getJavaModel().getJavaProjects();
		IEclipsePreferences preferences = getInstancePreferences();
		for (int i = 0, length = projects.length; i < length; i++) {
		    IJavaProject project = projects[i];
			// clone while iterating (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=59638)
			Map projectContainers = containerClone(project);
			if (projectContainers == null) continue;
			for (Iterator keys = projectContainers.keySet().iterator(); keys.hasNext();) {
			    IPath containerPath = (IPath) keys.next();
			    IClasspathContainer container = (IClasspathContainer) projectContainers.get(containerPath);
				String containerKey = CP_CONTAINER_PREFERENCES_PREFIX+project.getElementName() +"|"+containerPath;//$NON-NLS-1$
				String containerString = null;
				try {
					if (container == null) {
						// container has not been initialized yet, use previous session value
						// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=73969)
						container = getPreviousSessionContainer(containerPath, project);
					}
					if (container != null) {
						IClasspathEntry[] entries = container.getClasspathEntries();
						containerString = ((JavaProject)project).encodeClasspath(
								entries, 
								null, 
								false);
					}
				} catch(JavaModelException e){
					// could not encode entry: will not persist
					Util.log(e, "Could not persist container " + containerPath + " for project " + project.getElementName()); //$NON-NLS-1$ //$NON-NLS-2$
				}
				if (containerString != null)
					preferences.put(containerKey, containerString);
			}
		}
		try {
			preferences.flush();
		} catch (BackingStoreException e) {
			IStatus status = new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, IStatus.ERROR, "Problems while saving context", e); //$NON-NLS-1$
			throw new CoreException(status);
		}
		
		if (context.getKind() == ISaveContext.FULL_SAVE) {
			// will need delta since this save (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=38658)
			context.needDelta();
			
			// clean up indexes on workspace full save
			// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=52347)
			IndexManager manager = this.indexManager;
			if (manager != null) {
				manager.cleanUpIndexes();
			}
		}
	
		IProject savedProject = context.getProject();
		if (savedProject != null) {
			if (!JavaProject.hasJavaNature(savedProject)) return; // ignore
			PerProjectInfo info = getPerProjectInfo(savedProject, true /* create info */);
			saveState(info, context);
			info.rememberExternalLibTimestamps();
			return;
		}
	
		ArrayList vStats= null; // lazy initialized
		for (Iterator iter =  this.perProjectInfos.values().iterator(); iter.hasNext();) {
			try {
				PerProjectInfo info = (PerProjectInfo) iter.next();
				saveState(info, context);
				info.rememberExternalLibTimestamps();
			} catch (CoreException e) {
				if (vStats == null)
					vStats= new ArrayList();
				vStats.add(e.getStatus());
			}
		}
		if (vStats != null) {
			IStatus[] stats= new IStatus[vStats.size()];
			vStats.toArray(stats);
			throw new CoreException(new MultiStatus(JavaCore.PLUGIN_ID, IStatus.ERROR, stats, Messages.build_cannotSaveStates, null)); 
		}
		
		// save external libs timestamps
		this.deltaState.saveExternalLibTimeStamps();
	}

