	private OutputsInfo outputsInfo(RootInfo rootInfo, IResource res) {
		try {
			IJavaProject proj =
				rootInfo == null ?
					(IJavaProject)this.createElement(res.getProject(), IJavaElement.JAVA_PROJECT, null) :
					rootInfo.project;
			if (proj != null) {
				IPath projectOutput = proj.getOutputLocation();
				int traverseMode = IGNORE;
				if (proj.getProject().getFullPath().equals(projectOutput)){ // case of proj==bin==src
					return new OutputsInfo(new IPath[] {projectOutput}, new int[] {SOURCE}, 1);
				} else {
					IClasspathEntry[] classpath = proj.getResolvedClasspath(true);
					IPath[] outputs = new IPath[classpath.length+1];
					int[] traverseModes = new int[classpath.length+1];
					int outputCount = 1;
					outputs[0] = projectOutput;
					traverseModes[0] = traverseMode;
					for (int i = 0, length = classpath.length; i < length; i++) {
						IClasspathEntry entry = classpath[i];
						IPath entryPath = entry.getPath();
						IPath output = entry.getOutputLocation();
						if (output != null) {
							outputs[outputCount] = output;
							// check case of src==bin
							if (entryPath.equals(output)) {
								traverseModes[outputCount++] = (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) ? SOURCE : BINARY;
							} else {
								traverseModes[outputCount++] = IGNORE;
							}
							break;
						}
						
						// check case of src==bin
						if (entryPath.equals(projectOutput)) {
							traverseModes[0] = (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) ? SOURCE : BINARY;
							break;
						}
					}
					return new OutputsInfo(outputs, traverseModes, outputCount);
				}
			}
		} catch (JavaModelException e) {
		}
		return null;
	}

