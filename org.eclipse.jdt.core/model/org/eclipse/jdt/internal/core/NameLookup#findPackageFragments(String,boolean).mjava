	/**
	 * @see INameLookup
	 */
	public IPackageFragment[] findPackageFragments(
		String name,
		boolean partialMatch) {
		int count = fPackageFragmentRoots.length;
		if (partialMatch) {
			name = name.toLowerCase();
			for (int i = 0; i < count; i++) {
				IPackageFragmentRoot root = fPackageFragmentRoots[i];
				IJavaElement[] list = null;
				try {
					list = root.getChildren();
				} catch (JavaModelException npe) {
					continue; // the package fragment root is not present;
				}
				int elementCount = list.length;
				IPackageFragment[] result = new IPackageFragment[elementCount];
				int resultLength = 0;
				for (int j = 0; j < elementCount; j++) {
					IPackageFragment packageFragment = (IPackageFragment) list[j];
					if (nameMatches(name, packageFragment, true)) {
						if (packageFragment.exists())
							result[resultLength++] = packageFragment;
					}
				}
				if (resultLength > 0) {
					System.arraycopy(
						result,
						0,
						result = new IPackageFragment[resultLength],
						0,
						resultLength);
					return result;
				} else {
					return null;
				}
			}
		} else {
			// Return only fragments that exists
			IPackageFragment[] fragments = (IPackageFragment[]) fPackageFragments.get(name);
			if (fragments != null) {
				IPackageFragment[] result = new IPackageFragment[fragments.length];
				int resultLength = 0;
				for (int i = 0; i < fragments.length; i++) {
					IPackageFragment packageFragment = fragments[i];
					if (packageFragment.exists())
						result[resultLength++] = packageFragment;
				}
				if (resultLength > 0) {
					System.arraycopy(
						result,
						0,
						result = new IPackageFragment[resultLength],
						0,
						resultLength);
					return result;
				} else {
					return null;
				}
			}
		}
		return null;
	}

