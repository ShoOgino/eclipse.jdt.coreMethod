	private IType findSecondaryType(String packageName, String typeName) {
		try {
			final ArrayList paths = new ArrayList();
			ITypeNameRequestor nameRequestor = new ITypeNameRequestor() {
				public void acceptClass(char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path) {
					if (enclosingTypeNames == null || enclosingTypeNames.length == 0) // accept only top level types
						paths.add(path);
				}
				public void acceptInterface(char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path) {
					if (enclosingTypeNames == null || enclosingTypeNames.length == 0) // accept only top level types
						paths.add(path);
				}
			};

			int index = typeName.lastIndexOf('.');
			if (index > 0) {
				// ignore the package name if the type name is a qualified name
				packageName = typeName.substring(0, index);
				typeName = typeName.substring(index + 1);
			}
			new SearchEngine().searchAllTypeNames(
				getProject().getWorkspace(),
				packageName.toCharArray(),
				typeName.toCharArray(),
				IJavaSearchConstants.EXACT_MATCH,
				IJavaSearchConstants.CASE_SENSITIVE,
				IJavaSearchConstants.TYPE,
				SearchEngine.createJavaSearchScope(new IJavaElement[] {this}, false),
				nameRequestor,
				IJavaSearchConstants.CANCEL_IF_NOT_READY_TO_SEARCH,
				null);

			if (!paths.isEmpty()) {
				for (int i = 0, l = paths.size(); i < l; i++) {
					String pathname = (String) paths.get(i);
					if (Util.isJavaFileName(pathname)) {
						IFile file = getProject().getWorkspace().getRoot().getFile(new Path(pathname));
						ICompilationUnit unit = JavaCore.createCompilationUnitFrom(file);
						return unit.getType(typeName);
					}
				}
			}
		} catch (JavaModelException ignore) {}
		return null;
	}

