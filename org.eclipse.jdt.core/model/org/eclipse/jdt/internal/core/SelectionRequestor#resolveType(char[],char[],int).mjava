	/**
	 * Resolve the type
	 */
	protected IType resolveType(
		char[] packageName,
		char[] typeName,
		int acceptFlags) {
		//fix for 1FVXGDK
		IType type = null;
		if (packageName == null || packageName.length == 0) {
			// default package
			type = fNameLookup.findType(new String(typeName), false, acceptFlags);
		} else {
			IPackageFragment[] pkgs =
				fNameLookup.findPackageFragments(new String(packageName), false);
			if (pkgs != null) {
				for (int i = 0, length = pkgs.length; i < length; i++) {
					type = fNameLookup.findType(new String(typeName), pkgs[i], false, acceptFlags);
					if (type != null)
						break;
				}
			}
		}
		if (type == null) {
			String pName = IPackageFragment.DEFAULT_PACKAGE_NAME;
			if (packageName != null) {
				pName = new String(packageName);
			}
			if (fCodeResolve != null
				&& fCodeResolve.getParent().getElementName().equals(pName)) {
				// look inside the type in which we are resolving in
				String tName = new String(typeName);
				tName = tName.replace('.', '$');
				IType[] allTypes = null;
				try {
					java.util.Vector v =
						((JavaElement) fCodeResolve).getChildrenOfType(IJavaElement.TYPE);
					allTypes = new IType[v.size()];
					v.copyInto(allTypes);
				} catch (JavaModelException e) {
					return null;
				}
				for (int i = 0; i < allTypes.length; i++) {
					if (allTypes[i].getTypeQualifiedName().equals(tName)) {
						return allTypes[i];
					}
				}
			}
		}
		return type;
	}

