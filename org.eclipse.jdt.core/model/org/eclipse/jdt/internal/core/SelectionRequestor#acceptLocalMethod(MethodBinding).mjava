public void acceptLocalMethod(MethodBinding methodBinding) {
	IJavaElement res = findLocalElement(methodBinding.sourceStart());
	if(res != null && res.getElementType() == IJavaElement.METHOD) {
		if (methodBinding instanceof ParameterizedMethodBinding) {
			IMethod method = (IMethod) res;
			
			char[] genericSignature = methodBinding.genericSignature();
			
			String[] typeArgumentsSignature = null;
			if(methodBinding instanceof ParameterizedGenericMethodBinding) {
				ParameterizedGenericMethodBinding genericMethodBinding = (ParameterizedGenericMethodBinding) methodBinding;
				if(!genericMethodBinding.isRaw) {
					TypeBinding[] typeArguments = genericMethodBinding.typeArguments;
					int typeArgumentsCount = typeArguments.length;
					for (int i = 0; i < typeArgumentsCount; i++) {
						typeArgumentsSignature[i] = new String(typeArguments[i].genericTypeSignature());
					}
				}
			}
			
			if(method.isBinary()) {
				res = new ParameterizedBinaryMethod(
						(JavaElement)res.getParent(),
						method.getElementName(),
						method.getParameterTypes(), 
						new String(methodBinding.declaringClass.genericTypeSignature()),
						genericSignature == null ? null : new String(genericSignature),
						typeArgumentsSignature);
			} else {
				res = new ParameterizedSourceMethod(
						(JavaElement)res.getParent(),
						method.getElementName(),
						method.getParameterTypes(), 
						new String(methodBinding.declaringClass.genericTypeSignature()),
						genericSignature == null ? null : new String(genericSignature),
						typeArgumentsSignature);
			}
		}
		addElement(res);
		if(SelectionEngine.DEBUG){
			System.out.print("SELECTION - accept method("); //$NON-NLS-1$
			System.out.print(res.toString());
			System.out.println(")"); //$NON-NLS-1$
		}
	}
}

