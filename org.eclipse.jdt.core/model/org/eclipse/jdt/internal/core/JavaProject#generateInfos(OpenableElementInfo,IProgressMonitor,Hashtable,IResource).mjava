	/**
	 * @see Openable
	 */
	protected boolean generateInfos(
		OpenableElementInfo info,
		IProgressMonitor pm,
		Hashtable newElements,
		IResource underlyingResource)
		throws JavaModelException {

		boolean validInfo = false;
		try {
			if (((IProject) getUnderlyingResource()).isOpen()) {
				// put the info now, because setting the classpath requires it
				fgJavaModelManager.putInfo(this, info);

				// read classpath property (contains actual classpath and output location settings)
				boolean needToSaveClasspath = false;
				IPath outputLocation = null;
				IClasspathEntry[] classpath = null;

				// read from file
				String sharedClasspath = loadClasspath();
				if (sharedClasspath != null) {
					try {
						classpath = readPaths(sharedClasspath);
					} catch (IOException e) {
					} catch (RuntimeException e) {
					}
					// extract out the output location
					if (classpath != null && classpath.length > 0) {
						IClasspathEntry entry = classpath[classpath.length - 1];
						if (entry.getContentKind() == ClasspathEntry.K_OUTPUT) {
							outputLocation = entry.getPath();
							IClasspathEntry[] copy = new IClasspathEntry[classpath.length - 1];
							System.arraycopy(classpath, 0, copy, 0, copy.length);
							classpath = copy;
						}
					}
				}
				// restore output location				
				if (outputLocation == null) {
					outputLocation = defaultOutputLocation();
					needToSaveClasspath = true;
				}
				setOutputLocation0(outputLocation);

				// restore classpath
				if (classpath == null) {
					classpath = defaultClasspath();
					needToSaveClasspath = true;
				}
				setRawClasspath0(classpath);

				// only valid if reaches here				
				validInfo = true;
			}
		} catch (JavaModelException e) {
		} finally {
			if (!validInfo)
				fgJavaModelManager.removeInfo(this);
		}
		return validInfo;
	}

