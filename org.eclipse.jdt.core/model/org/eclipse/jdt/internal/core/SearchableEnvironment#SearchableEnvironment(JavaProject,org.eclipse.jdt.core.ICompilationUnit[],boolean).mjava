	/**
	 * Creates a SearchableEnvironment on the given project
	 */
	public SearchableEnvironment(JavaProject project, org.eclipse.jdt.core.ICompilationUnit[] workingCopies, boolean excludeTestCode) throws JavaModelException {
		this.project = project;
		this.excludeTestCode = excludeTestCode;
		this.checkAccessRestrictions =
			!JavaCore.IGNORE.equals(project.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, true))
			|| !JavaCore.IGNORE.equals(project.getOption(JavaCore.COMPILER_PB_DISCOURAGED_REFERENCE, true));
		this.workingCopies = workingCopies;
		this.nameLookup = project.newNameLookup(workingCopies, excludeTestCode);
		if (CompilerOptions.versionToJdkLevel(project.getOption(JavaCore.COMPILER_COMPLIANCE, true)) >= ClassFileConstants.JDK9) {
			this.knownModuleLocations = new HashMap<>();
		}
		if (CompilerOptions.versionToJdkLevel(project.getOption(JavaCore.COMPILER_COMPLIANCE, true)) >= ClassFileConstants.JDK9) {
			this.moduleUpdater = new ModuleUpdater(project);
			if (!excludeTestCode) {
				IClasspathEntry[] expandedClasspath = project.getExpandedClasspath();
				if(Arrays.stream(expandedClasspath).anyMatch(e -> e.isTest())) {
					this.moduleUpdater.addReadUnnamedForNonEmptyClasspath(project, expandedClasspath);
				}
			}
			for (IClasspathEntry entry : project.getRawClasspath())
				if(!excludeTestCode || !entry.isTest())
					this.moduleUpdater.computeModuleUpdates(entry);
		}
	}

