private IBinaryType getJarBinaryTypeInfo() throws CoreException, IOException, ClassFormatException {
	BinaryTypeDescriptor descriptor = BinaryTypeFactory.createDescriptor(this);

	if (descriptor == null) {
		return null;
	}
	IBinaryType result = null;

	if (getPackageFragmentRoot() instanceof JarPackageFragmentRoot) {
		PackageFragment pkg = (PackageFragment) getParent();
		JarPackageFragmentRoot root = (JarPackageFragmentRoot) getPackageFragmentRoot();
		String entryName = Util.concatWith(pkg.names, getElementName(), '/');
		if (root instanceof JrtPackageFragmentRoot) {
			byte[] contents = getClassFileContent(root, entryName);
			if (contents != null) {
				String fileName;
				String rootPath = root.getPath().toOSString();
				if (org.eclipse.jdt.internal.compiler.util.Util.isJrt(rootPath)) {
					fileName = root.getHandleIdentifier() + IDependent.JAR_FILE_ENTRY_SEPARATOR + 
							root.getElementName() + IDependent.JAR_FILE_ENTRY_SEPARATOR + entryName;
				} else {
					fileName = root.getHandleIdentifier() + IDependent.JAR_FILE_ENTRY_SEPARATOR + entryName;
				}
				result = new ClassFileReader(contents, fileName.toCharArray(), false);
			}
		} else {
			result = BinaryTypeFactory.readType(descriptor, null);
		}

		// TODO(sxenos): setup the external annotation provider if the IBinaryType came from the index
		// TODO(sxenos): the old code always passed null as the third argument to setupExternalAnnotationProvider,
		// but this looks like a bug. I've preserved it for now but we need to figure out what was supposed to go
		// there.
		if (root.getKind() == IPackageFragmentRoot.K_BINARY) {
			JavaProject javaProject = (JavaProject) getAncestor(IJavaElement.JAVA_PROJECT);
			IClasspathEntry entry = javaProject.getClasspathEntryFor(getPath());
			if (entry != null) {
				entryName = new String(CharArrayUtils.concat(
						JavaNames.fieldDescriptorToBinaryName(descriptor.fieldDescriptor), SuffixConstants.SUFFIX_CLASS));
				IProject project = javaProject.getProject();
				IPath externalAnnotationPath = ClasspathEntry.getExternalAnnotationPath(entry, project, false); // unresolved for use in ExternalAnnotationTracker
				if (externalAnnotationPath != null) {
					result = setupExternalAnnotationProvider(project, externalAnnotationPath, null, result, 
						entryName.substring(0, entryName.length() - SuffixConstants.SUFFIX_CLASS.length));
				} else if (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) {
					result = new ExternalAnnotationDecorator(result, true);
				}
			}
		}
	}

	return result;
}

