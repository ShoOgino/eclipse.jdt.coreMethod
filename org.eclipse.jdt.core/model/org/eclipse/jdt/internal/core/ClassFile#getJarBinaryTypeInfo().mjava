private IBinaryType getJarBinaryTypeInfo() throws CoreException, IOException, ClassFormatException {
	BinaryTypeDescriptor descriptor = BinaryTypeFactory.createDescriptor(this);

	if (descriptor == null) {
		return null;
	}

	IBinaryType result = BinaryTypeFactory.readType(descriptor, null);

	if (result == null) {
		return null;
	}

	// TODO(sxenos): setup the external annotation provider if the IBinaryType came from the index
	PackageFragment pkg = (PackageFragment) getParent();
	IJavaElement grandparent = pkg.getParent();
	if (grandparent instanceof JarPackageFragmentRoot) {
		JarPackageFragmentRoot root = (JarPackageFragmentRoot) grandparent;

		if (root.getKind() == IPackageFragmentRoot.K_BINARY) {
			JavaProject javaProject = (JavaProject) getAncestor(IJavaElement.JAVA_PROJECT);
			IClasspathEntry entry = javaProject.getClasspathEntryFor(getPath());
			if (entry != null) {
				String entryName = new String(CharArrayUtils.concat(
						JavaNames.fieldDescriptorToBinaryName(descriptor.fieldDescriptor), SuffixConstants.SUFFIX_CLASS));
				IProject project = javaProject.getProject();
				IPath externalAnnotationPath = ClasspathEntry.getExternalAnnotationPath(entry, project, false); // unresolved for use in ExternalAnnotationTracker
				if (externalAnnotationPath != null) {
					result = setupExternalAnnotationProvider(project, externalAnnotationPath, result, 
						entryName.substring(0, entryName.length() - SuffixConstants.SUFFIX_CLASS.length));
				} else if (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) {
					result = new ExternalAnnotationDecorator(result, true);
				}
			}
		}
	}

	return result;
}

