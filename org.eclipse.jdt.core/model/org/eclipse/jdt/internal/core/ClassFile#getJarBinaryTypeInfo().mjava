private IBinaryType getJarBinaryTypeInfo() throws CoreException, IOException, ClassFormatException {
	BinaryTypeDescriptor descriptor = BinaryTypeFactory.createDescriptor(this);

	if (descriptor == null) {
		return null;
	}
	IBinaryType result = null;
	IPackageFragmentRoot root = getPackageFragmentRoot();
	if (root instanceof JarPackageFragmentRoot) {
		if (root instanceof JrtPackageFragmentRoot || this.name.equals(IModule.MODULE_INFO)) {
			PackageFragment pkg = (PackageFragment) getParent();
			JarPackageFragmentRoot jarRoot = (JarPackageFragmentRoot) root;
			String entryName = jarRoot.getClassFilePath(Util.concatWith(pkg.names, getElementName(), '/'));
			byte[] contents = getClassFileContent(jarRoot, entryName);
			if (contents != null) {
				String fileName;
				char[] mod = null;
				String rootIdentifier = root.getHandleIdentifier();
				if (root instanceof JrtPackageFragmentRoot) {
					int slash = rootIdentifier.lastIndexOf('/');
					if (slash != -1) {
						StringBuilder extract = new StringBuilder();
						extract.append(rootIdentifier.substring(0, slash));
						int modStart = rootIdentifier.indexOf(JavaElement.JEM_MODULE);
						if (modStart != -1)
							extract.append(rootIdentifier.substring(modStart));
						rootIdentifier = extract.toString();
					}
				}
				fileName = rootIdentifier + IDependent.JAR_FILE_ENTRY_SEPARATOR + entryName;
				ClassFileReader reader = new ClassFileReader(contents, fileName.toCharArray(), false);
				reader.moduleName = mod;
				result = reader;
			}
		} else {
			result = BinaryTypeFactory.readType(descriptor, null);
		}
	} else {
		result = BinaryTypeFactory.readType(descriptor, null);
	}
		
	if (result == null) {
		return null;
	}

	// TODO(sxenos): setup the external annotation provider if the IBinaryType came from the index
	if (root.getKind() == IPackageFragmentRoot.K_BINARY) {
		JavaProject javaProject = (JavaProject) getAncestor(IJavaElement.JAVA_PROJECT);
		IClasspathEntry entry = javaProject.getClasspathEntryFor(getPath());
		if (entry != null) {
			PackageFragment pkg = (PackageFragment) getParent();
			String entryName = Util.concatWith(pkg.names, getElementName(), '/');
			entryName = new String(CharArrayUtils.concat(
					JavaNames.fieldDescriptorToBinaryName(descriptor.fieldDescriptor), SuffixConstants.SUFFIX_CLASS));
			IProject project = javaProject.getProject();
			IPath externalAnnotationPath = ClasspathEntry.getExternalAnnotationPath(entry, project, false); // unresolved for use in ExternalAnnotationTracker
			if (externalAnnotationPath != null) {
				result = setupExternalAnnotationProvider(project, externalAnnotationPath, result, 
						entryName.substring(0, entryName.length() - SuffixConstants.SUFFIX_CLASS.length));
			} else if (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) {
				result = new ExternalAnnotationDecorator(result, true);
			}
		}
	}

	return result;
}

