/**
 * Computes the build order of the Java Projects in this Java Model.
 * The order is computed by following the class path of the projects.
 * Prerequesite projects appear first in the list, dependent projects
 * appear last.
 * If specified, reports an error against a project using a marker if a cycle
 * is detected. Otherwise throws a JavaModelException.
 */
public String[] computeBuildOrder(boolean generateMarkerOnError) throws JavaModelException {
	// Remove markers indicating cycle
	if (generateMarkerOnError) {
		this.cleanupCycleMarkers();
	}

	// Compute depth of each project and detect cycle
	StringHashtableOfInt depthTable = new StringHashtableOfInt();
	IJavaProject[] projects = getJavaProjects();
	int length = projects.length;
	int maxDepth = -1;
	for (int i = 0; i < length; i++) {
		String projectName = projects[i].getElementName();
		maxDepth = 
			Math.max(
				maxDepth, 
				this.computeDepth(projectName, depthTable, projectName, generateMarkerOnError));
	}

	// Sort projects by depth
	return depthTable.sortedKeys(maxDepth);	
}

