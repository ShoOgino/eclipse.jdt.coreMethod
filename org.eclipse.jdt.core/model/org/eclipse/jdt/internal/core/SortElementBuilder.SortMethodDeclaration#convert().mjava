		ASTNode convert() {
			MethodDeclaration methodDeclaration = ast.newMethodDeclaration();
			methodDeclaration.setConstructor(false);
			methodDeclaration.setModifiers(this.modifiers);
			methodDeclaration.setName(ast.newSimpleName(new String(this.name)));
			methodDeclaration.setProperty(CompilationUnitSorter.SOURCE_START, new Integer(this.sourceStart));
			// set parameter names and types
			if (this.parametersNames != null) {
				setParameters(methodDeclaration, this.parametersNames, this.parametersTypes);
			}
			// set thrown exceptions
			if (this.thrownExceptions != null) {
				for (int j = 0, max2 = this.thrownExceptions.length; j < max2; j++) {
					String currentException = this.thrownExceptions[j];
					Name exceptionName;
					if (currentException.indexOf('.') == -1) {
						exceptionName = ast.newSimpleName(currentException);
					} else {
						exceptionName = ast.newName(splitOn('.', currentException));
					}
					methodDeclaration.thrownExceptions().add(exceptionName);
				}
			}
			// set return type
			int indexOfArrayBrace;
			String currentReturnType = this.returnType;
			if (currentReturnType.indexOf('.') != -1) {
				String[] returnTypeSubstrings = splitOn('.', currentReturnType);
				int length = returnTypeSubstrings.length;
				indexOfArrayBrace = returnTypeSubstrings[length - 1].indexOf('[');
				if (indexOfArrayBrace != -1) {
					int dimensions = occurencesOf('[', returnTypeSubstrings[length - 1]);
					returnTypeSubstrings[length - 1] = returnTypeSubstrings[length - 1].substring(0, indexOfArrayBrace);
					methodDeclaration.setReturnType(ast.newArrayType(ast.newSimpleType(ast.newName(returnTypeSubstrings)), dimensions));
				} else {
					methodDeclaration.setReturnType(ast.newSimpleType(ast.newName(returnTypeSubstrings)));
				}
			} else if ((indexOfArrayBrace = currentReturnType.indexOf('[')) != -1) {
				int dimensions = occurencesOf('[', currentReturnType);
				currentReturnType = currentReturnType.substring(0, indexOfArrayBrace);
				methodDeclaration.setReturnType(ast.newArrayType(newType(currentReturnType), dimensions));
			} else {
				methodDeclaration.setReturnType(newType(currentReturnType));
			}
			return methodDeclaration;				
		}

