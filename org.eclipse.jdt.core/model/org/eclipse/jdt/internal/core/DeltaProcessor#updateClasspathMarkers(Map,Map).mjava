	/*
	 * Update the classpath markers and cycle markers for the projects to update.
	 */
	private void updateClasspathMarkers(Map preferredClasspaths, Map preferredOutputs) {
		
		if (!this.rootsToRefresh.isEmpty()) {
			try {
				if (!ResourcesPlugin.getWorkspace().isAutoBuilding()) {
					IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();
					IProject[] projects = workspaceRoot.getProjects();
					int length = projects.length;
					for (int i = 0; i < length; i++){
						IProject project = projects[i];
						JavaProject javaProject = (JavaProject)JavaCore.create(project);
						if (preferredClasspaths.get(javaProject) == null) { // not already updated
							try {
								IClasspathEntry[] classpath = javaProject.getResolvedClasspath(true); // allowed to reuse model cache
								for (int j = 0, cpLength = classpath.length; j < cpLength; j++) {
									IClasspathEntry entry = classpath[j];
									if (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT && this.rootsToRefresh.contains(entry.getPath())) {
										javaProject.updateClasspathMarkers(null, null);
									}
								}
							} catch(JavaModelException e) {
									// project no longer exists
							}
						}
					}
				}
				// update all cycle markers
				JavaProject.updateAllCycleMarkers(preferredClasspaths);
			} catch(JavaModelException e) {
					// project no longer exists
			} finally {
				this.rootsToRefresh = new HashSet();
			}
		}
	}

