/**
 * Opens and returns buffer on the source code associated with this class file.
 * Maps the source code to the children elements of this class file.
 * If no source code is associated with this class file, 
 * <code>null</code> is returned.
 * 
 * @see Openable
 */
protected IBuffer openBuffer(IProgressMonitor pm, Object info) throws JavaModelException {
	SourceMapper mapper = getSourceMapper();
	if (mapper != null) {
		return mapSource(mapper);
	} else if (!this.checkAutomaticSourceMapping) {
		/*
		 * We try to see if we can automatically attach a source
		 * source files located inside the same folder than its .class file
		 * See bug 36510.
		 */
		PackageFragmentRoot root = getPackageFragmentRoot();
		if (root.isArchive()) {
			// root is a jar file or a zip file
			String elementName = getElementName();
			String sourceFileWithoutExtension = elementName.substring(0, elementName.lastIndexOf('.'));
			JarPackageFragmentRoot jarPackageFragmentRoot = (JarPackageFragmentRoot) root;
			ZipFile jar = null;
			try {
				jar = jarPackageFragmentRoot.getJar();
				String[] pkgName = ((PackageFragment) getParent()).names;
				for (int i = 0, length = Util.JAVA_LIKE_EXTENSIONS.length; i < length; i++) {
					StringBuffer entryName = new StringBuffer();
					for (int j = 0, pkgNameLength = pkgName.length; j < pkgNameLength; j++) {
						entryName.append(pkgName[j]);
						entryName.append('/');
					}
					entryName.append(sourceFileWithoutExtension);
					entryName.append(Util.JAVA_LIKE_EXTENSIONS[i]);
					ZipEntry zipEntry = jar.getEntry(entryName.toString());
					if (zipEntry != null) {
						// found a source file
						this.checkAutomaticSourceMapping = true;
						root.attachSource(root.getPath(), null, null);
						SourceMapper sourceMapper = getSourceMapper();
						if (sourceMapper != null) {
							return mapSource(sourceMapper);
						}
					}
				}
			} catch (CoreException e) {
				if (e instanceof JavaModelException) throw (JavaModelException)e;
				throw new JavaModelException(e);
			} finally {
				JavaModelManager.getJavaModelManager().closeZipFile(jar);
			}
		} else {
			// Attempts to find the corresponding java file
			String qualifiedName = getType().getFullyQualifiedName();
			NameLookup lookup = ((JavaProject) getJavaProject()).newNameLookup(DefaultWorkingCopyOwner.PRIMARY);
			ICompilationUnit cu = lookup.findCompilationUnit(qualifiedName);
			if (cu != null) {
				return cu.getBuffer();
			} else	{
				// root is a class folder
				
				IContainer pkgFolder = (IContainer) getParent().getResource();
				IResource[] files = null;
				try {
					files = pkgFolder.members();
				} catch (CoreException e) {
					throw new JavaModelException(e);
				}
				IResource sourceFile = null;
				String classFileName = getElementName();
				String simpleName = classFileName.substring(0, classFileName.lastIndexOf('.'));
				for (int i = 0, length = files.length; i < length; i++) {
					IResource resource = files[i];
					if (resource.getType() == IResource.FILE 
							&& Util.equalsIgnoreJavaLikeExtension(resource.getName(), simpleName)) {
						sourceFile = resource;
						break;
					}
				}
				if (sourceFile != null) {
							
					// found a source file
					 // we don't need to check again. The source will be attached.
					this.checkAutomaticSourceMapping = true;
					root.attachSource(root.getPath(), null, null);
					SourceMapper sourceMapper = getSourceMapper();
					if (sourceMapper != null) {
						return mapSource(sourceMapper);
					}
				}
			}
		}
	}
	return null;
}

