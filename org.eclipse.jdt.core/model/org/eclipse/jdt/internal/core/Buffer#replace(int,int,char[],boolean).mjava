/**
 * Replaces <code>length</code> characters starting from <code>position</code> with <code>text<code>.
 * After that operation, the gap is placed at the end of the 
 * inserted <code>text</code>.
 */
public void replace(int position, int length, char[] text, boolean convert) {
	if (!isReadOnly()) {
		if (text == null) {
			text = new char[0];
		} else {
			if (convert) text = this.normalizeCRs(text);
		}
		synchronized (fLock) {
			// move gap
			adjustGap(position + length, text.length - length);

			// overwrite
			int min = Math.min(text.length, length);
			for (int i = position, j = 0; i < position + min; i++, j++)
				fContents[i] = text[j];
			if (length > text.length) {
				// enlarge the gap
				fGapStart -= (length - text.length);
			} else
				if (text.length > length) {
					// shrink gap
					fGapStart += (text.length - length);
					for (int i = length; i < text.length; i++)
						fContents[position + i] = text[i];
				}
		}
		fFlags |= F_HAS_UNSAVED_CHANGES;
		String string = null;
		if (text.length > 0) {
			string = new String(text);
		}
		notifyChanged(new BufferChangedEvent(this, position, length, string));
	}
}

