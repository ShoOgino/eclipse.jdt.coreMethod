	/*
	 * We don't use getContentEncoding() on the URL connection, because it might leave open streams behind.
	 * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=117890 
	 * 
	 */
	protected String getURLContents(String docUrlValue, String defaultEncoding) throws JavaModelException {
		InputStream stream = null;
		try {
			String encoding = defaultEncoding;
			try {
				if (encoding == null) {
					encoding = this.getJavaProject().getProject().getDefaultCharset();
				}
			} catch (CoreException e) {
				// ignore
			}
			// long time = System.currentTimeMillis();
			URL docUrl = new URL(docUrlValue);
			URLConnection connection = docUrl.openConnection();
			// System.out.println("Time spent " + (System.currentTimeMillis() - time) + "ms for opening connection for " + docUrlValue); //$NON-NLS-1$//$NON-NLS-2$
			// time = System.currentTimeMillis();
			if ("jar".equals(docUrl.getProtocol())) { //$NON-NLS-1$
				// if jar protocol is using a cache, some file descriptors are left behind and the resource cannot be deleted
				connection.setUseCaches(false);
			}
			stream = new BufferedInputStream(connection.getInputStream());
			// System.out.println("Time spent " + (System.currentTimeMillis() - time) + "ms for getting stream for " + docUrlValue); //$NON-NLS-1$//$NON-NLS-2$
			// time = System.currentTimeMillis();
			char[] contents = org.eclipse.jdt.internal.compiler.util.Util.getInputStreamAsCharArray(stream, -1, encoding);
			// System.out.println("Time spent " + (System.currentTimeMillis() - time) + "ms for reading stream for " + docUrlValue); //$NON-NLS-1$//$NON-NLS-2$
			if (contents != null) {
				// System.out.println("Size = " + (contents.length / 1024) + "kb");//$NON-NLS-1$//$NON-NLS-2$
				return String.valueOf(contents);
			}
 		} catch (MalformedURLException e) {
 			throw new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.CANNOT_RETRIEVE_ATTACHED_JAVADOC, this));
		} catch (FileNotFoundException e) {
			// ignore. see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=120559
		} catch(IOException e) {
			throw new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.CANNOT_RETRIEVE_ATTACHED_JAVADOC, this));
		} finally {
			if (stream != null) {
				try {
					stream.close();
				} catch (IOException e) {
					// ignore
				}
			}
		}
		return null;
	}

