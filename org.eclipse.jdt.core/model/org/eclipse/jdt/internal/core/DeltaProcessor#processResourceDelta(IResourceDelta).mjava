	/**
	 * Converts a <code>IResourceDelta</code> rooted in a <code>Workspace</code> into
	 * the corresponding set of <code>IJavaElementDelta</code>, rooted in the
	 * relevant <code>JavaModel</code>s.
	 */
	public IJavaElementDelta[] processResourceDelta(IResourceDelta changes) {

		try {
			this.initializeRoots();
			this.currentElement = null;
			
			// get the workspace delta, and start processing there.
			IResourceDelta[] deltas = changes.getAffectedChildren();
			IJavaElementDelta[] translatedDeltas = new JavaElementDelta[deltas.length];
			for (int i = 0; i < deltas.length; i++) {
				IResourceDelta delta = deltas[i];
				IResource res = delta.getResource();
				JavaModel model = JavaModelManager.getJavaModel(res.getWorkspace());
				if (model != null) {
					fCurrentDelta = new JavaElementDelta(model);
					
					// find out whether the delta is a package fragment root
					IJavaProject projectOfRoot = (IJavaProject)this.roots.get(res.getFullPath());
					boolean isPkgFragmentRoot = projectOfRoot != null;
					int elementType = this.elementType(delta, IJavaElement.JAVA_MODEL, isPkgFragmentRoot);
					
					traverseDelta(delta, elementType, projectOfRoot); // traverse delta
					translatedDeltas[i] = fCurrentDelta;
				}
			}
			
			// update package fragment roots of projects that were affected
			Iterator iterator = this.projectsToUpdate.iterator();
			while (iterator.hasNext()) {
				JavaProject project = (JavaProject)iterator.next();
				project.updatePackageFragmentRoots();
			}
	
			return filterRealDeltas(translatedDeltas);
		} finally {
			this.projectsToUpdate = new HashSet();
		}
	}

