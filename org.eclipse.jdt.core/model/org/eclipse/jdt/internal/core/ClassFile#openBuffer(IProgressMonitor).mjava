/**
 * Opens and returns buffer on the source code associated with this class file.
 * Maps the source code to the children elements of this class file.
 * If no source code is associated with this class file, 
 * <code>null</code> is returned.
 * 
 * @see Openable
 */
protected IBuffer openBuffer(IProgressMonitor pm) throws JavaModelException {
	SourceMapper mapper = getSourceMapper();
	if (mapper != null) {
		return mapSource(mapper);
	} else if (!checkAutomaticSourceMapping) {
		/*
		 * We try to see if we can automatically attach a source
		 * source files located inside the same folder than its .class file
		 * See bug 36510.
		 */
		PackageFragmentRoot root = getPackageFragmentRoot();
		if (root.isArchive()) {
			// root is a jar file or a zip file
			String elementName = getElementName();
			StringBuffer sourceFileName = new StringBuffer(elementName.substring(0, elementName.lastIndexOf('.')));
			sourceFileName.append(Util.SUFFIX_java);
			JarPackageFragmentRoot jarPackageFragmentRoot = (JarPackageFragmentRoot) root;
			ZipFile jar = null;
			try {
				jar = jarPackageFragmentRoot.getJar();
				IPackageFragment packageFragment = (IPackageFragment) getParent();
				ZipEntry zipEntry = null;
				if (packageFragment.isDefaultPackage()) {
					zipEntry = jar.getEntry(sourceFileName.toString());
				} else {
					zipEntry = jar.getEntry(getParent().getElementName() + '/' + sourceFileName.toString());
				}
				if (zipEntry != null) {
					// found a source file
					checkAutomaticSourceMapping = true;
					root.attachSource(root.getPath(), null, null);
					SourceMapper sourceMapper = getSourceMapper();
					if (sourceMapper != null) {
						return mapSource(sourceMapper);
					}
				}
			} catch (CoreException e) {
				if (e instanceof JavaModelException) throw (JavaModelException)e;
				throw new JavaModelException(e);
			} finally {
				JavaModelManager.getJavaModelManager().closeZipFile(jar);
			}
		} else {
			// Attempts to find the corresponding java file
			String qualifiedName = getType().getFullyQualifiedName();
			NameLookup lookup = ((JavaProject) getJavaProject()).getNameLookup();
			ICompilationUnit cu = lookup.findCompilationUnit(qualifiedName);
			if (cu != null) {
				return cu.getBuffer();
			} else	{
				// root is a class folder
				IPath sourceFilePath = getPath().removeFileExtension().addFileExtension("java");
				IWorkspace workspace = ResourcesPlugin.getWorkspace();
				if (workspace == null) {
					checkAutomaticSourceMapping = true; // we don't want to check again
					return null; // workaround for http://bugs.eclipse.org/bugs/show_bug.cgi?id=34069
				}
				if (JavaModel.getTarget(
						workspace.getRoot(),
						sourceFilePath.makeRelative(), // ensure path is relative (see http://dev.eclipse.org/bugs/show_bug.cgi?id=22517)
						true) != null) {
							
					// found a source file
					 // we don't need to check again. The source will be attached.
					checkAutomaticSourceMapping = true;
					root.attachSource(root.getPath(), null, null);
					SourceMapper sourceMapper = getSourceMapper();
					if (sourceMapper != null) {
						return mapSource(sourceMapper);
					}
				}
			}
		}
	}
	return null;
}

