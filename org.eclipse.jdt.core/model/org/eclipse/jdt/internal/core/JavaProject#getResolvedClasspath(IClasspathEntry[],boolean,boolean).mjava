	/**
	 * Internal variant which can process any arbitrary classpath
	 */
	public IClasspathEntry[] getResolvedClasspath(
		IClasspathEntry[] classpathEntries,
		boolean ignoreUnresolvedEntry,
		boolean generateMarkerOnError)
		throws JavaModelException {

		if (generateMarkerOnError){
			flushClasspathProblemMarkers(false);
		}

		int length = classpathEntries.length;
		int index = 0;
		ArrayList resolvedEntries = new ArrayList();
		
		for (int i = 0; i < length; i++) {

			IClasspathEntry rawEntry = classpathEntries[i];

			/* validation if needed */
			if (generateMarkerOnError) {
				IJavaModelStatus status =
					JavaConventions.validateClasspathEntry(this, rawEntry, false);
				if (!status.isOK())
					createClasspathProblemMarker(
						status.getMessage(), 
						IMarker.SEVERITY_ERROR,
						false);
			}

			switch (rawEntry.getEntryKind()){
				
				case IClasspathEntry.CPE_VARIABLE :
				
					IClasspathEntry resolvedEntry = JavaCore.getResolvedClasspathEntry(rawEntry);
					if (resolvedEntry == null) {
						if (!ignoreUnresolvedEntry) {
							throw new JavaModelException(
								new JavaModelStatus(
									IJavaModelStatusConstants.CP_VARIABLE_PATH_UNBOUND,
									rawEntry.getPath().toString()));
						}
					} else {
						resolvedEntries.add(resolvedEntry);
					}
					break; 

				case IClasspathEntry.CPE_CONTAINER :
				
					IClasspathEntry[] containerEntries = getResolvedClasspathContainer(rawEntry.getPath());
					if (containerEntries == null){
						// unbound container
						if (!ignoreUnresolvedEntry) {
							throw new JavaModelException(
								new JavaModelStatus(
									IJavaModelStatusConstants.CP_CONTAINER_PATH_UNBOUND,
									rawEntry.getPath().toString()));
						}
					} else {
						// container was bound, container entries could be variables
						for (int j = 0, containerLength = containerEntries.length; j < containerLength; j++){
							IClasspathEntry containerRawEntry = containerEntries[j];
							
							if (generateMarkerOnError) {
								IJavaModelStatus status =
									JavaConventions.validateClasspathEntry(this, containerRawEntry, false);
								if (!status.isOK())
									createClasspathProblemMarker(
										status.getMessage(), 
										IMarker.SEVERITY_ERROR,
										false);
							}
							
							// container entry is variable ?
							if (containerRawEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE){
								resolvedEntry = JavaCore.getResolvedClasspathEntry(containerRawEntry);
								if (resolvedEntry == null) {
									if (!ignoreUnresolvedEntry) {
										throw new JavaModelException(
											new JavaModelStatus(
												IJavaModelStatusConstants.CP_VARIABLE_PATH_UNBOUND,
												containerRawEntry.getPath().toString()));
									}
								} else {
									resolvedEntries.add(resolvedEntry);
								}
							} else {
								resolvedEntries.add(containerRawEntry);
							}
						}
					}
					break;
										
				default :

					resolvedEntries.add(rawEntry);
				
			}					
		}

		IClasspathEntry[] resolvedPath = new IClasspathEntry[resolvedEntries.size()];
		resolvedEntries.toArray(resolvedPath);

		return resolvedPath;
	}

