public String getJavadocContents(IProgressMonitor monitor, String defaultEncoding) throws JavaModelException {
	PerProjectInfo projectInfo = JavaModelManager.getJavaModelManager().getPerProjectInfoCheckExistence(this.getJavaProject().getProject());
	if (projectInfo.javadocCache != null) {
		final String cachedJavadoc = (String) projectInfo.javadocCache.get(this);
		if (cachedJavadoc != null) {
			return cachedJavadoc;
		}
	} else {
		projectInfo.javadocCache = new HashMap();
	}
		
		
	URL baseLocation= getJavadocBaseLocation();
	if (baseLocation == null) {
		return null;
	}
	StringBuffer pathBuffer = new StringBuffer(baseLocation.toExternalForm());

	if (!(pathBuffer.charAt(pathBuffer.length() - 1) == '/')) {
		pathBuffer.append('/');
	}
	IPackageFragment pack= this.getPackageFragment();
	String typeQualifiedName = this.getTypeQualifiedName('.');
	typeQualifiedName = typeQualifiedName.replace('$', '.');
	pathBuffer.append(pack.getElementName().replace('.', '/')).append('/').append(typeQualifiedName).append(JavadocConstants.HTML_EXTENSION);
	
	if (monitor != null && monitor.isCanceled()) throw new OperationCanceledException();
	final String contents = getURLContents(String.valueOf(pathBuffer), defaultEncoding);
	projectInfo.javadocCache.put(this, contents);
	return contents;
}

