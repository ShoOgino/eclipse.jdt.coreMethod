	/**
	 * Creates the handles and infos for the methods of the given binary type.
	 * Adds new handles to the given vector.
	 */
	private void generateMethodInfos(
		IType type,
		IBinaryType typeInfo,
		Hashtable newElements,
		Vector children) {
		IBinaryMethod[] methods = typeInfo.getMethods();
		if (methods == null) {
			return;
		}
		for (int i = 0, methodCount = methods.length; i < methodCount; i++) {
			IBinaryMethod methodInfo = methods[i];
			String[] pNames =
				Signature.getParameterTypes(new String(methodInfo.getMethodDescriptor()));
			char[][] paramNames = new char[pNames.length][];
			for (int j = 0; j < pNames.length; j++) {
				paramNames[j] = pNames[j].toCharArray();
			}
			char[][] parameterTypes = ClassFile.translatedNames(paramNames);
			String selector = new String(methodInfo.getSelector());
			if (methodInfo.isConstructor()) {
				selector = type.getElementName();
			}
			for (int j = 0; j < pNames.length; j++) {
				pNames[j] = new String(parameterTypes[j]);
			}
			IMethod method = new BinaryMethod(type, selector, pNames);
			children.addElement(method);
			newElements.put(method, methodInfo);
		}
	}

