	static IAccessRule[] decodeAccessRules(Element element) {
		Node accessRules = element.getElementsByTagName(TAG_ACCESS_RULES).item(0);
		if (accessRules == null || accessRules.getNodeType() != Node.ELEMENT_NODE) return null;
		NodeList list = ((Element) accessRules).getElementsByTagName(TAG_ACCESS_RULE);
		int length = list.getLength();
		if (length == 0) return null;
		IAccessRule[] result = new IAccessRule[length];
		int index = 0;
		for (int i = 0; i < length; i++) {
			Node accessRule = list.item(i);
			if (accessRule == null || accessRule.getNodeType() != Node.ELEMENT_NODE) return null;
			Element elementAccessRule = (Element) accessRule;
			String pattern = elementAccessRule.getAttribute(TAG_PATTERN);
			if (pattern == null) continue;
			String tagKind =  elementAccessRule.getAttribute(TAG_KIND);
			int kind;
			if (TAG_ACCESSIBLE.equals(tagKind))
				kind = IAccessRule.K_ACCESSIBLE;
			else if (TAG_NON_ACCESSIBLE.equals(tagKind))
				kind = IAccessRule.K_NON_ACCESSIBLE;
			else if (TAG_DISCOURAGED.equals(tagKind))
				kind = IAccessRule.K_DISCOURAGED;
			else
				continue;
			result[index++] = new ClasspathAccessRule(new Path(pattern), kind);
		}
		if (index != length)
			System.arraycopy(result, 0, result = new IAccessRule[index], 0, index);
		return result;
	}

