/**
 * Compute the non-java resources of this package fragment.
 *
 * <p>Package fragments which are folders recognize files based on the
 * type of the fragment
 * <p>Package fragments which are in a jar only recognize .class files (
 * @see JarPackageFragment).
 */
private Object[] computeNonJavaResources(IResource resource) {
	Object[] nonJavaResources = new IResource[5];
	int nonJavaResourcesCounter = 0;
	try{
		IResource[] members = ((IContainer) resource).members();
		for (int i = 0, max = members.length; i < max; i++) {
			IResource child = members[i];
			if (child.getType() != IResource.FOLDER) {
				String fileName = child.getName();
				if (!Util.isValidCompilationUnitName(fileName) && !Util.isValidClassFileName(fileName)) {
					if (nonJavaResources.length == nonJavaResourcesCounter) {
						// resize
						System.arraycopy(
							nonJavaResources,
							0,
							(nonJavaResources = new IResource[nonJavaResourcesCounter * 2]),
							0,
							nonJavaResourcesCounter);
					}
					nonJavaResources[nonJavaResourcesCounter++] = child;
				}
			}
		}
		if (nonJavaResourcesCounter == 0) {
			nonJavaResources = NO_NON_JAVA_RESOURCES;
		} else {
			if (nonJavaResources.length != nonJavaResourcesCounter) {
				System.arraycopy(nonJavaResources, 0, (nonJavaResources = new IResource[nonJavaResourcesCounter]), 0, nonJavaResourcesCounter);
			}
		}	
	} catch(CoreException e) {
		nonJavaResources = NO_NON_JAVA_RESOURCES;
		nonJavaResourcesCounter = 0;
	}
	return nonJavaResources;
}

