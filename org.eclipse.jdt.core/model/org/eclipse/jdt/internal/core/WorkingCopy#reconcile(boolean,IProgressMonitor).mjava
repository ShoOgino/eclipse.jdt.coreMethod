/**
 * @see IWorkingCopy
 */ 
public void reconcile(boolean forceProblemDetection, IProgressMonitor monitor) throws JavaModelException {

	if (this.useCount == 0) throw newNotPresentException(); //was destroyed
	
	if (monitor != null){
		if (monitor.isCanceled()) return;
		monitor.beginTask(Util.bind("element.reconciling"), 10); //$NON-NLS-1$
	}

	boolean wasConsistent = isConsistent();
	JavaElementDeltaBuilder deltaBuilder = null;

	try {
		// create the delta builder (this remembers the current content of the cu)
		if (!wasConsistent){
			deltaBuilder = new JavaElementDeltaBuilder(this);
			
			// update the element infos with the content of the working copy
			this.makeConsistent(monitor);
			deltaBuilder.buildDeltas();
	
		}

		if (monitor != null) monitor.worked(2);
		
		// force problem detection? - if structure was consistent
		if (forceProblemDetection && wasConsistent){
			if (monitor != null && monitor.isCanceled()) return;
	
			IProblemRequestor problemRequestor = this.getProblemRequestor();
			if (problemRequestor != null && problemRequestor.isActive()){
				problemRequestor.beginReporting();
				CompilationUnitProblemFinder.resolve(this, problemRequestor, monitor);
				problemRequestor.endReporting();
			}
		}
		
		// fire the deltas
		if (deltaBuilder != null){
			if ((deltaBuilder.delta != null) && (deltaBuilder.delta.getAffectedChildren().length > 0)) {
				JavaModelManager.getJavaModelManager().
					fire(deltaBuilder.delta, ElementChangedEvent.POST_RECONCILE);
			}
		}
	} finally {
		if (monitor != null) monitor.done();
	}
}

