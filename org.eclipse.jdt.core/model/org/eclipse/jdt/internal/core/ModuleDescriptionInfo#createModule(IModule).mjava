	public static ModuleDescriptionInfo createModule(IModule module) {
		ModuleDescriptionInfo mod = new ModuleDescriptionInfo();
		mod.name = module.name();
		if (module.requires().length > 0) {
			IModuleReference[] refs = module.requires();
			mod.requires = new ModuleReferenceInfo[refs.length];
			for (int i = 0; i < refs.length; i++) {
				mod.requires[i] = new ModuleReferenceInfo();
				mod.requires[i].name = refs[i].name(); // Check why ModuleReference#tokens must be a char[][] and not a char[] or String;
				mod.requires[i].modifiers = refs[i].getModifiers();
			}
		} else {
			mod.requires = NO_REQUIRES;
		}
		if (module.exports().length > 0) {
			IPackageExport[] refs = module.exports();
			mod.exports = new PackageExportInfo[refs.length];
			for (int i = 0; i < refs.length; i++) {
				PackageExportInfo exp = createPackageExport(refs[i]);
				mod.exports[i] = exp;
			}
		} else {
			mod.exports = NO_EXPORTS;
		}
		if (module.uses().length > 0) {
			char[][] uses = module.uses();
			mod.usedServices = new char[uses.length][];
			for (int i = 0; i < uses.length; i++) {
				mod.usedServices[i] = uses[i];
			}
		} else {
			mod.usedServices = NO_USES;
		}
		if (module.provides().length > 0) {
			IService[] provides = module.provides();
			mod.services = new ServiceInfo[provides.length];
			for (int i = 0; i < provides.length; i++) {
				mod.services[i] = createService(provides[i]);
			}
		} else {
			mod.services = NO_PROVIDES;
		}
		if (module.opens().length > 0) {
			IPackageExport[] opens = module.opens();
			mod.opens = new PackageExportInfo[opens.length];
			for (int i = 0; i < opens.length; i++) {
				PackageExportInfo op = createOpensInfo(opens[i]);
				mod.opens[i] = op;
			}
		} else {
			mod.opens = NO_OPENS;
		}
		return mod;
	}

