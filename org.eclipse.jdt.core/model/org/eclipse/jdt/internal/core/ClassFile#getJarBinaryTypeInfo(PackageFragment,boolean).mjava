private IBinaryType getJarBinaryTypeInfo(PackageFragment pkg, boolean fullyInitialize) throws CoreException, IOException, ClassFormatException {
	JarPackageFragmentRoot root = (JarPackageFragmentRoot) pkg.getParent();
	ZipFile annotationZip = null;
	try {
		String entryName = Util.concatWith(pkg.names, getElementName(), '/');
		byte[] contents = getClassFileContent(root, entryName);
		if (contents != null) {
			String fileName;
			if (root.isModule()) {
				fileName = root.getHandleIdentifier() + IDependent.JAR_FILE_ENTRY_SEPARATOR + 
						root.getElementName() + IDependent.JAR_FILE_ENTRY_SEPARATOR + entryName;
			} else {
				fileName = root.getHandleIdentifier() + IDependent.JAR_FILE_ENTRY_SEPARATOR + entryName;
			}
			ClassFileReader reader = new ClassFileReader(contents, fileName.toCharArray(), fullyInitialize);
			if (root.getKind() == IPackageFragmentRoot.K_BINARY) {
				JavaProject javaProject = (JavaProject) getAncestor(IJavaElement.JAVA_PROJECT);
				IClasspathEntry entry = javaProject.getClasspathEntryFor(getPath());
				if (entry != null) {
					IProject project = javaProject.getProject();
					IPath externalAnnotationPath = ClasspathEntry.getExternalAnnotationPath(entry, project, false);
					if (externalAnnotationPath != null)
						setupExternalAnnotationProvider(project, externalAnnotationPath, annotationZip, reader, 
								entryName.substring(0, entryName.length() - SuffixConstants.SUFFIX_CLASS.length));
				}
			} 
			return reader;
		}
	} finally {
		JavaModelManager.getJavaModelManager().closeZipFile(annotationZip);
	}
	return null;
}

