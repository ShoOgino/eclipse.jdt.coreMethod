private IBinaryType getJarBinaryTypeInfo(PackageFragment pkg, boolean fullyInitialize) throws CoreException, IOException, ClassFormatException {
	// If the new index is enabled, check if we have this class file cached in the index already
	if (JavaIndex.isEnabled()) {
		IPath location = JavaIndex.getLocationForElement(pkg.getParent());
		JavaIndex index = JavaIndex.getIndex();
		Nd nd = index.getNd();

		// We don't currently cache package-info files in the index
		if (location != null && !this.name.equals("package-info")) { //$NON-NLS-1$
			String locationString = location.toString();
			// Acquire a read lock on the index
			try (IReader lock = nd.acquireReadLock()) {
				NdResourceFile file = index.getResourceFile(locationString);

				if (file != null && file.isDoneIndexing()) {
					// If this file is in the index and its fingerprint matches the content most recently indexed
					// then read our result from the index
					if (file.getFingerprint().test(location.toFile(), null).matches()) {
						char[] fieldDescriptor = CharArrayUtils.concat(new char[] { 'L' },
								Util.concatWith(pkg.names, this.name, '/').toCharArray(),
								new char[] { ';' });

						return new IndexBinaryType(
								TypeRef.create(nd, locationString.toCharArray(), fieldDescriptor));
					}
				}
			} catch (IndexException e) {
				// Index corrupted. Rebuild it.
				index.rebuildIndex();
			}
		}
	}

	JarPackageFragmentRoot root = (JarPackageFragmentRoot) pkg.getParent();
	ZipFile zip = null;
	ZipFile annotationZip = null;
	try {
		zip = root.getJar();
		String entryName = Util.concatWith(pkg.names, getElementName(), '/');
		ZipEntry ze = zip.getEntry(entryName);
		if (ze != null) {
			byte contents[] = org.eclipse.jdt.internal.compiler.util.Util.getZipEntryByteContent(ze, zip);
			String fileName = root.getHandleIdentifier() + IDependent.JAR_FILE_ENTRY_SEPARATOR + entryName;
			ClassFileReader reader = new ClassFileReader(contents, fileName.toCharArray(), fullyInitialize);
			if (root.getKind() == IPackageFragmentRoot.K_BINARY) {
				JavaProject javaProject = (JavaProject) getAncestor(IJavaElement.JAVA_PROJECT);
				IClasspathEntry entry = javaProject.getClasspathEntryFor(getPath());
				if (entry != null) {
					IProject project = javaProject.getProject();
					IPath externalAnnotationPath = ClasspathEntry.getExternalAnnotationPath(entry, project, false); // unresolved for use in ExternalAnnotationTracker
					if (externalAnnotationPath != null) {
						setupExternalAnnotationProvider(project, externalAnnotationPath, annotationZip, reader,
								entryName.substring(0, entryName.length() - SuffixConstants.SUFFIX_CLASS.length));
					} else if (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) {
						reader.markAsFromSource();
					}
				}
			}
			return reader;
		}
	} finally {
		JavaModelManager.getJavaModelManager().closeZipFile(zip);
		JavaModelManager.getJavaModelManager().closeZipFile(annotationZip);
	}
	return null;
}

