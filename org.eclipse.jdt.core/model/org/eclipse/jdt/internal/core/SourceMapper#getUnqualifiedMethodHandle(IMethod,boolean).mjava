	/**
	 * Creates a handle that has parameter types that are not
	 * fully qualified so that the correct source is found.
	 */
	protected IJavaElement[] getUnqualifiedMethodHandle(IMethod method, boolean noDollar) {
		boolean hasDollar = false;
		String[] qualifiedParameterTypes = method.getParameterTypes();
		String[] unqualifiedParameterTypes = new String[qualifiedParameterTypes.length];
		for (int i = 0; i < qualifiedParameterTypes.length; i++) {
			StringBuffer unqualifiedName = new StringBuffer();
			String qualifiedName = qualifiedParameterTypes[i];
			int count = 0;
			while (qualifiedName.charAt(count) == Signature.C_ARRAY) {
				unqualifiedName.append(Signature.C_ARRAY);
				++count;
			}
			char currentChar = qualifiedName.charAt(count);
			if (currentChar == Signature.C_RESOLVED || currentChar == Signature.C_TYPE_VARIABLE) {
				unqualifiedName.append(Signature.C_UNRESOLVED);
				String simpleName = Signature.getSimpleName(qualifiedName.substring(count+1));
				int lastDollar = simpleName.lastIndexOf('$');
				hasDollar |= lastDollar != -1;
				int start = noDollar ? lastDollar + 1 : 0;
				boolean sigStart = false;
				for (int j = start, length = simpleName.length(); j < length; j++) {
					char current = simpleName.charAt(j);
					switch (current) {
						case Signature.C_SUPER:
						case Signature.C_EXTENDS:
						case Signature.C_GENERIC_START:
						case Signature.C_NAME_END:
							unqualifiedName.append(current);
							sigStart = true;
							break;
						case Signature.C_ARRAY :
							unqualifiedName.append(current);
							break;
						default:
							if (sigStart) {
								switch(current) {
									case Signature.C_TYPE_VARIABLE :
										unqualifiedName.append(Signature.C_UNRESOLVED);
										break;
									case Signature.C_GENERIC_END :
									case Signature.C_STAR :
										unqualifiedName.append(current);
										break;
									default:
										unqualifiedName.append(Signature.C_UNRESOLVED);
										unqualifiedName.append(current);
								}
								sigStart = false;
							} else {
								unqualifiedName.append(current);
							}
					}
				}
			} else {
				unqualifiedName.append(qualifiedName.substring(count, qualifiedName.length()));
			}
			unqualifiedParameterTypes[i] = unqualifiedName.toString();
		}
		
		IJavaElement[] result = new IJavaElement[2];
		result[0] = ((IType) method.getParent()).getMethod(
			method.getElementName(),
			unqualifiedParameterTypes);
		if(hasDollar) {
			result[1] = result[0];
		}
		return result;
	}

