protected boolean generateInfos(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException {

	if (getParent() instanceof JarPackageFragment) {
		// ignore .java files in jar
		throw newNotPresentException();
	} else {
		// put the info now, because getting the contents requires it
		CompilationUnitElementInfo unitInfo = (CompilationUnitElementInfo) info;

		// generate structure
		CompilationUnitStructureRequestor requestor = new CompilationUnitStructureRequestor(this, unitInfo, newElements);
		IProblemFactory factory = new DefaultProblemFactory();
		SourceElementParser parser = new SourceElementParser(requestor, factory, new CompilerOptions(getJavaProject().getOptions(true)));
		requestor.parser = parser;
		parser.parseCompilationUnit(new org.eclipse.jdt.internal.compiler.env.ICompilationUnit() {
				public char[] getContents() {
					try {
						IBuffer buffer = getBufferManager().getBuffer(CompilationUnit.this);
						if (buffer == null) {
								buffer = openBuffer(pm); // open buffer independently from the info, since we are building the info
						}
						return buffer == null ? null : buffer.getCharacters();
					} catch (JavaModelException e) {
						return CharOperation.NO_CHAR;
					}
				}
				public char[] getMainTypeName() {
					return CompilationUnit.this.getMainTypeName();
				}
				public char[][] getPackageName() {
					return CompilationUnit.this.getPackageName();
				}
				public char[] getFileName() {
					return CompilationUnit.this.getFileName();
				}
			}, false/*diet parse*/);
		return unitInfo.isStructureKnown();
	}
}

