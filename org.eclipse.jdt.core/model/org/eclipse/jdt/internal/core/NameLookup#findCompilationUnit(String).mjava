	/**
	 * Returns the <code>ICompilationUnit</code> which defines the type
	 * named <code>qualifiedTypeName</code>, or <code>null</code> if
	 * none exists. The domain of the search is bounded by the classpath
	 * of the <code>IJavaProject</code> this <code>NameLookup</code> was
	 * obtained from.
	 * <p>
	 * The name must be fully qualified (eg "java.lang.Object", "java.util.Hashtable$Entry")
	 */
	public ICompilationUnit findCompilationUnit(String qualifiedTypeName) {
		String[] pkgName= CharOperation.NO_STRINGS;
		String cuName= qualifiedTypeName;

		int index= qualifiedTypeName.lastIndexOf('.');
		if (index != -1) {
			pkgName= Util.splitOn('.', qualifiedTypeName, 0, index);
			cuName= qualifiedTypeName.substring(index + 1);
		}
		index= cuName.indexOf('$');
		if (index != -1) {
			cuName= cuName.substring(0, index);
		}
		cuName += SUFFIX_STRING_java;
		IPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) this.packageFragments.get(pkgName);
		if (roots != null) {
			for (int i= 0; i < roots.length; i++) {
				PackageFragmentRoot root= (PackageFragmentRoot) roots[i];
				if (!root.isArchive()) {
					ICompilationUnit cu = root.getPackageFragment(pkgName).getCompilationUnit(cuName);
					if (cu.exists()) {
						return cu;
					}
				}
			}
		}
		return null;
	}

