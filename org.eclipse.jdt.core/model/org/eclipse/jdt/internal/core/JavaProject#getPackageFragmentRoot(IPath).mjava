	/**
	 * @return A handle to the package fragment root identified by the given path.
	 * This method is handle-only and the element may or may not exist. Returns
	 * <code>null</code> if unable to generate a handle from the path (for example,
	 * an absolute path that has less than 2 segments. The path may be relative or
	 * absolute.
	 */
	public IPackageFragmentRoot getPackageFragmentRoot(IPath path) {
		Object target = JavaModel.getTarget(getProject().getWorkspace().getRoot(), path, false);
		if (target == null) {
			if (path.segmentCount() > 0) {
				String ext = path.getFileExtension();
				if (ext == null) {
					return getPackageFragmentRoot(getProject().getFolder(path));
				} else {
					// resource jar
					return getPackageFragmentRoot(getProject().getFile(path));
				}
			} else {
				// default root
				return getPackageFragmentRoot(getProject());
			}
		} else {
			if (target instanceof IResource) {
				return this.getPackageFragmentRoot((IResource)target);
			} else {
				String ext = path.getFileExtension();
				if (((java.io.File)target).isFile()
					&& ("jar".equalsIgnoreCase(ext)  //$NON-NLS-1$
						|| "zip".equalsIgnoreCase(ext))) { //$NON-NLS-1$
					// external jar
					return getPackageFragmentRoot0(path.toOSString());
				} else {
					// unknown path
					return null;
				}
			}
		}
	}

