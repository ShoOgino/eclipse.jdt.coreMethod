	/**
	 * Returns a handle to the package fragment root identified by the given path.
	 * This method is handle-only and the element may or may not exist. Returns
	 * <code>null</code> if unable to generate a handle from the path (for example,
	 * an absolute path that has less than 2 segments. The path may be relative or
	 * absolute.
	 *
	 * @private
	 */
	public IPackageFragmentRoot getPackageFragmentRoot(IPath path) {

		IResource resource = null;
		if (!path.isAbsolute() || (resource = getProject().getWorkspace().getRoot().findMember(path)) != null) {
			if (resource != null){
				return getPackageFragmentRoot(resource);				
			}
			if (path.segmentCount() > 0) {
				String ext= path.getFileExtension();
				if (ext == null) {
					return getPackageFragmentRoot(getProject().getFolder(path));
				} else {
					// resource jar
					return getPackageFragmentRoot(getProject().getFile(path));
				}
			} else {
				// default root
				return getPackageFragmentRoot(getProject());
			}
		} else {
			String ext= path.getFileExtension();
			if ("jar".equalsIgnoreCase(ext) || "zip".equalsIgnoreCase(ext)) {
				// external jar
				return getPackageFragmentRoot(path.toString()); 
			} else {
				// unknown path
				return null;
			}
		}
	}

