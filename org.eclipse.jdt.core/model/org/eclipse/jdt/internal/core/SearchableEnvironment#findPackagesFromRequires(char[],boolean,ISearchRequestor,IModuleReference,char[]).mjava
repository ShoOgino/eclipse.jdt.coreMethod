private void findPackagesFromRequires(char[] prefix, boolean isMatchAllPrefix, ISearchRequestor requestor, IModuleReference moduleReference, char[] clientModuleName) {
	IPackageFragmentRoot[] fragmentRoots = findModuleContext(moduleReference.name());
	if (fragmentRoots == null) return;
	for (IPackageFragmentRoot root : fragmentRoots) {
		IJavaProject requiredProject = root.getJavaProject();
		try {
			IModuleDescription module = requiredProject.getModuleDescription();
			if (module instanceof AbstractModule) {
				AbstractModule requiredModule = (AbstractModule) module;
				for (IPackageExport packageExport : requiredModule.getExportedPackages()) {
					if (!packageExport.isQualified() || CharOperation.containsEqual(packageExport.targets(), clientModuleName)) {
						char[] exportName = packageExport.name();
						if (isMatchAllPrefix || CharOperation.prefixEquals(prefix, exportName))
							requestor.acceptPackage(exportName);
					}
				}
				for (IModuleReference moduleRef2 : requiredModule.getRequiredModules()) {
					if (moduleRef2.isTransitive())
						findPackagesFromRequires(prefix, isMatchAllPrefix, requestor, moduleRef2, clientModuleName);
				}
			}
		} catch (JavaModelException e) {
			// silent
		}
	}
}

