/**
 * Maps the given source code to the given binary type and its children.
 * If a non-null java element is passed, finds the name range for the 
 * given java element without storing it.
 */
public ISourceRange mapSource(IType type, char[] contents, IJavaElement searchedElement) {
	fType= (BinaryType)type;

	this.searchedElement = searchedElement;
	this.types = new IType[1];
	this.typeDeclarationStarts = new int[1];
	this.typeNameRanges = new SourceRange[1];
	this.typeDepth = -1;

	Hashtable oldSourceRanges = (Hashtable)fSourceRanges.clone();
	try {
		IProblemFactory factory= new DefaultProblemFactory();
		SourceElementParser parser = new SourceElementParser(this, factory);
		parser.parseCompilationUnit(new BasicCompilationUnit(contents, type.getElementName() + ".java"/*nonNLS*/), false);
		if (searchedElement != null) {
			ISourceRange range = this.getNameRange(searchedElement);
			return range;
		} else {
			return null;
		}
	} finally {
		if (searchedElement != null) {
			fSourceRanges = oldSourceRanges;
		}
		fType= null;
		this.searchedElement = null;
		this.types = null;
		this.typeDeclarationStarts = null;
		this.typeNameRanges = null;
		this.typeDepth = -1;
	}
}

