	/**
	 * Replaces <code>length</code> characters starting from <code>position</code> with <code>text<code>.
	 * After that operation, the gap is placed at the end of the 
	 * inserted <code>text</code>.
	 */
	public void replace(int position, int length, String text, boolean convert) {
		if (!isReadOnly()) {
			int textLength = 0;
			if (text != null) {
				if (convert)
					text = this.normalizeCRs(text);
				textLength = text.length();
			}

			synchronized (fLock) {
				// move gap
				adjustGap(position + length, textLength - length);

				// overwrite
				int min = Math.min(textLength, length);
				for (int i = position, j = 0; i < position + min; i++, j++)
					fContents[i] = text.charAt(j);
				if (length > textLength) {
					// enlarge the gap
					fGapStart -= (length - textLength);
				} else
					if (textLength > length) {
						// shrink gap
						fGapStart += (textLength - length);
						for (int i = length; i < textLength; i++)
							fContents[position + i] = text.charAt(i);
					}
			}
			fFlags |= F_HAS_UNSAVED_CHANGES;

			notifyChanged(new BufferChangedEvent(this, position, length, text));
		}
	}

