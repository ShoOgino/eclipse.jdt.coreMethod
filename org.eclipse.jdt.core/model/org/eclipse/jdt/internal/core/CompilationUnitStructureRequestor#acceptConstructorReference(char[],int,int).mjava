	public void acceptConstructorReference(
		char[] typeName,
		int argCount,
		int sourcePosition) {

		// type name could be qualified
		if (CharOperation.indexOf('.', typeName) < 0) {
			acceptTypeReference(typeName, sourcePosition);
		} else {
			acceptTypeReference(CharOperation.splitOn('.', typeName), -1, -1);
			// source positions are not used
			// use simple name afterwards
			typeName = CharOperation.lastSegment(typeName, '.');
		}
		if (argCount < 10) {
			// common case (i.e. small arg count)
			int len = typeName.length;
			char[] name = new char[len + 4];
			name[0] = '<';
			System.arraycopy(typeName, 0, name, 1, len);
			// fix for 1FWAKJJ
			name[len + 1] = '>';
			name[len + 2] = '/';
			name[len + 3] = (char) ('0' + argCount);
			addReference(ReferenceInfo.REFTYPE_call, name);
		} else {
			String name = "<" + new String(typeName) + ">/" + argCount;
			addReference(ReferenceInfo.REFTYPE_call, name.toCharArray());
		}
	}

