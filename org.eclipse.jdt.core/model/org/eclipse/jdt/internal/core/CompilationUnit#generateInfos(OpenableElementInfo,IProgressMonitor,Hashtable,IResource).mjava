	/**
	 * @see Openable
	 */
	protected boolean generateInfos(
		OpenableElementInfo info,
		IProgressMonitor pm,
		Hashtable newElements,
		IResource underlyingResource)
		throws JavaModelException {

		if (getParent() instanceof JarPackageFragment) {
			// ignore .java files in jar
			throw newNotPresentException();
		} else {
			// put the info now, because getting the contents requires it
			fgJavaModelManager.putInfo(this, info);
			CompilationUnitElementInfo unitInfo = (CompilationUnitElementInfo) info;

			// generate structure
			CompilationUnitStructureRequestor requestor =
				new CompilationUnitStructureRequestor(this, unitInfo, newElements);
			IProblemFactory factory = new ProblemFactory();
			SourceElementParser parser = new SourceElementParser(requestor, factory);
			parser.parseCompilationUnit(this, !isWorkingCopy());
			if (isWorkingCopy()) {
				// remember problems
				Vector problems = requestor.fProblems;
				if (problems != null) {
					problems.copyInto(
						((WorkingCopyElementInfo) unitInfo).problems = new IProblem[problems.size()]);
				}

				CompilationUnit original = (CompilationUnit) getOriginalElement();
				unitInfo.fTimestamp =
					((IFile) original.getUnderlyingResource()).getModificationStamp();
				if (unitInfo.fTimestamp == IResource.NULL_STAMP) {
					throw new JavaModelException(
						new JavaModelStatus(IJavaModelStatusConstants.INVALID_RESOURCE));
				}
			}
			return unitInfo.isStructureKnown();
		}
	}

