	private void saveVariablesAndContainers() throws CoreException {
		File file = getVariableAndContainersFile();
		DataOutputStream out = null;
		try {
			out = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(file)));
			out.writeInt(VARIABLES_AND_CONTAINERS_FILE_VERSION);
			if (VARIABLES_AND_CONTAINERS_FILE_VERSION != 1)
				new VariablesAndContainersSaveHelper(out).save();
			else {
				// old code retained for performance comparisons
			
			// variables
			out.writeInt(this.variables.size());
			Iterator variableNames = this.variables.keySet().iterator();
			while (variableNames.hasNext()) {
				String variableName = (String) variableNames.next();
				out.writeUTF(variableName);
				IPath path = (IPath) this.variables.get(variableName);
				out.writeUTF(path == null ? CP_ENTRY_IGNORE : path.toPortableString());
			}
			
			// containers
			IJavaProject[] projects = getJavaModel().getJavaProjects();
			int length = projects.length;
			out.writeInt(length);
			for (int i = 0; i < length; i++) {
			    IJavaProject project = projects[i];
				// clone while iterating (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=59638)
				Map projectContainers = containerClone(project);
				out.writeUTF(project.getElementName());
				if (projectContainers == null) {
					out.writeInt(0);
					continue;
				}
				HashMap containersToSave = new HashMap();
				for (Iterator iterator = projectContainers.keySet().iterator(); iterator.hasNext();) {
				    IPath containerPath = (IPath) iterator.next();
				    IClasspathContainer container = (IClasspathContainer) projectContainers.get(containerPath);
					String containerString = null;
					try {
						if (container == null) {
							// container has not been initialized yet, use previous session value
							// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=73969)
							container = getPreviousSessionContainer(containerPath, project);
						}
						if (container != null) {
							IClasspathEntry[] entries = container.getClasspathEntries();
							containerString = ((JavaProject)project).encodeClasspath(
									entries, 
									null, 
									false,
									null/*not interested in unknown elements*/);
						}
					} catch(JavaModelException e){
						// could not encode entry: will not persist
						Util.log(e, "Could not persist container " + containerPath + " for project " + project.getElementName()); //$NON-NLS-1$ //$NON-NLS-2$
					}
					if (containerString != null)
						containersToSave.put(containerPath, containerString);
				}
				out.writeInt(containersToSave.size());
				Iterator iterator = containersToSave.keySet().iterator();
				while (iterator.hasNext()) {
					IPath containerPath = (IPath) iterator.next();
					out.writeUTF(containerPath.toPortableString());
					String containerString = (String) containersToSave.get(containerPath);
					out.writeInt(containerString.length());
					out.writeBytes(containerString);
				}
			}
			}
		} catch (IOException e) {
			IStatus status = new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, IStatus.ERROR, "Problems while saving variables and containers", e); //$NON-NLS-1$
			throw new CoreException(status);
		} finally {
			if (out != null) {
				try {
					out.close();
				} catch (IOException e) {
					// nothing we can do: ignore
				}
			}
		}
	}

