/**
 * Returns the <code>IJavaElement</code> represented by the <code>String</code>
 * memento.
 * @see getHandleMemento()
 */
protected IJavaElement getHandleFromMementoForBinaryMembers(String memento, IPackageFragmentRoot root, int rootEnd, int end) throws JavaModelException {

	//deal with class file and binary members
	IPackageFragment frag = null;
	if (rootEnd == end - 1) {
		//default package
		frag= root.getPackageFragment(IPackageFragment.DEFAULT_PACKAGE_NAME);
	} else {
		frag= root.getPackageFragment(memento.substring(rootEnd + 1, end));
	}
	int oldEnd = end;
	end = memento.indexOf(JavaElement.JEM_TYPE, oldEnd);
	if (end == -1) {
		//we ended with a class file 
		return frag.getClassFile(memento.substring(oldEnd + 1));
	}
	IClassFile cf = frag.getClassFile(memento.substring(oldEnd + 1, end));
	oldEnd = end;
	end = memento.indexOf(JavaElement.JEM_TYPE, oldEnd);
	oldEnd = end;
	end = memento.indexOf(JavaElement.JEM_FIELD, end);
	if (end != -1) {
		//binary field
		IType type = cf.getType();
		return type.getField(memento.substring(end + 1));
	}
	end = memento.indexOf(JavaElement.JEM_METHOD, oldEnd);
	if (end != -1) {
		//binary method
		oldEnd = end;
		IType type = cf.getType();
		String methodName;
		end = memento.lastIndexOf(JavaElement.JEM_METHOD);
		String[] parameterTypes = null;
		if (end == oldEnd) {
			methodName = memento.substring(end + 1);
			//no parameter types
			parameterTypes = new String[] {};
		} else {
			String parameters = memento.substring(oldEnd + 1);
			StringTokenizer tokenizer = new StringTokenizer(parameters, new String(new char[] {JavaElement.JEM_METHOD}));
			parameterTypes = new String[tokenizer.countTokens() - 1];
			methodName= tokenizer.nextToken();
			int i = 0;
			while (tokenizer.hasMoreTokens()) {
				parameterTypes[i] = tokenizer.nextToken();
				i++;
			}
		}
		return type.getMethod(methodName, parameterTypes);
	}

	//binary type
	return cf.getType();
}

