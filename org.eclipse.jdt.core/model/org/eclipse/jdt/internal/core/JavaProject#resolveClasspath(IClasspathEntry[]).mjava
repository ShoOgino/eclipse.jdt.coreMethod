	/*
	 * Resolve the given raw classpath.
	 */
	public IClasspathEntry[] resolveClasspath(IClasspathEntry[] rawClasspath) throws JavaModelException {
		ArrayList resolvedEntries = new ArrayList();
		for (int i = 0, length = rawClasspath.length; i < length; i++) {
			IClasspathEntry rawEntry = rawClasspath[i];
			switch (rawEntry.getEntryKind()){
				case IClasspathEntry.CPE_VARIABLE:
					IClasspathEntry resolvedEntry = null;
					try {
						resolvedEntry = JavaCore.getResolvedClasspathEntry(rawEntry);
					} catch (AssertionFailedException e) {
						// Catch the assertion failure
						// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=55992
						break;
					}
					if (resolvedEntry != null)
						resolvedEntries.add(resolvedEntry);
					break;
				case IClasspathEntry.CPE_CONTAINER:
					IClasspathContainer container = JavaCore.getClasspathContainer(rawEntry.getPath(), this);
					if (container == null)
						break;
					IClasspathEntry[] containerEntries = container.getClasspathEntries();
					if (containerEntries == null) 
						break;

					// container was bound
					for (int j = 0, containerLength = containerEntries.length; j < containerLength; j++){
						ClasspathEntry cEntry = (ClasspathEntry) containerEntries[j];
						if (cEntry == null) {
							if (JavaModelManager.CP_RESOLVE_VERBOSE) {
								JavaModelManager.getJavaModelManager().verbose_missbehaving_container(this, rawEntry.getPath(), containerEntries);
							}
							break;
						}
						// if container is exported or restricted, then its nested entries must in turn be exported  (21749) and/or propagate restrictions
						cEntry = cEntry.combineWith((ClasspathEntry) rawEntry);
						resolvedEntries.add(cEntry);
					}
					break;
				default:
					resolvedEntries.add(rawEntry);
			}
		}
		IClasspathEntry[] result = new IClasspathEntry[resolvedEntries.size()];
		resolvedEntries.toArray(result);
		return result;
	}

