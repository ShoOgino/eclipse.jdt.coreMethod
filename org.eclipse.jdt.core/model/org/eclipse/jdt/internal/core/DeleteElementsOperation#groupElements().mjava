	/**
	 * Groups the elements to be processed by their compilation unit.
	 * If parent/child combinations are present, children are
	 * discarded (only the parents are processed). Removes any
	 * duplicates specified in elements to be processed.
	 */
	protected void groupElements() throws JavaModelException {
		childrenToRemove = new HashMap(1);
		int uniqueCUs = 0;
		for (int i = 0, length = elementsToProcess.length; i < length; i++) {
			IJavaElement e = elementsToProcess[i];
			ICompilationUnit cu = getCompilationUnitFor(e);
			if (cu == null) {
				throw new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.READ_ONLY, e));
			} else {
				IRegion region = (IRegion) childrenToRemove.get(cu);
				if (region == null) {
					region = new Region();
					childrenToRemove.put(cu, region);
					uniqueCUs += 1;
				}
				region.add(e);
			}
		}
		elementsToProcess = new IJavaElement[uniqueCUs];
		Iterator iter = childrenToRemove.keySet().iterator();
		int i = 0;
		while (iter.hasNext()) {
			elementsToProcess[i++] = (IJavaElement) iter.next();
		}
	}

