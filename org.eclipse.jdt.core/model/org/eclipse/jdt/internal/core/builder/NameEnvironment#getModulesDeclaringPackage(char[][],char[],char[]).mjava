@Override
public char[][] getModulesDeclaringPackage(char[][] parentPackageName, char[] name, char[] moduleName) {
	String pkgName = new String(CharOperation.concatWith(parentPackageName, name, '/'));
	if (moduleName == ModuleBinding.UNNAMED || this.modulePathEntries == null) {
		char[][] names = CharOperation.NO_CHAR_CHAR;
		for (ClasspathLocation location : this.binaryLocations) {
			if (location.module == null) {
				char[][] declaringModules = location.getModulesDeclaringPackage(pkgName, null);
				if (declaringModules != null)
					names = CharOperation.arrayConcat(names, declaringModules);
			}
		}
		for (ClasspathLocation location : this.sourceLocations) {
			if (location.module == null) {
				char[][] declaringModules = location.getModulesDeclaringPackage(pkgName, null);
				if (declaringModules != null)
					names = CharOperation.arrayConcat(names, declaringModules);
			}
		}
		return names == CharOperation.NO_CHAR_CHAR ? null : names;
	} else if (moduleName == ModuleBinding.ANY) {
		char[][] names = CharOperation.NO_CHAR_CHAR;
		for (IModulePathEntry modulePathEntry : this.modulePathEntries.values()) {
			char[][] declaringModules = modulePathEntry.getModulesDeclaringPackage(pkgName, null);
			if (declaringModules != null)
				names = CharOperation.arrayConcat(names, declaringModules);
		}
		return names == CharOperation.NO_CHAR_CHAR ? null : names;
	} else {
		String modName = new String(moduleName);
		IModulePathEntry modulePathEntry = this.modulePathEntries.get(modName);
		if (modulePathEntry != null) {
			return modulePathEntry.getModulesDeclaringPackage(pkgName, modName);
		}
	}
	return null;
}

