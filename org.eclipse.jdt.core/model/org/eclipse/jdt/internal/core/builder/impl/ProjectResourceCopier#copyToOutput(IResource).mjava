/**
 * Copy a given resource into the output folder (if non java source file)
 */
private boolean copyToOutput(IResource resource) {

	if (!resource.exists()) return false;
	IPath sourceFolderPath = getSourceFolderPath(resource);
	IPath resourcePath = resource.getFullPath();

	switch (resource.getType()){
		case IResource.FILE :
			if (sourceFolderPath == null) return false; // resource is not inside the classpath		
			if (!"java".equals(resource.getFileExtension())){ // ignore source files //$NON-NLS-1$
				
				IFile currentFile = (IFile) resource;
				IPath pathSuffix = resourcePath.removeFirstSegments(sourceFolderPath.segmentCount());
				IPath targetPath = this.outputLocation.append(pathSuffix);
				try {
					IFile previousFile = this.root.getFile(targetPath);
					if (previousFile.exists()) previousFile.delete(true, false, null);
					currentFile.copy(targetPath, true, null);
				} catch(CoreException e){
					//throw this.devContext.internalException(e);
				}
			}
			break;
		case IResource.PROJECT :
			if (resourcePath.equals(this.outputLocation)) return false; // do not visit the binary output
			if (resourcePath.equals(sourceFolderPath)) return true; // skip source folder itself
			break;
		case IResource.FOLDER :
			if (resourcePath.equals(this.outputLocation)) return false; // do not visit the binary output
			if (sourceFolderPath == null) return true; // continue inside folder (source folder might be one of its children)		
			if (resourcePath.equals(sourceFolderPath)) return true; // skip source folder itself
			IContainer currentFolder = (IFolder) resource;
				
			IPath pathSuffix = resourcePath.removeFirstSegments(sourceFolderPath.segmentCount());
			IPath targetPath = this.outputLocation.append(pathSuffix);
			IFolder targetFolder = this.root.getFolder(targetPath);
			if (!targetFolder.exists()){
				try {
					targetFolder.create(true, true, null);
				} catch(CoreException e){
					//throw this.devContext.internalException(e);
				}
			}
			break;
	}
	return true;
}

