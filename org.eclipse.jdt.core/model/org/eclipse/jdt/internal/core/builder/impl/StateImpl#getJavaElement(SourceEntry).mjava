	/**
	 * Returns the Java Model element for a source entry.
	 */
	protected IJavaElement getJavaElement(SourceEntry sEntry) {
		try {
			JavaProject javaProject= (JavaProject)getJavaProject();
			String zipEntryFileName= sEntry.fZipEntryFileName;
			IPackageFragment frag= null;
			if (zipEntryFileName != null) {
				IPackageFragmentRoot root;
				IPath path = sEntry.getPath();
				if (!path.isAbsolute() || javaProject.getWorkspace().getRoot().findMember(path) != null) {
					root= javaProject.getPackageFragmentRoot(getFile(path));
				} else {
					root= javaProject.getPackageFragmentRoot(path.toOSString());
				}
				String zipEntryPath = sEntry.fZipEntryPath;
				String pkgName= zipEntryPath == null ? IPackageFragment.DEFAULT_PACKAGE_NAME : zipEntryPath.replace('/', '.');
				frag= root.getPackageFragment(pkgName);
			} else {
				IPackageFragmentRoot[] roots= getPackageFragmentRootsInClassPath();
				for (int i= 0; i < roots.length; ++i) {
					IPackageFragmentRoot root= roots[i];
					if (!root.isArchive() && root.exists()) {
						IPath rootPath= root.getUnderlyingResource().getFullPath();
						if (rootPath.isPrefixOf(sEntry.getPath())) {
							String pkgName= sEntry.getPath().removeLastSegments(1).removeFirstSegments(rootPath.segmentCount()).toString().replace('/', '.');
							frag= root.getPackageFragment(pkgName);
							break;
						}
					}
				}
			}
			if (frag == null) {
				throw internalException(Util.bind("build.missingFile", sEntry.toString())); //$NON-NLS-1$
			}
			String fileName= sEntry.getPath().lastSegment();
			if (sEntry.isSource()) {
				return frag.getCompilationUnit(fileName);
			} else {
				if (zipEntryFileName != null) {
					return frag.getClassFile(zipEntryFileName);
				} else {
					return frag.getClassFile(fileName);
				}
			}
		} catch (JavaModelException e) {
			throw internalException(e);
		}
	}

