	/**
	 * For debugging only -- asserts graph integrity
	 */
	public void integrityCheck(Dictionary table) {
		String msg = "Internal Error: the dependency graph is corrupt, do a full build to workaround error"/*nonNLS*/;
		for (Enumeration e = table.elements(); e.hasMoreElements();) {
			AbstractNode node = (AbstractNode) e.nextElement();

			/* do for each dependent of node */
			INode[] nodesThatDependOnMe = node.getDependents();
			for (int i = 0; i < nodesThatDependOnMe.length; i++) {
				/* make sure current node is a dependency of the dependent node */
				INode[] depDeps = nodesThatDependOnMe[i].getDependencies();
				boolean found = false;
				 for (int j = depDeps.length; --j >= 0;) {
					 if (depDeps[j] == node) {
						 found = true;
					 }
				 }				
				Assert.isTrue(found, msg);
			}

			/* do for each dependency of node */
			INode[] nodesThatIDependOn = node.getDependencies();
			for (int i = 0; i < nodesThatIDependOn.length; i++) {
				/* make sure current node is a dependent of the dependency node */
				INode[] depDeps = nodesThatIDependOn[i].getDependents();
				boolean found = false;
				 for (int j = depDeps.length; --j >= 0;) {
					 if (depDeps[j] == node) {
						 found = true;
					 }
				 }				
				Assert.isTrue(found, msg);
			}
		}
	}

