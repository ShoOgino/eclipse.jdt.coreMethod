	/**
	 * Returns a dictionary of problems keyed by their path.
	 * Each entry in the dictionary is a set of problems.  The set is implemented as a 
	 * hashtable with identical keys and values.  Problems with no path are not 
	 * included in the result.
	 */
	private Hashtable problemTableFrom(IProblemDetail[] problems) {
		Hashtable table = new Hashtable(25);
		for (int i = 0; i < problems.length; i++) {
		IPath path = ((ProblemDetailImpl) problems[i]).getPath();
		if (path != null) {
				Hashtable entry = (Hashtable) table.get(path);
				if (entry == null) {
					entry = new Hashtable(10);
					table.put(path,entry);
				}
				entry.put(problems[i], problems[i]);
			}
		}
		return table;
	}

