/**
 * Returns an array of Constructor objects representing all the
 * constructors declared by the class represented by this 
 * object. These are public, protected, default (package) access,
 * and private constructors.  Returns an array of length 0 if this
 * object represents an interface, an array type or a primitive type.
 * The resulting Constructors are in no particular order.
 */
public IConstructor[] getDeclaredConstructors() throws NotPresentException {
	IBinaryMethod[] methods = getBinaryType().getMethods();
	if (methods == null)
		return new IConstructor[0];

	// count constructors
	int n = 0;
	for (int i = 0; i < methods.length; i++) {
		if (methods[i].isConstructor()) {
			++n;
		}
	}
	IConstructor[] result = new IConstructor[n];
	int k = 0;
	for (int i = 0; i < methods.length; i++) {
		if (methods[i].isConstructor()) {
			result[k++] = (IConstructor) BinaryStructure.getConstructorHandle(methods[i], fHandle).inState(fState);
		}
	}
	return result;
}

