	public void add(Indictment i) {
		// allow null, since certain methods are not indicted (class initializers)
		if (i != null) {
			switch (i.getKind()) {
				case Indictment.K_HIERARCHY:
					fHierarchyChange = true;
					break;
				case Indictment.K_TYPE:
					if (fTypesTable == null) 
						fTypesTable = new HashtableOfObject(11);
					fTypesTable.put(i.getKey(), i);
					break;
				case Indictment.K_METHOD:
					if (fMethodsTable == null) 
						fMethodsTable = new HashtableOfObject(11);
					fMethodsTable.put(i.getKey(), i);
					IType owner = ((MethodCollaboratorIndictment) i).getOwner();
					if (fMethodOwners == null) 
						fMethodOwners = new Hashtable(11);
					fMethodOwners.put(owner, owner);
					fMethodOwnersArray = null;
					if (i.getName().startsWith("<")) { //$NON-NLS-1$
						fHasConstructorIndictments = true;
					}
					break;
				case Indictment.K_FIELD:
					if (fFieldsTable == null) 
						fFieldsTable = new HashtableOfObject(11);
					fFieldsTable.put(i.getKey(), i);
					break;
				case Indictment.K_ABSTRACT_METHOD:
					if (fAbstractMethodTable == null) 
						fAbstractMethodTable = new Hashtable(11);
					fAbstractMethodTable.put(i.getKey(), i);
					break;
				default:
					Assert.isTrue(false, "Internal Error - Unexpected kind of indictment"); //$NON-NLS-1$
					break;
			}
		}
	}

