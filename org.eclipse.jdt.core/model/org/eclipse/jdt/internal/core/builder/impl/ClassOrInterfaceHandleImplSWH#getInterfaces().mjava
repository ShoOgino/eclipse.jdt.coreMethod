/**
 * Returns an array of Type objects representing the direct
 * superinterfaces of the class or interface represented by this object. 
 * <p>
 * If this object represents a class, the return value is an array 
 * containing objects representing all interfaces directly implemented by the 
 * class. The order of the interface objects in the array corresponds 
 * to the order of the interface names in the <code>implements</code> 
 * clause of the declaration of the class represented by this object. 
 * <p>
 * If this object represents an interface, the array contains 
 * objects representing all interfaces directly extended by the interface. 
 * The order of the interface objects in the array corresponds to the 
 * order of the interface names in the <code>extends</code> clause of 
 * the declaration of the interface represented by this object. 
 * <p>
 * If the class or interface implements no interfaces, or if this 
 * object represents neither a class nor an interface, this method 
 * returns an array of length 0. 
 * 
 * See <em>The Java Language Specification</em> sections 8.1.4 and 9.1.3
 * for more details.
 */
public IType[] getInterfaces() throws NotPresentException {
	char[][] interfaces = getBinaryType().getInterfaceNames();
	if (interfaces == null) {
		return new IType[0];
	}
	int len = interfaces.length;
	IType[] results = new IType[len];
	if (len > 0) {
		TypeStructureEntry tsEntry = getTypeStructureEntry();
		for (int i = 0; i < len; i++) {
			results[i] = (IType) BinaryStructure.getType(fState, tsEntry, interfaces[i]);
		}
	}
	return results;
}

