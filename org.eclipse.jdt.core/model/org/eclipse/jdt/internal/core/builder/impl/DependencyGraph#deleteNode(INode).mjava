	/**
	 * Deletes the node in this graph corresponding to the given object,
	 * and answers it if found, or null if it wasn't found.
	 * The node must not have any dependents.
	 */
	INode deleteNode(INode toRemove) {
		Assert.isTrue(toRemove.getDependents().length == 0);
		Object value = null;
		switch (toRemove.getKind()) {
			case INode.JCU_NODE:
				value = fCompilationUnits.remove(((JCUNode) toRemove).getPackageElement());
				break;
			case INode.TYPE_NODE:
				value = fTypes.remove(((TypeNode) toRemove).getPackageElement());
				break;
			case INode.NAMESPACE_NODE:
				value = fNamespaces.remove(((NamespaceNode) toRemove).getPackage());
				break;
			case INode.ZIP_NODE:
				value = fZips.remove(((ZipNode)toRemove).getZipFile());
				break;
			default:
				Assert.isTrue(false, Util.bind("build.errorDeletingNode"/*nonNLS*/));
		}
		return (INode)value;
	}

