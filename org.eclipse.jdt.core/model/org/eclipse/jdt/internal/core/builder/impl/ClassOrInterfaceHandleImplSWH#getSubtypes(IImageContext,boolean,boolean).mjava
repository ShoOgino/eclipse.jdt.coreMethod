/**
 * Returns an array of Type objects representing the
 * types in the given ImageContext which are direct subtypes of this interface.
 * @param includeClasses true iff classes are candidates
 * @param includeInterfaces true iff interfaces are candidates
 */
IType[] getSubtypes(
	IImageContext imageContext, 
	boolean includeClasses, 
	boolean includeInterfaces) throws NotPresentException {

	Hashtable table = fState.getSubtypesTable(imageContext);
	TypeStructureEntry[] subtypes = (TypeStructureEntry[]) table.get(this);
	if (subtypes == null) {
		if (!isPresent())
			throw new NotPresentException();
		else
			return new IType[0];
	}
	
	int numSubtypes = subtypes.length;
	int count = 0;
	IType[] result = new IType[numSubtypes];
	for (int i = 0, n = numSubtypes; i < n; i++) {
		IType type = (IType)subtypes[i].getType().inState(fState);
		if (type.isInterface()) {
			if (!includeInterfaces) continue;
		}
		else {
			if (!includeClasses) continue;
		}
		result[count++] = type;
	}

	if (count < numSubtypes)
		System.arraycopy(result, 0, result = new IType[count], 0, count);
	return result;
}

