private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName) {
	if (initialTypeNames != null) {
		for (int i = 0, length = initialTypeNames.length; i < length; i++)
			if (qualifiedTypeName.equals(initialTypeNames[i]))
				return null; // looking for a file which we know was provided at the beginning of the compilation
	}

	String qualifiedBinaryFileName = qualifiedTypeName + ".class"; //$NON-NLS-1$
	String binaryFileName = qualifiedBinaryFileName;
	String qualifiedPackageName =  ""; //$NON-NLS-1$
	if (qualifiedTypeName.length() > typeName.length) {
		int typeNameStart = qualifiedBinaryFileName.length() - typeName.length - 6; // size of ".class"
		qualifiedPackageName =  qualifiedBinaryFileName.substring(0, typeNameStart - 1);
		binaryFileName = qualifiedBinaryFileName.substring(typeNameStart);
	}
	for (int i = 0, length = classpathLocations.length; i < length; i++) {
		NameEnvironmentAnswer answer = classpathLocations[i].findClass(binaryFileName, qualifiedPackageName, qualifiedBinaryFileName);
		if (answer != null) return answer;
	}
	return null;
}

