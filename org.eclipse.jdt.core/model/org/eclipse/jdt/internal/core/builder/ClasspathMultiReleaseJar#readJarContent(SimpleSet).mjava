	@Override
	protected String readJarContent(final SimpleSet packageSet) {
		String[] modInfo = new String[1];
		modInfo[0] = super.readJarContent(packageSet);
		try {
			if (this.releasePath != null && Files.exists(this.releasePath)) {
				// go through the packages
				try (DirectoryStream<java.nio.file.Path> stream = Files.newDirectoryStream(this.releasePath)) {
					for (final java.nio.file.Path subdir: stream) {
						Files.walkFileTree(subdir, new FileVisitor<java.nio.file.Path>() {
							@Override
							public FileVisitResult preVisitDirectory(java.nio.file.Path dir, BasicFileAttributes attrs)
									throws IOException {
								return FileVisitResult.CONTINUE;
							}
							@Override
							public FileVisitResult visitFile(java.nio.file.Path file, BasicFileAttributes attrs)
									throws IOException {
								Path p = ClasspathMultiReleaseJar.this.releasePath.relativize(file);
								addToPackageSet(packageSet, p.toString(), false);
								if (modInfo[0] == null) {
									if (p.getFileName().toString().equalsIgnoreCase(IModule.MODULE_INFO_CLASS)) {
										 modInfo[0] = ClasspathMultiReleaseJar.this.releasePath.relativize(file).toString();
									}
								}
								return FileVisitResult.CONTINUE;
							}

							@Override
							public FileVisitResult visitFileFailed(java.nio.file.Path file, IOException exc) throws IOException {
								return FileVisitResult.CONTINUE;
							}

							@Override
							public FileVisitResult postVisitDirectory(java.nio.file.Path dir, IOException exc)
									throws IOException {
								return FileVisitResult.CONTINUE;
							}
						});
					}
				}
			}
		} catch (Exception e) {
			// move on;
		}
		return modInfo[0];
	}

