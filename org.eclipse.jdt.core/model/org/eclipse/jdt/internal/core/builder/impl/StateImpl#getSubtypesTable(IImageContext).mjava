	/**
	 * Returns the table of subtypes which covers the given image context.
	 * All types in the table are state-specific
	 */
	protected Hashtable getSubtypesTable(IImageContext imageContext) {
		if (fSubtypesTable != null) {
			if (imageContext == null) {
				if (fSubtypesTableImageContext == null) {
					return fSubtypesTable;
				}
			} else {
				if (fSubtypesTableImageContext == null || ((ImageContextImpl) imageContext).isSubsetOf((ImageContextImpl) fSubtypesTableImageContext)) {
					return fSubtypesTable;
				}
			}
		}
		IPackage[] pkgs= (imageContext == null ? fPackageMap.getAllPackagesAsArray() : imageContext.getPackages());
		Hashtable table= new Hashtable(Math.max(pkgs.length * 5, 1));
		for (int i= 0; i < pkgs.length; ++i) {
			IPackage pkg= pkgs[i];
			TypeStructureEntry[] tsEntries= getAllTypesForPackage(pkg);
			if (tsEntries != null) {
				for (int j= 0; j < tsEntries.length; ++j) {
					IType type= (IType) tsEntries[j].getType().inState(this);
					if (!type.isInterface()) {
						IType superclass= type.getSuperclass();
						if (superclass != null) {
							Vector vSubtypes= (Vector) table.get(superclass);
							if (vSubtypes == null) {
								vSubtypes= new Vector(5);
								table.put(superclass, vSubtypes);
							}
							vSubtypes.addElement(type);
						}
					}
					IType[] interfaces= type.getInterfaces();
					for (int k= 0; k < interfaces.length; ++k) {
						IType intf= interfaces[k];
						Vector vSubtypes= (Vector) table.get(intf);
						if (vSubtypes == null) {
							vSubtypes= new Vector(5);
							table.put(intf, vSubtypes);
						}
						vSubtypes.addElement(type);
					}
				}
			}
		}
		for (Enumeration e= table.keys(); e.hasMoreElements();) {
			IType type= (IType) e.nextElement();
			Vector vSubtypes= (Vector) table.get(type);
			IType[] subtypes= new IType[vSubtypes.size()];
			vSubtypes.copyInto(subtypes);
			table.put(type, subtypes);
		}
		fSubtypesTable= table;
		fSubtypesTableImageContext= imageContext;
		return table;
	}

