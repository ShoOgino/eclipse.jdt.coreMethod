	/**
	 * If the class or interface represented by this Type object is
	 * a member of another class or interface (i.e. it is a nested class), 
	 * this returns the Type object representing the class or interface 
	 * of which it is a member (its <em>declaring class</em>).
	 * If this class or interface is a local class, returns the Type
	 * object representing the class containing the member in which
	 * this class is declared.
	 * Returns null if this class or interface is not a nested class,
	 * or if this type does not represent a class or interface.
	 */
	public IType getDeclaringClass() {
		TypeStructureEntry tsEntry = getTypeStructureEntry();
		IBinaryType binaryType = getBinaryType(tsEntry);
		char[] enclosing = BinaryStructure.getEnclosingTypeName(binaryType);
		if (enclosing == null) {
			return null;
		}
		return (IType) fState
			.typeNameToHandle(tsEntry, BinaryStructure.convertTypeName(enclosing))
			.inState(fState);
	}

