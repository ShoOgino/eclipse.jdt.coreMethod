	/**
	 * Returns a package handle corresponding to the given source entry's package. 
	 * The source entry may or may not be present.
	 */
	protected IPackage packageFromSourceEntry(SourceEntry entry) {
		IPath path= entry.getPath();
		IPackage pkgHandle;

		/* if it's a zip file */
		String zipEntryFileName = entry.fZipEntryFileName;
		if (zipEntryFileName != null) {
			/* compute filename and package from zip name */
			String zipEntryPath = entry.fZipEntryPath;
			if (zipEntryPath == null) {
				/* default unnamed package */
				pkgHandle= defaultPackageForProject();
			} else {
				String pkgName= zipEntryPath.replace('/', '.');
				pkgHandle= fDevelopmentContext.getImage().getPackageHandle(pkgName, false);
			}
		} else {
			/* compute filename and package from element id */
			IPath parent= path.removeLastSegments(1);
			pkgHandle= fPathMap.packageHandleFromPath(parent);
		}
		return canonicalize(pkgHandle);
	}

