	/**
	 * Returns the binary for a given type handle.  The type handle must
	 * be state specific.
	 * @param type The type handle to get binaries for
	 * @param lazyBuildCU whether or not to perform a lazy build to get the binary.
	 */
	protected byte[] getBinary(IType type, boolean lazyBuildCU) throws NotPresentException {
		if (!type.isStateSpecific()) {
			throw new StateSpecificException();
		}
		IType nssHandle= (IType) type.nonStateSpecific();
		TypeStructureEntry tsEntry= buildTypeStructureEntry(nssHandle);

		/* Attempt to retrieve binary from binary output */
		byte[] binary= getBinaryOutput().getBinary(tsEntry, nssHandle);
		if (binary != null)
			return binary;

		/*
		 * We have a built entry, but couldn't get the bytes from the binary output.
		 * Need to recompile.
		 */
		if (!lazyBuildCU) {
			return null;
		}

		/* make sure the entry is a compilation unit */
		PackageElement unit= packageElementFromSourceEntry(tsEntry.getSourceEntry());
		new BatchImageBuilder(this).lazyBuild(unit);
		tsEntry= getTypeStructureEntry(nssHandle, false);
		if (tsEntry == null) {
			return null;
		} else {
			return getBinaryOutput().getBinary(tsEntry, nssHandle);
		}
	}

