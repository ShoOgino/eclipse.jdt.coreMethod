	/**
	 * Issues indictments to the specified element.
	 * If transitive is true, they are issued to all dependents transitively,
	 * otherwise they are issued only to this element.
	 * The trial process is run as the indictments are issued.
	 * Any newly-convicted compilation units are added to the to-be-compiled list.
	 */
	protected void issueIndictments(
		DependencyGraph graph,
		Object element,
		IndictmentSet indicts,
		boolean transitive,
		Hashtable seen) {
		// Only issue indictments to compilation units.
		if (element instanceof PackageElement) {
			PackageElement pkgElement = (PackageElement) element;
			if (pkgElement.isSource()) {
				// Have we already seen this one?
				if (!seen.containsKey(element)) {
					seen.put(element, element);
					// Is it already in the queue?
					if (!fWorkQueue.contains(pkgElement)) {
						// If it's not being removed, conduct the trial.
						if (fNewState.getSourceEntry(pkgElement) != null) {
							if (tryUnit(pkgElement, indicts)) {
								fWorkQueue.add(pkgElement);
							}
						}
					}

					// Recurse if transitive
					if (transitive) {
						Object[] dependents = graph.getDependents(element);
						for (int i = 0; i < dependents.length; ++i) {
							issueIndictments(graph, dependents[i], indicts, transitive, seen);
						}
					}
				}
			}
		}
	}

