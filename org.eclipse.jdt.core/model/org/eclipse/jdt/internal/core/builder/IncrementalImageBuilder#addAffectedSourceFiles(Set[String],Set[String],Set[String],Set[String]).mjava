protected void addAffectedSourceFiles(Set<String> qualifiedSet, Set<String> simpleSet, Set<String> rootSet, Set<String> affectedTypes) {
	// the qualifiedStrings are of the form 'p1/p2' & the simpleStrings are just 'X'
	char[][][] internedQualifiedNames = ReferenceCollection.internQualifiedNames(qualifiedSet);
	// if a well known qualified name was found then we can skip over these
	if (internedQualifiedNames.length < qualifiedSet.size())
		internedQualifiedNames = null;
	char[][] internedSimpleNames = ReferenceCollection.internSimpleNames(simpleSet, true);
	// if a well known name was found then we can skip over these
	if (internedSimpleNames.length < simpleSet.size())
		internedSimpleNames = null;
	char[][] internedRootNames = ReferenceCollection.internSimpleNames(rootSet, false);

	next: for (Entry<String, ReferenceCollection> entry : this.newState.references.entrySet()) {
		String typeLocator = entry.getKey();
		if (affectedTypes != null && !affectedTypes.contains(typeLocator)) continue next;
		ReferenceCollection refs = entry.getValue();
		if (refs.includes(internedQualifiedNames, internedSimpleNames, internedRootNames)) {
			IFile file = this.javaBuilder.currentProject.getFile(typeLocator);
			SourceFile sourceFile = findSourceFile(file, true);
			if (sourceFile == null) continue next;
			if (this.sourceFiles.contains(sourceFile)) continue next;
			if (this.compiledAllAtOnce && this.previousSourceFiles != null && this.previousSourceFiles.contains(sourceFile))
				continue next; // can skip previously compiled files since already saw hierarchy related problems

			if (JavaBuilder.DEBUG)
				System.out.println("  adding affected source file " + typeLocator); //$NON-NLS-1$
			this.sourceFiles.add(sourceFile);
		}
	}
}

