	/**
	 * Returns an array of Package objects representing all packages
	 * in the given image context which directly reference this package.
	 * The result does not include this package.
	 * In other words, the result is non-transitive and non-reflexive.
	 * <p>
	 * The intersection of all packages in the image and those in the
	 * image context are considered, so the resulting packages are 
	 * guaranteed to be present in the image.
	 * The resulting packages are in no particular order.
	 *
	 * This is an extremely slow implementation (n^3?).  Avoid using it if possible.
	 */
	protected IPackage[] getReferencingPackages(IPackage pkgHandle, IImageContext context) {

		/* the results */
		Vector vResults= new Vector();
		IImage image= fDevelopmentContext.getImage();

		/* do for each package in the image context */
		IPackage[] pkgs= context.getPackages();
		for (int i= 0; i < pkgs.length; i++) {
			/* skip the package we are looking for */
			if (pkgs[i].equals(pkgHandle)) {
				continue;
			}
			Hashtable table= getTableOfReferencedPackages(pkgs[i]);
			/* if the package references this package */
			if (table.contains(pkgHandle)) {
				/* add it to results */
				vResults.addElement(pkgs[i]);
			}
		}
		IPackage[] results= new IPackage[vResults.size()];
		vResults.copyInto(results);
		return results;
	}

