/**
 * Returns a builder type for the given old and new type structure entries.
 * Either old or new entries may be null (but not both).
 * This method should only be called if there is no associated builder
 * type already in the builder type table.
 */
protected BuilderType getBuilderType(TypeStructureEntry oldEntry, TypeStructureEntry newEntry) {
	IType handle = null;
	BuilderType type = null;
	if (oldEntry == null) {
		/* must have been added */
		Assert.isNotNull(newEntry);
		type = new NewBuilderType(this, newEntry);
		handle = newEntry.getType();
	} else {
		if (newEntry == null) {
			/* must have been deleted */
			Assert.isNotNull(oldEntry);
			type = new OldBuilderType(this, oldEntry);
			handle = oldEntry.getType();
		} else {
			if (oldEntry.fSourceEntry.equals(newEntry.fSourceEntry)) {
				/* unchanged */
				type = new UnmodifiedBuilderType(this, oldEntry);
				handle = oldEntry.getType();
			} else {
				/* modified */
				IBinaryType oldBinary = fOldState.getBinaryTypeOrNull(oldEntry);
				type = new ModifiedBuilderType(this, oldEntry, oldBinary);
				handle = oldEntry.getType();
			}
		}
	}
	fBuilderTypeTable.put(handle, type);
	return type;
}

