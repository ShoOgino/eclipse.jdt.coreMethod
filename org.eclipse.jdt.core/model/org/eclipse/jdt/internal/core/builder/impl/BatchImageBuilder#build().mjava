/**
 * Builds the entire image from scratch, based on the provided workspace.
 */
public void build() {
	fDoingBatchBuild = true;
	fNotifier = new BuildNotifier(fDC, true);
	getBuilderEnvironment().setNotifier(fNotifier);
	fNotifier.begin();
	try {
		fNewState.readClassPath();
		fNotifier.subTask("Scrubbing output folder");
		fNewState.getBinaryOutput().scrubOutput();
		fNotifier.updateProgressDelta(0.05f);
		fNotifier.subTask("Analyzing packages");
		fNewState.buildInitialPackageMap();
		fNotifier.updateProgressDelta(0.05f);

		/* Force build all in build context */
		fNotifier.subTask("Analyzing sources");
		IPackage[] pkgs = fNewState.getPackageMap().getAllPackagesAsArray();
		for (int i = 0; i < pkgs.length; ++i) {
			fNotifier.checkCancel();
			SourceEntry[] entries = fNewState.getSourceEntries(pkgs[i]);
			if (entries != null) {
				for (int j = 0; j < entries.length; ++j) {
					SourceEntry sEntry = entries[j];
					if (sEntry.isSource()) {
						PackageElement element = fNewState.packageElementFromSourceEntry(sEntry);
						fWorkQueue.add(element);
					}
				}
			}
		}
		fNotifier.updateProgressDelta(0.05f);
		Vector vToCompile = fWorkQueue.getElementsToCompile();
		if (vToCompile.size() > 0) {
			fNotifier.setProgressPerCompilationUnit(0.75f / vToCompile.size());
			compile(vToCompile);
		}
		/* Copy resources to binary output */
		new ProjectResourceCopier(fNewState.getJavaProject(), fDC, fNotifier, 0.10f).copyAllResourcesOnClasspath();
		
		fNotifier.done();
	} finally {
		cleanUp();
	}
}

