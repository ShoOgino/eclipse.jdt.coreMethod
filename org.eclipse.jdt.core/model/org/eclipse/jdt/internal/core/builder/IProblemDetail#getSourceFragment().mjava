	/**
	 * Returns a source fragment indicating the position in the source where the problem
	 * occurs.  The element ID of the source fragment refers to the element having the
	 * problem.
	 * The relevant string can be retrieved using:
	 * <code>
	 *    ISourceFragment fragment = problemDetail.getSourceFragment();
	 *    int start = getStartPos();
	 *    int end = getEndPos();
	 *    if(end>=start) {// handle problems with binaries and unknown source positions
	 *      String source = workspace.getElementContentString(fragment.getElementID());
	 *      String sub = source.substring(start, end + 1);
	 *      ...
	 * </code>
	 * If the positions within the source are unknown, the source fragment will 
	 * contain the most relevant element identifier but the start and end positions will be
	 * (0, -1). The same is true when the problem is with a binary type.
	 * Typically, positions are known only for problems of kind 
	 * <code>K_COMPILATION_PROBLEM</code>.
	 * <p>
	 * When this source fragment arises outside the context of a workspace
	 * (e.g, the Java source analyzer) where element identifiers make no sense,
	 * the element identifier is null.
	 */
	ISourceFragment getSourceFragment();

