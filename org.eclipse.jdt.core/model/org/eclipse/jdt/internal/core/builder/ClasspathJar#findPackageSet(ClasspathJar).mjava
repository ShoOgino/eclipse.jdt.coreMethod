/**
 * Calculate and cache the package list available in the zipFile.
 * @param jar The ClasspathJar to use
 * @return A SimpleSet with the all the package names in the zipFile.
 */
static SimpleSet findPackageSet(final ClasspathJar jar) {
	String zipFileName = jar.zipFilename;
	PackageCacheEntry cacheEntry = (PackageCacheEntry) PackageCache.get(zipFileName);
	long lastModified = jar.lastModified();
	long fileSize = new File(zipFileName).length();
	if (cacheEntry != null && cacheEntry.lastModified == lastModified && cacheEntry.fileSize == fileSize)
		return cacheEntry.packageSet;
	final SimpleSet packageSet = new SimpleSet(41);
	packageSet.add(""); //$NON-NLS-1$
	String modInfo = null;
	for (Enumeration e = jar.zipFile.entries(); e.hasMoreElements(); ) {
		String fileName = ((ZipEntry) e.nextElement()).getName();
		int folderEnd = fileName.lastIndexOf('/');
		folderEnd += 1;
		String className = fileName.substring(folderEnd, fileName.length());
		if (className.equalsIgnoreCase(MODULE_INFO_CLASS)) {
			modInfo = fileName;
		}
		addToPackageSet(packageSet, fileName, false);
	}
	PackageCache.put(zipFileName, new PackageCacheEntry(lastModified, fileSize, packageSet));
	if (modInfo != null) {
		try {
			jar.acceptModule(ClassFileReader.read(jar.zipFile, modInfo));
		} catch (ClassFormatException | IOException e) {
			// TODO BETA_JAVA9 Auto-generated catch block
			e.printStackTrace();
		}
	}
	return packageSet;
}

