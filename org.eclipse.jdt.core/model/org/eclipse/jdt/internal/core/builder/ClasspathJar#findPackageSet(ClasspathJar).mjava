/**
 * Calculate and cache the package list available in the zipFile.
 * @param jar The ClasspathJar to use
 * @return A SimpleSet with the all the package names in the zipFile.
 */
static SimpleSet findPackageSet(ClasspathJar jar) {
	String zipFileName = jar.zipFilename;
	final SimpleSet packageSet = new SimpleSet(41);
	if (jar.isJimage) {
		try {
			org.eclipse.jdt.internal.compiler.util.Util.walkModuleImage(new File(jar.zipFilename), 
					new org.eclipse.jdt.internal.compiler.util.Util.JimageVisitor<Path>() {

				@Override
				public FileVisitResult visitPackage(Path dir, BasicFileAttributes attrs) throws IOException {
					ClasspathJar.addToPackageSet(packageSet, dir.toString(), true);
					return FileVisitResult.CONTINUE;
				}

				@Override
				public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
					return FileVisitResult.CONTINUE;
				}
			});
		} catch (IOException e) {
			// Move on
		}
		// TODO: What about caching?
	} else {
		long lastModified = jar.lastModified();
		long fileSize = new File(zipFileName).length();
		PackageCacheEntry cacheEntry = (PackageCacheEntry) PackageCache.get(zipFileName);
		if (cacheEntry != null && cacheEntry.lastModified == lastModified && cacheEntry.fileSize == fileSize)
			return cacheEntry.packageSet;
		packageSet.add(""); //$NON-NLS-1$
		for (Enumeration e = jar.zipFile.entries(); e.hasMoreElements(); ) {
			String fileName = ((ZipEntry) e.nextElement()).getName();
			addToPackageSet(packageSet, fileName, false);
		}
		PackageCache.put(zipFileName, new PackageCacheEntry(lastModified, fileSize, packageSet));
	}

	return packageSet;
}

