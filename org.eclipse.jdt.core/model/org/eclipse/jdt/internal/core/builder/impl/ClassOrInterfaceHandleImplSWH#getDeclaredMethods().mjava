/**
 * Returns an array of Method objects representing all the methods
 * declared by the class or interface represented by this
 * object. This includes public, protected, default (package)
 * access, and private methods, but excludes inherited
 * methods. Returns an array of length 0 if the class or interface
 * declares no methods, or if this object represents an
 * array type or primitive type.
 * The resulting Methods are in no particular order.
 */
public IMethod[] getDeclaredMethods() throws NotPresentException {
	IBinaryMethod[] methods = getBinaryType().getMethods();
	if (methods == null)
		return new IMethod[0];

	// count methods
	int n = 0;
	for (int i = 0; i < methods.length; i++) {
		if (!methods[i].isConstructor() && methods[i].getSelector()[0] != '<') { // TBD: need IBinaryMethod.isClinit()
			++n;
		}
	}
	IMethod[] result = new IMethod[n];
	int k = 0;
	for (int i = 0; i < methods.length; i++) {
		if (!methods[i].isConstructor() && methods[i].getSelector()[0] != '<') { // TBD: need IBinaryMethod.isClinit()
			result[k++] = (IMethod) BinaryStructure.getMethodHandle(methods[i], fHandle).inState(fState);
		}
	}
	return result;
}

