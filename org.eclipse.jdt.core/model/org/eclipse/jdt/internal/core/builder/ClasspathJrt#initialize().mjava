public void initialize() {
	if (this.compliance == null) {
		return;
	}
	this.compliance = getReleaseOptionFromCompliance(this.compliance);
	Path lib = Paths.get(this.zipFilename).getParent();
	Path filePath = Paths.get(lib.toString(),  "ct.sym"); //$NON-NLS-1$
	URI t = filePath.toUri();
	if (!Files.exists(filePath)) {
		return;
	}
	URI uri = URI.create("jar:file:" + t.getRawPath()); //$NON-NLS-1$
	try {
		this.fs = FileSystems.getFileSystem(uri);
	} catch(FileSystemNotFoundException fne) {
		// Ignore and move on
	}
	if (this.fs == null) {
		HashMap<String, ?> env = new HashMap<>();
		try {
			this.fs = FileSystems.newFileSystem(uri, env);
		} catch (IOException e) {
			this.compliance = null;
			return;
		}
	}
	this.releasePath = this.fs.getPath("/"); //$NON-NLS-1$
	if (!Files.exists(this.fs.getPath(this.compliance))
			|| Files.exists(this.fs.getPath(this.compliance, "system-modules"))) { //$NON-NLS-1$
		this.compliance = null;
	}
	if (this.compliance != null) {
		List<String> sub = new ArrayList<>();
		try (DirectoryStream<java.nio.file.Path> stream = Files.newDirectoryStream(this.releasePath)) {
			for (final java.nio.file.Path subdir: stream) {
				String rel = subdir.getFileName().toString();
				if (rel.contains(this.compliance)) {
					sub.add(rel);
				} else {
					continue;
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
			// Rethrow
		}
		this.subReleases = sub.toArray(new String[sub.size()]);
	}
}

