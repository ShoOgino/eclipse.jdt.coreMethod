	/**
	 * Returns a copy of the dependency graph with all counters and flags reset
	 */
	protected Object clone() {
		try {	
			DependencyGraph newGraph = (DependencyGraph) super.clone();

			/* First pass: copy tables and all nodes, 
			 * leaving dependencies and dependents pointing to old nodes. */
			newGraph.fNamespaces = copyTableAndNodesWithoutReplacingDeps(fNamespaces);
			newGraph.fCompilationUnits = copyTableAndNodesWithoutReplacingDeps(fCompilationUnits);
			newGraph.fTypes = copyTableAndNodesWithoutReplacingDeps(fTypes);
			newGraph.fZips = copyTableAndNodesWithoutReplacingDeps(fZips);
			
			/* Second pass: replace dependencies and dependents to point to new nodes. */
			replaceDeps(newGraph.fNamespaces, newGraph);
			replaceDeps(newGraph.fCompilationUnits, newGraph);
			replaceDeps(newGraph.fTypes, newGraph);
			replaceDeps(newGraph.fZips, newGraph);

			return newGraph;
		}
		catch (CloneNotSupportedException e) {
			// Should not happen since we implement Cloneable
			Assert.isTrue(false, Util.bind("build.cloneException"/*nonNLS*/));
			return null;
		}
	}

