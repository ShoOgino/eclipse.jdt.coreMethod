	/**
	 * Creates a marker from the given problem detail and add it to the resource.
	 * The marker is as follows:
	 *   - its type is T_PROBLEM
	 *   - its plugin ID is the JavaBuilder's plugin ID
	 *	 - its message is the problem's message
	 *	 - its priority reflects the severity of the problem
	 *	 - its range is the problem's range
	 *	 - it has an extra attribute "ID" which holds the problem's id
	 */
	protected void markerFromProblemDetail(
		IResource resource,
		IProblemDetail problem)
		throws CoreException {

		IMarker marker =
			resource.createMarker(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER);

		marker.setAttribute(IMarker.MESSAGE, problem.getMessage());

		int sev = problem.getSeverity();
		marker.setAttribute(
			IMarker.SEVERITY,
			((sev & IProblemDetail.S_ERROR) != 0
				? IMarker.SEVERITY_ERROR
				: IMarker.SEVERITY_WARNING));
		if ((sev & ProblemDetailImpl.S_SYNTAX_ERROR) != 0) {
			setFlags(marker, ProblemDetailImpl.S_SYNTAX_ERROR);
		}
		marker.setAttribute("ID", new Integer(problem.getID()));

		int start = problem.getStartPos();
		marker.setAttribute(IMarker.CHAR_START, new Integer(start));
		marker.setAttribute(IMarker.CHAR_END, new Integer(problem.getEndPos() + 1));
		marker.setAttribute(IMarker.LINE_NUMBER, new Integer(problem.getLineNumber()));

		// compute a user-friendly location
		IJavaElement element = JavaCore.create(resource);
		if (element instanceof ICompilationUnit) {
			// try to find a finer grain element
			ICompilationUnit unit = (ICompilationUnit) element;
			IJavaElement fragment = unit.getElementAt(start);
			if (fragment != null)
				element = fragment;
		}
		String location = null;
		if (element instanceof org.eclipse.jdt.internal.core.JavaElement) {
			location = ((org.eclipse.jdt.internal.core.JavaElement) element).readableName();
		}
		if (location != null)
			marker.setAttribute(IMarker.LOCATION, location);
	}

