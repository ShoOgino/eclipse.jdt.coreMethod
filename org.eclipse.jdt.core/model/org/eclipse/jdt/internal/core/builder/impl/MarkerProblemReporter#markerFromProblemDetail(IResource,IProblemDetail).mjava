/**
 * Creates a marker from the given problem detail and add it to the resource.
 * The marker is as follows:
 *   - its type is T_PROBLEM
 *   - its plugin ID is the JavaBuilder's plugin ID
 *	 - its message is the problem's message
 *	 - its priority reflects the severity of the problem
 *	 - its range is the problem's range
 *	 - it has an extra attribute "ID" which holds the problem's id
 */
protected void markerFromProblemDetail(IResource resource, IProblemDetail problem) throws CoreException {
	
	IMarker marker = resource.createMarker(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER);
	int start = problem.getStartPos();
	int sev = problem.getSeverity();
	marker.setAttributes(
		new String[]{ IMarker.MESSAGE, IMarker.SEVERITY, "ID", IMarker.CHAR_START, IMarker.CHAR_END, IMarker.LINE_NUMBER}, //$NON-NLS-1$
		new Object[]{ 
			problem.getMessage(),
			new Integer((sev & IProblemDetail.S_ERROR) != 0 ? IMarker.SEVERITY_ERROR : IMarker.SEVERITY_WARNING), 
			new Integer(problem.getID()),
			new Integer(start),
			new Integer(problem.getEndPos() + 1),
			new Integer(problem.getLineNumber())
		});
		
	if ((sev & ProblemDetailImpl.S_SYNTAX_ERROR) != 0) {
		marker.setAttribute(IJavaModelMarker.FLAGS, ProblemDetailImpl.S_SYNTAX_ERROR == 0 ? null : new Integer(ProblemDetailImpl.S_SYNTAX_ERROR));
	}
	// compute a user-friendly location
	IJavaElement element = JavaCore.create(resource);
	if (element instanceof ICompilationUnit){ // try to find a finer grain element
		ICompilationUnit unit = (ICompilationUnit) element;
		IJavaElement fragment = unit.getElementAt(start);
		if (fragment != null) element = fragment;
	}
	String location = null;
	if (element instanceof org.eclipse.jdt.internal.core.JavaElement){
		location = ((org.eclipse.jdt.internal.core.JavaElement)element).readableName();
	}
	if (location != null) marker.setAttribute(IMarker.LOCATION, location);
}

