	/**
	 * Adds a node that depends on this node.  
	 * IMPORTANT: This should only be called by dependency graph copy methods.
	 * The dependents array at this point contains either new dependents or null
	 * values.  This method must find the first null entry in the dependents array
	 * and add the given value.
	 */
	public void copyAddDependent(INode nodeThatDependsOnMe) {
		/* find first null entry */
		int min = 0;
		int max = fNumDependents - 1;
		int mid = (max + min) / 2;
		boolean found = false;

		/* binary search until on or next to first non-null entry */
		try {
			while (max > min) {
				if (fDependents[mid] == null) {
					/* look in lower half */
					max = mid - 1;
				} else {
					/* look in higher half */
					min = mid + 1;
				}
				mid = (max + min) / 2;
			}

			/* linear search for first non-null entry */
			while (fDependents[min] != null) {
				min++;
			}

			/* add the dependent */
			fDependents[min] = nodeThatDependsOnMe;
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println(
				"ArrayIndexOutOfBoundsException in AbstractNode.copyAddDependent()");
		}
	}

