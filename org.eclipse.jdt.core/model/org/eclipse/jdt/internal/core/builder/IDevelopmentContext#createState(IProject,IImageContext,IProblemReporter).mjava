	/**
	 * Builds a new state representing the image described by a project.
	 * Returns an <code>ImageBuilder</code> that will build a representation
	 * of the image and answer a new state.
	 * The current state is not affected.
	 * A build context is given, representing the subset of the
	 * image which is important to have built as early as possible.
	 *
	 * <p> N.B. The image builder may read from the project at any time,
	 * not just when a build is initiated.  Any exceptions encountered during
	 * reading are propagated to the client by the image builder.
	 * The image builder guarantees that its internal structures
	 * are not corrupted by such occurrences.
	 *
	 * <p> Compilation and build problems encountered during the image building
	 * are reported using the given <code>IProblemReporter</code>. The report
	 * card will use this problem reporter. 
	 *
	 * <p> There are a few operations in the image builder API that are 
	 * independent of the workspace:
	 * <dl>
	 * <dd> handle-only methods on <code>IHandle</code> and subclasses
	 * <dd> <code>equal()</code>, 
	 *		<code>toString()</code>
	 *		and <code>hashCode()</code> methods
	 * <dd> <code>DeltaKey</code> operations
	 * <dd> <code>IImageContext</code> operations
	 * <dd> <code>ISourceFragment</code> operations
	 * <dd> <code>IState.getCurrentState()</code>,
	 *		<code>setCurrentState()</code> 
	 *		and <code>getImage()</code> 
	 * </dl>
	 * Clients must assume that this exception could be thrown at any time by 
	 * any other operation defined in the image builder API.
	 *
	 * @param project the project which provides source for the state
	 * @see IState#applySourceDelta
	 * @see IState#getBuildContext
	 */
	IImageBuilder createState(
		IProject project,
		IImageContext buildContext,
		IProblemReporter problemReporter);

