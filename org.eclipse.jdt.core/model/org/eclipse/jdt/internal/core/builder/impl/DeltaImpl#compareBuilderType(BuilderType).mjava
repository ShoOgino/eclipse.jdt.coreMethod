	/**
	 * Compares the type in the old and new states.
	 * Returns a bit mask indicating whether the principal structure or binary have changed.
	 */
	protected int compareBuilderType(BuilderType type) {

		if (!type.isAffected()) {
			return 0;
		}

		TypeStructureEntry oldEntry = type.getOldTypeStructureEntry();
		TypeStructureEntry newEntry = type.getNewTypeStructureEntry();
		if (oldEntry == null || newEntry == null) {
			return PS_CHANGED | BIN_CHANGED;
		}
		if (oldEntry == newEntry) {
			return 0;
		}

		int result = 0;

		IBinaryType oldType = type.getOldBinaryType();
		IBinaryType newType = type.getNewBinaryType();

		if (!BinaryStructure.compare(oldType, newType)) {
			result |= PS_CHANGED;
		}
		/*
		 * If the source entry has changed, consider the binary to have changed
		 * even if the binary is actually the same.  Some clients, such as the
		 * target manager, need to know when the source changes. 
		 */
		if (!oldEntry.getSourceEntry().equals(newEntry.getSourceEntry())) {
			result |= BIN_CHANGED;
		} else
			if (oldEntry.getCRC32() != newEntry.getCRC32()) {
				result |= BIN_CHANGED;
			} else {
				boolean oldIsBinary = oldEntry.isBinary();
				boolean newIsBinary = newEntry.isBinary();
				if (oldIsBinary != newIsBinary) {
					result |= BIN_CHANGED;
				}
			}
		return result;
	}

