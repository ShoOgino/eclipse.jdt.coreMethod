private boolean isWorthBuilding() throws CoreException {
//	boolean abortBuilds = JavaCore.ABORT.equals(JavaCore.getOptions().get(OPTION_InvalidClasspathSwitch));
//	if (abortBuilds) {
//		IMarker[] markers =
//			currentProject.findMarkers(IJavaModelMarker.BUILDPATH_PROBLEM_MARKER, false, IResource.DEPTH_ONE);
//		if (markers.length > 0) {
//			if (DEBUG)
//				System.out.println("Aborted build because project is involved in a cycle or has classpath problems"); //$NON-NLS-1$
//
//			// remove all existing class files... causes all dependent projects to do the same
//			new BatchImageBuilder(this).scrubOutputFolder();
//
//			removeProblemsFor(currentProject); // make this the only problem for this project
//			return false;
//		}
//	}
//
//	// make sure all prereq projects have valid build states
//	IProject[] requiredProjects = getRequiredProjects();
//	next : for (int i = 0, length = requiredProjects.length; i < length; i++) {
//		IProject p = requiredProjects[i];
//		if (getLastState(p) == null)  {
//			if (!abortBuilds && !p.isOpen()) continue next; // skip closed projects if we're not aborting builds because of classpath problems
//			if (DEBUG)
//				System.out.println("Aborted build because prereq project " + p.getName() //$NON-NLS-1$
//					+ " was not built"); //$NON-NLS-1$
//
//			// remove all existing class files... causes all dependent projects to do the same
//			new BatchImageBuilder(this).scrubOutputFolder();
//
//			removeProblemsFor(currentProject); // make this the only problem for this project
//			IMarker marker = currentProject.createMarker(ProblemMarkerTag);
//			marker.setAttribute(IMarker.MESSAGE, Util.bind("build.prereqProjectWasNotBuilt", p.getName())); //$NON-NLS-1$
//			marker.setAttribute(IMarker.SEVERITY, IMarker.SEVERITY_ERROR);
//			return false;
//		}
//	}
	return true;
}

