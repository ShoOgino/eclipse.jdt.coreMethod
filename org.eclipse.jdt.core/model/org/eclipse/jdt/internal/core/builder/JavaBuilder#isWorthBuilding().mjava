private boolean isWorthBuilding() throws CoreException {
	boolean abortBuilds = JavaCore.ABORT.equals(JavaCore.getOption(JavaCore.CORE_JAVA_BUILD_INVALID_CLASSPATH));
	if (!abortBuilds) return true;

	// Abort build only if there are classpath errors
	IMarker[] markers =
		currentProject.findMarkers(IJavaModelMarker.BUILDPATH_PROBLEM_MARKER, false, IResource.DEPTH_ONE);
	boolean buildPathHasError = false;
	for (int i = 0, length = markers.length; i < length; i++) {
		IMarker marker = markers[i];
		if (((Integer)marker.getAttribute(IMarker.SEVERITY)).intValue() == IMarker.SEVERITY_ERROR) {
			buildPathHasError = true;
			break;
		}
	}
	if (buildPathHasError) {
		if (DEBUG)
			System.out.println("Aborted build because project has classpath errors (incomplete or involved in cycle)"); //$NON-NLS-1$

		// remove all existing class files... causes all dependent projects to do the same
		new BatchImageBuilder(this).scrubOutputFolder();

		removeProblemsFor(currentProject); // remove all compilation problems

		IMarker marker = currentProject.createMarker(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER);
		marker.setAttribute(IMarker.MESSAGE, Util.bind("build.abortDueToClasspathProblems")); //$NON-NLS-1$
		marker.setAttribute(IMarker.SEVERITY, IMarker.SEVERITY_ERROR);
		return false;
	}

	// make sure all prereq projects have valid build states... only when aborting builds since projects in cycles do not have build states
	// except for projects involved in a 'warning' cycle (see below)
	IProject[] requiredProjects = getRequiredProjects(false);
	next : for (int i = 0, length = requiredProjects.length; i < length; i++) {
		IProject p = requiredProjects[i];
		if (getLastState(p) == null)  {
			// The prereq project has no build state: if this prereq project has a 'warning' cycle marker
			// then allow build (see http://bugs.eclipse.org/bugs/show_bug.cgi?id=23357)
			JavaProject prereqProject = (JavaProject)JavaCore.create(p);
			if (prereqProject.hasCycleMarker() 
					&& JavaCore.WARNING.equals(JavaCore.getOption(JavaCore.CORE_CIRCULAR_CLASSPATH))) {
				continue;
			}
			if (DEBUG)
				System.out.println("Aborted build because prereq project " + p.getName() //$NON-NLS-1$
					+ " was not built"); //$NON-NLS-1$

			// remove all existing class files... causes all dependent projects to do the same
			new BatchImageBuilder(this).scrubOutputFolder();

			removeProblemsFor(currentProject); // make this the only problem for this project
			IMarker marker = currentProject.createMarker(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER);
			marker.setAttribute(IMarker.MESSAGE, Util.bind("build.prereqProjectWasNotBuilt", p.getName())); //$NON-NLS-1$
			marker.setAttribute(IMarker.SEVERITY, IMarker.SEVERITY_ERROR);
			return false;
		}
	}
	return true;
}

