	protected void buildPrincipalStructureByPackageTable() {
		IPackage[] pkgs= fBuildContext != null ? fBuildContext.getPackages() : fPackageMap.getAllPackagesAsArray();
		Hashtable principalStructureByPackageTable= new Hashtable(pkgs.length * 2 + 1);
		for (int i= 0; i < pkgs.length; ++i) {
			principalStructureByPackageTable.put(pkgs[i], new Vector(20));
		}
		for (Enumeration e= fPrincipalStructureTable.elements(); e.hasMoreElements();) {
			TypeStructureEntry tsEntry= (TypeStructureEntry) e.nextElement();
			IPackage pkg= tsEntry.getType().getPackage();
			Vector v= (Vector) principalStructureByPackageTable.get(pkg);
			/* Be careful to only gather types for packages in the given list.
			   Other packages may only be partially built. */
			if (v != null) {
				v.addElement(tsEntry);
			}
		}
		/* Convert vectors to arrays */
		for (Enumeration e= principalStructureByPackageTable.keys(); e.hasMoreElements();) {
			IPackage pkg= (IPackage) e.nextElement();
			Vector v= (Vector) principalStructureByPackageTable.get(pkg);
			TypeStructureEntry[] tsEntries= new TypeStructureEntry[v.size()];
			v.copyInto(tsEntries);
			principalStructureByPackageTable.put(pkg, tsEntries);
		}
		setPrincipalStructureByPackageTable(principalStructureByPackageTable);
	}

