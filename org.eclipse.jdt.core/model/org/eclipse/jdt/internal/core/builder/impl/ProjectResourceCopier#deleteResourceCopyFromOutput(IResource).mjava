	/**
	 * Delete the corresponding resource from the output folder
	 */
	private boolean deleteResourceCopyFromOutput(IResource resource) {

		IPath sourceFolderPath = getSourceFolderPath(resource);
		if (sourceFolderPath == null)
			return false; // resource is not inside the classpath

		IPath resourcePath = resource.getFullPath();
		if (resourcePath.equals(sourceFolderPath))
			return true; // skip source folder itself
		if (resourcePath.equals(this.outputLocation))
			return false; // do not visit the binary output	
		IPath pathSuffix, targetPath;

		switch (resource.getType()) {
			case IResource.FILE :
				if (!"java".equals(resource.getFileExtension())) { // ignore source files

					IFile currentFile = (IFile) resource;
					pathSuffix = resourcePath.removeFirstSegments(sourceFolderPath.segmentCount());
					targetPath = this.outputLocation.append(pathSuffix);
					try {
						IFile previousFile = this.root.getFile(targetPath);
						if (previousFile.exists())
							previousFile.delete(true, true, null);
					} catch (CoreException e) {
						throw this.devContext.internalException(e);
					}
				}
				break;
			case IResource.FOLDER :
				IContainer currentFolder = (IFolder) resource;
				pathSuffix = resourcePath.removeFirstSegments(sourceFolderPath.segmentCount());
				targetPath = this.outputLocation.append(pathSuffix);
				IFolder targetFolder = this.root.getFolder(targetPath);
				if (targetFolder.exists()) {
					try {
						targetFolder.delete(true, false, null);
					} catch (CoreException e) {
						throw this.devContext.internalException(e);
					}
				}
				break;
		}
		return false;
	}

