/**
 * Returns an array of Type objects representing all the classes
 * and interfaces declared as members of the package represented by
 * this object. This includes public and default (package) access
 * classes and interfaces declared as members of the package. 
 * This does not include inner classes and interfaces.
 * Returns an array of length 0 if this package declares no classes
 * or interfaces as members.
 * The Types are in no particular order.
 */
public IType[] getDeclaredClasses() throws NotPresentException {
	TypeStructureEntry[] entries = fState.getAllTypesForPackage(fHandle);
	if (entries == null) {
		throw new NotPresentException();
	}
	int num = entries.length;
	IType[] results = new IType[num];
	int count = 0;
	for (int i = 0; i < num; ++i) {
		if (BinaryStructure.isPackageMember(fState.getBinaryType(entries[i]))) {
			results[count++] = (IType) entries[i].getType().inState(fState);
		}
	}
	if (count < num) {
		System.arraycopy(results, 0, results = new IType[count], 0, count);
	}
	return results;
}

