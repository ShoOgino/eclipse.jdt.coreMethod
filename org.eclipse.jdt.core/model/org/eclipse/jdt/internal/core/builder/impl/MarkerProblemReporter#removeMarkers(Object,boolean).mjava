	/**
	 * Remove problem markers for the given element. If removeSyntaxErrors is true, remove only syntax errors,
	 * otherwise remove only non-syntax errors.
	 */
	protected void removeMarkers(Object sourceID, boolean removeSyntaxErrors) {
		IResource resource = getResource(sourceID);
		if (resource != null && resource.exists()) {
			try {
				IMarker[] markers =
					resource.findMarkers(
						IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER,
						false,
						IResource.DEPTH_INFINITE);
				if (markers.length > 0) {
					Vector toRemove = new Vector(markers.length);
					for (int i = 0; i < markers.length; i++) {
						IMarker marker = markers[i];
						try {
							boolean isSyntaxError =
								(getFlags(marker) & ProblemDetailImpl.S_SYNTAX_ERROR) != 0;
							if (isSyntaxError == removeSyntaxErrors) {
								toRemove.addElement(marker);
							}
						} catch (CoreException e) { // marker state cannot be accessed - ignore it
						}
					}
					if (toRemove.size() > 0) {
						IMarker[] markersToRemove = new IMarker[toRemove.size()];
						toRemove.copyInto(markersToRemove);
						resource.getWorkspace().deleteMarkers(markersToRemove);
					}
				}
			} catch (CoreException e) { // silently absorb CoreException during marker deletion
			}
		}
	}

