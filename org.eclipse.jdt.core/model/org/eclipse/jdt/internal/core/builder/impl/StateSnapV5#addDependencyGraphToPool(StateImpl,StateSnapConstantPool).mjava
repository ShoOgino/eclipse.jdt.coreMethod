/** 
 * Add pool constants for the dependency graph.
 */
protected void addDependencyGraphToPool(StateImpl state, StateSnapConstantPool pool) {
	DependencyGraph graph = state.getInternalDependencyGraph();
	for (Enumeration e = graph.getNodes(); e.hasMoreElements(); ) {
		INode node = (INode)e.nextElement();
		switch (node.getKind()) {
			case INode.JCU_NODE:
				JCUNode jcuNode = (JCUNode) node;
				pool.add(state.getSourceEntry(jcuNode.getPackageElement()));
				IType[] types = jcuNode.getTypes();
				for (int i = 0; i < types.length; ++i) {
					pool.add(types[i]);
				}
				break;
			case INode.TYPE_NODE:
				TypeNode typeNode = (TypeNode)node;
				pool.add(state.getSourceEntry(typeNode.getPackageElement()));
				break;
			case INode.NAMESPACE_NODE:
				pool.add(((NamespaceNode)node).getPackage());
				break;
			case INode.ZIP_NODE:
				pool.add(((ZipNode)node).getZipFile());
				break;
			default:
				Assert.isTrue(false, Util.bind("build.unexpectedNode"/*nonNLS*/));
		}
		// Don't need to process node dependents here, since they're nodes as well
		// and will have their info added to the pool above.
	}
}

