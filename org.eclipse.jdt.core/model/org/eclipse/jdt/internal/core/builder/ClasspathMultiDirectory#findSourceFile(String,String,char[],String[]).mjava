NameEnvironmentAnswer findSourceFile(
	String qualifiedSourceFileName,
	String qualifiedPackageName,
	char[] typeName,
	String[] additionalSourceFilenames) {

	String encoding = (String) JavaCore.getOptions().get(JavaCore.CORE_ENCODING);
	if ("".equals(encoding)) encoding = null; //$NON-NLS-1$
	
	// if an additional source file is waiting to be compiled, answer it
	// BUT not if this is a secondary type search,
	// if we answer the source file X.java which may no longer define Y
	// then the binary type looking for Y will fail & think the class path is wrong
	// let the recompile loop fix up dependents when Y has been deleted from X.java
	String fullSourceName = sourcePath + qualifiedSourceFileName;
	for (int i = 0, l = additionalSourceFilenames.length; i < l; i++)
		if (fullSourceName.equals(additionalSourceFilenames[i]))
			return new NameEnvironmentAnswer(
				new SourceFile(fullSourceName, typeName, CharOperation.splitOn('/', qualifiedPackageName.toCharArray()), encoding));
	return null;
}

