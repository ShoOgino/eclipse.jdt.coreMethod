	/**
	 * Returns true if the receiver is a prefix of the given key, false otherwise.
	 * Keys which are equal are considered to be prefixes of each other (so
	 * true is answered in this case).
	 */
	public boolean isPrefixOf (DeltaKey key) {

		int size;

		/**
		 * Capitalize on the property that compound keys are usually paths, 
		 * where a common prefix is more likely than a common suffix. 
		 * Compare last elements before comparing the rest.
		 */

		size = this.size();
		if (size > key.size()) {
			return false;
		}
		if (size == 0) {
			return true;
		}

		/* Check the last element first. */
		size--;
		if (this.fLocalNames[size] != key.fLocalNames[size]) {
			return false;
		}
		if (--size <= 0) {
			return true;
		}
		
		/* Check the first element next */
		if (this.fLocalNames[0] != key.fLocalNames[0]) {
			return false;
		}
		if (size == 1) {
			return true;
		}
		
		/* Unroll the loop for increased performance */
		if (this.fLocalNames[size] != key.fLocalNames[size]) {return false;}
		if (--size == 1) {return true;}

		if (this.fLocalNames[size] != key.fLocalNames[size]) {return false;}
		if (--size == 1) {return true;}

		if (this.fLocalNames[size] != key.fLocalNames[size]) {return false;}
		if (--size == 1) {return true;}

		if (this.fLocalNames[size] != key.fLocalNames[size]) {return false;}
		if (--size == 1) {return true;}

		if (this.fLocalNames[size] != key.fLocalNames[size]) {return false;}
		if (--size == 1) {return true;}

		if (this.fLocalNames[size] != key.fLocalNames[size]) {return false;}
		if (--size == 1) {return true;}

		if (this.fLocalNames[size] != key.fLocalNames[size]) {return false;}
		if (--size == 1) {return true;}

		if (this.fLocalNames[size] != key.fLocalNames[size]) {return false;}
		if (--size == 1) {return true;}

		if (this.fLocalNames[size] != key.fLocalNames[size]) {return false;}
		if (--size == 1) {return true;}

		while (size > 1) {
			if (this.fLocalNames[size] != key.fLocalNames[size]) {
				return false;
			}
		}
		return true;
	}

