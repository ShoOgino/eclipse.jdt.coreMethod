	/**
	 * Notify listeners that elements have changed.
	 */
	public void notifyElementsChanged(
		ConvertedCompilationResult[] results,
		StateImpl oldState,
		StateImpl newState) {
		//	if (fBuildListeners.size() == 0) {
		//		return;
		//	}
		for (int i = 0; i < results.length; ++i) {
			ConvertedCompilationResult result = results[i];
			PackageElement element = result.getPackageElement();

			/* notify the build monitor */
			if (fBuildMonitor != null) {
				String typeName = element.getFileName();
				int lastDot = typeName.lastIndexOf('.');
				typeName = typeName.substring(0, lastDot);
				fBuildMonitor.compiled(element.getPackage().getName() + '.' + typeName);
			}
			Vector oldProblems = null;
			Vector newProblems = null;
			if (oldState != null) {
				SourceEntry oldEntry = oldState.getSourceEntry(element);
				if (oldEntry != null) {
					oldProblems = oldState.getProblemReporter().getProblemVector(oldEntry);
				}
			}
			SourceEntry newEntry = newState.getSourceEntry(element);
			if (newEntry != null) {
				newProblems = newState.getProblemReporter().getProblemVector(newEntry);
			}
			updateProblemCounts(oldProblems, newProblems);
			ISourceFragment fragment =
				(newEntry == null ? null : new SourceFragmentImpl(newEntry));
			BuildEvent event =
				new BuildEvent(
					fragment,
					fNewErrorCount,
					fFixedErrorCount,
					fNewWarningCount,
					fFixedWarningCount);
			for (int j = 0, size = fBuildListeners.size(); j < size; ++j) {
				((IBuildListener) fBuildListeners.elementAt(j)).buildUpdate(event);
			}
		}
	}

