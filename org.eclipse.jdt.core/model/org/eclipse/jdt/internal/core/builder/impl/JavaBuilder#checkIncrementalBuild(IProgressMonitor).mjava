	/**
	 * Checks whether we can do an incremental build.
	 * Returns a hashtable containing all the required deltas if yes, null if no.
	 *
	 * @return hashtable mapping from IProject to IResourceDelta for all required project deltas, or null
	 */
	protected Hashtable checkIncrementalBuild(IProgressMonitor monitor) throws CoreException {
		IState oldState = getLastBuiltState(monitor);
		if (oldState == null) {
			//System.out.println("No previous built state for: "+getProject().getName());			
			return null;
		}
		Hashtable deltas = new Hashtable(11);
		IProject project = getProject();

		if (monitor != null) monitor.subTask(Util.bind("build.readingDelta", project.getName())); //$NON-NLS-1$
		IResourceDelta delta = getDelta(project);
		if (delta == null){
			//System.out.println("Missing delta for: "+ project.getName());			
			if (monitor != null) monitor.subTask(""); //$NON-NLS-1$
			return null;
		} else {
			deltas.put(project, delta);
		}
		IProject[] prereqs = getRequiredProjects(oldState);
		for (int i = 0; i < prereqs.length; ++i) {
			if (monitor != null)  monitor.subTask(Util.bind("build.readingDelta", prereqs[i].getName())); //$NON-NLS-1$
			delta = getDelta(prereqs[i]);
			if (delta == null){
				//System.out.println("Missing delta for: "+ prereqs[i].getName());			
				if (monitor != null) monitor.subTask(""); //$NON-NLS-1$
				return null;
			} else {
				deltas.put(prereqs[i], delta);
			}
		}
		if (monitor != null) monitor.subTask(""); //$NON-NLS-1$
		return deltas;
	}

