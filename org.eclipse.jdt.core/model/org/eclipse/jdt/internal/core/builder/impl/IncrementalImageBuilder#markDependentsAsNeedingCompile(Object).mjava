/**
 * Mark the immediate dependents of the given element
 * as needing to be compiled (if not marked so already),
 * and add any newly marked ones to the list.
 */
protected void markDependentsAsNeedingCompile(Object element) {
	DependencyGraph graph = fNewState.getInternalDependencyGraph();
	Object[] deps = graph.getDependents(element);
	for (int i = 0; i < deps.length; ++i) {
		if (deps[i] instanceof PackageElement) {
			PackageElement pkgElement = (PackageElement) deps[i];
			if (pkgElement.isSource()) {
				if (!fWorkQueue.contains(pkgElement)) {
					// Mark it, if it's not being removed.
					if (fNewState.getSourceEntry(pkgElement) != null) {
						fWorkQueue.add(pkgElement);
					}
				}
			}
		}
	}
}

