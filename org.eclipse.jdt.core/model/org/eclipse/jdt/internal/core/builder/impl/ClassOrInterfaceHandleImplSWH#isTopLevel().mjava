	/**
	 * Returns true if this object represents a top-level class or interface,
	 * false otherwise.
	 * A top-level class is declared either as a package member or as a 
	 * static member of another top-level class.  Unlike inner classes, 
	 * instances of top-level classes are not created in the context of 
	 * another object.
	 * Given the appropriate access modifiers, a top-level class can be 
	 * referred to directly by a qualified name.
	 * <p>
	 * See the <em>Java Inner Classes Specification</em> for more details.
	 */
	public boolean isTopLevel()
		throws org.eclipse.jdt.internal.core.builder.NotPresentException {
		IBinaryType binaryType = getBinaryType();
		if (BinaryStructure.isPackageMember(binaryType)) {
			return true;
		}
		if (BinaryStructure.isLocal(binaryType)) {
			return false;
		}
		char[] enclosingType = BinaryStructure.getEnclosingTypeName(binaryType);
		if (enclosingType == null) {
			return true;
		}
		if ((binaryType.getModifiers() & IConstants.AccStatic) == 0) {
			return false;
		}
		TypeStructureEntry tsEntry = getTypeStructureEntry();
		IType enclosing =
			(IType) fState.typeNameToHandle(tsEntry, new String(enclosingType)).inState(
				fState);
		return enclosing.isTopLevel();
	}

