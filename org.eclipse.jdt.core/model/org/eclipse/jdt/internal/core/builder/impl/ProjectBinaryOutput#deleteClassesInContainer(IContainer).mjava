	/**
	 * Deletes the classes in the given container, recursively.
	 * Delete any folders which become empty.
	 */
	private void deleteClassesInContainer(IContainer container) {
		try {
			if (!container.exists())
				return;
			IResource[] members = container.members();
			for (int i = 0, max = members.length; i < max; i++) {
				IResource resource = (IResource) members[i];
				switch (resource.getType()) {
					case IResource.FILE :
						if (resource.getName().toLowerCase().endsWith(".class")) {
							resource.delete(true, null);
						}
						break;
					case IResource.PROJECT :
					case IResource.FOLDER :
						deleteClassesInContainer((IContainer) resource);
						break;
				}
			}
			//
			//		Don't delete empty folders, since the output may overlap with the source, and
			//		we don't want to delete empty folders which the user may have created.
			//
			//		if (container.getType() == IResource.FOLDER && !container.members().hasMoreElements()) {
			//			container.delete(true, null);
			//		}
		} catch (CoreException e) {
			throw this.dc.internalException(e);
		}
	}

