/**
 * Returns an <code>ISearch</code> that will look for methods or constructors
 * with matching name, number of parameters, and return type. A parameter count
 * of -1 indicates that the number of parameters doesn't matter.
 * <p>
 * When searching for a constructor, the return type is ignored.
 * <p>
 * <b>Example 1:</b> Search for declarations and references to methods named <code>add</code> 
 * which have 2 arguments. The search will be conducted in the scope of the <code>hanoiExample</code>
 * package. Note that the principle structure is not searched for references 
 * since it never contains information about references to methods.
 *  <code><pre>
 * IImage image = dc.getImage();
 * ISearchFactory factory = image.newSearchFactory();
 * IHandle[] scope = {image.getPackageHandle("hanoiExample")};
 * ISearch search = 
 *  factory.searchForMethod(
 *      "add", 
 *      2, 
 *      "*",
 *      scope, 
 *      SEARCH_FOR_DECLS | 
 *      SEARCH_FOR_SOURCE_REFS);
 * search.run();
 *  </code></pre>
 * <br>
 * <b>Example 2:</b> Search for references to a constructor for a class named 
 * <code>Disk</code> which takes any number of arguments. The search will be conducted in
 * the scope of the <code>hanoiExample</code> package. Note that the principle structure is not searched for references 
 * since it never contains information about references to methods.
 *  <code><pre>
 * IImage image = dc.getImage();
 * ISearchFactory factory = image.newSearchFactory();
 * IHandle[] scope = {image.getPackageHandle("hanoiExample")};
 * ISearch search = 
 *  factory.searchForMethod(
 *      "Disk",
 *      -1, 
 *      "", // return type ignored for constructors
 *      scope, 
 *      SEARCH_FOR_SOURCE_REFS);
 * search.run();
 *  </code></pre> 
 *
 * @param methodName   the method name to search for, possibly containing wildcards ("*")
 * @param parameterCount the number of parameters the method being 
 *          searched for has. Use -1 if number of parameters doesn't matter
 * @param returnType the name of the return type the method being 
 *      searched for must have, possibly containing wildcards. A return type of
 *      "*" effectively ignores return type.
 * @param scope the packages and types to search in
 * @param context the context flags. SEARCH_FOR_DECLS and 
 *      SEARCH_FOR_SOURCE_REFS make sense as flags for this method search.
 *      SEARCH_FOR_PRINCIPLE_STRUCTURE_REFS will not have any effect since 
 *      principle structures cannot reference methods.
 *
 * @see ISearch
 */
ISearch searchForMethod(
		String methodName,
		int parameterCount, 
		String returnType,
		IHandle[] scope,
		int context);

