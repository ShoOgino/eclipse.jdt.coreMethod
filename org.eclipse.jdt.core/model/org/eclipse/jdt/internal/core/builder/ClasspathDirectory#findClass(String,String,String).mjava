public NameEnvironmentAnswer findClass(String binaryFileName, String qualifiedPackageName, String qualifiedBinaryFileName) {
	if (!doesFileExist(binaryFileName, qualifiedPackageName, qualifiedBinaryFileName)) return null; // most common case

	try {
		ClassFileReader reader = ClassFileReader.read(binaryLocation + qualifiedBinaryFileName);
		if (reader != null) {
			AccessRestriction violatedRestriction = null;
			if (this.accessRestriction != null) {
				violatedRestriction = this.accessRestriction.getViolatedRestriction(qualifiedBinaryFileName.toCharArray(), null);
			}
			return new NameEnvironmentAnswer(reader, violatedRestriction);
		}
	} catch (Exception e) {
		// handle the case when the project is the output folder and the top-level package is a linked folder
		if (binaryFolder instanceof IProject) {
			IResource file = binaryFolder.findMember(qualifiedBinaryFileName);
			if (file instanceof IFile) {
				IPath location = file.getLocation();
				if (location != null) {
					try {
						ClassFileReader reader = ClassFileReader.read(location.toString());
						AccessRestriction violatedRestriction = null;
						if (this.accessRestriction != null) {
							violatedRestriction = this.accessRestriction.getViolatedRestriction(qualifiedBinaryFileName.toCharArray(), null);
						}						
						if (reader != null) return new NameEnvironmentAnswer(reader, violatedRestriction);
					} catch (Exception ignored) { // treat as if class file is missing
					}
				}
			}
		}
	}
	return null;
}

