	/**
	 * Removes a node that depends on this node.
	 * This does not remove the backwards link.
	 */
	public void removeDependent(INode nodeThatDependsOnMe) {
		int size = fNumDependents;
		for (int i = size; --i >= 0;) {
			if (fDependents[i] == nodeThatDependsOnMe) {
				/* shrink array */
				if (--size == 0) {
					fDependents = fgEmptyNodeList;
				} else {
					INode[] newDependents = new INode[size];
					System.arraycopy(fDependents, 0, newDependents, 0, i);
					System.arraycopy(fDependents, i + 1, newDependents, i, size - i);
					fDependents = newDependents;
				}
				fNumDependents = size;
				return;
			}
		}
	}

