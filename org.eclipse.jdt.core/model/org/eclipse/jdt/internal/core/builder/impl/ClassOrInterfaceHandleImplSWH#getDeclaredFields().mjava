/**
 * Returns an array of Field objects representing all the fields
 * declared by the class or interface represented by this 
 * object. This includes public, protected, default (package)
 * access, and private fields, but excludes inherited
 * fields. Returns an array of length 0 if the class or interface
 * declares no fields, or if this object represents a
 * primitive type or an array type (the implicit <code>length</code>
 * field of array types is not considered to be a declared field).
 * The resulting Fields are in no particular order.
 */
public IField[] getDeclaredFields() throws NotPresentException {
	IBinaryField[] fields = getBinaryType().getFields();
	if (fields == null)
		return new IField[0];
	IField[] handles = new IField[fields.length];
	for (int i = 0; i < fields.length; i++) {
		handles[i] = (IField) BinaryStructure.getFieldHandle(fields[i], fHandle).inState(fState);
	}
	return handles;
}

