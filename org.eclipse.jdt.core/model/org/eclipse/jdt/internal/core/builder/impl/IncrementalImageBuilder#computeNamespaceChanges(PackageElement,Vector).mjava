/**
 * Computes the names with namespace changes for the given element.
 * Handles the cases where the element is added, removed, or changed.
 */
protected void computeNamespaceChanges(PackageElement element, Vector vTypeNames) {
	Hashtable oldTSEntries = new Hashtable(5);
	SourceEntry oldSourceEntry = fOldState.getSourceEntry(element);
	if (oldSourceEntry != null) {
		// Ignore entries from zip files, since zip file changes are handled wholesale elsewhere.
		if (oldSourceEntry.getZipEntryName() == null) {
			org.eclipse.jdt.internal.core.builder.IType[] oldTypes = fOldState.getInternalDependencyGraph().getTypes(element);
			if (oldTypes != null) {
				for (int i = 0; i < oldTypes.length; ++i) {
					TypeStructureEntry tsEntry = fOldState.getTypeStructureEntry(oldTypes[i], false);
					if (tsEntry != null) {
						oldTSEntries.put(tsEntry.getType().getSimpleName(), tsEntry);
					}
				}
			}
		}
	}
	SourceEntry newSourceEntry = fNewState.getSourceEntry(element);
	if (newSourceEntry != null) {
		// Ignore entries from zip files, since zip file changes are handled wholesale elsewhere.
		if (oldSourceEntry.getZipEntryName() == null) {
			/* use this if JavaModel is broken 
			String fileName = element.getFileName();
			fileName = fileName.substring(0, fileName.indexOf('.'));
			FakeType[] types = new FakeType[] {new FakeType(fileName)};
			try {
			computeNamespaceChanges(oldTSEntries, null, types[0], vTypeNames);
			} catch (NotPresentException e) {} // ignore
			*/

			IJavaElement javaElement = fNewState.getJavaElement(newSourceEntry);
			if (javaElement instanceof ICompilationUnit) {
				ICompilationUnit unit = (ICompilationUnit) javaElement;
				try {
					org.eclipse.jdt.core.IType[] types = unit.getTypes();
					for (int i = 0; i < types.length; ++i) {
						computeNamespaceChanges(oldTSEntries, null, types[i], vTypeNames);
					}
				} catch (JavaModelException e) {
					// TBD: ignore
				}
			} else {
				if (javaElement instanceof IClassFile) {
					IClassFile classFile = (IClassFile) javaElement;
					try {
						computeNamespaceChanges(oldTSEntries, null, classFile.getType(), vTypeNames);
					} catch (JavaModelException e) {
						// TBD: ignore
					}
				}
			}
		}
	}
	for (Enumeration e = oldTSEntries.keys(); e.hasMoreElements();) {
		String name = (String) e.nextElement();
		vTypeNames.addElement(name);
	}
}

