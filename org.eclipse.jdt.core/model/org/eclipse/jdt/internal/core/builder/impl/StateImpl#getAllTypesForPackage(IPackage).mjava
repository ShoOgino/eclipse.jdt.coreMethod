	/**
	 * Returns an enumeration of TypeStructureEntry objects for all types 
	 * in the given package, including nested types.  Returns null if the package does not exist.
	 */
	protected TypeStructureEntry[] getAllTypesForPackage(IPackage pkg) {
		if (fPrincipalStructureByPackageTable == null) {
			fPrincipalStructureByPackageTable= new Hashtable(11);
		}
		Object o= fPrincipalStructureByPackageTable.get(pkg);
		if (o != null) {
			return (TypeStructureEntry[]) o;
		}
		if (!fPackageMap.containsPackage(pkg)) {
			return null;
		}

		// TBD: Doesn't support lazy builds.

		int max= 30;
		TypeStructureEntry[] list= new TypeStructureEntry[max];
		int count= 0;
		for (Enumeration e= fPrincipalStructureTable.elements(); e.hasMoreElements();) {
			TypeStructureEntry tsEntry= (TypeStructureEntry) e.nextElement();
			if (tsEntry.getType().getPackage().equals(pkg)) {
				if (count == max)
					System.arraycopy(list, 0, list= new TypeStructureEntry[max= max * 2], 0, count);
				list[count++]= tsEntry;
			}
		}
		if (count < max)
			System.arraycopy(list, 0, list= new TypeStructureEntry[count], 0, count);
		fPrincipalStructureByPackageTable.put(pkg, list);
		return list;
	}

