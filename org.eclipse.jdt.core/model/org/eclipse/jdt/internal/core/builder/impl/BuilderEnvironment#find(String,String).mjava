/**
 * @see IBuilderEnvironment
 */
protected NameEnvironmentAnswer find(String packageName, String simpleTypeName) {
	checkCancel();
	IPackage pkg = getPackageHandle(packageName);
	if (pkg == null) {
		return null;
	}
	IType type = pkg.getClassHandle(simpleTypeName);
	SourceEntry sEntry = null;
	TypeStructureEntry tsEntry = fState.getTypeStructureEntry(type, false);
	boolean isInvalid;
	if (tsEntry != null) {
		sEntry = tsEntry.getSourceEntry();
		isInvalid = fBuilder.isInvalid(sEntry);
		if (!isInvalid) {
			/* don't want to invoke a lazy build here */
			IBinaryType binaryType = fState.getBinaryTypeOrNull(tsEntry);
			if (binaryType != null) {
				return new NameEnvironmentAnswer(binaryType);
			}
		}
	} else {
		sEntry = fState.getSourceEntry(type);
		if (sEntry == null) {
			return null;
		}
		isInvalid = fBuilder.isInvalid(sEntry);
	}
	if (sEntry != null && sEntry.isSource()) {
		// only accept if really a compilation unit, not from binary
		// If the type was unknown (as opposed to invalid), check to see if there are problems.
		// If there was no principal structure and there are problems,
		// then the compilation unit has tried to be compiled and it has failed,
		// so don't try again.
		// If the type was known, but needs to be recompiled because its principal structure was missing,
		// then recompile it regardless of whether it has problems.
		if (!isInvalid && (tsEntry == null && fState.getProblemReporter().hasProblems(sEntry))) {
			return null;
		}
		CompilerCompilationUnit unit = new CompilerCompilationUnit(fState, sEntry, fNotifier);
		compiling(unit);
		return new NameEnvironmentAnswer(unit);
	}
	return null;
}

