/**
 * Creates a marker from each problem and adds it to the resource.
 * The marker is as follows:
 *   - its type is T_PROBLEM
 *   - its plugin ID is the JavaBuilder's plugin ID
 *	 - its message is the problem's message
 *	 - its priority reflects the severity of the problem
 *	 - its range is the problem's range
 *	 - it has an extra attribute "ID" which holds the problem's id
 *   - it's GENERATED_BY attribute is positioned to JavaBuilder.GENERATED_BY if
 *     the problem was generated by JDT; else the GENERATED_BY attribute is 
 *     carried from the problem to the marker in extra attributes, if present.
 */
protected void storeProblemsFor(SourceFile sourceFile, CategorizedProblem[] problems) throws CoreException {
	if (sourceFile == null || problems == null || problems.length == 0) return;

	String missingClassFile = null;
	IResource resource = sourceFile.resource;
	HashSet managedMarkerTypes = JavaModelManager.getJavaModelManager().compilationParticipants.managedMarkerTypes();
	for (int i = 0, l = problems.length; i < l; i++) {
		CategorizedProblem problem = problems[i];
		int id = problem.getID();
		if (id == IProblem.IsClassPathCorrect) {
			JavaBuilder.removeProblemsAndTasksFor(javaBuilder.currentProject); // make this the only problem for this project
			String[] args = problem.getArguments();
			missingClassFile = args[0];
		}
		
		String markerType = problem.getMarkerType();
		boolean managedProblem = false;
		if (IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER.equals(markerType)
				|| (managedProblem = managedMarkerTypes.contains(markerType))) {			
			IMarker marker = resource.createMarker(markerType);
			
			// standard attributes
			marker.setAttributes(
				JAVA_PROBLEM_MARKER_ATTRIBUTE_NAMES,
				new Object[] { 
					problem.getMessage(), // message
					problem.isError() ? S_ERROR : S_WARNING, // severity
					new Integer(id), // ID
					new Integer(problem.getSourceStart()), // start
					new Integer(problem.getSourceEnd() + 1), // end
					new Integer(problem.getSourceLineNumber()), // line
					Util.getProblemArgumentsForMarker(problem.getArguments()), // arguments
					new Integer(problem.getCategoryID()) // category ID
				}
			);
			// GENERATED_BY attribute for JDT problems
			if (!managedProblem) {
				marker.setAttribute(IMarker.GENERATED_BY, JavaBuilder.GENERATED_BY);
			}
			// optional extra attributes
			String[] extraAttributeNames = problem.getExtraMarkerAttributeNames();
			int extraLength = extraAttributeNames == null ? 0 : extraAttributeNames.length;
			if (extraLength > 0) {
				marker.setAttributes(extraAttributeNames, problem.getExtraMarkerAttributeValues());
			}
		}
		if (missingClassFile != null)
			throw new MissingClassFileException(missingClassFile);
	}
}

