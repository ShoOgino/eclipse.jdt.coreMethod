	/**
	 * Removes a node on which this node depends.
	 * This -does- remove the backwards link from the other node.
	 */
	public void removeDependency(INode nodeThatIDependOn) {
		nodeThatIDependOn.removeDependent(this);
		int size = fDependencies.length;
		for (int i = size; --i >= 0;) {
			if (fDependencies[i] == nodeThatIDependOn) {
				/* shrink array */
				if (--size == 0) {
					fDependencies = fgEmptyNodeList;
				} else {
					INode[] newDependencies = new INode[size];
					System.arraycopy(fDependencies, 0, newDependencies, 0, i);
					System.arraycopy(fDependencies, i + 1, newDependencies, i, size - i);
					fDependencies = newDependencies;
				}
				invalidateOrder();
				return;
			}
		}
	}

