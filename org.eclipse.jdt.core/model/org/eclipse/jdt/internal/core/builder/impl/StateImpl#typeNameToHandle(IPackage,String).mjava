	/**
	 * Returns the type handle for the given type name,
	 * relative to the referring package refPkg.
	 * If typeName is unqualified, the resulting type is in
	 * the default package visible by the referring package (which may not be
	 * the same as refPkg).
	 */
	protected IType typeNameToHandle(IPackage refPkg, String typeName) {
		int lastDot= typeName.lastIndexOf('.');
		if (lastDot == -1) {
			IPackage pkg= defaultPackageFor(refPkg);
			if (pkg == null) {
				// typeName is unqualified but there is no visible default package.
				// Should not occur, but be resilient, and assume it's in the same package
				// as tsEntry.
				pkg= refPkg;
			}
			return pkg.getClassHandle(typeName);
		}
		String packageName= typeName.substring(0, lastDot);
		String simpleName= typeName.substring(lastDot + 1);
		if (!refPkg.isUnnamed() && refPkg.getName().equals(packageName)) {
			return refPkg.getClassHandle(simpleName);
		}
		IPackage pkg= fDevelopmentContext.getImage().getPackageHandle(packageName, false);
		pkg= canonicalize(pkg);
		return canonicalize(pkg.getClassHandle(simpleName));
	}

