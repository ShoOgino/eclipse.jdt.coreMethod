	/**
	 * Returns an array of Package objects representing all other
	 * packages which this package directly references.
	 * This is the union of all packages directly referenced by all 
	 * classes and interfaces in this package, including packages
	 * mentioned in import declarations.
	 * <p>
	 * A direct reference in source code is a use of a package's
	 * name other than as a prefix of another package name.
	 * For example, 'java.lang.Object' contains a direct reference
	 * to the package 'java.lang', but not to the package 'java'.
	 * Also note that every package that declares at least one type
	 * contains a direct reference to java.lang in virtue of the
	 * automatic import of java.lang.*.
	 * The result does not include this package (so contrary to the note
	 * above, the result for package java.lang does not include java.lang).
	 * In other words, the result is non-reflexive and typically
	 * non-transitive.
	 * <p>
	 * The resulting packages may or may not be present in the image,
	 * since the classes and interfaces in this package may refer to missing
	 * packages.
	 * The resulting packages are in no particular order.
	 */
	protected IPackage[] getReferencedPackages(IPackage pkgHandle) {

		/* set of referenced builder packages */
		Hashtable pkgTable= getTableOfReferencedPackages(pkgHandle);

		/* convert to array and return */
		IPackage[] results= new IPackage[pkgTable.size()];
		int i= 0;
		for (Enumeration e= pkgTable.elements(); e.hasMoreElements(); i++) {
			results[i]= (IPackage) e.nextElement();
		}
		return results;
	}

