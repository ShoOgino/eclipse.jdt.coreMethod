	/**
	 * Converts an <code>IResourceDelta</code> and its children into
	 * the corresponding <code>IJavaElementDelta</code>s.
	 */
	protected void traverseDelta(IResourceDelta delta, Openable parentElement) {

		Openable[] elements = this.createElements(delta.getResource());
		Openable element = null;
		int flags = delta.getFlags();
		fProcessChildren = true;
		if (elements != null) {
			for (int i = 0, length = elements.length; i < length; i++) {
				element = elements[i];
				IResource res = delta.getResource();

				updateIndex(element, delta);
				switch (delta.getKind()) {
					case IResourceDelta.ADDED :
						PackageFragmentRoot pkgRoot;
						if (res.getType() == IResource.FILE
							&& parentElement != null
							&& !parentElement.equals(element.getParent())
							&& ((pkgRoot = element.getPackageFragmentRoot()) == null
								|| !isOnClasspath(pkgRoot))) {
							try { // fake compilation/class file scenario (see JavaCore.createCompilationUnitFrom & createClassFileFrom
								nonJavaResourcesChanged(parentElement, delta);
								break;
							} catch (JavaModelException e) {
							}
						}
						elementAdded(element, delta);
						break;
					case IResourceDelta.REMOVED :
						if (res.getType() == IResource.FILE
							&& parentElement != null
							&& !parentElement.equals(element.getParent())
							&& ((pkgRoot = element.getPackageFragmentRoot()) == null
								|| !isOnClasspath(pkgRoot))) {
							try { // fake compilation/class file scenario (see JavaCore.createCompilationUnitFrom & createClassFileFrom
								nonJavaResourcesChanged(parentElement, delta);
								break;
							} catch (JavaModelException e) {
							}
						}
						elementRemoved(element, delta);
						break;
					case IResourceDelta.CHANGED :
						if ((flags & IResourceDelta.CONTENT) != 0) {
							contentChanged(element, delta);
							break;
						}
						if ((flags & IResourceDelta.OPEN) != 0) {
							res = delta.getResource();
							if (isOpen(res)) {
								elementOpened(element, delta);
							} else {
								elementClosed(element, delta);
							}
							break;
						}
						break;
				}
			}
		} else {
			try {
				if (parentElement != null && delta.getResource() != null) {
					switch (delta.getResource().getType()) {
						case IResource.FILE :
						case IResource.FOLDER :
							nonJavaResourcesChanged(parentElement, delta);
					}
				}
			} catch (JavaModelException e) {
				// do nothing
			}
		}
		if (fProcessChildren) {
			IResourceDelta[] children = delta.getAffectedChildren();
			for (int i = 0; i < children.length; i++) {
				traverseDelta(children[i], element);
			}
		}
	}

