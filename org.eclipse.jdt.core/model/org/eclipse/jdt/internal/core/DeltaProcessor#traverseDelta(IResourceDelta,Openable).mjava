/**
 * Converts an <code>IResourceDelta</code> and its children into
 * the corresponding <code>IJavaElementDelta</code>s.
 */
protected void traverseDelta(IResourceDelta delta, Openable parentElement) {
	Openable[] elements = this.createElements(delta.getResource());
	Openable element = null;
	int flags = delta.getFlags();
	fProcessChildren = true;
	if (elements != null) {
		for (int i = 0, length = elements.length; i < length; i++) {
			element = elements[i];
			IResource res = delta.getResource();

			updateIndex(element, delta);
			switch (delta.getKind()) {
				case IResourceDelta.ADDED:
					PackageFragmentRoot pkgRoot;
					if (res.getType() == IResource.FILE 
						&& parentElement != null 
						&& !parentElement.equals(element.getParent())
						&& ((pkgRoot = element.getPackageFragmentRoot()) == null || !isOnClasspath(pkgRoot))){
						try { // fake compilation/class file scenario (see JavaCore.createCompilationUnitFrom & createClassFileFrom
							nonJavaResourcesChanged(parentElement, delta);
							break;
						} catch(JavaModelException e) {
						}
					}
					elementAdded(element, delta);
					break;
				case IResourceDelta.REMOVED:
					if (res.getType() == IResource.FILE 
						&& parentElement != null 
						&& !parentElement.equals(element.getParent())
						&& ((pkgRoot = element.getPackageFragmentRoot()) == null || !isOnClasspath(pkgRoot))){
						try { // fake compilation/class file scenario (see JavaCore.createCompilationUnitFrom & createClassFileFrom
							nonJavaResourcesChanged(parentElement, delta);
							break;
						} catch(JavaModelException e) {
						}
					}
					elementRemoved(element, delta);
					break;
				case IResourceDelta.CHANGED:
					if ((flags & IResourceDelta.CONTENT) != 0) {
						contentChanged(element, delta);
						break;
					}
					if ((flags & IResourceDelta.OPEN) != 0) {
						res = delta.getResource();
						if (isOpen(res)) {
							elementOpened(element, delta);
						} else {
							elementClosed(element, delta);
						}
						break;
					}
					break;
			}
		}
	} else {
		try {
			if (parentElement != null && delta.getResource() != null) {
				switch (delta.getResource().getType()) {
					case IResource.FILE:
					case IResource.FOLDER:
						nonJavaResourcesChanged(parentElement, delta);
				}
			}
		} catch (JavaModelException e) {
			// do nothing
		}
			
		// checked for a moved root - the factory cannot create elements for roots not specified
		// on the classpath.
		if (delta.getKind() == IResourceDelta.ADDED &&
			((flags & IResourceDelta.MOVED_FROM) > 1)) {
				IProject project = delta.getResource().getProject();
				if (project != null) {
					JavaProject jp = (JavaProject)JavaCore.create(project);
					if (jp != null) {
						try {
							IClasspathEntry oldEntry = jp.getClasspathEntryFor(delta.getMovedFromPath());
							if (oldEntry != null) {
								IClasspathEntry newEntry = newClasspathEntry(jp, oldEntry, delta.getResource().getFullPath());
								addClasspathEntry(jp, oldEntry, newEntry);
								// now the factory can create the root.
								element = (Openable)JavaCore.create(delta.getResource());
								elementAdded(element, delta);
								JavaElementDelta rootDelta = fCurrentDelta.find(element);
								rootDelta.setFlags(rootDelta.getFlags() | IJavaElementDelta.F_ADDED_TO_CLASSPATH);
							}
						} catch (JavaModelException e) {
							// nothing
						}
					}
				}
			}
	}
	if (fProcessChildren) {
		IResourceDelta[] children = delta.getAffectedChildren();
		for (int i = 0; i < children.length; i++) {
			traverseDelta(children[i], element);
		}
	}
}

