	/**
	 * Merges resource deltas and Java Model deltas, and fires the
	 * result, flushing all deltas. If the firing mode has been 
	 * turned off, this has no effect. 
	 */
	public void fire() {
		if (fFire) {
			Iterator deltas= null;
			if (fJavaModelDeltas.isEmpty()) {
				deltas= fResourceDeltas.iterator();
			} else {
				deltas= fJavaModelDeltas.iterator();
			}
			try {
				while (deltas.hasNext()) {
					IJavaElementDelta delta= (IJavaElementDelta) deltas.next();
					if (DeltaProcessor.VERBOSE){
						System.out.println("FIRING Delta ("+ Thread.currentThread()+"):"+ delta);//$NON-NLS-1$//$NON-NLS-2$
					}
					ElementChangedEvent event= new ElementChangedEvent(delta);
					// Clone the listeners since they could remove themselves when told about the event 
					// (eg. a type hierarchy becomes invalid (and thus it removes itself) when the type is removed
					ArrayList listeners= (ArrayList) fElementChangedListeners.clone();
					for (int i= 0; i < listeners.size(); i++) {
						IElementChangedListener listener= (IElementChangedListener) listeners.get(i);
						listener.elementChanged(event);
					}
				}
			} finally {
				// empty the queues
				flush();
			}
		}
	}

