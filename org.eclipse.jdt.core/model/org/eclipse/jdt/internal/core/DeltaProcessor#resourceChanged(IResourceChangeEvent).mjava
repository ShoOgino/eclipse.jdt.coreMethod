	/*
	 * Notification that some resource changes have happened
	 * on the platform, and that the Java Model should update any required
	 * internal structures such that its elements remain consistent.
	 * Translates <code>IResourceDeltas</code> into <code>IJavaElementDeltas</code>.
	 *
	 * @see IResourceDelta
	 * @see IResource 
	 */
	public void resourceChanged(IResourceChangeEvent event) {
	
		if (event.getSource() instanceof IWorkspace) {
			IResource resource = event.getResource();
			IResourceDelta delta = event.getDelta();
			
			switch(event.getType()){
				case IResourceChangeEvent.PRE_DELETE :
					try {
						if(resource.getType() == IResource.PROJECT 
							&& ((IProject) resource).hasNature(JavaCore.NATURE_ID)) {
								
							deleting((IProject)resource);
						}
					} catch(CoreException e){
					}
					return;
					
				case IResourceChangeEvent.PRE_AUTO_BUILD :
					if(isAffectedBy(delta)) { // avoid populating for SYNC or MARKER deltas
						checkProjectsBeingAddedOrRemoved(delta);
						
						// update the classpath related markers
						updateClasspathMarkers();
	
						// the following will close project if affected by the property file change
						try {
							// don't fire classpath change deltas right away, but batch them
							stopDeltas();
							performPreBuildCheck(delta, null); 
						} finally {
							startDeltas();
						}
					}
					// only fire already computed deltas (resource ones will be processed in post change only)
					fire(null, ElementChangedEvent.PRE_AUTO_BUILD);
					break;

				case IResourceChangeEvent.POST_AUTO_BUILD :
					JavaBuilder.finishedBuilding(event);
					break;
					
				case IResourceChangeEvent.POST_CHANGE :
					if (isAffectedBy(delta)) { // avoid populating for SYNC or MARKER deltas
						try {
							if (this.refreshedElements != null) {
								createExternalArchiveDelta(null);
							}
							IJavaElementDelta translatedDelta = processResourceDelta(delta);
							if (translatedDelta != null) { 
								registerJavaModelDelta(translatedDelta);
							}
							fire(null, ElementChangedEvent.POST_CHANGE);
						} finally {
							// workaround for bug 15168 circular errors not reported 
							this.manager.javaProjectsCache = null;
							this.removedRoots = null;
						}
					}
			}
		}
	}

