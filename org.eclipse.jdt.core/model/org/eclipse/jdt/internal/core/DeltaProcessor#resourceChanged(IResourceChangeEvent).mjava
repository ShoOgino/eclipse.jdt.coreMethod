	/*
	 * Notification that some resource changes have happened
	 * on the platform, and that the Java Model should update any required
	 * internal structures such that its elements remain consistent.
	 * Translates <code>IResourceDeltas</code> into <code>IJavaElementDeltas</code>.
	 *
	 * @see IResourceDelta
	 * @see IResource 
	 */
	public void resourceChanged(IResourceChangeEvent event) {
	
		if (event.getSource() instanceof IWorkspace) {
			IResource resource = event.getResource();
			IResourceDelta delta = event.getDelta();
			
			switch(event.getType()){
				case IResourceChangeEvent.PRE_DELETE :
					try {
						if(resource.getType() == IResource.PROJECT 
							&& ((IProject) resource).hasNature(JavaCore.NATURE_ID)) {
								
							deleting((IProject)resource);
						}
					} catch(CoreException e){
						// project doesn't exist or is not open: ignore
					}
					return;
					
				case IResourceChangeEvent.PRE_AUTO_BUILD :
					// this.processPostChange = false;
					if(isAffectedBy(delta)) { // avoid populating for SYNC or MARKER deltas
						Map preferredClasspaths = new HashMap(5);
						Map preferredOutputs = new HashMap(5);
						performPreBuildCheck(delta, preferredClasspaths, preferredOutputs); 
						updateClasspathMarkers(preferredClasspaths, preferredOutputs);
						JavaBuilder.buildStarting();
					}
					// does not fire any deltas
					break;

				case IResourceChangeEvent.POST_AUTO_BUILD :
					JavaBuilder.buildFinished();
					break;
					
				case IResourceChangeEvent.POST_CHANGE :
					if (isAffectedBy(delta)) { // avoid populating for SYNC or MARKER deltas
						try {
							try {
								stopDeltas();
								checkProjectsBeingAddedOrRemoved(delta);
								if (this.refreshedElements != null) {
									createExternalArchiveDelta(null);
								}
								IJavaElementDelta translatedDelta = processResourceDelta(delta);
								if (translatedDelta != null) { 
									registerJavaModelDelta(translatedDelta);
								}
							} finally {
								startDeltas();
							}
							notifyTypeHierarchies(this.state.elementChangedListeners, this.state.elementChangedListenerCount);
							fire(null, ElementChangedEvent.POST_CHANGE);
						} finally {
							// workaround for bug 15168 circular errors not reported 
							this.state.modelProjectsCache = null;
							this.removedRoots = null;
						}
					}
			}
		}
	}

