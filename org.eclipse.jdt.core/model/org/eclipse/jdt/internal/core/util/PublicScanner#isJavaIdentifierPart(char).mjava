/**
 * isJavaIdentifierPart(int)
 * <ol>
 * <li>isLetter(codePoint)  returns true
 *    <ul>
 *    <li>UPPERCASE_LETTER (General category "Lu" in the Unicode specification)</li>
 *    <li>LOWERCASE_LETTER (General category "Ll" in the Unicode specification)</li>
 *    <li>TITLECASE_LETTER (General category "Lt" in the Unicode specification)</li>
 *    <li>MODIFIER_LETTER (General category "Lm" in the Unicode specification)</li>
 *    <li>OTHER_LETTER (General category "Lo" in the Unicode specification)</li>
 *    </ul>
 * </li>
 * <li>getType(codePoint) returns LETTER_NUMBER (General category "Nl" in the Unicode specification)</li>
 * <li>the referenced character is a currency symbol (such as "$") (General category "Sc" in the Unicode specification)</li>
 * <li>the referenced character is a connecting punctuation character (such as "_") (General category "Pc" in the Unicode specification)</li>
 * <li>it is a digit (General category "Nd" in the Unicode specification)<br>
 * Some Unicode character ranges that contain digits:
 * <ul>
 * <li>'\u0030' through '\u0039', ISO-LATIN-1 digits ('0' through '9')</li>
 * <li>'\u0660' through '\u0669', Arabic-Indic digits</li>
 * <li>'\u06F0' through '\u06F9', Extended Arabic-Indic digits</li>
 * <li>'\u0966' through '\u096F', Devanagari digits</li>
 * <li>'\uFF10' through '\uFF19', Fullwidth digits</li>
 * </ul></li>
 * <li>it is a numeric letter (such as a Roman numeral character)</li>
 * <li>it is a combining mark (General category "Mc" in the Unicode specification)</li>
 * <li>it is a non-spacing mark (General category "Mn" in the Unicode specification)</li>
 * <li>isIdentifierIgnorable(codePoint) returns true for the character</li>
 * <li>ISO control characters that are not whitespace
 * <ul>
 *	   <li>'\u0000' through '\u0008'</li>
 *	   <li>'\u000E' through '\u001B'</li>
 *	   <li>'\u007F' through '\u009F'</li>
 * </ul></li>
 * <li>all characters that have the FORMAT general category value (General category "Cf" in the Unicode specification)</li>
 * </ol>
 */
private boolean isJavaIdentifierPart(char c) throws InvalidInputException {
	if (c >= HIGH_SURROGATE_MIN_VALUE && c <= HIGH_SURROGATE_MAX_VALUE) {
		if (this.complianceLevel < ClassFileConstants.JDK1_5) {
			throw new InvalidInputException(INVALID_UNICODE_ESCAPE);
		}
		// Unicode 4 detection
		char low = (char) getNextChar();
		if (low < LOW_SURROGATE_MIN_VALUE || low > LOW_SURROGATE_MAX_VALUE) {
			// illegal low surrogate
			throw new InvalidInputException(INVALID_LOW_SURROGATE);
		}
		return ScannerHelper.isJavaIdentifierPart(c, low);
	}
	if (c >= LOW_SURROGATE_MIN_VALUE && c <= LOW_SURROGATE_MAX_VALUE) {
		if (this.complianceLevel < ClassFileConstants.JDK1_5) {
			throw new InvalidInputException(INVALID_UNICODE_ESCAPE);
		}
		throw new InvalidInputException(INVALID_HIGH_SURROGATE);
	}
	return Character.isJavaIdentifierPart(c);
}

