	private void disassemble(IConstantPool constantPool, StringBuffer buffer, String lineSeparator, int tabNumber) {
		writeNewLine(buffer, lineSeparator, tabNumber);
		int length = constantPool.getConstantPoolCount();
		buffer.append(Util.bind("disassembler.constantpoolheader")); //$NON-NLS-1$
		writeNewLine(buffer, lineSeparator, tabNumber + 1);
		for (int i = 1; i < length; i++) {
			IConstantPoolEntry constantPoolEntry = constantPool.decodeEntry(i);
			switch (constantPool.getEntryKind(i)) {
				case IConstantPoolConstant.CONSTANT_Class :
					buffer.append(
						Util.bind("disassembler.constantpool.class", //$NON-NLS-1$
						new String[] {
							Integer.toString(i),
							Integer.toString(constantPoolEntry.getClassInfoNameIndex()),
							new String(constantPoolEntry.getClassInfoName())})); //$NON-NLS-1$
					break;
				case IConstantPoolConstant.CONSTANT_Double :
					buffer.append(
						Util.bind("disassembler.constantpool.double", //$NON-NLS-1$
						new String[] {
							Integer.toString(i),
							Double.toString(constantPoolEntry.getDoubleValue())})); //$NON-NLS-1$
					break;
				case IConstantPoolConstant.CONSTANT_Fieldref :
					buffer.append(
						Util.bind("disassembler.constantpool.fieldref", //$NON-NLS-1$
						new String[] {
							Integer.toString(i),
							Integer.toString(constantPoolEntry.getClassIndex()),
							Integer.toString(constantPoolEntry.getNameAndTypeIndex()),
							new String(constantPoolEntry.getClassName()),
							getFieldRefNameAndType(constantPoolEntry)})); //$NON-NLS-1$
					break;
				case IConstantPoolConstant.CONSTANT_Float :
					buffer.append(
						Util.bind("disassembler.constantpool.float", //$NON-NLS-1$
						new String[] {
							Integer.toString(i),
							Float.toString(constantPoolEntry.getFloatValue())})); //$NON-NLS-1$
					break;
				case IConstantPoolConstant.CONSTANT_Integer :
					buffer.append(
						Util.bind("disassembler.constantpool.integer", //$NON-NLS-1$
						new String[] {
							Integer.toString(i),
							Integer.toString(constantPoolEntry.getIntegerValue())})); //$NON-NLS-1$
					break;
				case IConstantPoolConstant.CONSTANT_InterfaceMethodref :
					buffer.append(
							Util.bind("disassembler.constantpool.interfacemethodref", //$NON-NLS-1$
							new String[] {
								Integer.toString(i),
								Integer.toString(constantPoolEntry.getClassIndex()),
								Integer.toString(constantPoolEntry.getNameAndTypeIndex()),
								new String(constantPoolEntry.getClassName()),
								getMethodRefNameAndType(constantPoolEntry)})); //$NON-NLS-1$
					break;
				case IConstantPoolConstant.CONSTANT_Long :
					buffer.append(
						Util.bind("disassembler.constantpool.long", //$NON-NLS-1$
						new String[] {
							Integer.toString(i),
							Long.toString(constantPoolEntry.getLongValue())})); //$NON-NLS-1$
					break;
				case IConstantPoolConstant.CONSTANT_Methodref :
					buffer.append(
							Util.bind("disassembler.constantpool.methodref", //$NON-NLS-1$
							new String[] {
								Integer.toString(i),
								Integer.toString(constantPoolEntry.getClassIndex()),
								Integer.toString(constantPoolEntry.getNameAndTypeIndex()),
								new String(constantPoolEntry.getClassName()),
								getMethodRefNameAndType(constantPoolEntry)})); //$NON-NLS-1$
					break;
				case IConstantPoolConstant.CONSTANT_NameAndType :
					int nameIndex = constantPoolEntry.getNameAndTypeInfoNameIndex();
					int typeIndex = constantPoolEntry.getNameAndTypeInfoDescriptorIndex();
					IConstantPoolEntry entry = constantPool.decodeEntry(nameIndex);
					char[] nameValue = (char[]) entry.getUtf8Value().clone();
					entry = constantPool.decodeEntry(typeIndex);
					char[] typeValue = (char[])  entry.getUtf8Value().clone();
					buffer.append(
						Util.bind("disassembler.constantpool.name_and_type", //$NON-NLS-1$
						new String[] {
							Integer.toString(i),
							Integer.toString(nameIndex),
							Integer.toString(typeIndex),
							String.valueOf(nameValue),
							String.valueOf(typeValue)})); //$NON-NLS-1$
					break;
				case IConstantPoolConstant.CONSTANT_String :
					buffer.append(
						Util.bind("disassembler.constantpool.string", //$NON-NLS-1$
						new String[] {
							Integer.toString(i),
							Integer.toString(constantPoolEntry.getStringIndex()),
							constantPoolEntry.getStringValue()})); //$NON-NLS-1$
					break;
				case IConstantPoolConstant.CONSTANT_Utf8 :
					buffer.append(
						Util.bind("disassembler.constantpool.utf8", //$NON-NLS-1$
						new String[] {
							Integer.toString(i),
							new String(constantPoolEntry.getUtf8Value())})); //$NON-NLS-1$
					break;
			}
			if (i < length - 1) {
				writeNewLine(buffer, lineSeparator, tabNumber + 1);
			}
		}
	}

