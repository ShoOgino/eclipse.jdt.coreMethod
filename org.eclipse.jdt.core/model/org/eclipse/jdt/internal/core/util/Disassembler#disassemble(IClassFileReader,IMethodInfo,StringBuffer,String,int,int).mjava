	/**
	 * Disassemble a method info header
	 */
	private void disassemble(IClassFileReader classFileReader, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode) {
		writeNewLine(buffer, lineSeparator, tabNumber);
		int accessFlags = methodInfo.getAccessFlags();
		decodeModifiersForMethod(buffer, accessFlags);
		char[] methodDescriptor = methodInfo.getDescriptor();
		CharOperation.replace(methodDescriptor, '/', '.');
		char[] methodName = null;
		if (methodInfo.isConstructor()) {
			methodName = classFileReader.getClassName();
			buffer.append(Signature.toCharArray(methodDescriptor, methodName, getParameterNames(methodDescriptor) , true, false));
		} else if (methodInfo.isClinit()) {
			methodName = Util.bind("classfileformat.clinitname").toCharArray(); //$NON-NLS-1$
			buffer.append(methodName);
		} else {
			methodName = methodInfo.getName();
			buffer.append(Signature.toCharArray(methodDescriptor, methodName, getParameterNames(methodDescriptor) , false, true));
		}
		IExceptionAttribute exceptionAttribute = methodInfo.getExceptionAttribute();
		if (exceptionAttribute != null) {
			buffer.append(Util.bind("classfileformat.throws")); //$NON-NLS-1$
			char[][] exceptionNames = exceptionAttribute.getExceptionNames();
			int length = exceptionNames.length;
			for (int i = 0; i < length - 1; i++) {
				char[] exceptionName = exceptionNames[i];
				CharOperation.replace(exceptionName, '/', '.');
				buffer
					.append(exceptionName)
					.append(Util.bind("disassembler.comma")); //$NON-NLS-1$
			}
			char[] exceptionName = exceptionNames[length - 1];
			CharOperation.replace(exceptionName, '/', '.');
			buffer.append(exceptionName);
			buffer.append(Util.bind("disassembler.space")); //$NON-NLS-1$
		}
		buffer.append(Util.bind("disassembler.endofmethodheader")); //$NON-NLS-1$
		writeNewLine(buffer, lineSeparator, tabNumber);
		if (mode == IClassFileDisassembler.DETAILED) {
			CharOperation.replace(methodDescriptor, '.', '/');
			buffer
				.append(Util.bind("disassembler.commentstart")) //$NON-NLS-1$
				.append(Util.bind("classfileformat.methoddescriptor")) //$NON-NLS-1$
				.append(Util.bind("disassembler.constantpoolindex")) //$NON-NLS-1$
				.append(methodInfo.getDescriptorIndex())
				.append(Util.bind("disassembler.space")) //$NON-NLS-1$
				.append(methodDescriptor)
				.append(Util.bind("disassembler.commentend")); //$NON-NLS-1$
			writeNewLine(buffer, lineSeparator, tabNumber);
		}
		ICodeAttribute codeAttribute = methodInfo.getCodeAttribute();
		IClassFileAttribute[] attributes = methodInfo.getAttributes();
		int length = attributes.length;
		if (length != 0) {
			for (int i = 0; i < length; i++) {
				IClassFileAttribute attribute = attributes[i];
				if ((attribute != codeAttribute) && (attribute != exceptionAttribute)) {
					disassemble(attribute, buffer, lineSeparator, tabNumber);
					writeNewLine(buffer, lineSeparator, tabNumber);
				}
			}
		}
		if (codeAttribute != null) {
			disassemble(codeAttribute, buffer, lineSeparator, tabNumber);
			writeNewLine(buffer, lineSeparator, tabNumber);
		}
	}

