	private void disassembleModule(IModuleAttribute moduleAttribute, StringBuffer buffer, String lineSeparator, int tabNumber) {
		writeNewLine(buffer, lineSeparator, tabNumber);
		char[] moduleVersion = moduleAttribute.getModuleVersionValue();
		if (moduleVersion == null) {
			moduleVersion = Messages.disassembler_module_version_none.toCharArray();
		}
		buffer.append(Messages.bind(Messages.disassembler_module_version, new String(moduleVersion)));
		IRequiresInfo[] requiresInfo = moduleAttribute.getRequiresInfo();
		if (requiresInfo.length > 0) {
			writeNewLine(buffer, lineSeparator, 0);
			for (int i = 0, max = requiresInfo.length; i < max; i++) {
				writeNewLine(buffer, lineSeparator, tabNumber);
				disassemble(requiresInfo[i], buffer, lineSeparator, tabNumber);
			}
		}
		IPackageVisibilityInfo[] exportInfos = moduleAttribute.getExportsInfo();
		if (exportInfos.length > 0) {
			writeNewLine(buffer, lineSeparator, 0);
			for (int i = 0, max = exportInfos.length; i < max; i++) {
				writeNewLine(buffer, lineSeparator, tabNumber);
				disassemble(exportInfos[i], buffer, lineSeparator, tabNumber, true);
			}
		}
		IPackageVisibilityInfo[] opensInfos = moduleAttribute.getOpensInfo();
		if (opensInfos.length > 0) {
			writeNewLine(buffer, lineSeparator, 0);
			for (int i = 0, max = opensInfos.length; i < max; i++) {
				writeNewLine(buffer, lineSeparator, tabNumber);
				disassemble(opensInfos[i], buffer, lineSeparator, tabNumber, false);
			}
		}
		char[][] usesNames = moduleAttribute.getUsesClassNames();
		if (usesNames.length > 0) {
			writeNewLine(buffer, lineSeparator, 0);
			for (int i = 0, max = usesNames.length; i < max; i++) {
				writeNewLine(buffer, lineSeparator, tabNumber);
				buffer.append("uses " + CharOperation.charToString(CharOperation.replaceOnCopy(usesNames[i], '/','.'))); //$NON-NLS-1$
			}
		}
		IProvidesInfo[] providesInfos = moduleAttribute.getProvidesInfo();
		if (providesInfos.length > 0) {
			writeNewLine(buffer, lineSeparator, 0);
			for (int i = 0, max = providesInfos.length; i < max; i++) {
				writeNewLine(buffer, lineSeparator, tabNumber);
				disassemble(providesInfos[i], buffer, lineSeparator, tabNumber);
			}
		}
	}

