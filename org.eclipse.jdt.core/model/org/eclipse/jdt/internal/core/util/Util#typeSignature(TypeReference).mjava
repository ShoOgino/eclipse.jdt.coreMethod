	/*
	 * Returns the unresolved type signature of the given type reference,
	 * e.g. "QString;", "[int", "[[Qjava.util.Vector;"
	 */
	public static String typeSignature(TypeReference type) {
		String signature = null;
		if ((type.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.IsUnionType) != 0) {
			// special treatment for union type reference
			UnionTypeReference unionTypeReference = (UnionTypeReference) type;
			TypeReference[] typeReferences = unionTypeReference.typeReferences;
			int length = typeReferences.length;
			String[] typeSignatures = new String[length];
			for(int i = 0; i < length; i++) {
				char[][] compoundName = typeReferences[i].getParameterizedTypeName();
				char[] typeName = CharOperation.concatWith(compoundName, '.');
				typeSignatures[i] = Signature.createTypeSignature(typeName, false/*don't resolve*/);
			}
			signature = Signature.createIntersectionTypeSignature(typeSignatures);
		} else {
			char[][] compoundName = type.getParameterizedTypeName();
			char[] typeName =CharOperation.concatWith(compoundName, '.');
			signature = Signature.createTypeSignature(typeName, false/*don't resolve*/);
		}
		return signature;
	}

