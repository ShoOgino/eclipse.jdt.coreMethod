	public PackageVisibilityInfo(byte[] classFileBytes, IConstantPool constantPool, int offset) throws ClassFormatException {
		int readOffset = 0;
		this.index = u2At(classFileBytes, readOffset, offset);
		readOffset += 2;
		IConstantPoolEntry constantPoolEntry = constantPool.decodeEntry(this.index);
		if (constantPoolEntry.getKind() != IConstantPoolConstant.CONSTANT_Package) {
			throw new ClassFormatException(ClassFormatException.INVALID_CONSTANT_POOL_ENTRY);
		}
		char[] tmp = ((IConstantPoolEntry3) constantPoolEntry).getPackageName();
		this.packageName = tmp != null ? tmp : CharOperation.NO_CHAR;

		this.flags = u2At(classFileBytes, readOffset, offset);
		readOffset += 2;
		this.targetsCount = u2At(classFileBytes, readOffset, offset);
		readOffset += 2;

		if (this.targetsCount != 0) {
			this.targetModuleIndices = new int[this.targetsCount];
			this.targetModuleNames = new char[this.targetsCount][];
			for (int i = 0; i < this.targetsCount; i++) {
				this.targetModuleIndices[i] = u2At(classFileBytes, readOffset, offset);
				readOffset += 2;
				constantPoolEntry = constantPool.decodeEntry(this.targetModuleIndices[i]);
				if (constantPoolEntry.getKind() != IConstantPoolConstant.CONSTANT_Module) {
					throw new ClassFormatException(ClassFormatException.INVALID_CONSTANT_POOL_ENTRY);
				}
				tmp = ((IConstantPoolEntry3) constantPoolEntry).getModuleName();
				this.targetModuleNames[i] = tmp != null ? tmp : CharOperation.NO_CHAR;
			}
		} else {
			this.targetModuleIndices = new int[0];
			this.targetModuleNames = CharOperation.NO_CHAR_CHAR;
		}
	}

