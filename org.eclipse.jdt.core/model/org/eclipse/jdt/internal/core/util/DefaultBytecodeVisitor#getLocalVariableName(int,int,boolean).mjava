	private String getLocalVariableName(int pc, int index, boolean showIndex) {
		int nextPC = pc + 1;
		switch(index) {
			case 0 :
			case 1 :
			case 2 :
			case 3 :
				break;
			default :
				nextPC = index <= 255 ? pc + 2 : pc + 3;
		}

		for (int i = 0, max = this.localVariableAttributeLength; i < max; i++) {
			final ILocalVariableTableEntry entry = this.localVariableTableEntries[i];
			final int startPC = entry.getStartPC();
			if (entry.getIndex() == index && (startPC <= nextPC) && ((startPC + entry.getLength()) > nextPC)) {
				final StringBuffer stringBuffer = new StringBuffer();
				if (showIndex) {
					stringBuffer.append(' ').append(index);
				}
				stringBuffer.append(' ').append('[').append(entry.getName()).append(']');
				return String.valueOf(stringBuffer);
			}
		}
		if (this.parameterNames != null) {
			if (index == 0) {
				if (!this.isStatic) {
					final StringBuffer stringBuffer = new StringBuffer();
					stringBuffer.append(' ').append('[').append("this").append(']'); //$NON-NLS-1$
					return String.valueOf(stringBuffer);
				}
			}
			int indexInParameterNames = index;
			if (index != 0) {
				int resolvedPosition = 0;
				if (!this.isStatic) {
					resolvedPosition = 1;
				}
				int i = 0;
				loop: for (int max = this.argumentSizes.length; i < max; i++) {
					if (index == resolvedPosition) {
						break loop;
					}
					resolvedPosition += this.argumentSizes[i];
				}
				indexInParameterNames = i;
			}
			if (indexInParameterNames < this.parameterNames.length
					&& this.parameterNames[indexInParameterNames] != null) {
				final StringBuffer stringBuffer = new StringBuffer();
				if (showIndex) {
					stringBuffer.append(' ').append(index);
				}
				stringBuffer.append(' ').append('[').append(this.parameterNames[indexInParameterNames]).append(']');
				return String.valueOf(stringBuffer);
			}
		}
		if (showIndex) {
			final StringBuffer stringBuffer = new StringBuffer();
			stringBuffer.append(' ').append(index);
			return String.valueOf(stringBuffer);
		}
		return EMPTY_LOCAL_NAME;
	}

