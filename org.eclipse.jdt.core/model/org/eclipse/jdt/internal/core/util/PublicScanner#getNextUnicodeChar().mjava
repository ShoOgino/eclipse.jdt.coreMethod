	public void getNextUnicodeChar()
	throws InvalidInputException {
		//VOID
		//handle the case of unicode.
		//when a unicode appears then we must use a buffer that holds char internal values
		//At the end of this method currentCharacter holds the new visited char
		//and currentPosition points right next after it

		//ALL getNextChar.... ARE OPTIMIZED COPIES
		int c1 = 0, c2 = 0, c3 = 0, c4 = 0, unicodeSize = 6;
		this.currentPosition++;
		if (this.currentPosition < this.eofPosition) {
			while (this.source[this.currentPosition] == 'u') {
				this.currentPosition++;
				if (this.currentPosition >= this.eofPosition) {
					this.currentPosition--;
					throw new InvalidInputException(INVALID_UNICODE_ESCAPE);
				}
				unicodeSize++;
			}
		} else {
			this.currentPosition--;
			throw new InvalidInputException(INVALID_UNICODE_ESCAPE);
		}

		if ((this.currentPosition + 4) > this.eofPosition) {
			this.currentPosition += (this.eofPosition - this.currentPosition);
			throw new InvalidInputException(INVALID_UNICODE_ESCAPE);
		}
		if ((c1 = ScannerHelper.getNumericValue(this.source[this.currentPosition++])) > 15
				|| c1 < 0
				|| (c2 = ScannerHelper.getNumericValue(this.source[this.currentPosition++])) > 15
				|| c2 < 0
				|| (c3 = ScannerHelper.getNumericValue(this.source[this.currentPosition++])) > 15
				|| c3 < 0
				|| (c4 = ScannerHelper.getNumericValue(this.source[this.currentPosition++])) > 15
				|| c4 < 0){
			throw new InvalidInputException(INVALID_UNICODE_ESCAPE);
		}
		this.currentCharacter = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);
		//need the unicode buffer
		if (this.withoutUnicodePtr == 0) {
			//buffer all the entries that have been left aside....
			unicodeInitializeBuffer(this.currentPosition - unicodeSize - this.startPosition);
		}
		//fill the buffer with the char
		unicodeStore();
		this.unicodeAsBackSlash = this.currentCharacter == '\\';
	}

