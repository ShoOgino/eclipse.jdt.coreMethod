	/**
	 * Disassemble the class file reader.
	 */
	public String disassemble(IClassFileReader classFileReader, String lineSeparator) {
		if (classFileReader == null) return EMPTY_OUTPUT;
		
		StringBuffer buffer = new StringBuffer();

		buffer.append(Util.bind("classfileformat.magicnumber")); //$NON-NLS-1$
		buffer.append(' ');
		buffer.append(Integer.toHexString(classFileReader.getMagic()).toUpperCase());
		writeNewLine(buffer, lineSeparator, 0);
		buffer.append(Util.bind("classfileformat.minorversion")); //$NON-NLS-1$
		buffer.append(' ');
		buffer.append(classFileReader.getMinorVersion());
		writeNewLine(buffer, lineSeparator, 0);
		buffer.append(Util.bind("classfileformat.majorversion")); //$NON-NLS-1$
		buffer.append(' ');
		buffer.append(classFileReader.getMajorVersion());
		writeNewLine(buffer, lineSeparator, 0);
		writeNewLine(buffer, lineSeparator, 0);
		ISourceAttribute sourceAttribute = classFileReader.getSourceFileAttribute();
		if (sourceAttribute != null) {
			buffer.append(Util.bind("classfileformat.sourcename")); //$NON-NLS-1$
			buffer.append(' ');
			buffer.append(sourceAttribute.getSourceFileName());
			writeNewLine(buffer, lineSeparator, 0);
		}
		char[] className = classFileReader.getClassName();
		if (className == null) {
			// incomplete initialization. We cannot go further.
			return buffer.toString();
		}
		decodeModifiersForType(buffer, classFileReader.getAccessFlags());
		if (classFileReader.isClass()) {
			buffer.append(Util.bind("classfileformat.class")); //$NON-NLS-1$
		} else {
			buffer.append(Util.bind("classfileformat.interface")); //$NON-NLS-1$
		}
		buffer.append(' ');
		buffer.append(classFileReader.getClassName());
		buffer.append(' ');
		char[] superclassName = classFileReader.getSuperclassName();
		if (superclassName != null) {
			buffer.append(Util.bind("classfileformat.extends")); //$NON-NLS-1$
			buffer.append(' ');
			CharOperation.replace(superclassName, '/', '.');
			buffer.append(superclassName);
			buffer.append(' ');
		}
		char[][] superclassInterfaces = classFileReader.getInterfaceNames();
		int length = superclassInterfaces.length;
		if (length != 0) {
			buffer.append(Util.bind("classfileformat.implements")); //$NON-NLS-1$
			buffer.append(' ');
			for (int i = 0; i < length - 1; i++) {
				char[] superinterface = superclassInterfaces[i];
				CharOperation.replace(superinterface, '/', '.');
				buffer
					.append(superinterface)
					.append(',')
					.append(' ');
			}
			char[] superinterface = superclassInterfaces[length - 1];
			CharOperation.replace(superinterface, '/', '.');
			buffer.append(superinterface);
			buffer.append(' ');
		}
		buffer.append(Util.bind("disassembler.opentypedeclaration")); //$NON-NLS-1$
		checkSuperFlags(buffer, classFileReader.getAccessFlags(), lineSeparator, 1);
		disassembleTypeMembers(classFileReader, buffer, lineSeparator, 1);
		writeNewLine(buffer, lineSeparator, 0);
		writeNewLine(buffer, lineSeparator, 0);
		IInnerClassesAttribute innerClassesAttribute = classFileReader.getInnerClassesAttribute();
		if (innerClassesAttribute != null) {
			disassemble(innerClassesAttribute, buffer, lineSeparator, 1);
		}
		writeNewLine(buffer, lineSeparator, 0);
		IClassFileAttribute[] attributes = classFileReader.getAttributes();
		length = attributes.length;
		if (length != 0) {
			for (int i = 0; i < length; i++) {
				IClassFileAttribute attribute = attributes[i];
				if (attribute != innerClassesAttribute
					&& attribute != sourceAttribute) {
					disassemble(attribute, buffer, lineSeparator, 0);
				}
			}
		}		
		writeNewLine(buffer, lineSeparator, 0);
		buffer.append(Util.bind("disassembler.closetypedeclaration")); //$NON-NLS-1$
		return buffer.toString();
	}

