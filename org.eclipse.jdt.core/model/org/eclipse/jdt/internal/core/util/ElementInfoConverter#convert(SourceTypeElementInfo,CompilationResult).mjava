	/*
	 * Convert a source type info into a parsed type declaration
	 *
	 * Can optionally ignore fields & methods
	 */
	private TypeDeclaration convert(
		SourceTypeElementInfo sourceType,
		CompilationResult compilationResult) {
		/* create type declaration - can be member type */
		TypeDeclaration type;
		boolean isAnonymous = false;
		if (sourceType.getEnclosingType() == null) {
			IType typeHandle = ((SourceTypeElementInfo)sourceType).getHandle();
			try {
				if (typeHandle.isAnonymous()) {
					type = new AnonymousLocalTypeDeclaration(compilationResult);
					isAnonymous = true;
				} else if (typeHandle.isLocal()) {
					type = new LocalTypeDeclaration(compilationResult);
				} else {
					type = new TypeDeclaration(compilationResult);
				}
			} catch (JavaModelException e) {
				type = new TypeDeclaration(compilationResult);
			}
		}  else {
			type = new MemberTypeDeclaration(compilationResult);
		}
		if (!isAnonymous) {
			type.name = sourceType.getName();
		} else {
			type.name = AnonymousLocalTypeDeclaration.ANONYMOUS_EMPTY_NAME;
		}
		int start, end; // only positions available
		type.sourceStart = start = sourceType.getNameSourceStart();
		type.sourceEnd = end = sourceType.getNameSourceEnd();
		type.modifiers = sourceType.getModifiers();
		type.declarationSourceStart = sourceType.getDeclarationSourceStart();
		type.declarationSourceEnd = sourceType.getDeclarationSourceEnd();
		type.bodyEnd = type.declarationSourceEnd;

		/* set superclass and superinterfaces */
		if (sourceType.getSuperclassName() != null)
			type.superclass =
				createTypeReference(sourceType.getSuperclassName(), start, end);
		char[][] interfaceNames = sourceType.getInterfaceNames();
		int interfaceCount = interfaceNames == null ? 0 : interfaceNames.length;
		type.superInterfaces = new TypeReference[interfaceCount];
		for (int i = 0; i < interfaceCount; i++) {
			type.superInterfaces[i] = createTypeReference(interfaceNames[i], start, end);
		}
		
		/* convert member types */
		ISourceType[] sourceMemberTypes = sourceType.getMemberTypes();
		int sourceMemberTypeCount =
			sourceMemberTypes == null ? 0 : sourceMemberTypes.length;
		type.memberTypes = new MemberTypeDeclaration[sourceMemberTypeCount];
		for (int i = 0; i < sourceMemberTypeCount; i++) {
			type.memberTypes[i] =
				(MemberTypeDeclaration) convert((SourceTypeElementInfo)sourceMemberTypes[i], compilationResult);
		}
		
		// TODO (jerome) convert initializers if need local types
		
		/* convert fields */
		ISourceField[] sourceFields = sourceType.getFields();
		int sourceFieldCount = sourceFields == null ? 0 : sourceFields.length;
		type.fields = new FieldDeclaration[sourceFieldCount];
		for (int i = 0; i < sourceFieldCount; i++) {
			type.fields[i] = convert((SourceFieldElementInfo)sourceFields[i], type, compilationResult);
		}

		/* convert methods - need to add default constructor if necessary */
		ISourceMethod[] sourceMethods = sourceType.getMethods();
		int sourceMethodCount = sourceMethods == null ? 0 : sourceMethods.length;

		/* source type has a constructor ?           */
		/* by default, we assume that one is needed. */
		int neededCount = 0;
		if (!type.isInterface()) {
			neededCount = 1;
			for (int i = 0; i < sourceMethodCount; i++) {
				if (sourceMethods[i].isConstructor()) {
					neededCount = 0;
					// Does not need the extra constructor since one constructor already exists.
					break;
				}
			}
		}
		type.methods = new AbstractMethodDeclaration[sourceMethodCount + neededCount];
		if (neededCount != 0) { // add default constructor in first position
			type.methods[0] = type.createsInternalConstructor(false, false);
		}
		boolean isInterface = type.isInterface();
		for (int i = 0; i < sourceMethodCount; i++) {
			AbstractMethodDeclaration method =convert((SourceMethodElementInfo)sourceMethods[i], compilationResult);
			if (isInterface || method.isAbstract()) { // fix-up flag 
				method.modifiers |= AccSemicolonBody;
			}
			type.methods[neededCount + i] = method;
		}

		return type;
	}

