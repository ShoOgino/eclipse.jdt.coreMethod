	private IJavaElement createElement(ASTNode[] nodeStack, int start, int end, IJavaElement parent) {
		if (start > end) return parent;
        ASTNode node = nodeStack[start];
        IJavaElement element = parent;
		switch(parent.getElementType()) {
	        case IJavaElement.COMPILATION_UNIT:
	            String typeName = new String(((TypeDeclaration)node).name);
	        	element = ((ICompilationUnit)parent).getType(typeName);
	        	break;
	        case IJavaElement.CLASS_FILE:
	            try {
                    element = ((IClassFile)parent).getType();
                } catch (JavaModelException e) {
					// class file doesn't exist: ignore
                }
                break;
            case IJavaElement.TYPE:
                IType type = (IType)parent;
                if (node instanceof ConstructorDeclaration) {
	 				element = type.getMethod(
						parent.getElementName(), 
						Util.typeParameterSignatures((ConstructorDeclaration)node));
				} else if (node instanceof MethodDeclaration) {
				    MethodDeclaration method = (MethodDeclaration)node;
					element = type.getMethod(
						new String(method.selector), 
						Util.typeParameterSignatures(method));
				} else if (node instanceof Initializer) {
				    int occurrenceCount = 1;
				    while (start < end) {
				        if (nodeStack[start+1] instanceof Initializer) {
				            start++;
				        	occurrenceCount++;
				    	} else {
				            break;
				    	}
				    }
				    element = type.getInitializer(occurrenceCount);
                } else if (node instanceof FieldDeclaration) {
                    String fieldName = new String(((FieldDeclaration)node).name);
                    element = type.getField(fieldName);
                } else if (node instanceof TypeDeclaration) {
					typeName = new String(((TypeDeclaration)node).name);
                    element = type.getType(typeName);
                }
                break;
			case IJavaElement.FIELD:
			    IField field = (IField)parent;
			    if (field.isBinary()) {
			        return null;
			    } else {
					// child of a field can only be anonymous type
					element = field.getType("", 1); //$NON-NLS-1$
			    }
				break;
			case IJavaElement.METHOD:
			case IJavaElement.INITIALIZER:
				IMember member = (IMember)parent;
				if (node instanceof TypeDeclaration) {
				    if (member.isBinary()) {
				        return null;
				    } else {
					    int typeIndex = start;
					    while (typeIndex <= end) {
					        ASTNode typeDecl = nodeStack[typeIndex+1];
					        if (typeDecl instanceof TypeDeclaration && (typeDecl.bits & ASTNode.AnonymousAndLocalMask) != 0) {
					            typeIndex++;
					    	} else {
					            break;
					    	}
					    }
					    char[] name = ((TypeDeclaration)nodeStack[typeIndex]).name;
					    int occurrenceCount = 1;
						for (int i = start; i < typeIndex; i++) {
						    if (CharOperation.equals(name, ((TypeDeclaration)nodeStack[i]).name)) {
						        occurrenceCount++;
						    }
						}
						start = typeIndex;
						typeName = (node.bits & ASTNode.IsAnonymousTypeMASK) != 0 ? "" : new String(name); //$NON-NLS-1$
						element = member.getType(typeName, occurrenceCount);
				    }
				} else if (node instanceof LocalDeclaration) {
				    if (start == end) {
					    LocalDeclaration local = (LocalDeclaration)node;
						element = new LocalVariable(
								(JavaElement)parent, 
								new String(local.name), 
								local.declarationSourceStart,
								local.declarationSourceEnd,
								local.sourceStart,
								local.sourceEnd,
								Util.typeSignature(local.type));
				    } // else the next node is an anonymous (initializer of the local variable)
				}
				break;
 	    }
	   return createElement(nodeStack, start+1, end, element);
	}

