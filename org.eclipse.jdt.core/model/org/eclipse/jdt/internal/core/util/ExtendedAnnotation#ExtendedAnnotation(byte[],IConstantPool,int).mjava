	/**
	 * Constructor for Annotation.
	 *
	 * @param classFileBytes
	 * @param constantPool
	 * @param offset
	 * @throws ClassFormatException
	 */
	public ExtendedAnnotation(
			byte[] classFileBytes,
			IConstantPool constantPool,
			int offset) throws ClassFormatException {

		int index = u2At(classFileBytes, 0, offset);
		this.typeIndex = index;
		if (index != 0) {
			IConstantPoolEntry constantPoolEntry = constantPool.decodeEntry(index);
			if (constantPoolEntry.getKind() != IConstantPoolConstant.CONSTANT_Utf8) {
				throw new ClassFormatException(ClassFormatException.INVALID_CONSTANT_POOL_ENTRY);
			}
			this.typeName = constantPoolEntry.getUtf8Value();
		} else {
			throw new ClassFormatException(ClassFormatException.INVALID_CONSTANT_POOL_ENTRY);
		}
		final int length = u2At(classFileBytes, 2, offset);
		this.componentsNumber = length;
		this.readOffset = 4;
		if (length != 0) {
			this.components = new IAnnotationComponent[length];
			for (int i = 0; i < length; i++) {
				AnnotationComponent component = new AnnotationComponent(classFileBytes, constantPool, offset + this.readOffset);
				this.components[i] = component;
				this.readOffset += component.sizeInBytes();
			}
		} else {
			this.components = NO_ENTRIES;
		}
		index = u1At(classFileBytes, this.readOffset, offset);
		this.readOffset++;
		this.targetType = index;
		switch(index) {
			case IExtendedAnnotationConstants.WILDCARD_BOUND :
				this.wildcardLocationType = u1At(classFileBytes, this.readOffset, offset);
				this.readOffset++;
				internalDecoding(this.wildcardLocationType, classFileBytes, constantPool, offset);
				// copy the location back into the wildcard location
				int size = this.locations.length;
				System.arraycopy(this.locations, 0, (this.wildcardLocations = new int[size]), 0, size);
				this.locations = null;
				break;
			case IExtendedAnnotationConstants.WILDCARD_BOUND_GENERIC_OR_ARRAY :
				this.wildcardLocationType = u1At(classFileBytes, this.readOffset, offset);
				this.readOffset++;
				internalDecoding(this.wildcardLocationType, classFileBytes, constantPool, offset);
				size = this.locations.length;
				System.arraycopy(this.locations, 0, (this.wildcardLocations = new int[size]), 0, size);
				int locationLength = u2At(classFileBytes, this.readOffset, offset);
				this.readOffset += 2;
				this.locations = new int[locationLength];
				for (int i = 0; i < locationLength; i++) {
					this.locations[i] = u1At(classFileBytes, this.readOffset, offset);
					this.readOffset++;
				}
				break;
			default:
				internalDecoding(index, classFileBytes, constantPool, offset);
		}
		if (this.annotationTypeIndex == 0xFFFF) {
			this.annotationTypeIndex = -1;
		}
	}

