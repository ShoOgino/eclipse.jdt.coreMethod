	private TypeBinding[] getTypeBindingArguments() {
		int size = this.types.size();
		TypeBinding[] arguments = new TypeBinding[size];
		int rank = 0;
		for (int i = 0; i < size; i++) {
			BindingKeyResolver resolver = (BindingKeyResolver) this.types.get(i);
			TypeBinding binding;
			int kind = resolver.wildcardKind;
			switch (kind) {
				case Wildcard.EXTENDS:
				case Wildcard.SUPER:
					binding = this.environment.createWildcard((ReferenceBinding) this.typeBinding, rank++, (TypeBinding) resolver.compilerBinding, null /*no extra bound*/, kind);
					break;
				case Wildcard.UNBOUND:
					binding = this.environment.createWildcard((ReferenceBinding) this.typeBinding, rank++, null/*no bound*/, null /*no extra bound*/, kind);
					break;
				default:
					binding = (TypeBinding) resolver.compilerBinding;
			}
			if (resolver.isCapture)
				binding = new CaptureBinding((WildcardBinding) binding);
			arguments[i] = binding;
		}
		this.types = new ArrayList();
		return arguments;
	}

