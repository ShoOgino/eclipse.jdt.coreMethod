	private void disassembleTargetTypeContents(boolean insideWildcard, int targetType, IExtendedAnnotation extendedAnnotation, StringBuffer buffer, String lineSeparator, int tabNumber, int mode) {
		switch(targetType) {
			case IExtendedAnnotationConstants.CLASS_EXTENDS_IMPLEMENTS :
				buffer.append(
					Messages.bind(Messages.disassembler_extendedannotation_classextendsimplements, new String[] {
						Integer.toString(extendedAnnotation.getAnnotationTypeIndex()),
					}));
				break;
			case IExtendedAnnotationConstants.CLASS_EXTENDS_IMPLEMENTS_GENERIC_OR_ARRAY :
				buffer.append(
						Messages.bind(Messages.disassembler_extendedannotation_classextendsimplements, new String[] {
							Integer.toString(extendedAnnotation.getAnnotationTypeIndex()),
						}));
				writeNewLine(buffer, lineSeparator, tabNumber + 2);
				if (insideWildcard) {
					buffer.append(
							Messages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {
								toString(extendedAnnotation.getWildcardLocations()),
							}));
				} else {
					buffer.append(
							Messages.bind(Messages.disassembler_extendedannotation_locations, new String[] {
								toString(extendedAnnotation.getLocations()),
							}));
				}
				break;
			case IExtendedAnnotationConstants.TYPE_CAST :
			case IExtendedAnnotationConstants.TYPE_INSTANCEOF :
			case IExtendedAnnotationConstants.OBJECT_CREATION :
			case IExtendedAnnotationConstants.CLASS_LITERAL :
				buffer.append(
						Messages.bind(Messages.disassembler_extendedannotation_offset, new String[] {
							Integer.toString(extendedAnnotation.getOffset()),
						}));
				break;
			case IExtendedAnnotationConstants.TYPE_CAST_GENERIC_OR_ARRAY :
			case IExtendedAnnotationConstants.TYPE_INSTANCEOF_GENERIC_OR_ARRAY :
			case IExtendedAnnotationConstants.OBJECT_CREATION_GENERIC_OR_ARRAY :
			case IExtendedAnnotationConstants.CLASS_LITERAL_GENERIC_OR_ARRAY :
				buffer.append(
						Messages.bind(Messages.disassembler_extendedannotation_offset, new String[] {
							Integer.toString(extendedAnnotation.getOffset()),
						}));
				writeNewLine(buffer, lineSeparator, tabNumber + 2);
				if (insideWildcard) {
					buffer.append(
							Messages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {
								toString(extendedAnnotation.getWildcardLocations()),
							}));
				} else {
					buffer.append(
							Messages.bind(Messages.disassembler_extendedannotation_locations, new String[] {
								toString(extendedAnnotation.getLocations()),
							}));
				}
				break;
			case IExtendedAnnotationConstants.CLASS_TYPE_PARAMETER :
			case IExtendedAnnotationConstants.METHOD_TYPE_PARAMETER :
				buffer.append(
						Messages.bind(Messages.disassembler_extendedannotation_type_parameter, new String[] {
							Integer.toString(extendedAnnotation.getTypeParameterIndex()),
						}));
				break;
			case IExtendedAnnotationConstants.CLASS_TYPE_PARAMETER_GENERIC_OR_ARRAY :
			case IExtendedAnnotationConstants.METHOD_TYPE_PARAMETER_GENERIC_OR_ARRAY :
				buffer.append(
						Messages.bind(Messages.disassembler_extendedannotation_type_parameter, new String[] {
							Integer.toString(extendedAnnotation.getTypeParameterIndex()),
						}));
				writeNewLine(buffer, lineSeparator, tabNumber + 2);
				if (insideWildcard) {
					buffer.append(
							Messages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {
								toString(extendedAnnotation.getWildcardLocations()),
							}));
				} else {
					buffer.append(
							Messages.bind(Messages.disassembler_extendedannotation_locations, new String[] {
								toString(extendedAnnotation.getLocations()),
							}));
				}
				break;
			case IExtendedAnnotationConstants.METHOD_TYPE_PARAMETER_BOUND :
			case IExtendedAnnotationConstants.CLASS_TYPE_PARAMETER_BOUND :
				buffer.append(
						Messages.bind(Messages.disassembler_extendedannotation_type_parameter_with_bound, new String[] {
							Integer.toString(extendedAnnotation.getTypeParameterIndex()),
							Integer.toString(extendedAnnotation.getTypeParameterBoundIndex()),
						}));
				break;
			case IExtendedAnnotationConstants.METHOD_TYPE_PARAMETER_BOUND_GENERIC_OR_ARRAY :
			case IExtendedAnnotationConstants.CLASS_TYPE_PARAMETER_BOUND_GENERIC_OR_ARRAY :
				buffer.append(
						Messages.bind(Messages.disassembler_extendedannotation_type_parameter_with_bound, new String[] {
							Integer.toString(extendedAnnotation.getTypeParameterIndex()),
							Integer.toString(extendedAnnotation.getTypeParameterBoundIndex()),
						}));
				writeNewLine(buffer, lineSeparator, tabNumber + 2);
				if (insideWildcard) {
					buffer.append(
							Messages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {
								toString(extendedAnnotation.getWildcardLocations()),
							}));
				} else {
					buffer.append(
							Messages.bind(Messages.disassembler_extendedannotation_locations, new String[] {
								toString(extendedAnnotation.getLocations()),
							}));
				}
				break;
			case IExtendedAnnotationConstants.LOCAL_VARIABLE :
				buffer.append(Messages.disassembler_localvariabletargetheader);
				writeNewLine(buffer, lineSeparator, tabNumber + 3);
				int localVariableTableSize = extendedAnnotation.getLocalVariableRefenceInfoLength();
				ILocalVariableReferenceInfo[] localVariableTable = extendedAnnotation.getLocalVariableTable();
				for (int i = 0; i < localVariableTableSize; i++) {
					if (i != 0) {
						writeNewLine(buffer, lineSeparator, tabNumber + 3);
					}
					ILocalVariableReferenceInfo info = localVariableTable[i];
					int index= info.getIndex();
					int startPC = info.getStartPC();
					int length  = info.getLength();
					buffer.append(Messages.bind(Messages.classfileformat_localvariablereferenceinfoentry,
						new String[] {
							Integer.toString(startPC),
							Integer.toString(startPC + length),
							Integer.toString(index),
						}));
				}
				break;
			case IExtendedAnnotationConstants.LOCAL_VARIABLE_GENERIC_OR_ARRAY :
				buffer.append(Messages.disassembler_localvariabletargetheader);
				writeNewLine(buffer, lineSeparator, tabNumber + 3);
				localVariableTableSize = extendedAnnotation.getLocalVariableRefenceInfoLength();
				localVariableTable = extendedAnnotation.getLocalVariableTable();
				for (int i = 0; i < localVariableTableSize; i++) {
					if (i != 0) {
						writeNewLine(buffer, lineSeparator, tabNumber + 3);
					}
					ILocalVariableReferenceInfo info = localVariableTable[i];
					int index= info.getIndex();
					int startPC = info.getStartPC();
					int length  = info.getLength();
					buffer.append(Messages.bind(Messages.classfileformat_localvariablereferenceinfoentry,
						new String[] {
							Integer.toString(startPC),
							Integer.toString(startPC + length),
							Integer.toString(index),
						}));
				}
				writeNewLine(buffer, lineSeparator, tabNumber + 2);
				if (insideWildcard) {
					buffer.append(
							Messages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {
								toString(extendedAnnotation.getWildcardLocations()),
							}));
				} else {
					buffer.append(
							Messages.bind(Messages.disassembler_extendedannotation_locations, new String[] {
								toString(extendedAnnotation.getLocations()),
							}));
				}
				break;
			case IExtendedAnnotationConstants.METHOD_PARAMETER :
				buffer.append(
						Messages.bind(Messages.disassembler_extendedannotation_method_parameter, new String[] {
							Integer.toString(extendedAnnotation.getTypeParameterIndex()),
						}));
				break;
			case IExtendedAnnotationConstants.METHOD_PARAMETER_GENERIC_OR_ARRAY :
				buffer.append(
						Messages.bind(Messages.disassembler_extendedannotation_method_parameter, new String[] {
							Integer.toString(extendedAnnotation.getTypeParameterIndex()),
						}));
				writeNewLine(buffer, lineSeparator, tabNumber + 2);
				if (insideWildcard) {
					buffer.append(
							Messages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {
								toString(extendedAnnotation.getWildcardLocations()),
							}));
				} else {
					buffer.append(
							Messages.bind(Messages.disassembler_extendedannotation_locations, new String[] {
								toString(extendedAnnotation.getLocations()),
							}));
				}
				break;
			case IExtendedAnnotationConstants.METHOD_RECEIVER_GENERIC_OR_ARRAY :
			case IExtendedAnnotationConstants.METHOD_RETURN_TYPE_GENERIC_OR_ARRAY :
			case IExtendedAnnotationConstants.FIELD_GENERIC_OR_ARRAY :
				if (insideWildcard) {
					buffer.append(
							Messages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {
								toString(extendedAnnotation.getWildcardLocations()),
							}));
				} else {
					buffer.append(
							Messages.bind(Messages.disassembler_extendedannotation_locations, new String[] {
								toString(extendedAnnotation.getLocations()),
							}));
				}
				break;
			case IExtendedAnnotationConstants.TYPE_ARGUMENT_CONSTRUCTOR_CALL :
			case IExtendedAnnotationConstants.TYPE_ARGUMENT_METHOD_CALL :
				buffer.append(
						Messages.bind(Messages.disassembler_extendedannotation_offset, new String[] {
							Integer.toString(extendedAnnotation.getOffset()),
						}));
				writeNewLine(buffer, lineSeparator, tabNumber + 2);
				buffer.append(
						Messages.bind(Messages.disassembler_extendedannotation_type_argument, new String[] {
							Integer.toString(extendedAnnotation.getAnnotationTypeIndex()),
						}));
				break;
			case IExtendedAnnotationConstants.TYPE_ARGUMENT_CONSTRUCTOR_CALL_GENERIC_OR_ARRAY :
			case IExtendedAnnotationConstants.TYPE_ARGUMENT_METHOD_CALL_GENERIC_OR_ARRAY :
				buffer.append(
						Messages.bind(Messages.disassembler_extendedannotation_offset, new String[] {
							Integer.toString(extendedAnnotation.getOffset()),
						}));
				writeNewLine(buffer, lineSeparator, tabNumber + 2);
				buffer.append(
						Messages.bind(Messages.disassembler_extendedannotation_type_argument, new String[] {
							Integer.toString(extendedAnnotation.getAnnotationTypeIndex()),
						}));
				writeNewLine(buffer, lineSeparator, tabNumber + 2);
				if (insideWildcard) {
					buffer.append(
							Messages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {
								toString(extendedAnnotation.getWildcardLocations()),
							}));
				} else {
					buffer.append(
							Messages.bind(Messages.disassembler_extendedannotation_locations, new String[] {
								toString(extendedAnnotation.getLocations()),
							}));
				}
				break;
			case IExtendedAnnotationConstants.THROWS :
				buffer.append(
						Messages.bind(Messages.disassembler_extendedannotation_throws, new String[] {
							Integer.toString(extendedAnnotation.getAnnotationTypeIndex()),
						}));
				break;
			case IExtendedAnnotationConstants.THROWS_GENERIC_OR_ARRAY :
				buffer.append(
						Messages.bind(Messages.disassembler_extendedannotation_throws, new String[] {
							Integer.toString(extendedAnnotation.getAnnotationTypeIndex()),
						}));
				writeNewLine(buffer, lineSeparator, tabNumber + 2);
				if (insideWildcard) {
					buffer.append(
							Messages.bind(Messages.disassembler_extendedannotation_wildcardlocations, new String[] {
								toString(extendedAnnotation.getWildcardLocations()),
							}));
				} else {
					buffer.append(
							Messages.bind(Messages.disassembler_extendedannotation_locations, new String[] {
								toString(extendedAnnotation.getLocations()),
							}));
				}
				break;
		}
	}

