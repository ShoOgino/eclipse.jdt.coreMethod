	private void disassemble(IInnerClassesAttribute innerClassesAttribute, StringBuffer buffer, String lineSeparator, int tabNumber) {
		buffer.append(Util.bind("disassembler.innerattributesheader"));
		writeNewLine(buffer, lineSeparator, tabNumber);
		IInnerClassesAttributeEntry[] innerClassesAttributeEntries = innerClassesAttribute.getInnerClassAttributesEntries();
		int length = innerClassesAttributeEntries.length;
		int innerClassNameIndex, outerClassNameIndex, innerNameIndex, accessFlags;
		IInnerClassesAttributeEntry innerClassesAttributeEntry;
		for (int i = 0; i < length - 1; i++) {
			innerClassesAttributeEntry = innerClassesAttributeEntries[i];
			innerClassNameIndex = innerClassesAttributeEntry.getInnerClassNameIndex();
			outerClassNameIndex = innerClassesAttributeEntry.getOuterClassNameIndex();
			innerNameIndex = innerClassesAttributeEntry.getInnerNameIndex();
			accessFlags = innerClassesAttributeEntry.getAccessFlags();
			buffer
				.append('[')
				.append(Util.bind("disassembler.inner_class_info_name"))
				.append(' ')
				.append('#')
				.append(innerClassNameIndex);
			if (innerClassNameIndex != 0) {
				buffer
					.append(' ')
					.append(innerClassesAttributeEntry.getInnerClassName());
			}
			writeNewLine(buffer, lineSeparator, tabNumber);
			dumpTab(tabNumber, buffer);
			buffer
				.append(Util.bind("disassembler.outer_class_info_name"))
				.append(' ')
				.append('#')
				.append(outerClassNameIndex);
			if (outerClassNameIndex != 0) {
				buffer	
					.append(' ')
					.append(innerClassesAttributeEntry.getOuterClassName());
			}
			writeNewLine(buffer, lineSeparator, tabNumber);
			dumpTab(tabNumber, buffer);
			buffer
				.append(Util.bind("disassembler.inner_name"))
				.append(' ')
				.append('#')
				.append(innerNameIndex);
			if (innerNameIndex != 0) {
				buffer
					.append(' ')
					.append(innerClassesAttributeEntry.getInnerName());
			}
			writeNewLine(buffer, lineSeparator, tabNumber);
			dumpTab(tabNumber, buffer);
			buffer
				.append(Util.bind("disassembler.inner_accessflags"))
				.append(' ')
				.append('[')
				.append(accessFlags)
				.append(']')
				.append(' ');
			decodeModifiersForInnerClasses(buffer, accessFlags);
			buffer
				.append(']')
				.append(',');
			writeNewLine(buffer, lineSeparator, tabNumber);
		}
		// last entry
		innerClassesAttributeEntry = innerClassesAttributeEntries[length - 1];
		innerClassNameIndex = innerClassesAttributeEntry.getInnerClassNameIndex();
		outerClassNameIndex = innerClassesAttributeEntry.getOuterClassNameIndex();
		innerNameIndex = innerClassesAttributeEntry.getInnerNameIndex();
		accessFlags = innerClassesAttributeEntry.getAccessFlags();
		buffer
			.append('[')
			.append(Util.bind("disassembler.inner_class_info_name"))
			.append(' ')
			.append('#')
			.append(innerClassNameIndex);
		if (innerClassNameIndex != 0) {
			buffer
				.append(' ')
				.append(innerClassesAttributeEntry.getInnerClassName());
		}
		writeNewLine(buffer, lineSeparator, tabNumber);
		dumpTab(tabNumber, buffer);
		buffer
			.append(Util.bind("disassembler.outer_class_info_name"))
			.append(' ')
			.append('#')
			.append(outerClassNameIndex);
		if (outerClassNameIndex != 0) {
			buffer	
				.append(' ')
				.append(innerClassesAttributeEntry.getOuterClassName());
		}
		writeNewLine(buffer, lineSeparator, tabNumber);
		dumpTab(tabNumber, buffer);
		buffer
			.append(Util.bind("disassembler.inner_name"))
			.append(' ')
			.append('#')
			.append(innerNameIndex);
		if (innerNameIndex != 0) {
			buffer
				.append(' ')
				.append(innerClassesAttributeEntry.getInnerName());
		}
		writeNewLine(buffer, lineSeparator, tabNumber);
		dumpTab(tabNumber, buffer);
		buffer
			.append(Util.bind("disassembler.inner_accessflags"))
			.append(' ')
			.append('[')
			.append(accessFlags)
			.append(']')
			.append(' ');
		decodeModifiersForInnerClasses(buffer, accessFlags);
		buffer.append(']');
	}

