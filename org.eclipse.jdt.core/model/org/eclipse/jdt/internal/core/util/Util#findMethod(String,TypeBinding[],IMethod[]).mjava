	private static JavaElement findMethod(
			String selector,
			TypeBinding[] parameters,
			IMethod[] methods) {

		ArrayList list = new ArrayList();
		int parametersLength = parameters.length;
		for (int i = 0, length = methods.length; i < length; i++) {
			IMethod existingMethod = methods[i];
			if (selector.equals(existingMethod.getElementName())
					&& parametersLength == existingMethod.getParameterTypes().length) {
				list.add(existingMethod);
			}
		}
		int size = list.size();
		switch(size) {
			case 0 :
				return null;
			case 1 :
				return (JavaElement) list.get(0);
		}
		// more than one match by the selector
		// try to match the parameters
		methodLoop: for (Iterator iterator = list.iterator(); iterator.hasNext(); ) {
			IMethod existingMethod = (IMethod) iterator.next();
			String[] parameterTypes = existingMethod.getParameterTypes();
			parametersLoop: for (int i = 0; i < parametersLength; i++) {
				TypeBinding parameter = parameters[i];
				char[] genericTypeSignature = parameter.genericTypeSignature();
				// first try unresolved signature
				String signature = toUnresolvedTypeSignature(genericTypeSignature);
				if (signature.equals(parameterTypes[i])) {
					continue parametersLoop;
				}
				// try unresolved qualified signature
				signature = toUnresolvedQualifiedTypeSignature(genericTypeSignature);
				if (signature.equals(parameterTypes[i])) {
					continue parametersLoop;
				}
				// one parameter didn't match so we can abort
				continue methodLoop;
			}
			return (JavaElement) existingMethod;
		}
		return null;
	}

