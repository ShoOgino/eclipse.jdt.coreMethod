	private void parseFullyQualifiedName() {
		switch(this.scanner.nextToken()) {
			case Scanner.PACKAGE:
				this.keyStart = 0;
				consumePackage(this.scanner.getTokenSource());
				this.hasTypeName = false;
				return;
			case Scanner.TYPE:
				this.keyStart = this.scanner.start-1;
				consumeFullyQualifiedName(this.scanner.getTokenSource());
				break;
	 		case Scanner.ARRAY:
	 			this.keyStart = this.scanner.start;
	 			consumeArrayDimension(this.scanner.getTokenSource());
				if (this.scanner.nextToken() == Scanner.TYPE)
	 				consumeFullyQualifiedName(this.scanner.getTokenSource());
				else {
					malformedKey();
					return;
				}
				break;
	 		case Scanner.WILDCARD:
			 	char[] source = this.scanner.getTokenSource();
			 	if (source.length == 0) {
			 		malformedKey();
			 		return;
			 	}
			 	int kind = -1;
			 	switch (source[0]) {
				 	case '*':
				 		kind = Wildcard.UNBOUND;
				 		break;
				 	case '+':
				 		kind = Wildcard.EXTENDS;
				 		break;
				 	case '-':
				 		kind = Wildcard.SUPER;
				 		break;
			 	}
			 	if (kind == -1) {
			 		malformedKey();
			 		return;
			 	}
			 	if (kind != Wildcard.UNBOUND)
			 		parseWildcardBound();
			 	consumeWildCard(kind);
			 	this.hasTypeName = false;
	 			break;
			default:
	 			malformedKey();
				return;
		}
	}

