	/*
	 * Convert a source field info into a parsed field declaration
	 */
	private FieldDeclaration convert(SourceFieldElementInfo sourceField, CompilationResult compilationResult) {

		FieldDeclaration field = new FieldDeclaration();

		int start = sourceField.getNameSourceStart();
		int end = sourceField.getNameSourceEnd();

		field.name = sourceField.getName();
		field.sourceStart = start;
		field.sourceEnd = end;
		field.type = createTypeReference(sourceField.getTypeName(), start, end);
		field.declarationSourceStart = sourceField.getDeclarationSourceStart();
		field.declarationSourceEnd = sourceField.getDeclarationSourceEnd();
		field.modifiers = sourceField.getModifiers();

		/* convert local and anonymous types */
		if (this.needLocalTypes) {
			IJavaElement[] children = sourceField.getChildren();
			int typesLength = children.length;
			if (typesLength > 0) {
				ArrayInitializer initializer = new ArrayInitializer();
				field.initialization = initializer;
				Expression[] expressions = new Expression[typesLength];
				initializer.expressions = expressions;
				for (int i = 0; i < typesLength; i++) {
					IJavaElement localType = children[i];
					try {
						AnonymousLocalTypeDeclaration anonymousLocalTypeDeclaration = (AnonymousLocalTypeDeclaration)convert((SourceTypeElementInfo)((JavaElement)localType).getElementInfo(),compilationResult);
						QualifiedAllocationExpression expression = new QualifiedAllocationExpression(anonymousLocalTypeDeclaration);
						expression.type = anonymousLocalTypeDeclaration.superclass;
						anonymousLocalTypeDeclaration.superclass = null;
						anonymousLocalTypeDeclaration.superInterfaces = null;
						anonymousLocalTypeDeclaration.allocation = expression;
						expressions[i] = expression;
					} catch (JavaModelException e) {
						// ignore
					}
				}
			}
		}
		
		return field;
	}

