	/**
	 * Disassemble a field info
	 */
	private void disassemble(IFieldInfo fieldInfo, StringBuffer buffer, String lineSeparator, int tabNumber) {
		decodeModifiersForField(buffer, fieldInfo.getAccessFlags());
		char[] fieldDescriptor = fieldInfo.getDescriptor();
		CharOperation.replace(fieldDescriptor, '/', '.');
		buffer.append(Signature.toCharArray(fieldDescriptor));
		buffer.append(' ');
		buffer.append(new String(fieldInfo.getName()));
		IConstantValueAttribute constantValueAttribute = fieldInfo.getConstantValueAttribute();
		if (constantValueAttribute != null) {
			buffer.append(Util.bind("disassembler.fieldhasconstant"));
			buffer.append(' ');
			IConstantPoolEntry constantPoolEntry = constantValueAttribute.getConstantValue();
			switch(constantPoolEntry.getKind()) {
				case IConstantPoolConstant.CONSTANT_Long :
					buffer.append(constantPoolEntry.getLongValue());
					break;
				case IConstantPoolConstant.CONSTANT_Float :
					buffer.append(constantPoolEntry.getFloatValue());
					break;
				case IConstantPoolConstant.CONSTANT_Double :
					buffer.append(constantPoolEntry.getDoubleValue());
					break;
				case IConstantPoolConstant.CONSTANT_Integer:
					buffer.append(constantPoolEntry.getIntegerValue());
					break;
				case IConstantPoolConstant.CONSTANT_String:
					buffer.append(constantPoolEntry.getStringValue());
			}
		}
		buffer.append(Util.bind("disassembler.endoffieldheader"));
		writeNewLine(buffer, lineSeparator, tabNumber);
		buffer
			.append(Util.bind("disassembler.commentstart"))
			.append(' ')
			.append(Util.bind("classfileformat.fieldddescriptor"))
			.append(' ')
			.append("#")
			.append(fieldInfo.getDescriptorIndex())
			.append(' ')
			.append(fieldInfo.getDescriptor())
			.append(' ')
			.append(Util.bind("disassembler.commentend"));
	}

