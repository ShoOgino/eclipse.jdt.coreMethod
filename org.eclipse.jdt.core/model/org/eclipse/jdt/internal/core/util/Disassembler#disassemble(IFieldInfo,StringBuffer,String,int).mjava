	/**
	 * Disassemble a field info
	 */
	private void disassemble(IFieldInfo fieldInfo, StringBuffer buffer, String lineSeparator, int tabNumber) {
		decodeModifiersForField(buffer, fieldInfo.getAccessFlags());
		char[] fieldDescriptor = fieldInfo.getDescriptor();
		CharOperation.replace(fieldDescriptor, '/', '.');
		buffer.append(Signature.toCharArray(fieldDescriptor));
		buffer.append(Util.bind("disassembler.space")); //$NON-NLS-1$
		buffer.append(new String(fieldInfo.getName()));
		IConstantValueAttribute constantValueAttribute = fieldInfo.getConstantValueAttribute();
		if (constantValueAttribute != null) {
			buffer.append(Util.bind("disassembler.fieldhasconstant")); //$NON-NLS-1$
			IConstantPoolEntry constantPoolEntry = constantValueAttribute.getConstantValue();
			switch(constantPoolEntry.getKind()) {
				case IConstantPoolConstant.CONSTANT_Long :
					buffer.append(constantPoolEntry.getLongValue());
					break;
				case IConstantPoolConstant.CONSTANT_Float :
					buffer.append(constantPoolEntry.getFloatValue());
					break;
				case IConstantPoolConstant.CONSTANT_Double :
					buffer.append(constantPoolEntry.getDoubleValue());
					break;
				case IConstantPoolConstant.CONSTANT_Integer:
					buffer.append(constantPoolEntry.getIntegerValue());
					break;
				case IConstantPoolConstant.CONSTANT_String:
					buffer.append(constantPoolEntry.getStringValue());
			}
		}
		buffer.append(Util.bind("disassembler.endoffieldheader")); //$NON-NLS-1$
		IClassFileAttribute[] attributes = fieldInfo.getAttributes();
		int length = attributes.length;
		if (length != 0) {
			for (int i = 0; i < length; i++) {
				IClassFileAttribute attribute = attributes[i];
				if (attribute != constantValueAttribute) {
					disassemble(attribute, buffer, lineSeparator, tabNumber);
				}
			}
		}
		writeNewLine(buffer, lineSeparator, tabNumber);
		CharOperation.replace(fieldDescriptor, '.', '/');
		buffer
			.append(Util.bind("disassembler.commentstart")) //$NON-NLS-1$
			.append(Util.bind("classfileformat.fieldddescriptor")) //$NON-NLS-1$
			.append(Util.bind("classfileformat.fielddescriptorindex")) //$NON-NLS-1$
			.append(fieldInfo.getDescriptorIndex())
			.append(Util.bind("disassembler.space")) //$NON-NLS-1$
			.append(fieldDescriptor)
			.append(Util.bind("disassembler.commentend")); //$NON-NLS-1$
	}

