	public void consumeCapture(final int position) {
		if (this.parsedUnit == null) return;
		class CaptureFinder extends ASTVisitor {
			Binding parameterizedTypeBinding;
			public boolean visit(SingleNameReference singleNameReference, BlockScope blockScope) {
				if (singleNameReference.sourceEnd == position) {
					this.parameterizedTypeBinding = singleNameReference.resolvedType;
					return false;
				} 
				return super.visit(singleNameReference, blockScope);
			}
			public boolean visit(QualifiedNameReference qualifiedNameReference, BlockScope blockScope) {
				if (qualifiedNameReference.sourceEnd == position) {
					this.parameterizedTypeBinding = qualifiedNameReference.resolvedType;
					return false;
				} 
				return super.visit(qualifiedNameReference, blockScope);
			}
			public boolean visit(MessageSend messageSend, BlockScope blockScope) {
				if (messageSend.sourceEnd == position) {
					this.parameterizedTypeBinding = messageSend.resolvedType;
					return false;
				} 
				return super.visit(messageSend, blockScope);
			}
			public boolean visit(FieldReference fieldReference, BlockScope blockScope) {
				if (fieldReference.sourceEnd == position) {
					this.parameterizedTypeBinding = fieldReference.resolvedType;
					return false;
				} 
				return super.visit(fieldReference, blockScope);
			}
			public boolean visit(ConditionalExpression conditionalExpression, BlockScope blockScope) {
				if (conditionalExpression.sourceEnd == position) {
					this.parameterizedTypeBinding = conditionalExpression.resolvedType;
					return false;
				} 
				return super.visit(conditionalExpression, blockScope);
			}
			public boolean visit(CastExpression castExpression, BlockScope blockScope) {
				if (castExpression.sourceEnd == position) {
					this.parameterizedTypeBinding = castExpression.resolvedType;
					return false;
				} 
				return super.visit(castExpression, blockScope);
			}
			public boolean visit(Assignment assignment, BlockScope blockScope) {
				if (assignment.sourceEnd == position) {
					this.parameterizedTypeBinding = assignment.resolvedType;
					return false;
				} 
				return super.visit(assignment, blockScope);
			}
			public boolean visit(ArrayReference arrayReference, BlockScope blockScope) {
				if (arrayReference.sourceEnd == position) {
					this.parameterizedTypeBinding = arrayReference.resolvedType;
					return false;
				} 
				return super.visit(arrayReference, blockScope);
			}
		}
		CaptureFinder captureFinder = new CaptureFinder();
		this.parsedUnit.traverse(captureFinder, this.parsedUnit.scope);
		if (!(captureFinder.parameterizedTypeBinding instanceof ParameterizedTypeBinding))
			return;
		TypeBinding[] arguments = ((ParameterizedTypeBinding) captureFinder.parameterizedTypeBinding).arguments;
		if (arguments == null) return;
		Binding wildcardBinding = ((BindingKeyResolver) this.types.get(0)).compilerBinding;
		for (int i = 0, length = arguments.length; i < length; i++) {
			TypeBinding binding = arguments[i];
			if (binding instanceof CaptureBinding) {
				CaptureBinding captureBinding = (CaptureBinding) binding;
				if (captureBinding.wildcard == wildcardBinding && captureBinding.sourceType == this.typeBinding) {
					this.compilerBinding = binding;
					return;
				}
			}
		}
	}

