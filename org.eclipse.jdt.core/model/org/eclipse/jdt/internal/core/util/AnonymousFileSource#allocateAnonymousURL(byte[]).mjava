	/**
	 * Returns a URL on a newly allocated file with the given initial content.
	 * Guaranteed to be unallocated.
	 */
	synchronized public URL allocateAnonymousURL(byte[] bytes) throws IOException {
		try {
			byte hasharray[] = java.security.MessageDigest.getInstance("SHA").digest(bytes);
			StringBuffer sb = new StringBuffer();
			for (int i = 0; i < hasharray.length; i++) {
				sb.append(Character.forDigit((int) ((hasharray[i] >> 4) & 0x0F), 16));
				sb.append(Character.forDigit((int) (hasharray[i] & 0x0F), 16));
			}
			sb.append(".jnk");
			String fileName = sb.toString();
			File file = fileForName(fileName);
			if (!file.exists()) {
				RandomAccessFile raf = new RandomAccessFile(file, "rw");
				raf.write(bytes);
				raf.close();
			}
			return convertFileToURL(file);
		} catch (java.security.NoSuchAlgorithmException e) {
			throw new IOException(e.getMessage());
		}
	}

