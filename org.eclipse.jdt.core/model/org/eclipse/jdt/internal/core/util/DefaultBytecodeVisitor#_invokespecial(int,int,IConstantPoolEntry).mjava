	/**
	 * @see IBytecodeVisitor#_invokespecial(int, int, IConstantPoolEntry)
	 */
	public void _invokespecial(int pc, int index, IConstantPoolEntry constantMethodref) {
		char[] methodDescriptor = constantMethodref.getMethodDescriptor();
		CharOperation.replace(methodDescriptor, '/', '.');
		char[] methodName = constantMethodref.getMethodName();

		if (CharOperation.equals(INIT, methodName)) {
			methodName = EMPTY_NAME;
			writeTabs();
			buffer
				.append(pc)
				.append('\t')
				.append(OpcodeStringValues.BYTECODE_NAMES[IOpcodeMnemonics.INVOKESPECIAL])
				.append(' ')
				.append('#')
				.append(index)
				.append(' ')
				.append(Util.bind("classformat.invokespecialconstructor")) //$NON-NLS-1$
				.append(returnDeclaringClassName(constantMethodref))
				.append(
					Signature.toCharArray(
						methodDescriptor,
						methodName,
						getParameterNames(methodDescriptor),
						true,
						false))
				.append(Util.bind("classformat.invokespecialconstructorclose")); //$NON-NLS-1$
			writeNewLine();
		} else {
			methodName = EMPTY_NAME;
			writeTabs();
			buffer
				.append(pc)
				.append('\t')
				.append(OpcodeStringValues.BYTECODE_NAMES[IOpcodeMnemonics.ALOAD_0])
				.append(' ')
				.append('#')
				.append(index)
				.append(' ')
				.append(Util.bind("classformat.invokespecialmethod")) //$NON-NLS-1$
				.append(returnDeclaringClassName(constantMethodref))
				.append('.')
				.append(
					Signature.toCharArray(
						methodDescriptor,
						methodName,
						getParameterNames(methodDescriptor),
						true,
						true))
				.append(Util.bind("classformat.invokespecialmethodclose")); //$NON-NLS-1$
			writeNewLine();
		}
	}

