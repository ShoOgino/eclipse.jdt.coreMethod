	/**
	 * @see IBytecodeVisitor#_newarray(int, int)
	 */
	public void _newarray(int pc, int atype) {
		dumpPcNumber(pc);
		switch(atype) {
			case T_BOOLEAN :
				this.buffer.append(Util.bind("classformat.newarray_boolean", //$NON-NLS-1$
					new String[] {
						OpcodeStringValues.BYTECODE_NAMES[IOpcodeMnemonics.NEWARRAY],
						Integer.toString(atype)
					}));
				break;
			case T_CHAR :
				this.buffer.append(Util.bind("classformat.newarray_char", //$NON-NLS-1$
					new String[] {
						OpcodeStringValues.BYTECODE_NAMES[IOpcodeMnemonics.NEWARRAY],
						Integer.toString(atype)
					}
				));
				break;
			case T_FLOAT :
				this.buffer.append(Util.bind("classformat.newarray_float", //$NON-NLS-1$
					new String[] {
						OpcodeStringValues.BYTECODE_NAMES[IOpcodeMnemonics.NEWARRAY],
						Integer.toString(atype)
					}
				));
				break;
			case T_DOUBLE :
				this.buffer.append(Util.bind("classformat.newarray_double", //$NON-NLS-1$
					new String[] {
						OpcodeStringValues.BYTECODE_NAMES[IOpcodeMnemonics.NEWARRAY],
						Integer.toString(atype)
					}
				));
				break;
			case T_BYTE :
				this.buffer.append(Util.bind("classformat.newarray_byte", //$NON-NLS-1$
					new String[] {
						OpcodeStringValues.BYTECODE_NAMES[IOpcodeMnemonics.NEWARRAY],
						Integer.toString(atype)
					}
				));
				break;
			case T_SHORT :
				this.buffer.append(Util.bind("classformat.newarray_short", //$NON-NLS-1$
					new String[] {
						OpcodeStringValues.BYTECODE_NAMES[IOpcodeMnemonics.NEWARRAY],
						Integer.toString(atype)
					}
				));
				break;
			case T_INT :
				this.buffer.append(Util.bind("classformat.newarray_int", //$NON-NLS-1$
					new String[] {
						OpcodeStringValues.BYTECODE_NAMES[IOpcodeMnemonics.NEWARRAY],
						Integer.toString(atype)
					}
				));
				break;
			case T_LONG :
				this.buffer.append(Util.bind("classformat.newarray_long", //$NON-NLS-1$
					new String[] {
						OpcodeStringValues.BYTECODE_NAMES[IOpcodeMnemonics.NEWARRAY],
						Integer.toString(atype)
					}
				));
		}
		writeNewLine();
	}

