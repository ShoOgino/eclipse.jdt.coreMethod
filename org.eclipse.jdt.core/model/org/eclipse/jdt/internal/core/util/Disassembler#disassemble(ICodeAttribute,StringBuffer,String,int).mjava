	private void disassemble(ICodeAttribute codeAttribute, StringBuffer buffer, String lineSeparator, int tabNumber) {
		writeNewLine(buffer, lineSeparator, tabNumber);
		DefaultBytecodeVisitor visitor = new DefaultBytecodeVisitor(buffer, lineSeparator, 1);
		try {
			codeAttribute.traverse(visitor);
		} catch(ClassFormatException e) {
		}
		int exceptionTableLength = codeAttribute.getExceptionTableLength();
		if (exceptionTableLength != 0) {
			writeNewLine(buffer, lineSeparator, tabNumber);
			IExceptionTableEntry[] exceptionTableEntries = codeAttribute.getExceptionTable();
			buffer.append(Util.bind("disassembler.exceptiontableheader"));
			writeNewLine(buffer, lineSeparator, tabNumber + 1);
			for (int i = 0; i < exceptionTableLength; i++) {
				IExceptionTableEntry exceptionTableEntry = exceptionTableEntries[i];
				buffer
					.append("[pc: ")
					.append(exceptionTableEntry.getStartPC())
					.append(", pc: ")
					.append(exceptionTableEntry.getEndPC())
					.append("] -> ")
					.append(exceptionTableEntry.getHandlerPC())
					.append(" when : ");
				if (exceptionTableEntry.getCatchTypeIndex() == 0) {
					buffer.append(ANY_EXCEPTION);
				} else {
					char[] catchType = exceptionTableEntry.getCatchType();
					CharOperation.replace(catchType, '/', '.');
					buffer.append(catchType);
				}
				writeNewLine(buffer, lineSeparator, tabNumber + 1);
			}
		}
		ILineNumberAttribute lineNumberAttribute = codeAttribute.getLineNumberAttribute();
		int lineAttributeLength = lineNumberAttribute == null ? 0 : lineNumberAttribute.getLineNumberTableLength();
		if (lineAttributeLength != 0) {
			writeNewLine(buffer, lineSeparator, tabNumber);
			buffer.append(Util.bind("disassembler.linenumberattributeheader"));
			writeNewLine(buffer, lineSeparator, tabNumber + 1);
			int[][] lineattributesEntries = lineNumberAttribute.getLineNumberTable();
			for (int i = 0; i < lineAttributeLength; i++) {
				buffer
					.append("[pc: ")
					.append(lineattributesEntries[i][0])
					.append(", line: ")
					.append(lineattributesEntries[i][1])
					.append("]");
				writeNewLine(buffer, lineSeparator, tabNumber + 1);
			}
		} 
		ILocalVariableAttribute localVariableAttribute = codeAttribute.getLocalVariableAttribute();
		int localVariableAttributeLength = localVariableAttribute == null ? 0 : localVariableAttribute.getLocalVariableTableLength();
		if (localVariableAttributeLength != 0) {
			writeNewLine(buffer, lineSeparator, tabNumber);
			buffer.append(Util.bind("disassembler.localvariabletableattributeheader"));
			writeNewLine(buffer, lineSeparator, tabNumber + 1);
			ILocalVariableTableEntry[] localVariableTableEntries = localVariableAttribute.getLocalVariableTable();
			for (int i = 0; i < localVariableAttributeLength; i++) {
				ILocalVariableTableEntry localVariableTableEntry = localVariableTableEntries[i];
				int startPC = localVariableTableEntry.getStartPC();
				int length  = localVariableTableEntry.getLength();
				buffer
					.append("[pc: ")
					.append(startPC)
					.append(", pc: ")
					.append(startPC + length)
					.append("] local: ")
					.append(localVariableTableEntry.getName())
					.append(" index: ")
					.append(localVariableTableEntry.getIndex())
					.append(" type: ")
					.append(Signature.toCharArray(localVariableTableEntry.getDescriptor()));
				writeNewLine(buffer, lineSeparator, tabNumber + 1);
			}
		} 
	}

