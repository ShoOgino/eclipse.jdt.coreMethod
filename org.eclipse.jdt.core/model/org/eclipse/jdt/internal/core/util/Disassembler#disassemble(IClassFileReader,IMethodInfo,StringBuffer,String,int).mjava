	/**
	 * Disassemble a method info header
	 */
	private void disassemble(IClassFileReader classFileReader, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber) {
		int accessFlags = methodInfo.getAccessFlags();
		checkDeprecated(methodInfo, buffer, lineSeparator, tabNumber);
		checkSynthetic(methodInfo, buffer, lineSeparator, tabNumber);
		decodeModifiersForMethod(buffer, accessFlags);
		char[] methodDescriptor = methodInfo.getDescriptor();
		CharOperation.replace(methodDescriptor, '/', '.');
		char[] methodName = null;
		if (methodInfo.isConstructor()) {
			methodName = classFileReader.getClassName();
			buffer.append(Signature.toCharArray(methodDescriptor, methodName, getParameterNames(methodDescriptor) , false, true));
		} else if (methodInfo.isClinit()) {
			methodName = Util.bind("classfileformat.clinitname").toCharArray();
			buffer.append(methodName);
		} else {
			methodName = methodInfo.getName();
			buffer.append(Signature.toCharArray(methodDescriptor, methodName, getParameterNames(methodDescriptor) , false, true));
		}
		IExceptionAttribute exceptionAttribute = methodInfo.getExceptionAttribute();
		if (exceptionAttribute != null) {
			buffer.append(' ');
			buffer.append(Util.bind("classfileformat.throws"));
			buffer.append(' ');
			char[][] exceptionNames = exceptionAttribute.getExceptionNames();
			int length = exceptionNames.length;
			for (int i = 0; i < length - 1; i++) {
				char[] exceptionName = exceptionNames[i];
				CharOperation.replace(exceptionName, '/', '.');
				buffer
					.append(exceptionName)
					.append(',')
					.append(' ');
			}
			char[] exceptionName = exceptionNames[length - 1];
			CharOperation.replace(exceptionName, '/', '.');
			buffer.append(exceptionName);
			buffer.append(' ');
		}
		buffer.append(Util.bind("disassembler.endofmethodheader"));
		writeNewLine(buffer, lineSeparator, tabNumber);
		buffer
			.append(Util.bind("disassembler.commentstart"))
			.append(' ')
			.append(Util.bind("classfileformat.methoddescriptor"))
			.append(' ')
			.append('#')
			.append(methodInfo.getDescriptorIndex())
			.append(' ')
			.append(methodInfo.getDescriptor())
			.append(' ');
		ICodeAttribute codeAttribute = methodInfo.getCodeAttribute();
		if (codeAttribute != null) {
			buffer.append(Util.bind("disassembler.commentend"));
			writeNewLine(buffer, lineSeparator, tabNumber);
			buffer
				.append(Util.bind("disassembler.commentstart"))
				.append(' ')
				.append(Util.bind("classfileformat.maxStack"))
				.append(codeAttribute.getMaxStack())
				.append(' ')
				.append(',')
				.append(' ')
				.append(Util.bind("classfileformat.maxLocals"))
				.append(' ')
				.append(codeAttribute.getMaxLocals())
				.append(' ')
				.append(Util.bind("disassembler.commentend"));
			writeNewLine(buffer, lineSeparator, tabNumber);
			disassemble(codeAttribute, buffer, lineSeparator, tabNumber);
		} else {
			buffer.append(Util.bind("disassembler.commentend"));
		}
	}

