	/*
	 * Finds the TypeDeclaration in the given ast corresponding to the given type handle.
	 * Returns null if not found.
	 */
	public TypeDeclaration findType(IType typeHandle) {
		IJavaElement parent = typeHandle.getParent();
		final char[] typeName = typeHandle.getElementName().toCharArray();
		final int occurenceCount = ((SourceType)typeHandle).occurrenceCount;
		final boolean isAnonymous = typeName.length == 0;
		switch (parent.getElementType()) {
			case IJavaElement.COMPILATION_UNIT:
				TypeDeclaration[] types = this.unit.types;
				if (types != null) {
					for (int i = 0, length = types.length; i < length; i++) {
						TypeDeclaration type = types[i];
						if (CharOperation.equals(typeName, type.name)) {
							return type;
						}
					}
				}
				break;
			case IJavaElement.TYPE:
				TypeDeclaration parentDecl = findType((IType)parent);
				types = parentDecl.memberTypes;
				if (types != null) {
					for (int i = 0, length = types.length; i < length; i++) {
						TypeDeclaration type = types[i];
						if (CharOperation.equals(typeName, type.name)) {
							return type;
						}
					}
				}
				break;
			case IJavaElement.FIELD:
				class Visitor extends AbstractSyntaxTreeVisitorAdapter {
					TypeDeclaration result;
					int count = 0;
					public boolean visit(AnonymousLocalTypeDeclaration anonymousTypeDeclaration, BlockScope scope) {
						if (result != null) return false;
						if (isAnonymous && ++count == occurenceCount) {
							result = anonymousTypeDeclaration;
						}
						return false; // visit only one level
					}
					public boolean visit(LocalTypeDeclaration typeDeclaration, BlockScope scope) {
						if (result != null) return false;
						if (!isAnonymous && CharOperation.equals(typeName, typeDeclaration.name)) {
							result = typeDeclaration;
						}
						return false; // visit only one level
					}
				}
				FieldDeclaration fieldDecl = findField((IField)parent);
				Visitor visitor = new Visitor();
				fieldDecl.traverse(visitor, null);
				return visitor.result;
			case IJavaElement.INITIALIZER:
				Initializer initializer = findInitializer((IInitializer)parent);
				visitor = new Visitor();
				initializer.traverse(visitor, null);
				return visitor.result;
			case IJavaElement.METHOD:
				AbstractMethodDeclaration methodDecl = findMethod((IMethod)parent);
				visitor = new Visitor();
				methodDecl.traverse(visitor, methodDecl.scope);
				return visitor.result;
		}
		return null;
	}

