/**
 * Returns the package fragment root represented by the resource, or
 * the package fragment the given resource is located in, or <code>null</code>
 * if the given resource is not on the classpath of the given project.
 */
public static IJavaElement determineIfOnClasspath(
	IResource resource,
	IJavaProject project) {
	IPath resourcePath = resource.getFullPath();
	try {
		IClasspathEntry[] entries = ((JavaProject)project).getResolvedClasspath(true);
		for (int i = 0; i < entries.length; i++) {
			IClasspathEntry entry = entries[i];
			if (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;
			IPath rootPath = entry.getPath();
			if (rootPath.equals(resourcePath)) {
				return project.getPackageFragmentRoot(resource);
			} else if (rootPath.isPrefixOf(resourcePath)) {
				IPackageFragmentRoot root =
					((JavaProject) project).getPackageFragmentRoot(rootPath);
				if (root == null) return null;
				IPath pkgPath = resourcePath.removeFirstSegments(rootPath.segmentCount());
				if (resource.getType() == IResource.FILE) {
					// if the resource is a file, then remove the last segment which
					// is the file name in the package
					pkgPath = pkgPath.removeLastSegments(1);
				}
				String pkgName = Util.packageName(pkgPath);
				if (pkgName == null
					|| JavaConventions.validatePackageName(pkgName.toString()).getSeverity() == IStatus.ERROR) {
					return null;
				}
				return root.getPackageFragment(pkgName.toString());
			}
		}
	} catch (JavaModelException npe) {
		return null;
	}
	return null;
}

