/**
 * Returns a collection of package fragments that have been added/removed
 * as the result of changing the output location to/from the given
 * location. The collection is empty if no package fragments are
 * affected.
 */
protected Vector determineAffectedPackageFragments(IPath location) throws JavaModelException {
	Vector fragments = new Vector();
	JavaProject project = ((JavaProject) getElementsToProcess()[0]);

	// see if this will cause any package fragments to be affected
	IWorkspace workspace = getWorkspace();
	IResource resource = null;
	if (location != null) {
		resource = workspace.getRoot().findMember(location);
	}
	if (resource != null && resource.getType() == IResource.FOLDER) {
		IFolder folder = (IFolder) resource;
		// only changes if it actually existed
		IClasspathEntry[] classpath = project.getResolvedClasspath(true);
		for (int i = 0; i < classpath.length; i++) {
			IClasspathEntry entry = classpath[i];
			IPath path = classpath[i].getPath();
			if (entry.getEntryKind() != IClasspathEntry.CPE_PROJECT && path.isPrefixOf(location) && !path.equals(location)) {
				IPackageFragmentRoot[] roots = project.getPackageFragmentRoots(classpath[i]);
				IPackageFragmentRoot root = roots[0];
				// now the output location becomes a package fragment - along with any subfolders
				Vector folders = new Vector();
				folders.addElement(folder);
				collectAllSubfolders(folder, folders);
				Enumeration elements = folders.elements();
				int segments = path.segmentCount();
				while (elements.hasMoreElements()) {
					IFolder f = (IFolder) elements.nextElement();
					IPath relativePath = f.getFullPath().removeFirstSegments(segments);
					String name = relativePath.toOSString();
					name = name.replace(File.pathSeparatorChar, '.');
					if (name.endsWith(".")) { //$NON-NLS-1$
						name = name.substring(0, name.length() - 1);
					}
					IPackageFragment pkg = root.getPackageFragment(name);
					fragments.addElement(pkg);
				}
			}
		}
	}
	return fragments;
}

