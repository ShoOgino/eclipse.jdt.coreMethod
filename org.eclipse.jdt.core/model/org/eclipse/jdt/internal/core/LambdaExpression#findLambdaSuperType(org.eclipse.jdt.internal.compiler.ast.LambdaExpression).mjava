	public TypeBinding findLambdaSuperType(org.eclipse.jdt.internal.compiler.ast.LambdaExpression lambdaExpression) {
		// start from the specific type, ignoring type arguments:
		TypeBinding original = lambdaExpression.resolvedType.original();
		// infer type arguments from here:
		final TypeBinding descType = lambdaExpression.descriptor.declaringClass;
		if (descType instanceof ParameterizedTypeBinding) {
			final ParameterizedTypeBinding descPTB = (ParameterizedTypeBinding) descType;
			// intermediate type: original pulled up to the level of descType:
			final TypeBinding originalSuper = original.findSuperTypeOriginatingFrom(descType);
			return Scope.substitute(new Substitution() {
							@Override
							public TypeBinding substitute(TypeVariableBinding typeVariable) {
								if (originalSuper instanceof ParameterizedTypeBinding) {
									ParameterizedTypeBinding originalSuperPTB = (ParameterizedTypeBinding) originalSuper;
									TypeBinding[] superArguments = originalSuperPTB.arguments;
									for (int i = 0; i < superArguments.length; i++) {
										// if originalSuper holds typeVariable as it i'th argument, then the i'th argument of descType is our answer:
										if (TypeBinding.equalsEquals(superArguments[i], typeVariable))
											return descPTB.arguments[i];
									}
								}
								// regular substitution:
								return descPTB.substitute(typeVariable);
							}
							@Override
							public boolean isRawSubstitution() {
								return descPTB.isRawType();
							}
							@Override
							public LookupEnvironment environment() {
								return descPTB.environment;
							}
						}, original);
		}
		return original;
	}

