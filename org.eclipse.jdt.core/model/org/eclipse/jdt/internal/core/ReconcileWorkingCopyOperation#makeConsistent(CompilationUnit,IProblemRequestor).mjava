	/*
	 * Makes the given working copy consistent, computes the delta and computes an AST if needed.
	 * Returns the AST.
	 */
	public org.eclipse.jdt.core.dom.CompilationUnit makeConsistent(CompilationUnit workingCopy, IProblemRequestor problemRequestor) throws JavaModelException {
		if (!workingCopy.isConsistent()) {
			// make working copy consistent
			if (this.problems == null) this.problems = new HashMap();
			this.ast = workingCopy.makeConsistent(this.astLevel, this.resolveBindings, reconcileFlags, this.problems, this.progressMonitor);
			this.deltaBuilder.buildDeltas();
			if (this.ast != null && this.deltaBuilder.delta != null)
				this.deltaBuilder.delta.changedAST(this.ast);
			return this.ast;
		}
		if (this.ast != null) return this.ast; // no need to recompute AST if known already
		if (((this.reconcileFlags & ICompilationUnit.FORCE_PROBLEM_DETECTION) != 0) || this.resolveBindings) {
			if (JavaProject.hasJavaNature(workingCopy.getJavaProject().getProject())) {
				HashMap problemMap;
				if (this.problems == null) {
					problemMap = new HashMap();
					if ((this.reconcileFlags & ICompilationUnit.FORCE_PROBLEM_DETECTION) != 0)
						this.problems = problemMap;
				} else
					problemMap = this.problems;
				CompilationUnitDeclaration unit = null;
				try {
					// find problems
					char[] contents = workingCopy.getContents();
					unit =
						CompilationUnitProblemFinder.process(
							workingCopy,
							contents,
							this.workingCopyOwner,
							problemMap,
							this.astLevel != ICompilationUnit.NO_AST/*creating AST if level is not NO_AST */,
							reconcileFlags,
							this.progressMonitor);
					if (this.progressMonitor != null) this.progressMonitor.worked(1);

					// create AST if needed
					if (this.astLevel != ICompilationUnit.NO_AST && unit != null) {
						Map options = workingCopy.getJavaProject().getOptions(true);
						this.ast =
							AST.convertCompilationUnit(
								this.astLevel,
								unit,
								contents,
								options,
								true/*isResolved*/,
								workingCopy,
								reconcileFlags,
								this.progressMonitor);
						if (this.ast != null) {
							this.deltaBuilder.delta = new JavaElementDelta(workingCopy);
							this.deltaBuilder.delta.changedAST(this.ast);
						}
						if (this.progressMonitor != null) this.progressMonitor.worked(1);
					}
			    } catch (JavaModelException e) {
			    	if (JavaProject.hasJavaNature(workingCopy.getJavaProject().getProject()))
			    		throw e;
			    	// else JavaProject has lost its nature (or most likely was closed/deleted) while reconciling -> ignore
			    	// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=100919)
			    } finally {
			        if (unit != null) {
			            unit.cleanUp();
			        }
			    }
			} // else working copy not in a Java project
			return this.ast;
		}
		return null;
	}

