	/*
	 * Update the classpath markers and cycle markers for the projects to update.
	 */
	private void updateClasspathMarkers(IResourceDelta delta) {
		
		Map preferredClasspaths = new HashMap(5);
		Map preferredOutputs = new HashMap(5);
		HashSet affectedProjects = new HashSet(5);
		
		// read .classpath files that have changed, and create markers if format is wrong
		updateClasspathMarkers(delta, affectedProjects, preferredClasspaths, preferredOutputs); 
	
		if (!affectedProjects.isEmpty()) {
			try {
				if (!ResourcesPlugin.getWorkspace().isAutoBuilding()) {
					IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();
					IProject[] projects = workspaceRoot.getProjects();
					int length = projects.length;
					for (int i = 0; i < length; i++){
						IProject project = projects[i];
						JavaProject javaProject = (JavaProject)JavaCore.create(project);
						if (preferredClasspaths.get(javaProject) == null) { // not already updated
							try {
								IPath projectPath = project.getFullPath();
								IClasspathEntry[] classpath = javaProject.getResolvedClasspath(true); // allowed to reuse model cache
								for (int j = 0, cpLength = classpath.length; j < cpLength; j++) {
									IClasspathEntry entry = classpath[j];
									switch (entry.getEntryKind()) {
										case IClasspathEntry.CPE_PROJECT:
											if (affectedProjects.contains(entry.getPath())) {
												javaProject.updateClasspathMarkers(null, null);
											}
											break;
										case IClasspathEntry.CPE_LIBRARY:
											IPath entryPath = entry.getPath();
											IPath libProjectPath = entryPath.removeLastSegments(entryPath.segmentCount()-1);
											if (!libProjectPath.equals(projectPath) // if library contained in another project
													&& affectedProjects.contains(libProjectPath)) {
												javaProject.updateClasspathMarkers(null, null);
											}
											break;
									}
								}
							} catch(JavaModelException e) {
									// project no longer exists
							}
						}
					}
				}
				// update all cycle markers
				JavaProject.updateAllCycleMarkers(preferredClasspaths);
			} catch(JavaModelException e) {
				// project no longer exists
			}
		}
	}

