	/**
	 * @see org.eclipse.jdt.core.IJavaProject#setOptions(Map)
	 */
	public void setOptions(Map newOptions) {

		Preferences preferences = getPreferences();
		if (newOptions != null){
			Iterator keys = newOptions.keySet().iterator();
			while (keys.hasNext()){
				String key = (String)keys.next();
				if (!JavaModelManager.OptionNames.contains(key)) continue; // unrecognized option
				// no filtering for encoding (custom encoding for project is allowed)
				String value = (String)newOptions.get(key);
				preferences.setDefault(key, CUSTOM_DEFAULT_OPTION_VALUE); // empty string isn't the default (26251)
				preferences.setValue(key, value);
			}
		}
			
		// reset to default all options not in new map
		// @see https://bugs.eclipse.org/bugs/show_bug.cgi?id=26255
		// @see https://bugs.eclipse.org/bugs/show_bug.cgi?id=49691
		String[] pNames = preferences.propertyNames();
		int ln = pNames.length;
		for (int i=0; i<ln; i++) {
			String key = pNames[i];
			if (newOptions == null || !newOptions.containsKey(key)) {
				preferences.setToDefault(key); // set default => remove from preferences table
			}
		}

		// Backward compatibility
		String[] propertyNames = preferences.propertyNames();
		for (int i = 0; i < propertyNames.length; i++){
			String propertyName = propertyNames[i];
			// bug 45112
			if (CompilerOptions.OPTION_ReportInvalidAnnotation.equals(propertyName)) {
				preferences.setToDefault(JavaCore.OLD_COMPILER_PB_INVALID_ANNOTATION);
			}
			else if (CompilerOptions.OPTION_ReportMissingAnnotation.equals(propertyName)) {
				preferences.setToDefault(JavaCore.OLD_COMPILER_PB_MISSING_ANNOTATION);
			}
			// end bug 45112
			// bug 46854
			else if (CompilerOptions.OPTION_ReportMissingJavadoc.equals(propertyName)) {
				preferences.setToDefault(JavaCore.OLD_COMPILER_PB_MISSING_JAVADOC);
			}
			// end bug 46854
		}

		// persist options
		savePreferences(preferences);	
	}

