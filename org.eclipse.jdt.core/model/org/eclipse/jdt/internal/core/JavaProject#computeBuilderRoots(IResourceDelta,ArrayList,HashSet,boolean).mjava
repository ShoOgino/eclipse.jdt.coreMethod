	public void computeBuilderRoots(IResourceDelta delta, ArrayList builderRoots, HashSet rootIDs, boolean insideInitialProject)
		throws JavaModelException {

		boolean rememberToDiscard = JavaModelManager.USING_NEW_BUILDER;
		
		IClasspathEntry[] classpath;
		classpath = getResolvedClasspath(true);
		IResource res;
		JavaProject project;

		for (int i = 0; i < classpath.length; i++) {
			IClasspathEntry entry = classpath[i];
			String rootID = ((ClasspathEntry)entry).rootID();
			if (rootIDs.contains(rootID)){
				continue; // skip current entry already found
			}
			if (!insideInitialProject && !entry.isExported()){
				continue; // non-visible entry
			}
			switch (entry.getEntryKind()) {

				case IClasspathEntry.CPE_LIBRARY :
					IPackageFragmentRoot[] roots = this.getPackageFragmentRoots(entry);
					if (roots.length > 0){
						builderRoots.add(roots[0]);
						rootIDs.add(rootID);
					}
					break;

				case IClasspathEntry.CPE_PROJECT :
					// other project contributions are restrained to their binary output
					res = retrieveResource(entry.getPath(), delta);
					if (res != null) {
						project = (JavaProject) JavaCore.create(res);
						if (project.isOpen()) {
							res = retrieveResource(project.getOutputLocation(), delta);
							if (res != null) {
								PackageFragmentRoot root =
									(PackageFragmentRoot) project.getPackageFragmentRoot(res);
								root.setOccurrenceCount(root.getOccurrenceCount() + 1);
								((PackageFragmentRootInfo) root.getElementInfo()).setRootKind(
									IPackageFragmentRoot.K_BINARY);
								root.refreshChildren();
								builderRoots.add(root);
							}
							rootIDs.add(rootID);
							project.computeBuilderRoots(delta, builderRoots, rootIDs, false);
						}
					}
					break;

				case IClasspathEntry.CPE_SOURCE :
					if (getCorrespondingResource().getFullPath().isPrefixOf(entry.getPath())) {
						res = retrieveResource(entry.getPath(), delta);
						if (res != null)
							builderRoots.add(getPackageFragmentRoot(res));
							rootIDs.add(rootID);
					} else {
						IProject proj = (IProject) getWorkspace().getRoot().findMember(entry.getPath());
						project = (JavaProject) JavaCore.create(proj);
						if (proj.isOpen()) {
							res = retrieveResource(project.getOutputLocation(), delta);
							PackageFragmentRoot root =
								(PackageFragmentRoot) project.getPackageFragmentRoot(res);
							root.setOccurrenceCount(root.getOccurrenceCount() + 1);
							((PackageFragmentRootInfo) root.getElementInfo()).setRootKind(
								IPackageFragmentRoot.K_BINARY);
							root.refreshChildren();
							builderRoots.add(root);
							rootIDs.add(rootID);
						}
					}
					break;
			}
		}
	}

