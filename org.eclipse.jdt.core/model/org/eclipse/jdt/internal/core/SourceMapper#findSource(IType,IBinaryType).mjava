	/**
	 * Locates and returns source code for the given (binary) type, in this
	 * SourceMapper's ZIP file, or returns <code>null</code> if source
	 * code cannot be found.
	 */
	public char[] findSource(IType type, IBinaryType info) {
		char[] sourceFileName = info.sourceFileName();
		String name = null;
		if (sourceFileName == null) {
			/*
			 * We assume that this type has been compiled from a file with its name
			 * For example, A.class comes from A.java and p.A.class comes from a file A.java
			 * in the folder p.
			 */
			try {
				if (type.isMember()) {
					IType enclosingType = type.getDeclaringType();
					while (enclosingType.getDeclaringType() != null) {
						enclosingType = enclosingType.getDeclaringType();
					}
					name = enclosingType.getFullyQualifiedName().replace('.', '/') + ".java"; //$NON-NLS-1$
				} else if (type.isLocal() || type.isAnonymous()){
					String fullyQualifiedName = type.getFullyQualifiedName();
					name = fullyQualifiedName.substring(0, fullyQualifiedName.indexOf('$')).replace('.', '/') + ".java"; //$NON-NLS-1$
				} else {
					name = type.getFullyQualifiedName().replace('.', '/') + ".java"; //$NON-NLS-1$
				}
			} catch (JavaModelException e) {
			}
		} else {
			name = new String(sourceFileName);
			IPackageFragment pkgFrag = type.getPackageFragment();
			if (!pkgFrag.isDefaultPackage()) {
				String pkg = type.getPackageFragment().getElementName().replace('.', '/');
				name = pkg + '/' + name;
			}
		}
		if (name == null) {
			return null;
		}

		String fullName;
		//add the root path if specified
		if (!this.rootPath.equals(IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH)) {
			fullName = this.rootPath + '/' + name;
		} else {
			fullName = name;
		}

		char[] source = null;
		if (Util.isArchiveFileName(this.sourcePath.lastSegment())) {
			// try to get the entry
			ZipEntry entry = null;
			ZipFile zip = null;
			try {
				zip = getZip();
				entry = zip.getEntry(fullName);
				if (entry != null) {
					// now read the source code
					byte[] bytes = null;
					try {
						bytes = Util.getZipEntryByteContent(entry, zip);
					} catch (IOException e) {
					}
					if (bytes != null) {
						try {
							source = Util.bytesToChar(bytes, this.encoding);
						} catch (IOException e) {
							source = null;
						}
					}
				}
			} catch (CoreException e) {
				return null;
			} finally {
				JavaModelManager.getJavaModelManager().closeZipFile(zip);
			}
		} else {
			Object target = JavaModel.getTarget(ResourcesPlugin.getWorkspace().getRoot(), this.sourcePath, true);
			if (target instanceof IFolder) {
				IFolder folder = (IFolder)target;
				IResource res = folder.findMember(fullName);
				if (res instanceof IFile) {
					try {
						source = org.eclipse.jdt.internal.core.Util.getResourceContentsAsCharArray((IFile)res, this.encoding);
					} catch (JavaModelException e) {
					}
				}
			} else if (target instanceof File) {
				File file = (File)target;
				if (file.isDirectory()) {
					File sourceFile = new File(file, fullName);
					try {
						source = Util.getFileCharContent(sourceFile, this.encoding);
					} catch (IOException e) {
					}
				}
			}
		}
		return source;
	}

