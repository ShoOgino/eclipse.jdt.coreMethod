	/**
	 * Locates and returns source code for the given (binary) type, in this
	 * SourceMapper's ZIP file, or returns <code>null</code> if source
	 * code cannot be found.
	 */
	public char[] findSource(IType type, IBinaryType info) {
		char[] sourceFileName = info.sourceFileName();
		String name = null;
		if (sourceFileName == null) {
			/*
			 * We assume that this type has been compiled from a file with its name
			 * For example, A.class comes from A.java and p.A.class comes from a file A.java
			 * in the folder p.
			 */
			try {
				if (type.isMember()) {
					IType enclosingType = type.getDeclaringType();
					while (enclosingType.getDeclaringType() != null) {
						enclosingType = enclosingType.getDeclaringType();
					}
					name = enclosingType.getFullyQualifiedName().replace('.', '/') + ".java"; //$NON-NLS-1$
				} else if (type.isLocal() || type.isAnonymous()){
					String fullyQualifiedName = type.getFullyQualifiedName();
					name = fullyQualifiedName.substring(0, fullyQualifiedName.indexOf('$')).replace('.', '/') + ".java"; //$NON-NLS-1$
				} else {
					name = type.getFullyQualifiedName().replace('.', '/') + ".java"; //$NON-NLS-1$
				}
			} catch (JavaModelException e) {
			}
		} else {
			name = new String(sourceFileName);
			IPackageFragment pkgFrag = type.getPackageFragment();
			if (!pkgFrag.isDefaultPackage()) {
				String pkg = type.getPackageFragment().getElementName().replace('.', '/');
				name = pkg + '/' + name;
			}
		}
		if (name == null) {
			return null;
		}

		String fullName;
		if (this.rootPath != null && !this.rootPath.equals(IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH)) {
			fullName = this.rootPath + '/' + name;
		} else {
			fullName = name;
		}

		char[] source = findSource(fullName);
		if (source == null) {
			// root path may just have been a hint: try recomputing it
			String rootPath = this.computeRootPath();
			String newFullName;
			if (rootPath != null && !rootPath.equals(IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH)) {
				if (rootPath.endsWith("/")) { //$NON-NLS-1$
					newFullName = rootPath + name;
				} else {
					newFullName = rootPath + '/' + name;
				}
			} else {
				newFullName = name;
			}
			if (!fullName.equals(newFullName)) {
				source = this.findSource(newFullName);
				if (source != null) {
					// remember right root path
					this.rootPath = rootPath;
				}
			}
		}
		return source;
	}

