	/**
	 * Locates and returns source code for the given (binary) type, in this
	 * SourceMapper's ZIP file, or returns <code>null</code> if source
	 * code cannot be found.
	 */
	public char[] findSource(IType type, IBinaryType info) {
		long time = 0;
		if (VERBOSE) {
			time = System.currentTimeMillis();
		}
		char[] sourceFileName = info.sourceFileName();
		IPackageFragment pkgFrag = type.getPackageFragment();
		String name = null;
		if (sourceFileName == null) {
			/*
			 * We assume that this type has been compiled from a file with its name
			 * For example, A.class comes from A.java and p.A.class comes from a file A.java
			 * in the folder p.
			 */
			try {
				if (type.isMember()) {
					IType enclosingType = type.getDeclaringType();
					while (enclosingType.getDeclaringType() != null) {
						enclosingType = enclosingType.getDeclaringType();
					}
					name = enclosingType.getFullyQualifiedName().replace('.', '/') + ".java"; //$NON-NLS-1$
				} else if (type.isLocal() || type.isAnonymous()){
					String fullyQualifiedName = type.getFullyQualifiedName();
					name = fullyQualifiedName.substring(0, fullyQualifiedName.indexOf('$')).replace('.', '/') + ".java"; //$NON-NLS-1$
				} else {
					name = type.getFullyQualifiedName().replace('.', '/') + ".java"; //$NON-NLS-1$
				}
			} catch (JavaModelException e) {
			}
		} else {
			name = new String(sourceFileName);
			if (!pkgFrag.isDefaultPackage()) {
				String pkg = pkgFrag.getElementName().replace('.', '/');
				name = pkg + '/' + name;
			}
		}
		if (name == null) {
			return null;
		}
	
		char[] source = null;
		
		if (!areRootPathsComputed) {
			computeAllRootPaths(type);
		}
		
		if (this.rootPath != null) {
			source = getSourceForRootPath(this.rootPath, name);
		}

		if (source == null) {
			/*
			 * We should try all existing root paths. If none works, try to recompute it.
			 * If it still doesn't work, then return null
			 */
			if (this.rootPaths != null) {
				loop: for (Iterator iterator = this.rootPaths.iterator(); iterator.hasNext(); ) {
					String currentRootPath = (String) iterator.next();
					if (!currentRootPath.equals(this.rootPath)) {
						source = getSourceForRootPath(currentRootPath, name);
						if (source != null) {
							// remember right root path
							this.rootPath = currentRootPath;
							break loop;
						}
					}
				}
			}
		}
		if (VERBOSE) {
			System.out.println("spent " + (System.currentTimeMillis() - time) + "ms for " + type.getElementName()); //$NON-NLS-1$ //$NON-NLS-2$
		}
		return source;
	}

