	/**
	 * Creates the nested delta deltas based on the affected element
	 * its delta, and the root of this delta tree. Returns the root
	 * of the created delta tree.
	 */
	protected JavaElementDelta createDeltaTree(
		IJavaElement element,
		JavaElementDelta delta) {
		JavaElementDelta childDelta = delta;
		Vector ancestors = getAncestors(element);
		if (ancestors == null) {
			if (this.equalsAndSameParent(delta.getElement(), getElement())) {
				// handle case of two jars that can be equals but not in the same project
				// the element being changed is the root element
				fKind = delta.fKind;
				fChangeFlags = delta.fChangeFlags;
				fMovedToHandle = delta.fMovedToHandle;
				fMovedFromHandle = delta.fMovedFromHandle;
			} else {
				// the given delta is not the root or a child - illegal
				Assert.isTrue(false);
			}
		} else {
			for (int i = 0, size = ancestors.size(); i < size; i++) {
				IJavaElement ancestor = (IJavaElement) ancestors.elementAt(i);
				JavaElementDelta ancestorDelta = new JavaElementDelta(ancestor);
				ancestorDelta.addAffectedChild(childDelta);
				ancestorDelta.fKind = CHANGED;
				ancestorDelta.fChangeFlags = F_CHILDREN;
				childDelta = ancestorDelta;
			}
		}
		return childDelta;
	}

