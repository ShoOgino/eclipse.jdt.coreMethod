/**
 * Adds the child delta to the collection of affected children.  If the
 * child is already in the collection, walk down the hierarchy.
 */
protected void addAffectedChild(JavaElementDelta child) {
	switch (fKind) {
		case ADDED:
		case REMOVED:
			// no need to add a child if this parent is added or removed
			return;
		case CHANGED:
			fChangeFlags |= F_CHILDREN;
			break;
		default:
			fKind = CHANGED;
			fChangeFlags |= F_CHILDREN;
	}
	
	if (fAffectedChildren.length == 0) {
		fAffectedChildren = new IJavaElementDelta[] {child};
		return;
	}
	IJavaElementDelta sameChild = null;
	if (fAffectedChildren != null) {
		for (int i = 0; i < fAffectedChildren.length; i++) {
			if (this.equalsAndSameParent(fAffectedChildren[i].getElement(), child.getElement())) { // handle case of two jars that can be equals but not in the same project
				sameChild = fAffectedChildren[i];
				break;
			}
		}
	}
	if (sameChild == null) { //new affected child

		fAffectedChildren= growAndAddToArray(fAffectedChildren, child);
	} else {
		IJavaElementDelta[] children = child.getAffectedChildren();
		for (int i = 0; i < children.length; i++) {
			JavaElementDelta childsChild = (JavaElementDelta) children[i];
			((JavaElementDelta) sameChild).addAffectedChild(childsChild);
		}
	}
}

