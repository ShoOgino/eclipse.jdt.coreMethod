	/*
	 * Refreshes the external folders referenced on the classpath of the given source project
	 */
	public void refreshReferences(IProject source, IProgressMonitor monitor) {
		IProject externalProject = getExternalFoldersProject();
		if (source.equals(externalProject))
			return;
		if (!JavaProject.hasJavaNature(source))
			return;
		try {
			HashSet externalFolders = getExternalFolders(((JavaProject) JavaCore.create(source)).getResolvedClasspath());
			if (externalFolders == null)
				return;
			final Iterator iterator = externalFolders.iterator();
			Job refreshJob = new Job(Messages.refreshing_external_folders) { 
				public boolean belongsTo(Object family) {
					return family == ResourcesPlugin.FAMILY_MANUAL_REFRESH;
				}
				protected IStatus run(IProgressMonitor pm) {
					try {
						while (iterator.hasNext()) {
							IPath externalPath = (IPath) iterator.next();
							IFolder folder = getFolder(externalPath);
							if (folder != null)
								folder.refreshLocal(IResource.DEPTH_INFINITE, pm);
						}
					} catch (CoreException e) {
						return e.getStatus();
					}
					return Status.OK_STATUS;
				}
			};
			refreshJob.schedule();
		} catch (CoreException e) {
			Util.log(e, "Exception while refreshing external project"); //$NON-NLS-1$
		}
		return;
	}

