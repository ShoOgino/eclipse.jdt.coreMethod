	/**
	 * Matrix saturation implementation of cycle participants.
	 * If a cycle is detected, then cycleParticipants contains all the project involved in this cycle (directly),
	 * no cycle if the set is empty (and started empty)
	 */
	private static void computeCycleParticipants(IJavaProject[] projects, HashSet cycleParticipants){

		int length = projects.length;
		int[][] references = new int[length][length];
		boolean[] changed = new boolean[length];
		HashMap offsets = new HashMap(length);
		
		// initialize offset cache
		for (int i = 0; i < length; i++){
			offsets.put(projects[i].getElementName(), new Integer(i));
		}
		// initialize references with direct prerequisites
		for (int i = 0; i < length; i++){
			try {
				IClasspathEntry[] classpath = projects[i].getResolvedClasspath(true);
				int cpLength = classpath.length;
				for (int j = 0; j < cpLength; j++){
					IClasspathEntry entry = classpath[j];
					if (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT){
						String projectName = entry.getPath().lastSegment();
						Integer offset = (Integer)offsets.get(projectName);
						if (offset != null) {
							references[i][offset.intValue()] = 1;
							changed[i] = true;
						}
					}
				}
			} catch(JavaModelException e){
			}
		}

		// saturation
		boolean hasChanged;
		do {
			hasChanged = false;
			// iterate over references matrix
			for (int i = 0; i < length; i++){
				changed[i] = false;
				for (int j = 0; j < length; j++){
					if (i == j) continue;
					// copy respective references of prereq[j] into ref[i] (if not already there)
					if (references[i][j] != 0 && changed[j]){
						for (int k = 0; k < length; k++){
							if (references[j][k] != 0 && references[i][k] == 0){
								changed[i] = true;
								references[i][k] = 1;
							}
						}
					}
				}
				if (changed[i]) hasChanged = true;
			}
		} while (hasChanged);
		// projects in cycle have a references to themselves (i.e. ref[i][i] != 0)
		for (int i = 0; i < length; i++){
			if (references[i][i] != 0) cycleParticipants.add(projects[i]);
		}
	}

