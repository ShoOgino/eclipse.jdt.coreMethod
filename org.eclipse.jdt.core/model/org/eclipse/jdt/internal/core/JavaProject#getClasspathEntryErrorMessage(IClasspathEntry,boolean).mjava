	/**
	 * Returns a message describing the problem related to this classpath entry if any, or null if entry is fine 
	 * (i.e. if the given classpath entry denotes a valid element to be referenced onto a classpath).
	 */
	private String getClasspathEntryErrorMessage(IClasspathEntry entry, boolean checkSourceAttachment){
		IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();			
		IPath path = entry.getPath();
		
		switch(entry.getEntryKind()){

			// variable entry check
			case IClasspathEntry.CPE_VARIABLE :
				entry = JavaCore.getResolvedClasspathEntry(entry);
				if (entry == null){
					return Util.bind("classpath.unboundVariablePath"/*nonNLS*/, path.toString());
				}
				return getClasspathEntryErrorMessage(entry, checkSourceAttachment);


			// library entry check
			case IClasspathEntry.CPE_LIBRARY :
				if (path != null && path.isAbsolute() && !path.isEmpty()) {
					IPath sourceAttachment = entry.getSourceAttachmentPath();
					Object target = JavaModel.getTarget(workspaceRoot, path, true);
					if (target instanceof IResource){
						IResource resolvedResource = (IResource) target;
						switch(resolvedResource.getType()){
							case IResource.FILE :
								String extension = resolvedResource.getFileExtension();
								if ("jar"/*nonNLS*/.equalsIgnoreCase(extension) || "zip"/*nonNLS*/.equalsIgnoreCase(extension)){ // internal binary archive
									if (checkSourceAttachment 
										&& sourceAttachment != null
										&& !sourceAttachment.isEmpty()
										&& JavaModel.getTarget(workspaceRoot, sourceAttachment, true) == null){
										return Util.bind("classpath.unboundSourceAttachment"/*nonNLS*/, sourceAttachment.toString());
									}
								}
								break;
							case IResource.FOLDER :	// internal binary folder
								if (checkSourceAttachment 
									&& sourceAttachment != null 
									&& !sourceAttachment.isEmpty()
									&& JavaModel.getTarget(workspaceRoot, sourceAttachment, true) == null){
									return Util.bind("classpath.unboundSourceAttachment"/*nonNLS*/, sourceAttachment.toString());
								}
						}
					} else if (target instanceof File){
						if (checkSourceAttachment 
							&& sourceAttachment != null 
							&& !sourceAttachment.isEmpty()
							&& JavaModel.getTarget(workspaceRoot, sourceAttachment, true) == null){
							return Util.bind("classpath.unboundSourceAttachment"/*nonNLS*/, sourceAttachment.toString());
						}
					} else {
						return Util.bind("classpath.unboundLibrary"/*nonNLS*/, path.toString());
					}
				} else {
					return Util.bind("classpath.illegalLibraryPath"/*nonNLS*/, path.toString());
				}
				break;

			// project entry check
			case IClasspathEntry.CPE_PROJECT :
				if (path != null && path.isAbsolute() && !path.isEmpty()) {
					IProject project = workspaceRoot.getProject(path.segment(0));
					try {
						if (!project.exists() || !project.hasNature(JavaCore.NATURE_ID)){
							return Util.bind("classpath.unboundProject"/*nonNLS*/, path.segment(0).toString());
						}
					} catch (CoreException e){
						return Util.bind("classpath.unboundProject"/*nonNLS*/, path.segment(0).toString());
					}
				} else {
					return Util.bind("classpath.illegalProjectPath"/*nonNLS*/, path.segment(0).toString());
				}
				break;

			// project source folder
			case IClasspathEntry.CPE_SOURCE :
				if (path != null && path.isAbsolute() && !path.isEmpty()) {
					IPath projectPath= getProject().getFullPath();
					if (!projectPath.isPrefixOf(path) || JavaModel.getTarget(workspaceRoot, path, true) == null){
						return Util.bind("classpath.unboundSourceFolder"/*nonNLS*/, path.toString());
					}
				} else {
					return Util.bind("classpath.illegalSourceFolderPath"/*nonNLS*/, path.toString());
				}
				break;
		}
		return null;
	}

