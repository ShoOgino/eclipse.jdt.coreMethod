/**
 * @see IWorkingCopy
 */
public void destroy() {
	if (--this.useCount > 0) {
		if (SHARED_WC_VERBOSE) {
			System.out.println("Decrementing use count of shared working copy " + this.toDebugString());//$NON-NLS-1$
		}
		return;
	}
	try {
		close();
		
		// if original element is not on classpath flush it from the cache 
		IJavaElement originalElement = this.getOriginalElement();
		if (!this.getParent().exists()) {
			((CompilationUnit)originalElement).close();
		}
		
		// remove working copy from the cache
		JavaModelManager manager = JavaModelManager.getJavaModelManager();
		
		// In order to be shared, working copies have to denote the same compilation unit 
		// AND use the same buffer factory.
		// Assuming there is a little set of buffer factories, then use a 2 level Map cache.
		Map sharedWorkingCopies = manager.sharedWorkingCopies;
		
		Map perFactoryWorkingCopies = 
			this.bufferFactory == null 
				?(Map) sharedWorkingCopies.get(CompilationUnit.DEFAULT_FACTORY)  
				: (Map) sharedWorkingCopies.get(this.bufferFactory);
		if (perFactoryWorkingCopies != null){
			if (perFactoryWorkingCopies.remove(originalElement) != null) {
				if (SHARED_WC_VERBOSE) {
					System.out.println("Destroying shared working copy " + this.toDebugString());//$NON-NLS-1$
				}
	
				// report removed java delta
				JavaElementDelta delta = new JavaElementDelta(this.getJavaModel());
				delta.removed(this);
				manager.fire(delta, JavaModelManager.DEFAULT_CHANGE_EVENT);
			}
		}		
	} catch (JavaModelException e) {
		// do nothing
	}
}

