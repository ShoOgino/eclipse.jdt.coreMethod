/**
 * Creates a compilation unit.
 *
 * @exception JavaModelException if unable to create the compilation unit.
 */
protected void executeOperation() throws JavaModelException {
	beginTask(Util.bind("operation.createUnitProgress"), 2); //$NON-NLS-1$
	JavaElementDelta delta = newJavaElementDelta();
	ICompilationUnit unit = getCompilationUnit();
	IPackageFragment pkg = (IPackageFragment) getParentElement();
	IContainer folder = (IContainer) pkg.getUnderlyingResource();
	worked(1);
	IFile compilationUnitFile = folder.getFile(new Path(fName));
	if (compilationUnitFile.exists()) {
		// update the contents of the existing unit if fForce is true
		if (fForce) {
			unit.getBuffer().setContents(fSource);
			unit.save(new NullProgressMonitor(), false);
			fResultElements = new IJavaElement[] {unit};
			if (unit.getParent().exists()) {
				for (int i = 0; i < fResultElements.length; i++) {
					delta.changed(fResultElements[i], IJavaElementDelta.F_CONTENT);
				}
				addDelta(delta);
			}
		} else {
			throw new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.NAME_COLLISION));
		}
	} else {
		InputStream stream = new ByteArrayInputStream(BufferManager.stringToBytes(fSource));
		createFile(folder, unit.getElementName(), stream, false);
		fResultElements = new IJavaElement[] {unit};
		if (unit.getParent().exists()) {
			for (int i = 0; i < fResultElements.length; i++) {
				delta.added(fResultElements[i]);
			}
			addDelta(delta);
		}
	} 
	worked(1);
	done();
}

