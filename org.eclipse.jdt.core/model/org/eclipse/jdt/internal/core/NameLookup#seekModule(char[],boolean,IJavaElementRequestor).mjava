	public void seekModule(char[] name, boolean prefix, IJavaElementRequestor requestor) {
		int count= this.packageFragmentRoots.length;
		for (int i= 0; i < count; i++) {
			if (requestor.isCanceled())
				return;
			//Answer answer = findType(String.valueOf(TypeConstants.MODULE_INFO_NAME), false, 0, false);
			IPackageFragmentRoot root= this.packageFragmentRoots[i];
			IModule module = null;
			if (root instanceof JrtPackageFragmentRoot) {
				if (!isMatching(name, root.getElementName().toCharArray(), prefix)) {
					continue;
				}
			}
			module = getModule((PackageFragmentRoot) root);
			if (module != null && isMatching(name, module.name(), prefix))
				requestor.acceptModule(module);
			else if (module == null) {
				try {
					IJavaElement[] compilationUnits = root.getChildren();
					for (int j = 0, length = compilationUnits.length; j < length; j++) {
						if (requestor.isCanceled())
							return;
						// only look in the default package
						if (compilationUnits[j].getElementName().length() == 0) {
							
						IType type = findType(String.valueOf(TypeConstants.MODULE_INFO_NAME), (PackageFragment)compilationUnits[j], false, 0, false, false);
						if (type == null)
							continue;
						if (type.isBinary()) {
								module = ((ClassFileReader)(((BinaryType)type).getElementInfo())).getModuleDeclaration();
						} else {
							module = (IModule)(((SourceType)type).getElementInfo());
						}
						if (module != null) {
							((PackageFragmentRootInfo) ((PackageFragmentRoot) root).getElementInfo()).setModule(module);
							 if (isMatching(name, module.name(), prefix))
								 requestor.acceptModule(module);
						} else {
							((PackageFragmentRootInfo) ((PackageFragmentRoot) root).getElementInfo()).setModule(ModuleEnvironment.UNNAMED_MODULE);
						}
						break;
						}
					}
				} catch (JavaModelException e) {
					//
				}
			}
		}
	}

