public void acceptLocalMethod(SourceTypeBinding typeBinding, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, boolean isConstructor, CompilationUnitDeclaration parsedUnit, boolean isDeclaration, int start, int end) {
	IType type = (IType)this.handleFactory.createElement(typeBinding.scope.referenceContext, parsedUnit, this.openable);
	// fix for 1FWFT6Q
	if (type != null) {
		if (type.isBinary()) {
			
			// need to add a paramater for constructor in binary type
			IType declaringDeclaringType = type.getDeclaringType();
			
			boolean isStatic = false;
			try {
				isStatic = Flags.isStatic(type.getFlags());
			} catch (JavaModelException e) {
				// isStatic == false
			}
			
			if(declaringDeclaringType != null && isConstructor	&& !isStatic) {
				int length = parameterPackageNames.length;
				System.arraycopy(parameterPackageNames, 0, parameterPackageNames = new char[length+1][], 1, length);
				System.arraycopy(parameterTypeNames, 0, parameterTypeNames = new char[length+1][], 1, length);
				System.arraycopy(parameterSignatures, 0, parameterSignatures = new String[length+1], 1, length);
				
				parameterPackageNames[0] = declaringDeclaringType.getPackageFragment().getElementName().toCharArray();
				parameterTypeNames[0] = declaringDeclaringType.getTypeQualifiedName().toCharArray();
				parameterSignatures[0] = new String(Engine.getSignature(typeBinding.enclosingType()));
			}
			
			acceptBinaryMethod(type, selector, parameterPackageNames, parameterTypeNames, parameterSignatures);
		} else {
			acceptSourceMethod(type, selector, parameterPackageNames, parameterTypeNames);
		}
	}
}

