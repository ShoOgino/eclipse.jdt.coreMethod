/**
 * @see IDocumentElementRequestor#enterField(
	int declarationStart,
	int[] javaDocPositions,	
	int modifiers,
	int modifiersStart,
	char[] type,
	int typeStart,
	int typeEnd,
 	int typeDimensionCount,
	char[] name,
	int nameStart,
	int nameEnd,
	int extendedTypeDimensionCount,
	int extendedTypeDimensionEnd)
 */
public void enterField(int declarationStart, int[] javaDocPositions, int modifiers, int modifiersStart, 
	char[] type, int typeStart, int typeEnd, int typeDimensionCount, char[] name, 
	int nameStart, int nameEnd, int extendedTypeDimensionCount, 
	int extendedTypeDimensionEnd) {
	int[] sourceRange = {declarationStart, 
		(extendedTypeDimensionEnd > nameEnd) ? extendedTypeDimensionEnd : nameEnd};
	int[] nameRange = {nameStart, nameEnd};
	int[] commentRange = {-1, -1};
		if (javaDocPositions != null) {
			int length = javaDocPositions.length;
			commentRange[0] = javaDocPositions[0];
			commentRange[1] = javaDocPositions[length - 1];
		}
	int[] modifiersRange = {-1, -1};
	if (modifiersStart > -1) {
		modifiersRange[0] = modifiersStart;
		modifiersRange[1] = typeStart - 1;
	}
	int[] typeRange = {typeStart, typeEnd};
	boolean hasInitializer = false; // fixed on exitField
	int[] initializerRange = {-1, -1}; // fixed on exitField
	boolean isVariableDeclarator = false;
	if (fNode instanceof DOMField) {
		DOMField field = (DOMField)fNode;
		if (field.fTypeRange[0] == typeStart)
			isVariableDeclarator = true;
	}	
	fNode = new DOMField(fDocument, sourceRange, CharOperation.charToString(name), nameRange, commentRange, 
		modifiers, modifiersRange, typeRange, CharOperation.charToString(type), hasInitializer, 
		initializerRange, isVariableDeclarator);
	addChild(fNode);
	fStack.push(fNode);
}

