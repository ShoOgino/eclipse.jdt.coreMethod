/**
 * Adds the given un-parented node (document fragment) as the last child of
 * this node without setting this node's 'fragmented' flag. This
 * method is only used by the <code>DOMBuilder</code> when creating a new DOM such
 * that a new DOM is unfragmented.
 */
void basicAddChild(IDOMNode child) throws IllegalArgumentException, DOMException {
	// verify child may be added
	if (!canHaveChildren()) {
		throw new DOMException("attempt to add child to node that cannot have children");
	}
	if (child == null) {
		throw new IllegalArgumentException("attempt to add null child");
	}
	if (!isAllowableChild(child)) {
		throw new DOMException("attempt to add child of incompatible type");
	}
	if (child.getParent() != null) {
		throw new DOMException("attempt to add child that is already parented");
	}
	/* NOTE: To test if the child is an ancestor of this node, we
	 * need only test if the root of this node is the child (the child
	 * is already a root since we have just guarenteed it has no parent).
	 */
	if (child == getRoot()) {
		throw new DOMException("attempt to add ancestor as child");
	}

	DOMNode node= (DOMNode)child;
	
	// if the child is not already part of this document, localize its contents
	// before adding it to the tree
	if (node.getDocument() != getDocument()) {
		node.localizeContents();
	}
	
	// add the child last
	if (fFirstChild == null) {
		// this is the first and only child
		fFirstChild= node;
	} else {
		fLastChild.fNextNode= node;
		node.fPreviousNode= fLastChild;
	}
	fLastChild= node;
	node.fParent= this;
}

