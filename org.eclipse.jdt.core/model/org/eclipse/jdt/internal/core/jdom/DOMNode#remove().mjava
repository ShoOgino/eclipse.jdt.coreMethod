/**
 * Separates this node from its parent and siblings, maintaining any ties that
 * this node has to the underlying document fragment.
 *
 * <p>When a child is removed, its parent is fragmented such that it properly
 * generates its contents.
 *
 * @see IDOMNode#remove()
 */
public void remove() {

	if (fParent != null) {
		fParent.fragment();
	}
	
	// link siblings
	if (fNextNode != null) {
		fNextNode.fPreviousNode= fPreviousNode;
	}
	if (fPreviousNode != null) {
		fPreviousNode.fNextNode= fNextNode;
	}
	// fix parent's pointers
	if (fParent != null) {
		if (fParent.fFirstChild == this) {
			fParent.fFirstChild= fNextNode;
		}
		if (fParent.fLastChild == this) {
			fParent.fLastChild= fPreviousNode;
		}
	}
	// remove myself
	fParent= null;
	fNextNode= null;
	fPreviousNode= null;
}

