/**
 * Separates this node from its parent and siblings, maintaining any ties that
 * this node has to the underlying document fragment.
 *
 * <p>When a child is removed, its parent is fragmented such that it properly
 * generates its contents.
 *
 * @see IDOMNode#remove()
 */
public void remove() {

	if (this.fParent != null) {
		this.fParent.fragment();
	}

	// link siblings
	if (this.fNextNode != null) {
		this.fNextNode.fPreviousNode= this.fPreviousNode;
	}
	if (this.fPreviousNode != null) {
		this.fPreviousNode.fNextNode= this.fNextNode;
	}
	// fix parent's pointers
	if (this.fParent != null) {
		if (this.fParent.fFirstChild == this) {
			this.fParent.fFirstChild= this.fNextNode;
		}
		if (this.fParent.fLastChild == this) {
			this.fParent.fLastChild= this.fPreviousNode;
		}
	}
	// remove myself
	this.fParent= null;
	this.fNextNode= null;
	this.fPreviousNode= null;
}

