	/**
	 * Creates a new detailed FIELD document fragment on the given range of the document.
	 *
	 * @param document - the document containing this node's original contents
	 * @param sourceRange - a two element array of integers describing the
	 *		entire inclusive source range of this node within its document.
	 * 		Contents start on and include the character at the first position.
	 *		Contents end on and include the character at the last position.
	 *		An array of -1's indicates this node's contents do not exist
	 *		in the document.
	 * @param name - the identifier portion of the name of this field,
	 * 		corresponding to VariableDeclaratorId (JLS 8.3).
	 * @param nameRange - a two element array of integers describing the
	 *		entire inclusive source range of this node's name within its document,
	 *		including any array qualifiers that might follow the name.
	 * @param commentRange - a two element array describing the comments that precede
	 *		the member declaration. The first matches the start of this node's
	 *		sourceRange, and the second is the new-line or first non-whitespace
	 *		character following the last comment. If no comments are present,
	 *		this array contains two -1's.
	 * @param flags - an integer representing the modifiers for this member. The
	 *		integer can be analyzed with org.eclipse.jdt.core.Flags
	 * @param modifierRange - a two element array describing the location of
	 *		modifiers for this member within its source range. The first integer
	 *		is the first character of the first modifier for this member, and
	 *		the second integer is the last whitespace character preceeding the
	 *		next part of this member declaration. If there are no modifiers present
	 *		in this node's source code (i.e. default protection), this array
	 *		contains two -1's.
	 * @param typeRange- a two element array describing the location of the
	 *		typeName in the document - the positions of the first and last characters
	 *		of the typeName.
	 * @param type - the type of the field, in normalized form, as defined in
	 *      Type in Field Declaration (JLS 8.3)
	 * @param hasInitializer - true if this field declaration includes an initializer,
	 *		otherwise false
	 * @param initRange - a two element array describing the location of the initializer
	 *		in the declaration. The first integer is the position of the character
	 *		following the equals sign, and the position of the last character is the last
	 *		in the initializer. If this field has no initializer, this array contains
	 *		two -1's.
	 * @param isVariableDeclarator - true if the field is a seconday variable declarator
	 * 		for a previous field declaration.
	 */
	DOMField(
		char[] document,
		int[] sourceRange,
		String name,
		int[] nameRange,
		int[] commentRange,
		int flags,
		int[] modifierRange,
		int[] typeRange,
		String type,
		boolean hasInitializer,
		int[] initRange,
		boolean isVariableDeclarator) {
		super(
			document,
			sourceRange,
			name,
			nameRange,
			commentRange,
			flags,
			modifierRange);

		fType = type;
		fTypeRange = typeRange;
		setHasInitializer(hasInitializer);
		fInitializerRange = initRange;
		setIsVariableDeclarator(isVariableDeclarator);
		setMask(MASK_DETAILED_SOURCE_INDEXES, true);

	}

