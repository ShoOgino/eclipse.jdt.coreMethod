/**
 * @see IDOMNode#insertSibling(IDOMNode)
 */
public void insertSibling(IDOMNode sibling) throws IllegalArgumentException, DOMException {
	// verify sibling may be added
	if (sibling == null) {
		throw new IllegalArgumentException(Messages.dom_addNullSibling); 
	}
	if (fParent == null) {
		throw new DOMException(Messages.dom_addSiblingBeforeRoot); 
	}
	if (!fParent.isAllowableChild(sibling)) {
		throw new DOMException(Messages.dom_addIncompatibleSibling); 
	}
	if (sibling.getParent() != null) {
		throw new DOMException(Messages.dom_addSiblingWithParent); 
	}
	/* NOTE: To test if the sibling is an ancestor of this node, we
	 * need only test if the root of this node is the child (the sibling
	 * is already a root since we have just guaranteed it has no parent).
	 */
	if (sibling == getRoot()) {
		throw new DOMException(Messages.dom_addAncestorAsSibling); 
	}

	DOMNode node= (DOMNode)sibling;
	
	// if the sibling is not already part of this document, localize its contents
	// before inserting it into the tree
	if (node.getDocument() != getDocument()) {
		node.localizeContents();
	}

	// insert the node
	if (fPreviousNode == null) {
		fParent.fFirstChild= node;
	} else {
		fPreviousNode.fNextNode= node;	
	}
	node.fParent= fParent;
	node.fPreviousNode= fPreviousNode;
	node.fNextNode= this;
	fPreviousNode= node;

	// if the node is a constructor, it must also be fragmented to update the constructor's name
	if (node.getNodeType() == IDOMNode.METHOD && ((IDOMMethod)node).isConstructor()) {
		node.fragment();
	} else {
		fParent.fragment();
	}
}

