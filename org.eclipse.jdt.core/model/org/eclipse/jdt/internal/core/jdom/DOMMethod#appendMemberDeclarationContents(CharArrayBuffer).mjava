/**
 * @see DOMMember#appendMemberDeclarationContents(CharArrayBuffer)
 */
@Override
protected void appendMemberDeclarationContents(CharArrayBuffer buffer) {

	if (isConstructor()) {
		buffer
			.append(getConstructorName())
			.append(this.fDocument, this.fNameRange[1] + 1, this.fParameterRange[0] - this.fNameRange[1] - 1);
	} else {
		buffer.append(getReturnTypeContents());
		if (this.fReturnTypeRange[0] >= 0) {
			buffer.append(this.fDocument, this.fReturnTypeRange[1] + 1, this.fNameRange[0] - this.fReturnTypeRange[1] - 1);
		} else {
			buffer.append(' ');
		}
		buffer
			.append(getNameContents())
			.append(this.fDocument, this.fNameRange[1] + 1, this.fParameterRange[0] - this.fNameRange[1] - 1);
	}
	if (this.fParameterList != null) {
		buffer.append(this.fParameterList);
	} else {
		buffer.append(this.fDocument, this.fParameterRange[0], this.fParameterRange[1] + 1 - this.fParameterRange[0]);
	}
	int start;
	if (hasTrailingArrayQualifier() && isReturnTypeAltered()) {
		start= this.fReturnTypeRange[3] + 1;
	} else {
		start= this.fParameterRange[1] + 1;
	}
	if (this.fExceptions != null) {
		// add 'throws' keyword
		if (this.fExceptionRange[0] >= 0) {
			buffer.append(this.fDocument, start, this.fExceptionRange[0] - start);
		} else {
			buffer.append(" throws "); //$NON-NLS-1$
		}
		// add exception list
		if (this.fExceptionList != null) {
			buffer.append(this.fExceptionList);
			// add space before body
			if (this.fExceptionRange[0] >= 0) {
				buffer.append(this.fDocument, this.fExceptionRange[1] + 1, this.fBodyRange[0] - this.fExceptionRange[1] - 1);
			} else {
				buffer.append(this.fDocument, this.fParameterRange[1] + 1, this.fBodyRange[0] - this.fParameterRange[1] - 1);
			}
		} else {
			// add list and space before body
			buffer.append(this.fDocument, this.fExceptionRange[0], this.fBodyRange[0] - this.fExceptionRange[0]);
		}
	} else {
		// add space before body
		if (this.fExceptionRange[0] >= 0) {
			buffer.append(this.fDocument, this.fExceptionRange[1] + 1, this.fBodyRange[0] - this.fExceptionRange[1] - 1);
		} else {
			buffer.append(this.fDocument, start, this.fBodyRange[0] - start);
		}
	}

}

