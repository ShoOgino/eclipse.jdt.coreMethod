	/**
	 * Generates the delta of removed/added/reordered roots.
	 * Use three deltas in case the same root is removed/added/reordered (i.e. changed from
	 * K_SOURCE to K_BINARY or visa versa)
	 */
	protected void generateClasspathChangeDeltas(IClasspathEntry[] oldResolvedPath, IClasspathEntry[] newResolvedPath, JavaModelManager manager, JavaProject project) {

		boolean hasChangedSourceEntries = false;
		
		JavaElementDelta delta= new JavaElementDelta(getJavaModel());
		boolean hasDelta = false;
		boolean oldResolvedPathLongest= oldResolvedPath.length >= newResolvedPath.length;
		
		for (int i= 0; i < oldResolvedPath.length; i++) {

			int index= classpathContains(newResolvedPath, oldResolvedPath[i]);
			if (index == -1) {
				IPackageFragmentRoot[] pkgFragmentRoots = project.getPackageFragmentRoots(oldResolvedPath[i]);
				addDeltas(pkgFragmentRoots, IJavaElementDelta.F_REMOVED_FROM_CLASSPATH, delta);
				hasChangedSourceEntries |= oldResolvedPath[i].getEntryKind() == IClasspathEntry.CPE_SOURCE;

				// force detach source on jar package fragment roots (source will be lazily computed when needed)
				for (int j = 0, length = pkgFragmentRoots.length; j < length; j++) {
					IPackageFragmentRoot root = pkgFragmentRoots[j];

					if (root instanceof JarPackageFragmentRoot) {
						JarPackageFragmentRoot jarRoot = (JarPackageFragmentRoot)root;
						try {
							jarRoot.getWorkspace().getRoot().setPersistentProperty(jarRoot.getSourceAttachmentPropertyName(), null); // loose info - will be recomputed
						} catch(CoreException ce){
						}
					}
				}
				hasDelta = true;

			} else if (oldResolvedPathLongest && index != i) { //reordering of the classpath
				addDeltas(project.getPackageFragmentRoots(oldResolvedPath[i]), IJavaElementDelta.F_CLASSPATH_REORDER, delta);
				hasChangedSourceEntries |= oldResolvedPath[i].getEntryKind() == IClasspathEntry.CPE_SOURCE;
				hasDelta = true;
			}
		}

		for (int i= 0; i < newResolvedPath.length; i++) {

			int index= classpathContains(oldResolvedPath, newResolvedPath[i]);
			if (index == -1) {
				addDeltas(project.getPackageFragmentRoots(newResolvedPath[i]), IJavaElementDelta.F_ADDED_TO_CLASSPATH, delta);
				hasChangedSourceEntries |= newResolvedPath[i].getEntryKind() == IClasspathEntry.CPE_SOURCE;
				hasDelta = true;

			} else if (!oldResolvedPathLongest && index != i) { //reordering of the classpath
				addDeltas(project.getPackageFragmentRoots(newResolvedPath[i]), IJavaElementDelta.F_CLASSPATH_REORDER, delta);
				hasChangedSourceEntries |= newResolvedPath[i].getEntryKind() == IClasspathEntry.CPE_SOURCE;				
				hasDelta = true;
			}
		}
		if (hasDelta) {
			try {
				project.saveClasspath(this.saveClasspath);
			} catch(JavaModelException e){
			}
			this.addDelta(delta);
			// loose all built state - next build will be a full one
			manager.setLastBuiltState(project.getProject(), null);

			if (hasChangedSourceEntries) updateAffectedProjects(project.getProject().getFullPath());
		}
	}

