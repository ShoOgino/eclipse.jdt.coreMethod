	/*
	 * Opens an <code>Openable</code> that is known to be closed (no check for <code>isOpen()</code>).
	 * Returns the created element info.
	 */
	protected Object openWhenClosed(Object info, boolean forceAdd, IProgressMonitor monitor) throws JavaModelException {
		JavaModelManager manager = JavaModelManager.getJavaModelManager();
		boolean hadTemporaryCache = manager.hasTemporaryCache();
		try {
			HashMap<IJavaElement, Object> newElements = manager.getTemporaryCache();
			generateInfos(info, newElements, monitor);
			if (info == null) {
				info = newElements.get(this);
			}
			// Bug 548456: check if some concurrent call already added the info to the manager, do not throw an exception if so
			if (info == null) {
				info = manager.getInfo(this);
				if (info != null) {
					return info;
				}
			}
			if (info == null) { // a source ref element could not be opened
				// close the buffer that was opened for the openable parent
				Openable openable = (Openable) getOpenable();
				// Bug 62854: close only the openable's buffer
				if (newElements.containsKey(openable)
						// Bug 526116: do not close current working copy, which can impact save actions
						&& !(openable instanceof ICompilationUnit && ((ICompilationUnit) openable).isWorkingCopy())) {
					openable.closeBuffer();
				}
				throw newNotPresentException();
			}
			if (!hadTemporaryCache) {
				info = manager.putInfos(this, info, forceAdd, newElements);
			}
		} finally {
			if (!hadTemporaryCache) {
				manager.resetTemporaryCache();
			}
		}
		return info;
	}

