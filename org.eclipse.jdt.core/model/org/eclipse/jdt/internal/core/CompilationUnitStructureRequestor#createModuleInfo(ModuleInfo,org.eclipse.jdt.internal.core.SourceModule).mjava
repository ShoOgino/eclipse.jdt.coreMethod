private org.eclipse.jdt.internal.core.ModuleDescriptionInfo createModuleInfo(ModuleInfo modInfo, org.eclipse.jdt.internal.core.SourceModule handle) {
	org.eclipse.jdt.internal.core.ModuleDescriptionInfo info = org.eclipse.jdt.internal.core.ModuleDescriptionInfo.createModule((ModuleDeclaration) modInfo.node);
	info.setHandle(handle);
	info.setSourceRangeStart(modInfo.declarationStart);
	info.setFlags(modInfo.modifiers);
	info.setNameSourceStart(modInfo.nameSourceStart);
	info.setNameSourceEnd(modInfo.nameSourceEnd);
	this.newElements.put(handle, info);

	if (modInfo.requires != null) {
		for (int i = 0, length = modInfo.requires.length; i < length; i++) {
			RequiresInfo reqInfo = modInfo.requires[i];
			acceptModuleRequirement(reqInfo, info);
		}
	}
	if (modInfo.exports != null) {
		for (int i = 0, length = modInfo.exports.length; i < length; i++) {
			PackageExportInfo expInfo = modInfo.exports[i];
			acceptPackageExport(expInfo, info);
		}
	}
	if (modInfo.services != null) {
		for (int i = 0, length = modInfo.services.length; i < length; i++) {
			ServicesInfo serInfo = modInfo.services[i];
			acceptProvidedServices(serInfo, info);
		}
	}
	if (modInfo.usedServices != null) {
		char[][] services = new char[modInfo.usedServices.length][];
		for (int i = 0, length = modInfo.usedServices.length; i < length; i++) {
			services[i] = modInfo.usedServices[i];
		}
		info.usedServices = services;
	}
	if (modInfo.opens != null) {
		for (int i = 0, length = modInfo.opens.length; i < length; i++) {
			PackageExportInfo expInfo = modInfo.opens[i];
			acceptOpensPackage(expInfo, info);
		}
	}
	return info;
}

