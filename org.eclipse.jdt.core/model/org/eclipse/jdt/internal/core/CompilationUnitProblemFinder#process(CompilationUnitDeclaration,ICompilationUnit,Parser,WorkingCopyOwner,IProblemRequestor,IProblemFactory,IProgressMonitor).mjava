	public static CompilationUnitDeclaration process(
		CompilationUnitDeclaration unit,
		ICompilationUnit unitElement, 
		Parser parser,
		WorkingCopyOwner workingCopyOwner,
		IProblemRequestor problemRequestor,
		IProblemFactory problemFactory,
		IProgressMonitor monitor)
		throws JavaModelException {

		char[] fileName = unitElement.getElementName().toCharArray();
		
		JavaProject project = (JavaProject) unitElement.getJavaProject();
		CompilationUnitProblemFinder problemFinder =
			new CompilationUnitProblemFinder(
				project.newSearchableNameEnvironment(workingCopyOwner),
				getHandlingPolicy(),
				project.getOptions(true),
				getRequestor(),
				problemFactory);
		if (parser != null) {
			problemFinder.parser = parser;
		}

		try {
			String encoding = project.getOption(JavaCore.CORE_ENCODING, true);
			
			IPackageFragment packageFragment = (IPackageFragment)unitElement.getAncestor(IJavaElement.PACKAGE_FRAGMENT);
			char[][] expectedPackageName = null;
			if (packageFragment != null){
				expectedPackageName = CharOperation.splitOn('.', packageFragment.getElementName().toCharArray());
			}
			if (unit == null) {
				unit = problemFinder.resolve(
					new BasicCompilationUnit(
						unitElement.getSource().toCharArray(),
						expectedPackageName,
						new String(fileName),
						encoding),
					true, // verify methods
					true, // analyze code
					true); // generate code
			} else {
				problemFinder.resolve(
					unit,
					null, // no need for source
					true, // verify methods
					true, // analyze code
					true); // generate code
			}
			reportProblems(unit, problemRequestor, monitor);
			return unit;
		} catch(RuntimeException e) { 
			// avoid breaking other tools due to internal compiler failure (40334)
			Util.log(e, "Exception occurred during problem detection: "); //$NON-NLS-1$ 
			throw new JavaModelException(e, IJavaModelStatusConstants.COMPILER_FAILURE);
		} finally {
			if (unit != null) {
				unit.cleanUp();
			}
			problemFinder.lookupEnvironment.reset();			
		}
	}

