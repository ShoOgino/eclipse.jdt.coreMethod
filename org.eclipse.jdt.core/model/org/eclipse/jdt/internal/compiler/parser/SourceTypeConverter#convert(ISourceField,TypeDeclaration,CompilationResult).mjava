	/*
	 * Convert a field source element into a parsed field declaration
	 */
	private FieldDeclaration convert(ISourceField sourceField, TypeDeclaration type, CompilationResult compilationResult) {

		FieldDeclaration field = new FieldDeclaration();

		int start = sourceField.getNameSourceStart();
		int end = sourceField.getNameSourceEnd();

		field.name = sourceField.getName();
		field.sourceStart = start;
		field.sourceEnd = end;
		field.type = createTypeReference(sourceField.getTypeName(), start, end);
		field.declarationSourceStart = sourceField.getDeclarationSourceStart();
		field.declarationSourceEnd = sourceField.getDeclarationSourceEnd();
		field.modifiers = sourceField.getModifiers();

		/* conversion of field constant */
		if ((this.flags & FIELD_INITIALIZATION) != 0) {
			char[] initializationSource = sourceField.getInitializationSource();
			if (initializationSource != null) {
				if (this.parser == null) {
					this.parser = new Parser(this.problemReporter, true);
				}
				this.parser.parse(field, type, this.unit, initializationSource);
			}
		}
		
		/* conversion of local and anonymous types */
		if ((this.flags & LOCAL_TYPE) != 0 && sourceField instanceof SourceFieldElementInfo) {
			IJavaElement[] children = ((SourceFieldElementInfo) sourceField).getChildren();
			int childrenLength = children.length;
			if (Flags.isEnum(field.modifiers)) {
				field.modifiers &= ~Flags.AccEnum;
				field.type = null;
				if (childrenLength > 0) {
					TypeDeclaration anonymous = new TypeDeclaration(compilationResult);
					anonymous.name = TypeDeclaration.ANONYMOUS_EMPTY_NAME;
					anonymous.bits |= ASTNode.AnonymousAndLocalMask;
					anonymous.sourceStart = sourceField.getNameSourceEnd() + 1;
					anonymous.sourceEnd = anonymous.sourceStart;
					anonymous.declarationSourceStart = sourceField.getDeclarationSourceStart();
					anonymous.declarationSourceEnd = sourceField.getDeclarationSourceEnd();
					anonymous.bodyEnd = anonymous.declarationSourceEnd;
					QualifiedAllocationExpression expression = new QualifiedAllocationExpression(anonymous);
					anonymous.allocation = expression; 
					expression.enumConstant = field;
					field.initialization = expression;
					for (int i = 0; i < childrenLength; i++) {
						IJavaElement child = children[i];
						try {
							switch (child.getElementType()) {
								case IJavaElement.TYPE:
									TypeDeclaration memberType = convert((SourceTypeElementInfo)((JavaElement)child).getElementInfo(), compilationResult);
									if (anonymous.memberTypes == null) {
										anonymous.memberTypes = new TypeDeclaration[] {memberType};
									} else {
										int length = anonymous.memberTypes.length;
										System.arraycopy(anonymous.memberTypes, 0, anonymous.memberTypes = new TypeDeclaration[length+1], 0, length);
										anonymous.memberTypes[length] = memberType;
									}
									break;
								case IJavaElement.FIELD:
									FieldDeclaration fieldDecl = convert((SourceFieldElementInfo)((JavaElement)child).getElementInfo(), anonymous, compilationResult);
									if (anonymous.fields == null) {
										anonymous.fields = new FieldDeclaration[] {fieldDecl};
									} else {
										int length = anonymous.fields.length;
										System.arraycopy(anonymous.fields, 0, anonymous.fields = new FieldDeclaration[length+1], 0, length);
										anonymous.fields[length] = fieldDecl;
									}
									break;
								case IJavaElement.METHOD:
									AbstractMethodDeclaration methodDecl = convert((SourceMethodElementInfo)((JavaElement)child).getElementInfo(), compilationResult);
									if (anonymous.methods == null) {
										anonymous.methods = new AbstractMethodDeclaration[] {methodDecl};
									} else {
										int length = anonymous.methods.length;
										System.arraycopy(anonymous.methods, 0, anonymous.methods = new AbstractMethodDeclaration[length+1], 0, length);
										anonymous.methods[length] = methodDecl;
									}
									break;
							}
						} catch (JavaModelException e) {
							// ignore
						}
					}
				}
			} else {
				if (childrenLength > 0) {
					ArrayInitializer initializer = new ArrayInitializer();
					field.initialization = initializer;
					Expression[] expressions = new Expression[childrenLength];
					initializer.expressions = expressions;
					for (int i = 0; i < childrenLength; i++) {
						IJavaElement localType = children[i];
						try {
							TypeDeclaration anonymousLocalTypeDeclaration = convert((SourceTypeElementInfo)((JavaElement)localType).getElementInfo(), compilationResult);
							QualifiedAllocationExpression expression = new QualifiedAllocationExpression(anonymousLocalTypeDeclaration);
							expression.type = anonymousLocalTypeDeclaration.superclass;
							anonymousLocalTypeDeclaration.superclass = null;
							anonymousLocalTypeDeclaration.superInterfaces = null;
							anonymousLocalTypeDeclaration.allocation = expression;
							expressions[i] = expression;
						} catch (JavaModelException e) {
							// ignore
						}
					}
				}
			}
		}
		return field;
	}

