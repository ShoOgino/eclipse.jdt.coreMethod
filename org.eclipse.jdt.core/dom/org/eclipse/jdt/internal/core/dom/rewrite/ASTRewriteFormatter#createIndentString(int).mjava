    /**
     * Creates a string that represents the given number of indents (can be spaces or tabs..)
     * @param indentationUnits the indent to represent
     * @return Returns the created indent
     */
    public String createIndentString(int indentationUnits) {
		final String tabChar= (String) options.get(DefaultCodeFormatterConstants.FORMATTER_TAB_CHAR);
		final int tabs, spaces;
		if (JavaCore.SPACE.equals(tabChar)) {
			tabs= 0;
			spaces= indentationUnits * this.indentWidth;
		} else if (JavaCore.TAB.equals(tabChar)) {
			// indentWidth == tabWidth
			tabs= indentationUnits;
			spaces= 0;
		} else if (DefaultCodeFormatterConstants.MIXED.equals(tabChar)){
			int spaceEquivalents= indentationUnits * this.indentWidth;
			if (this.tabWidth > 0) {
				tabs= spaceEquivalents / this.tabWidth;
				spaces= spaceEquivalents % this.tabWidth;
			} else {
				tabs= 0;
				spaces= spaceEquivalents;
			}
		} else {
			// new indent type not yet handled
			Assert.isTrue(false);
			return null;
		}
		
		StringBuffer buffer= new StringBuffer(tabs + spaces);
		for(int i= 0; i < tabs; i++)
			buffer.append('\t');
		for(int i= 0; i < spaces; i++)
			buffer.append(' ');
		return buffer.toString();

    }

