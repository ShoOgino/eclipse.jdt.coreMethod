	/**
	 * Determines the region to be occupied by imports, their associated comments, and surrounding
	 * whitespace.
	 */
	private static IRegion determineSurroundingRegion(CompilationUnit compilationUnit, IRegion importsRegion) {
		NavigableMap<Integer, ASTNode> nodesTreeMap = mapTopLevelNodes(compilationUnit);

		int surroundingStart;
		int positionAfterImports;
		if (importsRegion == null) {
			PackageDeclaration packageDeclaration = compilationUnit.getPackage();
			if (packageDeclaration != null) {
				surroundingStart = compilationUnit.getExtendedStartPosition(packageDeclaration)
						+ compilationUnit.getExtendedLength(packageDeclaration);
			}
			else {
				surroundingStart = 0;
			}

			positionAfterImports = surroundingStart;
		} else {
			Entry<Integer, ASTNode> lowerEntry = nodesTreeMap.lowerEntry(importsRegion.getOffset());
			if (lowerEntry != null) {
				ASTNode precedingNode = lowerEntry.getValue();
				surroundingStart = precedingNode.getStartPosition() + precedingNode.getLength();
			} else {
				surroundingStart = 0;
			}

			positionAfterImports = importsRegion.getOffset() + importsRegion.getLength();
		}

		Integer ceilingKey = nodesTreeMap.ceilingKey(positionAfterImports);
		int surroundingEnd = ceilingKey != null ? ceilingKey : compilationUnit.getLength();

		return new Region(surroundingStart, surroundingEnd - surroundingStart);
	}

