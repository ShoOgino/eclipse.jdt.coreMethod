	/* (non-Javadoc)
	 * @see org.eclipse.jdt.core.dom.ASTVisitor#visit(ArrayCreation)
	 */
	public boolean visit(ArrayCreation node) {
		if (!hasChildrenChanges(node)) {
			return doVisitUnchangedChildren(node);
		}

		ArrayType arrayType= (ArrayType) getOriginalValue(node, ArrayCreation.TYPE_PROPERTY);
		ArrayType replacingType= arrayType;
		int nOldBrackets= getDimensions(arrayType); // number of total brackets

		TextEditGroup editGroup= null;
		RewriteEvent typeEvent= getEvent(node, ArrayCreation.TYPE_PROPERTY);
		if (typeEvent != null && typeEvent.getChangeKind() == RewriteEvent.REPLACED) { // changed arraytype can have different dimension or type name
			replacingType= (ArrayType) typeEvent.getNewValue();
			editGroup= getEditGroup(typeEvent);
			Type newType= replacingType.getElementType();
			Type oldType= getElementType(arrayType);
			if (!newType.equals(oldType)) {
				SourceRange range= getExtendedRange(oldType);
				int offset= range.getStartPosition();
				int length= range.getLength();
				doTextRemove(offset, length, editGroup);
				doTextInsert(offset, newType, 0, false, editGroup);
			}
		}

		try {
			// dimension node with expressions and/or annotations
			RewriteEvent dimEvent= getEvent(node, ArrayCreation.DIMENSIONS_PROPERTY);
			boolean hasDimensionChanges= (dimEvent != null && dimEvent.getChangeKind() != RewriteEvent.UNCHANGED);
			RewriteEvent[] events= hasDimensionChanges ? dimEvent.getChildren() : null;
			boolean astLevelGTE8 = node.getAST().apiLevel() >= AST.JLS8;
			ArrayType currentLevel = astLevelGTE8 ? null : (ArrayType) replacingType.getElementType().getParent();
			int replacingTypeDimensions = replacingType.getDimensions();
			int i=0, dimSize= (events == null) ? 0 : events.length;
			Type elementType= arrayType.getElementType();
			int offset= elementType.getStartPosition() + elementType.getLength();
			while(currentLevel != null || astLevelGTE8) {
				if (i < dimSize) {
					if (astLevelGTE8) rewriteAnnotationsOnDimension(replacingType, i, offset);
					 offset= getScanner().getTokenEndOffset(TerminalTokens.TokenNameLBRACKET, offset);
					if (hasDimensionChanges) {
						RewriteEvent event= events[i];
						int changeKind= event.getChangeKind();
						if (changeKind == RewriteEvent.INSERTED) { // insert new dimension
							editGroup= getEditGroup(event);
							int endPos= getScanner().getTokenStartOffset(TerminalTokens.TokenNameRBRACKET, offset);
							doTextRemove(offset, endPos - offset, editGroup);
							doTextInsert(offset, (ASTNode) event.getNewValue(), 0, false, editGroup);
						} else {
							ASTNode elem= (ASTNode) event.getOriginalValue();
							int elemEnd= elem.getStartPosition() + elem.getLength();
							int endPos= getScanner().getTokenStartOffset(TerminalTokens.TokenNameRBRACKET, elemEnd);
							if (changeKind == RewriteEvent.REMOVED) {
								editGroup= getEditGroup(event);
								doTextRemoveAndVisit(offset, endPos - offset, elem, editGroup);
							} else if (changeKind == RewriteEvent.REPLACED) {
								editGroup= getEditGroup(event);
								SourceRange range= getExtendedRange(elem);
								int elemOffset= range.getStartPosition();
								int elemLength= range.getLength();
								doTextRemoveAndVisit(elemOffset, elemLength, elem, editGroup);
								doTextInsert(elemOffset, (ASTNode) event.getNewValue(), 0, false, editGroup);
							} else {
								voidVisit(elem);
							}
						}
						offset= retrieveRightBracketEndPosition(offset, 1, true);
					} else {
						ASTNode elem= (ASTNode) node.dimensions().get(i);
						voidVisit(elem);
						offset= retrieveRightBracketEndPosition(offset, 1, true);
					}
				} else if (i < nOldBrackets) {
					if (astLevelGTE8) rewriteAnnotationsOnDimension(replacingType, i, offset);
					offset= retrieveRightBracketEndPosition(offset, 1, false);
				} else {
					insertAnnotationsOnDimension(replacingType, i, offset, editGroup, astLevelGTE8);
					doTextInsert(offset, "[]", editGroup); //$NON-NLS-1$
				}
				i++;
				if (astLevelGTE8) {
					if (i == replacingTypeDimensions) break;
				} else {
					if (currentLevel == replacingType) break;
					currentLevel= (ArrayType) currentLevel.getParent();
				}
			}
			if (i < nOldBrackets) {
				int endPos= retrieveRightBracketEndPosition(offset, nOldBrackets - i, false);
				doTextRemove(offset, endPos - offset, editGroup);
			}

			int kind= getChangeKind(node, ArrayCreation.INITIALIZER_PROPERTY);
			if (kind == RewriteEvent.REMOVED) {
				offset= getScanner().getPreviousTokenEndOffset(TerminalTokens.TokenNameLBRACE, offset);
			} else {
				offset= node.getStartPosition() + node.getLength(); // insert pos
			}
			rewriteNode(node, ArrayCreation.INITIALIZER_PROPERTY, offset, ASTRewriteFormatter.SPACE);
		} catch (CoreException e) {
			handleException(e);
		}
		return false;
	}

