	/* (non-Javadoc)
	 * @see org.eclipse.jdt.core.dom.ASTVisitor#visit(SingleVariableDeclaration)
	 */
	public boolean visit(SingleVariableDeclaration node) {
		if (!hasChildrenChanges(node)) {
			return doVisitUnchangedChildren(node);
		}
		int pos= node.getStartPosition();
		int apiLevel= node.getAST().apiLevel();
		if (apiLevel == JLS2_INTERNAL) {
			rewriteModifiers(node, INTERNAL_VARIABLE_MODIFIERS_PROPERTY, pos);
		} else {
			rewriteModifiers2(node, SingleVariableDeclaration.MODIFIERS2_PROPERTY, pos);
		}
		pos= rewriteRequiredNode(node, SingleVariableDeclaration.TYPE_PROPERTY);
		if (apiLevel >= JLS3_INTERNAL) {
			if (isChanged(node, SingleVariableDeclaration.VARARGS_PROPERTY)) {
				TextEditGroup editGroup = getEditGroup(node, SingleVariableDeclaration.VARARGS_PROPERTY);
				if (getNewValue(node, SingleVariableDeclaration.VARARGS_PROPERTY).equals(Boolean.TRUE)) {
					if (apiLevel >= AST.JLS8) {
						pos= rewriteVarargsAnnotations(node, SingleVariableDeclaration.VARARGS_ANNOTATIONS_PROPERTY, pos);
					}
					int indent= getIndent(node.getStartPosition());
					String prefix= this.formatter.VARARGS.getPrefix(indent);
					doTextInsert(pos, prefix, editGroup);
					doTextInsert(pos, "...", editGroup); //$NON-NLS-1$
				} else {
					try {
						int ellipsisEnd;
						int noOfAnnotations = apiLevel >= AST.JLS8 ? node.varargsAnnotations().size() : 0;
						if (noOfAnnotations > 0) {
							Annotation annotation= (Annotation) node.varargsAnnotations().get(noOfAnnotations - 1);
							int annotationEndPosition= annotation.getStartPosition() + annotation.getLength();
							ellipsisEnd= getScanner().getNextEndOffset(annotationEndPosition, true);
						} else {
							ellipsisEnd= getScanner().getNextEndOffset(pos, true);
						}
						doTextRemove(pos, ellipsisEnd - pos, editGroup);
					} catch (CoreException e) {
						handleException(e);
					}
				}
			} else {
				if (apiLevel >= AST.JLS8 && node.isVarargs()) {
					pos = rewriteVarargsAnnotations(node, SingleVariableDeclaration.VARARGS_ANNOTATIONS_PROPERTY, pos);
				}
			}
			if (!node.isVarargs()) {
				ensureSpaceAfterReplace(node, SingleVariableDeclaration.TYPE_PROPERTY);
			}
		} else {
			ensureSpaceAfterReplace(node, SingleVariableDeclaration.TYPE_PROPERTY);
		}

		pos= rewriteRequiredNode(node, SingleVariableDeclaration.NAME_PROPERTY);
		if (apiLevel < AST.JLS8) {
			int extraDims= rewriteExtraDimensions(node, INTERNAL_VARIABLE_EXTRA_DIMENSIONS_PROPERTY, pos);

			if (extraDims > 0) {
				int kind= getChangeKind(node, SingleVariableDeclaration.INITIALIZER_PROPERTY);
				if (kind == RewriteEvent.REMOVED) {
					try {
						pos= getScanner().getPreviousTokenEndOffset(TerminalTokens.TokenNameEQUAL, pos);
					} catch (CoreException e) {
						handleException(e);
					}
				} else {
					pos= node.getStartPosition() + node.getLength(); // insert pos
				}
			}
		} else {
			pos = rewriteExtraDimensionsInfo(node, pos, SingleVariableDeclaration.EXTRA_DIMENSIONS2_PROPERTY);
		}

		rewriteNode(node, SingleVariableDeclaration.INITIALIZER_PROPERTY, pos, this.formatter.VAR_INITIALIZER);
		return false;
	}

