	private void rewriteReturnType(MethodDeclaration node, boolean isConstructor, boolean isConstructorChange) {
		ChildPropertyDescriptor property= (node.getAST().apiLevel() == AST.JLS2) ? MethodDeclaration.RETURN_TYPE_PROPERTY : MethodDeclaration.RETURN_TYPE2_PROPERTY;

		// weakness in the AST: return type can exist, even if missing in source
		ASTNode originalReturnType= (ASTNode) getOriginalValue(node, property);
		boolean returnTypeExists=  originalReturnType != null && originalReturnType.getStartPosition() != -1;
		if (!isConstructorChange && returnTypeExists) {
			rewriteRequiredNode(node, property);
			return;
		}
		ASTNode newReturnType= (ASTNode) getNewValue(node, property);
		if (isConstructorChange || !returnTypeExists && newReturnType != originalReturnType) {
			try {
				int startPos= node.getStartPosition();
				
				getScanner().setOffset(startPos);
				int token= getScanner().readNext(true);
				while (TokenScanner.isModifier(token)) {
					startPos= getScanner().getCurrentEndOffset();
					token= getScanner().readNext(true);
				}
				
				TextEditGroup editGroup= getEditGroup(node, property);
				if (isConstructor || !returnTypeExists) { // insert
					doTextInsert(startPos, " ", editGroup); //$NON-NLS-1$
					doTextInsert(startPos, newReturnType, getIndent(startPos), true, editGroup);
				} else { // remove
					int len= getExtendedEnd(originalReturnType) - startPos;
					doTextRemoveAndVisit(startPos, len, originalReturnType, editGroup);
				}
			} catch (CoreException e) {
				handleException(e);
			}
		}
	}

