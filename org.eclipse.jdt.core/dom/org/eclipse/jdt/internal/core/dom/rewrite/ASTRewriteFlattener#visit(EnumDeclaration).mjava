	/*
	 * @see ASTVisitor#visit(EnumDeclaration)
	 * @since 3.0
	 */
	public boolean visit(EnumDeclaration node) {
		if (getChildNode(node, EnumDeclaration.JAVADOC_PROPERTY) != null) {
			getChildNode(node, EnumDeclaration.JAVADOC_PROPERTY).accept(this);
		}
		visitList(node, EnumDeclaration.MODIFIERS2_PROPERTY, String.valueOf(' '), EMPTY, String.valueOf(' '));
		this.result.append("enum ");//$NON-NLS-1$
		getChildNode(node, EnumDeclaration.NAME_PROPERTY).accept(this);
		this.result.append(' ');
		visitList(node, EnumDeclaration.SUPER_INTERFACE_TYPES_PROPERTY, String.valueOf(','), "implements ", EMPTY); //$NON-NLS-1$

		this.result.append('{');
		BodyDeclaration prev = null;
		for (Iterator it = getChildList(node, EnumDeclaration.BODY_DECLARATIONS_PROPERTY).iterator(); it.hasNext(); ) {
			BodyDeclaration d = (BodyDeclaration) it.next();
			if (prev instanceof EnumConstantDeclaration) {
				// enum constant declarations do not include punctuation
				if (d instanceof EnumConstantDeclaration) {
					// enum constant declarations are separated by commas
					this.result.append(',');
				} else {
					// semicolon separates last enum constant declaration from 
					// first class body declarations
					this.result.append(' ');
				}
			}
			d.accept(this);
		}
		this.result.append('}');
		return false;
	}

