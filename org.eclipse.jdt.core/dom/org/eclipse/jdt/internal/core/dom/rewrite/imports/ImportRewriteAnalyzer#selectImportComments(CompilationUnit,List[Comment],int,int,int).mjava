	private static List<ImportComment> selectImportComments(
			CompilationUnit compilationUnit,
			List<Comment> comments,
			int importDeclarationStartPosition,
			int commentStartIndex,
			int commentEndIndex) {
		List<ImportComment> importComments = new ArrayList<ImportComment>(comments.size());

		Iterator<Comment> commentIterator = comments.subList(commentStartIndex, commentEndIndex).iterator();
		Comment currentComment = commentIterator.hasNext() ? commentIterator.next() : null;
		while (currentComment != null) {
			int currentCommentStartPosition = currentComment.getStartPosition();
			int currentCommentLength = currentComment.getLength();

			Comment nextComment = commentIterator.hasNext() ? commentIterator.next() : null;

			int succeedingLineDelims;
			int nextCommentStartPosition = nextComment == null ? Integer.MAX_VALUE : nextComment.getStartPosition();
			int nextStartPosition = Math.min(importDeclarationStartPosition, nextCommentStartPosition);
			if (nextStartPosition == Integer.MAX_VALUE) {
				// This trailing comment is located at the end of the import's extended range
				// and we don't care how many line delimiters follow it.
				succeedingLineDelims = 0;
			} else {
				int currentCommentEndLine =
						compilationUnit.getLineNumber(currentCommentStartPosition + currentCommentLength);
				int nextStartLine = compilationUnit.getLineNumber(nextStartPosition);
				succeedingLineDelims = nextStartLine - currentCommentEndLine;
			}

			importComments.add(new ImportComment(
					new Region(currentCommentStartPosition, currentCommentLength), succeedingLineDelims));

			currentComment = nextComment;
		}

		return importComments;
	}

