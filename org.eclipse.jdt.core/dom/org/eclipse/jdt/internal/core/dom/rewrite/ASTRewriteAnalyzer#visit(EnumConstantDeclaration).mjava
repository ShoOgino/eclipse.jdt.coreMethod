	/* (non-Javadoc)
	 * @see org.eclipse.jdt.core.dom.ASTVisitor#visit(org.eclipse.jdt.core.dom.EnumConstantDeclaration)
	 */
	public boolean visit(EnumConstantDeclaration node) {
		if (!hasChildrenChanges(node)) {
			return doVisitUnchangedChildren(node);
		}
		int pos= rewriteJavadoc(node, EnumConstantDeclaration.JAVADOC_PROPERTY);
		rewriteModifiers2(node, EnumConstantDeclaration.MODIFIERS2_PROPERTY, pos);
		pos= rewriteRequiredNode(node, EnumConstantDeclaration.NAME_PROPERTY);
		RewriteEvent argsEvent= getEvent(node, EnumConstantDeclaration.ARGUMENTS_PROPERTY);
		if (argsEvent != null && argsEvent.getChangeKind() != RewriteEvent.UNCHANGED) {
			RewriteEvent[] children= argsEvent.getChildren();
			try {
				int nextTok= getScanner().readNext(pos, true);
				boolean hasParents= (nextTok == ITerminalSymbols.TokenNameLPAREN);
				boolean isAllRemoved= hasParents && isAllOfKind(children, RewriteEvent.REMOVED);
				String prefix= ""; //$NON-NLS-1$
				if (!hasParents) {
					prefix= "("; //$NON-NLS-1$
				} else if (!isAllRemoved) {
					pos= getScanner().getCurrentEndOffset();
				}
				pos= rewriteNodeList(node, EnumConstantDeclaration.ARGUMENTS_PROPERTY, pos, prefix, ", "); //$NON-NLS-1$ //$NON-NLS-2$
				
				if (!hasParents) {
					doTextInsert(pos, ")", getEditGroup(children[children.length - 1])); //$NON-NLS-1$
				} else if (isAllRemoved) {
					int afterClosing= getScanner().getNextEndOffset(pos, true);
					doTextRemove(pos, afterClosing - pos, getEditGroup(children[children.length - 1]));
					pos= afterClosing;
				}
			} catch (CoreException e) {
				handleException(e);
			}
		} else {
			pos= doVisit(node, EnumConstantDeclaration.ARGUMENTS_PROPERTY, 0);
		}
		// 'pos' can be before brace
		
		RewriteEvent bodyEvent= getEvent(node, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY);
		if (bodyEvent != null && bodyEvent.getChangeKind() != RewriteEvent.UNCHANGED) {
			RewriteEvent[] children= bodyEvent.getChildren();
			try {
				int nextTok= getScanner().readNext(pos, true);
				if (nextTok == ITerminalSymbols.TokenNameRPAREN) { // 
					pos= getScanner().getCurrentEndOffset();
					nextTok= getScanner().readNext(pos, true);
				}
				boolean hasBraces= (nextTok == ITerminalSymbols.TokenNameLBRACE);
				boolean isAllRemoved= hasBraces && isAllOfKind(children, RewriteEvent.REMOVED);
				int startIndent= getIndent(node.getStartPosition()) + 1;
				if (!hasBraces) {
					String prefix= this.formatter.ENUM_BODY_START.getPrefix(startIndent, getLineDelimiter());
					doTextInsert(pos, prefix, getEditGroup(children[0])); //$NON-NLS-1$
				} else if (!isAllRemoved) {
					pos= getScanner().getCurrentEndOffset();
				}

				pos= rewriteParagraphList(node, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY, pos, startIndent, 0, 0);
				
				if (!hasBraces) {
					String suffix= this.formatter.ENUM_BODY_END.getPrefix(startIndent, getLineDelimiter());
					doTextInsert(pos, suffix, getEditGroup(children[children.length - 1])); //$NON-NLS-1$
				} else {
					int afterClosing= getScanner().getNextEndOffset(pos, true);
					if (isAllRemoved) {
						doTextRemove(pos, afterClosing - pos, getEditGroup(children[children.length - 1]));
					}
				}
			} catch (CoreException e) {
				handleException(e);
			}
		} else {
			doVisit(node, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY, 0);
		}
		return false;
	}

