	public ASTRewriteFormatter(NodeInfoStore placeholders, RewriteEventStore eventStore, Map options, String lineDelimiter) {
		this.placeholders= placeholders;
		this.eventStore= eventStore;

		if (options == null) {
			options= JavaCore.getOptions();
		}
		options.put(DefaultCodeFormatterConstants.FORMATTER_LINE_SPLIT, String.valueOf(9999));

		this.options= options;
		this.lineDelimiter= lineDelimiter;
		
		int tabWidthVal;
		try {
			tabWidthVal= Integer.parseInt((String) options.get(DefaultCodeFormatterConstants.FORMATTER_TAB_SIZE));
		} catch (NumberFormatException e) {
			tabWidthVal= 4;
		}
		this.tabWidth= tabWidthVal;
		
		String indent;
		String code= "x"; //$NON-NLS-1$
    	TextEdit edit= formatString(CodeFormatter.K_EXPRESSION, code, 1, "", options); //$NON-NLS-1$
    	if (edit != null) {
    		String str= evaluateFormatterEdit(code, edit, null);
    		indent= str.substring(0, str.indexOf(code));
    	} else {
    	   indent= String.valueOf('\t');
    	}
		this.singleIndentString= indent;
	}

