	private int rewriteTypeAnnotations(ASTNode node, ChildListPropertyDescriptor property, int pos) {
		RewriteEvent event = getEvent(node, property);
		if (event == null || event.getChangeKind() == RewriteEvent.UNCHANGED) {
			return doVisit(node, property, pos);
		}
		RewriteEvent[] children = event.getChildren();
		boolean isAllInsert = isAllOfKind(children, RewriteEvent.INSERTED);
		boolean isAllRemove = isAllOfKind(children, RewriteEvent.REMOVED);
		if (isAllInsert || isAllRemove) {
			try {
				pos = getScanner().getNextStartOffset(pos, false);
			} catch (CoreException e) {
				handleException(e);
			}
		}
 
		Prefix formatterPrefix = this.formatter.ANNOTATION_SEPARATION;
 
		int endPos = new ModifierRewriter(formatterPrefix).rewriteList(node, property, pos, Util.EMPTY_STRING, " "); //$NON-NLS-1$ 
 
		try {
			int nextPos = getScanner().getNextStartOffset(endPos, false);
			RewriteEvent lastChild = children[children.length - 1];
			boolean lastUnchanged = lastChild.getChangeKind() != RewriteEvent.UNCHANGED;
 
			if (isAllRemove) {
				doTextRemove(endPos, nextPos - endPos, getEditGroup(lastChild));
				return nextPos;
			} else if (isAllInsert || (nextPos == endPos && lastUnchanged)) {
				doTextInsert(endPos, formatterPrefix.getPrefix(getIndent(pos)), getEditGroup(lastChild));
			}
		} catch (CoreException e) {
			handleException(e);
		}
		return endPos;
	}

