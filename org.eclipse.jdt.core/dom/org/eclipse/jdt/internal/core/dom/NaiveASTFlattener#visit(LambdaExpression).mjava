	/*
	 * @see ASTVisitor#visit(LambdaExpression)
	 */
	public boolean visit(LambdaExpression node) {
		boolean hasParentheses = node.hasParentheses();
		if (hasParentheses)
			this.buffer.append('(');
		Iterator it = node.parameters().iterator();
		boolean hasNext = it.hasNext();
		while (hasNext) {
			VariableDeclaration  variableDeclaration = (VariableDeclaration) it.next();
			variableDeclaration.accept(this);
			if ((hasNext = it.hasNext()) == true)
				this.buffer.append(',');
		}
		if (hasParentheses) 
			this.buffer.append(')');	
		this.buffer.append(" -> "); //$NON-NLS-1$
		node.getBody().accept(this);
		return false;
	}

