	/* (non-Javadoc)
	 * @see org.eclipse.jdt.core.dom.ASTVisitor#visit(org.eclipse.jdt.core.dom.TagElement)
	 */
	public boolean visit(TagElement node) {
		if (!hasChildrenChanges(node)) {
			return doVisitUnchangedChildren(node);
		}
		
		int changeKind= getChangeKind(node, TagElement.TAG_NAME_PROPERTY);
		switch (changeKind) {
			case RewriteEvent.INSERTED: {
			    String newTagName= '@' + (String) getNewValue(node, TagElement.TAG_NAME_PROPERTY);
				doTextInsert(node.getStartPosition(), newTagName, getEditGroup(node, TagElement.TAG_NAME_PROPERTY));
				break;
			}
			case RewriteEvent.REMOVED: {
			    String oldTag= (String) getOriginalValue(node, TagElement.TAG_NAME_PROPERTY);
			    int tagEnd= findTagNameStart(node)  + oldTag.length();
			    doTextRemove(node.getStartPosition(), tagEnd - node.getStartPosition(), getEditGroup(node, TagElement.TAG_NAME_PROPERTY));
			    break;
			}
			case RewriteEvent.REPLACED: {
			    String newTagName= (String) getNewValue(node, TagElement.TAG_NAME_PROPERTY);
		    	String oldTag= (String) getOriginalValue(node, TagElement.TAG_NAME_PROPERTY);
		    	int tagStart= findTagNameStart(node);
		    	doTextReplace(tagStart, oldTag.length(), newTagName, getEditGroup(node, TagElement.TAG_NAME_PROPERTY));
			    break;
			}
		}
				
		if (isChanged(node, TagElement.FRAGMENTS_PROPERTY)) {
			// eval position after name
			int startOffset= node.getStartPosition();
            String oldTag= (String) getOriginalValue(node, TagElement.TAG_NAME_PROPERTY);
            if (oldTag != null) {
                startOffset= findTagNameStart(node) + oldTag.length();
            }
            
            rewriteNodeList(node, TagElement.FRAGMENTS_PROPERTY, startOffset, " ", " ");  //$NON-NLS-1$//$NON-NLS-2$
		} else {
			voidVisit(node, TagElement.FRAGMENTS_PROPERTY);
		}
		return false;
	}

