	@Override
	public boolean visit(SwitchCase node) {
		if (!hasChildrenChanges(node)) {
			return doVisitUnchangedChildren(node);
		}

		// dont allow switching from case to default or back. New statements should be created.
		if (node.getAST().isPreviewEnabled()) {
			int pos = node.expressions().size() == 0 ? node.getStartPosition() :
					rewriteNodeList(node, SwitchCase.EXPRESSIONS2_PROPERTY, node.getStartPosition(), Util.EMPTY_STRING, ", "); //$NON-NLS-1$
			if (isChanged(node, SwitchCase.SWITCH_LABELED_RULE_PROPERTY)) {
				TextEditGroup editGroup = getEditGroup(node, SwitchCase.SWITCH_LABELED_RULE_PROPERTY);
				try {
					int tokenEnd, oldToken;
					String newVal;
					if (getNewValue(node, SwitchCase.SWITCH_LABELED_RULE_PROPERTY).equals(Boolean.TRUE)) {
						oldToken = TerminalTokens.TokenNameCOLON;
						newVal = "->"; //$NON-NLS-1$
					} else {
						oldToken = TerminalTokens.TokenNameARROW;
						newVal = ":"; //$NON-NLS-1$
					}
					pos = getScanner().getTokenStartOffset(oldToken, pos);
					tokenEnd = getScanner().getTokenEndOffset(oldToken, pos);
					doTextRemove(pos, tokenEnd - pos, editGroup);
					doTextInsert(pos, newVal, editGroup);
					pos = tokenEnd;
				} catch (CoreException e) {
					handleException(e);
				}
			}
		} else {
			rewriteExpressionOptionalQualifier(node, INTERNAL_SWITCH_EXPRESSION_PROPERTY, node.getStartPosition());
		}
		return false;
	}

