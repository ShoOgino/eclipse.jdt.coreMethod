	private void addExistingImports(CompilationUnit root) {
		List/*ImportDeclaration*/ decls= root.imports();
		if (decls.isEmpty()) {
			return;
		}
		PackageEntry currPackage= null;

		ImportDeclaration curr= (ImportDeclaration) decls.get(0);
		int currOffset= curr.getStartPosition();
		int currLength= curr.getLength();
		int currEndLine= root.getLineNumber(currOffset + currLength);

		for (int i= 1; i < decls.size(); i++) {
			boolean isStatic= curr.isStatic();
			String name= getFullName(curr);
			String packName= getQualifier(curr);
			if (currPackage == null || currPackage.compareTo(packName, isStatic) != 0) {
				currPackage= new PackageEntry(packName, null, isStatic);
				this.packageEntries.add(currPackage);
			}

			ImportDeclaration next= (ImportDeclaration) decls.get(i);
			int nextOffset= next.getStartPosition();
			int nextLength= next.getLength();
			int nextOffsetLine= root.getLineNumber(nextOffset);

			int extendedStart = root.getExtendedStartPosition(curr);
			int extendedLength = root.getExtendedLength(curr);
			if (extendedStart < this.replaceRange.getOffset()) {
				// don't touch the first comments before the start of import declarations
				extendedLength -=  (currOffset - extendedStart);
				extendedStart = currOffset;
			}
			
			// if next import is on a different line, modify the end position to the next line begin offset
			int nextLineOffset = nextOffset; // offset at the start of next line. Next import may not start here
			if (currEndLine < nextOffsetLine) {
				currEndLine++;
				nextLineOffset = root.getPosition(currEndLine, 0); 
				// There may be some leading comments (or line delimiters) before the next import. The start of those comments
				// is not the real start offset of the next import. So don't change nextOffset
			}
			// retrieve preceding and trailing comments if any
			IRegion rangeBefore = null;
			IRegion rangeAfter = null;
			
			if (currOffset > extendedStart) {
				rangeBefore = new Region(extendedStart, currOffset - extendedStart);
			}
			int currLen = curr.getLength();
			if (currLen < extendedLength - (currOffset - extendedStart)) {
				int currEndOffset = currOffset + currLen;
				int rangeBeforeLen = rangeBefore != null? rangeBefore.getLength() : 0;
				rangeAfter = new Region(currEndOffset, extendedLength - rangeBeforeLen - currLen);
			}
			currPackage.add(
					new ImportDeclEntry(
							packName.length(), 
							name, 
							isStatic, 
							new Region(currOffset, nextLineOffset - currOffset), // should not include leading comments of next import, line delimiters, etc.
							rangeBefore,
							rangeAfter));
			currOffset= nextOffset;
			curr= next;

			// add a comment entry for spacing between imports
			if (currEndLine < nextOffsetLine) {
				nextOffset= root.getPosition(nextOffsetLine, 0);

				int length = nextOffset - nextLineOffset;
				if (length > 2) { // valid comment has at least two chars
					currPackage.add(new ImportDeclEntry(packName.length(), null, false, new Region(nextLineOffset, length)));
				}

				currOffset= nextOffset;
			}
			currEndLine= root.getLineNumber(nextOffset + nextLength);
		}

		boolean isStatic= curr.isStatic();
		String name= getFullName(curr);
		String packName= getQualifier(curr);
		if (currPackage == null || currPackage.compareTo(packName, isStatic) != 0) {
			currPackage= new PackageEntry(packName, null, isStatic);
			this.packageEntries.add(currPackage);
		}
		int currStartOffset = curr.getStartPosition();
		int currLen = curr.getLength();
		int extendedStartOffset = root.getExtendedStartPosition(curr);
		IRegion leadingComments = null;
		IRegion allTrailingComments = null;
		
		if (currStartOffset > extendedStartOffset) {
			leadingComments = new Region(extendedStartOffset, currOffset - extendedStartOffset);
		}
		int length= this.replaceRange.getOffset() + this.replaceRange.getLength() - currStartOffset;
		int extendedLength = root.getExtendedLength(curr);
		if (currLen < extendedLength - (currOffset - extendedStartOffset)) {
			int currEndOffset = currOffset + currLen;
			int leadingCommentsLen = leadingComments != null? leadingComments.getLength() : 0;
			allTrailingComments = new Region(currEndOffset, extendedLength - leadingCommentsLen - currLen);
		}
		currPackage.add(new ImportDeclEntry(packName.length(), name, isStatic, new Region(curr.getStartPosition(), length), leadingComments, allTrailingComments));
	}

