	/**
	 * Creates a string that represents the given number of indentation units.
	 * The returned string can contain tabs and/or spaces depending on the core
	 * formatter preferences.
	 * 
	 * @param indentationUnits the number of indentation units to generate
	 * @param options the options to get the formatter settings from. Use {@link org.eclipse.jdt.core.IJavaProject#getOptions(boolean)} to
	 * get the most current project options.
	 * @return the indent string
	 */
	public static String createIndentString(int indentationUnits, Map options) {
		if (options == null || indentationUnits < 0) {
			throw new IllegalArgumentException();
		}
		
		String tabChar= getStringValue(options, DefaultCodeFormatterConstants.FORMATTER_TAB_CHAR, JavaCore.TAB);
		
		final int tabs, spaces;
		if (JavaCore.SPACE.equals(tabChar)) {
			tabs= 0;
			spaces= indentationUnits * getIndentWidth(options);
		} else if (JavaCore.TAB.equals(tabChar)) {
			// indentWidth == tabWidth
			tabs= indentationUnits;
			spaces= 0;
		} else if (DefaultCodeFormatterConstants.MIXED.equals(tabChar)){
			int tabWidth= getTabWidth(options);
			int spaceEquivalents= indentationUnits * getIndentWidth(options);
			if (tabWidth > 0) {
				tabs= spaceEquivalents / tabWidth;
				spaces= spaceEquivalents % tabWidth;
			} else {
				tabs= 0;
				spaces= spaceEquivalents;
			}
		} else {
			// new indent type not yet handled
			Assert.isTrue(false);
			return null;
		}
		
		StringBuffer buffer= new StringBuffer(tabs + spaces);
		for(int i= 0; i < tabs; i++)
			buffer.append('\t');
		for(int i= 0; i < spaces; i++)
			buffer.append(' ');
		return buffer.toString();
	}

