	/*
	 * @see IBinding#getKey()
	 */
	public String getKey() {
		if (this.key == null) {
			if (isLocal()) {
				StringBuffer buffer = new StringBuffer();
				
				// declaring method or type
				SourceTypeBinding sourceBinding = (SourceTypeBinding) this.binding; // per construction, a local type can only be defined in source
				ClassScope scope = sourceBinding.scope;
				ClassScope classScope = scope.enclosingClassScope();
				org.eclipse.jdt.internal.compiler.ast.TypeDeclaration referenceContext = classScope.referenceContext;
				org.eclipse.jdt.internal.compiler.lookup.TypeBinding internalBinding = referenceContext.binding;
				ITypeBinding typeBinding = this.resolver.getTypeBinding(internalBinding);
				if (typeBinding != null) {
					buffer.append(typeBinding.getKey());
				}
				buffer.append('$');
				CompilationUnitScope compilationUnitScope = scope.compilationUnitScope();
				CompilationUnitDeclaration compilationUnitDeclaration = compilationUnitScope.referenceContext;
				LocalTypeBinding[] localTypeBindings = compilationUnitDeclaration.localTypes;
				for (int i = 0, max = compilationUnitDeclaration.localTypeCount; i < max; i++) {
					if (localTypeBindings[i] == sourceBinding) {
						buffer.append(i+1);
						if (!isAnonymous()) {
							buffer.append('$');
							buffer.append(sourceBinding.sourceName);
						}
						break;
					}
				}
				
				this.key = buffer.toString();
			} else {
				if (this.binding.isTypeVariable()) {
					TypeVariableBinding typeVariableBinding = (TypeVariableBinding) this.binding;
					Binding declaringElement = typeVariableBinding.declaringElement;
					StringBuffer buffer = new StringBuffer();
					buffer.append(typeVariableBinding.sourceName);
					buffer.append(':');
					if (declaringElement instanceof org.eclipse.jdt.internal.compiler.lookup.TypeBinding) {
						buffer.append(this.resolver.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding) declaringElement).getKey());
					} else if (declaringElement instanceof org.eclipse.jdt.internal.compiler.lookup.MethodBinding) {
						buffer.append(getNonRecursiveKey(this.resolver.getMethodBinding((org.eclipse.jdt.internal.compiler.lookup.MethodBinding) declaringElement)));						
					}
					return String.valueOf(buffer);
				} else if (this.binding.isWildcard()) {
					WildcardBinding wildcardBinding = (WildcardBinding) binding;
					org.eclipse.jdt.internal.compiler.lookup.TypeBinding bound = wildcardBinding.bound;
					if (bound != null) {
						return this.resolver.getTypeBinding(bound).getKey();
					}
					return new String(wildcardBinding.genericTypeSignature());
				} else if (this.isClass()
						|| this.isInterface()
						|| this.isEnum()
						|| this.isAnnotation()) {
					StringBuffer buffer = new StringBuffer();
					char[] qualifiedSourceName = this.binding.qualifiedSourceName();
					if (qualifiedSourceName != null) {
						CharOperation.replace(qualifiedSourceName, '.', '$');
						buffer
							.append(getPackage().getName())
							.append('/')
							.append(qualifiedSourceName);
					} else {
						buffer
							.append(getPackage().getName())
							.append('/')
							.append(getName());
					}
					ITypeBinding[] typeArgs = this.getTypeArguments();
					final int typeArgsLength = typeArgs.length;
					if (typeArgsLength != 0) {
						buffer.append('<');
						for (int i = 0; i < typeArgsLength; i++) {
							buffer.append(typeArgs[i].getKey());
							if (i != typeArgsLength - 1) {
								buffer.append(',');
							}							
						}
						buffer.append('>');
					}
					this.key = String.valueOf(buffer);
				} else if (this.binding.isArrayType()) {
					if (this.getElementType() != null) {
						StringBuffer buffer = new StringBuffer(this.getElementType().getKey());
						int dimensions = this.getDimensions();
						for (int j = 0; j < dimensions; j++) {
							buffer.append('[').append(']');
						}
						this.key = String.valueOf(buffer);
					} else {
						StringBuffer buffer = new StringBuffer();
						int dimensions = this.getDimensions();
						for (int j = 0; j < dimensions; j++) {
							buffer.append('[').append(']');
						}
						this.key = String.valueOf(buffer);
					}
				} else {
					// this is a primitive type
					this.key = getName();
				}
			}
		}
		return this.key;
	}

