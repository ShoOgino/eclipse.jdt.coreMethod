	/*
	 * @see IBinding#getKey()
	 */
	public String getKey() {
		if (this.key == null) {
			if (isLocal()) {
				StringBuffer buffer = new StringBuffer();
				
				// declaring method or type
				SourceTypeBinding sourceBinding = (SourceTypeBinding) this.binding; // per construction, a local type can only be defined in source
				ClassScope scope = sourceBinding.scope;
				ReferenceContext referenceContext;
				if (isAnonymous()) {
					ClassScope classScope = scope.enclosingClassScope();
					referenceContext = classScope.referenceContext;
				} else {
					MethodScope methodScope = scope.enclosingMethodScope();
					referenceContext = methodScope.referenceContext;
				}
				if (referenceContext instanceof AbstractMethodDeclaration) {
					org.eclipse.jdt.internal.compiler.lookup.MethodBinding internalBinding = ((AbstractMethodDeclaration) referenceContext).binding;
					IMethodBinding methodBinding = this.resolver.getMethodBinding(internalBinding);
					if (methodBinding != null) {
						buffer.append(methodBinding.getKey());
					}
				} else if (referenceContext instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {
					org.eclipse.jdt.internal.compiler.lookup.TypeBinding internalBinding = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) referenceContext).binding;
					ITypeBinding typeBinding = this.resolver.getTypeBinding(internalBinding);
					if (typeBinding != null) {
						buffer.append(typeBinding.getKey());
					}
				}
	
				if (isAnonymous()) {
					buffer.append('$');
					CompilationUnitScope compilationUnitScope = scope.compilationUnitScope();
					CompilationUnitDeclaration compilationUnitDeclaration = compilationUnitScope.referenceContext;
					LocalTypeBinding[] localTypeBindings = compilationUnitDeclaration.localTypes;
					for (int i = 0, max = compilationUnitDeclaration.localTypeCount; i < max; i++) {
						if (localTypeBindings[i] == sourceBinding) {
							buffer.append(i+1);
							break;
						}
					}
				} else {
					// type name
					buffer.append('/');
					buffer.append(getName());
				}
				
				this.key = buffer.toString();
			} else {
				if (this.binding.isTypeVariable()) {
					TypeVariableBinding typeVariableBinding = (TypeVariableBinding) this.binding;
					Binding declaringElement = typeVariableBinding.declaringElement;
					StringBuffer buffer = new StringBuffer();
					buffer.append(typeVariableBinding.sourceName);
					if (declaringElement instanceof org.eclipse.jdt.internal.compiler.lookup.TypeBinding) {
						buffer.append(this.resolver.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding) declaringElement).getKey());
					} else if (declaringElement instanceof org.eclipse.jdt.internal.compiler.lookup.MethodBinding) {
						buffer.append(this.resolver.getMethodBinding((org.eclipse.jdt.internal.compiler.lookup.MethodBinding) declaringElement).getKey());						
					}
					return String.valueOf(buffer);
				} else if (this.binding.isWildcard()) {
					WildcardBinding wildcardBinding = (WildcardBinding) binding;
					org.eclipse.jdt.internal.compiler.lookup.TypeBinding bound = wildcardBinding.bound;
					if (bound != null) {
						return this.resolver.getTypeBinding(bound).getKey();
					}
					return new String(wildcardBinding.genericTypeSignature());
				} else if (this.isClass()
						|| this.isInterface()
						|| this.isEnum()
						|| this.isAnnotation()) {
					StringBuffer buffer = new StringBuffer();
					char[] constantPoolName = this.binding.constantPoolName();
					if (constantPoolName != null) {
						buffer.append(constantPoolName);
					} else {
						char[] qualifiedSourceName = this.binding.qualifiedSourceName();
						if (qualifiedSourceName != null) {
							CharOperation.replace(qualifiedSourceName, '.', '$');
							buffer
								.append(getPackage().getName())
								.append('/')
								.append(qualifiedSourceName);
						} else {
							buffer
								.append(getPackage().getName())
								.append('/')
								.append(getName());
						}
					}
					this.key = buffer.toString();
				} else if (this.binding.isArrayType()) {
					if (this.getElementType() != null) {
						this.key = this.getElementType().getKey() + this.getDimensions();
					} else {
						this.key = Integer.toString(this.getDimensions());
					}
				} else {
					// this is a primitive type
					this.key = this.getName();
				}
			}
		}
		return this.key;
	}

