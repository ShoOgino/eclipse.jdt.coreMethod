	/**
     * For each source coming from the given AST requestor, creates an abstract syntax tree and
     * reports it back to the AST requestor. Repeat this process while the AST requestor has
     * sources.
     * <p>
     * Note that if bindings are resolved, more ASTs than originaly requested can be reported back.
     * These ASTs come from compilation units required to resolve the original ones.
     * </p><p>
     * A successful call to this method returns all settings to their
     * default values so the object is ready to be reused.
     * </p><p>
	 * Note that this API is under development and subject to change without notice.
	 * </p>
     * 
     * @param requestor the AST requestor that provides sources and that collects abtract syntax trees
	 * @param monitor the progress monitor used to report progress and request cancelation,
	 *   or <code>null</code> if none
	 * @exception IllegalStateException if the settings provided
	 * are insufficient, contradictory, or otherwise unsupported
	 * @since 3.1
     */
	// TODO (jerome) remove statement about API being under development above
	public void createASTs(ASTRequestor requestor, IProgressMonitor monitor) {
		try {
			if (this.resolveBindings) {
				if (this.project == null)
					throw new IllegalStateException("project not specified"); //$NON-NLS-1$
				CompilationUnitResolver.resolve(requestor, this.apiLevel, this.compilerOptions, this.project, this.workingCopyOwner, monitor);
			} else {
				CompilationUnitResolver.parse(requestor, this.apiLevel, this.compilerOptions, monitor);
			}
		} finally {
	   	   // re-init defaults to allow reuse (and avoid leaking)
	   	   initializeDefaults();
		}
	}

