	/**
	 * Returns whether the given node and the other object match.
	 * <p>
	 * The default implementation provided by this class tests whether the
	 * other object is a node of the same type with structurally isomorphic
	 * child subtrees. Subclasses may override this method as needed.
	 * </p>
	 * <p>
	 * Note that extra array dimensions are compared since they are an
	 * important part of the method declaration.
	 * </p>
	 * <p>
	 * Note that the method return types are compared even for constructor
	 * declarations.
	 * </p>
	 *
	 * @param node the node
	 * @param other the other object, or <code>null</code>
	 * @return <code>true</code> if the subtree matches, or
	 *   <code>false</code> if they do not match or the other object has a
	 *   different node type or is <code>null</code>
	 */
	public boolean match(MethodDeclaration node, Object other) {
		if (!(other instanceof MethodDeclaration)) {
			return false;
		}
		MethodDeclaration o = (MethodDeclaration) other;
		int level = node.getAST().apiLevel;
		return node.isConstructor() == o.isConstructor()
				&& safeSubtreeMatch(node.getJavadoc(), o.getJavadoc())
				&& (level >= AST.JLS3_INTERNAL
						? safeSubtreeListMatch(node.modifiers(), o.modifiers())
								&& safeSubtreeListMatch(node.typeParameters(), o.typeParameters())
								// n.b. compare return type even for constructors
								&& safeSubtreeMatch(node.getReturnType2(), o.getReturnType2())
						: node.getModifiers() == o.getModifiers()
								// n.b. compare return type even for constructors
								&& safeSubtreeMatch(node.internalGetReturnType(), o.internalGetReturnType()))
				&& safeSubtreeMatch(node.getName(), o.getName())
				&& (level >= AST.JLS8
						? safeSubtreeMatch(node.getReceiverType(), o.getReceiverType())
								&& safeSubtreeMatch(node.getReceiverQualifier(), o.getReceiverQualifier())
						: true)
				&& safeSubtreeListMatch(node.parameters(), o.parameters())
				&& (level >= AST.JLS8
						? safeSubtreeListMatch(node.extraDimensions(), o.extraDimensions())
								&& safeSubtreeListMatch(node.thrownExceptionTypes(), o.thrownExceptionTypes())
						: node.getExtraDimensions() == o.getExtraDimensions()
								&& safeSubtreeListMatch(node.internalThrownExceptions(), o.internalThrownExceptions()))
				&& safeSubtreeMatch(node.getBody(), o.getBody());
	}

