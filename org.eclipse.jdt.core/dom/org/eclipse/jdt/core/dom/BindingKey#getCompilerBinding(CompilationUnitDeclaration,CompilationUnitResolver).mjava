	 /*
	  * Returns the compiler binding corresponding to this key.
	  * This key's scanner should be positioned on the top level type token.
	  * Returns null otherwise.
	  */
	 Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit, CompilationUnitResolver resolver) {
	 	switch (this.scanner.token) {
	 		case BindingKeyScanner.PACKAGE:
	 			if (this.compoundName.length > 0) {
		 			TypeBinding baseTypeBinding = Scope.getBaseType(this.compoundName[this.compoundName.length-1]);
		 			if (baseTypeBinding != null) // case of base type
	 					return baseTypeBinding;
	 			}
	 			return new PackageBinding(this.compoundName, null, resolver.lookupEnvironment);
	 		case BindingKeyScanner.TYPE:
	 			if (parsedUnit == null) 
	 				return getBinaryBinding(resolver);
	 			char[] typeName = this.compoundName[this.compoundName.length-1];
	 			TypeBinding binding = getTypeBinding(parsedUnit, parsedUnit.types, typeName, resolver);
	 			switch (this.scanner.token) {
	 				case BindingKeyScanner.PACKAGE:
					case BindingKeyScanner.END:
	 					if (this.scanner.isAtTypeParameterStart())
	 						// parameterized type binding
		 					return getParameterizedTypeBinding((ReferenceBinding) binding, null/*no enclosing type*/, resolver);
	 					else if (binding.typeVariables().length > 0)
	 						// raw type binding
	 						return resolver.lookupEnvironment.createRawType((ReferenceBinding) binding, null/*no enclosing type*/);
	 					else
	 						// non-generic type binding
	 						return binding;
	 				case BindingKeyScanner.ARRAY:
	 					return getArrayBinding(binding, resolver);
	 				case BindingKeyScanner.FIELD:
	 					return getFieldBinding(((SourceTypeBinding) binding).fields);
	 				case BindingKeyScanner.METHOD:
	 					return getMethodBinding(((SourceTypeBinding) binding).methods, resolver);
	 				case BindingKeyScanner.TYPE_PARAMETER:
	 					if (this.scanner.isAtTypeParameterStart())
		 					return getGenericTypeBinding((SourceTypeBinding) binding, resolver);
	 					else
	 						return binding;
	 			}
	 			break;
	 		case BindingKeyScanner.ARRAY:
	 			if (this.compoundName.length > 0) {
		 			TypeBinding baseTypeBinding = Scope.getBaseType(this.compoundName[this.compoundName.length-1]);
		 			if (baseTypeBinding != null)
	 					return getArrayBinding(baseTypeBinding, resolver);
	 			}
 				break;
	 	}
	 	return null;
	 }

