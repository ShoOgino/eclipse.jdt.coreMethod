	public NameEnvironmentAnswer findType(char[] typeName, char[][] packageName, IModule[] modules, boolean searchSecondaryTypes) {
		checkCanceled();
		NameEnvironmentAnswer answer = super.findType(typeName, packageName, modules);
		if (answer == null && searchSecondaryTypes) {
			NameEnvironmentAnswer suggestedAnswer = null;
			String qualifiedPackageName = new String(CharOperation.concatWith(packageName, '/'));
			String qualifiedTypeName = new String(CharOperation.concatWith(packageName, typeName, '/'));
			String qualifiedBinaryFileName = qualifiedTypeName + SUFFIX_STRING_class;
			for (int i = 0, length = this.classpaths.length; i < length; i++) {
				if (!(this.classpaths[i] instanceof ClasspathDirectory)) continue;
				ClasspathDirectory classpathDirectory = (ClasspathDirectory) this.classpaths[i];
				for (IModule iModule : modules) {
					if (!classpathDirectory.servesModule(iModule)) continue;
					answer = classpathDirectory.findSecondaryInClass(typeName, qualifiedPackageName, qualifiedBinaryFileName);
					if (answer != null) {
						if (!answer.ignoreIfBetter()) {
							if (answer.isBetter(suggestedAnswer))
								return answer;
						} else if (answer.isBetter(suggestedAnswer))
							// remember suggestion and keep looking
							suggestedAnswer = answer;
					}
				}
			}
		}
		return answer;
	}

