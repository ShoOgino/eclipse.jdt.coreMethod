	/**
	 * Set the environment that can be used when no IJavaProject are available.
	 * 
	 * <p>The user has to be sure to include all required types on the classpaths for binary types
	 * or on the sourcepaths for source types to resolve the given source code.</p>
	 * <p>All classpath and sourcepath entries are absolute paths.</p>
	 * <p>If sourcepaths contain units using a specific encoding (not the platform encoding), then the
	 * given <code>encodings</code> must be set. If the given <code>encodings</code> is set, its length must
	 * match the length of the sourcepaths parameter or an IllegalArgumentException will be thrown.</p>
	 * <p>If <code>encodings</code> is not <code>null</code>, the given <code>sourcepathEntries</code> must not be <code>null</code>.</p>
	 * 
	 * @param classpathEntries the given classpath entries to be used to resolve bindings
	 * @param sourcepathEntries the given sourcepath entries to be used to resolve bindings
	 * @param encodings the encodings of the corresponding sourcepath entries or <code>null</code> if the platform encoding
	 * can be used.
	 * @param includeRunningVMBootclasspath <code>true</code> if the bootclasspath of the running VM must be prepended to the
	 * given classpath and <code>false</code> if the bootclasspath of the running VM should be ignored.
	 * @throws IllegalArgumentException if the size of the given encodings is not equals to the size of the given <code>
	 * sourcepathEntries</code>
	 * @since 3.6
	 */
	public void setEnvironment(String[] classpathEntries, String[] sourcepathEntries, String[] encodings, boolean includeRunningVMBootclasspath) {
		this.classpaths = classpathEntries;
		this.sourcepaths = sourcepathEntries;
		this.sourcepathsEncodings = encodings;
		if (encodings != null) {
			if (sourcepathEntries == null || sourcepathEntries.length != encodings.length) {
				throw new IllegalArgumentException(); 
			}
		}
		this.bits |= CompilationUnitResolver.INCLUDE_RUNNING_VM_BOOTCLASSPATH;
	}

