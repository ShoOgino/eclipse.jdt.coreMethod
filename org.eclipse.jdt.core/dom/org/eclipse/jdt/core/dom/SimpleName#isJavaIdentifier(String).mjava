	/**
	 * Returns whether the given string is a valid Java identifier.
	 * <p>
	 * Java Language Specification (�3.8):
	 * "An identifier is an unlimited-length sequence of Java letters and 
	 * Java digits, the first of which must be a Java letter. An identifier 
	 * cannot have the same spelling (Unicode character sequence) as a 
	 * keyword (�3.9), boolean literal (�3.10.3), or the null literal (�3.10.7).
	 * </p>
	 * <p>
	 * Letters and digits may be drawn from the entire Unicode character set, 
	 * which supports most writing scripts in use in the world today, including 
	 * the large sets for Chinese, Japanese, and Korean. This allows 
	 * programmers to use identifiers in their programs that are written in 
	 * their native languages. A "Java letter" is a character for which the 
	 * method Character.isJavaIdentifierStart returns true. A "Java 
	 * letter-or-digit" is a character for which the method 
	 * Character.isJavaIdentifierPart returns true."
	 * </p>
	 * <p>
	 * Note that "assert", which was added as a keyword in 1.4, is considered
	 * to be a legal Java identifier.
	 * </p>
	 * 
	 * @param identifier the alleged identifier
	 * @return <code>true</code> if a valid identifier, and <code>false</code> 
	 *    if not valid
	 */
	public static boolean isJavaIdentifier(String identifier) {
		int len = identifier.length();
		if (len == 0) {
			return false;
		}
		char c = identifier.charAt(0);
		if (!Character.isJavaIdentifierStart(c)) {
			return false;
		}			
		for (int i= 1; i < len; i++) {
			c = identifier.charAt(i);
			if (!Character.isJavaIdentifierPart(c)) {
				return false;
			}	
		}
		if (KEYWORDS.contains(identifier)) {
			return false;
		}			
		return true;
	}

