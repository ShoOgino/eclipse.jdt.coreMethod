	public static CompilationUnitDeclaration resolve(
		ICompilationUnit unitElement,
		boolean cleanUp,
		char[] source,
		WorkingCopyOwner owner,
		IProgressMonitor monitor)
		throws JavaModelException {

		char[] fileName = unitElement.getElementName().toCharArray();
		JavaProject project = (JavaProject) unitElement.getJavaProject();
		CompilationUnitResolver compilationUnitVisitor =
			new CompilationUnitResolver(
				getNameEnvironment(project, owner, monitor),
				getHandlingPolicy(),
				project.getOptions(true),
				getRequestor(),
				getProblemFactory(monitor));

		CompilationUnitDeclaration unit = null;
		try {
			String encoding = project.getOption(JavaCore.CORE_ENCODING, true);

			IPackageFragment packageFragment = (IPackageFragment)unitElement.getAncestor(IJavaElement.PACKAGE_FRAGMENT);
			char[][] expectedPackageName = null;
			if (packageFragment != null){
				expectedPackageName = CharOperation.splitOn('.', packageFragment.getElementName().toCharArray());
			}
			
			unit =
				compilationUnitVisitor.resolve(
					new BasicCompilationUnit(
						source,
						expectedPackageName,
						new String(fileName),
						encoding),
					true, // method verification
					true, // analyze code
					true); // generate code
			return unit;
		} finally {
			if (cleanUp && unit != null) {
				unit.cleanUp();
			}
		}
	}

