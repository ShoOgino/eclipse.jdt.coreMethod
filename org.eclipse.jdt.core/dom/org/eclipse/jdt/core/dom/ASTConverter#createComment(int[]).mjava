	private Comment createComment(int[] positions) {
		// Create comment node
		Comment comment = null;
		int start = positions[0];
		int end = positions[1];
		if (positions[1]>0) { // Javadoc comments have positive end position
			this.ast.newJavadoc();
			DocCommentParser docParser = new DocCommentParser(this.ast, this.scanner);
			Javadoc docComment = docParser.parse(positions);
//			String contents = new String(this.compilationUnitSource, start, end - start + 1);
//			javadoc.parseComment(contents);
			if (docComment == null) return null;
			comment = docComment;
		} else {
			end = -end;
			if (positions[0]>0) { // Block comment have positive start position
				comment = this.ast.newBlockComment();
			} else { // Line comment have negative start and end position
				start = -start;
				comment = this.ast.newLineComment();
			}
			comment.setSourceRange(start, end - start);
		}
		return comment;
	}

