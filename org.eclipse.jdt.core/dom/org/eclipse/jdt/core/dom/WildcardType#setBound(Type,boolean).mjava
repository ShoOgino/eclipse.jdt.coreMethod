	/**
	 * Sets the bound of this wildcard type to the given type and
	 * marks it as an upper or a lower bound.
	 * 
	 * @param type the new bound of this wildcard type, or <code>null</code>
	 * if none
	 * @param isUpperBound <code>true</code> for an upper bound ("? extends B"),
	 * and <code>false</code> for a lower bound ("? super B"); ignored if the
	 * given bound is <code>null</code>
	 * @exception IllegalArgumentException if:
	 * <ul>
	 * <li>the node belongs to a different AST</li>
	 * <li>the node already has a parent</li>
	 * </ul>
	 * @see #getBound
	 * @see #isUpperBound
	 */ 
	public void setBound(Type type, boolean isUpperBound) {
		// a WildcardType may occur inside an WildcardType - must check cycles
		replaceChild(this.optionalBound, type, true);
		this.optionalBound = type;
		this.isUpperBound = (type == null) ? true : isUpperBound;
	}

