	private void propagateErrors(CompilationUnit unit, IProblem[] problems, int problemLength) {
		for (int n = 0; n < problemLength; n++) {
			int position = problems[n].getSourceStart();
				//check the package declaration
			PackageDeclaration packageDeclaration = unit.getPackage();
			if (packageDeclaration != null && checkAndTagAsMalformed(packageDeclaration, position)) {
				return;
			}
			List imports = unit.imports();
			for (int i = 0, length = imports.size(); i < length; i++) {
				if (checkAndTagAsMalformed((ASTNode) imports.get(i), position)) {
					return;
				}
			}
			for (int i = 0, max = unit.types().size(); i < max; i++) {
				TypeDeclaration typeDeclaration = (TypeDeclaration) unit.types().get(0);
				for (int j = 0, max2 = typeDeclaration.bodyDeclarations().size();
					j < max2;
					j++) {
					if (checkAndTagAsMalformed((ASTNode) typeDeclaration.bodyDeclarations().get(j), position)) {
						return;
					}
				}
				if (checkAndTagAsMalformed(typeDeclaration, position)) {
					return;
				}
			}
		}
		// if we get there, then we cannot do better than tag the compilation unit as being malformed
		unit.setFlags(ASTNode.MALFORMED);
	}

