	/**
	 * @see org.eclipse.jdt.core.dom.ITypeBinding#getQualifiedName()
	 */
	public String getQualifiedName() {
		if (isAnonymous() || isLocal()) {
			return NO_NAME;
		}
		if (isPrimitive() || isNullType()) {
			BaseTypeBinding baseTypeBinding = (BaseTypeBinding) this.binding;
			return new String(baseTypeBinding.simpleName);
		}
		if (isWildcardType()) {
			WildcardBinding wildcardBinding = (WildcardBinding) this.binding;
			StringBuffer buffer = new StringBuffer();
			buffer.append(TypeConstants.WILDCARD_NAME);
			final ITypeBinding bound = getBound();
			if (bound != null) {
				switch(wildcardBinding.kind) {
			        case Wildcard.SUPER :
			        	buffer.append(TypeConstants.WILDCARD_SUPER);
			            break;
			        case Wildcard.EXTENDS :
			        	buffer.append(TypeConstants.WILDCARD_EXTENDS);
				}
				buffer.append(bound.getQualifiedName());
			}
			return String.valueOf(buffer);
		}
		if (isRawType()) {
			return getErasure().getQualifiedName();
		}
		if (isArray()) {
			ITypeBinding elementType = getElementType();
			if (elementType.isLocal() || elementType.isAnonymous()) {
				return NO_NAME;
			}
			final int dimensions = getDimensions();
			char[] brackets = new char[dimensions * 2];
			for (int i = dimensions * 2 - 1; i >= 0; i -= 2) {
				brackets[i] = ']';
				brackets[i - 1] = '[';
			}
			StringBuffer buffer = new StringBuffer(elementType.getQualifiedName());
			buffer.append(brackets);
			return String.valueOf(buffer);
		}
		if (isTypeVariable()) {
			TypeVariableBinding typeVariableBinding = (TypeVariableBinding) this.binding;
			return new String(typeVariableBinding.sourceName);
		}
		if (isMember()) {
			StringBuffer buffer = new StringBuffer();
			buffer
				.append(getDeclaringClass().getQualifiedName())
				.append('.')
				.append(getName());
			return String.valueOf(buffer);
		}
		if (isParameterizedType()) {
			StringBuffer buffer = new StringBuffer();
			buffer.append(getErasure().getQualifiedName());
			ITypeBinding[] typeArguments = getTypeArguments();
			final int typeArgumentsLength = typeArguments.length;
			if (typeArgumentsLength != 0) {
				buffer.append('<');
				for (int i = 0, max = typeArguments.length; i < max; i++) {
					if (i > 0) {
						buffer.append(',');
					}
					buffer.append(typeArguments[i].getQualifiedName());
				}
				buffer.append('>');
			}
			return String.valueOf(buffer);
		}
		if (isRawType()) {
			return getErasure().getQualifiedName();
		}
		PackageBinding packageBinding = this.binding.getPackage();
		
		StringBuffer buffer = new StringBuffer();
		if (packageBinding != null && packageBinding.compoundName != CharOperation.NO_CHAR_CHAR) {
			buffer.append(CharOperation.concatWith(packageBinding.compoundName, '.')).append('.');
		}
		buffer.append(getName());

		return String.valueOf(buffer);
	}

