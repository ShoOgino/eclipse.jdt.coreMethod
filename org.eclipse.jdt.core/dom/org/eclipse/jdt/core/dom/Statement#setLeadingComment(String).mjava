	/**
	 * Sets or clears the leading comment string. The comment
	 * string must include the starting and ending comment delimiters,
	 * and any embedded linebreaks.
	 * <p>
	 * A leading comment is one that appears before the statement.
	 * It may be either an end-of-line or a multi-line comment.
	 * Multi-line comments may contain line breaks; end-of-line
	 * comments must not.
	 * </p>
	 * <p>
	 * Examples:
	 * <code>
	 * <pre>
	 * setLeadingComment("/&ast; single-line comment &ast;/") - correct
	 * setLeadingComment("missing comment delimiters") - wrong!
	 * setLeadingComment("/&ast; unterminated comment ") - wrong!
	 * setLeadingComment("// end-of-line comment") - correct
	 * setLeadingComment("/&ast; multi-line\n comment &ast;/")  - correct
	 * setLeadingComment("// broken end-of-line\n comment ") - wrong!
	 * </pre>
	 * </code>
	 * </p>
	 * 
	 * @param comment the comment string, or <code>null</code> if none
	 * @exception $precondition-violation:invalid-comment$
	 */
	public void setLeadingComment(String comment) {
		if (comment != null) {
			if (comment.startsWith("/*") && comment.endsWith("*/") && comment.length() >= 4) {//$NON-NLS-1$//$NON-NLS-2$
				// this is ok
			} else if (comment.startsWith("//") && comment.indexOf('\n') < 0) {//$NON-NLS-1$
				// this is ok too
			} else {
				// but anything else if not good
				throw new IllegalArgumentException();
			}
		}
		modifying();
		this.optionalLeadingComment = comment;
	}

