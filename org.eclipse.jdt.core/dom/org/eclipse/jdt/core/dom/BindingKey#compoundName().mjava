	 /*
	  * If not already cached, computes and cache the compound name (pkg name + top level name) of this key.
	  * Returns the package name if key is a pkg key.
	  * Returns an empty array if malformed.
	  * This key's scanner should be positioned on the package token.
	  */
	 char[][] compoundName() {
	 	if (this.compoundName == null) {
		 	if (this.scanner.token != BindingKeyScanner.PACKAGE) {
		 		this.compoundName = CharOperation.NO_CHAR_CHAR; // malformed
		 	} else {
			 	char[][] pkg = CharOperation.splitOn('.', this.scanner.getTokenSource());
			 	if (this.scanner.isAtTypeEnd()) {
			 		this.compoundName = pkg;
			 	} else {
				 	int token = this.scanner.nextToken();
				 	switch (token) {
				 		case BindingKeyScanner.TYPE:
					 		char[] simpleName = this.scanner.getTokenSource();
					 		this.compoundName = CharOperation.arrayConcat(pkg, simpleName);
					 		break;
					 	case BindingKeyScanner.ARRAY: // case of base type with array dimension
					 		this.compoundName = pkg;
					 		break;
					 	default:
					 		this.compoundName = this.compoundName = CharOperation.NO_CHAR_CHAR; // malformed
				 	}
			 	}
		 	}
	 	}
	 	return this.compoundName;
	 }

