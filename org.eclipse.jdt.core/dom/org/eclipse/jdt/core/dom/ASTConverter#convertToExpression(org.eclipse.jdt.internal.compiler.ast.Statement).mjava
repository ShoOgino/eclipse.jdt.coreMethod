	public Expression convertToExpression(org.eclipse.jdt.internal.compiler.ast.Statement statement) {
		if (statement instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {
			return convert((org.eclipse.jdt.internal.compiler.ast.Expression) statement);
		} else if (statement instanceof LocalDeclaration) {
			LocalDeclaration localDeclaration = (LocalDeclaration) statement;
			VariableDeclarationFragment variableDeclarationFragment = this.ast.newVariableDeclarationFragment();
			SimpleName name = this.ast.newSimpleName(localDeclaration.name());
			name.setSourceRange(localDeclaration.sourceStart, localDeclaration.sourceEnd - localDeclaration.sourceStart + 1);
			variableDeclarationFragment.setName(name);
			variableDeclarationFragment.setSourceRange(localDeclaration.declarationSourceStart, localDeclaration.declarationSourceEnd - localDeclaration.declarationSourceStart + 1);
			if (localDeclaration.initialization != null) {
				variableDeclarationFragment.setInitializer(convert(localDeclaration.initialization));
			}
			VariableDeclarationExpression variableDeclarationExpression = this.ast.newVariableDeclarationExpression(variableDeclarationFragment);
			if (this.resolveBindings) {
				recordNodes(variableDeclarationFragment, localDeclaration);
			}
			variableDeclarationExpression.setSourceRange(localDeclaration.declarationSourceStart, localDeclaration.declarationSourceEnd - localDeclaration.declarationSourceStart + 1);
			/**
			 * http://dev.eclipse.org/bugs/show_bug.cgi?id=13233
			 * This handles cases where the parser built variables with invalid modifiers.
			 * The compilation unit is tagged as having wrong modifiers for the local.
			 * Only final is allowed in this case.
			 */
			try {
				variableDeclarationExpression.setModifiers(localDeclaration.modifiers);
			} catch(IllegalArgumentException e) {
				variableDeclarationExpression.setModifiers(localDeclaration.modifiers & Modifier.FINAL);
				variableDeclarationExpression.setFlags(ASTNode.MALFORMED);
			}
			variableDeclarationFragment.setExtraDimensions(retrieveExtraDimension(localDeclaration.sourceEnd + 1, this.compilationUnitSource.length));
			Type type = convertType(localDeclaration.type);
			setTypeForVariableDeclarationExpression(variableDeclarationExpression, type, variableDeclarationFragment.getExtraDimensions());
			return variableDeclarationExpression;
		} else {
			// unsupported
			throw new IllegalArgumentException("Not yet implemented: convert(" + statement.getClass() + ")");//$NON-NLS-1$//$NON-NLS-2$
		}
	}

