	public Name convert(TypeReference typeReference) {
		Name name;
		char[][] typeName = typeReference.getTypeName();
		int length = typeName.length;
		if (length > 1) {
			// QualifiedName
			QualifiedTypeReference qualifiedTypeReference = (QualifiedTypeReference) typeReference;
			long[] positions = qualifiedTypeReference.sourcePositions;
			SimpleName firstToken = this.ast.newSimpleName(new String(typeName[0]));
			int start0 = (int)(positions[0]>>>32);
			int start = start0;
			int end = (int)(positions[0] & 0xFFFFFFFF);
			firstToken.setSourceRange(start, end - start + 1);
			SimpleName secondToken = this.ast.newSimpleName(new String(typeName[1]));
			start = (int)(positions[1]>>>32);
			end = (int)(positions[1] & 0xFFFFFFFF);
			secondToken.setSourceRange(start, end - start + 1);
			QualifiedName qualifiedName = this.ast.newQualifiedName(firstToken, secondToken);
			qualifiedName.setSourceRange(start0, end - start0 + 1);
			SimpleName newPart;
			for (int i = 2; i < length; i++) {
				newPart = this.ast.newSimpleName(new String(typeName[i]));
				start = (int)(positions[i]>>>32);
				end = (int)(positions[i] & 0xFFFFFFFF);
				newPart.setSourceRange(start,  end - start + 1);
				qualifiedName = this.ast.newQualifiedName(qualifiedName, newPart);
				qualifiedName.setSourceRange(start0, end - start0 + 1);
			}
			name = qualifiedName;
		} else {
			// SimpleName
			name = this.ast.newSimpleName(new String(typeName[0]));
			name.setSourceRange(typeReference.sourceStart, typeReference.sourceEnd - typeReference.sourceStart + 1);
		}
		if (this.resolveBindings) {
			recordNodes(name, typeReference);
		}
		return name;
	}

