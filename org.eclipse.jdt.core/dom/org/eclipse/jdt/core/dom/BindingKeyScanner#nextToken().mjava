	/*
	 * package[/type[$type][/method | /field]]
	 */
	int nextToken() {
		this.start = ++this.index;
		int length = this.source.length;
		boolean insideMethod = false;
		while (this.index <= length) {
			char currentChar = this.index == length ? Character.MIN_VALUE : this.source[this.index];
			switch (currentChar) {
				case '/':
				case Character.MIN_VALUE:
					switch (this.token) {
						case START:
							this.token = PACKAGE;
							break;
						case PACKAGE:
							this.token = TYPE;
							break;
						case TYPE:
							if (this.source[start-1] == '$')
								this.token = TYPE;
							else
								this.token = insideMethod ? METHOD : FIELD;
							break;
					}
					return this.token;
				case '$':
				case '[':
					switch (this.token) {
						case START: // case of base type with array dimension
							this.token = PACKAGE;
							break;
						case PACKAGE:
							this.token = TYPE;
							break;
						case TYPE:
							this.token = TYPE;
							break;
					}
					return this.token;
				case '(':
					do {
						this.index++;
					} while (this.index < length && this.source[this.index] != ')');
					insideMethod = true;
					break;
				case ']':
					this.start--;
					this.index++;
					while (this.index < length && this.source[this.index] == '[') {
						this.index +=2;
					}
					this.token = ARRAY;
					return this.token;
			}
			this.index++;
		}
		this.token = END;
		return this.token;
	}

