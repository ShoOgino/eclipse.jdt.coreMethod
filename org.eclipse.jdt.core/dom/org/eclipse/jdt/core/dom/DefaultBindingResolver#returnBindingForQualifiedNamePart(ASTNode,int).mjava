	private IBinding returnBindingForQualifiedNamePart(ASTNode parent, int index) {
		// now we can retrieve the compiler's node
		AstNode node = (AstNode) this.newAstToOldAst.get(parent);
		if (node instanceof QualifiedNameReference) {
			QualifiedNameReference qualifiedNameReference = (QualifiedNameReference) node;
			if (qualifiedNameReference.isTypeReference()) {
				return this.getTypeBinding((ReferenceBinding)qualifiedNameReference.binding);
			} else {
				int qualifiedNameLength = qualifiedNameReference.tokens.length;
				int indexInQualifiedName = qualifiedNameLength - index; // one-based
				int indexOfFirstFieldBinding = qualifiedNameReference.indexOfFirstFieldBinding; // one-based
				int otherBindingLength = qualifiedNameLength - indexOfFirstFieldBinding;
				if (indexInQualifiedName < indexOfFirstFieldBinding) {
					// a extra lookup is required`
					Scope scope = retrieveEnclosingScope(parent);
					return this.getTypeBinding(scope.getType(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName)));
				} else {
					if (indexInQualifiedName == indexOfFirstFieldBinding) {
						return this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) qualifiedNameReference.binding);				
					} else {
						return this.getVariableBinding(qualifiedNameReference.otherBindings[otherBindingLength - index - 1]);				
					}
				}
			}
		}
		return null;
	}

