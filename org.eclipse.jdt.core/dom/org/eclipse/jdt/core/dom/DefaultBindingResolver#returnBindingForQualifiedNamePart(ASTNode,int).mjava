	private IBinding returnBindingForQualifiedNamePart(ASTNode parent, int index) {
		// now we can retrieve the compiler's node
		AstNode node = (AstNode) this.newAstToOldAst.get(parent);
		if (node instanceof QualifiedNameReference) {
			QualifiedNameReference qualifiedNameReference = (QualifiedNameReference) node;
			if (qualifiedNameReference.isTypeReference()) {
				return this.getTypeBinding((ReferenceBinding)qualifiedNameReference.binding);
			} else {
				int qualifiedNameLength = qualifiedNameReference.tokens.length;
				int indexInQualifiedName = qualifiedNameLength - index; // one-based
				int indexOfFirstFieldBinding = qualifiedNameReference.indexOfFirstFieldBinding; // one-based
				int otherBindingLength = qualifiedNameLength - indexOfFirstFieldBinding;
				if (indexInQualifiedName < indexOfFirstFieldBinding) {
					// a extra lookup is required`
					Scope internalScope = retrieveEnclosingScope(parent);
					Binding binding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName));
					if (binding != null && binding.isValidBinding()) {
						if (binding instanceof org.eclipse.jdt.internal.compiler.lookup.PackageBinding) {
							return this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding)binding);
						} else {
							// it is a type
							return this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding)binding);
						}
					}
					return null;
				} else {
					if (indexInQualifiedName == indexOfFirstFieldBinding) {
						Binding binding = qualifiedNameReference.binding;
						if (binding != null && binding.isValidBinding()) {
							return this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) binding);				
						} else {
							return null;
						}
					} else {
						return this.getVariableBinding(qualifiedNameReference.otherBindings[otherBindingLength - index - 1]);				
					}
				}
			}
		}
		return null;
	}

