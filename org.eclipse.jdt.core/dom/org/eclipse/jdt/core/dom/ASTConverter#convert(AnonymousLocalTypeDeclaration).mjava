	public ClassInstanceCreation convert(AnonymousLocalTypeDeclaration expression) {
		ClassInstanceCreation classInstanceCreation = this.ast.newClassInstanceCreation();
		if (this.resolveBindings) {
			recordNodes(classInstanceCreation, expression);
		}
		classInstanceCreation.setName(convert(expression.allocation.type));
		if (expression.allocation.enclosingInstance != null) {
			classInstanceCreation.setExpression(convert(expression.allocation.enclosingInstance));
		}
		int declarationSourceStart = expression.allocation.sourceStart;
		classInstanceCreation.setSourceRange(declarationSourceStart, expression.bodyEnd - declarationSourceStart + 1);
		org.eclipse.jdt.internal.compiler.ast.Expression[] arguments = expression.allocation.arguments;
		if (arguments != null) {
			int length = arguments.length;
			for (int i = 0; i < length; i++) {
				classInstanceCreation.arguments().add(convert(arguments[i]));
			}
		}
		int fieldsLength;
		int methodsLength;
		int memberTypesLength;

		// <superclass> is bound to the actual type from the allocation expression
		// therefore it has already been iterated at this point.
		MemberTypeDeclaration[] memberTypes = expression.memberTypes;
		if (memberTypes != null) {
			memberTypesLength = memberTypes.length;
			for (int i = 0; i < memberTypesLength; i++) {
				classInstanceCreation.bodyDeclarations().add(convert(memberTypes[i]));
			}
		}
		org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] fields = expression.fields;
		if (fields != null) {
			fieldsLength = fields.length;
			for (int i = 0; i < fieldsLength; i++) {
				checkAndAddMultipleFieldDeclaration(fields, i, classInstanceCreation.bodyDeclarations());
			}
		}
		org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[] methods = expression.methods;
		if (methods != null) {
			methodsLength = methods.length;
			for (int i = 0; i < methodsLength; i++) {
				if (!methods[i].isDefaultConstructor() && !methods[i].isClinit()) {
					classInstanceCreation.bodyDeclarations().add(convert(methods[i]));
				}
			}
		}
		classInstanceCreation.setAnonymousClassDeclaration(true);
		return classInstanceCreation;
	}

