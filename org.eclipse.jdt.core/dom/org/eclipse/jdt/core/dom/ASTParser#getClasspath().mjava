	private List<Classpath> getClasspath() throws IllegalStateException {
		Main main = new Main(new PrintWriter(System.out), new PrintWriter(System.err), false/*systemExit*/, null/*options*/, null/*progress*/);
		ArrayList<Classpath> allClasspaths = new ArrayList<Classpath>();
		try {
			if ((this.bits & CompilationUnitResolver.INCLUDE_RUNNING_VM_BOOTCLASSPATH) != 0) {
				org.eclipse.jdt.internal.compiler.util.Util.collectRunningVMBootclasspath(allClasspaths);
			}
			if (this.sourcepaths != null) {
				for (int i = 0, max = this.sourcepaths.length; i < max; i++) {
					String encoding = this.sourcepathsEncodings == null ? null : this.sourcepathsEncodings[i];
					main.processPathEntries(
							Main.DEFAULT_SIZE_CLASSPATH,
							allClasspaths, this.sourcepaths[i], encoding, true, false);
				}
			}
			if (this.classpaths != null) {
				for (int i = 0, max = this.classpaths.length; i < max; i++) {
					main.processPathEntries(
							Main.DEFAULT_SIZE_CLASSPATH,
							allClasspaths, this.classpaths[i], null, false, false);
				}
			}
			ArrayList pendingErrors = main.pendingErrors;
			if (pendingErrors != null && pendingErrors.size() != 0) {
				throw new IllegalStateException("invalid environment settings"); //$NON-NLS-1$
			}
		} catch (IllegalArgumentException e) {
			throw new IllegalStateException("invalid environment settings", e); //$NON-NLS-1$
		}
		return allClasspaths;
	}

