	/*
	 * Appends to the given buffer the fully qualified name (as it appears in the source) of the given type
	 */
	private void getFullyQualifiedName(Type type, StringBuffer buffer) {
		if (type.isArrayType()) {
			ArrayType arrayType = (ArrayType) type;
			getFullyQualifiedName(arrayType.getElementType(), buffer);
			for (int i = 0, length = arrayType.getDimensions(); i < length; i++) {
				buffer.append('[');
				buffer.append(']');
			}
		} else if (type.isParameterizedType()) {
			ParameterizedType parameterizedType = (ParameterizedType) type;
			getFullyQualifiedName(parameterizedType.getType(), buffer);
			buffer.append('<');
			Iterator iterator = parameterizedType.typeArguments().iterator();
			boolean isFirst = true;
			while (iterator.hasNext()) {
				if (!isFirst)
					buffer.append(',');
				else
					isFirst = false;
				Type typeArgument = (Type) iterator.next();
				getFullyQualifiedName(typeArgument, buffer);
			}
			buffer.append('>');
		} else if (type.isPrimitiveType()) {
			buffer.append(((PrimitiveType) type).getPrimitiveTypeCode().toString());
		} else if (type.isQualifiedType()) {
			buffer.append(((QualifiedType) type).getName().getFullyQualifiedName());
		} else if (type.isSimpleType()) {
			buffer.append(((SimpleType) type).getName().getFullyQualifiedName());
		} else if (type.isWildcardType()) {
			buffer.append('?');
			WildcardType wildcardType = (WildcardType) type;
			Type bound = wildcardType.getBound();
			if (bound == null) return;
			if (wildcardType.isUpperBound()) {
				buffer.append(" extends "); //$NON-NLS-1$
			} else {
				buffer.append(" super "); //$NON-NLS-1$
			}
			getFullyQualifiedName(bound, buffer);
		}
	}

