	/**
	 * Not API, package visibility as accessed from an anonymous type
	 */
	/* package */ final int findInImports(String qualifier, String name, int kind) {
		boolean allowAmbiguity=  (kind == ImportRewriteContext.KIND_STATIC_METHOD) || (name.length() == 1 && name.charAt(0) == '*');
		List imports= this.existingImports;
		char prefix= (kind == ImportRewriteContext.KIND_TYPE) ? NORMAL_PREFIX : STATIC_PREFIX;

		for (int i= imports.size() - 1; i >= 0 ; i--) {
			String curr= (String) imports.get(i);
			int res= compareImport(prefix, qualifier, name, curr);
			if (res != ImportRewriteContext.RES_NAME_UNKNOWN) {
				if (!allowAmbiguity || res == ImportRewriteContext.RES_NAME_FOUND) {
					if (prefix != STATIC_PREFIX) {
						return res;
					}
					Object currKind = this.importsKindMap.get(curr.substring(1));
					if (currKind != null && currKind.equals(this.importsKindMap.get(qualifier + '.' + name))) {
						return res;
					}
				}
			}
		}
		if (this.filterImplicitImports && this.useContextToFilterImplicitImports) {
			String fPackageName= this.compilationUnit.getParent().getElementName();
			String mainTypeSimpleName= JavaCore.removeJavaLikeExtension(this.compilationUnit.getElementName());
			String fMainTypeName= Util.concatenateName(fPackageName, mainTypeSimpleName, '.');
			if (kind == ImportRewriteContext.KIND_TYPE
					&& (qualifier.equals(fPackageName)
							|| fMainTypeName.equals(Util.concatenateName(qualifier, name, '.'))))
				return ImportRewriteContext.RES_NAME_FOUND;
		}

		int nTypes = 0;
		if (this.astRoot != null) {
			List types = this.astRoot.types();
			nTypes = types != null ? types.size() : 0;
			for (int i = 0; i < nTypes; i++) {
				AbstractTypeDeclaration type = (AbstractTypeDeclaration) types.get(i);
				SimpleName simpleName;
				if (type != null && (simpleName = type.getName()) != null && simpleName.toString().equals(name)) { 
					return ImportRewriteContext.RES_NAME_CONFLICT;
				}
			}
		}
		if (nTypes <= 0 && this.compilationUnit != null) {
			try {
				IType[] types = this.compilationUnit.getTypes();
				nTypes = types.length;
				for (int i = 0; i < nTypes; i++) {
					IType type = types[i];
					String typeName = type.getElementName();
					if (typeName != null && typeName.equals(name)) 
						return ImportRewriteContext.RES_NAME_CONFLICT;
				}
			} catch (JavaModelException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return ImportRewriteContext.RES_NAME_UNKNOWN;
	}

