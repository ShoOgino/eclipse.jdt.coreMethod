	/**
	 * Marks the node as inserted in the list at a given index. The index correspods to a combined list of original and new
	 * nodes: Nodes remarked as removed are still in this list. 
	 * @param nodeToInsert The node to insert. The inserted node must be a new node. Use placeholder
	 *	nodes to insert a copied or moved node.
	 * @param index The insertion index corresponding to a 'combined list' of original and inserted nodes. <code>-1</code>
	 * as index signals to insert as last element.  
	 * @param editGroup Collects the generated text edits. <code>null</code> can be passed
	 * to not collect any edits.
	 * @throws IllegalArgumentException Thrown when the inserted node is not a new node.
	 * @throws IndexOutOfBoundsException Throws when the index is negative and not -1, or if it is larger
	 * than the size of the combined list.
	 */
	public void insertAt(ASTNode nodeToInsert, int index, TextEditGroup editGroup) {
		RewriteEvent event= getEvent().insert(nodeToInsert, index);
		if (isInsertBoundToPreviousByDefault(nodeToInsert)) {
			getRewriteStore().setInsertBoundToPrevious(nodeToInsert);
		}
		if (editGroup != null) {
			getRewriteStore().setEventEditGroup(event, editGroup);
		}
	}

