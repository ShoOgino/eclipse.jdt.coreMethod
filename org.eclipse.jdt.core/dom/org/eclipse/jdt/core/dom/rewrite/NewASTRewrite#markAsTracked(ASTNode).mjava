	/* TODO (david) - A better name for this method might be track(ASTNode).
	 */
	/* TODO (david) - It seems unnecesssary to prevent a client from tracking
	 * a node more than once. There is no ambiguity in such a situation, and the
	 * implementation is free to return either a new or existing ITrackedNodePosition.
	 */
	/**
	 * Returns an object that tracks the source range of the given node
	 * across the rewrite to its AST. Upon return, the result object reflects
	 * the given node's current source range in the AST. After
	 * <code>rewrite</code> is called, the result object is updated to
	 * reflect the given node's source range in the rewritten AST.
	 * 
	 * @param node the node to track
	 * @return an object that tracks the source range of <code>node</code>
	 * @throws IllegalArgumentException if the node is null, or if the node
	 * is not part of this rewriter's AST, or if the node is already being
	 * tracked
	 */
	public final ITrackedNodePosition markAsTracked(ASTNode node) {
		if (node == null) {
			throw new IllegalArgumentException();
		}
		if (fEventStore.getTrackedNodeData(node) != null) {
			throw new IllegalArgumentException("Node is already marked as tracked"); //$NON-NLS-1$
		}
		TextEditGroup editGroup= new TextEditGroup("internal"); //$NON-NLS-1$
		fEventStore.setTrackedNodeData(node, editGroup);
		return new TrackedNodePosition(editGroup, node);
	}	

