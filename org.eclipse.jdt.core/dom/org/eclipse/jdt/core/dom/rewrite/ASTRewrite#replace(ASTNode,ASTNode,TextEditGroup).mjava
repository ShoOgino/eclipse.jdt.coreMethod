	/**
	 * Replaces the given node in this rewriter. The replacement node
	 * must either be brand new (not part of the original AST) or a placeholder
	 * node (for example, one created by {@link #createCopyTarget(ASTNode)}
	 * or {@link #createStringPlaceholder(String, int)}). The AST itself
     * is not actually modified in any way; rather, the rewriter just records
     * a note that this node has been replaced.
	 * 
	 * @param node the node being replaced. The node can either be an original node in the AST
	 * or (since 3.4) a new node already inserted or used as replacement in this AST rewriter.
	 * @param replacement the replacement node, or <code>null</code> if no
	 * replacement
	 * @param editGroup the edit group in which to collect the corresponding
	 * text edits, or <code>null</code> if ungrouped
	 * @throws IllegalArgumentException if the node is null, or if the node is not part
	 * of this rewriter's AST, or if the replacement node is not a new node (or
     * placeholder), or if the described modification is otherwise invalid
	 */		
	public final void replace(ASTNode node, ASTNode replacement, TextEditGroup editGroup) {
		if (node == null) {
			throw new IllegalArgumentException();
		}
		
		StructuralPropertyDescriptor property;
		ASTNode parent;
		if (RewriteEventStore.isNewNode(node)) { // replace a new node, bug 164862 
			PropertyLocation location= this.eventStore.getPropertyLocation(node, RewriteEventStore.NEW);
			if (location != null) {
				property= location.getProperty();
				parent= location.getParent();
			} else {
				throw new IllegalArgumentException("Node is not part of the rewriter's AST"); //$NON-NLS-1$
			}
		} else {
			property= node.getLocationInParent();
			parent= node.getParent();
		}
		
		if (property.isChildListProperty()) {
			getListRewrite(parent, (ChildListPropertyDescriptor) property).replace(node, replacement, editGroup);
		} else {
			set(parent, property, replacement, editGroup);
		}
	}

