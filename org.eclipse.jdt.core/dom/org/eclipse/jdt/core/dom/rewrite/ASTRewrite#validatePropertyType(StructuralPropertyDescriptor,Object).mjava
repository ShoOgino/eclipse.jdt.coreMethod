	private void validatePropertyType(StructuralPropertyDescriptor prop, Object value) {
		if (prop.isChildListProperty()) {
			String message = "Can not modify a list property, use getListRewrite()"; //$NON-NLS-1$
			throw new IllegalArgumentException(message);
		}
		if (!RewriteEventStore.DEBUG) {
			return;
		}
		
		if (value == null) {
			if (prop.isSimpleProperty() && ((SimplePropertyDescriptor) prop).isMandatory()
					|| prop.isChildProperty() && ((ChildPropertyDescriptor) prop).isMandatory()) {
				String message = "Can not remove property " + prop.getId(); //$NON-NLS-1$
				throw new IllegalArgumentException(message);
			}
			
		} else {
			Class valueType;
			if (prop.isSimpleProperty()) {
				SimplePropertyDescriptor p = (SimplePropertyDescriptor) prop;
				valueType = p.getValueType();
				if (valueType == int.class) {
					valueType = Integer.class;
				} else if (valueType == boolean.class) {
					valueType = Boolean.class;
				}
			} else {
				ChildPropertyDescriptor p = (ChildPropertyDescriptor) prop;
				valueType = p.getChildType();
			}
			if (!valueType.isAssignableFrom(value.getClass())) {
				String message = value.getClass().getName() + " is not a valid type for " + prop.getNodeClass().getName() //$NON-NLS-1$
						+ " property '" + prop.getId() + '\''; //$NON-NLS-1$
				throw new IllegalArgumentException(message);
			}
		}
	}

