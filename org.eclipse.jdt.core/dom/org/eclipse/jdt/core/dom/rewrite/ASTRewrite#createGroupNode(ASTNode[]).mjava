	/**
	 * Creates and returns a node that represents a sequence of nodes. 
	 * Users should not make any assumptions on the type of the returned node. The passed
	 * nodes must be either be brand new (not part of the original AST) or a placeholder node (for example, one
     * created by {@link #createCopyTarget(ASTNode)} or {@link #createStringPlaceholder(String, int)});
     * or another group node. 
	 * 
	 * @param targetNodes the node to go in the group
	 * @return the new group placeholder
	 * @throws IllegalArgumentException if the targetNodes is null, or is empty.
	 * @since 3.1
	 */
	public final ASTNode createGroupNode(ASTNode[] targetNodes) {
		if (targetNodes == null || targetNodes.length == 0) {
			throw new IllegalArgumentException();
		}
		Block res= getNodeStore().createCollapsePlaceholder();
		ListRewrite listRewrite= getListRewrite(res, Block.STATEMENTS_PROPERTY);
		for (int i= 0; i < targetNodes.length; i++) {
			listRewrite.insertLast(targetNodes[i], null);
		}
		return res;
	}

