	/**
	 * Marks the node as inserted in the list after a given existing node. The existing node must be in the list, either as an original or as a new
	 * node already marked as inserted.
	 * @param nodeToInsert The node to insert. The inserted node must be a new node. Use placeholder
	 *	nodes to insert a copied or moved node.
	 *	@param nodeBefore The node to be before the node to insert.
	 * @param editGroup Collects the generated text edits. <code>null</code> can be passed
	 * to not collect any edits.
	 * @throws IllegalArgumentException Thrown when the existing node is not a member
	 * of the list (original or new) or when the inserted node is not a new node.
	 */
	public void insertAfter(ASTNode nodeToInsert, ASTNode nodeBefore, TextEditGroup editGroup) {
		int index= getEvent().getIndex(nodeBefore, ListRewriteEvent.BOTH);
		if (index == -1) {
			throw new IllegalArgumentException("Node does not exist"); //$NON-NLS-1$
		}
		insertAt(nodeToInsert, index + 1, editGroup);
	}

