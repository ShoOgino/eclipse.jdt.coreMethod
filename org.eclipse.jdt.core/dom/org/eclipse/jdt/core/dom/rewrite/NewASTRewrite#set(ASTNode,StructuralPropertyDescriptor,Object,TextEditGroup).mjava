	/**
	 * Describes a change of a property  The replacing node must be new or a placeholder or can be
	 * <code>null</code> to remove the property.
	 * @param parent The node's parent node.
	 * @param childProperty The node's child property in the parent. 
	 * @param replacingNode The node that replaces the original node or <code>null</code>
	 * @param editGroup Collects the generated text edits or <code>null</code> if
	 * no edits should be collected.
	 * @throws IllegalArgumentException An <code>IllegalArgumentException</code> is either the parent node is
	 * not inside the rewriters parent, the property is not a node property or the described modification is not
	 * valid (e.g. when removing a required node).
	 */
	public final void set(ASTNode parent, StructuralPropertyDescriptor childProperty, Object replacingNode, TextEditGroup editGroup) {
		validateIsInsideAST(parent);
		NodeRewriteEvent nodeEvent= fEventStore.getNodeEvent(parent, childProperty, true);
		if (replacingNode == null) {
			validatePropertyType(childProperty, replacingNode);
		}
		nodeEvent.setNewValue(replacingNode);
		if (editGroup != null) {
			fEventStore.setEventEditGroup(nodeEvent, editGroup);
		}
	}

