	/**
	 * Marks the given node as replaced. The node must be contained in the list.
	 * @param nodeToReplace The node to be marked as replaced
	 *	@param replacingNode The replacing node. The replacing node must be a new node. Use placeholder
	 *	nodes to replace with a copied or moved node.
	 * @param editGroup Collects the generated text edits. <code>null</code> can be passed
	 * to not collect any edits.
	 * @throws IllegalArgumentException Thrown when the node to replace is not a member
	 * of the original list or when the replacing node is not a new node.
	 */
	public void replace(ASTNode nodeToReplace, ASTNode replacingNode, TextEditGroup editGroup) {
		RewriteEvent event= getEvent().replaceEntry(nodeToReplace, replacingNode);
		if (editGroup != null) {
			getRewriteStore().setEventEditGroup(event, editGroup);
		}
	}

