    /* TODO (david) - For creating placeholders it should be sufficient to have
     * clients supply a concrete ASTNode node type. If they want to insert a name,
     * they are free to specify either ASTNode.SIMPLE_NAME or ASTNode.QUALIFIED_NAME;
     * either would do equally well. As long as the rewriter can tell that its a 
     * placeholder, it should be able to deal with it when the time comes.
     * This allows you to delete the API constants declared on this class.
     */			
	/**
	 * Creates and returns a placeholder node for a source string that is to be inserted into
	 * the output document at the position corresponding to the placeholder.
	 * The string will be inserted without being reformatted beyond correcting
	 * the indentation level. The placeholder node can either be inserted as new or
	 * used to replace an existing node.
	 * 
	 * @param code the string to be inserted; lines should should not have extra indentation
	 * @param nodeType the type of the placeholder; 
	 * valid values are <code>METHOD_DECLARATION</code>,
	 * <code>FIELD_DECLARATION</code>, <code>INITIALIZER</code>,
	 * <code>TYPE_DECLARATION</code>, <code>BLOCK</code>, <code>STATEMENT</code>,
	 *  <code>SINGLEVAR_DECLARATION</code>,<code> VAR_DECLARATION_FRAGMENT</code>,
	 * <code>TYPE</code>, <code>EXPRESSION</code>, <code>NAME</code>
	 * <code>PACKAGE_DECLARATION</code>, <code>IMPORT_DECLARATION</code>
	 * and <code>JAVADOC</code>
	 * @return the new placeholder node
	 * @throws IllegalArgumentException if the code is null, or if the node
	 * type is invalid
	 */
	public final ASTNode createStringPlaceholder(String code, int nodeType) {
		if (code == null) {
			throw new IllegalArgumentException();
		}
		ASTNode placeholder= fNodeStore.newPlaceholderNode(nodeType);
		if (placeholder == null) {
			throw new IllegalArgumentException("String placeholder is not supported for type" + nodeType); //$NON-NLS-1$
		}
		
		fNodeStore.markAsStringPlaceholder(placeholder, code);
		return placeholder;
	}

