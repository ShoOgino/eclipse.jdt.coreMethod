	/*
	 * Compute extended ranges for children of a given node.
	 * Note that previous end for first child is naturally the node starting position
	 * end next start for last child is the first token after the end of the node which
	 * is neither a comment nor white spaces.
	 * 
	 * Compute first leading and trailing comment tables at this let us to optimize
	 * comment look up in the table. As all comments on a same level are ordered
	 * by position, we store the index to start the search from it instead of restarting
	 * each time from the beginning (see in storeLeadingComments and streTrailingComments
	 * methods).
	 */
	private void doExtraRangesForChildren(ASTNode node, Scanner scanner) {
		// Compute node children
		List children= getChildren(node);
		int lastChild= children.size() ;
		
		// Compute last next start and previous end. Next start is the starting position
		// of first token following node end which is neither a comment nor white spaces.
		int lastPos = node.getStartPosition() + node.getLength();
		scanner.resetTo(lastPos, scanner.source.length-1);
		try {
			int token = -1;
			do {
				token = scanner.getNextToken();
			} while (token >= TerminalTokens.TokenNameWHITESPACE && token <= TerminalTokens.TokenNameCOMMENT_JAVADOC);
			lastPos = scanner.getCurrentTokenStartPosition();
		} catch (InvalidInputException e) {
			// do nothing
		}
		int previousEnd = node.getStartPosition();
		
		// Compute leading and trailing comments for all children nodes at this level
		this.commentIndex = 0;
		try {
			for (int i= 0; i < lastChild; i++) {
				ASTNode current = (ASTNode) children.get(i);
				int nextStart = i==(lastChild-1) ? lastPos : ((ASTNode) children.get(i+1)).getStartPosition();
				storeLeadingComments(current, previousEnd,scanner);
				previousEnd = storeTrailingComments(current, nextStart,scanner);
			}
		}
		catch (Exception ex) {
			// Give up extended ranges at this level if unexpected exception happens...
		}
		
		// Compute extended ranges at sub-levels
		for (int i= 0; i < lastChild; i++) {
			doExtraRangesForChildren((ASTNode) children.get(i), scanner);
		}
	}

