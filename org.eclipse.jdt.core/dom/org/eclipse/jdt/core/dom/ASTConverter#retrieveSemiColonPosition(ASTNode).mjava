	/**
	 * This method is used to set the right end position for expression
	 * statement. The actual AST nodes don't include the trailing semicolon.
	 * This method fixes the length of the corresponding node.
	 */
	private void retrieveSemiColonPosition(ASTNode node) {
		int start = node.getStartPosition();
		int length = node.getLength();
		int end = start + length;
		int count = 0;
		scanner.resetTo(end, this.compilationUnitSource.length);
		try {
			int token;
			while ((token = scanner.getNextToken()) != ITerminalSymbols.TokenNameEOF) {
				switch(token) {
					case ITerminalSymbols.TokenNameSEMICOLON:
						if (count == 0) {
							node.setSourceRange(start, scanner.currentPosition - start);
							return;
						}
						break;
					case ITerminalSymbols.TokenNameLBRACE :
						count++;
						break;
					case ITerminalSymbols.TokenNameRBRACE :
						count--;
						break;
					case ITerminalSymbols.TokenNameLPAREN :
						count++;
						break;
					case ITerminalSymbols.TokenNameRPAREN :
						count--;
						break;
					case ITerminalSymbols.TokenNameLBRACKET :
						count++;
						break;
					case ITerminalSymbols.TokenNameRBRACKET :
						count--;
				}
			}
		} catch(InvalidInputException e) {
		}
	}

