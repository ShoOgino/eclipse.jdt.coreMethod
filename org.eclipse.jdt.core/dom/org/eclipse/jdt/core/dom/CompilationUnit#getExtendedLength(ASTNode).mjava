	/**
	 * Returns the extended source length of the given node. Unlike
	 * {@link ASTNode#getStartPosition()} and {@link ASTNode#getLength()()},
	 * the extended source range may include comments and whitespace
	 * immediately before or after the normal source range for the node.
	 * 
	 * @param node the node
	 * @return a (possibly 0) length, or <code>0</code>
	 *    if no source position information is recorded for this node
	 * @see #getExtendedStartPosition(ASTNode)
	 * @since 3.0
	 */
	public int getExtendedLength(ASTNode node) {
		/* TODO (frederic) - Clients can be expected to make use of this
		 * new facility a lot. The performance of the implementation would
		 * be significantly improved by reworking this code so that it
		 * does not create garbage Comment[].
		 */
		Comment[] trailingComments = this.commentMapper.getTrailingComments(node);
		int lastPosition; // exclusive
		if (trailingComments == null) {
			lastPosition = node.getStartPosition() + node.getLength();
		} else {
			Comment lastComment = trailingComments[trailingComments.length-1];
			lastPosition = lastComment.getStartPosition() + lastComment.getLength();
		}
		return lastPosition - getExtendedStartPosition(node);
	}

