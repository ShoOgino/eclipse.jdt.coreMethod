	private String getNonRecursiveKey(IMethodBinding methodBinding) {
		StringBuffer buffer = new StringBuffer();
		buffer.append(methodBinding.getDeclaringClass().getQualifiedName().replace('.', '/'));
		buffer.append('/');
		ITypeBinding _returnType = methodBinding.getReturnType();
		if (_returnType != null) {
			buffer.append(_returnType.getQualifiedName().replace('.', '/'));
			if (_returnType.isArray()) {
				int dimensions = _returnType.getDimensions();
				for (int i = 0; i < dimensions; i++) {
					buffer.append('[').append(']');
				}
			}
		}
		if (!methodBinding.isConstructor()) {
			buffer.append(methodBinding.getName());
		}
		ITypeBinding[] parameters = methodBinding.getParameterTypes();
		buffer.append('(');
		for (int i = 0, max = parameters.length; i < max; i++) {
			final ITypeBinding parameter = parameters[i];
			if (parameter != null) {
				buffer.append(parameter.getQualifiedName().replace('.', '/'));
			 	if (parameter.isArray()) {
					int dimensions = parameter.getDimensions();
					for (int j = 0; j < dimensions; j++) {
						buffer.append('[').append(']');
					}
			 	}
			}
		}
		buffer.append(')');
		ITypeBinding[] thrownExceptions = methodBinding.getExceptionTypes();
		for (int i = 0, max = thrownExceptions.length; i < max; i++) {
			final ITypeBinding thrownException = thrownExceptions[i];
			if (thrownException != null) {
				buffer.append(thrownException.getQualifiedName().replace('.', '/'));					
				if (thrownException.isArray()) {
					int dimensions = thrownException.getDimensions();
					for (int j = 0; j < dimensions; j++) {
						buffer.append('[').append(']');
					}
				}
			}
		}
		return String.valueOf(buffer);
	}

