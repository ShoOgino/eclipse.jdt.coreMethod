	public Expression convert(org.eclipse.jdt.internal.compiler.ast.Expression expression) {
		// switch between all types of expression
		if (expression instanceof ArrayAllocationExpression) {
			return convert((ArrayAllocationExpression) expression);
		}
		if (expression instanceof QualifiedAllocationExpression) {
			return convert((QualifiedAllocationExpression) expression);
		}
		if (expression instanceof AllocationExpression) {
			return convert((AllocationExpression) expression);
		}
		if (expression instanceof org.eclipse.jdt.internal.compiler.ast.ArrayInitializer) {
			return convert((org.eclipse.jdt.internal.compiler.ast.ArrayInitializer) expression);
		}
		if (expression instanceof org.eclipse.jdt.internal.compiler.ast.PrefixExpression) {
			return convert((org.eclipse.jdt.internal.compiler.ast.PrefixExpression) expression);
		}
		if (expression instanceof org.eclipse.jdt.internal.compiler.ast.PostfixExpression) {
			return convert((org.eclipse.jdt.internal.compiler.ast.PostfixExpression) expression);
		}
		if (expression instanceof CompoundAssignment) {
			return convert((CompoundAssignment) expression);
		}
		if (expression instanceof org.eclipse.jdt.internal.compiler.ast.Assignment) {
			return convert((org.eclipse.jdt.internal.compiler.ast.Assignment) expression);
		}
		if (expression instanceof org.eclipse.jdt.internal.compiler.ast.CastExpression) {
			return convert((org.eclipse.jdt.internal.compiler.ast.CastExpression) expression);
		}
		if (expression instanceof ClassLiteralAccess) {
			return convert((ClassLiteralAccess) expression);
		}
		if (expression instanceof FalseLiteral) {
			return convert((FalseLiteral) expression);
		}
		if (expression instanceof TrueLiteral) {
			return convert((TrueLiteral) expression);
		}
		if (expression instanceof org.eclipse.jdt.internal.compiler.ast.NullLiteral) {
			return convert((org.eclipse.jdt.internal.compiler.ast.NullLiteral) expression);
		}
		if (expression instanceof CharLiteral) {
			return convert((CharLiteral) expression);
		}
		if (expression instanceof DoubleLiteral) {
			return convert((DoubleLiteral) expression);
		}
		if (expression instanceof FloatLiteral) {
			return convert((FloatLiteral) expression);
		}
		if (expression instanceof IntLiteralMinValue) {
			return convert((IntLiteralMinValue) expression);
		}
		if (expression instanceof IntLiteral) {
			return convert((IntLiteral) expression);
		}
		if (expression instanceof LongLiteralMinValue) {
			return convert((LongLiteralMinValue) expression);
		}				
		if (expression instanceof LongLiteral) {
			return convert((LongLiteral) expression);
		}
		if (expression instanceof org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral) {
			return convert((ExtendedStringLiteral) expression);
		}	
		if (expression instanceof org.eclipse.jdt.internal.compiler.ast.StringLiteral) {
			return convert((org.eclipse.jdt.internal.compiler.ast.StringLiteral) expression);
		}				
		if (expression instanceof AND_AND_Expression) {
			return convert((AND_AND_Expression) expression);
		}				
		if (expression instanceof OR_OR_Expression) {
			return convert((OR_OR_Expression) expression);
		}				
		if (expression instanceof EqualExpression) {
			return convert((EqualExpression) expression);
		}				
		if (expression instanceof BinaryExpression) {
			return convert((BinaryExpression) expression);
		}				
		if (expression instanceof InstanceOfExpression) {
			return convert((InstanceOfExpression) expression);
		}				
		if (expression instanceof UnaryExpression) {
			return convert((UnaryExpression) expression);
		}				
		if (expression instanceof org.eclipse.jdt.internal.compiler.ast.ConditionalExpression) {
			return convert((org.eclipse.jdt.internal.compiler.ast.ConditionalExpression) expression);
		}				
		if (expression instanceof MessageSend) {
			return convert((MessageSend) expression);
		}				
		if (expression instanceof Reference) {
			return convert((Reference) expression);
		}
		if (expression instanceof TypeReference) {
			return convert((TypeReference) expression);
		}				
		throw new IllegalArgumentException("Not yet implemented: convert(" + expression.getClass() + ")");//$NON-NLS-1$//$NON-NLS-2$
	}

