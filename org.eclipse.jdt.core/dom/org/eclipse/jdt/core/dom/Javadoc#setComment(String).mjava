	/**
	 * Sets or clears the Javadoc comment string. The documentation
	 * string must include the starting and ending comment delimiters,
	 * and any embedded line breaks.
	 * 
	 * @param javadocComment the javadoc comment string
	 * @exception IllegalArgumentException if the Java comment string is invalid
	 */
	public void setComment(String javadocComment) {
		if (javadocComment == null) {
			throw new IllegalArgumentException();
		}
		char[] source = javadocComment.toCharArray();
		IScanner scanner = ToolFactory.createScanner(true, true, false, false);
		scanner.resetTo(0, source.length);
		scanner.setSource(source);
		try {
			int token;
			boolean onlyOneComment = false;
			while ((token = scanner.getNextToken()) != ITerminalSymbols.TokenNameEOF) {
				switch(token) {
					case ITerminalSymbols.TokenNameCOMMENT_JAVADOC :
						if (onlyOneComment) {
							throw new IllegalArgumentException();
						}
						onlyOneComment = true;
						break;
					default:
						onlyOneComment = false;
				}
			}
			if (!onlyOneComment) {
				throw new IllegalArgumentException();
			}
		} catch (InvalidInputException e) {
			throw new IllegalArgumentException();
		}
		modifying();
		this.comment = javadocComment;
	}

