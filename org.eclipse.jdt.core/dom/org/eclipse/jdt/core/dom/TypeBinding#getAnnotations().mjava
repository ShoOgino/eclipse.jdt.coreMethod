	public IAnnotationBinding[] getAnnotations() {
		if (this.annotations != null) {
			return this.annotations;
		}
		org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding refType = null;
		if (this.binding instanceof ParameterizedTypeBinding) {
			refType = ((ParameterizedTypeBinding) this.binding).genericType();
		} else if (this.binding.isAnnotationType() || this.binding.isClass() || this.binding.isEnum() || this.binding.isInterface()) {
			refType = (org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding) this.binding;
		}
		if (refType != null) {
			org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] internalAnnotations = refType.getAnnotations();
			int length = internalAnnotations == null ? 0 : internalAnnotations.length;
			if (length != 0) {
				IAnnotationBinding[] tempAnnotations = new IAnnotationBinding[length];
				int convertedAnnotationCount = 0;
				for (int i = 0; i < length; i++) {
					org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding internalAnnotation = internalAnnotations[i];
					IAnnotationBinding annotationInstance = this.resolver.getAnnotationInstance(internalAnnotation);
					if (annotationInstance == null) {
						continue;
					}
					tempAnnotations[convertedAnnotationCount++] = annotationInstance;
				}
				if (convertedAnnotationCount != length) {
					if (convertedAnnotationCount == 0) {
						return this.annotations = AnnotationBinding.NoAnnotations;
					}
					System.arraycopy(tempAnnotations, 0, (tempAnnotations = new IAnnotationBinding[convertedAnnotationCount]), 0, convertedAnnotationCount);
				}
				return this.annotations = tempAnnotations;
			}
		}
		return this.annotations = AnnotationBinding.NoAnnotations;
	}

