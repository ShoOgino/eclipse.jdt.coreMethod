	/**
	 * Returns the fully qualified name of the type represented by this 
	 * binding if it has one.
	 * <ul>
	 * <li>For top-level types, the fully qualified name is the name of
	 * the type (as computed by {@link #getName()}) preceded by the package
	 * name (or unqualified if in a default package) and a ".".
	 * Example: <code>"java.lang.String"</code>.</li>
	 * <li>For members of top-level types, the fully qualified name is the
	 * simple name of the type preceded by the fully qualified name of the
	 * enclosing type (as computed by this method) and a ".".
	 * Example: <code>"java.io.ObjectInputStream.GetField"</code>.</li>
	 * <li>For primitive types, the fully qualified name is the keyword for
	 * the primitive type.
	 * Example: <code>"int"</code>.</li>
	 * <li>For array types whose component type has a fully qualified name, 
	 * the fully qualified name is the fully qualified name of the component
	 * type (as computed by this method) followed by "[]".
	 * Example: <code>"java.lang.String[]"</code>.</li>
	 * <li>For the null type, the fully qualified name is the string 
	 * "null".</li>
	 * <li>Local types (including anonymous classes) and members of local
	 * types do not have a fully qualified name. For these types, and array
	 * types thereof, this method returns an empty string.</li>
	 * <li>For type variables, the fully qualified name is just the name of the
	 * type variable (type bounds are not included).
	 * Example: <code>"X"</code>.</li>
	 * <li>For raw type references, the fully qualified name is the 
	 * fully qualified name of the type but with the type parameters
	 * omitted.
	 * Example: <code>"java.util.Collection"</code>.</li>
	 * <li>For parameterized type references, the fully qualified name is the 
	 * fully qualified name of the erasure type followed by the fully qualified
	 * names of the type arguments surrounded by "&lt;&gt;" and separated by ",".
	 * Example: <code>"java.util.Collection&lt;java.lang.String&gt;"</code>.
	 * </li>
	 * <li>For wildcard types, the fully qualified name is "?" followed by the
	 * fully qualified name of the bound (as computed by this method) when
	 * present.
	 * Example: <code>"? extends java.lang.Object"</code>.
	 * </li>
	 * </ul>
	 * 
	 * @return the fully qualified name of the type represented by this 
	 *    binding, or the empty string if it has none

	 * @see #getName()
	 * @since 2.1
	 */
	public String getQualifiedName();

