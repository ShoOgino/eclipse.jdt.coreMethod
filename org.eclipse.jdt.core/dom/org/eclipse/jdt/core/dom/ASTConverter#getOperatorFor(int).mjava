	private InfixExpression.Operator getOperatorFor(int operatorID) {
		switch (operatorID) {
			case OperatorIds.EQUAL_EQUAL :
				return InfixExpression.Operator.EQUALS;
			case OperatorIds.LESS_EQUAL :
				return InfixExpression.Operator.LESS_EQUALS;
			case OperatorIds.GREATER_EQUAL :
				return InfixExpression.Operator.GREATER_EQUALS;
			case OperatorIds.NOT_EQUAL :
				return InfixExpression.Operator.NOT_EQUALS;
			case OperatorIds.LEFT_SHIFT :
				return InfixExpression.Operator.LEFT_SHIFT;
			case OperatorIds.RIGHT_SHIFT :
				return InfixExpression.Operator.RIGHT_SHIFT_SIGNED;
			case OperatorIds.UNSIGNED_RIGHT_SHIFT :
				return InfixExpression.Operator.RIGHT_SHIFT_UNSIGNED;
			case OperatorIds.OR_OR :
				return InfixExpression.Operator.CONDITIONAL_OR;
			case OperatorIds.AND_AND :
				return InfixExpression.Operator.CONDITIONAL_AND;
			case OperatorIds.PLUS :
				return InfixExpression.Operator.PLUS;
			case OperatorIds.MINUS :
				return InfixExpression.Operator.MINUS;
			case OperatorIds.REMAINDER :
				return InfixExpression.Operator.REMAINDER;
			case OperatorIds.XOR :
				return InfixExpression.Operator.XOR;
			case OperatorIds.AND :
				return InfixExpression.Operator.AND;
			case OperatorIds.MULTIPLY :
				return InfixExpression.Operator.TIMES;
			case OperatorIds.OR :
				return InfixExpression.Operator.OR;
			case OperatorIds.DIVIDE :
				return InfixExpression.Operator.DIVIDE;
			case OperatorIds.GREATER :
				return InfixExpression.Operator.GREATER;
			case OperatorIds.LESS :
				return InfixExpression.Operator.LESS;
		};
		return null;
	}

