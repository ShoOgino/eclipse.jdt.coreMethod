	/**
	 * Add the initial set of compilation units into the loop
	 *  ->  build compilation unit declarations, their bindings and record their results.
	 */
	protected void beginToCompile(org.eclipse.jdt.internal.compiler.env.ICompilationUnit[] sourceUnits, String[] bindingKeys) {
		int sourceLength = sourceUnits.length;
		int keyLength = bindingKeys.length;
		int maxUnits = sourceLength + keyLength;
		this.totalUnits = 0;
		this.unitsToProcess = new CompilationUnitDeclaration[maxUnits];
		int index = 0;

		// walks the source units
		this.requestedSources = new HashtableOfObject();
		for (int i = 0; i < sourceLength; i++) {
			org.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit = sourceUnits[i];
			CompilationUnitDeclaration parsedUnit;
			CompilationResult unitResult =
				new CompilationResult(sourceUnit, index++, maxUnits, this.options.maxProblemsPerUnit);
			try {
				if (options.verbose) {
					System.out.println(
						Util.bind(
							"compilation.request" , //$NON-NLS-1$
							new String[] {
								String.valueOf(index++ + 1),
								String.valueOf(maxUnits),
								new String(sourceUnit.getFileName())}));
				}
				// diet parsing for large collection of units
				if (this.totalUnits < this.parseThreshold) {
					parsedUnit = this.parser.parse(sourceUnit, unitResult);
				} else {
					parsedUnit = this.parser.dietParse(sourceUnit, unitResult);
				}
				// initial type binding creation
				this.lookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);
				addCompilationUnit(sourceUnit, parsedUnit);
				this.requestedSources.put(unitResult.getFileName(), sourceUnit);
			} finally {
				sourceUnits[i] = null; // no longer hold onto the unit
			}
		}

		// walk the binding keys
		this.requestedKeys = new HashtableOfObject();
		for (int i = 0; i < keyLength; i++) {
			BindingKey bindingKey = new BindingKey(bindingKeys[i], this);
			CompilationUnitDeclaration parsedUnit = bindingKey.getCompilationUnitDeclaration();
			if (parsedUnit != null) {
				this.requestedKeys.put(parsedUnit.compilationResult.getFileName(), bindingKey);
			} else {
				switch (bindingKey.scanner.token) {
					case BindingKeyScanner.PACKAGE:
						// package binding key
						char[] pkgName = CharOperation.concatWith(bindingKey.compoundName(), '.');
						this.requestedKeys.put(pkgName, bindingKey);
						break;
					case BindingKeyScanner.TYPE:
						// base type binding
						char[] key = bindingKey.scanner.source;
						this.requestedKeys.put(key, bindingKey);
						break;
				}
			}
		}
		
		// binding resolution
		lookupEnvironment.completeTypeBindings();
	}

