	public static IBinding[] resolve(
		final IJavaElement[] elements,
		int apiLevel,
		Map compilerOptions,
		IJavaProject javaProject,
		WorkingCopyOwner owner,
		IProgressMonitor monitor) {

		final int length = elements.length;
		final HashMap sourceElementPositions = new HashMap(); // a map from ICompilationUnit to int[] (positions in elements)
		int cuNumber = 0;
		final HashtableOfObjectToInt binaryElementPositions = new HashtableOfObjectToInt(); // a map from String (binding key) to int (position in elements)
		for (int i = 0; i < length; i++) {
			IJavaElement element = elements[i];
			if (!(element instanceof SourceRefElement))
				throw new IllegalStateException(element + " is not part of a compilation unit or class file"); //$NON-NLS-1$
			Object cu = element.getAncestor(IJavaElement.COMPILATION_UNIT);
			if (cu != null) {
				// source member
				IntArrayList intList = (IntArrayList) sourceElementPositions.get(cu);
				if (intList == null) {
					sourceElementPositions.put(cu, intList = new IntArrayList());
					cuNumber++;
				}
				intList.add(i);
			} else {
				// binary member
				try {
					String key = ((BinaryMember) element).getBindingKey();
					binaryElementPositions.put(key, i);
				} catch (JavaModelException e) {
					throw new IllegalArgumentException(element + " does not exist"); //$NON-NLS-1$
				}
			}	
		}
		ICompilationUnit[] cus = new ICompilationUnit[cuNumber];
		sourceElementPositions.keySet().toArray(cus);
		
		int bindingKeyNumber = binaryElementPositions.size();
		String[] bindingKeys = new String[bindingKeyNumber];
		binaryElementPositions.keysToArray(bindingKeys);
		
		class Requestor extends ASTRequestor {
			IBinding[] bindings = new IBinding[length];
			public void acceptAST(ICompilationUnit source, CompilationUnit ast) {
				// TODO (jerome) optimize to visit the AST only once
				IntArrayList intList = (IntArrayList) sourceElementPositions.get(source);
				for (int i = 0; i < intList.length; i++) {
					final int index = intList.list[i];
					SourceRefElement element = (SourceRefElement) elements[index];
					ISourceRange range = null;
					try {
						if (element instanceof IField || (element instanceof IType && ((IType) element).isAnonymous()))
							range = ((IMember) element).getNameRange();
						else
							range = element.getSourceRange();
					} catch (JavaModelException e) {
						throw new IllegalArgumentException(element + " does not exist"); //$NON-NLS-1$
					}
					final int rangeStart = range.getOffset();
					final int rangeLength = range.getLength();
					class DeclarationVisitor extends ASTVisitor {
						public boolean visit(AnnotationTypeDeclaration node) {
							if (found(node))
								bindings[index] = node.resolveBinding();
							return true;
						}
						public boolean visit(AnnotationTypeMemberDeclaration node) {
							if (found(node))
								bindings[index] = node.resolveBinding();
							return true;
						}
						public boolean visit(AnonymousClassDeclaration node) {
							ClassInstanceCreation classInstanceCreation = (ClassInstanceCreation) node.getParent();
							if (found(classInstanceCreation.getType()))
								bindings[index] = node.resolveBinding();
							return true;
						}
						public boolean visit(EnumConstantDeclaration node) {
							if (found(node))
								bindings[index] = node.resolveVariable();
							return true;
						}
						public boolean visit(EnumDeclaration node) {
							if (found(node))
								bindings[index] = node.resolveBinding();
							return true;
						}
						public boolean visit(ImportDeclaration node) {
							if (found(node))
								bindings[index] = node.resolveBinding();
							return true;
						}
						public boolean visit(MethodDeclaration node) {
							if (found(node))
								bindings[index] = node.resolveBinding();
							return true;
						}
						public boolean visit(TypeDeclaration node) {
							if (found(node))
								bindings[index] = node.resolveBinding();
							return true;
						}
						public boolean visit(TypeParameter node) {
							if (found(node))
								bindings[index] = node.resolveBinding();
							return true;
						}
						public boolean visit(VariableDeclarationFragment node) {						
							if (found(node))
								bindings[index] = node.resolveBinding();
							return true;
						}
						protected boolean found(ASTNode node) {
							return node.getStartPosition() == rangeStart && node.getLength() == rangeLength;
						}
					}
					ast.accept(new DeclarationVisitor());
				}
			}
			public void acceptBinding(String bindingKey, IBinding binding) {
				int index = binaryElementPositions.get(bindingKey);
				this.bindings[index] = binding;
			}
		}
		Requestor requestor = new Requestor();
		resolve(cus, bindingKeys, requestor, apiLevel, compilerOptions, javaProject, owner, monitor);
		return requestor.bindings;
	}

