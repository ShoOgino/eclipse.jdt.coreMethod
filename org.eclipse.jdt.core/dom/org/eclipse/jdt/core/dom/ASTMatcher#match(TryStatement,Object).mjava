	/**
	 * Returns whether the given node and the other object match.
	 * <p>
	 * The default implementation provided by this class tests whether the
	 * other object is a node of the same type with structurally isomorphic
	 * child subtrees. Subclasses may override this method as needed.
	 * </p>
	 *
	 * @param node the node
	 * @param other the other object, or <code>null</code>
	 * @return <code>true</code> if the subtree matches, or
	 *   <code>false</code> if they do not match or the other object has a
	 *   different node type or is <code>null</code>
	 */
	public boolean match(TryStatement node, Object other) {
		if (!(other instanceof TryStatement)) {
			return false;
		}
		TryStatement o = (TryStatement) other;
		switch(node.getAST().apiLevel) {
			case AST.JLS2_INTERNAL :
			case AST.JLS3_INTERNAL :
				return (
						safeSubtreeMatch(node.getBody(), o.getBody())
							&& safeSubtreeListMatch(node.catchClauses(), o.catchClauses())
							&& safeSubtreeMatch(node.getFinally(), o.getFinally()));
		}
		return (
			safeSubtreeListMatch(node.resources(), o.resources())
			&& safeSubtreeMatch(node.getBody(), o.getBody())
			&& safeSubtreeListMatch(node.catchClauses(), o.catchClauses())
			&& safeSubtreeMatch(node.getFinally(), o.getFinally()));
	}

