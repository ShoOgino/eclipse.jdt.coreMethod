	// field is an enum constant
	public EnumConstantDeclaration convert(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration enumConstant) {
		checkCanceled();
		EnumConstantDeclaration enumConstantDeclaration = this.ast.newEnumConstantDeclaration();
		SimpleName typeName = this.ast.newSimpleName(new String(enumConstant.name));
		typeName.setSourceRange(enumConstant.sourceStart, enumConstant.sourceEnd - enumConstant.sourceStart + 1);
		enumConstantDeclaration.setName(typeName);
		int declarationSourceStart = enumConstant.declarationSourceStart;
		int declarationSourceEnd = enumConstant.declarationSourceEnd;
		if (enumConstant.initialization instanceof QualifiedAllocationExpression) {
			org.eclipse.jdt.internal.compiler.ast.TypeDeclaration anonymousType = ((QualifiedAllocationExpression) enumConstant.initialization).anonymousType;
			if (anonymousType != null) {
				int closingPosition = anonymousType.declarationSourceEnd;
				enumConstantDeclaration.setSourceRange(declarationSourceStart, closingPosition - declarationSourceStart + 1);
				buildBodyDeclarations(anonymousType, enumConstantDeclaration);
			}
		} else {
			enumConstantDeclaration.setSourceRange(declarationSourceStart, declarationSourceEnd - declarationSourceStart + 1);
		}
		final org.eclipse.jdt.internal.compiler.ast.Expression[] arguments = ((org.eclipse.jdt.internal.compiler.ast.AllocationExpression) enumConstant.initialization).arguments;
		if (arguments != null) {
			for (int i = 0, max = arguments.length; i < max; i++) {
				enumConstantDeclaration.arguments().add(convert(arguments[i]));
			}
		}
		if (this.resolveBindings) {
			recordNodes(enumConstantDeclaration, enumConstant);
			recordNodes(typeName, enumConstant);
			enumConstantDeclaration.resolveVariable();
		}
		return enumConstantDeclaration;
	}

