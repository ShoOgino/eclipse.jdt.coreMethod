	/**
	 * Creates an unparented node owned by this AST.
	 * 
	 * @param nodeClass AST node class
	 * @return a new unparented node
	 * @exception RuntimeException if unsuccessful for any reason
	 * @since 3.0
	 * TBD (jeem) - make public when fully implemented (requires 1-arg constructors on all concrete node type)
	 */
	ASTNode createInstance(Class nodeClass) {
		if (nodeClass == null) {
			throw new IllegalArgumentException();
		}
		try {
			// invoke constructor with signature Foo(AST)
			Constructor c = nodeClass.getConstructor(AST_CLASS);
			Object result = c.newInstance(THIS_AST);
			return (ASTNode) result;
		} catch (NoSuchMethodException e) {
			throw new RuntimeException("Unable to create instance", e); //$NON-NLS-1$
		} catch (InstantiationException e) {
			throw new RuntimeException("Unable to create instance", e); //$NON-NLS-1$
		} catch (IllegalAccessException e) {
			throw new RuntimeException("Unable to create instance", e); //$NON-NLS-1$
		} catch (InvocationTargetException e) {
			throw new RuntimeException("Unable to create instance", e); //$NON-NLS-1$
		}		
	}

