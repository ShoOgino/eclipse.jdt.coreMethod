	/**
	 * Sets the token of this number literal node. The value is the sequence
	 * of characters that would appear in the source program.
	 * 
	 * @param token the numeric literal token
	 * @exception IllegalArgumentException if the argument is incorrect
	 */ 
	public void setToken(String token) {
		if (token == null || token.length() == 0) {
			throw new IllegalArgumentException();
		}
		Scanner scanner = getAST().scanner;
		char[] source = token.toCharArray();
		scanner.setSource(source);
		scanner.resetTo(0, source.length);
		try {
			int tokenType = scanner.getNextToken();
			switch(tokenType) {
				case Scanner.TokenNameDoubleLiteral:
				case Scanner.TokenNameIntegerLiteral:
				case Scanner.TokenNameFloatingPointLiteral:
				case Scanner.TokenNameLongLiteral:
					break;
				case Scanner.TokenNameMINUS :
					tokenType = scanner.getNextToken();
					switch(tokenType) {
						case Scanner.TokenNameDoubleLiteral:
						case Scanner.TokenNameIntegerLiteral:
						case Scanner.TokenNameFloatingPointLiteral:
						case Scanner.TokenNameLongLiteral:
							break;
						default:
							throw new IllegalArgumentException();
					}
					break;		
				default:
					throw new IllegalArgumentException();
			}
		} catch(InvalidInputException e) {
			throw new IllegalArgumentException();
		}
		modifying();
		this.tokenValue = token;
	}

