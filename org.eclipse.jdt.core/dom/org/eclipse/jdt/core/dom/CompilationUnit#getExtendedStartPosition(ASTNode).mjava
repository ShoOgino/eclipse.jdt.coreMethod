	/**
	 * Returns the extended start position of the given node. Unlike
	 * {@link ASTNode#getStartPosition()} and {@link ASTNode#getLength()()},
	 * the extended source range may include comments and whitespace
	 * immediately before or after the normal source range for the node.
	 * 
	 * @param node the node
	 * @return the 0-based character index, or <code>-1</code>
	 *    if no source position information is recorded for this node
	 * @see #getExtendedLength(ASTNode)
	 * @since 3.0
	 */
	public int getExtendedStartPosition(ASTNode node) {
		/* TODO (frederic) - Clients can be expected to make use of this
		 * new facility a lot. The performance of the implementation would
		 * be significantly improved by reworking this code so that it
		 * does not create garbage Comment[].
		 *
		Comment[] leadingComments = this.commentMapper.getLeadingComments(node);
		int startPosition;
		if (leadingComments == null) {
			startPosition = node.getStartPosition();
		} else {
			startPosition = leadingComments[0].getStartPosition();
		}
		return startPosition;
		*/
		return this.commentMapper.getExtendedStartPosition(node);
	}

