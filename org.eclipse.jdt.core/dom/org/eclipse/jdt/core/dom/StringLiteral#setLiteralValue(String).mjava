	/**
	 * Sets the value of this literal node. 
	 * <p>
	 * For example,
	 * <code>
	 * <pre>
	 * StringLiteral s;
	 * s.setLiteralValue("hello\nworld");
	 * assert s.getEscapedValue("\"hello\\nworld\"");
	 * assert s.getLiteralValue().equals("hello\nworld");
	 * </pre>
	 * </p>
	 * <p>
	 * Note that this is a convenience method that converts to the stored 
	 * string literal token acceptable to <code>setEscapedLiteral</code>.
	 * </p>
	 * 
	 * @param literal the string value without enclosing double quotes and 
	 *    embedded escapes
	 * @exception $precondition-violation:invalid-argument$
	 */
	public void setLiteralValue(String value) {
		if (value == null) {
			throw new IllegalArgumentException();
		}
		int len = value.length();
		StringBuffer b = new StringBuffer(len + 2);
		
		b.append("\""); // opening delimiter
		for (int i = 0; i < len; i++) {
			char c = value.charAt(i);
			switch(c) {
				case '\b' :
					b.append("\\b");
					break;
				case '\t' :
					b.append("\\t");
					break;
				case '\n' :
					b.append("\\n");
					break;
				case '\f' :
					b.append("\\f");
					break;
				case '\r' :
					b.append("\\r");
					break;
				case '\"':
					b.append("\\\"");
					break;
				case '\'':
					b.append("\\\'");
					break;
				case '\\':
					b.append("\\\\");
					break;
				case '\0' :
					b.append("\\0");
					break;
				case '\1' :
					b.append("\\1");
					break;
				case '\2' :
					b.append("\\2");
					break;
				case '\3' :
					b.append("\\3");
					break;
				case '\4' :
					b.append("\\4");
					break;
				case '\5' :
					b.append("\\5");
					break;
				case '\6' :
					b.append("\\6");
					break;
				case '\7' :
					b.append("\\7");
					break;			
				default:
					b.append(c);
			}
		}
		b.append("\""); // closing delimiter
		setEscapedValue(b.toString());
	}

