	/**
	 * Sets the value of this literal node. 
	 * <p>
	 * For example,
	 * <code>
	 * <pre>
	 * StringLiteral s;
	 * s.setLiteralValue("hello\nworld");
	 * assert s.getEscapedValue("\"hello\\nworld\"");
	 * assert s.getLiteralValue().equals("hello\nworld");
	 * </pre>
	 * </p>
	 * <p>
	 * Note that this is a convenience method that converts to the stored 
	 * string literal token acceptable to <code>setEscapedLiteral</code>.
	 * </p>
	 * 
	 * @param literal the string value without enclosing double quotes and 
	 *    embedded escapes
	 * @exception $precondition-violation:invalid-argument$
	 */
	public void setLiteralValue(String value) {
		if (value == null) {
			throw new IllegalArgumentException();
		}
		int len = value.length();
		StringBuffer b = new StringBuffer(len + 2);
		
		// FIXME - this does not do Unicode escaping
		b.append('\"'); // opening delimiter
		for (int i = 0; i < len; i++) {
			char c = value.charAt(i);
			int p = SPECIALS.indexOf(c);
			if (p >= 0) {
				b.append('\\');
				b.append(QUOTED_SPECIALS.charAt(p));
			} else {
				b.append(c);
			}
		}
		b.append('\"'); // closing delimiter
		setEscapedValue(b.toString());
	}

