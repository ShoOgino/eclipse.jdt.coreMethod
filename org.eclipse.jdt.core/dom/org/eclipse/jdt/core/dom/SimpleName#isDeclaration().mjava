	/**
	 * Returns whether this simple name represents a name that is being defined,
	 * as opposed to one being referenced. The following positions are considered
	 * ones where a name is defined:
	 * <ul>
	 * <li>The type name in a <code>TypeDeclaration</code> node.</li>
	 * <li>The method name in a <code>MethodDeclaration</code> node
	 * providing <code>isConstructor</code> is <code>false</code>.</li>
	 * <li>The variable name in any type of <code>VariableDeclaration</code>
	 * node.</li>
	 * <li>The enum type name in a <code>EnumDeclaration</code> node.</li>
	 * <li>The enum constant name in an <code>EnumConstantDeclaration</code>
	 * node.</li>
	 * <li>The variable name in an <code>EnhancedForStatement</code>
	 * node.</li>
	 * <li>The type variable name in a <code>TypeParameter</code>
	 * node.</li>
	 * <li>The type name in an <code>AnnotationTypeDeclaration</code> node.</li>
	 * <li>The member name in an <code>AnnotationTypeMemberDeclaration</code> node.</li>
	 * </ul>
	 * <p>
	 * Note that this is a convenience method that simply checks whether
	 * this node appears in the declaration position relative to its parent.
	 * It always returns <code>false</code> if this node is unparented.
	 * </p>
	 * 
	 * @return <code>true</code> if this node declares a name, and 
	 *    <code>false</code> otherwise
	 */ 
	public boolean isDeclaration() {
		ASTNode parent = getParent();
		if (parent == null) {
			// unparented node
			return false;
		}
		if (parent instanceof TypeDeclaration) {
			// could only be the name of the type
			return true;
		}
		if (parent instanceof MethodDeclaration) {
			// could be the name of the method or constructor
			MethodDeclaration p = (MethodDeclaration) parent;
			return !p.isConstructor();
		}
		if (parent instanceof SingleVariableDeclaration) {
			SingleVariableDeclaration p = (SingleVariableDeclaration) parent;
			// make sure its the name of the variable (not the initializer)
			return (p.getName() == this);
		}
		if (parent instanceof VariableDeclarationFragment) {
			VariableDeclarationFragment p = (VariableDeclarationFragment) parent;
			// make sure its the name of the variable (not the initializer)
			return (p.getName() == this);
		}
		if (parent instanceof EnumDeclaration) {
			// could only be the name of the enum type
			return true;
		}
		if (parent instanceof EnumConstantDeclaration) {
			// could only be the name of the enum constant
			return true;
		}
		if (parent instanceof EnhancedForStatement) {
			EnhancedForStatement p = (EnhancedForStatement) parent;
			// make sure its the name of the loop variable (not the initializer)
			return (p.getName() == this);
		}
		if (parent instanceof TypeParameter) {
			// could only be the type variable name
			return true;
		}
		if (parent instanceof AnnotationTypeDeclaration) {
			// could only be the name of the annotation type
			return true;
		}
		if (parent instanceof AnnotationTypeMemberDeclaration) {
			AnnotationTypeMemberDeclaration p = (AnnotationTypeMemberDeclaration) parent;
			// make sure its the name of the member (not the default)
			return (p.getName() == this);
		}
		return false;
	}

