	/* (non-Javadoc)
	 * @see org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#createArgumentReference(char[], java.lang.Object, int)
	 */
	protected Object createArgumentReference(char[] name, int dim, Object typeRef, long dimPos, long argNamePos) throws InvalidInputException {
		try {
			MethodRefParameter argument = this.ast.newMethodRefParameter();
			ASTNode node = (ASTNode) typeRef;
			int argStart = node.getStartPosition();
			int argEnd = node.getStartPosition()+node.getLength()-1;
			if (dimPos >= 0) argEnd = (int) dimPos;
			if (argNamePos >= 0) argEnd = (int) argNamePos;
			if (name.length != 0) {
				SimpleName argName = this.ast.newSimpleName(new String(name));
				argument.setName(argName);
				int argNameStart = (int) (argNamePos >>> 32);
				argName.setSourceRange(argNameStart, argEnd-argNameStart+1);
			}
			Type argType = null;
			if (node.getNodeType() == ASTNode.PRIMITIVE_TYPE) {
				argType = (PrimitiveType) node;
				if (dim > 0) {
					argType = this.ast.newArrayType(argType, dim);
					argType.setSourceRange(argStart, ((int) dimPos)-argStart+1);
				}
			} else {
				Name argTypeName = (Name) node;
				argType = this.ast.newSimpleType(argTypeName);
				if (dim > 0) {
					argType = this.ast.newArrayType(argType, dim);
					argType.setSourceRange(argStart, ((int) dimPos)-argStart+1);
				} else {
					argType.setSourceRange(argStart, node.getLength());
				}
			}
			argument.setType(argType);
			argument.setSourceRange(argStart, argEnd - argStart + 1);
			return argument;
		}
		catch (ClassCastException ex) {
				throw new InvalidInputException();
		}
	}

