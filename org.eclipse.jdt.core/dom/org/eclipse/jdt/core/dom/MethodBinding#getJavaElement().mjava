	public IJavaElement getJavaElement() {
		IType declaringType = (IType) getDeclaringClass().getJavaElement();
		if (declaringType == null) return null;
		if (!(this.resolver instanceof DefaultBindingResolver)) return null;
		MethodDeclaration methodDeclaration = (MethodDeclaration) ((DefaultBindingResolver) this.resolver).bindingsToAstNodes.get(this);
		if (methodDeclaration != null) {
			ArrayList parameterSignatures = new ArrayList();
			Iterator iterator = methodDeclaration.parameters().iterator();
			while (iterator.hasNext()) {
				SingleVariableDeclaration parameter = (SingleVariableDeclaration) iterator.next();
				Type type = parameter.getType();
				parameterSignatures.add(getSignature(type));
			}
			int parameterCount = parameterSignatures.size();
			String[] parameters = new String[parameterCount];
			parameterSignatures.toArray(parameters);
			return declaringType.getMethod(getName(), parameters);
		} else {
			// case of method not in the created AST
			String selector = getName();
			org.eclipse.jdt.internal.compiler.lookup.MethodBinding original = this.binding.original();
			char[] methodSignature = original.genericSignature();
			if (methodSignature == null)
				methodSignature = original.signature();
			methodSignature = CharOperation.replaceOnCopy(methodSignature, '/', '.');
			char[][] parameterSignatures = Signature.getParameterTypes(methodSignature);
			String[] parameters = CharOperation.toStrings(parameterSignatures);
			IMethod result = declaringType.getMethod(selector, parameters);
			if (declaringType.isBinary())
				return result;
			IMethod[] methods = null;
			try {
				methods = declaringType.getMethods();
			} catch (JavaModelException e) {
				// declaring type doesn't exist
				return null;
			}
			IMethod[] candidates = Member.findMethods(result, methods);
			if (candidates == null || candidates.length == 0)
				return null;
			return candidates[0];
		}
	}

