	/**
	 * Returns a deep copy of the subtree of AST nodes rooted at this node.
	 * The resulting nodes are owned by the given AST, which may be different
	 * from the AST of this node. Even if this node has a parent, the
	 * result node will be unparented.
	 * <p>
	 * This method must be implemented in subclasses.
	 * </p>
	 * <p>
	 * General template for implementation on each concrete ASTNode class:
	 * <pre>
	 * <code>
	 * ConcreteNodeType result = new ConcreteNodeType(target);
	 * result.setSourceRange(getStartPosition(), getLength());
	 * result.setChildProperty(
	 *         (ChildPropertyType) ASTNode.copySubtree(target, getChildProperty()));
	 * result.setSimpleProperty(isSimpleProperty());
	 * result.childrenProperty().addAll(
	 *         ASTNode.copySubtrees(target, childrenProperty()));
	 * return result;
	 * </code>
	 * </pre>
	 * </p>
	 * <p>
	 * This method does not report pre- and post-clone events.
	 * All callers should instead call <code>clone(AST)</code>
	 * to ensure that pre- and post-clone events are reported.
	 * </p>
	 * <p>
	 * N.B. This method is package-private, so that the implementations
	 * of this method in each of the concrete AST node types do not
	 * clutter up the API doc.
	 * </p>
	 *
	 * @param target the AST that is to own the nodes in the result
	 * @return the root node of the copies subtree
	 */
	abstract ASTNode clone0(AST target);

