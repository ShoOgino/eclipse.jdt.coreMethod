	/**
	 * Returns the value of this literal node. 
	 * <p>
	 * For example,
	 * <code>
	 * <pre>
	 * StringLiteral s;
	 * s.setEscapedValue("\"hello\\nworld\"");
	 * assert s.getLiteralValue().equals("hello\nworld");
	 * </pre>
	 * </p>
	 * <p>
	 * Note that this is a convenience method that converts from the stored 
	 * string literal token returned by <code>getEscapedLiteral</code>.
	 * </p>
	 * 
	 * @return the string value without enclosing double quotes and embedded
	 *    escapes
	 * @exception IllegalArgumentException if the literal value cannot be converted
	 */ 
	public String getLiteralValue() {
		String s = getEscapedValue();
		int len = s.length();
		if (len < 2 || s.charAt(0) != '\"' || s.charAt(len-1) != '\"' ) {
			throw new IllegalArgumentException();
		}
		StringBuffer b = new StringBuffer(len - 2);
		for (int i = 1; i< len - 1; i++) {
			char c = s.charAt(i);
			if (c == '\"') {
				throw new IllegalArgumentException();
			}
			if (c == '\\') {
				// legal: b, t, n, f, r, ", ', \, 0, 1, 2, 3, 4, 5, 6, or 7
				char nextChar;
				if ((i + 1) < len - 1) {
					nextChar = s.charAt(i + 1);
					i++;
					switch(nextChar) {
						case 'b' :
							b.append('\b');
							break;
						case 't' :
							b.append('\t');
							break;
						case 'n' :
							b.append('\n');
							break;
						case 'f' :
							b.append('\f');
							break;
						case 'r' :
							b.append('\r');
							break;
						case '\"':
							b.append('\"');
							break;
						case '\'':
							b.append('\'');
							break;
						case '\\':
							b.append('\\');
							break;
						case '0' :
							b.append('\0');
							break;
						case '1' :
							b.append('\1');
							break;
						case '2' :
							b.append('\2');
							break;
						case '3' :
							b.append('\3');
							break;
						case '4' :
							b.append('\4');
							break;
						case '5' :
							b.append('\5');
							break;
						case '6' :
							b.append('\6');
							break;
						case '7' :
							b.append('\7');
							break;
						case 'u' :
							//handle the case of unicode.
							int currentPosition = i + 1;
							int c1 = 0, c2 = 0, c3 = 0, c4 = 0;
							if ((c1 = Character.getNumericValue(s.charAt(currentPosition++))) > 15
								|| c1 < 0
								|| (c2 = Character.getNumericValue(s.charAt(currentPosition++))) > 15
								|| c2 < 0
								|| (c3 = Character.getNumericValue(s.charAt(currentPosition++))) > 15
								|| c3 < 0
								|| (c4 = Character.getNumericValue(s.charAt(currentPosition++))) > 15
								|| c4 < 0){
								throw new IllegalArgumentException("Invalid string literal"); //$NON-NLS-1$
							} else {
								b.append((char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4));
								i = currentPosition - 1;
							}
							break;
						default:
							throw new IllegalArgumentException("Invalid string literal");//$NON-NLS-1$
					}
				} else {
					throw new IllegalArgumentException("Invalid string literal");//$NON-NLS-1$
				}
			} else {
				b.append(c);
			}
		}
		return b.toString();			
	}

