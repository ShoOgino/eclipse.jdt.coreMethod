	/**
	 * Parses the given string as a Java compilation unit and creates and 
	 * returns a corresponding abstract syntax tree.
	 * <p>
	 * The returned compilation unit node is the root node of a new AST.
	 * Each node in the subtree carries source range(s) information relating back
	 * to positions in the given source string (the given source string itself
	 * is not remembered with the AST). If a syntax error is detected while
	 * parsing, the relevant node(s) of the tree will be flagged as 
	 * <code>MALFORMED</code>.
	 * </p>
	 * 
	 * @param source the string to be parsed as a Java compilation unit
	 * @see ASTNode#getFlags
	 * @see ASTNode#MALFORMED
	 * @see ASTNode#getStartPosition
	 * @see ASTNode#getLength
	 */
	public static CompilationUnit parseCompilationUnit(char[] source) {
		CompilationUnitDeclaration compilationUnitDeclaration = 
			CompilationUnitResolver.parse(source);

		ASTConverter converter = new ASTConverter(false);
		CompilationUnit cu = converter.convert(compilationUnitDeclaration, source);
		
		// line end table should be extracted from scanner
		cu.setLineEndTable(compilationUnitDeclaration.compilationResult.lineSeparatorPositions);
		return cu;
	}

