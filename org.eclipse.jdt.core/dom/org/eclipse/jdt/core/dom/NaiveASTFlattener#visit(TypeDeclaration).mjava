	/*
	 * @see ASTVisitor#visit(TypeDeclaration)
	 */
	public boolean visit(TypeDeclaration node) {
		if (node.getJavadoc() != null) {
			node.getJavadoc().accept(this);
		}
		printModifiers(node.getModifiers());
		buffer.append(node.isInterface() ? "interface " : "class ");//$NON-NLS-2$//$NON-NLS-1$
		node.getName().accept(this);
		buffer.append(" ");//$NON-NLS-1$
		if (node.getSuperclass() != null) {
			buffer.append("extends ");//$NON-NLS-1$
			node.getSuperclass().accept(this);
			buffer.append(" ");//$NON-NLS-1$
		}
		if (!node.superInterfaces().isEmpty()) {
			buffer.append(node.isInterface() ? "extends " : "implements ");//$NON-NLS-2$//$NON-NLS-1$
			for (Iterator it = node.superInterfaces().iterator(); it.hasNext(); ) {
				Name n = (Name) it.next();
				n.accept(this);
				if (it.hasNext()) {
					buffer.append(", ");//$NON-NLS-1$
				}
			}
			buffer.append(" ");//$NON-NLS-1$
		}
		buffer.append("{");//$NON-NLS-1$
		for (Iterator it = node.bodyDeclarations().iterator(); it.hasNext(); ) {
			BodyDeclaration d = (BodyDeclaration) it.next();
			d.accept(this);
		}
		buffer.append("}");//$NON-NLS-1$
		return false;
	}

