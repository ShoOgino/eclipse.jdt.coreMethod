	/**
	 * @see BindingResolver#resolveName(Name)
	 */
	IBinding resolveName(Name name) {
		// retrieve the old ast node
		if (name.getParent() instanceof PackageDeclaration) {
			PackageDeclaration packageDeclaration = (PackageDeclaration) name.getParent();
			CompilationUnit unit = (CompilationUnit) packageDeclaration.getParent();
			List types = unit.types();
			if (types.size() == 0) {
				return super.resolveName(name);
			}
			TypeDeclaration type = (TypeDeclaration) types.get(0);
			ITypeBinding typeBinding = type.resolveBinding();
			return typeBinding.getPackage();
		}
		if (name.getParent() instanceof ImportDeclaration) {
			return null;
		}
		AstNode node = (AstNode) this.newAstToOldAst.get(name);
		if (node == null) {
			return super.resolveName(name);
		}
		if (node instanceof SingleNameReference) {
			SingleNameReference singleNameReference = (SingleNameReference) node;
			if (singleNameReference.isFieldReference()) {
				return this.getVariableBinding(singleNameReference.fieldBinding());
			} else if (singleNameReference.isTypeReference()) {
				return this.getTypeBinding((ReferenceBinding)singleNameReference.binding);
			} else {
				// this is a variable
				return this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding)singleNameReference.binding);				
			}
		} else if (node instanceof QualifiedNameReference) {
			QualifiedNameReference qualifiedNameReference = (QualifiedNameReference) node;
			if (qualifiedNameReference.isFieldReference()) {
				return this.getVariableBinding(qualifiedNameReference.otherBindings[qualifiedNameReference.otherBindings.length - 1]);
			} else if (qualifiedNameReference.isTypeReference()) {
				this.getTypeBinding((ReferenceBinding)qualifiedNameReference.binding);
			} else {
				// this is a variable
				return this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) qualifiedNameReference.otherBindings[qualifiedNameReference.otherBindings.length - 1]);				
			}
		}
		return super.resolveName(name);
	}

