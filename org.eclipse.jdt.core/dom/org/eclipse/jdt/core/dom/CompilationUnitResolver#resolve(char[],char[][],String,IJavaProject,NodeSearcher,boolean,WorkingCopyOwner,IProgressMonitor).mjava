	public static CompilationUnitDeclaration resolve(
		char[] source,
		char[][] packageName,
		String unitName,
		IJavaProject javaProject,
		NodeSearcher nodeSearcher,
		boolean cleanUp,
		WorkingCopyOwner owner,
		IProgressMonitor monitor)
		throws JavaModelException {
	
		CompilationUnitDeclaration unit = null;
		CancelableNameEnvironment environment = null;
		CancelableProblemFactory problemFactory = null;
		try {
			environment = new CancelableNameEnvironment(((JavaProject)javaProject), owner, monitor);
			problemFactory = new CancelableProblemFactory(monitor);
			CompilationUnitResolver compilationUnitVisitor =
				new CompilationUnitResolver(
					environment,
					getHandlingPolicy(),
					javaProject.getOptions(true),
					getRequestor(),
					problemFactory);

			String encoding = javaProject.getOption(JavaCore.CORE_ENCODING, true);

			if (nodeSearcher != null) {
				unit = 
					compilationUnitVisitor.resolve(
						new BasicCompilationUnit(
							source,
							packageName,
							unitName,
							encoding),
						nodeSearcher,
						true, // method verification
						true, // analyze code
						true); // generate code					
			} else {
				unit = 
					compilationUnitVisitor.resolve(
						new BasicCompilationUnit(
							source,
							packageName,
							unitName,
							encoding),
						true, // method verification
						true, // analyze code
						true); // generate code					
			}
			return unit;
		} finally {
			if (environment != null) {
				environment.monitor = null; // don't hold a reference to this external object
			}
			if (problemFactory != null) {
				problemFactory.monitor = null; // don't hold a reference to this external object
			}
			if (cleanUp && unit != null) {
				unit.cleanUp();
			}
		}
	}

