	/**
	 * Returns the unqualified name of the type represented by this binding
	 * if it has one.
	 * <p>
	 * For named classes, interfaces, enums, and annotation types, this is the
	 * simple name of the type; if the type is parameterized, the name is
	 * followed by the simple names of the type variables surrounded
	 * by "&lt;&gt;" and separated by "," (the type bounds are not included).
	 * For primitive types, the name is the keyword for the primitive type. For
	 * array types, the name is the name of the component type (as computed by
	 * this method) followed by "[]". If this represents an
	 * anonymous class, it returns an empty string (note that it is impossible
	 * to have an array type with an anonymous class as element type). For the
	 * null type, it returns "null".
	 * For type variables, this is the name of the type variable.
	 * For type bindings that correspond to particular instances of a generic
	 * type arising from a parameterized type reference, this is the simple
	 * name of the erasure type followed by the names of the type arguments
	 * (as computed by this method) surrounded by "&lt;&gt;"
	 * and separated by ",".
	 * For type bindings that correspond to particular instances of a generic
	 * type arising from a raw type reference, this is the simple name of the
	 * erasure type.
	 * For wildcard types, this is "?" followed by the name of the bound 
	 * (as computed by this method) when present.
	 * </p>
	 * 
	 * @return the unqualified name of the type represented by this binding,
	 * or the empty string if it has none
	 * @see #getQualifiedName()
	 */
	public String getName();

