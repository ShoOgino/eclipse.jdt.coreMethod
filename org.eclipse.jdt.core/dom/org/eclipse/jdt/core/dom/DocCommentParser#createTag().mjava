	/* (non-Javadoc)
	 * @see org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#createTag()
	 */
	protected void createTag() {
		TagElement tagElement = this.ast.newTagElement();
		int start = this.tagSourceStart;
		String tagName = new String(this.source, start, this.tagSourceEnd-start+1);
		switch (tagName.charAt(0)) {
			case 'a':
				if (tagName.equals(TagElement.TAG_AUTHOR)) {
					tagName = TagElement.TAG_AUTHOR;
				}
				break;
			case 'd':
				if (tagName.equals(TagElement.TAG_DOCROOT)) {
					tagName = TagElement.TAG_DOCROOT;
				}
				break;
			case 'r':
				if (tagName.equals(TagElement.TAG_RETURN)) {
					tagName = TagElement.TAG_RETURN;
				}
				break;
			case 's':
				if (tagName.equals(TagElement.TAG_SERIAL)) {
					tagName = TagElement.TAG_SERIAL;
				} else  if (tagName.equals(TagElement.TAG_SERIALDATA)) {
					tagName = TagElement.TAG_SERIALDATA;
				} else if (tagName.equals(TagElement.TAG_SERIALFIELD)) {
					tagName = TagElement.TAG_SERIALFIELD;
				}
				break;
			case 'v':
				if (tagName.equals(TagElement.TAG_VERSION)) {
					tagName = TagElement.TAG_VERSION;
				}
				break;
		}
		tagElement.setTagName(tagName);
		if (this.inlineTagStarted) {
			start = this.inlineTagStart;
			TagElement previousTag = null;
			if (this.astPtr == -1) {
				previousTag = this.ast.newTagElement();
				previousTag.setSourceRange(start, this.tagSourceEnd-start+1);
				pushOnAstStack(previousTag, true);
			} else {
				previousTag = (TagElement) this.astStack[this.astPtr];
			}
			int previousStart = previousTag.getStartPosition();
			previousTag.fragments().add(tagElement);
			previousTag.setSourceRange(previousStart, this.tagSourceEnd-previousStart+1);
		} else {
			pushOnAstStack(tagElement, true);
		}
		tagElement.setSourceRange(start, this.tagSourceEnd-start+1);
//		return true;
	}

