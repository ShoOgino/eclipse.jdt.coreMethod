	private static Parser createDomParser(ProblemReporter problemReporter) {
		
		return new Parser(problemReporter, false) {
			// old annotation style check which doesn't include all leading comments into declaration
			// for backward compatibility with 2.1 DOM 
			public void checkComment() {

				if (this.currentElement != null && this.scanner.commentPtr >= 0) {
					flushCommentsDefinedPriorTo(endStatementPosition); // discard obsolete comments
				}
				boolean deprecated = false;
				boolean checkDeprecated = false;
				int lastCommentIndex = -1;
			
				//since jdk1.2 look only in the last java doc comment...
				nextComment : for (lastCommentIndex = scanner.commentPtr; lastCommentIndex >= 0; lastCommentIndex--){
					//look for @deprecated into the first javadoc comment preceeding the declaration
					int commentSourceStart = scanner.commentStarts[lastCommentIndex];
					// javadoc only (non javadoc comment have negative end positions.)
					if (modifiersSourceStart != -1 && modifiersSourceStart < commentSourceStart) {
						continue nextComment;
					}
					if (scanner.commentStops[lastCommentIndex] < 0) {
						continue nextComment;
					}
					checkDeprecated = true;
					int commentSourceEnd = scanner.commentStops[lastCommentIndex] - 1; //stop is one over
			
					deprecated =
						this.javadocParser.checkDeprecation(commentSourceStart, commentSourceEnd);
					this.javadoc = this.javadocParser.javadoc;
					break nextComment;
				}
				if (deprecated) {
					checkAndSetModifiers(AccDeprecated);
				}
				// modify the modifier source start to point at the first comment
				if (lastCommentIndex >= 0 && checkDeprecated) {
					modifiersSourceStart = scanner.commentStarts[lastCommentIndex]; 
				}

			}
		};
	}

