	/**
	 * Requests that the compiler should provide binding information for
	 * the AST nodes it creates.
	 * <p>
	 * Defaults to <code>false</code> (no bindings).
	 * </p>
	 * <p>
	 * If {@link #setResolveBindings(boolean) setResolveBindings(true)}, the various names
	 * and types appearing in the AST can be resolved to "bindings"
	 * by calling the <code>resolveBinding</code> methods. These bindings
	 * draw connections between the different parts of a program, and
	 * generally afford a more powerful vantage point for clients who wish to
	 * analyze a program's structure more deeply. These bindings come at a
	 * considerable cost in both time and space, however, and should not be
	 * requested frivolously. The additional space is not reclaimed until the
	 * AST, all its nodes, and all its bindings become garbage. So it is very
	 * important to not retain any of these objects longer than absolutely
	 * necessary. Bindings are resolved at the time the AST is created. Subsequent
	 * modifications to the AST do not affect the bindings returned by
	 * <code>resolveBinding</code> methods in any way; these methods return the
	 * same binding as before the AST was modified (including modifications
	 * that rearrange subtrees by reparenting nodes).
	 * If {@link #setResolveBindings(boolean) setResolveBindings(false)}, (the default), the analysis
	 * does not go beyond parsing and building the tree, and all
	 * <code>resolveBinding</code> methods return <code>null</code> from the outset.
	 * </p>
	 * <p>
	 * When bindings are requested, instead of considering compilation units on disk only,
	 * one can also supply a <code>WorkingCopyOwner</code>. Working copies owned
	 * by this owner take precedence over the underlying compilation units when looking
	 * up names and drawing the connections.
	 * </p>
	 * <p>Note that working copy owners are used only if the <code>org.eclipse.jdt.core</code>
	 * bundle is initialized.</p>
	 * <p>
	 * Binding information is obtained from the Java model.
	 * This means that the compilation unit must be located relative to the
	 * Java model. This happens automatically when the source code comes from
	 * either {@link #setSource(ICompilationUnit) setSource(ICompilationUnit)}
	 * or {@link #setSource(IClassFile) setSource(IClassFile)}.
	 * When source is supplied by {@link #setSource(char[]) setSource(char[])},
	 * the location must be established explicitly by setting an environment using
	 * {@link #setProject(IJavaProject)} or {@link #setEnvironment(String[], String[], String[], boolean)}
	 * and a unit name {@link #setUnitName(String)}.
	 * Note that the compiler options that affect doc comment checking may also
	 * affect whether any bindings are resolved for nodes within doc comments.
	 * </p>
	 *
	 * @param enabled <code>true</code> if bindings are wanted,
	 *   and <code>false</code> if bindings are not of interest
	 */
	public void setResolveBindings(boolean enabled) {
		if (enabled) {
			this.bits |= CompilationUnitResolver.RESOLVE_BINDING;
		} else {
			this.bits &= ~CompilationUnitResolver.RESOLVE_BINDING;
		}
	}

