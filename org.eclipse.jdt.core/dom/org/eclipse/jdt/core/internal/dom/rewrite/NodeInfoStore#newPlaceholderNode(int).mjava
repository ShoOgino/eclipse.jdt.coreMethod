	/**
	 * Creates a placeholder node of the given type. <code>null</code> if the type is not supported
	 * @param nodeType Type of the node to create. Use the type constants in {@link NodeInfoStore}.
	 * @return Returns a place holder node.
	 */
	public final ASTNode newPlaceholderNode(int nodeType) {
		AST ast= fAst;
		switch (nodeType) {
			case NAME:
				return ast.newSimpleName("z"); //$NON-NLS-1$
			case EXPRESSION:
				MethodInvocation expression = ast.newMethodInvocation(); 
				expression.setName(ast.newSimpleName("z")); //$NON-NLS-1$
				return expression;
			case TYPE:
				return ast.newSimpleType(ast.newSimpleName("X")); //$NON-NLS-1$		
			case STATEMENT:
				return ast.newReturnStatement();
			case BLOCK:
				return ast.newBlock();
			case METHOD_DECLARATION:
				return ast.newMethodDeclaration();
			case FIELD_DECLARATION:
				return ast.newFieldDeclaration(ast.newVariableDeclarationFragment());
			case INITIALIZER:
				return ast.newInitializer();				
			case SINGLEVAR_DECLARATION:
				return ast.newSingleVariableDeclaration();
			case VAR_DECLARATION_FRAGMENT:
				return ast.newVariableDeclarationFragment();
			case JAVADOC:
				return ast.newJavadoc();
			case METHOD_REF_PARAMETER:
				return ast.newMethodRefParameter();
			case TAG_ELEMENT:
				return ast.newTagElement();
			case TYPE_DECLARATION:
				return ast.newTypeDeclaration();
			case PACKAGE_DECLARATION:
				return ast.newPackageDeclaration();
			case IMPORT_DECLARATION:
				return ast.newImportDeclaration();
		}
		return null;
	}	

