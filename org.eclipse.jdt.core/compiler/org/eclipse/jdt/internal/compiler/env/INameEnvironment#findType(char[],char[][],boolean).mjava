/**
 * Find a type named <typeName> in the package <packageName>.
 * Answer the binary form of the type if it is known to be consistent.
 * Otherwise, answer the compilation unit which defines the type
 * or null if the type does not exist.
 * The default package is indicated by char[0][].
 *
 * It is known that the package containing the type exists.
 *
 * NOTE: This method can be used to find a member type using its
 * internal name A$B, but the source file for A is answered if the binary
 * file is inconsistent.
 *
 * The flag <searchWithSecondaryTypes> can be used to switch on/off the search for secondary types.
 * This is useful because the search for secondary types may by very expensive regarding the performance
 * and in many cases it isn't necessary to search for secondary types.
 *
 * @param typeName type to find
 * @param packageName package of the searched type
 * @param searchWithSecondaryTypes flag to switch on/off the search for secondary types
 * @return {@link NameEnvironmentAnswer}
 */
NameEnvironmentAnswer findType(char[] typeName, char[][] packageName, boolean searchWithSecondaryTypes);
