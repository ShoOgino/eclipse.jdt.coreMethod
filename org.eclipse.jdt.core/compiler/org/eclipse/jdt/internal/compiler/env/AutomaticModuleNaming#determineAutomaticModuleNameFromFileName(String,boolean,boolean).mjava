	/**
	 * Determine the automatic module name if no "Automatic-Module-Name" was found in the Manifest, as specified in
	 * {@link <a href=
	 * "http://download.java.net/java/jdk9/docs/api/java/lang/module/ModuleFinder.html#of-java.nio.file.Path...-">ModuleFinder.of</a>}
	 *
	 * @param name
	 *            the filename (or directory name)
	 * @param skipDirectory
	 *            if true, parent directory names are skipped
	 * @param removeExtension
	 *            if true, the ".jar" extension is removed.
	 */
	public static char[] determineAutomaticModuleNameFromFileName(String name, boolean skipDirectory,
			boolean removeExtension) {
		int index;
		int start = 0;
		int end = name.length();
		if (skipDirectory) {
			index = name.lastIndexOf(File.separatorChar);
			start = index + 1;
		}

		// "The ".jar" suffix is removed"
		if (removeExtension) {
			if (name.endsWith(".jar") || name.endsWith(".JAR")) { //$NON-NLS-1$//$NON-NLS-2$
				end -= 4;
			}
		}

		// "If the name matches the regular expression "-(\\d+(\\.|$))" then the module name will be derived from the
		// subsequence preceding the hyphen of the first occurrence. [...]"
		dashLoop: for (index = start; index < end - 1; index++) {
			if (name.charAt(index) == '-' && name.charAt(index + 1) >= '0' && name.charAt(index + 1) <= '9') {
				for (int index2 = index + 2; index2 < end; index2++) {
					final char c = name.charAt(index2);
					if (c == '.') {
						break;
					}
					if (c < '0' || c > '9') {
						continue dashLoop;
					}
				}
				end = index;
				break;
			}
		}

		// "All non-alphanumeric characters ([^A-Za-z0-9]) in the module name are replaced with a dot ("."), all
		// repeating dots are replaced with one dot, and all leading and trailing dots are removed."
		StringBuilder sb = new StringBuilder(end - start);
		boolean needDot = false;
		for (int i = start; i < end; i++) {
			char c = name.charAt(i);
			if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')) {
				if (needDot) {
					sb.append('.');
					needDot = false;
				}
				sb.append(c);
			} else {
				if (sb.length() > 0) {
					needDot = true;
				}
			}
		}
		return sb.toString().toCharArray();
	}

