	/**
	 * Returns the double value corresponding to the hexadecimal floating-point literal
	 * @return the double value corresponding to the hexadecimal floating-point literal
	 */
	public static double getFloatingPoint(char[] source) {
		int length = source.length;
		long hexValue = 0;
		int i = 2;
		loop: while (true) {
			switch(source[i]) {
				case '0' :
					hexValue <<= 4;
					break;
				case '1' :
					hexValue <<= 4;
					hexValue ++;
					break;
				case '2' :
					hexValue <<= 4;
					hexValue += 2;
					break;
				case '3' :
					hexValue <<= 4;
					hexValue += 3;
					break;
				case '4' :
					hexValue <<= 4;
					hexValue += 4;
					break;
				case '5' :
					hexValue <<= 4;
					hexValue += 5;
					break;
				case '6' :
					hexValue <<= 4;
					hexValue += 6;
					break;
				case '7' :
					hexValue <<= 4;
					hexValue += 7;
					break;
				case '8' :
					hexValue <<= 4;
					hexValue += 8;
					break;
				case '9' :
					hexValue <<= 4;
					hexValue += 9;
					break;
				case 'a' :
				case 'A' :
					hexValue <<= 4;
					hexValue += 10;
					break;
				case 'b' :
				case 'B' :
					hexValue <<= 4;
					hexValue += 11;
					break;
				case 'c' :
				case 'C' :
					hexValue <<= 4;
					hexValue += 12;
					break;
				case 'd' :
				case 'D' :
					hexValue <<= 4;
					hexValue += 13;
					break;
				case 'e' :
				case 'E' :
					hexValue <<= 4;
					hexValue += 14;
					break;
				case 'F' :
				case 'f' :
					hexValue <<= 4;
					hexValue += 15;
					break;
				default:
					break loop;
			}
			i++;
		}
		double decimalsValue = 0.0;
		if (source[i] == '.') {
			int index = 1;
			i++;
			loop2 : while (true) {
				switch(source[i]) {
					case '1' :
						decimalsValue += 1.0 / ((2 << 3) << (4 * (index - 1)));
						break;
					case '2' :
						decimalsValue += 2.0 / ((2 << 3) << (4 * (index - 1)));
						break;
					case '3' :
						decimalsValue += 3.0 / ((2 << 3) << (4 * (index - 1)));
						break;
					case '4' :
						decimalsValue += 4.0 / ((2 << 3) << (4 * (index - 1)));
						break;
					case '5' :
						decimalsValue += 5.0 / ((2 << 3) << (4 * (index - 1)));
						break;
					case '6' :
						decimalsValue += 6.0 / ((2 << 3) << (4 * (index - 1)));
						break;
					case '7' :
						decimalsValue += 7.0 / ((2 << 3) << (4 * (index - 1)));
						break;
					case '8' :
						decimalsValue += 8.0 / ((2 << 3) << (4 * (index - 1)));
						break;
					case '9' :
						decimalsValue += 9.0 / ((2 << 3) << (4 * (index - 1)));
						break;
					case 'a' :
					case 'A' :
						decimalsValue += 10.0 / ((2 << 3) << (4 * (index - 1)));
						break;
					case 'b' :
					case 'B' :
						decimalsValue += 11.0 / ((2 << 3) << (4 * (index - 1)));
						break;
					case 'c' :
					case 'C' :
						decimalsValue += 12.0 / ((2 << 3) << (4 * (index - 1)));
						break;
					case 'd' :
					case 'D' :
						decimalsValue += 13.0 / ((2 << 3) << (4 * (index - 1)));
						break;
					case 'e' :
					case 'E' :
						decimalsValue += 14.0 / ((2 << 3) << (4 * (index - 1)));
						break;
					case 'F' :
					case 'f' :
						decimalsValue += 15.0 / ((2 << 3) << (4 * (index - 1)));
						break;
					default:
						break loop2;
				}
				i++;
				index++;
			}
		}
		i++; // read p or P
		boolean isNegative = false;
		switch(source[i]) {
			case '-' :
				isNegative = true;
				i++;
				break;
			case '+' :
				i++;
				break;
		}
		int exponentValue = 0;
		loop3: while (true) {
			switch(source[i]) {
				case '0' :
					exponentValue *= 10;
					break;
				case '1' :
					exponentValue *= 10;
					exponentValue++;
					break;
				case '2' :
					exponentValue *= 10;
					exponentValue += 2;
					break;
				case '3' :
					exponentValue *= 10;
					exponentValue += 3;
					break;
				case '4' :
					exponentValue *= 10;
					exponentValue += 4;
					break;
				case '5' :
					exponentValue *= 10;
					exponentValue += 5;
					break;
				case '6' :
					exponentValue *= 10;
					exponentValue += 6;
					break;
				case '7' :
					exponentValue *= 10;
					exponentValue += 7;
					break;
				case '8' :
					exponentValue *= 10;
					exponentValue += 8;
					break;
				case '9' :
					exponentValue *= 10;
					exponentValue += 9;
					break;
				default:
					break loop3;
			}
			i++;
			if (i >= length) {
				break loop3;
			}
		}
		if (exponentValue == 0) {
			return hexValue + decimalsValue;
		}
		exponentValue--;
		return (hexValue + decimalsValue) * (isNegative ? 1.0 / (2 << exponentValue) : 2 << exponentValue);
	}

