	public static void toStringContent(StringBuffer buffer, IBinaryMethod method) {
		int modifiers = method.getModifiers();
		char[] desc = method.getGenericSignature();
		if (desc == null)
			desc = method.getMethodDescriptor();
		buffer
			.append('{')
			.append(
				((modifiers & ClassFileConstants.AccDeprecated) != 0 ? "deprecated " : Util.EMPTY_STRING) //$NON-NLS-1$
					+ ((modifiers & 0x0001) == 1 ? "public " : Util.EMPTY_STRING) //$NON-NLS-1$
					+ ((modifiers & 0x0002) == 0x0002 ? "private " : Util.EMPTY_STRING) //$NON-NLS-1$
					+ ((modifiers & 0x0004) == 0x0004 ? "protected " : Util.EMPTY_STRING) //$NON-NLS-1$
					+ ((modifiers & 0x0008) == 0x000008 ? "static " : Util.EMPTY_STRING) //$NON-NLS-1$
					+ ((modifiers & 0x0010) == 0x0010 ? "final " : Util.EMPTY_STRING) //$NON-NLS-1$
					+ ((modifiers & 0x0040) == 0x0040 ? "bridge " : Util.EMPTY_STRING) //$NON-NLS-1$
					+ ((modifiers & 0x0080) == 0x0080 ? "varargs " : Util.EMPTY_STRING)) //$NON-NLS-1$
			.append(method.getSelector())
			.append(desc)
			.append('}');

		Object defaultValue = method.getDefaultValue();
		if (defaultValue != null) {
			buffer.append(" default "); //$NON-NLS-1$
			if (defaultValue instanceof Object[]) {
				buffer.append('{');
				Object[] elements = (Object[]) defaultValue;
				for (int i = 0, len = elements.length; i < len; i++) {
					if (i > 0)
						buffer.append(", "); //$NON-NLS-1$
					buffer.append(elements[i]);
				}
				buffer.append('}');
			} else {
				buffer.append(defaultValue);
			}
			buffer.append('\n');
		}

		IBinaryAnnotation[] annotations = method.getAnnotations();
		for (int i = 0, l = annotations == null ? 0 : annotations.length; i < l; i++) {
			buffer.append(annotations[i]);
			buffer.append('\n');
		}

		int annotatedParameterCount = method.getAnnotatedParametersCount();
		for (int i = 0; i < annotatedParameterCount; i++) {
			buffer.append("param" + (i - 1)); //$NON-NLS-1$
			buffer.append('\n');
			IBinaryAnnotation[] infos = method.getParameterAnnotations(i, new char[0]);
			for (int j = 0, k = infos == null ? 0 : infos.length; j < k; j++) {
				buffer.append(infos[j]);
				buffer.append('\n');
			}
		}
	}

