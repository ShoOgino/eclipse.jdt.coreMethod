private int decodeElementValueForJavaLangAnnotationTarget(int offset) {
	int readOffset = offset;
	int tag = u1At(readOffset);
	readOffset++;
	switch(tag) {
		case 'B' :
		case 'C' :
		case 'D' :
		case 'F' :
		case 'I' :
		case 'J' :
		case 'S' :
		case 'Z' :
		case 's' :
			readOffset += 2;
			break;
		case 'e' :
			int utf8Offset = this.constantPoolOffsets[u2At(readOffset)];
			char[] typeName = utf8At(utf8Offset + 3, u2At(utf8Offset + 1));
			typeName = Signature.toCharArray(typeName);
			CharOperation.replace(typeName, '/', '.');
			char[][] qualifiedTypeName = CharOperation.splitOn('.', typeName);
			readOffset += 2;
			utf8Offset = this.constantPoolOffsets[u2At(readOffset)];
			char[] constName = utf8At(utf8Offset + 3, u2At(utf8Offset + 1));
			readOffset += 2;
			if (qualifiedTypeName.length == 4 && CharOperation.equals(qualifiedTypeName, TypeConstants.JAVA_LANG_ANNOTATION_ELEMENTTYPE)) {
				this.tagBits |= Annotation.getTargetElementType(constName);
			}
			break;
		case 'c' :
			readOffset += 2;
			break;
		case '@' :
			readOffset = decodeAnnotation(readOffset);
			break;
		case '[' :
			int numberOfValues = u2At(readOffset);
			readOffset += 2;
			if (numberOfValues == 0) {
				this.tagBits |= TagBits.AnnotationTarget;
			} else {
				for (int i = 0; i < numberOfValues; i++) {
					readOffset = decodeElementValueForJavaLangAnnotationTarget(readOffset);
				}
			}
			break;
	}
	return readOffset;
}

