/**
 * Create and remember a provider for external annotations using the given basePath,
 * which is either a directory holding .eea text files, or a zip file of entries of the same format.
 * @param basePath resolved filesystem path of either directory or zip file
 * @param qualifiedBinaryTypeName slash-separated type name
 * @param zipFile an existing zip file for the same basePath, or null. 
 * 		Output: wl be filled with 
 * @param producer an optional helper to produce the zipFile when needed.
 * @return the client provided zip file; 
 * 		or else a fresh new zip file, to let clients cache it, if desired; 
 * 		or null to signal that basePath is not a zip file, but a directory.
 * @throws IOException any unexpected errors during file access. File not found while
 *		accessing an individual file if basePath is a directory <em>is</em> expected,
 *		and simply answered with null. If basePath is neither a directory nor a zip file,
 *		this is unexpected.
 */
public ZipFile setExternalAnnotationProvider(String basePath, String qualifiedBinaryTypeName, ZipFile zipFile, ZipFileProducer producer) throws IOException {
	String qualifiedBinaryFileName = qualifiedBinaryTypeName + ExternalAnnotationProvider.ANNOTATION_FILE_SUFFIX;
	if (zipFile == null) {
		File annotationBase = new File(basePath);
		if (annotationBase.isDirectory()) {
			try {
				String filePath = annotationBase.getAbsolutePath()+'/'+qualifiedBinaryFileName;
				this.annotationProvider = new ExternalAnnotationProvider(new FileInputStream(filePath), String.valueOf(getName()));
			} catch (FileNotFoundException e) {
				// expected, no need to report an error here
			}
			return null; // no zipFile
		}
		if (!annotationBase.exists())
			return null; // no zipFile, treat as not-yet-created directory
		zipFile = (producer != null ? producer.produce() : new ZipFile(annotationBase));
	}
	ZipEntry entry = zipFile.getEntry(qualifiedBinaryFileName);
	if (entry != null)
		this.annotationProvider = new ExternalAnnotationProvider(zipFile.getInputStream(entry), String.valueOf(getName()));
	return zipFile;
}

