private void decodeAnnotation() {
	this.readOffset = 0;
	int utf8Offset = this.constantPoolOffsets[u2At(0)] - this.structOffset;
	this.typename = utf8At(utf8Offset + 3, u2At(utf8Offset + 1));
	int numberOfPairs = u2At(2);
	// u2 type_index + u2 num_member_value_pair
	this.readOffset += 4;
	this.pairs = numberOfPairs == 0 ? ElementValuePairInfo.NoMembers : new ElementValuePairInfo[numberOfPairs];
	int i = 0;
	try {
		while (i < numberOfPairs) {
			// u2 member_name_index;
			utf8Offset = this.constantPoolOffsets[u2At(this.readOffset)] - this.structOffset;
			char[] membername = utf8At(utf8Offset + 3, u2At(utf8Offset + 1));
			this.readOffset += 2;
			Object value = decodeDefaultValue();
			this.pairs[i++] = new ElementValuePairInfo(membername, value);
		}
	} catch (RuntimeException any) {
		sanitizePairs();
		StringBuilder newMessage = new StringBuilder(any.getMessage());
		newMessage.append(" while decoding pair #").append(i).append(" of annotation @").append(this.typename); //$NON-NLS-1$ //$NON-NLS-2$
		newMessage.append(", bytes at structOffset ").append(this.structOffset).append(":"); //$NON-NLS-1$ //$NON-NLS-2$
		int offset = this.structOffset;
		while (offset <= this.structOffset+this.readOffset && offset < this.reference.length) {
			newMessage.append(' ').append(Integer.toHexString(this.reference[offset++] & 0xFF));
		}
		throw new IllegalStateException(newMessage.toString(), any);
	}
}

