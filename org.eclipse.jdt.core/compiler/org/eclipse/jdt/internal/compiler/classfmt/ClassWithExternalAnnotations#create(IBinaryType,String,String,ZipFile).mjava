	/**
	 * Create and remember a provider for external annotations using the given basePath, which is either a directory
	 * holding .eea text files, or a zip file of entries of the same format.
	 * 
	 * @param basePath
	 *            resolved filesystem path of either directory or zip file
	 * @param qualifiedBinaryTypeName
	 *            slash-separated type name
	 * @param zipFile
	 *            an existing zip file for the same basePath, or null. Output: wl be filled with
	 * @return the client provided zip file; or else a fresh new zip file, to let clients cache it, if desired; or null
	 *         to signal that basePath is not a zip file, but a directory.
	 * @throws IOException
	 *             any unexpected errors during file access. File not found while accessing an individual file if
	 *             basePath is a directory <em>is</em> expected, and simply answered with null. If basePath is neither a
	 *             directory nor a zip file, this is unexpected.
	 */
	public static ClassWithExternalAnnotations create(IBinaryType toDecorate, String basePath,
			String qualifiedBinaryTypeName, ZipFile zipFile) throws IOException {
		return new ClassWithExternalAnnotations(toDecorate,
				externalAnnotationProvider(basePath, qualifiedBinaryTypeName, zipFile));
	}

