	/**
	 * Return a wrapper that contains the constant of the field.
	 * Throws a java.ibm.compiler.java.classfmt.ClassFormatException in case the signature is 
	 * incompatible with the constant tag.
	 * 
	 * @exception java.ibm.compiler.java.classfmt.ClassFormatException
	 * @return java.lang.Object
	 */
	public Object getWrappedConstantValue() throws ClassFormatException {

		int attributesCount = u2At(6);
		int readOffset = 8;
		for (int i = 0; i < attributesCount; i++) {
			int utf8Offset = constantPoolOffsets[u2At(8)] - structOffset;
			char[] attributeName = utf8At(utf8Offset + 3, u2At(utf8Offset + 1));
			if (CharOperation.equals(attributeName, ConstantValueName)) {
				// read the right constant
				int relativeOffset = constantPoolOffsets[u2At(14)] - structOffset;
				switch (u1At(relativeOffset)) {
					case IntegerTag :
						return new Integer(i4At(relativeOffset + 1));
					case FloatTag :
						return new Float(floatAt(relativeOffset + 1));
					case DoubleTag :
						return new Double(doubleAt(relativeOffset + 1));
					case LongTag :
						return new Long(i8At(relativeOffset + 1));
					case StringTag :
						utf8Offset = constantPoolOffsets[u2At(relativeOffset + 1)] - structOffset;
						return String.valueOf(utf8At(utf8Offset + 3, u2At(utf8Offset + 1)));
				}
			}
			readOffset += (6 + u4At(readOffset + 2));
		}
		return null;
	}

