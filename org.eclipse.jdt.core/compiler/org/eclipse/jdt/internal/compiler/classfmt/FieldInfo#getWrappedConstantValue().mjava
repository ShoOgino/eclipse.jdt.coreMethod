/**
 * Return a wrapper that contains the constant of the field.
 * Throws a java.ibm.compiler.java.classfmt.ClassFormatException in case the signature is 
 * incompatible with the constant tag.
 * 
 * @exception java.ibm.compiler.java.classfmt.ClassFormatException
 * @return java.lang.Object
 */
public Object getWrappedConstantValue() throws ClassFormatException {

	if (this.wrappedConstantValue == null) {
		if (hasConstant()) {
			Constant constant = getConstant();
			switch (constant.typeID()) {
				case T_int :
					this.wrappedConstantValue = new Integer(constant.intValue());
					break;
				case T_byte :
					this.wrappedConstantValue = new Byte(constant.byteValue());
					break;
				case T_short :
					this.wrappedConstantValue = new Short(constant.shortValue());
					break;
				case T_char :
					this.wrappedConstantValue = new Character(constant.charValue());
					break;
				case T_float :
					this.wrappedConstantValue = new Float(constant.floatValue());
					break;
				case T_double :
					this.wrappedConstantValue = new Double(constant.doubleValue());
					break;
				case T_boolean :
					this.wrappedConstantValue = new Boolean(constant.booleanValue());
					break;
				case T_long :
					this.wrappedConstantValue = new Long(constant.longValue());
					break;
				case T_String :
					this.wrappedConstantValue = constant.stringValue();
			}
		}
	}
	return this.wrappedConstantValue;
}

