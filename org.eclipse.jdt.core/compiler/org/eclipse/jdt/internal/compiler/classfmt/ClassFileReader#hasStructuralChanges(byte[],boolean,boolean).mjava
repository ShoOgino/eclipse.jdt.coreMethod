/**
 * Check if the receiver has structural changes compare to the byte array in argument.
 * Structural changes are:
 * - modifiers changes for the class, the this.fields or the this.methods
 * - signature changes for this.fields or this.methods.
 * - changes in the number of this.fields or this.methods
 * - changes for field constants
 * - changes for thrown exceptions
 * - change for the super class or any super interfaces.
 * - changes for member types name or modifiers
 * If any of these changes occurs, the method returns true. false otherwise.
 * @param newBytes the bytes of the .class file we want to compare the receiver to
 * @param orderRequired a boolean indicating whether the members should be sorted or not
 * @param excludesSynthetics a boolean indicating whether the synthetic members should be used in the comparison
 * @return boolean Returns true is there is a structural change between the two .class files, false otherwise
 */
public boolean hasStructuralChanges(byte[] newBytes, boolean orderRequired, boolean excludesSynthetic) {
	try {
		ClassFileReader newClassFile =
			new ClassFileReader(newBytes, this.classFileName);
		// type level comparison
		// modifiers
		if (this.getModifiers() != newClassFile.getModifiers()) {
			return true;
		}
		// superclass
		if (!CharOperation.equals(this.getSuperclassName(), newClassFile.getSuperclassName())) {
			return true;
		}
		// interfaces
		char[][] newInterfacesNames = newClassFile.getInterfaceNames();
		int newInterfacesLength = newInterfacesNames == null ? 0 : newInterfacesNames.length;
		if (newInterfacesLength != this.interfacesCount) {
			return true;
		}
		if (this.interfacesCount != 0) {
			for (int i = 0, max = this.interfacesCount; i < max; i++) {
				if (!CharOperation.equals(this.interfaceNames[i], newInterfacesNames[i])) {
					return true;
				}
			}
		}
		// this.fields
		FieldInfo[] otherFieldInfos = (FieldInfo[]) newClassFile.getFields();
		int otherFieldInfosLength = otherFieldInfos == null ? 0 : otherFieldInfos.length;
		boolean jumpOverFieldCheck = false;
		if (this.fieldsCount != otherFieldInfosLength) {
			if (excludesSynthetic) {
				if (orderRequired) {
					if (this.fieldsCount != 0) {
						Arrays.sort(this.fields);
					}
					if (otherFieldInfosLength != 0) {
						Arrays.sort(otherFieldInfos);	
					}
				}
				// remove synthetic fields
				FieldInfo[] otherFieldsInfoWithoutSynthetics = this.removeSyntheticFieldsInfos(otherFieldInfos);
				FieldInfo[] fieldsInfoWithoutSynthetics = this.removeSyntheticFieldsInfos(this.fields);
				int fieldsInfoWithoutSyntheticsLength = fieldsInfoWithoutSynthetics == null ? 0 : fieldsInfoWithoutSynthetics.length;
				int otherFieldsInfoWithoutSyntheticsLength = otherFieldsInfoWithoutSynthetics == null ? 0 : otherFieldsInfoWithoutSynthetics.length;
				if (fieldsInfoWithoutSyntheticsLength != this.fieldsCount || otherFieldsInfoWithoutSyntheticsLength != otherFieldInfosLength) {
					if (fieldsInfoWithoutSyntheticsLength != otherFieldsInfoWithoutSyntheticsLength) {
						return true;
					}
					boolean changedInFields = false;
					if (otherFieldsInfoWithoutSyntheticsLength != 0) {
						for (int i = 0; i < otherFieldsInfoWithoutSyntheticsLength && !changedInFields; i++) {
							changedInFields = hasStructuralFieldChanges(fieldsInfoWithoutSynthetics[i], otherFieldsInfoWithoutSynthetics[i]);
						}
						if (changedInFields) {
							return true;
						} else {
							jumpOverFieldCheck = true;
						}
					} else {
						jumpOverFieldCheck = true;
					}
				} else {
					return true;
				}
			} else {
				return true;
			}
		}
		if (otherFieldInfosLength != 0 && !jumpOverFieldCheck) {
			boolean changedInFields = false;
			for (int i = 0; i < otherFieldInfosLength && !changedInFields; i++) {
				changedInFields = hasStructuralFieldChanges(this.fields[i], otherFieldInfos[i]);
			}
			if (changedInFields) {
				if (orderRequired) {
					if (this.fieldsCount != 0) {
						Arrays.sort(this.fields);
					}
					if (otherFieldInfosLength != 0) {
						Arrays.sort(otherFieldInfos);	
					}
					changedInFields = false;			
					for (int i = 0; i < otherFieldInfosLength && !changedInFields; i++) {
						changedInFields = hasStructuralFieldChanges(this.fields[i], otherFieldInfos[i]);
					}
					if (changedInFields) {
						if (excludesSynthetic) {
							// remove synthetic fields
							FieldInfo[] otherFieldsInfoWithoutSynthetics = this.removeSyntheticFieldsInfos(otherFieldInfos);
							FieldInfo[] fieldsInfoWithoutSynthetics = this.removeSyntheticFieldsInfos(this.fields);
							int fieldsInfoWithoutSyntheticsLength = fieldsInfoWithoutSynthetics == null ? 0 : fieldsInfoWithoutSynthetics.length;
							int otherFieldsInfoWithoutSyntheticsLength = otherFieldsInfoWithoutSynthetics == null ? 0 : otherFieldsInfoWithoutSynthetics.length;
							if (fieldsInfoWithoutSyntheticsLength != this.fieldsCount || otherFieldsInfoWithoutSyntheticsLength != otherFieldInfosLength) {
								if (fieldsInfoWithoutSyntheticsLength != otherFieldsInfoWithoutSyntheticsLength) {
									return true;
								}
								changedInFields = false;
								if (otherFieldsInfoWithoutSyntheticsLength != 0) {
									for (int i = 0; i < otherFieldsInfoWithoutSyntheticsLength && !changedInFields; i++) {
										changedInFields = hasStructuralFieldChanges(fieldsInfoWithoutSynthetics[i], otherFieldsInfoWithoutSynthetics[i]);
									}
									if (changedInFields) {
										return true;
									}
								}
							} else {
								return true;
							}
						} else {
							return true;
						}
					}
				} else if (excludesSynthetic) {
					// remove synthetic fields
					FieldInfo[] otherFieldsInfoWithoutSynthetics = this.removeSyntheticFieldsInfos(otherFieldInfos);
					FieldInfo[] fieldsInfoWithoutSynthetics = this.removeSyntheticFieldsInfos(this.fields);
					int fieldsInfoWithoutSyntheticsLength = fieldsInfoWithoutSynthetics == null ? 0 : fieldsInfoWithoutSynthetics.length;
					int otherFieldsInfoWithoutSyntheticsLength = otherFieldsInfoWithoutSynthetics == null ? 0 : otherFieldsInfoWithoutSynthetics.length;
					if (fieldsInfoWithoutSyntheticsLength != this.fieldsCount || otherFieldsInfoWithoutSyntheticsLength != otherFieldInfosLength) {
						if (fieldsInfoWithoutSyntheticsLength != otherFieldsInfoWithoutSyntheticsLength) {
							return true;
						}
						changedInFields = false;
						if (otherFieldsInfoWithoutSyntheticsLength != 0) {
							for (int i = 0; i < otherFieldsInfoWithoutSyntheticsLength && !changedInFields; i++) {
								changedInFields = hasStructuralFieldChanges(fieldsInfoWithoutSynthetics[i], otherFieldsInfoWithoutSynthetics[i]);
							}
							if (changedInFields) {
								return true;
							}
						}
					} else {
						return true;
					}
				} else {
					return true;
				}
			}

		}
		
		// this.methods
		boolean jumpOverMethodCheck = false;
		MethodInfo[] otherMethodInfos = (MethodInfo[]) newClassFile.getMethods();
		int otherMethodInfosLength = otherMethodInfos == null ? 0 : otherMethodInfos.length;
		boolean changedInMethods = false;
		if (this.methodsCount != otherMethodInfosLength) {
			if (excludesSynthetic) {
				if (orderRequired) {
					if (this.methodsCount != 0) {
						Arrays.sort(this.methods);
					}
					if (otherMethodInfosLength != 0) {
						Arrays.sort(otherMethodInfos);	
					}
				}
				// remove synthetic fields
				MethodInfo[] otherMethodInfosWithoutSynthetics = this.removeSyntheticMethodsInfos(otherMethodInfos);
				MethodInfo[] methodInfosWithoutSynthetics = this.removeSyntheticMethodsInfos(this.methods);
				int methodInfosWithoutSyntheticsLength = methodInfosWithoutSynthetics == null ? 0 : methodInfosWithoutSynthetics.length;
				int otherMethodInfosWithoutSyntheticsLength = otherMethodInfosWithoutSynthetics == null ? 0 : otherMethodInfosWithoutSynthetics.length;
				if (methodInfosWithoutSyntheticsLength != this.fieldsCount || otherMethodInfosWithoutSyntheticsLength != otherFieldInfosLength) {
					if (methodInfosWithoutSyntheticsLength != otherMethodInfosWithoutSyntheticsLength) {
						return true;
					}
					if (otherMethodInfosWithoutSyntheticsLength != 0) {
						for (int i = 0; i < otherMethodInfosWithoutSyntheticsLength && !changedInMethods; i++) {
							changedInMethods = hasStructuralMethodChanges(methodInfosWithoutSynthetics[i], otherMethodInfosWithoutSynthetics[i]);
						}
						if (changedInMethods) {
							return true;
						} else {
							jumpOverMethodCheck = true;
						}
					} else {
						jumpOverMethodCheck = true;
					}
				} else {
					return true;
				}
			} else {
				return true;
			}
		}
		
		if (otherMethodInfosLength != 0 && !jumpOverMethodCheck) {
			for (int i = 0; i < otherMethodInfosLength && !changedInMethods; i++) {
				MethodInfo otherMethodInfo = otherMethodInfos[i];
				MethodInfo currentMethodInfo = this.methods[i];
				changedInMethods = hasStructuralMethodChanges(currentMethodInfo, otherMethodInfo);
			}
			if (changedInMethods) {
				// try sorting the collection
				if (orderRequired) {
					if (this.methodsCount != 0) {
						Arrays.sort(this.methods);
					}
					if (otherMethodInfosLength != 0) {
						Arrays.sort(otherMethodInfos);
					}
					changedInMethods = false;			
					for (int i = 0; i < otherMethodInfosLength && !changedInMethods; i++) {
						changedInMethods = hasStructuralMethodChanges(this.methods[i], otherMethodInfos[i]);
					}
					if (changedInMethods) {
						if (excludesSynthetic) {
							// remove synthetic fields
							MethodInfo[] otherMethodInfosWithoutSynthetics = this.removeSyntheticMethodsInfos(otherMethodInfos);
							MethodInfo[] methodInfosWithoutSynthetics = this.removeSyntheticMethodsInfos(this.methods);
							int methodInfosWithoutSyntheticsLength = methodInfosWithoutSynthetics == null ? 0 : methodInfosWithoutSynthetics.length;
							int otherMethodInfosWithoutSyntheticsLength = otherMethodInfosWithoutSynthetics == null ? 0 : otherMethodInfosWithoutSynthetics.length;
							if (methodInfosWithoutSyntheticsLength != this.fieldsCount || otherMethodInfosWithoutSyntheticsLength != otherFieldInfosLength) {
								if (methodInfosWithoutSyntheticsLength != otherMethodInfosWithoutSyntheticsLength) {
									return true;
								}
								if (otherMethodInfosWithoutSyntheticsLength != 0) {
									for (int i = 0; i < otherMethodInfosWithoutSyntheticsLength && !changedInMethods; i++) {
										changedInMethods = hasStructuralMethodChanges(methodInfosWithoutSynthetics[i], otherMethodInfosWithoutSynthetics[i]);
									}
									if (changedInMethods) {
										return true;
									}
								}
							} else {
								return true;
							}
						} else {
							return true;
						}		
					}
				} else if (excludesSynthetic) {
					// remove synthetic fields
					MethodInfo[] otherMethodInfosWithoutSynthetics = this.removeSyntheticMethodsInfos(otherMethodInfos);
					MethodInfo[] methodInfosWithoutSynthetics = this.removeSyntheticMethodsInfos(this.methods);
					int methodInfosWithoutSyntheticsLength = methodInfosWithoutSynthetics == null ? 0 : methodInfosWithoutSynthetics.length;
					int otherMethodInfosWithoutSyntheticsLength = otherMethodInfosWithoutSynthetics == null ? 0 : otherMethodInfosWithoutSynthetics.length;
					if (methodInfosWithoutSyntheticsLength != this.fieldsCount || otherMethodInfosWithoutSyntheticsLength != otherFieldInfosLength) {
						if (methodInfosWithoutSyntheticsLength != otherMethodInfosWithoutSyntheticsLength) {
							return true;
						}
						if (otherMethodInfosWithoutSyntheticsLength != 0) {
							for (int i = 0; i < otherMethodInfosWithoutSyntheticsLength && !changedInMethods; i++) {
								changedInMethods = hasStructuralMethodChanges(methodInfosWithoutSynthetics[i], otherMethodInfosWithoutSynthetics[i]);
							}
							if (changedInMethods) {
								return true;
							}
						}
					} else {
						return true;
					}
				}
			}
		}
		// Member types
		InnerClassInfo[] currentMemberTypes = (InnerClassInfo[]) this.getMemberTypes();
		InnerClassInfo[] otherMemberTypes = (InnerClassInfo[]) newClassFile.getMemberTypes();
		int currentMemberTypeLength = currentMemberTypes == null ? 0 : currentMemberTypes.length;
		int otherMemberTypeLength = otherMemberTypes == null ? 0 : otherMemberTypes.length;
		if (currentMemberTypeLength != otherMemberTypeLength) {
			return true;
		}
		if (currentMemberTypeLength != 0) {
			for (int i = 0; i < currentMemberTypeLength; i++) {
				if (!CharOperation.equals(currentMemberTypes[i].getName(), otherMemberTypes[i].getName())
					|| currentMemberTypes[i].getModifiers() != otherMemberTypes[i].getModifiers()) {
						return true;
				}
			}			
		}
		return false;
	} catch (ClassFormatException e) {
		return true;
	}
}

