private int decodeAnnotation(int offset) {
	int readOffset = offset;
	int utf8Offset = this.constantPoolOffsets[u2At(offset)];
	char[] typeName = utf8At(utf8Offset + 3, u2At(utf8Offset + 1));
	typeName = Signature.toCharArray(typeName);
	CharOperation.replace(typeName, '/', '.');
	char[][] qualifiedTypeName = CharOperation.splitOn('.', typeName);
	int numberOfPairs = u2At(offset + 2);
	readOffset += 4;
	switch(qualifiedTypeName.length) {
		case 3 :
			if (CharOperation.equals(qualifiedTypeName, TypeConstants.JAVA_LANG_DEPRECATED)) {
				this.tagBits |= TagBits.AnnotationDeprecated;
				return readOffset;		
			}
			break;
		case 4 :
			char[] lastPart = qualifiedTypeName[3];
			if (lastPart.length > 0) {
				switch(lastPart[0]) {
					case 'R' :
						if (CharOperation.equals(qualifiedTypeName, TypeConstants.JAVA_LANG_ANNOTATION_RETENTION)) {
							for (int i = 0; i < numberOfPairs; i++) {
								readOffset += 2;
								readOffset = decodeElementValueForJavaLangAnnotationRetention(readOffset);
							}
							return readOffset;
						}
						break;
					case 'T' :
						if (CharOperation.equals(qualifiedTypeName, TypeConstants.JAVA_LANG_ANNOTATION_TARGET)) {
							for (int i = 0; i < numberOfPairs; i++) {
								readOffset += 2;
								readOffset = decodeElementValueForJavaLangAnnotationTarget(readOffset);
							}
							return readOffset;		
						}
						break;
					case 'D' :
						if (CharOperation.equals(qualifiedTypeName, TypeConstants.JAVA_LANG_ANNOTATION_DOCUMENTED)) {
							this.tagBits |= TagBits.AnnotationDocumented;
							return readOffset;		
						}
						break;
					case 'I' :
						if (CharOperation.equals(qualifiedTypeName, TypeConstants.JAVA_LANG_ANNOTATION_INHERITED)) {
							this.tagBits |= TagBits.AnnotationInherited;
							return readOffset;		
						}
				}
			}
	}
	for (int i = 0; i < numberOfPairs; i++) {
		readOffset += 2;
		readOffset = decodeElementValue(readOffset);
	}
	return readOffset;
}

