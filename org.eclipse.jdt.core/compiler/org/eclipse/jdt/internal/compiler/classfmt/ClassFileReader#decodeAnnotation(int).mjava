private int decodeAnnotation(int offset) {
	int readOffset = offset;
	int utf8Offset = this.constantPoolOffsets[u2At(offset)];
	char[] typeName = utf8At(utf8Offset + 3, u2At(utf8Offset + 1));
	int numberOfPairs = u2At(offset + 2);
	readOffset += 4;
	switch(typeName.length) {
		case 21 :
			if (CharOperation.equals(typeName, ConstantPool.JAVA_LANG_ANNOTATION_INHERITED)) {
				this.tagBits |= TagBits.AnnotationInherited;
				return readOffset;		
			}
			break;
		case 22 :
			if (CharOperation.equals(typeName, ConstantPool.JAVA_LANG_DEPRECATED)) {
				this.tagBits |= TagBits.AnnotationDeprecated;
				return readOffset;		
			}
			break;
		case 29 :
			if (CharOperation.equals(typeName, ConstantPool.JAVA_LANG_ANNOTATION_TARGET)) {
				for (int i = 0; i < numberOfPairs; i++) {
					readOffset += 2;
					readOffset = decodeElementValueForJavaLangAnnotationTarget(readOffset);
				}
				return readOffset;		
			}
			break;
		case 33 :
			if (CharOperation.equals(typeName, ConstantPool.JAVA_LANG_ANNOTATION_DOCUMENTED)) {
				this.tagBits |= TagBits.AnnotationDocumented;
				return readOffset;		
			}
			break;
		case 32 :
			if (CharOperation.equals(typeName, ConstantPool.JAVA_LANG_ANNOTATION_RETENTION)) {
				for (int i = 0; i < numberOfPairs; i++) {
					readOffset += 2;
					readOffset = decodeElementValueForJavaLangAnnotationRetention(readOffset);
				}
				return readOffset;
			}
			break;
	}
	for (int i = 0; i < numberOfPairs; i++) {
		readOffset += 2;
		readOffset = decodeElementValue(readOffset);
	}
	return readOffset;
}

