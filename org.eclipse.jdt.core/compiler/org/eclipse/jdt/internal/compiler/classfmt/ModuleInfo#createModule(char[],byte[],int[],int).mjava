	public static ModuleInfo createModule(char[] className, byte classFileBytes[], int offsets[], int offset) {
		if (CharOperation.endsWith(className, MODULE_INFO_SUFFIX)) {
			className = CharOperation.subarray(className, 0, className.length - MODULE_SUFFIX_LENGTH);
			CharOperation.replace(className, '/', '.');
		}

		ModuleInfo module = new ModuleInfo(className, classFileBytes, offsets, 0);
		int readOffset = offset;
		int utf8Offset = module.constantPoolOffsets[module.u2At(readOffset)];
//		module.name = module.utf8At(utf8Offset + 3, module.u2At(utf8Offset + 1)); // returns 'Module' 
		int moduleOffset = readOffset + 6;
		int count = module.u2At(moduleOffset);
		if (count  > 0) {
			module.requiresCount = count;
			module.requires = new ModuleReferenceInfo[count];
			moduleOffset += 2;
			for (int i = 0; i < count; i++) {
				utf8Offset = module.constantPoolOffsets[module.u2At(moduleOffset)];
				char[] requiresNames = module.utf8At(utf8Offset + 3, module.u2At(utf8Offset + 1));
				module.requires[i] = module.new ModuleReferenceInfo();
				module.requires[i].refName = requiresNames;
				moduleOffset += 2;
				int pub = module.u2At(moduleOffset);
				module.requires[i].isPublic = (ClassFileConstants.ACC_PUBLIC == pub); // Access modifier
				moduleOffset += 2;
			}
		}
		count = module.u2At(moduleOffset);
		if (count > 0) {
			moduleOffset += 2;
			module.exportsCount = count;
			module.exports = new PackageExportInfo[count];
			for (int i = 0; i < count; i++) {
				utf8Offset = module.constantPoolOffsets[module.u2At(moduleOffset)];
				char[] exported = module.utf8At(utf8Offset + 3, module.u2At(utf8Offset + 1));
				CharOperation.replace(exported, '/', '.');
				PackageExportInfo pack = module.new PackageExportInfo();
				module.exports[i] = pack;
				pack.packageName = exported;
				moduleOffset += 2;
				int exportedtoCount = module.u2At(moduleOffset);
				moduleOffset += 2;
				if (exportedtoCount > 0) {
					pack.exportedTo = new char[exportedtoCount][];
					pack.exportedToCount = exportedtoCount;
					for(int k = 0; k < exportedtoCount; k++) {
						utf8Offset = module.constantPoolOffsets[module.u2At(moduleOffset)];
						char[] exportedToName = module.utf8At(utf8Offset + 3, module.u2At(utf8Offset + 1));
						pack.exportedTo[k] = exportedToName;
						moduleOffset += 2;
					}
				}
			}
		}
		return module;
	}

