	public static ModuleInfo createModule(char[] className, byte classFileBytes[], int offsets[], int offset) {

		int readOffset = offset;
//		module.name = module.utf8At(utf8Offset + 3, module.u2At(utf8Offset + 1)); // returns 'Module' 
		int moduleOffset = readOffset + 6;
		int utf8Offset;
		ModuleInfo module = new ModuleInfo(classFileBytes, offsets, 0);
		utf8Offset = module.constantPoolOffsets[module.u2At(moduleOffset)];
		module.name = module.utf8At(utf8Offset + 3, module.u2At(utf8Offset + 1));
		CharOperation.replace(module.name, '/', '.');
		moduleOffset += 2;
		module.flags = module.u2At(moduleOffset);
		moduleOffset += 2;

		utf8Offset = module.constantPoolOffsets[module.u2At(readOffset)];
		int count = module.u2At(moduleOffset);
		module.requiresCount = count;
		module.requires = new ModuleReferenceInfo[count];
		moduleOffset += 2;
		for (int i = 0; i < count; i++) {
			utf8Offset = module.constantPoolOffsets[module.u2At(moduleOffset)];
			char[] requiresNames = module.utf8At(utf8Offset + 3, module.u2At(utf8Offset + 1));
			module.requires[i] = module.new ModuleReferenceInfo();
			CharOperation.replace(requiresNames, '/', '.');
			module.requires[i].refName = requiresNames;
			moduleOffset += 2;
			int modifiers = module.u2At(moduleOffset);
			module.requires[i].modifiers = modifiers;
			module.requires[i].isTransitive = (ClassFileConstants.ACC_TRANSITIVE & modifiers) != 0; // Access modifier
			moduleOffset += 2;
		}
		count = module.u2At(moduleOffset);
		moduleOffset += 2;
		module.exportsCount = count;
		module.exports = new PackageExportInfo[count];
		for (int i = 0; i < count; i++) {
			utf8Offset = module.constantPoolOffsets[module.u2At(moduleOffset)];
			char[] exported = module.utf8At(utf8Offset + 3, module.u2At(utf8Offset + 1));
			CharOperation.replace(exported, '/', '.');
			PackageExportInfo pack = module.new PackageExportInfo();
			module.exports[i] = pack;
			pack.packageName = exported;
			moduleOffset += 2;
			pack.modifiers = module.u2At(moduleOffset);
			moduleOffset += 2;
			int exportedtoCount = module.u2At(moduleOffset);
			moduleOffset += 2;
			if (exportedtoCount > 0) {
				pack.exportedTo = new char[exportedtoCount][];
				pack.exportedToCount = exportedtoCount;
				for(int k = 0; k < exportedtoCount; k++) {
					utf8Offset = module.constantPoolOffsets[module.u2At(moduleOffset)];
					char[] exportedToName = module.utf8At(utf8Offset + 3, module.u2At(utf8Offset + 1));
					pack.exportedTo[k] = exportedToName;
					moduleOffset += 2;
				}
			}
		}
		count = module.u2At(moduleOffset);
		moduleOffset += 2;
		module.opensCount = count;
		module.opens = new PackageExportInfo[count];
		for (int i = 0; i < count; i++) {
			utf8Offset = module.constantPoolOffsets[module.u2At(moduleOffset)];
			char[] exported = module.utf8At(utf8Offset + 3, module.u2At(utf8Offset + 1));
			CharOperation.replace(exported, '/', '.');
			PackageExportInfo pack = module.new PackageExportInfo();
			module.opens[i] = pack;
			pack.packageName = exported;
			moduleOffset += 2;
			pack.modifiers = module.u2At(moduleOffset);
			moduleOffset += 2;
			int exportedtoCount = module.u2At(moduleOffset);
			moduleOffset += 2;
			if (exportedtoCount > 0) {
				pack.exportedTo = new char[exportedtoCount][];
				pack.exportedToCount = exportedtoCount;
				for(int k = 0; k < exportedtoCount; k++) {
					utf8Offset = module.constantPoolOffsets[module.u2At(moduleOffset)];
					char[] exportedToName = module.utf8At(utf8Offset + 3, module.u2At(utf8Offset + 1));
					pack.exportedTo[k] = exportedToName;
					moduleOffset += 2;
				}
			}
		}
		return module;
	}

