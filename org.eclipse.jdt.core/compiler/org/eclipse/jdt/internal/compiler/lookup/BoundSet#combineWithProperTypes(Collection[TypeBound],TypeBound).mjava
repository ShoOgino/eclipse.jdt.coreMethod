	private ConstraintTypeFormula combineWithProperTypes(Collection<TypeBound> properTypesForAllInferenceVariables, TypeBound boundRight) {
		// either: α = U, β = V, ... and S =  T imply ⟨S[α:=U, β:=V, ...] =  T[α:=U, β:=V, ...]⟩
		// or:     α = U, β = V, ... and S <: T imply ⟨S[α:=U, β:=V, ...] <: T[α:=U, β:=V, ...]⟩
		if(properTypesForAllInferenceVariables.size() == 0) {
			return null;
		}
		boolean isAnyLeftSoft = false;
		InferenceVariable left = boundRight.left;
		TypeBinding right = boundRight.right;
		for(final TypeBound properTypeForInferenceVariable: properTypesForAllInferenceVariables) {
			final TypeBound boundLeft = properTypeForInferenceVariable;
			final InferenceVariable alpha = boundLeft.left;
			final TypeBinding u = boundLeft.right;
			isAnyLeftSoft |= boundLeft.isSoft;
			right = right.substituteInferenceVariable(alpha, u);
		}
		return ConstraintTypeFormula.create(left, right, boundRight.relation, isAnyLeftSoft||boundRight.isSoft);
	}

