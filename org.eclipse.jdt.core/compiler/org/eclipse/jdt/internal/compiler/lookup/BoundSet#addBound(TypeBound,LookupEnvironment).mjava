	public void addBound(TypeBound bound, LookupEnvironment environment) {
		InferenceVariable variable = bound.left.prototype();
		ThreeSets three = this.boundsPerVariable.get(variable);
		if (three == null)
			this.boundsPerVariable.put(variable, (three = new ThreeSets()));
		three.addBound(bound);
		// check if this makes the inference variable instantiated:
		TypeBinding typeBinding = bound.right;
		if (bound.relation == ReductionResult.SAME && typeBinding.isProperType(true))
			three.setInstantiation(typeBinding, variable, environment);
		if (bound.right instanceof InferenceVariable) {
			// for a dependency between two IVs make a note about the inverse bound.
			// this should be needed to determine IV dependencies independent of direction.
			// TODO: so far no test could be identified which actually needs it ...
			InferenceVariable rightIV = (InferenceVariable) bound.right.prototype();
			three = this.boundsPerVariable.get(rightIV);
			if (three == null)
				this.boundsPerVariable.put(rightIV, (three = new ThreeSets()));
			if (three.inverseBounds == null)
				three.inverseBounds = new HashMap<InferenceVariable,TypeBound>();
			three.inverseBounds.put(rightIV, bound);
		}
	}

