	/* API
	 *	
	 *	Answer the method binding that corresponds to selector, argumentTypes.
	 *	Start the lookup at the enclosing type of the receiver.
	 *	InvocationSite implements 
	 *		isSuperAccess(); this is used to determine if the discovered method is visible.
	 *		setDepth(int); this is used to record the depth of the discovered method
	 *			relative to the enclosing type of the receiver. (If the method is defined
	 *			in the enclosing type of the receiver, the depth is 0; in the next enclosing
	 *			type, the depth is 1; and so on
	 * 
	 *	If no visible method is discovered, an error binding is answered.
	 */
	public MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite) {

		boolean insideStaticContext = false;
		boolean insideConstructorCall = false;
		boolean insideTypeAnnotation = false;
		MethodBinding foundMethod = null;
		MethodBinding foundFuzzyProblem = null;
		// the weird method lookup case (matches method name in scope, then arg types, then visibility)
		MethodBinding foundInsideProblem = null;
		// inside Constructor call or inside static context
		Scope scope = this;
		int depth = 0;
		done : while (true) { // done when a COMPILATION_UNIT_SCOPE is found
			switch (scope.kind) {
				case METHOD_SCOPE :
					MethodScope methodScope = (MethodScope) scope;
					insideStaticContext |= methodScope.isStatic;
					insideConstructorCall |= methodScope.isConstructorCall;
					insideTypeAnnotation = methodScope.insideTypeAnnotation;
					break;
				case CLASS_SCOPE :
					ClassScope classScope = (ClassScope) scope;
					ReferenceBinding receiverType = classScope.enclosingReceiverType();
					if (!insideTypeAnnotation) {
						boolean isExactMatch = true;
						// retrieve an exact visible match (if possible)
						// compilationUnitScope().recordTypeReference(receiverType);   not needed since receiver is the source type
						MethodBinding methodBinding =
							(foundMethod == null)
								? classScope.findExactMethod(receiverType, selector, argumentTypes, invocationSite)
								: classScope.findExactMethod(receiverType, foundMethod.selector, foundMethod.parameters, invocationSite);
						if (methodBinding == null) {
							// answers closest approximation, may not check argumentTypes or visibility
							isExactMatch = false;
							methodBinding = classScope.findMethod(receiverType, selector, argumentTypes, invocationSite);
							// methodBinding = findMethod(receiverType, selector, argumentTypes, invocationSite);
						}
						if (methodBinding != null) { // skip it if we did not find anything
							if (methodBinding.problemId() == ProblemReasons.Ambiguous) {
								if (foundMethod == null || foundMethod.problemId() == ProblemReasons.NotVisible) {
									// supercedes any potential InheritedNameHidesEnclosingName problem
									return methodBinding;
								}
								// make the user qualify the method, likely wants the first inherited method (javac generates an ambiguous error instead)
								return new ProblemMethodBinding(
									methodBinding, // closest match
									selector,
									argumentTypes,
									ProblemReasons.InheritedNameHidesEnclosingName);
							}
							MethodBinding fuzzyProblem = null;
							MethodBinding insideProblem = null;
							if (methodBinding.isValidBinding()) {
								if (!isExactMatch) {
									MethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);
									if (compatibleMethod == null) {
										if (foundMethod == null || foundMethod.problemId() == ProblemReasons.NotVisible)
											// inherited mismatch is reported directly, not looking at enclosing matches
											return new ProblemMethodBinding(methodBinding, selector, argumentTypes, ProblemReasons.NotFound);
										// make the user qualify the method, likely wants the first inherited method (javac generates an ambiguous error instead)
										fuzzyProblem = new ProblemMethodBinding(methodBinding, selector, methodBinding.parameters, ProblemReasons.InheritedNameHidesEnclosingName);
									} else if (!compatibleMethod.isValidBinding()) {
										fuzzyProblem = compatibleMethod;
									} else {
										methodBinding = compatibleMethod;
										if (!methodBinding.canBeSeenBy(receiverType, invocationSite, classScope)) {
											// using <classScope> instead of <this> for visibility check does grant all access to innerclass
											fuzzyProblem = new ProblemMethodBinding(methodBinding, selector, methodBinding.parameters, ProblemReasons.NotVisible);
										}
									}
								}
								if (fuzzyProblem == null && !methodBinding.isStatic()) {
									if (insideConstructorCall) {
										insideProblem =
											new ProblemMethodBinding(
												methodBinding, // closest match
												methodBinding.selector,
												methodBinding.parameters,
												ProblemReasons.NonStaticReferenceInConstructorInvocation);
									} else if (insideStaticContext) {
										insideProblem =
											new ProblemMethodBinding(
												methodBinding, // closest match
												methodBinding.selector,
												methodBinding.parameters,
												ProblemReasons.NonStaticReferenceInStaticContext);
									}
								}
	
								if (receiverType == methodBinding.declaringClass
									|| (receiverType.getMethods(selector)) != NoMethods
									|| ((fuzzyProblem == null || fuzzyProblem.problemId() != ProblemReasons.NotVisible) && compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4)) {
									// found a valid method in the 'immediate' scope (ie. not inherited)
									// OR the receiverType implemented a method with the correct name
									// OR in 1.4 mode (inherited visible shadows enclosing)
									if (foundMethod == null) {
										if (depth > 0){
											invocationSite.setDepth(depth);
											invocationSite.setActualReceiverType(receiverType);
										}
										// return the methodBinding if it is not declared in a superclass of the scope's binding (that is, inherited)
										if (fuzzyProblem != null)
											return fuzzyProblem;
										if (insideProblem != null)
											return insideProblem;
										return methodBinding;
									}
									// if a method was found, complain when another is found in an 'immediate' enclosing type (that is, not inherited)
									// NOTE: Unlike fields, a non visible method hides a visible method
									if (foundMethod.declaringClass != methodBinding.declaringClass)
										// ie. have we found the same method - do not trust field identity yet
										return new ProblemMethodBinding(
											methodBinding, // closest match
											methodBinding.selector,
											methodBinding.parameters,
											ProblemReasons.InheritedNameHidesEnclosingName);
								}
							}
	
							if (foundMethod == null || (foundMethod.problemId() == ProblemReasons.NotVisible && methodBinding.problemId() != ProblemReasons.NotVisible)) {
								// only remember the methodBinding if its the first one found or the previous one was not visible & methodBinding is...
								// remember that private methods are visible if defined directly by an enclosing class
								if (depth > 0) {
									invocationSite.setDepth(depth);
									invocationSite.setActualReceiverType(receiverType);
								}
								foundFuzzyProblem = fuzzyProblem;
								foundInsideProblem = insideProblem;
								if (fuzzyProblem == null)
									foundMethod = methodBinding; // only keep it if no error was found
							}
						}
					}
					insideTypeAnnotation = false;
					depth++;
					insideStaticContext |= receiverType.isStatic();
					// 1EX5I8Z - accessing outer fields within a constructor call is permitted
					// in order to do so, we change the flag as we exit from the type, not the method
					// itself, because the class scope is used to retrieve the fields.
					MethodScope enclosingMethodScope = scope.methodScope();
					insideConstructorCall =
						enclosingMethodScope == null ? false : enclosingMethodScope.isConstructorCall;
					break;
				case COMPILATION_UNIT_SCOPE :
					break done;
			}
			scope = scope.parent;
		}

		if (foundFuzzyProblem != null)
			return foundFuzzyProblem;
		if (foundInsideProblem != null)
			return foundInsideProblem;
		if (foundMethod != null)
			return foundMethod;

		if (insideStaticContext && compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5) {
			// at this point the scope is a compilation unit scope & need to check for imported static methods
			CompilationUnitScope unitScope = (CompilationUnitScope) scope;
			ImportBinding[] imports = unitScope.imports;
			if (imports != null) {
				MethodBinding[] visible = null;
				boolean skipOnDemand = false; // set to true when matched static import of method name so stop looking for on demand methods
				for (int i = 0, length = imports.length; i < length; i++) {
					ImportBinding importBinding = imports[i];
					if (importBinding.isStatic()) {
						Binding resolvedImport = importBinding.resolvedImport;
						MethodBinding possible = null;
						if (importBinding.onDemand) {
							if (!skipOnDemand && resolvedImport instanceof ReferenceBinding)
								// answers closest approximation, may not check argumentTypes or visibility
								possible = findMethod((ReferenceBinding) resolvedImport, selector, argumentTypes, invocationSite);
						} else {
							if (resolvedImport instanceof MethodBinding) {
								MethodBinding staticMethod = (MethodBinding) resolvedImport;
								if (CharOperation.equals(staticMethod.selector, selector))
									// answers closest approximation, may not check argumentTypes or visibility
									possible = findMethod(staticMethod.declaringClass, selector, argumentTypes, invocationSite);
							} else if (resolvedImport instanceof FieldBinding) {
								// check to see if there are also methods with the same name
								FieldBinding staticField = (FieldBinding) resolvedImport;
								if (CharOperation.equals(staticField.name, selector)) {
									// must find the importRef's type again since the field can be from an inherited type
									char[][] importName = importBinding.reference.tokens;
									TypeBinding referencedType = getType(importName, importName.length - 1);
									if (referencedType != null)
										// answers closest approximation, may not check argumentTypes or visibility
										possible = findMethod((ReferenceBinding) referencedType, selector, argumentTypes, invocationSite);
								}
							}
						}
						if (possible != null && possible != foundMethod) {
							if (!possible.isValidBinding()) {
								if (foundMethod == null)
									foundMethod = possible; // answer as error case match
							} else if (possible.isStatic()) {
								MethodBinding compatibleMethod = computeCompatibleMethod(possible, argumentTypes, invocationSite);
								if (compatibleMethod != null) {
									if (compatibleMethod.isValidBinding()) {
										if (compatibleMethod.canBeSeenBy(unitScope.fPackage)) {
											ImportReference importReference = importBinding.reference;
											if (importReference != null) importReference.used = true;
											if (foundMethod == null || !foundMethod.isValidBinding()) {
												foundMethod = compatibleMethod;
												if (!importBinding.onDemand && foundMethod.isValidBinding())
													skipOnDemand = true;
											} else {
												if (!skipOnDemand && !importBinding.onDemand) {
													visible = null; // forget previous matches from on demand imports
													foundMethod = compatibleMethod;
													skipOnDemand = true;
												} else if (visible == null) {
													visible = new MethodBinding[] {foundMethod, compatibleMethod};
												} else {
													int visibleLength = visible.length;
													MethodBinding[] temp = new MethodBinding[visibleLength + 1];
													System.arraycopy(visible, 0, temp, 0, visibleLength);
													temp[visibleLength] = compatibleMethod;
													visible = temp;
												}
											}
										} else if (foundMethod == null) {
											foundMethod = new ProblemMethodBinding(compatibleMethod, selector, compatibleMethod.parameters, ProblemReasons.NotVisible);
										}
									}
								} else if (foundMethod == null) {
									foundMethod = new ProblemMethodBinding(possible, selector, argumentTypes, ProblemReasons.NotFound);
								}
							}
						}
					}
				}
				if (visible != null)
					foundMethod = mostSpecificMethodBinding(visible, visible.length, argumentTypes, invocationSite, null);
			}
			if (foundMethod != null) {
				invocationSite.setActualReceiverType(foundMethod.declaringClass);
				return foundMethod;
			}
		}
		return new ProblemMethodBinding(selector, argumentTypes, ProblemReasons.NotFound);
	}

