// NOTE: the type of each field of a source type is resolved when needed
public FieldBinding[] fields() {
	if ((tagBits & AreFieldsComplete) != 0)
		return fields;	

	int failed = 0;
	try {
		boolean isViewedAsDeprecated = isViewedAsDeprecated();
		boolean complyTo15 = fPackage.environment.options.sourceLevel >= ClassFileConstants.JDK1_5;
		for (int i = 0, length = fields.length; i < length; i++) {
			FieldBinding field = fields[i];
			if (resolveTypeFor(field) == null) {
				fields[i] = null;
				failed++;
			} else {
				if (complyTo15) {
					if ((field.getAnnotationTagBits() & AnnotationDeprecated) != 0)
						field.modifiers |= AccDeprecated;
					else if ((field.modifiers & AccDeprecated) != 0)
						scope.problemReporter().missingDeprecatedAnnotationForField(field.sourceField());
				}
				if (isViewedAsDeprecated && !field.isDeprecated())
					field.modifiers |= AccDeprecatedImplicitly;
			}
		}
	} finally {
		if (failed > 0) {
			// ensure fields are consistent reqardless of the error
			int newSize = fields.length - failed;
			if (newSize == 0)
				return fields = NoFields;

			FieldBinding[] newFields = new FieldBinding[newSize];
			for (int i = 0, j = 0, length = fields.length; i < length; i++)
				if (fields[i] != null)
					newFields[j++] = fields[i];
			fields = newFields;
		}
	}
	tagBits |= AreFieldsComplete;
	return fields;
}

