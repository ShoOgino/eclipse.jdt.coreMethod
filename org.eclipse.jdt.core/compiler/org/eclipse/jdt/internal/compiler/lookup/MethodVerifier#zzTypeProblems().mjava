/*
Binding creation is responsible for reporting all problems with imports:
	- on demand imports which refer to missing packages
	- with single type imports:
		- resolves to an ambiguous, invisible or missing type
		- conflicts with the type's source name
		- has the same simple name as another import

Note: VAJ ignored duplicate imports (only one was kept)

verifyImports

	| importsBySimpleName nameEnvClass imports cl first |
	importsBySimpleName := LookupTable new.
	nameEnvClass := nameEnvironment class.

	"7.5.2"
	type imports do: [:import |
		import isOnDemand
			ifTrue: [
				(nameEnvClass doesPackageExistNamed: import javaPackageName) ifFalse: [
					(nameEnvClass findJavaClassNamedFrom: import javaPackageName) == nil ifTrue: [
						problemSummary
							reportVerificationProblem: #OnDemandImportRefersToMissingPackage
							args: (Array with: import asString)
							severity: ErrorInfo::ImportVerification
							forType: type]]]
			ifFalse: [
				(imports := importsBySimpleName at: import javaSimpleName ifAbsent: []) == nil
					ifTrue: [
						importsBySimpleName at: import javaSimpleName put: (Array with: import)]
					ifFalse: [
						(imports includes: import) ifFalse: [
							importsBySimpleName at: import javaSimpleName put: imports, (Array with: import)]].

				"Ignore any imports which are simple names - we will treat these as no-ops."

				import javaPackageName notEmpty ifTrue: [
					cl := nameEnvClass findJavaClassNamedFrom: import asString.

					(cl ~~ nil and: [cl isJavaPublic or: [cl controller symbol == type controller symbol]]) ifFalse: [
						problemSummary
							reportVerificationProblem: #SingleTypeImportRefersToInvisibleType
							args: (Array with: import asString)
							severity: ErrorInfo::ImportVerification
							forType: type]]]].

	importsBySimpleName notEmpty ifTrue: [
		importsBySimpleName keysAndValuesDo: [:simpleName :matching |
			matching size == 1
				ifTrue: [
					simpleName = type sourceName ifTrue: [
						matching first javaReadableName = type javaReadableName ifFalse: [
							problemSummary
								reportVerificationProblem: #SingleTypeImportConflictsWithType
								args: #()
								severity: nil
								forType: type]]]
				ifFalse: [
					problemSummary
						reportVerificationProblem: #SingleTypeImportsHaveSameSimpleName
						args: (Array with: simpleName)
						severity: nil
						forType: type]]]
*/
private void zzTypeProblems() {
}

