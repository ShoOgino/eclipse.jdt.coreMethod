	public PackageBinding getTopLevelPackage(char[] name) {
		// return package binding if there exists a package named name in this module's context and it can be seen by this module
		// A package can be seen by this module if it declares the package or someone exports that package to it
		PackageBinding existing = this.environment.getPackage0(name);
		if (existing != null) {
			if (existing == LookupEnvironment.TheNotFoundPackage)
				return null;
		}
		if (declaresPackage(null, name)) {
			return new PackageBinding(name, this.environment);
		} else {
			PackageBinding pack = Stream.of(getAllRequiredModules()).sorted((m1, m2) -> m1.requires.length - m2.requires.length)
					.map(m -> {
						PackageBinding binding = m.getExportedPackage(name);
						if (binding != null && m.isPackageExportedTo(binding, this)) {
							return m.declaredPackages.get(name);
						}
						return null;
					})
			.filter(p -> p != null).findFirst().orElse(null);
			if (pack != null || this.isAuto) {
				return pack;
			}
			// This will only work if the automatic modules already have all their packages loaded,
			// remember there's no module-info
			return getAllAutomaticModules().
					map(new Function<ModuleBinding, PackageBinding>() {
						@Override
						public PackageBinding apply(ModuleBinding m) {
							return m.getTopLevelPackage(name);
						}
					}).
						filter(p -> p != null).findFirst().orElse(null);
		}
	}

