	/*
	 * declaringUniqueKey # scopeIndex / varName
	 * p.X { void foo() { int local; } } --> Lp/X;.foo()V#1/local
	 */
	public char[] computeUniqueKey(boolean isLeaf) {
		StringBuffer buffer = new StringBuffer();
		
		// declaring method or type
		BlockScope scope = this.declaringScope;
		MethodScope methodScope = scope instanceof MethodScope ? (MethodScope) scope : scope.enclosingMethodScope();
		ReferenceContext referenceContext = methodScope.referenceContext;
		if (referenceContext instanceof AbstractMethodDeclaration) {
			MethodBinding methodBinding = ((AbstractMethodDeclaration) referenceContext).binding;
			if (methodBinding != null) {
				buffer.append(methodBinding.computeUniqueKey(false/*not a leaf*/));
			}
		} else if (referenceContext instanceof TypeDeclaration) {
			TypeBinding typeBinding = ((TypeDeclaration) referenceContext).binding;
			if (typeBinding != null) {
				buffer.append(typeBinding.computeUniqueKey(false/*not a leaf*/));
			}
		}

		// scope index
		getScopeKey(scope, buffer);

		// variable name
		buffer.append('#');
		buffer.append(this.name);
		
		int length = buffer.length();
		char[] uniqueKey = new char[length];
		buffer.getChars(0, length, uniqueKey, 0);
		return uniqueKey;
	}

