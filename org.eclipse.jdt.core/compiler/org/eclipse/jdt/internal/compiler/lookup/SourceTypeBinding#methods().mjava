// NOTE: the return type, arg & exception types of each method of a source type are resolved when needed
public MethodBinding[] methods() {
	if ((tagBits & AreMethodsComplete) != 0)
		return methods;

	int failed = 0;
	try {
		boolean isViewedAsDeprecated = isViewedAsDeprecated();
		boolean complyTo15 = fPackage.environment.options.sourceLevel >= ClassFileConstants.JDK1_5;
		for (int i = 0, length = methods.length; i < length; i++) {
			MethodBinding method = methods[i];
			if (resolveTypesFor(method) == null) {
				methods[i] = null; // unable to resolve parameters
				failed++;
			} else {
				if ((method.getAnnotationTagBits() & AnnotationDeprecated) != 0) {
					method.modifiers |= AccDeprecated;
				} else if (complyTo15 && (method.modifiers & AccDeprecated) != 0) {
					scope.problemReporter().missingDeprecatedAnnotationForMethod(method.sourceMethod());
				}
				if (isViewedAsDeprecated && !method.isDeprecated()) {
					method.modifiers |= AccDeprecatedImplicitly;
				}
			}
		}

		// find & report collision cases
		for (int i = 0, length = methods.length; i < length; i++) {
			MethodBinding method = methods[i];
			if (method != null) {
				AbstractMethodDeclaration methodDecl = null;
				for (int j = length - 1; j > i; j--) {
					MethodBinding method2 = methods[j];
					if (method2 != null && CharOperation.equals(method.selector, method2.selector)) {
						boolean paramsMatch = complyTo15 && method.returnType == method2.returnType // see 87956
							? method.areParameterErasuresEqual(method2)
							: method.areParametersEqual(method2);
						if (paramsMatch) {
							boolean isEnumSpecialMethod = isEnum()
								&& (method.selector == TypeConstants.VALUEOF || method.selector == TypeConstants.VALUES);
							if (methodDecl == null) {
								methodDecl = method.sourceMethod(); // cannot be retrieved after binding is lost & may still be null if method is special
								if (methodDecl != null && methodDecl.binding != null) { // ensure its a valid user defined method
									if (isEnumSpecialMethod)
										scope.problemReporter().duplicateEnumSpecialMethod(this, methodDecl);
									else
										scope.problemReporter().duplicateMethodInType(this, methodDecl);
									methodDecl.binding = null;
									methods[i] = null;
									failed++;
								}
							}
							AbstractMethodDeclaration method2Decl = method2.sourceMethod();
							if (method2Decl != null && method2Decl.binding != null) { // ensure its a valid user defined method
								if (isEnumSpecialMethod)
									scope.problemReporter().duplicateEnumSpecialMethod(this, method2Decl);
								else
									scope.problemReporter().duplicateMethodInType(this, method2Decl);
								method2Decl.binding = null;
								methods[j] = null;
								failed++;
							}
						}
					}
				}
				if (method.returnType == null && methodDecl == null) { // forget method with invalid return type... was kept to detect possible collisions
					method.sourceMethod().binding = null;
					methods[i] = null;
					failed++;
				}
			}
		}
	} finally {
		if (failed > 0) {
			int newSize = methods.length - failed;
			if (newSize == 0) {
				methods = NoMethods;
			} else {
				MethodBinding[] newMethods = new MethodBinding[newSize];
				for (int i = 0, j = 0, length = methods.length; i < length; i++)
					if (methods[i] != null)
						newMethods[j++] = methods[i];
				methods = newMethods;
			}
		}

		// handle forward references to potential default abstract methods
		addDefaultAbstractMethods();
		tagBits |= AreMethodsComplete;
	}		
	return methods;
}

