	private ReductionResult addJDK_8153748ConstraintsFromLambda(LambdaExpression lambda, TypeBinding targetType, MethodBinding method) throws InferenceFailureException {
		if (!lambda.isPertinentToApplicability(targetType, method)) {
// -- simple version:
//			lambda = lambda.resolveExpressionExpecting(targetType, this.scope, this);
//			if (lambda != null && lambda.descriptor != null && lambda.descriptor.isValidBinding()) {
//				MethodBinding sam = lambda.descriptor.declaringClass.getSingleAbstractMethod(this.scope, true);
//				if (sam != null && sam.isValidBinding()) {
// -- more sophisticated version:
			BlockScope skope = lambda.enclosingScope;
			if (targetType.isFunctionalInterface(skope)) { // could be an inference variable.
				ReferenceBinding t = (ReferenceBinding) targetType;
				ParameterizedTypeBinding withWildCards = InferenceContext18.parameterizedWithWildcard(t);
				if (withWildCards != null) {
					t = ConstraintExpressionFormula.findGroundTargetType(this, skope, lambda, withWildCards);
				}
				MethodBinding functionType;
				if (t != null 
						&& (functionType = t.getSingleAbstractMethod(skope, true)) != null 
						&& (lambda = lambda.resolveExpressionExpecting(t, this.scope, this)) != null)
				{
// --
					for (TypeBinding samParam : functionType.parameters) {
						if (!samParam.isProperType(true))
//						if (samParam instanceof InferenceVariable)
							return null;
					}
					ConstraintFormula newConstraint = new ConstraintExpressionFormula(lambda, targetType, ReductionResult.COMPATIBLE, ARGUMENT_CONSTRAINTS_ARE_SOFT);
					if (!reduceAndIncorporate(newConstraint))
						return ReductionResult.FALSE;
					return ReductionResult.TRUE;
				}
			}
		}
		return null;
	}

