	/* Answer the synthetic argument for <targetEnclosingType> or null if one does not exist.
	*/
	public SyntheticArgumentBinding getSyntheticArgument(ReferenceBinding targetEnclosingType, boolean onlyExactMatch) {

		if (enclosingInstances == null) return null;		// is null if no enclosing instances are known
	
		// exact match
		for (int i = enclosingInstances.length; --i >= 0;)
			if (enclosingInstances[i].type == targetEnclosingType)
				if (enclosingInstances[i].actualOuterLocalVariable == null)
					return enclosingInstances[i];
	
		// type compatibility : to handle cases such as
		// class T { class M{}}
		// class S extends T { class N extends M {}} --> need to use S as a default enclosing instance for the super constructor call in N().
		if (!onlyExactMatch){
			for (int i = enclosingInstances.length; --i >= 0;)
				if (enclosingInstances[i].actualOuterLocalVariable == null)
					if (enclosingInstances[i].type.findSuperTypeOriginatingFrom(targetEnclosingType) != null)
						return enclosingInstances[i];
		}
		return null;
	}

