private void checkAndSetModifiersForConstructor(MethodBinding methodBinding) {
	int modifiers = methodBinding.modifiers;
	if ((modifiers & AccAlternateModifierProblem) != 0)
		problemReporter().duplicateModifierForMethod(methodBinding.declaringClass, (AbstractMethodDeclaration) referenceContext);

	if (((ConstructorDeclaration) referenceContext).isDefaultConstructor) {
		if (methodBinding.declaringClass.isPublic())
			modifiers |= AccPublic;
		else if (methodBinding.declaringClass.isProtected())
			modifiers |= AccProtected;
	}

	// after this point, tests on the 16 bits reserved.
	int realModifiers = modifiers & AccJustFlag;

	// check for abnormal modifiers
	int unexpectedModifiers = ~(AccPublic | AccPrivate | AccProtected | AccStrictfp);
	if ((realModifiers & unexpectedModifiers) != 0)
		problemReporter().illegalModifierForMethod(methodBinding.declaringClass, (AbstractMethodDeclaration) referenceContext);
	else if ((((AbstractMethodDeclaration) referenceContext).modifiers & AccStrictfp) != 0) // must check the parse node explicitly
		problemReporter().illegalModifierForMethod(methodBinding.declaringClass, (AbstractMethodDeclaration) referenceContext);

	// check for incompatible modifiers in the visibility bits, isolate the visibility bits
	int accessorBits = realModifiers & (AccPublic | AccProtected | AccPrivate);
	if ((accessorBits & (accessorBits - 1)) != 0) {
		problemReporter().illegalVisibilityModifierCombinationForMethod(methodBinding.declaringClass, (AbstractMethodDeclaration) referenceContext);

		// need to keep the less restrictive
		if ((accessorBits & AccPublic) != 0) {
			if ((accessorBits & AccProtected) != 0)
				modifiers ^= AccProtected;
			if ((accessorBits & AccPrivate) != 0)
				modifiers ^= AccPrivate;
		}
		if ((accessorBits & AccProtected) != 0)
			if ((accessorBits & AccPrivate) != 0)
				modifiers ^= AccPrivate;
	}

	// if the receiver's declaring class is a private nested type, then make sure the receiver is not private (causes problems for inner type emulation)
	if (methodBinding.declaringClass.isPrivate())
		if ((modifiers & AccPrivate) != 0)
			modifiers ^= AccPrivate;

	methodBinding.modifiers = modifiers;
}
/* Spec : 8.4.3 & 9.4
*/

