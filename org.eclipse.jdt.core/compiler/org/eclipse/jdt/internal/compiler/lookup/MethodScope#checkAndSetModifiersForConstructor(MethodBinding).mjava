	/* Spec : 8.4.3 & 9.4
	 */
	private void checkAndSetModifiersForConstructor(MethodBinding methodBinding) {
		
		int modifiers = methodBinding.modifiers;
		final ReferenceBinding declaringClass = methodBinding.declaringClass;
		if ((modifiers & AccAlternateModifierProblem) != 0)
			problemReporter().duplicateModifierForMethod(declaringClass, (AbstractMethodDeclaration) referenceContext);

		if (((ConstructorDeclaration) referenceContext).isDefaultConstructor) {
			if (declaringClass.isEnum())
				modifiers = AccPrivate;
			else if (declaringClass.isPublic())
				modifiers |= AccPublic;
			else if (declaringClass.isProtected())
				modifiers |= AccProtected;
		}

		// after this point, tests on the 16 bits reserved.
		int realModifiers = modifiers & AccJustFlag;

		// check for abnormal modifiers
		int unexpectedModifiers = ~(AccPublic | AccPrivate | AccProtected | AccStrictfp);
		if (declaringClass.isEnum() && !((ConstructorDeclaration) referenceContext).isDefaultConstructor) {
			unexpectedModifiers = ~(AccPrivate | AccStrictfp);
			if ((realModifiers & unexpectedModifiers) != 0) {
				problemReporter().illegalModifierForEnumConstructor((AbstractMethodDeclaration) referenceContext);
				modifiers &= ~AccJustFlag | ~unexpectedModifiers;
			} else if ((((AbstractMethodDeclaration) referenceContext).modifiers & AccStrictfp) != 0) {
				// must check the parse node explicitly
				problemReporter().illegalModifierForMethod((AbstractMethodDeclaration) referenceContext);
			}
			modifiers |= AccPrivate; // enum constructor is implicitly private
		} else if ((realModifiers & unexpectedModifiers) != 0) {
			problemReporter().illegalModifierForMethod((AbstractMethodDeclaration) referenceContext);
			modifiers &= ~AccJustFlag | ~unexpectedModifiers;
		} else if ((((AbstractMethodDeclaration) referenceContext).modifiers & AccStrictfp) != 0) {
			// must check the parse node explicitly
			problemReporter().illegalModifierForMethod((AbstractMethodDeclaration) referenceContext);
		}

		// check for incompatible modifiers in the visibility bits, isolate the visibility bits
		int accessorBits = realModifiers & (AccPublic | AccProtected | AccPrivate);
		if ((accessorBits & (accessorBits - 1)) != 0) {
			problemReporter().illegalVisibilityModifierCombinationForMethod(declaringClass, (AbstractMethodDeclaration) referenceContext);

			// need to keep the less restrictive so disable Protected/Private as necessary
			if ((accessorBits & AccPublic) != 0) {
				if ((accessorBits & AccProtected) != 0)
					modifiers &= ~AccProtected;
				if ((accessorBits & AccPrivate) != 0)
					modifiers &= ~AccPrivate;
			} else if ((accessorBits & AccProtected) != 0 && (accessorBits & AccPrivate) != 0) {
				modifiers &= ~AccPrivate;
			}
		}

		// if the receiver's declaring class is a private nested type, then make sure the receiver is not private (causes problems for inner type emulation)
		if (declaringClass.isPrivate() && (modifiers & AccPrivate) != 0)
			modifiers &= ~AccPrivate;

		methodBinding.modifiers = modifiers;
	}

