protected char[] computeUniqueKey(MethodBinding methodBinding, boolean isLeaf) {
	// declaring class 
	char[] declaringKey = this.declaringClass.computeUniqueKey(false/*not a leaf*/);
	int declaringLength = declaringKey.length;
	
	// selector
	int selectorLength = this.selector == TypeConstants.INIT ? 0 : this.selector.length;
	
	// generic signature
	char[] sig = methodBinding.genericSignature();
	if (sig == null) sig = methodBinding.signature();
	int signatureLength = sig.length;
	
	if (isLeaf) {
		// flags
		String flags = Integer.toString(methodBinding.getAccessFlags());
		int flagsLength = flags.length();
		
		char[] uniqueKey = new char[declaringLength + 1 + selectorLength + signatureLength + 1 + flagsLength];
		int index = 0;
		System.arraycopy(declaringKey, 0, uniqueKey, index, declaringLength);
		index = declaringLength;
		uniqueKey[index++] = '.';
		System.arraycopy(this.selector, 0, uniqueKey, index, selectorLength);
		index += selectorLength;
		System.arraycopy(sig, 0, uniqueKey, index, signatureLength);
		index += signatureLength;
		uniqueKey[index++] = '^';
		flags.getChars(0, flagsLength, uniqueKey, index);
		// index += modifiersLength
		return uniqueKey;
	} else {
		char[] uniqueKey = new char[declaringLength + 1 + selectorLength + signatureLength];
		int index = 0;
		System.arraycopy(declaringKey, 0, uniqueKey, index, declaringLength);
		index = declaringLength;
		uniqueKey[index++] = '.';
		System.arraycopy(this.selector, 0, uniqueKey, index, selectorLength);
		index += selectorLength;
		System.arraycopy(sig, 0, uniqueKey, index, signatureLength);
		//index += signatureLength;
		return uniqueKey;
	}
}

