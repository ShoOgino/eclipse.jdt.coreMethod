/**
 * The type of x.clone() is substituted from 'Object' into the type of the receiver array (non-null)
 */
public MethodBinding getCloneMethod(final MethodBinding originalMethod) {
	if (this.clone != null)
		return this.clone;
	MethodBinding method = new MethodBinding() {
		@Override
		public char[] signature(ClassFile classFile) {
			return originalMethod.signature(); // for codeGen we need to answer the signature of j.l.Object.clone()
		}
	};
	method.modifiers = originalMethod.modifiers;
	method.selector = originalMethod.selector;
	method.declaringClass = originalMethod.declaringClass; // cannot set array binding as declaring class, will be tweaked in CodeStream.getConstantPoolDeclaringClass()
	method.typeVariables = Binding.NO_TYPE_VARIABLES;
	method.parameters = originalMethod.parameters;
	method.thrownExceptions = Binding.NO_EXCEPTIONS;
	method.tagBits = originalMethod.tagBits;
	method.returnType = this.environment.globalOptions.sourceLevel >= ClassFileConstants.JDK1_5 ? this : originalMethod.returnType;
	if (this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) {
		if (this.environment.usesNullTypeAnnotations())
			method.returnType = this.environment.createAnnotatedType(method.returnType, new AnnotationBinding[] { this.environment.getNonNullAnnotation() });
		else
			method.tagBits |= TagBits.AnnotationNonNull;
	}
	if ((method.returnType.tagBits & TagBits.HasMissingType) != 0) {
		method.tagBits |=  TagBits.HasMissingType;
	}
	return this.clone = method;
}

