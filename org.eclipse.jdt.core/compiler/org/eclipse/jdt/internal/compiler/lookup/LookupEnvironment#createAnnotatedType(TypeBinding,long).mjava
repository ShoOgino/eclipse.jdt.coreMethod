/**
 * Create a ParameterizedTypeBinding or ArrayBinding which represents the same structure as the given genericType,
 * but with type annotations as given by 'annotationBits' (TagBits.AnnotationNonNull or TagBits.AnnotationNullable).
 */
public TypeBinding createAnnotatedType(TypeBinding genericType, long annotationBits) {
	if (genericType instanceof UnresolvedReferenceBinding) {
		// clone so we don't interfere with future lookups:
		return new UnresolvedReferenceBinding((UnresolvedReferenceBinding)genericType, annotationBits);
	}
	if (genericType instanceof ReferenceBinding) {
		TypeBinding[] typeArguments = genericType.isParameterizedType() ? ((ParameterizedTypeBinding) genericType).arguments : null;
		ParameterizedTypeBinding parameterizedType = createParameterizedType((ReferenceBinding) genericType, typeArguments, 
																			annotationBits, genericType.enclosingType());
		parameterizedType.id = genericType.id; // for well-known types shared the id (only here since those types are not generic, are they?)
		return parameterizedType;
	} else if (genericType instanceof ArrayBinding) {
		long[] tagBitsPerDims = ((ArrayBinding) genericType).nullTagBitsPerDimension;
		if (tagBitsPerDims == null)
			tagBitsPerDims = new long[genericType.dimensions()+1];
		if (tagBitsPerDims[0] != annotationBits) {
			tagBitsPerDims[0] = annotationBits;
			return createArrayType(genericType.leafComponentType(), genericType.dimensions(), tagBitsPerDims);
		}
	}
	// TODO(stephan): PolyTypeBinding
	return genericType;
}

