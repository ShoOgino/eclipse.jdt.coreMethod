    /**
     * Returns a type, where original type was substituted using the receiver
     * parameterized method.
     */
    public TypeBinding substitute(TypeBinding originalType) {
        
		switch (originalType.bindingType()) {
			
			case Binding.TYPE_PARAMETER:
    	        TypeVariableBinding originalVariable = (TypeVariableBinding) originalType;
    	        TypeVariableBinding[] variables = this.originalMethod.typeVariables;
    	        int length = variables.length;
    	        // check this variable can be substituted given parameterized type
   		        if (originalVariable.rank < length && variables[originalVariable.rank] == originalVariable) {
					return this.typeArguments[originalVariable.rank];
   		        }
   		        break;
       		       
			case Binding.PARAMETERIZED_TYPE:
    	        ParameterizedTypeBinding originalParameterizedType = (ParameterizedTypeBinding) originalType;
    	        TypeBinding[] originalArguments = originalParameterizedType.arguments;
    	        if (originalArguments != null) {
	    	        TypeBinding[] substitutedArguments = Scope.substitute(this, originalArguments);
	    	        if (substitutedArguments != originalArguments) {
						identicalVariables: { // if substituted with original variables, then answer the generic type itself
							TypeVariableBinding[] originalVariables = originalParameterizedType.type.typeVariables();
							length = originalVariables.length;
							for (int i = 0; i < length; i++) {
								if (substitutedArguments[i] != originalVariables[i]) break identicalVariables;
							}
							return originalParameterizedType.type;
						}    	        	
	    	            return this.environment.createParameterizedType(
	    	                    originalParameterizedType.type, substitutedArguments, originalParameterizedType.enclosingType());
	        	    } 
    	        }
    	        break;
    	        
			case Binding.ARRAY_TYPE:
				TypeBinding originalLeafComponentType = originalType.leafComponentType();
				TypeBinding substitute = substitute(originalLeafComponentType); // substitute could itself be array type
				if (substitute != originalLeafComponentType) {
					return this.environment.createArrayType(substitute.leafComponentType(), substitute.dimensions() + originalType.dimensions());
				}
				break;
				
			case Binding.WILDCARD_TYPE:
		        WildcardBinding wildcard = (WildcardBinding) originalType;
		        if (wildcard.kind != Wildcard.UNBOUND) {
			        TypeBinding originalBound = wildcard.bound;
			        TypeBinding substitutedBound = substitute(originalBound);
			        if (substitutedBound != originalBound) {
		        		return this.environment.createWildcard(wildcard.genericType, wildcard.rank, substitutedBound, wildcard.kind);
			        }
		        }
		        break;

			case Binding.GENERIC_TYPE:
			    // treat as if parameterized with its type variables
				ReferenceBinding originalGenericType = (ReferenceBinding) originalType;
				TypeVariableBinding[] originalVariables = originalGenericType.typeVariables();
				length = originalVariables.length;
				System.arraycopy(originalVariables, 0, originalArguments = new TypeBinding[length], 0, length);
				TypeBinding[] substitutedArguments = Scope.substitute(this, originalArguments);
				if (substitutedArguments != originalArguments) {
					return this.environment.createParameterizedType(
							originalGenericType, substitutedArguments, null);
				}
				break;
        }
        return originalType;
    }

