	public final boolean canBeSeenBy(Scope scope) {
		if (isPublic())
			return true;

		SourceTypeBinding invocationType = scope.enclosingSourceType();
		if (invocationType == this)
			return true;

		if (isProtected()) {
			// answer true if the receiver (or its enclosing type) is the superclass 
			//	of the invocationType or in the same package
			return invocationType.fPackage == fPackage
				|| isSuperclassOf(invocationType)
				|| enclosingType().isSuperclassOf(invocationType);
			// protected types always have an enclosing one
		}

		if (isPrivate()) {
			// answer true if the receiver and the invocationType have a common enclosingType
			// already know they are not the identical type
			ReferenceBinding outerInvocationType = invocationType;
			ReferenceBinding temp = outerInvocationType.enclosingType();
			while (temp != null) {
				outerInvocationType = temp;
				temp = temp.enclosingType();
			}

			ReferenceBinding outerDeclaringClass = this;
			temp = outerDeclaringClass.enclosingType();
			while (temp != null) {
				outerDeclaringClass = temp;
				temp = temp.enclosingType();
			}
			return outerInvocationType == outerDeclaringClass;
		}

		// isDefault()
		return invocationType.fPackage == fPackage;
	}

