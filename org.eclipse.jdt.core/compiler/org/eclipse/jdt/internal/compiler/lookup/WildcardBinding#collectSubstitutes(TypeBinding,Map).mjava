	/**
	 * Collect the substitutes into a map for certain type variables inside the receiver type
	 * e.g.   Collection<T>.collectSubstitutes(Collection<List<X>>, Map), will populate Map with: T --> List<X>
	 */
	public void collectSubstitutes(TypeBinding otherType, Map substitutes) {

		if (this.bound == null)
			return;
		if (otherType.isWildcard()) {
			WildcardBinding otherWildcard = (WildcardBinding) otherType;
			if (otherWildcard.bound != null) {
				this.bound.collectSubstitutes(otherWildcard.bound, substitutes);
	        	for (int i = 0, length = otherWildcard.otherBounds == null ? 0 : otherWildcard.otherBounds.length; i < length; i++) {
					this.bound.collectSubstitutes(otherWildcard.otherBounds[i], substitutes);
	        	}
			}
		} else {
            this.bound.collectSubstitutes(otherType, substitutes);
            // check other bounds (lub scenario)
        	for (int i = 0, length = this.otherBounds == null ? 0 : this.otherBounds.length; i < length; i++) {
        		this.otherBounds[i].collectSubstitutes(otherType, substitutes);
        	}
		}	    
	}

