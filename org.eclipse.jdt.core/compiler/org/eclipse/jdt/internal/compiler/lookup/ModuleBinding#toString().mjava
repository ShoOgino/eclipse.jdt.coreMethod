	public String toString() {
		StringBuffer buffer = new StringBuffer(30);
		buffer.append("module " + new String(readableName())); //$NON-NLS-1$
		if (this.requires.length > 0) {
			buffer.append("\n/*    requires    */\n"); //$NON-NLS-1$
			for (int i = 0; i < this.requires.length; i++) {
				buffer.append("\n\t"); //$NON-NLS-1$
				if (this.requires[i].isTransitive())
					buffer.append("public "); //$NON-NLS-1$
				buffer.append(this.requires[i].name());
			}
		} else {
			buffer.append("\nNo Requires"); //$NON-NLS-1$
		}
		printPackageVisibility(buffer, this.exports, "\n/*    exports    */\n", "\nNo Exports"); //$NON-NLS-1$ //$NON-NLS-2$
		printPackageVisibility(buffer, this.opens, "\n/*    opens    */\n", "\nNo Opens"); //$NON-NLS-1$ //$NON-NLS-2$
		if (this.uses != null && this.uses.length > 0) {
			buffer.append("\n/*    uses    /*\n"); //$NON-NLS-1$
			for (int i = 0; i < this.uses.length; i++) {
				buffer.append("\n\t"); //$NON-NLS-1$
				buffer.append(this.uses[i].debugName());
			}
		} else {
			buffer.append("\nNo Uses"); //$NON-NLS-1$
		}
		if (this.services != null && this.services.length > 0) {
			buffer.append("\n/*    Services    */\n"); //$NON-NLS-1$
			for (Service s : this.services) {
				buffer.append("\nprovides "); //$NON-NLS-1$
				buffer.append(s.service.qualifiedSourceName());
				buffer.append(" with "); //$NON-NLS-1$
				buffer.append(Stream.of(s.implementations).map(t -> new String(t.qualifiedSourceName())).collect(Collectors.joining(", ")));//$NON-NLS-1$
				buffer.append(";"); //$NON-NLS-1$
			}
		} else {
			buffer.append("\nNo Services"); //$NON-NLS-1$
		}
		return buffer.toString();
	}

