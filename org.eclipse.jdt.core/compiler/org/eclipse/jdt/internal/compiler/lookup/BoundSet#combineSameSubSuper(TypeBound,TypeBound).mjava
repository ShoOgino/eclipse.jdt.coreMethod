	private ConstraintFormula combineSameSubSuper(TypeBound boundS, TypeBound boundT) {
		//  α = S and α <: T imply ⟨S <: T⟩ 
		//  α = S and T <: α imply ⟨T <: S⟩
		InferenceVariable alpha = boundS.left;
		TypeBinding s = boundS.right;
		if (alpha == boundT.left) //$IDENTITY-COMPARISON$ InferenceVariable
			return new ConstraintTypeFormula(s, boundT.right, boundT.relation);
		if (alpha == boundT.right) //$IDENTITY-COMPARISON$ InferenceVariable
			return new ConstraintTypeFormula(boundT.right, s, boundT.relation);

		if (boundS.right instanceof InferenceVariable) {
			// reverse:
			alpha = (InferenceVariable) boundS.right;
			s = boundS.left;
			if (alpha == boundT.left) //$IDENTITY-COMPARISON$ InferenceVariable
				return new ConstraintTypeFormula(s, boundT.right, boundT.relation);
			if (alpha == boundT.right) //$IDENTITY-COMPARISON$ InferenceVariable
				return new ConstraintTypeFormula(boundT.right, s, boundT.relation);			
		}
		
		//  α = U and S <: T imply ⟨S[α:=U] <: T[α:=U]⟩ 
		TypeBinding u = boundS.right;
		if (u.isProperType(true)) {
			TypeBinding left = (alpha == boundT.left) ? u : boundT.left; //$IDENTITY-COMPARISON$ InferenceVariable
			TypeBinding right = boundT.right.substituteInferenceVariable(alpha, u);
			return new ConstraintTypeFormula(left, right, boundT.relation);
		}
		return null;
	}

