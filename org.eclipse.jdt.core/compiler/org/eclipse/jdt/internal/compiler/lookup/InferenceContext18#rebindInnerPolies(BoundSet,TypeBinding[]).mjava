	/**
	 * After inference has finished, iterate all inner poly expressions, that have been
	 * included in the inference. For each of these update some type information
	 * from the inference result and perhaps trigger follow-up resolving as needed.
	 */
	public void rebindInnerPolies(BoundSet bounds, TypeBinding[] argumentTypes) {
		int len = this.innerPolies.size();
		for (int i = 0; i < len; i++) {
			Expression inner = (Expression) this.innerPolies.get(i);
			if (inner instanceof Invocation) {
				Invocation innerMessage = (Invocation) inner;
				MethodBinding original = innerMessage.binding().original();

				// apply inference results onto the allocation type of inner diamonds:
				if (original.isConstructor() && inner.isPolyExpression()) {
					ReferenceBinding declaringClass = original.declaringClass;
					TypeBinding[] arguments = getSolutions(declaringClass.typeVariables(), innerMessage, bounds);
					declaringClass = this.environment.createParameterizedType(declaringClass, arguments, declaringClass.enclosingType());
					original = ((ParameterizedTypeBinding)declaringClass).createParameterizedMethod(original);
				}
				
				// apply inference results onto the binding of the inner invocation:
				TypeBinding[] solutions = getSolutions(original.typeVariables(), innerMessage, bounds);
				if (solutions == null) 
					continue; // play safe, but shouldn't happen in a resolved context
				ParameterizedGenericMethodBinding innerBinding = this.environment.createParameterizedGenericMethod(original, solutions);
				innerMessage.updateBindings(innerBinding);
				innerMessage.markInferenceFinished(); // invocation type inference has already happened on the inner, too.
				
				// finalize resolving of arguments of the inner invocation:
				TypeBinding[] innerParameters = innerBinding.parameters;
				int inferenceKind = innerMessage.inferenceKind();
				boolean isVarargs = (inferenceKind == CHECK_VARARG) && innerBinding.isVarargs();
				TypeBinding varArgsType = isVarargs ? ((ArrayBinding)innerParameters[innerParameters.length-1]).elementsType() : null; 
				Expression[] arguments = innerMessage.arguments();
				if (arguments != null) {
					for (int j = 0; j < arguments.length; j++) {
						TypeBinding param = (varArgsType == null || (j < innerParameters.length-1))
												? innerParameters[j]
												: varArgsType;
						arguments[j].checkAgainstFinalTargetType(param);
					}
				}
			}
			// inner FunctionalExpression don't seem to be included in inference.
			// TODO recheck any inquires on those actually involve inference of which the results are included here. 
		}
	}

