	/**
	 * Simplified API to perform Invocation Type Inference (JLS 18.5.2)
	 * and (if successful) return the solution.
	 * @param invocation invocation being inferred
	 * @param targetType target type for this invocation
	 * @return a method binding with updated type parameters, or null if no solution was found
	 */
	public MethodBinding getInvocationTypeInferenceSolution(Invocation invocation, TypeBinding targetType) {
		// start over from a previous candidate but discard its type variable instantiations
		// TODO: should we retain any instantiations of type variables not owned by the method? 
		MethodBinding method = invocation.binding().original();
		BoundSet result = null;
		try {
			result = inferInvocationType(this.currentBounds, targetType, invocation, method, invocation.inferenceKind());
		} catch (InferenceFailureException e) {
			return null;
		}
		if (result != null) {
			TypeBinding[] solutions = getSolutions(method.typeVariables(), invocation, result);
			if (solutions != null)
				return this.environment.createParameterizedGenericMethod(method, solutions);
		}
		return null;
	}

