public final boolean canBeSeenBy(ReferenceBinding receiverType, SourceTypeBinding invocationType) {
	if (isPublic()) return true;

	if (invocationType == this && invocationType == receiverType) return true;

	if (isProtected()) {
		// answer true if the invocationType is the receiver (or its enclosingType) or they are in the same package
		// OR the invocationType is a subclass of the enclosingType
		//    AND the receiverType is the invocationType or its subclass
		if (invocationType == this) return true;
		if (invocationType.fPackage == fPackage) return true;
		ReferenceBinding declaringClass = enclosingType();
		if (declaringClass != null){ // could be null if incorrect top-level protected type
			if (invocationType == declaringClass) return true;
			if (declaringClass.isSuperclassOf(invocationType))
				return invocationType == receiverType || invocationType.isSuperclassOf(receiverType);
		}
		return false;
	}

	if (isPrivate()) {
		// answer true if the receiverType is the receiver or its enclosingType
		// AND the invocationType and the receiver have a common enclosingType
		if (!(receiverType == this || receiverType == enclosingType())) return false;
		
		if (invocationType != this) {
			ReferenceBinding outerInvocationType = invocationType;
			ReferenceBinding temp = outerInvocationType.enclosingType();
			while (temp != null) {
				outerInvocationType = temp;
				temp = temp.enclosingType();
			}

			ReferenceBinding outerDeclaringClass = this;
			temp = outerDeclaringClass.enclosingType();
			while (temp != null) {
				outerDeclaringClass = temp;
				temp = temp.enclosingType();
			}
			if (outerInvocationType != outerDeclaringClass) return false;
		}
		return true;
	}

	// isDefault()
	if (invocationType.fPackage != fPackage) return false;

	ReferenceBinding type = receiverType;
	ReferenceBinding declaringClass = enclosingType() == null ? this : enclosingType();
	do {
		if (declaringClass == type) return true;
		if (fPackage != type.fPackage) return false;
	} while ((type = type.superclass()) != null);
	return false;
}
/* Answer true if the receiver is visible to the type provided by the scope.
*
* NOTE: Cannot invoke this method with a compilation unit scope.
*/

