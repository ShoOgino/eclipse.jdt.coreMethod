@Override
public ElementValuePair[] getElementValuePairs() {
	if (this.env != null) {
		if (this.typeUnresolved) {
			resolve();
		}
		// resolve method binding and value type (if unresolved) for each pair
		for (int i = this.pairs.length; --i >= 0;) {
			ElementValuePair pair = this.pairs[i];
			MethodBinding[] methods = this.type.getMethods(pair.getName());
			// there should be exactly one since the type is an annotation type.
			if (methods != null && methods.length == 1) {
				pair.setMethodBinding(methods[0]);
			} // else silently leave a null there
			Object value = pair.getValue();
			boolean wasToleratingMissingTypeProcessingAnnotations = this.env.mayTolerateMissingType;
			this.env.mayTolerateMissingType = true; // https://bugs.eclipse.org/bugs/show_bug.cgi?id=360164
			try {
				if (value instanceof UnresolvedReferenceBinding) {
					pair.setValue(((UnresolvedReferenceBinding) value).
							resolve(this.env, false));
								// no parameterized types in annotation values
				} else if (value instanceof Object[]) {
					Object[] values = (Object[]) value;
					for (int j = 0; j < values.length; j++) {
						if (values[j] instanceof UnresolvedReferenceBinding) {
							values[j] = ((UnresolvedReferenceBinding) values[j]).resolve(this.env, false);
						}
					}
				} // do nothing for UnresolvedAnnotationBinding-s, since their
				  // content is only accessed through get* methods
			} finally {
				this.env.mayTolerateMissingType = wasToleratingMissingTypeProcessingAnnotations;
			}
		}
		this.env = null;
	}
	return this.pairs;
}

