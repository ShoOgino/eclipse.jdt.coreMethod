/** Collect answers from the oracle concerning the given clientModule and each of its required modules. */
private NameEnvironmentAnswer[] askForTypeFromModules(ModuleBinding clientModule, Function<ModuleBinding,NameEnvironmentAnswer> oracle)
{
	if (clientModule.nameForLookup() == ModuleBinding.ANY) {
		NameEnvironmentAnswer answer = oracle.apply(clientModule);
		if (answer != null)
			answer.moduleBinding = this.root.getModuleFromAnswer(answer);
		return new NameEnvironmentAnswer[] { answer };
	} else {
		ModuleBinding[] requiredModules = clientModule.getAllRequiredModules();
		NameEnvironmentAnswer[] answers = new NameEnvironmentAnswer[requiredModules.length+1];
		boolean found = false;
		NameEnvironmentAnswer answer = oracle.apply(clientModule);
		if (answer != null) {
			answer.moduleBinding = clientModule;
			answers[answers.length-1] = answer;
			found = true;
		}
		for (int i = 0; i < requiredModules.length; i++) {
			answer = oracle.apply(requiredModules[i]);
			if (answer != null) {
				answer.moduleBinding = requiredModules[i];
				answers[i] = answer;
				found = true;
			}
		}
		return found ? answers : null;
	}
}

