	public String toString() {
		String s = "";

		if (isDeprecated())
			s += "deprecated ";
		if (isPublic())
			s += "public ";
		if (isProtected())
			s += "protected ";
		if (isPrivate())
			s += "private ";
		if (isAbstract() && isClass())
			s += "abstract ";
		if (isStatic() && isNestedType())
			s += "static ";
		if (isFinal())
			s += "final ";

		s += isInterface() ? "interface " : "class ";
		s += (compoundName != null)
			? CharOperation.toString(compoundName)
			: "UNNAMED TYPE";

		s += "\n\textends ";
		s += (superclass != null) ? superclass.debugName() : "NULL TYPE";

		if (superInterfaces != null) {
			if (superInterfaces != NoSuperInterfaces) {
				s += "\n\timplements : ";
				for (int i = 0, length = superInterfaces.length; i < length; i++) {
					if (i > 0)
						s += ", ";
					s += (superInterfaces[i] != null)
						? superInterfaces[i].debugName()
						: "NULL TYPE";
				}
			}
		} else {
			s += "NULL SUPERINTERFACES";
		}

		if (enclosingType != null) {
			s += "\n\tenclosing type : ";
			s += enclosingType.debugName();
		}

		if (fields != null) {
			if (fields != NoFields) {
				s += "\n/*   fields   */";
				for (int i = 0, length = fields.length; i < length; i++)
					s += (fields[i] != null) ? "\n" + fields[i].toString() : "\nNULL FIELD";
			}
		} else {
			s += "NULL FIELDS";
		}

		if (methods != null) {
			if (methods != NoMethods) {
				s += "\n/*   methods   */";
				for (int i = 0, length = methods.length; i < length; i++)
					s += (methods[i] != null) ? "\n" + methods[i].toString() : "\nNULL METHOD";
			}
		} else {
			s += "NULL METHODS";
		}

		if (memberTypes != null) {
			if (memberTypes != NoMemberTypes) {
				s += "\n/*   members   */";
				for (int i = 0, length = memberTypes.length; i < length; i++)
					s += (memberTypes[i] != null)
						? "\n" + memberTypes[i].toString()
						: "\nNULL TYPE";
			}
		} else {
			s += "NULL MEMBER TYPES";
		}

		s += "\n\n\n";
		return s;
	}

