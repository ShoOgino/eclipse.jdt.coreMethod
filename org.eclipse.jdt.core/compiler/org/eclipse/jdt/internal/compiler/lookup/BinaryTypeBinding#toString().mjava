public String toString() {
	String s = ""/*nonNLS*/;

	if (isDeprecated()) s += "deprecated "/*nonNLS*/;
	if (isPublic()) s += "public "/*nonNLS*/;
	if (isProtected()) s += "protected "/*nonNLS*/;
	if (isPrivate()) s += "private "/*nonNLS*/;
	if (isAbstract() && isClass()) s += "abstract "/*nonNLS*/;
	if (isStatic() && isNestedType()) s += "static "/*nonNLS*/;
	if (isFinal()) s += "final "/*nonNLS*/;

	s += isInterface() ? "interface "/*nonNLS*/ : "class "/*nonNLS*/;
	s += (compoundName != null) ? CharOperation.toString(compoundName) : "UNNAMED TYPE"/*nonNLS*/;

	s += "\n\textends "/*nonNLS*/;
	s += (superclass != null) ? superclass.debugName() : "NULL TYPE"/*nonNLS*/;

	if (superInterfaces != null) {
		if (superInterfaces != NoSuperInterfaces) {
			s += "\n\timplements : "/*nonNLS*/;
			for (int i = 0, length = superInterfaces.length; i < length; i++) {
				if (i  > 0)
					s += ", "/*nonNLS*/;
				s += (superInterfaces[i] != null) ? superInterfaces[i].debugName() : "NULL TYPE"/*nonNLS*/;
			}
		}
	} else {
		s += "NULL SUPERINTERFACES"/*nonNLS*/;
	}

	if (enclosingType != null) {
		s += "\n\tenclosing type : "/*nonNLS*/;
		s += enclosingType.debugName();
	}

	if (fields != null) {
		if (fields != NoFields) {
			s += "\n/*   fields   */"/*nonNLS*/;
			for (int i = 0, length = fields.length; i < length; i++)
				s += (fields[i] != null) ? "\n"/*nonNLS*/ + fields[i].toString() : "\nNULL FIELD"/*nonNLS*/;
		}
	} else {
		s += "NULL FIELDS"/*nonNLS*/;
	}

	if (methods != null) {
		if (methods != NoMethods) {
			s += "\n/*   methods   */"/*nonNLS*/;
			for (int i = 0, length = methods.length; i < length; i++)
				s += (methods[i] != null) ? "\n"/*nonNLS*/ + methods[i].toString() : "\nNULL METHOD"/*nonNLS*/;
		}
	} else {
		s += "NULL METHODS"/*nonNLS*/;
	}

	if (memberTypes != null) {
		if (memberTypes != NoMemberTypes) {
			s += "\n/*   members   */"/*nonNLS*/;
			for (int i = 0, length = memberTypes.length; i < length; i++)
				s += (memberTypes[i] != null) ? "\n"/*nonNLS*/ + memberTypes[i].toString() : "\nNULL TYPE"/*nonNLS*/;
		}
	} else {
		s += "NULL MEMBER TYPES"/*nonNLS*/;
	}

	s += "\n\n\n"/*nonNLS*/;
	return s;
}

