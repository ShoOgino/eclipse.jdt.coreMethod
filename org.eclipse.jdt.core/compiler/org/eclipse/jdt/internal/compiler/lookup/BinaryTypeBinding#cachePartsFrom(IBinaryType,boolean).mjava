void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods) {
	char[] superclassName = binaryType.getSuperclassName();
	if (superclassName != null)
		// attempt to find the superclass if it exists in the cache (otherwise - resolve it when requested)
		this.superclass = environment.getTypeFromConstantPoolName(superclassName, 0, -1);

	char[] enclosingTypeName = binaryType.getEnclosingTypeName();
	if (enclosingTypeName != null) {
		// attempt to find the enclosing type if it exists in the cache (otherwise - resolve it when requested)
		this.enclosingType = environment.getTypeFromConstantPoolName(enclosingTypeName, 0, -1);
		this.tagBits |= MemberTypeMask;   // must be a member type not a top-level or local type
		if (this.enclosingType().isStrictfp())
			this.modifiers |= AccStrictfp;
		if (this.enclosingType().isDeprecated())
			this.modifiers |= AccDeprecatedImplicitly;
	}

	this.memberTypes = NoMemberTypes;
	IBinaryNestedType[] memberTypeStructures = binaryType.getMemberTypes();
	if (memberTypeStructures != null) {
		int size = memberTypeStructures.length;
		if (size > 0) {
			this.memberTypes = new ReferenceBinding[size];
			for (int i = 0; i < size; i++)
				// attempt to find each member type if it exists in the cache (otherwise - resolve it when requested)
				this.memberTypes[i] = environment.getTypeFromConstantPoolName(memberTypeStructures[i].getName(), 0, -1);
		}
	}

	this.superInterfaces = NoSuperInterfaces;
	char[][] interfaceNames = binaryType.getInterfaceNames();
	if (interfaceNames != null) {
		int size = interfaceNames.length;
		if (size > 0) {
			this.superInterfaces = new ReferenceBinding[size];
			for (int i = 0; i < size; i++)
				// attempt to find each superinterface if it exists in the cache (otherwise - resolve it when requested)
				this.superInterfaces[i] = environment.getTypeFromConstantPoolName(interfaceNames[i], 0, -1);
		}
	}
	if (needFieldsAndMethods) {
		createFields(binaryType.getFields());
		createMethods(binaryType.getMethods());
	} else { // protect against incorrect use of the needFieldsAndMethods flag, see 48459
		this.fields = NoFields;
		this.methods = NoMethods;
	}
}

