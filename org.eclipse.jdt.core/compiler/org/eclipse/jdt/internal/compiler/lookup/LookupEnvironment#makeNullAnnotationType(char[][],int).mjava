private ReferenceBinding makeNullAnnotationType(char[][] compoundName, int typeId) {
	char[][] packageName = CharOperation.subarray(compoundName, 0, compoundName.length-1);
	PackageBinding packageBinding = createPackage(packageName);
	ReferenceBinding typeBinding = packageBinding.getType(compoundName[compoundName.length-1]);
	if (typeBinding != null && typeBinding.isValidBinding())
		this.problemReporter.conflictingTypeEmulation(compoundName); // does not return

	BinaryTypeBinding emulatedType = new BinaryTypeBinding();
	emulatedType.compoundName = compoundName;
	emulatedType.sourceName = compoundName[compoundName.length-1];
	emulatedType.modifiers = ClassFileConstants.AccAnnotation | ClassFileConstants.AccPublic;
	emulatedType.fields = Binding.NO_FIELDS;
	emulatedType.methods = Binding.NO_METHODS;
	emulatedType.memberTypes = Binding.NO_MEMBER_TYPES;
	emulatedType.superclass = getType(TypeConstants.JAVA_LANG_OBJECT);
	emulatedType.superInterfaces = Binding.NO_SUPERINTERFACES;
	emulatedType.fPackage = packageBinding;
	emulatedType.typeVariables = Binding.NO_TYPE_VARIABLES;
	emulatedType.tagBits = TagBits.AreFieldsComplete | TagBits.AreFieldsSorted 
							| TagBits.AreMethodsComplete | TagBits.AreMethodsSorted 
							| TagBits.HasNoMemberTypes | TagBits.TypeVariablesAreConnected
							| TagBits.AnnotationClassRetention 
							| TagBits.AnnotationForMethod | TagBits.AnnotationForParameter 
							| TagBits.AnnotationForLocalVariable ;
	emulatedType.id = typeId;
	
	packageBinding.addType(emulatedType);

	return emulatedType;
}

