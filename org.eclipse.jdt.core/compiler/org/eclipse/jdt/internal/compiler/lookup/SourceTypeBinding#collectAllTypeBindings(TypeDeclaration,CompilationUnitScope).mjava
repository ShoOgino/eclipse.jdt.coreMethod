public List<SourceTypeBinding> collectAllTypeBindings(TypeDeclaration typeDecl, CompilationUnitScope unitScope) {
	class TypeBindingsCollector extends ASTVisitor {
		List<SourceTypeBinding> types = new ArrayList<>();
		@Override
		public boolean visit(
				TypeDeclaration localTypeDeclaration,
				BlockScope scope1) {
				checkAndAddBinding(localTypeDeclaration.binding);
				return true;
			}
			@Override
			public boolean visit(
				TypeDeclaration memberTypeDeclaration,
				ClassScope scope1) {
				checkAndAddBinding(memberTypeDeclaration.binding);
				return true;
			}
			@Override
			public boolean visit(
				TypeDeclaration typeDeclaration,
				CompilationUnitScope scope1) {
				checkAndAddBinding(typeDeclaration.binding);
				return true; // do nothing by default, keep traversing
			}
			private void checkAndAddBinding(SourceTypeBinding stb) {
				if (stb != null)
					this.types.add(stb);
			}
	}
	TypeBindingsCollector typeCollector = new TypeBindingsCollector();
	typeDecl.traverse(typeCollector, unitScope);
	return typeCollector.types;
}

