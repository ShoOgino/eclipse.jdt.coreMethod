	public boolean isInsideDeprecatedCode(){
		switch(kind){
			case Scope.BLOCK_SCOPE :
			case Scope.METHOD_SCOPE :
				MethodScope methodScope = methodScope();
				if (!methodScope.isInsideInitializer()){
					// check method modifiers to see if deprecated
					MethodBinding context = ((AbstractMethodDeclaration)methodScope.referenceContext).binding;
					if (context != null && context.isViewedAsDeprecated()) {
						return true;
					}
				} else {
					SourceTypeBinding type = ((BlockScope)this).referenceType().binding;

					// inside field declaration ? check field modifier to see if deprecated
					if (methodScope.fieldDeclarationIndex != MethodScope.NotInFieldDecl) {
						for (int i = 0; i < type.fields.length; i++){
							if (type.fields[i].id == methodScope.fieldDeclarationIndex) {
								// currently inside this field initialization
								if (type.fields[i].isViewedAsDeprecated()){
									return true;
								}
								break;
							}
						}
					}
					if (type != null && type.isViewedAsDeprecated()) {
						return true;
					}
				}
				break;
			case Scope.CLASS_SCOPE :
				ReferenceBinding context = ((BlockScope)this).referenceType().binding;
				if (context != null && context.isViewedAsDeprecated()) {
					return true;
				}
				break;
		}
		return false;
	}

