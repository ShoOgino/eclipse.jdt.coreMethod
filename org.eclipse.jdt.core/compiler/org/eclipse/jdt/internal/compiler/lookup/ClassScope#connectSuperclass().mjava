	/*
		Our current belief based on available JCK tests is:
			inherited member types are visible as a potential superclass.
			inherited interfaces are not visible when defining a superinterface.
	
		Error recovery story:
			ensure the superclass is set to java.lang.Object if a problem is detected
			resolving the superclass.
	
		Answer false if an error was reported against the sourceType.
	*/
	private boolean connectSuperclass() {
		SourceTypeBinding sourceType = referenceContext.binding;
		if (referenceContext.superclass == null) {
			if (isJavaLangObject(sourceType))
				return true;
			sourceType.superclass = getJavaLangObject();
			return !detectCycle(sourceType, sourceType.superclass, null);
			// ensure Object is initialized if it comes from a source file
		}
		ReferenceBinding superclass = findSupertype(referenceContext.superclass);
		if (superclass != null) { // is null if a cycle was detected cycle
			if (!superclass.isValidBinding()) {
				problemReporter().invalidSuperclass(sourceType, referenceContext.superclass, superclass);
			} else if (superclass.isInterface()) {
				problemReporter().superclassMustBeAClass(sourceType, referenceContext.superclass, superclass);
			} else if (superclass.isFinal()) {
				problemReporter().classExtendFinalClass(sourceType, referenceContext.superclass, superclass);
			} else if (isJavaLangObject(sourceType)) {
				// can only happen if Object extends another type... will never happen unless we're testing for it.
				sourceType.tagBits |= HierarchyHasProblems;
				sourceType.superclass = null;
				return true;
			} else {
				// only want to reach here when no errors are reported
				referenceContext.superclass.binding = superclass;
				sourceType.superclass = superclass;
				return true;
			}
		}
		sourceType.tagBits |= HierarchyHasProblems;
		if (!isJavaLangObject(sourceType)) {
			sourceType.superclass = getJavaLangObject();
			if ((sourceType.superclass.tagBits & BeginHierarchyCheck) == 0)
				detectCycle(sourceType, sourceType.superclass, null);
			// ensure Object is initialized if it comes from a source file
		}
		return false; // reported some error against the source type
	}

