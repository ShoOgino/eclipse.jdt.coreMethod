/* Answer the synthetic argument for <targetEnclosingType> or null if one does not exist.
*/
public SyntheticArgumentBinding getSyntheticArgument(ReferenceBinding targetEnclosingType, boolean onlyExactMatch, boolean scopeIsConstructorCall) {
	if (this.enclosingInstances == null) return null;		// is null if no enclosing instances are known
	
	// exact match
	
	// firstly, during allocation, check and use the leftmost one (if possible) 
	// to handle cases involving two instances of same type, such as
	// class X {
	//   class Inner extends X {}
	//   void f(){
	//     new X().new Inner(){} 
	//     // here the result of (new X()) is passed as the first (synthetic) arg for ctor of new Inner(){}
	//     // (and (this) as the second, of course) 
	//   }
	// }
	if (scopeIsConstructorCall && this.enclosingInstances.length > 0)
		if (this.enclosingInstances[0].type == targetEnclosingType) 
			if (this.enclosingInstances[0].actualOuterLocalVariable == null)
				return this.enclosingInstances[0];
	
	// then check other possibility
	for (int i = this.enclosingInstances.length; --i >= 0;)
		if (this.enclosingInstances[i].type == targetEnclosingType)
			if (this.enclosingInstances[i].actualOuterLocalVariable == null)
				return this.enclosingInstances[i];

	// type compatibility : to handle cases such as
	// class T { class M{}}
	// class S extends T { class N extends M {}} --> need to use S as a default enclosing instance for the super constructor call in N().
	if (!onlyExactMatch){
		for (int i = this.enclosingInstances.length; --i >= 0;)
			if (this.enclosingInstances[i].actualOuterLocalVariable == null)
				if (this.enclosingInstances[i].type.findSuperTypeOriginatingFrom(targetEnclosingType) != null)
					return this.enclosingInstances[i];
	}
	return null;
}

