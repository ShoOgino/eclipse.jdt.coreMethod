	// pre: boundLeft.left != boundRight.left
	// pre: boundLeft.left != boundRight.right
	private ConstraintTypeFormula combineSameSubSuperWithProperType(TypeBound boundLeft, TypeBound boundRight,
			InferenceVariable alpha, TypeBound[] firstBounds, TypeBound[] nextBounds) {
		//  α = U and S <: T imply ⟨S[α:=U] <: T[α:=U]⟩
		TypeBinding u = boundLeft.right;

		if (enableOptimizationForBug543480 && isParameterizedDependency(boundRight)) {
			// Performance optimization: do not incorporate arguments one by one, which yielt 2^n new bounds (n=number of type arguments) in the past.
			// Instead, all arguments of a parameterized dependency are incorporated at once - but only when they are available.
			return incorporateIntoParameterizedDependencyIfAllArgumentsAreProperTypes(boundRight,
								firstBounds, nextBounds);
		}
		if (u.isProperType(true)) {
			boolean substitute = TypeBinding.equalsEquals(alpha, boundRight.left);
			TypeBinding left = substitute ? u : boundRight.left;
			TypeBinding right = boundRight.right.substituteInferenceVariable(alpha, u);
			substitute |= TypeBinding.notEquals(right, boundRight.right);
			if (substitute) // avoid redundant constraint
				return ConstraintTypeFormula.create(left, right, boundRight.relation, boundRight.isSoft||boundLeft.isSoft);
		}
		return null;
	}

