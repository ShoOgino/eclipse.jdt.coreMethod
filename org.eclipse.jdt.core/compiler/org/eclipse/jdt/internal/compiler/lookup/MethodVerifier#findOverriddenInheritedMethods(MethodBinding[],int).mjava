int[] findOverriddenInheritedMethods(MethodBinding[] methods, int length) {
	// inherited methods are added as we walk up the superclass hierarchy, then each superinterface
	// so method[1] from a class can NOT override method[0], but methods from superinterfaces can
	// since superinterfaces can be added from different superclasses or other superinterfaces
	int[] toSkip = null;
	if (length > 1) {
		int firstInterfaceMethod = length;
		nextMethod : for (int i = 0; i < length; i++) {
			if (toSkip != null && toSkip[i] == -1) continue nextMethod;
			ReferenceBinding declaringClass = methods[i].declaringClass;
			if (declaringClass.isInterface()) {
				if (firstInterfaceMethod == length)
					firstInterfaceMethod = i;
				for (int j = firstInterfaceMethod; j < length; j++) {
					if (i == j) continue;
					ReferenceBinding declaringClass2 = methods[j].declaringClass;
					if (declaringClass == declaringClass2) continue;
					if (declaringClass2.implementsInterface(declaringClass, true)) {
						if (toSkip == null)
							toSkip = new int[length];
						toSkip[i] = -1;
						continue nextMethod;
					}
				}
			} else { 
				for (int j = i + 1; j < firstInterfaceMethod; j++) {
					ReferenceBinding declaringClass2 = methods[j].declaringClass;
					if (declaringClass2.isInterface()) {
						// no methods from classes left
						firstInterfaceMethod = j;
						continue nextMethod;
					}
					if (declaringClass != declaringClass2 && declaringClass2.isSuperclassOf(declaringClass)) {
						if (toSkip == null)
							toSkip = new int[length];
						toSkip[j] = -1;
					}
				}
			}
		}
	}
	return toSkip;
}

