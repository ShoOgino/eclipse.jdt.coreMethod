// caveat: returns false if a method is implemented, but with a return type that is incompatible with that of the interface method
@Override
boolean isInterfaceMethodImplemented(MethodBinding inheritedMethod, MethodBinding existingMethod, ReferenceBinding superType) {
	if (inheritedMethod.original() != inheritedMethod && existingMethod.declaringClass.isInterface())
		return false; // must hold onto ParameterizedMethod to see if a bridge method is necessary

	inheritedMethod = computeSubstituteMethod(inheritedMethod, existingMethod);
	if (inheritedMethod == null	|| !doesMethodOverride(existingMethod, inheritedMethod))
		return false;
	return TypeBinding.equalsEquals(inheritedMethod.returnType, existingMethod.returnType)
			|| (TypeBinding.notEquals(this.type, existingMethod.declaringClass) // ... not if inheriting the bridge situation from a superclass
				&& !existingMethod.declaringClass.isInterface()
				&& areReturnTypesCompatible(existingMethod, inheritedMethod)); // may have to report incompatible return type
}

