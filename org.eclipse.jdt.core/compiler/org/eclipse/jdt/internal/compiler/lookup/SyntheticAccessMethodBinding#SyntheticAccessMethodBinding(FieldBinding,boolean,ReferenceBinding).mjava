public SyntheticAccessMethodBinding(FieldBinding targetField, boolean isReadAccess, ReferenceBinding declaringClass) {
	this.modifiers = AccDefault | AccStatic | AccSynthetic;
	SourceTypeBinding declaringSourceType = (SourceTypeBinding) declaringClass;
	SyntheticAccessMethodBinding[] knownAccessMethods = declaringSourceType.syntheticAccessMethods();
	int methodId = knownAccessMethods == null ? 0 : knownAccessMethods.length;
	this.index = methodId;
	this.selector = CharOperation.concat(AccessMethodPrefix, String.valueOf(methodId).toCharArray());
	if (isReadAccess) {
		this.returnType = targetField.type;
		if (targetField.isStatic()) {
			this.parameters = NoParameters;
		} else {
			this.parameters = new TypeBinding[1];
			this.parameters[0] = declaringSourceType;
		}
		this.targetReadField = targetField;
		this.accessType = FieldReadAccess;
	} else {
		this.returnType = VoidBinding;
		if (targetField.isStatic()) {
			this.parameters = new TypeBinding[1];
			this.parameters[0] = targetField.type;
		} else {
			this.parameters = new TypeBinding[2];
			this.parameters[0] = declaringSourceType;
			this.parameters[1] = targetField.type;
		}
		this.targetWriteField = targetField;
		this.accessType = FieldWriteAccess;
	}
	this.thrownExceptions = NoExceptions;
	this.declaringClass = declaringSourceType;

	// check for method collision
	boolean needRename;
	do {
		check : {
			needRename = false;
			// check for collision with known methods
			MethodBinding[] methods = declaringSourceType.methods;
			for (int i = 0, length = methods.length; i < length; i++) {
				if (this.selector == methods[i].selector && this.areParametersEqual(methods[i])) {
					needRename = true;
					break check;
				}
			}
			// check for collision with synthetic accessors
			if (knownAccessMethods != null) {
				for (int i = 0, length = knownAccessMethods.length; i < length; i++) {
					if (knownAccessMethods[i] == null) continue;
					if (this.selector == knownAccessMethods[i].selector && this.areParametersEqual(methods[i])) {
						needRename = true;
						break check;
					}
				}
			}
		}
		if (needRename) { // retry with a selector postfixed by a growing methodId
			this.selector(CharOperation.concat(AccessMethodPrefix, String.valueOf(++methodId).toCharArray()));
		}
	} while (needRename);

	// retrieve sourceStart position for the target field for line number attributes
	FieldDeclaration[] fieldDecls = declaringSourceType.scope.referenceContext.fields;
	if (fieldDecls != null) {
		for (int i = 0, max = fieldDecls.length; i < max; i++) {
			if (fieldDecls[i].binding == targetField) {
				this.sourceStart = fieldDecls[i].sourceStart;
				return;
			}
		}
	}

/* did not find the target field declaration - it is a synthetic one
	public class A {
		public class B {
			public class C {
				void foo() {
					System.out.println("A.this = " + A.this);
				}
			}
		}
		public static void main(String args[]) {
			new A().new B().new C().foo();
		}
	}	
*/
	// We now at this point - per construction - it is for sure an enclosing instance, we are going to
	// show the target field type declaration location.
	this.sourceStart = declaringSourceType.scope.referenceContext.sourceStart; // use the target declaring class name position instead
}

