public Binding getTypeOrPackage(char[] name) {
	PackageBinding packageBinding = getPackage0(name);
	if (packageBinding != null && packageBinding != LookupEnvironment.TheNotFoundPackage)
		return packageBinding;

	ReferenceBinding typeBinding = getType0(name);
	if (typeBinding != null && typeBinding != LookupEnvironment.TheNotFoundType) {
		if (typeBinding instanceof UnresolvedReferenceBinding)
			typeBinding = ((UnresolvedReferenceBinding) typeBinding).resolve(environment);
		if (typeBinding.isNestedType())
			return new ProblemReferenceBinding(name, InternalNameProvided);
		return typeBinding;
	}

	if (packageBinding == null) {
		// find the package
		packageBinding = findPackage(name);
		if (packageBinding != null) return packageBinding; 
	}

	if (typeBinding == null) {
		// if no package was found, find the type named name relative to the receiver
		if ((typeBinding = environment.askForType(this, name)) != null) {
			if (typeBinding.isNestedType())
				return new ProblemReferenceBinding(name, InternalNameProvided);
			return typeBinding;
		}

		// Since name could not be found, add problem bindings
		// to the collections so it will be reported as an error next time.
		addNotFoundPackage(name);
		addNotFoundType(name);
	} else {
		if (packageBinding == LookupEnvironment.TheNotFoundPackage)
			packageBinding = null;
		if (typeBinding == LookupEnvironment.TheNotFoundType)
			typeBinding = null;
	}

	if (packageBinding != null)
		return packageBinding;
	else
		return typeBinding;
}

