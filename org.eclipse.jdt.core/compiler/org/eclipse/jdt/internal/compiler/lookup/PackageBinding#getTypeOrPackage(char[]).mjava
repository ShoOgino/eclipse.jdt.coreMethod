	public Binding getTypeOrPackage(char[] name) {
		PackageBinding packageBinding = getPackage0(name);
		if (packageBinding != null && packageBinding != environment.theNotFoundPackage)
			return packageBinding;

		ReferenceBinding typeBinding = getType0(name);
		if (typeBinding != null && typeBinding != environment.theNotFoundType) {
			if (typeBinding instanceof UnresolvedReferenceBinding)
				typeBinding = ((UnresolvedReferenceBinding) typeBinding).resolve(environment);
			if (typeBinding.isNestedType())
				return new ProblemReferenceBinding(name, InternalNameProvided);
			return typeBinding;
		}

		if (typeBinding == null && packageBinding == null) {
			// find the package
			if ((packageBinding = findPackage(name)) != null)
				return packageBinding;

			// if no package was found, find the type named name relative to the receiver
			if ((typeBinding = environment.askForType(this, name)) != null) {
				if (typeBinding.isNestedType())
					return new ProblemReferenceBinding(name, InternalNameProvided);
				return typeBinding;
			}

			// Since name could not be found, add problem bindings
			// to the collections so it will be reported as an error next time.
			addNotFoundPackage(name);
			addNotFoundType(name);
		} else {
			if (packageBinding == environment.theNotFoundPackage)
				packageBinding = null;
			if (typeBinding == environment.theNotFoundType)
				typeBinding = null;
		}

		if (packageBinding != null)
			return packageBinding;
		else
			return typeBinding;
	}

