	/**
	 * compute the nullTagBits from type annotations and bound.
	 * @param scope (may be null, if wildcard is null)
	 * @param wildcard (may be null. if non-null, errors are reported and type annotations are dropped from this.bound in case of conflicts.)
	 */
	public long determineNullBitsFromDeclaration(Scope scope, Wildcard wildcard) {
		long nullTagBits = 0L;
		AnnotationBinding [] annotations = this.typeAnnotations;
		if (annotations != null) {
			for (int i = 0, length = annotations.length; i < length; i++) {
				AnnotationBinding annotation = annotations[i];
				if (annotation != null) {
					if (annotation.type.hasNullBit(TypeIds.BitNullableAnnotation)) {
						if ((nullTagBits & TagBits.AnnotationNonNull) == 0) {
							nullTagBits |= TagBits.AnnotationNullable;
						} else {
							if (wildcard != null) {
								Annotation annotation1 = wildcard.findAnnotation(TagBits.AnnotationNullable);
								if (annotation1 != null)
									scope.problemReporter().contradictoryNullAnnotations(annotation1);
							}
						}
					} else if (annotation.type.hasNullBit(TypeIds.BitNonNullAnnotation)) {
						if ((nullTagBits & TagBits.AnnotationNullable) == 0) {
							nullTagBits |= TagBits.AnnotationNonNull;
						} else {
							if (wildcard != null) {
								Annotation annotation1 = wildcard.findAnnotation(TagBits.AnnotationNonNull);
								if (annotation1 != null)
									scope.problemReporter().contradictoryNullAnnotations(annotation1);
							}
						}
					}
				}
			}
		}
		if (this.bound != null && this.bound.isValidBinding()) {
			long boundNullTagBits = this.bound.tagBits & TagBits.AnnotationNullMASK;
			if (boundNullTagBits != 0L) {
				if (this.boundKind == Wildcard.SUPER) {
					if ((boundNullTagBits & TagBits.AnnotationNullable) != 0) {
						if (nullTagBits == 0L) {
							nullTagBits = TagBits.AnnotationNullable;
						} else if (wildcard != null && (nullTagBits & TagBits.AnnotationNonNull) != 0) {
							Annotation annotation = wildcard.bound.findAnnotation(boundNullTagBits);
							if (annotation == null) { // false alarm, implicit annotation is no conflict, but should be removed:
								// may not be reachable, how could we have an implicit @Nullable (not via @NonNullByDefault)?
								TypeBinding newBound = this.bound.withoutToplevelNullAnnotation();
								this.bound = newBound;
								wildcard.bound.resolvedType = newBound;
							} else {
								scope.problemReporter().contradictoryNullAnnotationsOnBounds(annotation, nullTagBits);
							}
						}
					}
				} else {
					if ((boundNullTagBits & TagBits.AnnotationNonNull) != 0) {
						if (nullTagBits == 0L) {
							nullTagBits = TagBits.AnnotationNonNull;
						} else if (wildcard != null && (nullTagBits & TagBits.AnnotationNullable) != 0) {
							Annotation annotation = wildcard.bound.findAnnotation(boundNullTagBits);
							if (annotation == null) { // false alarm, implicit annotation is no conflict, but should be removed:
								TypeBinding newBound = this.bound.withoutToplevelNullAnnotation();
								this.bound = newBound;
								wildcard.bound.resolvedType = newBound;
							} else {
								scope.problemReporter().contradictoryNullAnnotationsOnBounds(annotation, nullTagBits);
							}
						}
					}
					if (nullTagBits == 0L && this.otherBounds != null) {
						for (int i = 0, length = this.otherBounds.length; i < length; i++) {
							if ((this.otherBounds[i].tagBits & TagBits.AnnotationNonNull) != 0) { // can this happen?
								nullTagBits = TagBits.AnnotationNonNull;
								break;
							}
						}
					}
				}
			}
		}
		return nullTagBits;
	}

