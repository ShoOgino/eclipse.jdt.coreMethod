	public PackageBinding getPackage(char[][] parentPackageName, char[] packageName) {
		// Returns a package binding if there exists such a package in the context of this module and it is observable
		// A package is observable if it is declared in this module or it is exported by some required module
		PackageBinding binding = null;
		if (parentPackageName == null || parentPackageName.length == 0) {
			binding = getTopLevelPackage(packageName);
		} else {
			binding = getDeclaredPackage(parentPackageName);
			if (binding != null && binding != LookupEnvironment.TheNotFoundPackage) {
				binding = getDeclaredPackage(binding, packageName);
				if (binding != null)
					return binding;
			}
		}
		if (binding == null) {
			char[] qualifiedPackageName = CharOperation.concatWith(parentPackageName, packageName, '.');
			PackageBinding pack = Stream.of(getAllRequiredModules())
					.map(m -> {
						PackageBinding p = m.getExportedPackage(qualifiedPackageName);
						if (p != null && m.isPackageExportedTo(p, this)) {
							return m.declaredPackages.get(qualifiedPackageName);
						}
						return null;
					})
			.filter(p -> p != null).findFirst().orElse(null);

			if (pack != null || this.isAuto) {
				return pack;
			}
			// This will only work if the automatic modules already have all their packages loaded,
			// remember there's no module-info
			return getAllAutomaticModules().filter(mod -> (mod.isAuto)).
					map(m -> m.getPackage(parentPackageName, packageName)).
						filter(p -> p != null).findFirst().orElse(null);
		}
		return binding;
	}

