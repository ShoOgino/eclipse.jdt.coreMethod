	/**
	 * Simplified API to perform Invocation Type Inference (JLS 18.5.2)
	 * and (if successful) return the solution.
	 * @param site invocation being inferred
	 * @param targetType target type for this invocation
	 * @return a method binding with updated type parameters, or null if no solution was found
	 */
	public ParameterizedGenericMethodBinding getInvocationTypeInferenceSolution(MethodBinding method, Invocation site, TypeBinding targetType) {
		// start over from a previous candidate but discard its type variable instantiations
		// TODO: should we retain any instantiations of type variables not owned by the method? 
		BoundSet result = null;
		try {
			result = inferInvocationType(this.currentBounds, targetType, site, method);
		} catch (InferenceFailureException e) {
			return null;
		}
		if (result != null) {
			TypeBinding[] solutions = getSolutions(method.typeVariables(), site, result);
			if (solutions != null) {
				ParameterizedGenericMethodBinding substituteMethod = this.environment.createParameterizedGenericMethod(method, solutions);
				site.registerInferenceContext(substituteMethod, this);
				return substituteMethod;
			}
		}
		return null;
	}

