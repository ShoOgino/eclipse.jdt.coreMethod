/**
 * <param1 ... paramN>superclass superinterface1 ... superinterfaceN
 * <T:LY<TT;>;U:Ljava/lang/Object;V::Ljava/lang/Runnable;:Ljava/lang/Cloneable;:Ljava/util/Map;>Ljava/lang/Exception;Ljava/lang/Runnable;
 */
public char[] genericSignature() {
    StringBuffer sig = null;
	if (this.typeVariables != NoTypeVariables) {
	    sig = new StringBuffer(10);
	    sig.append('<');
	    for (int i = 0, length = this.typeVariables.length; i < length; i++) {
	        sig.append(this.typeVariables[i].genericSignature());
	    }
	    sig.append('>');
	} else {
	    // could still need a signature if any of supertypes is parameterized
	    noSignature: if (this.superclass == null || !this.superclass.isParameterizedType()) {
		    for (int i = 0, length = this.superInterfaces.length; i < length; i++) {
		        if (this.superInterfaces[i].isParameterizedType()) break noSignature;
		    }        
	        return null;
	    }
	    sig = new StringBuffer(10);
	}
	if (this.superclass != null) {
		sig.append(this.superclass.genericTypeSignature());
	} else {
		// interface scenario only (as Object cannot be generic) - 65953
		sig.append(scope.getJavaLangObject().genericTypeSignature());
	}
    for (int i = 0, length = this.superInterfaces.length; i < length; i++) {
        sig.append(this.superInterfaces[i].genericTypeSignature());
    }
	return sig.toString().toCharArray();
}

