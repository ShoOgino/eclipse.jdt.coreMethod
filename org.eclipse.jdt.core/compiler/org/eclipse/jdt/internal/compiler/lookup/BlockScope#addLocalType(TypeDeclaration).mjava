public final void addLocalType(TypeDeclaration localType) {
	// check that the localType does not conflict with an enclosing type
	ReferenceBinding type = enclosingSourceType();
	do {
		if (CharOperation.equals(type.sourceName, localType.name)) {
			problemReporter().hidingEnclosingType(localType);
			return;
		}
		type = type.enclosingType();
	} while (type != null);

	// check that the localType does not conflict with another sibling local type
	Scope scope = this;
	do {
		if (((BlockScope) scope).findLocalType(localType.name) != null) {
			problemReporter().duplicateNestedType(localType);
			return;
		}
	} while ((scope = scope.parent) instanceof BlockScope);

	ClassScope localTypeScope = new ClassScope(this, localType);
	localTypeScope.buildLocalTypeBinding(enclosingSourceType());
	addSubscope(localTypeScope);
}
/* Insert a local variable into a given scope, updating its position
* and checking there are not too many locals or arguments allocated.
*/

