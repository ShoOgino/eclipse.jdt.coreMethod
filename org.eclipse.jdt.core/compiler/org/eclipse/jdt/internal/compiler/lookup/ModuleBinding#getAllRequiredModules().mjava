	/**
	 * get all the modules required by this module
	 * All required modules include modules explicitly specified as required in the module declaration
	 * as well as implicit dependencies - those specified as ' requires public ' by one of the
	 * dependencies
	 * 
	 * @return
	 *   An array of all required modules
	 */
	public ModuleBinding[] getAllRequiredModules() {
		if (this == UnNamedModule)
			return NO_REQUIRES;
		if (this.requiredModules != null)
			return this.requiredModules;
		Set<ModuleBinding> allRequires = new HashSet<ModuleBinding>();
		for (int i = 0; i < this.requires.length; i++) {
			ModuleBinding mod = this.environment.getModule(this.requires[i].name());
			if (mod != null) {
				allRequires.add(mod);
				allRequires.addAll(mod.getImplicitDependencies());
			}
		}
		if (!CharOperation.equals(this.moduleName, TypeConstants.JAVA_BASE)) {
			// TODO: Do we need to add java.base here?
			allRequires.add(this.environment.getModule(JRTUtil.JAVA_BASE_CHAR));
		}
		return this.requiredModules = allRequires.size() > 0 ? allRequires.toArray(new ModuleBinding[allRequires.size()]) : NO_REQUIRES;
	}

