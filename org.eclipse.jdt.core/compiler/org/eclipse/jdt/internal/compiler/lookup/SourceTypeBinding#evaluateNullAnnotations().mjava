public void evaluateNullAnnotations() {
	
	if (!isPrototype()) throw new IllegalStateException();
	
	if (this.nullnessDefaultInitialized > 0 || !this.scope.compilerOptions().isAnnotationBasedNullAnalysisEnabled)
		return;

	if ((this.tagBits & TagBits.AnnotationNullMASK) != 0) {
		Annotation[] annotations = this.scope.referenceContext.annotations;
		for (int i = 0; i < annotations.length; i++) {
			ReferenceBinding annotationType = annotations[i].getCompilerAnnotation().getAnnotationType();
			if (annotationType != null) {
				if (annotationType.hasNullBit(TypeIds.BitNonNullAnnotation|TypeIds.BitNullableAnnotation)) {
					this.scope.problemReporter().nullAnnotationUnsupportedLocation(annotations[i]);
					this.tagBits &= ~TagBits.AnnotationNullMASK;
				}
			}
		}
	}

	boolean isPackageInfo = CharOperation.equals(this.sourceName, TypeConstants.PACKAGE_INFO_NAME);
	PackageBinding pkg = getPackage();
	boolean isInDefaultPkg = (pkg.compoundName == CharOperation.NO_CHAR_CHAR);
	if (!isPackageInfo) {
		boolean isInNullnessAnnotationPackage = this.scope.environment().isNullnessAnnotationPackage(pkg);
		if (pkg.defaultNullness == NO_NULL_DEFAULT && !isInDefaultPkg && !isInNullnessAnnotationPackage && !(this instanceof NestedTypeBinding)) {
			ReferenceBinding packageInfo = pkg.getType(TypeConstants.PACKAGE_INFO_NAME);
			if (packageInfo == null) {
				// no pkgInfo - complain
				this.scope.problemReporter().missingNonNullByDefaultAnnotation(this.scope.referenceContext);
				pkg.defaultNullness = NULL_UNSPECIFIED_BY_DEFAULT;
			} else {
				// if pkgInfo has no default annot. - complain
				packageInfo.getAnnotationTagBits();
			}
		}
	}
	this.nullnessDefaultInitialized = 1;
	boolean usesNullTypeAnnotations = this.scope.environment().usesNullTypeAnnotations();
	if (usesNullTypeAnnotations) {
		if (this.defaultNullness != 0) {
			if (isPackageInfo) {
				pkg.defaultNullness = this.defaultNullness;
			} else {
				TypeDeclaration typeDecl = this.scope.referenceContext;
				checkRedundantNullnessDefaultRecurse(typeDecl, typeDecl.annotations, this.defaultNullness, true);
			}
		} else if (isPackageInfo || (isInDefaultPkg && !(this instanceof NestedTypeBinding))) {
			this.scope.problemReporter().missingNonNullByDefaultAnnotation(this.scope.referenceContext);
			if (!isInDefaultPkg)
				pkg.defaultNullness = NULL_UNSPECIFIED_BY_DEFAULT;
		}
	} else {
		// transfer nullness info from tagBits to this.defaultNullness
		long annotationTagBits = this.tagBits;
		int newDefaultNullness = NO_NULL_DEFAULT;
		if ((annotationTagBits & TagBits.AnnotationNullUnspecifiedByDefault) != 0) {
			newDefaultNullness = NULL_UNSPECIFIED_BY_DEFAULT;
		} else if ((annotationTagBits & TagBits.AnnotationNonNullByDefault) != 0) {
			newDefaultNullness = NONNULL_BY_DEFAULT;
		} else if (this.defaultNullness != 0) {
			 // NNBD with argument while NN & NU are SE5 annotations, revert to old default & encoding.
			if (this.defaultNullness == NULL_UNSPECIFIED_BY_DEFAULT) {
				annotationTagBits = TagBits.AnnotationNullUnspecifiedByDefault;
				newDefaultNullness = NULL_UNSPECIFIED_BY_DEFAULT;
			} else {
				annotationTagBits = TagBits.AnnotationNonNullByDefault;
				newDefaultNullness = NONNULL_BY_DEFAULT;
			}
		}
		if (newDefaultNullness != NO_NULL_DEFAULT) {
			if (isPackageInfo) {
				pkg.defaultNullness = newDefaultNullness;
			} else {
				this.defaultNullness = newDefaultNullness;
				TypeDeclaration typeDecl = this.scope.referenceContext;
				long nullDefaultBits = annotationTagBits & (TagBits.AnnotationNullUnspecifiedByDefault|TagBits.AnnotationNonNullByDefault);
				checkRedundantNullnessDefaultRecurse(typeDecl, typeDecl.annotations, nullDefaultBits, false);
			}
		} else if (isPackageInfo || (isInDefaultPkg && !(this instanceof NestedTypeBinding))) {
			this.scope.problemReporter().missingNonNullByDefaultAnnotation(this.scope.referenceContext);
			if (!isInDefaultPkg)
				pkg.defaultNullness = NULL_UNSPECIFIED_BY_DEFAULT;
		}
	}
	maybeMarkTypeParametersNonNull();
}

