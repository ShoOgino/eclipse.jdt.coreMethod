	// pre: boundLeft.left != boundRight.left
	private ConstraintTypeFormula combineSameSameWithProperType(TypeBound boundLeft, TypeBound boundRight, 
			TypeBound[] firstBounds, TypeBound[] nextBounds) {
		//  α = U and S = T imply ⟨S[α:=U] = T[α:=U]⟩
		TypeBinding u = boundLeft.right;
		if (enableOptimizationForBug543480 && isParameterizedDependency(boundRight)) {
			// Performance optimization: do not incorporate arguments one by one, which yielt 2^n new bounds (n=number of type arguments) in the past.
			// Instead, all arguments of a parameterized dependency are incorporated at once - but only when they are available.
			return incorporateIntoParameterizedDependencyIfAllArgumentsAreProperTypes(boundRight,
					firstBounds, nextBounds);
		}
		if (u.isProperType(true)) {
			InferenceVariable alpha = boundLeft.left;
			TypeBinding left = boundRight.left; // no substitution since S inference variable and (S != α) per precondition
			TypeBinding right = boundRight.right.substituteInferenceVariable(alpha, u);
			return ConstraintTypeFormula.create(left, right, ReductionResult.SAME, boundLeft.isSoft||boundRight.isSoft);
		}
		return null;
	}

