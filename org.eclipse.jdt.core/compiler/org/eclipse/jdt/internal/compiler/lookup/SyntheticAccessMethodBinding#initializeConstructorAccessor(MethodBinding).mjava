	/**
	 * An constructor accessor is a constructor with an extra argument (declaringClass), in case of
	 * collision with an existing constructor, then add again an extra argument (declaringClass again).
	 */
	 public void initializeConstructorAccessor(MethodBinding targetConstructor) {
	
		this.targetMethod = targetConstructor;
		this.modifiers = AccDefault | AccSynthetic;
		SourceTypeBinding sourceType = (SourceTypeBinding) targetConstructor.declaringClass; 
		SyntheticAccessMethodBinding[] knownAccessMethods = 
			sourceType.syntheticAccessMethods(); 
		this.index = knownAccessMethods == null ? 0 : knownAccessMethods.length;
	
		this.selector = targetConstructor.selector;
		this.returnType = targetConstructor.returnType;
		this.accessType = ConstructorAccess;
		this.parameters = new TypeBinding[targetConstructor.parameters.length + 1];
		System.arraycopy(
			targetConstructor.parameters, 
			0, 
			this.parameters, 
			0, 
			targetConstructor.parameters.length); 
		parameters[targetConstructor.parameters.length] = 
			targetConstructor.declaringClass; 
		this.thrownExceptions = targetConstructor.thrownExceptions;
		this.declaringClass = sourceType;
	
		// check for method collision
		boolean needRename;
		do {
			check : {
				needRename = false;
				// check for collision with known methods
				MethodBinding[] methods = sourceType.methods;
				for (int i = 0, length = methods.length; i < length; i++) {
					if (this.selector == methods[i].selector
						&& this.areParametersEqual(methods[i])) {
						needRename = true;
						break check;
					}
				}
				// check for collision with synthetic accessors
				if (knownAccessMethods != null) {
					for (int i = 0, length = knownAccessMethods.length; i < length; i++) {
						if (knownAccessMethods[i] == null)
							continue;
						if (this.selector == knownAccessMethods[i].selector
							&& this.areParametersEqual(knownAccessMethods[i])) {
							needRename = true;
							break check;
						}
					}
				}
			}
			if (needRename) { // retry with a new extra argument
				int length = this.parameters.length;
				System.arraycopy(
					this.parameters, 
					0, 
					this.parameters = new TypeBinding[length + 1], 
					0, 
					length); 
				this.parameters[length] = this.declaringClass;
			}
		} while (needRename);
	
		// retrieve sourceStart position for the target method for line number attributes
		AbstractMethodDeclaration[] methodDecls = 
			sourceType.scope.referenceContext.methods; 
		if (methodDecls != null) {
			for (int i = 0, length = methodDecls.length; i < length; i++) {
				if (methodDecls[i].binding == targetConstructor) {
					this.sourceStart = methodDecls[i].sourceStart;
					return;
				}
			}
		}
	}

