private void createMethods(IBinaryMethod[] iMethods) {
	int total = 0;
	int clinitIndex = -1;
	if (iMethods != null) {
		total = iMethods.length;
		for (int i = total; --i >= 0;) {
			char[] methodName = iMethods[i].getSelector();
			if (methodName[0] == '<' && methodName.length == 8) { // Can only match <clinit>
				total--;
				clinitIndex = i;
				break;
			}
		}
	}
	if (total == 0) {
		this.methods = NoMethods;
		return;
	}

	this.methods = new MethodBinding[total];
	int next = 0;
	for (int i = 0, length = iMethods.length; i < length; i++)
		if (i != clinitIndex)
			this.methods[next++] = createMethod(iMethods[i]);
	modifiers |= AccUnresolved; // until methods() is sent
}
/* Answer the receiver's enclosing type... null if the receiver is a top level type.
*
* NOTE: enclosingType of a binary type is resolved when needed
*/

