private void createMethods(IBinaryMethod[] iMethods) {
	int total = 0;
	int[] toSkip = null;
	if (iMethods != null) {
		total = iMethods.length;
		for (int i = total; --i >= 0;) {
			IBinaryMethod method = iMethods[i];
			char[] methodName;
			if ((method.getModifiers() & AccSynthetic) != 0 ||
				((methodName = method.getSelector()).length == 8 && methodName[0] == '<')) {
					if (toSkip == null)
						toSkip = new int[iMethods.length];
					toSkip[i] = -1;
					total--;
			}
		}
	}
	if (total == 0) {
		this.methods = NoMethods;
		return;
	}

	this.methods = new MethodBinding[total];
	int next = 0;
	if (toSkip == null) {
		for (int i = 0, length = iMethods.length; i < length; i++)
			this.methods[next++] = createMethod(iMethods[i]);
	} else {
		for (int i = 0, length = iMethods.length; i < length; i++)
			if (toSkip[i] == 0)
				this.methods[next++] = createMethod(iMethods[i]);
	}
	modifiers |= AccUnresolved; // until methods() is sent
}
/* Answer the receiver's enclosing type... null if the receiver is a top level type.
*
* NOTE: enclosingType of a binary type is resolved when needed
*/

