	private Set<ConstraintFormula> findBottomSet(Set<ConstraintFormula> constraints, Set<InferenceVariable> allOutputVariables) {
		// 18.5.2 bullet 6.1
		//  A subset of constraints is selected, satisfying the property
		// that, for each constraint, no input variable depends on an
		// output variable of another constraint in C ...
		Set<ConstraintFormula> result = new HashSet<ConstraintFormula>();
		Iterator<ConstraintFormula> it = constraints.iterator();
		constraintLoop: while (it.hasNext()) {
			ConstraintFormula constraint = it.next();
			Iterator<InferenceVariable> inputIt = constraint.inputVariables(this).iterator();
			Iterator<InferenceVariable> outputIt = allOutputVariables.iterator();
			while (inputIt.hasNext()) {
				InferenceVariable in = inputIt.next();
				if (allOutputVariables.contains(in)) // not explicit in the spec, but let's assume any inference variable depends on itself
					continue constraintLoop;
				while (outputIt.hasNext()) {
					if (this.currentBounds.dependsOnResolutionOf(in, outputIt.next()))
						continue constraintLoop;
				}
			}
			result.add(constraint);
		}		
		return result;
	}

