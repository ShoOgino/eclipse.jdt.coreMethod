private void checkRecordCanonicalConstructor(MethodBinding explicitCanonicalConstructor) {

	AbstractMethodDeclaration methodDecl = explicitCanonicalConstructor.sourceMethod();

	if (!SourceTypeBinding.isAtleastAsAccessibleAsRecord(explicitCanonicalConstructor))
		this.scope.problemReporter().recordCanonicalConstructorVisibilityReduced(methodDecl);
	TypeParameter[] typeParameters = methodDecl.typeParameters();
	if (typeParameters != null && typeParameters.length > 0)
		this.scope.problemReporter().recordCanonicalConstructorShouldNotBeGeneric(methodDecl);
	if (explicitCanonicalConstructor.thrownExceptions != null && explicitCanonicalConstructor.thrownExceptions.length > 0)
		this.scope.problemReporter().recordCanonicalConstructorHasThrowsClause(methodDecl);
	explicitCanonicalConstructor.tagBits |= TagBits.IsCanonicalConstructor;
	ASTVisitor visitor = new ASTVisitor() {
		boolean isInsideCCD = methodDecl instanceof CompactConstructorDeclaration;
		@Override
		public boolean visit(ExplicitConstructorCall explicitConstructorCall, BlockScope skope) {
			if (explicitConstructorCall.accessMode != ExplicitConstructorCall.ImplicitSuper) {
				if (this.isInsideCCD)
					skope.problemReporter().recordCompactConstructorHasExplicitConstructorCall(explicitConstructorCall);
				else
					skope.problemReporter().recordCanonicalConstructorHasExplicitConstructorCall(explicitConstructorCall);
			}
			return false;
		}
		@Override
		public boolean visit(MethodDeclaration methodDeclaration, ClassScope skope) {
			return false;
		}
		@Override
		public boolean visit(LambdaExpression lambda, BlockScope skope) {
			return false;
		}
		@Override
		public boolean visit(ReturnStatement returnStatement, BlockScope skope) {
			if (this.isInsideCCD) {
				skope.problemReporter().recordCompactConstructorHasReturnStatement(returnStatement);
				return false;
			}
			return true;
		}
	};
	methodDecl.traverse(visitor, this.scope);
}

