	protected boolean isSubstituteParameterSubsignature(MethodBinding method, MethodBinding substituteMethod) {
		if (!areParametersEqual(method, substituteMethod)) {
			// method can still override substituteMethod in cases like :
			// <U extends Number> void c(U u) {}
			// @Override void c(Number n) {}
			// but method cannot have a "generic-enabled" parameter type
			if (substituteMethod.hasSubstitutedParameters() && method.areParameterErasuresEqual(substituteMethod))
				return method.typeVariables == Binding.NO_TYPE_VARIABLES && !hasGenericParameter(method);
	
			// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=279836
			if (method.declaringClass.isRawType() && substituteMethod.declaringClass.isRawType())
				if (method.hasSubstitutedParameters() && substituteMethod.hasSubstitutedParameters())
					return areMethodsCompatible(method, substituteMethod);
	
			return false;
		}
	
		if (substituteMethod instanceof ParameterizedGenericMethodBinding) {
			if (method.typeVariables != Binding.NO_TYPE_VARIABLES)
				return !((ParameterizedGenericMethodBinding) substituteMethod).isRaw;
			// since substituteMethod has substituted type variables, method cannot have a generic signature AND no variables -> its a name clash if it does
			return !hasGenericParameter(method);
		}
	
		// if method has its own variables, then substituteMethod failed bounds check in computeSubstituteMethod()
		return method.typeVariables == Binding.NO_TYPE_VARIABLES;
	}

