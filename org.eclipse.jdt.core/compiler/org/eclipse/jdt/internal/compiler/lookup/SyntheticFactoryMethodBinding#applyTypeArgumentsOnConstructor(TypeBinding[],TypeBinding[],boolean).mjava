	/** Apply the given type arguments on the (declaring class of the) actual constructor being represented by this factory method and
	    if method type arguments is not empty materialize the parameterized generic constructor 
	*/
	public ParameterizedMethodBinding applyTypeArgumentsOnConstructor(TypeBinding[] typeArguments, TypeBinding[] constructorTypeArguments, boolean inferredWithUncheckedConversion) {
		ReferenceBinding parameterizedType = typeArguments == null
				? this.environment.createRawType(this.declaringClass, this.enclosingType)
				: this.environment.createParameterizedType(this.declaringClass, typeArguments, this.enclosingType);
		for (MethodBinding parameterizedMethod : parameterizedType.methods()) {
			if (parameterizedMethod.original() == this.staticFactoryFor)
				return (constructorTypeArguments.length > 0 || inferredWithUncheckedConversion)
						? this.environment.createParameterizedGenericMethod(parameterizedMethod, constructorTypeArguments, inferredWithUncheckedConversion, false)
						: (ParameterizedMethodBinding) parameterizedMethod;
			if (parameterizedMethod instanceof ProblemMethodBinding) {
				MethodBinding closestMatch = ((ProblemMethodBinding)parameterizedMethod).closestMatch;
				if (closestMatch instanceof ParameterizedMethodBinding && closestMatch.original() == this.staticFactoryFor)
					return (ParameterizedMethodBinding) closestMatch;
			}
		}
		throw new IllegalArgumentException("Type doesn't have its own method?"); //$NON-NLS-1$
	}

