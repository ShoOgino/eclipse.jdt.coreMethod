	private void resolvePackages() {
		this.exportedPackages = new PackageBinding[this.unresolvedExports.length];
		for (int i = 0; i < this.unresolvedExports.length; i++) {
			IPackageExport export = this.unresolvedExports[i];
			PackageBinding declaredPackage = getVisiblePackage(CharOperation.splitOn('.', export.name()));
			this.exportedPackages[i] = declaredPackage;
			recordExportRestrictions(declaredPackage, export.targets());
		}
		this.openedPackages = new PackageBinding[this.unresolvedOpens.length];
		for (int i = 0; i < this.unresolvedOpens.length; i++) {
			IPackageExport opens = this.unresolvedOpens[i];
			PackageBinding declaredPackage = getVisiblePackage(CharOperation.splitOn('.', opens.name()));
			this.openedPackages[i] = declaredPackage;
			recordOpensRestrictions(declaredPackage, opens.targets());
		}
		// FIXME(SHMOD): impl resolving of uses/services/implementations from binary
		this.uses = Binding.NO_TYPES;
		this.services = Binding.NO_TYPES;
		this.implementations = null;
	}

