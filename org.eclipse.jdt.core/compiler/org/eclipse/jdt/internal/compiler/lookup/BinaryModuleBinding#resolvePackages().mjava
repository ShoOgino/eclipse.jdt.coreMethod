	private void resolvePackages() {
		this.exportedPackages = new PlainPackageBinding[this.unresolvedExports.length];
		int count = 0;
		for (int i = 0; i < this.unresolvedExports.length; i++) {
			IPackageExport export = this.unresolvedExports[i];
			// when resolving "exports" in a binary module we simply assume the package must exist,
			// since this has been checked already when compiling that module.
			PlainPackageBinding declaredPackage = getOrCreateDeclaredPackage(CharOperation.splitOn('.', export.name()));
			this.exportedPackages[count++] = declaredPackage;
			declaredPackage.isExported = Boolean.TRUE;
			recordExportRestrictions(declaredPackage, export.targets());
		}
		if (count < this.exportedPackages.length)
			System.arraycopy(this.exportedPackages, 0, this.exportedPackages = new PlainPackageBinding[count], 0, count);

		this.openedPackages = new PlainPackageBinding[this.unresolvedOpens.length];
		count = 0;
		for (int i = 0; i < this.unresolvedOpens.length; i++) {
			IPackageExport opens = this.unresolvedOpens[i];
			PlainPackageBinding declaredPackage = getOrCreateDeclaredPackage(CharOperation.splitOn('.', opens.name()));
			this.openedPackages[count++] = declaredPackage;
			recordOpensRestrictions(declaredPackage, opens.targets());
		}
		if (count < this.openedPackages.length)
			System.arraycopy(this.openedPackages, 0, this.openedPackages = new PlainPackageBinding[count], 0, count);
	}

