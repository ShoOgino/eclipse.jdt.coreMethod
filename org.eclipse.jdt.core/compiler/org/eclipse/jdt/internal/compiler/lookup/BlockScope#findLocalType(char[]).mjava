	/* Note that it must never produce a direct access to the targetEnclosingType,
	 * but instead a field sequence (this$2.this$1.this$0) so as to handle such a test case:
	 *
	 * class XX {
	 *	void foo() {
	 *		class A {
	 *			class B {
	 *				class C {
	 *					boolean foo() {
	 *						return (Object) A.this == (Object) B.this;
	 *					}
	 *				}
	 *			}
	 *		}
	 *		new A().new B().new C();
	 *	}
	 * }
	 * where we only want to deal with ONE enclosing instance for C (could not figure out an A for C)
	 */
	public final ReferenceBinding findLocalType(char[] name) {

		long compliance = compilerOptions().complianceLevel;
		for (int i = 0, length = subscopeCount; i < length; i++) {
			if (subscopes[i] instanceof ClassScope) {
				LocalTypeBinding sourceType = (LocalTypeBinding)((ClassScope) subscopes[i]).referenceContext.binding;
				// from 1.4 on, local types should not be accessed across switch case blocks (52221)				
				if (compliance >= ClassFileConstants.JDK1_4 && sourceType.enclosingCase != null) {
					if (!this.isInsideCase(sourceType.enclosingCase)) {
						continue;
					}
				}
				if (CharOperation.equals(sourceType.sourceName(), name))
					return sourceType;
			}
		}
		return null;
	}

