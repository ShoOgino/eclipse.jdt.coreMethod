/**
 * Ask the name environment for a type which corresponds to the compoundName.
 * Answer null if the name cannot be found.
 */

public ReferenceBinding askForType(char[][] compoundName, char[] mod) {
	NameEnvironmentAnswer answer = null;
	if (this.nameEnvironment instanceof IModuleAwareNameEnvironment) {
		ModuleBinding module = getModule(mod);
		answer = ((IModuleAwareNameEnvironment)this.nameEnvironment).findType(compoundName, module.getDependencyClosureContext());
	} else {
		answer = this.nameEnvironment.findType(compoundName);
	}
	if (answer == null) return null;
	if (answer.isBinaryType()) {
		// the type was found as a .class file
		PackageBinding pkg = computePackageFrom(compoundName, false /* valid pkg */);
		this.typeRequestor.accept(answer.getBinaryType(), pkg, answer.getAccessRestriction());
		ReferenceBinding binding = pkg.getType0(compoundName[compoundName.length - 1]);
		if (binding instanceof BinaryTypeBinding) {
			((BinaryTypeBinding) binding).module = getModule(answer.moduleName());
		}
	} else if (answer.isCompilationUnit()) {
		// the type was found as a .java file, try to build it then search the cache
		this.typeRequestor.accept(answer.getCompilationUnit(), answer.getAccessRestriction());
	} else if (answer.isSourceType()) {
		// the type was found as a source model
		PackageBinding pkg = computePackageFrom(compoundName, false /* valid pkg */);
		this.typeRequestor.accept(answer.getSourceTypes(), pkg, answer.getAccessRestriction());
		ReferenceBinding binding = pkg.getType0(compoundName[compoundName.length - 1]);
		if (binding instanceof SourceTypeBinding) {
			((SourceTypeBinding) binding).module = getModule(answer.moduleName());
		}
	}
	return getCachedType(compoundName);
}

