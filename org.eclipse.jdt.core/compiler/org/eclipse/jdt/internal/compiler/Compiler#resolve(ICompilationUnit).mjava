	/**
	 * Internal API used to resolve a compilation unit minimally for code assist engine
	 */
	public CompilationUnitDeclaration resolve(ICompilationUnit sourceUnit) {
		CompilationUnitDeclaration unit = null;
		try {
			// build and record parsed units
			parseThreshold = 0; // will request a full parse
			beginToCompile(new ICompilationUnit[] { sourceUnit });
			// process all units (some more could be injected in the loop by the lookup environment)
			unit = unitsToProcess[0];
			getMethodBodies(unit, 0);
			if (unit.scope != null) {
				// fault in fields & methods
				unit.scope.faultInTypes();
				// type checking
				unit.resolve();
			}
			unitsToProcess[0] = null; // release reference to processed unit declaration
			requestor.acceptResult(unit.compilationResult.tagAsAccepted());
			return unit;
		} catch (AbortCompilation e) {
			this.handleInternalException(e, unit);
			return unit == null ? unitsToProcess[0] : unit;
		} catch (Error e) {
			this.handleInternalException(e, unit, null);
			throw e; // rethrow
		} catch (RuntimeException e) {
			this.handleInternalException(e, unit, null);
			throw e; // rethrow
		} finally {
			// No reset is performed there anymore since,
			// within the CodeAssist (or related tools),
			// the compiler may be called *after* a call
			// to this resolve(...) method. And such a call
			// needs to have a compiler with a non-empty
			// environment.
			// this.reset();
		}
	}

