	/**
	 * @param attributeOffset
	 */
	private void generateElementValue(Expression defaultValue, int attributeOffset) {
		Constant constant = defaultValue.constant;
		if (constant != null && constant != Constant.NotAConstant) {
			switch (constant.typeID()) {
				case T_boolean :
					contents[contentsOffset++] = (byte) 'Z';
					int booleanValueIndex =
						constantPool.literalIndex(constant.booleanValue() ? 1 : 0);
					contents[contentsOffset++] = (byte) (booleanValueIndex >> 8);
					contents[contentsOffset++] = (byte) booleanValueIndex;
					break;
				case T_byte :
					contents[contentsOffset++] = (byte) 'B';
					int integerValueIndex =
						constantPool.literalIndex(constant.intValue());
					contents[contentsOffset++] = (byte) (integerValueIndex >> 8);
					contents[contentsOffset++] = (byte) integerValueIndex;
					break;
				case T_char :
					contents[contentsOffset++] = (byte) 'C';
					integerValueIndex =
						constantPool.literalIndex(constant.intValue());
					contents[contentsOffset++] = (byte) (integerValueIndex >> 8);
					contents[contentsOffset++] = (byte) integerValueIndex;
					break;
				case T_int :
					contents[contentsOffset++] = (byte) 'I';
					integerValueIndex =
						constantPool.literalIndex(constant.intValue());
					contents[contentsOffset++] = (byte) (integerValueIndex >> 8);
					contents[contentsOffset++] = (byte) integerValueIndex;
					break;
				case T_short :
					contents[contentsOffset++] = (byte) 'S';
					integerValueIndex =
						constantPool.literalIndex(constant.intValue());
					contents[contentsOffset++] = (byte) (integerValueIndex >> 8);
					contents[contentsOffset++] = (byte) integerValueIndex;
					break;
				case T_float :
					contents[contentsOffset++] = (byte) 'F';
					int floatValueIndex =
						constantPool.literalIndex(constant.floatValue());
					contents[contentsOffset++] = (byte) (floatValueIndex >> 8);
					contents[contentsOffset++] = (byte) floatValueIndex;
					break;
				case T_double :
					contents[contentsOffset++] = (byte) 'D';
					int doubleValueIndex =
						constantPool.literalIndex(constant.doubleValue());
					contents[contentsOffset++] = (byte) (doubleValueIndex >> 8);
					contents[contentsOffset++] = (byte) doubleValueIndex;
					break;
				case T_long :
					contents[contentsOffset++] = (byte) 'J';
					int longValueIndex =
						constantPool.literalIndex(constant.longValue());
					contents[contentsOffset++] = (byte) (longValueIndex >> 8);
					contents[contentsOffset++] = (byte) longValueIndex;
					break;
				case T_String :
					contents[contentsOffset++] = (byte) 's';
					int stringValueIndex =
						constantPool.literalIndex(
							((StringConstant) constant).stringValue());
					if (stringValueIndex == -1) {
						if (!creatingProblemType) {
							// report an error and abort: will lead to a problem type classfile creation
							TypeDeclaration typeDeclaration = referenceBinding.scope.referenceContext;
							typeDeclaration.scope.problemReporter().stringConstantIsExceedingUtf8Limit(defaultValue);
						} else {
							// already inside a problem type creation : no attribute
							contentsOffset = attributeOffset;
						}
					} else {
						contents[contentsOffset++] = (byte) (stringValueIndex >> 8);
						contents[contentsOffset++] = (byte) stringValueIndex;
					}
			}
		} else {
			TypeBinding defaultValueBinding = defaultValue.resolvedType;
			if (defaultValueBinding != null) {
				if (defaultValueBinding.isEnum()) {
					contents[contentsOffset++] = (byte) 'e';
					FieldBinding fieldBinding = null;
					if (defaultValue instanceof QualifiedNameReference) {
						QualifiedNameReference nameReference = (QualifiedNameReference) defaultValue;
						fieldBinding = (FieldBinding) nameReference.binding;
					} else if (defaultValue instanceof SingleNameReference) {
						SingleNameReference nameReference = (SingleNameReference) defaultValue;
						fieldBinding = (FieldBinding) nameReference.binding;
					} else {
						contentsOffset = attributeOffset;
					}
					if (fieldBinding != null) {
						final int enumConstantTypeNameIndex = constantPool.literalIndex(fieldBinding.type.signature());
						final int enumConstantNameIndex = constantPool.literalIndex(fieldBinding.name);
						contents[contentsOffset++] = (byte) (enumConstantTypeNameIndex >> 8);
						contents[contentsOffset++] = (byte) enumConstantTypeNameIndex;
						contents[contentsOffset++] = (byte) (enumConstantNameIndex >> 8);
						contents[contentsOffset++] = (byte) enumConstantNameIndex;
					}
				} else if (defaultValueBinding.isAnnotationType()) {
					contents[contentsOffset++] = (byte) '@';
					generateAnnotation((Annotation) defaultValue, attributeOffset);
				} else if (defaultValueBinding.isArrayType()) {
					// array type
					contents[contentsOffset++] = (byte) '[';
					if (defaultValue instanceof ArrayInitializer) {
						ArrayInitializer arrayInitializer = (ArrayInitializer) defaultValue;
						int arrayLength = arrayInitializer.expressions != null ? arrayInitializer.expressions.length : 0;
						contents[contentsOffset++] = (byte) (arrayLength >> 8);
						contents[contentsOffset++] = (byte) arrayLength;
						for (int i = 0; i < arrayLength; i++) {
							generateElementValue(arrayInitializer.expressions[i], attributeOffset);
						}
					} else {
						contentsOffset = attributeOffset;
					}
				} else {
					// class type
					contents[contentsOffset++] = (byte) 'c';
					if (defaultValue instanceof ClassLiteralAccess) {
						ClassLiteralAccess classLiteralAccess = (ClassLiteralAccess) defaultValue;
						final int classInfoIndex = constantPool.literalIndex(classLiteralAccess.targetType.signature());
						contents[contentsOffset++] = (byte) (classInfoIndex >> 8);
						contents[contentsOffset++] = (byte) classInfoIndex;
					} else {
						contentsOffset = attributeOffset;
					}
				}
			} else {
				contentsOffset = attributeOffset;
			}
		}
	}

