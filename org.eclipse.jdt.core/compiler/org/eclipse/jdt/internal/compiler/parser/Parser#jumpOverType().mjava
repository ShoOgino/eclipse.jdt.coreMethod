private void jumpOverType(){
	if (this.recoveredTypes != null && this.nextTypeStart > -1 && this.nextTypeStart < this.scanner.currentPosition) {
		TypeDeclaration typeDeclaration = this.recoveredTypes[this.recoveredTypePtr];
		boolean isAnonymous = typeDeclaration.allocation != null;
		
		int end = this.scanner.eofPosition;
		this.scanner.resetTo(typeDeclaration.declarationSourceEnd + 1, end  - 1);
		if(!isAnonymous) {
			pushOnAstStack(typeDeclaration);
			if(this.astLengthPtr > 0) {
				concatNodeLists();
			}
			
			if(this.currentElement != null) {
				this.currentElement = this.currentElement.add(typeDeclaration, 0);
			}
			
			try {
				this.currentToken = this.scanner.getNextToken();
			} catch(InvalidInputException e){
				if (!this.hasReportedError){
					this.problemReporter().scannerError(this, e.getMessage());
					this.hasReportedError = true;
				}
				this.lastCheckPoint = this.scanner.currentPosition;
			}
		} else {
			if(this.astPtr > -1 && this.astStack[this.astPtr] instanceof TypeDeclaration) {
				this.astStack[astPtr] = typeDeclaration;
				this.expressionStack[this.expressionPtr] = typeDeclaration.allocation;
			}
			this.currentToken = TokenNameRBRACE;
		}
		
		if(++this.recoveredTypePtr < this.recoveredTypes.length) {
			TypeDeclaration nextTypeDeclaration = this.recoveredTypes[this.recoveredTypePtr];
			this.nextTypeStart =
				nextTypeDeclaration.allocation == null
					? nextTypeDeclaration.declarationSourceStart
							: nextTypeDeclaration.bodyStart;
		} else {
			this.nextTypeStart = Integer.MAX_VALUE;
		}
	}
}

