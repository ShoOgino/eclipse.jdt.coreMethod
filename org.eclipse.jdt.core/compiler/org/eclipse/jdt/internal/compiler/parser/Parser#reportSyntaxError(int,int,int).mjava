	protected void reportSyntaxError(int act, int currentKind, int stateStackTop) {

		/* remember current scanner position */
		int startPos = scanner.startPosition;
		int currentPos = scanner.currentPosition;

		String[] expectings;
		String tokenName = name[symbol_index[currentKind]];

		//fetch all "accurate" possible terminals that could recover the error
		int start, end = start = asi(stack[stateStackTop]);
		while (asr[end] != 0)
			end++;
		int length = end - start;
		expectings = new String[length];
		if (length != 0) {
			char[] indexes = new char[length];
			System.arraycopy(asr, start, indexes, 0, length);
			for (int i = 0; i < length; i++) {
				expectings[i] = name[symbol_index[indexes[i]]];
			}
		}

		//if the pb is an EOF, try to tell the user that they are some 
		if (tokenName.equals(UNEXPECTED_EOF)) {
			if (!this.checkAndReportBracketAnomalies(problemReporter())) {
				char[] tokenSource;
				try {
					tokenSource = this.scanner.getCurrentTokenSource();
				} catch (Exception e) {
					tokenSource = new char[] {
					};
				}
				problemReporter().parseError(
					this.scanner.startPosition,
					this.scanner.currentPosition - 1,
					tokenSource,
					tokenName,
					expectings,
					referenceContext,
					compilationUnit.compilationResult);
			}
		} else { //the next test is HEAVILY grammar DEPENDENT.
			if ((length == 2)
				&& (tokenName.equals(";"))
				&& (expectings[0] == "++")
				&& (expectings[1] == "--")
				&& (expressionPtr > -1)) {
				// the ; is not the expected token ==> it ends a statement when an expression is not ended
				problemReporter().invalidExpressionAsStatement(expressionStack[expressionPtr]);
			} else {
				char[] tokenSource;
				try {
					tokenSource = this.scanner.getCurrentTokenSource();
				} catch (Exception e) {
					tokenSource = new char[] {
					};
				}
				problemReporter().parseError(
					this.scanner.startPosition,
					this.scanner.currentPosition - 1,
					tokenSource,
					tokenName,
					expectings,
					referenceContext,
					compilationUnit.compilationResult);
				this.checkAndReportBracketAnomalies(problemReporter());
			}
		}
		/* reset scanner where it was */
		scanner.startPosition = startPos;
		scanner.currentPosition = currentPos;
	}

