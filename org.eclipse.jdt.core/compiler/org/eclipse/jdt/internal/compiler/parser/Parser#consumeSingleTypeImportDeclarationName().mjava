	protected void consumeSingleTypeImportDeclarationName() {
		// SingleTypeImportDeclarationName ::= 'import' Name
		/* push an ImportRef build from the last name 
		stored in the identifier stack. */

		ImportReference impt;
		int length;
		char[][] tokens =
			new char[length = identifierLengthStack[identifierLengthPtr--]][];
		identifierPtr -= length;
		long[] positions = new long[length];
		System.arraycopy(identifierStack, identifierPtr + 1, tokens, 0, length);
		System.arraycopy(
			identifierPositionStack,
			identifierPtr + 1,
			positions,
			0,
			length);
		pushOnAstStack(impt = new ImportReference(tokens, positions, false));

		if (currentToken == TokenNameSEMICOLON) {
			impt.declarationSourceEnd = scanner.currentPosition - 1;
		} else {
			impt.declarationSourceEnd = impt.sourceEnd;
		}
		//endPosition is just before the ;
		impt.declarationSourceStart = intStack[intPtr--];

		// recovery
		if (currentElement != null) {
			lastCheckPoint = impt.declarationSourceEnd + 1;
			currentElement = currentElement.add(impt, 0);
			lastIgnoredToken = -1;
			restartRecovery = true;
			// used to avoid branching back into the regular automaton		
		}
	}

