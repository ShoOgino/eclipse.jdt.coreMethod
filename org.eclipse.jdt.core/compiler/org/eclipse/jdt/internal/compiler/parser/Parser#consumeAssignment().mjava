protected void consumeAssignment() {
	// Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression
	//optimize the push/pop

	int op = intStack[intPtr--] ; //<--the encoded operator
	
	expressionPtr -- ; expressionLengthPtr -- ;
	Expression expr = expressionStack[expressionPtr + 1];
	if (expr instanceof QualifiedAllocationExpression) {
		if (((QualifiedAllocationExpression) expr).anonymousType != null) {
			expressionStack[expressionPtr] =
				(op != EQUAL ) ?
					new CompoundAssignment(
						expressionStack[expressionPtr] ,
						expressionStack[expressionPtr+1], 
						op,
						endStatementPosition)	:
					new Assignment(
						expressionStack[expressionPtr] ,
						expressionStack[expressionPtr+1],
						endStatementPosition);
			return;
		}
	}
	expressionStack[expressionPtr] =
		(op != EQUAL ) ?
			new CompoundAssignment(
				expressionStack[expressionPtr] ,
				expressionStack[expressionPtr+1], 
				op,
				endPosition)	:
			new Assignment(
				expressionStack[expressionPtr] ,
				expressionStack[expressionPtr+1],
				endPosition);
}

