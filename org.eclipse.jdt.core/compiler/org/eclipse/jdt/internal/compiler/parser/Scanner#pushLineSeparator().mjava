public final void pushLineSeparator() {
	//see comment on isLineDelimiter(char) for the use of '\n' and '\r'
	final int INCREMENT = 250;
	
	if (this.checkNonExternalizedStringLiterals) {
	// reinitialize the current line for non externalize strings purpose
		this.currentLine = null;
	}
	//currentCharacter is at position currentPosition-1

	// cr 000D
	if (this.currentCharacter == '\r') {
		int separatorPos = this.currentPosition - 1;
		//TODO (olivier) david - why the following line was "if ((this.linePtr > 0) && (this.lineEnds[this.linePtr] >= separatorPos)) return;" ?
		if ((this.linePtr >= 0) && (this.lineEnds[this.linePtr] >= separatorPos)) return;
		//System.out.println("CR-" + separatorPos);
		try {
			this.lineEnds[++this.linePtr] = separatorPos;
		} catch (IndexOutOfBoundsException e) {
			//this.linePtr value is correct
			int oldLength = this.lineEnds.length;
			int[] old = this.lineEnds;
			this.lineEnds = new int[oldLength + INCREMENT];
			System.arraycopy(old, 0, this.lineEnds, 0, oldLength);
			this.lineEnds[this.linePtr] = separatorPos;
		}
		// look-ahead for merged cr+lf
		try {
			if (this.source[this.currentPosition] == '\n') {
				//System.out.println("look-ahead LF-" + this.currentPosition);			
				this.lineEnds[this.linePtr] = this.currentPosition;
				this.currentPosition++;
				this.wasAcr = false;
			} else {
				this.wasAcr = true;
			}
		} catch(IndexOutOfBoundsException e) {
			this.wasAcr = true;
		}
	} else {
		// lf 000A
		if (this.currentCharacter == '\n') { //must merge eventual cr followed by lf
			if (this.wasAcr && (this.lineEnds[this.linePtr] == (this.currentPosition - 2))) {
				//System.out.println("merge LF-" + (this.currentPosition - 1));							
				this.lineEnds[this.linePtr] = this.currentPosition - 1;
			} else {
				int separatorPos = this.currentPosition - 1;
				//TODO (olivier) david - why the following line was "if ((this.linePtr > 0) && (this.lineEnds[this.linePtr] >= separatorPos)) return;" ?
				if ((this.linePtr >= 0) && (this.lineEnds[this.linePtr] >= separatorPos)) return;
				// System.out.println("LF-" + separatorPos);							
				try {
					this.lineEnds[++this.linePtr] = separatorPos;
				} catch (IndexOutOfBoundsException e) {
					//this.linePtr value is correct
					int oldLength = this.lineEnds.length;
					int[] old = this.lineEnds;
					this.lineEnds = new int[oldLength + INCREMENT];
					System.arraycopy(old, 0, this.lineEnds, 0, oldLength);
					this.lineEnds[this.linePtr] = separatorPos;
				}
			}
			this.wasAcr = false;
		}
	}
}

