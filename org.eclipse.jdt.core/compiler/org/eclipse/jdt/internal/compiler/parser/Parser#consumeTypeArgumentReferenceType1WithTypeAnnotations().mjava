protected void consumeTypeArgumentReferenceType1WithTypeAnnotations() {
	concatGenericsLists();
	TypeReference typeReference = getUnannotatedTypeReference(0);
	// copy from expression stack to type annotation stack
	int length;
	if ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {
		typeReference.annotations = new Annotation[typeReference.getAnnotatableLevels()][];
		System.arraycopy(
				this.expressionStack,
				(this.expressionPtr -= length) + 1,
				typeReference.annotations[0] = new Annotation[length],
				0,
				length);
		int typeReferenceSourceStart = typeReference.annotations[0][0].sourceStart;
		if (this.modifiersSourceStart < typeReferenceSourceStart) {
			typeReferenceSourceStart = this.modifiersSourceStart;
		}
		typeReference.bits |= ASTNode.HasTypeAnnotations;
		typeReference.sourceStart = typeReferenceSourceStart;
	}
	pushOnGenericsStack(typeReference);
	// remove the 0 pushed by ZeroTypeAnnotation
	this.typeAnnotationLengthPtr--;
	this.intPtr--;
	if (this.modifiers != ClassFileConstants.AccDefault) {
		problemReporter().invalidLocationForModifiers(typeReference);
	}
	resetModifiers();
}

