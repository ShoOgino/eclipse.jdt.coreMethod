	public final boolean getNextCharAsDigit(int radix) {
		//BOOLEAN
		//handle the case of unicode.
		//when a unicode appears then we must use a buffer that holds char internal values
		//At the end of this method currentCharacter holds the new visited char
		//and currentPosition points right next after it
		//Both previous lines are true if the currentCharacter is a digit base on radix
		//On false, no side effect has occured.

		//ALL getNextChar.... ARE OPTIMIZED COPIES 

		int temp = currentPosition;
		try {
			if (((currentCharacter = source[currentPosition++]) == '\\')
				&& (source[currentPosition] == 'u')) {
				//-------------unicode traitement ------------
				int c1, c2, c3, c4;
				int unicodeSize = 6;
				currentPosition++;
				while (source[currentPosition] == 'u') {
					currentPosition++;
					unicodeSize++;
				}

				if (((c1 = Character.getNumericValue(source[currentPosition++])) > 15
					|| c1 < 0)
					|| ((c2 = Character.getNumericValue(source[currentPosition++])) > 15 || c2 < 0)
					|| ((c3 = Character.getNumericValue(source[currentPosition++])) > 15 || c3 < 0)
					|| ((c4 = Character.getNumericValue(source[currentPosition++])) > 15 || c4 < 0)) {
					currentPosition = temp;
					return false;
				}

				currentCharacter = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);
				if (Character.digit(currentCharacter, radix) == -1) {
					currentPosition = temp;
					return false;
				}

				//need the unicode buffer
				if (withoutUnicodePtr == 0) {
					//buffer all the entries that have been left aside....
					withoutUnicodePtr = currentPosition - unicodeSize - startPosition;
					System.arraycopy(
						source,
						startPosition,
						withoutUnicodeBuffer,
						1,
						withoutUnicodePtr);
				}
				//fill the buffer with the char
				withoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;
				return true;
			} //-------------end unicode traitement--------------
			else {
				if (Character.digit(currentCharacter, radix) == -1) {
					currentPosition = temp;
					return false;
				}
				if (withoutUnicodePtr != 0)
					withoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;
				return true;
			}
		} catch (IndexOutOfBoundsException e) {
			currentPosition = temp;
			return false;
		}
	}

