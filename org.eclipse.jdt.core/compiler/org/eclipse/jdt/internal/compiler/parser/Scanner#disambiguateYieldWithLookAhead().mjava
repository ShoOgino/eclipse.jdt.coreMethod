private boolean disambiguateYieldWithLookAhead() {
	getVanguardParser();
	this.vanguardScanner.resetTo(this.currentPosition, this.eofPosition - 1);
	try {
		int lookAhead1 = this.vanguardScanner.getNextToken();
		switch (lookAhead1) {
			case TokenNameEQUAL_EQUAL :
			case TokenNameLESS_EQUAL :
			case TokenNameGREATER_EQUAL :
			case TokenNameNOT_EQUAL :
			case TokenNameLEFT_SHIFT :
			case TokenNameRIGHT_SHIFT :
			case TokenNameUNSIGNED_RIGHT_SHIFT :
			case TokenNamePLUS_EQUAL :
			case TokenNameMINUS_EQUAL :
			case TokenNameMULTIPLY_EQUAL :
			case TokenNameDIVIDE_EQUAL :
			case TokenNameAND_EQUAL :
			case TokenNameOR_EQUAL :
			case TokenNameXOR_EQUAL :
			case TokenNameREMAINDER_EQUAL :
			case TokenNameLEFT_SHIFT_EQUAL :
			case TokenNameRIGHT_SHIFT_EQUAL :
			case TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL :
			case TokenNameOR_OR :
			case TokenNameAND_AND :
			case TokenNameREMAINDER :
			case TokenNameXOR :
			case TokenNameAND :
			case TokenNameMULTIPLY :
			case TokenNameOR :
			case TokenNameTWIDDLE :
			case TokenNameDIVIDE :
			case TokenNameGREATER :
			case TokenNameLESS :
			case TokenNameLBRACE :
			case TokenNameRBRACE :
			case TokenNameLBRACKET :
			case TokenNameRBRACKET :
			case TokenNameSEMICOLON :
			case TokenNameQUESTION :
			case TokenNameCOLON :
			case TokenNameCOMMA :
			case TokenNameDOT :
			case TokenNameEQUAL :
			case TokenNameAT :
			case TokenNameELLIPSIS :
			case TokenNameARROW :
			case TokenNameCOLON_COLON :
				return false;
			case TokenNameMINUS_MINUS :
			case TokenNamePLUS_PLUS :
				int lookAhead2 = this.vanguardScanner.getNextToken();
				return lookAhead2 == TokenNameIdentifier;
			default : return true;
		}
	} catch (InvalidInputException e) {
		if (e.getMessage().equals(INVALID_CHAR_IN_STRING)) {
			//Ignore
		} else {
			// Shouldn't happen, but log the error
			e.printStackTrace();
		}
	}
	return false; // IIE event;
}

