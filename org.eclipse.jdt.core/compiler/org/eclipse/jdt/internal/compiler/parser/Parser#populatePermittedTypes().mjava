private void populatePermittedTypes() {
	int length = this.astLengthStack[this.astLengthPtr--];
	//permitted types
	this.astPtr -= length;
	TypeDeclaration typeDecl = (TypeDeclaration) this.astStack[this.astPtr];
	typeDecl.restrictedIdentifierStart= this.intStack[this.intPtr--];
	System.arraycopy(
		this.astStack,
		this.astPtr + 1,
		typeDecl.permittedTypes = new TypeReference[length],
		0,
		length);
	TypeReference[] permittedTypes = typeDecl.permittedTypes;
	for (int i = 0, max = permittedTypes.length; i < max; i++) {
		TypeReference typeReference = permittedTypes[i];
		typeDecl.bits |= (typeReference.bits & ASTNode.HasTypeAnnotations); // TODO: Confirm with spec
//		typeReference.bits |= ASTNode.IsSuperType; // TODO: Check equivalent required
	}
	typeDecl.bodyStart = typeDecl.permittedTypes[length-1].sourceEnd + 1;
	this.listLength = 0; // reset after having read super-interfaces
	// recovery
	if (this.currentElement != null) {
		this.lastCheckPoint = typeDecl.bodyStart;
	}
}

