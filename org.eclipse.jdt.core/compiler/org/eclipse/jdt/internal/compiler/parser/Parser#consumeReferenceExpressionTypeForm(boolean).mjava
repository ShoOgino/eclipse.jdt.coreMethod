protected void consumeReferenceExpressionTypeForm(boolean qualified) {
	// ReferenceExpression ::= Name OnlyTypeArgumentsForReferenceExpression Dimsopt '::' NonWildTypeArgumentsopt IdentifierOrNew
	// ReferenceExpression ::= Name OnlyTypeArgumentsForReferenceExpression '.' ClassOrInterfaceType Dimsopt '::' NonWildTypeArgumentsopt IdentifierOrNew
	
	ReferenceExpression rexp;
	TypeReference type = null;
	TypeReference [] typeArguments = null;
	SingleNameReference methodReference = null;
	int newEnd = -1;
	
	boolean newForm = this.intStack[this.intPtr--] != 0;
	if (newForm) {
		newEnd = this.intStack[this.intPtr--] + 3; // "new"
	} else {
		methodReference = (SingleNameReference) getUnspecifiedReferenceOptimized();
	}
	
	int length = this.genericsLengthStack[this.genericsLengthPtr--];
	if (length > 0) {
		this.genericsPtr -= length;
		System.arraycopy(this.genericsStack, this.genericsPtr + 1, typeArguments = new TypeReference[length], 0, length);
		this.intPtr--;  // pop type arguments source start.
	}
	int dims = this.intStack[this.intPtr--];
	// Code lifted from CastExpression consumption actions and pounded into shape ...
	if (qualified) {
		TypeReference rightSide = getTypeReference(0);
		ParameterizedQualifiedTypeReference qualifiedParameterizedTypeReference = computeQualifiedGenericsFromRightSide(rightSide, dims);
		this.intPtr--;
		if (newForm) {
			rexp = new ReferenceExpression(qualifiedParameterizedTypeReference, typeArguments, newEnd);
		} else {
			rexp = new ReferenceExpression(qualifiedParameterizedTypeReference, typeArguments, methodReference);
		}
	} else {		
		pushOnGenericsIdentifiersLengthStack(this.identifierLengthStack[this.identifierLengthPtr]);
		type = getTypeReference(dims);
		if (newForm) {
			rexp = new ReferenceExpression(type, typeArguments, newEnd);
		} else {
			rexp = new ReferenceExpression(type, typeArguments, methodReference);
		}
		this.intPtr --; // pop '<' position
	}
	pushOnExpressionStack(rexp);
	if (!this.parsingJava8Plus) {
		problemReporter().referenceExpressionsNotBelow18(rexp);
	}
}

