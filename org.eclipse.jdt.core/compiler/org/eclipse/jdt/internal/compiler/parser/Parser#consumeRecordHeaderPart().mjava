protected void consumeRecordHeaderPart() {
	// RecordHeaderPart ::= RecordHeaderName RecordHeader InterfaceTypeListopt 
	int length = this.astLengthStack[this.astLengthPtr--];
	//super interfaces
	this.astPtr -= length;
	// There is a class declaration on the top of stack
	TypeDeclaration typeDecl = (TypeDeclaration) this.astStack[this.astPtr];
	if (length > 0) {
		System.arraycopy(
				this.astStack,
				this.astPtr + 1,
				typeDecl.superInterfaces = new TypeReference[length],
				0,
				length);
			TypeReference[] superinterfaces = typeDecl.superInterfaces;
			for (int i = 0, max = superinterfaces.length; i < max; i++) {
				TypeReference typeReference = superinterfaces[i];
				typeDecl.bits |= (typeReference.bits & ASTNode.HasTypeAnnotations);
				typeReference.bits |= ASTNode.IsSuperType;
			}
			typeDecl.bodyStart = typeDecl.superInterfaces[length-1].sourceEnd + 1;
			this.listLength = 0; // reset after having read super-interfaces
	}
	if (this.currentToken == TokenNameLBRACE) {
		typeDecl.bodyStart = this.scanner.currentPosition;
	}
	if (this.currentElement != null) {
		this.restartRecovery = true; // used to avoid branching back into the regular automaton
	}
	// flush the comments related to the class header
	this.scanner.commentPtr = -1;
}

