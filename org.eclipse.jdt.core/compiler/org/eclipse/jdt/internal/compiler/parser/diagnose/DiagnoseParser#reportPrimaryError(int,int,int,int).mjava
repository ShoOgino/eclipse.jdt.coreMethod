	private void reportPrimaryError(int msgCode, int nameIndex, int token, int scopeNameIndex) {
		String name;
		if (nameIndex >= 0) {
			name = Parser.readableName[nameIndex];
		} else {
			name = EMPTY_STRING;
		}

		int errorStart = lexStream.start(token);
		int errorEnd = lexStream.end(token);
		int currentKind = lexStream.kind(token);
		String errorTokenName = Parser.name[Parser.terminal_index[lexStream.kind(token)]];
		char[] errorTokenSource = lexStream.name(token);

		int addedToken = -1;
		if(recoveryScanner != null) {
			if (nameIndex >= 0) {
				addedToken = Parser.reverse_index[nameIndex];
			}
		}
		switch(msgCode) {
			case BEFORE_CODE:
				if(recoveryScanner != null) {
					if(addedToken > -1) {
						recoveryScanner.insertToken(addedToken, -1, errorStart);
					} else {
						int[] template = getNTermTemplate(-addedToken);
						if(template != null) {
							recoveryScanner.insertTokens(template, -1, errorStart);
						}
					}
				}
				if(this.reportProblem) problemReporter().parseErrorInsertBeforeToken(
					errorStart, 
					errorEnd, 
					currentKind,
					errorTokenSource, 
					errorTokenName, 
					name);
				 break;
			case INSERTION_CODE:
				if(recoveryScanner != null) {
					if(addedToken > -1) {
						recoveryScanner.insertToken(addedToken, -1, errorEnd);
					} else {
						int[] template = getNTermTemplate(-addedToken);
						if(template != null) {
							recoveryScanner.insertTokens(template, -1, errorEnd);
						}
					}
				}
				if(this.reportProblem) problemReporter().parseErrorInsertAfterToken(
					errorStart, 
					errorEnd, 
					currentKind,
					errorTokenSource, 
					errorTokenName, 
					name);  
				 break;
			case DELETION_CODE:
				if(recoveryScanner != null) {
					recoveryScanner.removeTokens(errorStart, errorEnd);
				}
				if(this.reportProblem) problemReporter().parseErrorDeleteToken(
					errorStart, 
					errorEnd, 
					currentKind,
					errorTokenSource, 
					errorTokenName);
				break;
			case INVALID_CODE:
				if (name.length() == 0) {
					if(recoveryScanner != null) {
						recoveryScanner.removeTokens(errorStart, errorEnd);
					}
					if(this.reportProblem) problemReporter().parseErrorReplaceToken(
						errorStart, 
						errorEnd, 
						currentKind,
						errorTokenSource, 
						errorTokenName, 
						name);
				} else {
					if(recoveryScanner != null) {
						if(addedToken > -1) {
							recoveryScanner.replaceTokens(addedToken, errorStart, errorEnd);
						} else {
							int[] template = getNTermTemplate(-addedToken);
							if(template != null) {
								recoveryScanner.replaceTokens(template, errorStart, errorEnd);
							}
						}
					}
					if(this.reportProblem) problemReporter().parseErrorInvalidToken(
						errorStart, 
						errorEnd, 
						currentKind,
						errorTokenSource, 
						errorTokenName, 
						name);
				}
				break;
			case SUBSTITUTION_CODE:
				if(recoveryScanner != null) {
					if(addedToken > -1) {
						recoveryScanner.replaceTokens(addedToken, errorStart, errorEnd);
					} else {
						int[] template = getNTermTemplate(-addedToken);
						if(template != null) {
							recoveryScanner.replaceTokens(template, errorStart, errorEnd);
						}
					}
				}
				if(this.reportProblem) problemReporter().parseErrorReplaceToken(
					errorStart, 
					errorEnd, 
					currentKind,
					errorTokenSource, 
					errorTokenName, 
					name); 
				 break;
			case SCOPE_CODE:
				StringBuffer buf = new StringBuffer();
				
				int[] addedTokens = null;
	            int addedTokenCount = 0;
	            if(this.recoveryScanner != null) {
	            	addedTokens = new int[Parser.scope_rhs.length - Parser.scope_suffix[- nameIndex]];
	            }
	            
				for (int i = Parser.scope_suffix[- nameIndex]; Parser.scope_rhs[i] != 0; i++) {
					buf.append(Parser.readableName[Parser.scope_rhs[i]]);
					if (Parser.scope_rhs[i + 1] != 0) // any more symbols to print?
						buf.append(' ');
					
					if(addedTokens != null) {
	                	int tmpAddedToken = Parser.reverse_index[Parser.scope_rhs[i]];
		                if (tmpAddedToken > -1) {
		                	int length = addedTokens.length;
		                	if(addedTokenCount == length) {
		                		System.arraycopy(addedTokens, 0, addedTokens = new int[length * 2], 0, length);
		                	}
		                	addedTokens[addedTokenCount++] = tmpAddedToken;
		                } else {
		                	int[] template = getNTermTemplate(-tmpAddedToken);
		                	if(template != null) {
			                	for (int j = 0; j < template.length; j++) {
									int length = addedTokens.length;
		                			if(addedTokenCount == length) {
				                		System.arraycopy(addedTokens, 0, addedTokens = new int[length * 2], 0, length);
				                	}
		                			addedTokens[addedTokenCount++] = template[j];
								}
		                	} else {
			                	addedTokenCount = 0;
			                	addedTokens = null;
		                	}
		                }
	                }
				}

				if(addedTokenCount > 0) {
	            	System.arraycopy(addedTokens, 0, addedTokens = new int[addedTokenCount], 0, addedTokenCount);
	            	
	            	int completedToken = -1;
	            	if(scopeNameIndex != 0) {
	            		completedToken = -Parser.reverse_index[scopeNameIndex];
	            	}
	            	this.recoveryScanner.insertTokens(addedTokens, completedToken, errorEnd);
	            }
				
				if (scopeNameIndex != 0) {
					if(this.reportProblem) problemReporter().parseErrorInsertToComplete(
						errorStart, 
						errorEnd,
						buf.toString(),
						Parser.readableName[scopeNameIndex]);
				} else {
					if(this.reportProblem) problemReporter().parseErrorInsertToCompleteScope(
						errorStart, 
						errorEnd,
						buf.toString()); 
				}
				
				break;
			case EOF_CODE:
				if(this.reportProblem) problemReporter().parseErrorUnexpectedEnd(
					errorStart, 
					errorEnd); 
				break;
			case MERGE_CODE:
				if(recoveryScanner != null) {
					if(addedToken > -1) {
						recoveryScanner.replaceTokens(addedToken, errorStart, errorEnd);
					} else {
						int[] template = getNTermTemplate(-addedToken);
						if(template != null) {
							recoveryScanner.replaceTokens(template, errorStart, errorEnd);
						}
					}
				}
				if(this.reportProblem) problemReporter().parseErrorMergeTokens(
					errorStart, 
					errorEnd,
					name);
				break;
			case MISPLACED_CODE:
				if(recoveryScanner != null) {
					recoveryScanner.removeTokens(errorStart, errorEnd);
				}
				if(this.reportProblem) problemReporter().parseErrorMisplacedConstruct(
					errorStart, 
					errorEnd);
				break;
			default:
				if (name.length() == 0) {
					if(recoveryScanner != null) {
						recoveryScanner.removeTokens(errorStart, errorEnd);
					}
					if(this.reportProblem) problemReporter().parseErrorNoSuggestion(
						errorStart, 
						errorEnd, 
						currentKind,
						errorTokenSource, 
						errorTokenName);
				} else {
					if(recoveryScanner != null) {
						if(addedToken > -1) {
							recoveryScanner.replaceTokens(addedToken, errorStart, errorEnd);
						} else {
							int[] template = getNTermTemplate(-addedToken);
							if(template != null) {
								recoveryScanner.replaceTokens(template, errorStart, errorEnd);
							}
						}
					}
					if(this.reportProblem) problemReporter().parseErrorReplaceToken(
						errorStart, 
						errorEnd, 
						currentKind,
						errorTokenSource, 
						errorTokenName, 
						name); 
				}
				break;
		}
	}

