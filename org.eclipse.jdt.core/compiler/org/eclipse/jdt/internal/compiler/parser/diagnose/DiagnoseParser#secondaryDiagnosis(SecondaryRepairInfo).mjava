//
//	   This procedure is invoked to issue a secondary diagnosis and
//	   adjust the input buffer.  The recovery in question is either
//	   an automatic scope recovery, a manual scope recovery, a
//	   secondary substitution or a secondary deletion.
//
	private void secondaryDiagnosis(SecondaryRepairInfo repair) {
		switch(repair.code) {
			case SCOPE_CODE: {
	            if (repair.stackPosition < stateStackTop) {
	                reportError(DELETION_CODE,
	                            Parser.terminal_index[ERROR_SYMBOL],
	                            locationStack[repair.stackPosition],
	                            repair.recoveryOnNextStack ? buffer[1] : buffer[2]);
	            }
	            for (int i = 0; i < scopeStackTop; i++) {
	                reportError(SCOPE_CODE,
	                            -scopeIndex[i],
	                            locationStack[scopePosition[i]],
	                            repair.recoveryOnNextStack ? buffer[1] : buffer[2],
	                            Parser.non_terminal_index[Parser.scope_lhs[scopeIndex[i]]]);
	            }
	
	            repair.symbol = Parser.scope_lhs[scopeIndex[scopeStackTop]] + NT_OFFSET;
	            stateStackTop = scopePosition[scopeStackTop];
	            reportError(SCOPE_CODE,
	                        -scopeIndex[scopeStackTop],
	                        locationStack[scopePosition[scopeStackTop]],
	                        repair.recoveryOnNextStack ? buffer[1] : buffer[2],
	                        getNtermIndex(stack[stateStackTop],
	                                      repair.symbol,
	                                      repair.bufferPosition)
	                       );
	            break;
	        }
			default: {
				reportError(repair.code,
							(repair.code == SECONDARY_CODE
										  ? getNtermIndex(stack[repair.stackPosition],
														  repair.symbol,
														  repair.bufferPosition)
										  : Parser.terminal_index[ERROR_SYMBOL]),
							locationStack[repair.stackPosition],
							buffer[repair.bufferPosition - 1]);
				stateStackTop = repair.stackPosition;
			}
		}
	}

