protected void consumeLambdaExpression() {
	
	// LambdaExpression ::= LambdaParameters ARROW LambdaBody

	this.astLengthPtr--;
	Statement body = (Statement) this.astStack[this.astPtr--];
	if (body instanceof Block) {
		this.nestedType--;
		this.intPtr--;
		if (this.options.ignoreMethodBodies) {
			body = new Block(0);
		}
	}
	Argument [] arguments = null;
	int length = this.astLengthStack[this.astLengthPtr--];
	this.astPtr -= length;
	//arguments
	if (length != 0) {
		System.arraycopy(
			this.astStack,
			this.astPtr + 1,
			arguments = new Argument[length],
			0,
			length);
	}
	LambdaExpression lexp = new LambdaExpression(arguments, body);
	this.intPtr--;  // ')' position, discard for now.
	lexp.sourceStart = this.intStack[this.intPtr--]; // '(' position or identifier position.
	lexp.sourceEnd = body.sourceEnd;
	pushOnExpressionStack(lexp);
	this.listLength = 0; // reset this.listLength after having read all parameters
}

