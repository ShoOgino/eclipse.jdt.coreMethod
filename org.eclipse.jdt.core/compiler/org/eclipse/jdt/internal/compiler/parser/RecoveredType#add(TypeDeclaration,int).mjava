	public RecoveredElement add(
		TypeDeclaration memberTypeDeclaration,
		int bracketBalance) {

		/* do not consider a type starting passed the type end (if set)
			it must be belonging to an enclosing type */
		if (typeDeclaration.declarationSourceEnd != 0
			&& memberTypeDeclaration.declarationSourceStart
				> typeDeclaration.declarationSourceEnd) {
			return this.parent.add(memberTypeDeclaration, bracketBalance);
		}

		if (memberTypes == null) {
			memberTypes = new RecoveredType[5];
			memberTypeCount = 0;
		} else {
			if (memberTypeCount == memberTypes.length) {
				System.arraycopy(
					memberTypes,
					0,
					(memberTypes = new RecoveredType[2 * memberTypeCount]),
					0,
					memberTypeCount);
			}
		}
		RecoveredType element =
			new RecoveredType(memberTypeDeclaration, this, bracketBalance);
		memberTypes[memberTypeCount++] = element;

		/* consider that if the opening brace was not found, it is there */
		if (!foundOpeningBrace) {
			foundOpeningBrace = true;
			this.bracketBalance++;
		}
		/* if member type not finished, then member type becomes current */
		if (memberTypeDeclaration.declarationSourceEnd == 0)
			return element;
		return this;
	}

