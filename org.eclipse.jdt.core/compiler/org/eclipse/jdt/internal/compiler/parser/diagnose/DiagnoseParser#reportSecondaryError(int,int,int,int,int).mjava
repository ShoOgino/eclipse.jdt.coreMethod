	private void reportSecondaryError(int msgCode,	int nameIndex,	int leftToken,	int rightToken, int scopeNameIndex) {
		String name;
		if (nameIndex >= 0) {
			name = Parser.readableName[nameIndex];
		} else {
			name = EMPTY_STRING;	
		}

		int errorStart = -1;
		if(lexStream.isInsideStream(leftToken)) {
			if(leftToken == 0) {
				errorStart = lexStream.start(leftToken + 1);
			} else {
				errorStart = lexStream.start(leftToken);
			}
		} else {
			if(leftToken == errorToken) {
				errorStart = errorTokenStart;
			} else {
				for (int i = 0; i <= stateStackTop; i++) {
					if(locationStack[i] == leftToken) {
						errorStart = locationStartStack[i];
					}
				}
			}
			if(errorStart == -1) {
				errorStart = lexStream.start(rightToken);
			}
		}
		int errorEnd = lexStream.end(rightToken);
		
		switch(msgCode) {
			case MISPLACED_CODE:
				problemReporter().parseErrorMisplacedConstruct(
					errorStart, 
					errorEnd); 
				break;
			case SCOPE_CODE:
				// error start is on the last token start
				errorStart = lexStream.start(rightToken);
			
	            StringBuffer buf = new StringBuffer();
	            for (int i = Parser.scope_suffix[- nameIndex]; Parser.scope_rhs[i] != 0; i++) {
	                buf.append(Parser.readableName[Parser.scope_rhs[i]]);
	                if (Parser.scope_rhs[i+1] != 0)
	                     buf.append(' ');
	            }
	            if (scopeNameIndex != 0) {
	                problemReporter().parseErrorInsertToComplete(
						errorStart, 
						errorEnd,
						buf.toString(),
						Parser.readableName[scopeNameIndex]);
	            } else {
	            	problemReporter().parseErrorInsertToCompletePhrase(
						errorStart, 
						errorEnd,
						buf.toString()); 
	            }
	            break;
			case MERGE_CODE:
				problemReporter().parseErrorMergeTokens(
					errorStart, 
					errorEnd,
					name);
				break;
			case DELETION_CODE:
				problemReporter().parseErrorDeleteTokens(
					errorStart, 
					errorEnd);
				break;
			default:
				if (name.length() == 0) {
					problemReporter().parseErrorNoSuggestionForTokens(
						errorStart, 
						errorEnd);
				} else {
					problemReporter().parseErrorReplaceTokens(
						errorStart, 
						errorEnd,
						name);
				}
		}
		return;
	}

