protected void consumeCastExpressionWithQualifiedGenericsArrayWithTypeAnnotations() {
	// CastExpression ::= PushLPAREN Name OnlyTypeArguments '.' ClassOrInterfaceType Dims PushRPAREN InsideCastExpression UnaryExpressionNotPlusMinus
	int end = this.intStack[this.intPtr--];

	int dim = this.intStack[this.intPtr--];
	// pop expression
	Expression expression = this.expressionStack[this.expressionPtr--];
	this.expressionLengthPtr--;
	
	TypeReference rightSide = getUnannotatedTypeReference(0); // by design the type after . is not annotated.

	ParameterizedQualifiedTypeReference typeReference = computeQualifiedGenericsFromRightSide(rightSide, dim);
	this.intPtr--;
	int length;
	if ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {
		typeReference.annotations = new Annotation[typeReference.getAnnotatableLevels()][];
		System.arraycopy(
				this.expressionStack,
				(this.expressionPtr -= length) + 1,
				typeReference.annotations[0] = new Annotation[length],
				0,
				length);
		int typeReferenceSourceStart = typeReference.annotations[0][0].sourceStart;
		if (this.modifiersSourceStart < typeReferenceSourceStart) {
			typeReferenceSourceStart = this.modifiersSourceStart;
		}
		typeReference.bits |= ASTNode.HasTypeAnnotations;
		typeReference.sourceStart = typeReferenceSourceStart;
	}
	Expression cast;
	pushOnExpressionStack(cast = new CastExpression(expression, typeReference));
	typeReference.sourceEnd = end - 1;
	typeReference.sourceStart = (cast.sourceStart = this.intStack[this.intPtr--]) + 1;
	cast.sourceEnd = expression.sourceEnd;
	if (this.modifiers != ClassFileConstants.AccDefault) {
		problemReporter().invalidLocationForModifiers(typeReference);
	}
	resetModifiers();
}

