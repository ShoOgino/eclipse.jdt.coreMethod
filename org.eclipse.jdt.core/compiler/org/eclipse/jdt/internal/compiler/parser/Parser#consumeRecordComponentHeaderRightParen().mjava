protected void consumeRecordComponentHeaderRightParen() {
	// RecordComponentHeaderRightParen ::= ')'
	int length = this.astLengthStack[this.astLengthPtr--];
	this.astPtr -= length;
	TypeDeclaration td = (TypeDeclaration) this.astStack[this.astPtr];
	RecordDeclaration rd = new RecordDeclaration(td);
	this.astStack[this.astPtr] = rd;
	rd.sourceEnd = 	this.rParenPos;
	if (length != 0) {
		Argument[] args = new Argument[length];
		System.arraycopy(
				this.astStack,
				this.astPtr + 1,
				args,
				0,
				length);
		FieldDeclaration[] fields = new FieldDeclaration[length];
		for (int i = 0, max = args.length; i < max; i++) {
			Argument arg = args[i];
			FieldDeclaration f = fields[i] = createFieldDeclaration(arg.name, arg.sourceStart, arg.sourceEnd);
			f.annotations = arg.annotations;
			f.bits = arg.bits;
			f.declarationSourceStart = arg.declarationSourceStart;
			f.declarationSourceEnd = arg.declarationSourceEnd;
			f.endPart1Position = arg.sourceEnd; //TODO BETA_JAVA14 - recheck
			f.endPart2Position = arg.declarationSourceEnd;
			f.modifiers = arg.modifiers;
			/*
			 * JLS 14 Sec 8.10.1 Record Header
			 * The record header declares a number of record components. The record components
			 * declare the fields of the record class. Each record component in the RecordHeader
			 * declares one private final field in the record class whose name is same as the
			 * Identifier in the record component.
			 */
			f.modifiers |= ClassFileConstants.AccPrivate | ClassFileConstants.AccFinal;
			f.modifiersSourceStart = arg.modifiersSourceStart;
			f.sourceStart = arg.sourceStart;
			f.sourceEnd = arg.sourceEnd;
			f.type = arg.type;

			if ((args[i].bits & ASTNode.HasTypeAnnotations) != 0) {
				rd.bits |= ASTNode.HasTypeAnnotations;
				break;
			}
		}
		rd.fields = fields;
		rd.nRecordComponents = length;
	}
	rd.bodyStart = this.rParenPos+1;
	this.listLength = 0; // reset this.listLength after having read all parameters
	// recovery
	if (this.currentElement != null){
		this.lastCheckPoint = rd.bodyStart;
		if (this.currentElement.parseTree() == rd) return;
	}
}

