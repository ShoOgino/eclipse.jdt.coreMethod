// This method is for handling the left over escaped characters during the first
// scanning (scanForStringLiteral). Admittedly this goes over the text block
// content again char by char, but this is required in order to correctly
// treat all the white space and line endings
private boolean getLineContent(StringBuilder result, char[] line, int start, int end, boolean merge, boolean lastLine) {
	int lastPointer = 0;
	for(int i = start; i < end;) {
		char c = line[i];
		if (c != '\\') {
			i++;
			continue;
		}
		if (i < end) {
			if (lastPointer + 1 <= i) {
				result.append(CharOperation.subarray(line, lastPointer == 0 ? start : lastPointer, i));
			}
			char next = line[++i];
			switch (next) {
				case '\\' :
					result.append('\\');
					if (i == end)
						merge = false;
					break;
				case 's' :
					result.append(' ');
					break;
				case 'b' :
					result.append('\b');
					break;
				case 'n' :
					result.append('\n');
					break;
				case 'r' :
					result.append('\r');
					break;
				case 't' :
					result.append('\t');
					break;
				case 'f' :
					result.append('\f');
					break;
				default :
					// Direct copy from scanEscapeCharacter
					int pos = i + 1;
					int number = ScannerHelper.getHexadecimalValue(next);
					if (number >= 0 && number <= 7) {
						boolean zeroToThreeNot = number > 3;
						try {
							if (ScannerHelper.isDigit(next = line[pos])) {
								pos++;
								int digit = ScannerHelper.getHexadecimalValue(next);
								if (digit >= 0 && digit <= 7) {
									number = (number * 8) + digit;
									if (ScannerHelper.isDigit(next = line[pos])) {
										pos++;
										if (zeroToThreeNot) {
											// has read \NotZeroToThree OctalDigit Digit --> ignore last character
										} else {
											digit = ScannerHelper.getHexadecimalValue(next);
											if (digit >= 0 && digit <= 7){ // has read \ZeroToThree OctalDigit OctalDigit
												number = (number * 8) + digit;
											} else {
												// has read \ZeroToThree OctalDigit NonOctalDigit --> ignore last character
											}
										}
									} else {
										// has read \OctalDigit NonDigit--> ignore last character
									}
								} else {
									// has read \OctalDigit NonOctalDigit--> ignore last character
								}
							} else {
								// has read \OctalDigit --> ignore last character
							}
						} catch (InvalidInputException e) {
							// Unlikely as this has already been processed in scanForStringLiteral()
						}
						if (number < 255) {
							next = (char) number;
						}
						result.append(next);
						lastPointer = i = pos;
						continue;
					} else {
						// Dealing with just '\'
						result.append(c);
						lastPointer = i;
						continue;
					}
			}
			lastPointer = ++i;
		}
	}
	end = merge ? end : end >= line.length ? end : end + 1;
	char[] chars = lastPointer == 0 ?
			CharOperation.subarray(line, start, end) :
				CharOperation.subarray(line, lastPointer, end);
	// The below check is because CharOperation.subarray tend to return null when the
	// boundaries produce a zero sized char[]
	if (chars != null && chars.length > 0)
		result.append(chars);
	return (!merge && !lastLine);
}

