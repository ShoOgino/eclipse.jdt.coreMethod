	public void diagnoseParse() {
		lexStream.reset();

		currentToken = lexStream.getToken();

		int prev_pos;
		int pos;
		int next_pos;
		int act = START_STATE;

		reallocateStacks();

		//
		// Start parsing
		//
		stateStackTop = 0;
		stack[stateStackTop] = act;

		int tok = lexStream.kind(currentToken);
		locationStack[stateStackTop] = currentToken;
		locationStartStack[stateStackTop] = lexStream.start(currentToken);
		
		boolean forceRecoveryAfterLBracketMissing = false;
//		int forceRecoveryToken = -1;

		//
		// Process a terminal
		//
		do {
			//
			// Synchronize state stacks and update the location stack
			//
			prev_pos = -1;
			prevStackTop = -1;

			next_pos = -1;
			nextStackTop = -1;

			pos = stateStackTop;
			tempStackTop = stateStackTop - 1;
			for (int i = 0; i <= stateStackTop; i++)
				tempStack[i] = stack[i];

			act = Parser.tAction(act, tok);
			//
			// When a reduce action is encountered, we compute all REDUCE
			// and associated goto actions induced by the current token.
			// Eventually, a SHIFT, SHIFT-REDUCE, ACCEPT or ERROR action is
			// computed...
			//
			while (act <= NUM_RULES) {
				do {
					tempStackTop -= (Parser.rhs[act]-1);
					act = Parser.ntAction(tempStack[tempStackTop], Parser.lhs[act]);
				} while(act <= NUM_RULES);
				//
				// ... Update the maximum useful position of the
				// (STATE_)STACK, push goto state into stack, and
				// compute next action on current symbol ...
				//
				if (tempStackTop + 1 >= stackLength)
					reallocateStacks();
				pos = pos < tempStackTop ? pos : tempStackTop;
				tempStack[tempStackTop + 1] = act;
				act = Parser.tAction(act, tok);
			}

			//
			// At this point, we have a shift, shift-reduce, accept or error
			// action.  STACK contains the configuration of the state stack
			// prior to executing any action on curtok. next_stack contains
			// the configuration of the state stack after executing all
			// reduce actions induced by curtok.  The variable pos indicates
			// the highest position in STACK that is still useful after the
			// reductions are executed.
			//
			while(act > ERROR_ACTION || act < ACCEPT_ACTION) { // SHIFT-REDUCE action or SHIFT action ?
				nextStackTop = tempStackTop + 1;
				for (int i = next_pos + 1; i <= nextStackTop; i++)
					nextStack[i] = tempStack[i];

				for (int i = pos + 1; i <= nextStackTop; i++) {
					locationStack[i] = locationStack[stateStackTop];
					locationStartStack[i] = locationStartStack[stateStackTop];
				}

				//
				// If we have a shift-reduce, process it as well as
				// the goto-reduce actions that follow it.
				//
				if (act > ERROR_ACTION) {
					act -= ERROR_ACTION;
					do {
						nextStackTop -= (Parser.rhs[act]-1);
						act = Parser.ntAction(nextStack[nextStackTop], Parser.lhs[act]);
					} while(act <= NUM_RULES);
					pos = pos < nextStackTop ? pos : nextStackTop;
				}

				if (nextStackTop + 1 >= stackLength)
					reallocateStacks();

				tempStackTop = nextStackTop;
				nextStack[++nextStackTop] = act;
				next_pos = nextStackTop;

				//
				// Simulate the parser through the next token without
				// destroying STACK or next_stack.
				//
				currentToken = lexStream.getToken();
				tok = lexStream.kind(currentToken);
				act = Parser.tAction(act, tok);
				while(act <= NUM_RULES) {
					//
					// ... Process all goto-reduce actions following
					// reduction, until a goto action is computed ...
					//
					do {
						int lhs_symbol = Parser.lhs[act];
						if(DEBUG) {
							System.out.println(Parser.name[Parser.non_terminal_index[lhs_symbol]]);
						}
						tempStackTop -= (Parser.rhs[act]-1);
						act = (tempStackTop > next_pos
								   ? tempStack[tempStackTop]
								   : nextStack[tempStackTop]);
						act = Parser.ntAction(act, lhs_symbol);
					}   while(act <= NUM_RULES);

					//
					// ... Update the maximum useful position of the
					// (STATE_)STACK, push GOTO state into stack, and
					// compute next action on current symbol ...
					//
					if (tempStackTop + 1 >= stackLength)
						reallocateStacks();

					next_pos = next_pos < tempStackTop ? next_pos : tempStackTop;
					tempStack[tempStackTop + 1] = act;
					act = Parser.tAction(act, tok);
				}

//				if((tok != TokenNameRBRACE || (forceRecoveryToken != currentToken && (lexStream.flags(currentToken) & LexStream.LBRACE_MISSING) != 0))
//					&& (lexStream.flags(currentToken) & LexStream.IS_AFTER_JUMP) !=0) {
//					act = ERROR_ACTION;
//					if(forceRecoveryToken != currentToken
//						&& (lexStream.flags(currentToken) & LexStream.LBRACE_MISSING) != 0) {
//						forceRecoveryAfterLBracketMissing = true;
//						forceRecoveryToken = currentToken;
//					}
//				}
				
				//
				// No error was detected, Read next token into
				// PREVTOK element, advance CURTOK pointer and
				// update stacks.
				//
				if (act != ERROR_ACTION) {
					prevStackTop = stateStackTop;
					for (int i = prev_pos + 1; i <= prevStackTop; i++)
						prevStack[i] = stack[i];
					prev_pos = pos;

					stateStackTop = nextStackTop;
					for (int i = pos + 1; i <= stateStackTop; i++)
						stack[i] = nextStack[i];
					locationStack[stateStackTop] = currentToken;
					locationStartStack[stateStackTop] = lexStream.start(currentToken);
					pos = next_pos;
				}
			}

			//
			// At this stage, either we have an ACCEPT or an ERROR
			// action.
			//
			if (act == ERROR_ACTION) {
				//
				// An error was detected.
				//
				RepairCandidate candidate = errorRecovery(currentToken, forceRecoveryAfterLBracketMissing);
				
				forceRecoveryAfterLBracketMissing = false;
				
				if(parser.reportOnlyOneSyntaxError) {
					return;
				}

				act = stack[stateStackTop];

				//
				// If the recovery was successful on a nonterminal candidate,
				// parse through that candidate and "read" the next token.
				//
				if (candidate.symbol == 0) {
					break;
				} else if (candidate.symbol > NT_OFFSET) {
					int lhs_symbol = candidate.symbol - NT_OFFSET;
					if(DEBUG) {
						System.out.println(Parser.name[Parser.non_terminal_index[lhs_symbol]]);
					}
					act = Parser.ntAction(act, lhs_symbol);
					while(act <= NUM_RULES) {
						stateStackTop -= (Parser.rhs[act]-1);
						act = Parser.ntAction(stack[stateStackTop], Parser.lhs[act]);
					}
					stack[++stateStackTop] = act;
					currentToken = lexStream.getToken();
					tok = lexStream.kind(currentToken);
					locationStack[stateStackTop] = currentToken;
					locationStartStack[stateStackTop] = lexStream.start(currentToken);
				} else {
					tok = candidate.symbol;
					locationStack[stateStackTop] = candidate.location;
					locationStartStack[stateStackTop] = lexStream.start(candidate.location);
				}
			}
		} while (act != ACCEPT_ACTION);

		return;
	}

