protected void parseTags(boolean hasLineComment) {
	final NLSLine line = this.currentLine;
	if (!hasLineComment) {
		if (line.size() == 0) return; // nothing to do
		if (this.nonNLSStrings == null) this.nonNLSStrings = new HashSet();
		this.nonNLSStrings.addAll(line.elements);
	} else {
		if (linePtr < 0) {
			int i = 0;
			while (Character.isWhitespace(this.source[i])) {
				i++;
			}
			if (getCurrentTokenStartPosition() == i) {
				// the whole line is commented out
				return;
			}
		} else {
			int i = this.lineEnds[this.linePtr] + 1; 
			while (Character.isWhitespace(this.source[i])) {
				i++;
			}
			if (getCurrentTokenStartPosition() == i) {
				// the whole line is commented out
				return;
			}
		}
		char[] s = getCurrentTokenSource();
		int pos = CharOperation.indexOf(TAG_PREFIX, s, true);
		if (pos != -1) {
			if (this.unnecessaryNONNLSTags == null) this.unnecessaryNONNLSTags = new HashSet();
			while (pos != -1) {
				int start = pos + TAG_PREFIX_LENGTH;
				int end = CharOperation.indexOf(TAG_POSTFIX, s, start);
				if (end != -1) {
					String index = new String(CharOperation.subarray(s, start, end));
					int i = 0;
					try {
						i = Integer.parseInt(index) - 1; // Tags are one based not zero based.
					} catch (NumberFormatException e) {
						i = -1; // we don't want to consider this as a valid NLS tag
					}
					if (line != null && line.exists(i)) {
						line.set(i, null);
						final NLSTag tag = new NLSTag(pos + this.getCurrentTokenStartPosition(), this.getCurrentTokenStartPosition() + end, NLSTag.USED);
						if (!this.unnecessaryNONNLSTags.add(tag)) {
							this.unnecessaryNONNLSTags.remove(tag);
							this.unnecessaryNONNLSTags.add(tag);
						}
					} else {
						this.unnecessaryNONNLSTags.add(new NLSTag(pos + this.getCurrentTokenStartPosition(), this.getCurrentTokenStartPosition() + end));
					}
				}
				pos = CharOperation.indexOf(TAG_PREFIX, s, true, start);
			}
		}
	
		if (line.size() != 0) {
			if (this.nonNLSStrings == null) this.nonNLSStrings = new HashSet();
			for (Iterator iterator = line.iterator(); iterator.hasNext(); ) {
				StringLiteral literal = (StringLiteral) iterator.next();
				if (literal != null) {
					this.nonNLSStrings.add(literal);
				}
			}
		}
	}
	if (this.currentLine != null) this.currentLine.clear();
}

