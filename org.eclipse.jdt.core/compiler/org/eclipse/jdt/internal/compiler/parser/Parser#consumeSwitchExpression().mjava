protected void consumeSwitchExpression() {
// SwitchExpression ::= 'switch' '(' Expression ')' OpenBlock SwitchExpressionBlock
	SwitchExpression expression = new SwitchExpression();
	expression.expression = this.expressionStack[this.expressionPtr--];
//	this.realBlockPtr--; // drop unused, a SwitchExpression does *not* define a Block with explicit declarations
	int numLabels = this.astLengthStack[this.astLengthPtr--];
	expression.switchLabeledRules = new SwitchLabeledRule[numLabels];
	for (int i= numLabels-1; i>=0; i--) {
		expression.switchLabeledRules[i] = (SwitchLabeledRule) this.astStack[this.astPtr--];
	}
	expression.sourceStart = this.intStack[this.intPtr--];
	expression.sourceEnd = expression.switchLabeledRules[numLabels - 1].sourceEnd;
	pushOnExpressionStack(expression);
}

