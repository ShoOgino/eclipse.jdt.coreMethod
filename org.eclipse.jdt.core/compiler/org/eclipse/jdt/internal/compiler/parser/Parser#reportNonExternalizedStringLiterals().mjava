protected void reportNonExternalizedStringLiterals() {
	final Set nonNLSStrings = this.scanner.nonNLSStrings;
	final int nonNLSStringsSize = nonNLSStrings == null ? 0 : nonNLSStrings.size();
	if (nonNLSStringsSize != 0) {
		StringLiteral[] literals = new StringLiteral[nonNLSStringsSize];
		nonNLSStrings.toArray(literals);
		Arrays.sort(literals, new Comparator() {
			public int compare(Object o1, Object o2) {
				StringLiteral literal1 = (StringLiteral) o1;
				StringLiteral literal2 = (StringLiteral) o2;
				return literal1.sourceStart - literal2.sourceStart;
			}
		});
		for (int i = 0; i < nonNLSStringsSize; i++) {
			problemReporter().nonExternalizedStringLiteral(literals[i]);
		}
	}
	final Set unnecessaryNONNLSTags = this.scanner.unnecessaryNONNLSTags;
	final int unnecessaryNONNLSTagsSize = unnecessaryNONNLSTags == null ? 0 : unnecessaryNONNLSTags.size();
	if (unnecessaryNONNLSTagsSize != 0) {
		NLSTag[] tags = new NLSTag[unnecessaryNONNLSTagsSize];
		unnecessaryNONNLSTags.toArray(tags);
		// filter out all used nls tags
		ArrayList arrayList = new ArrayList();
		for (int i = 0; i < unnecessaryNONNLSTagsSize; i++) {
			NLSTag tag = tags[i];
			if ((tag.bits & NLSTag.UNUSED) != 0) {
				arrayList.add(tag);
			}
		}
		Collections.sort(arrayList, new Comparator() {
			public int compare(Object o1, Object o2) {
				NLSTag tag1 = (NLSTag) o1;
				NLSTag tag2 = (NLSTag) o1;
				return tag1.start - tag2.start;
			}
		});
		for (int i = 0, max = arrayList.size(); i < max; i++) {
			NLSTag tag = (NLSTag) arrayList.get(i); 
			problemReporter().unnecessaryNONNLSTags(tag.start, tag.end);
		}
	}
	this.scanner.nonNLSStrings = null;
	this.scanner.unnecessaryNONNLSTags = null;
	this.scanner.currentLine = null;
}

