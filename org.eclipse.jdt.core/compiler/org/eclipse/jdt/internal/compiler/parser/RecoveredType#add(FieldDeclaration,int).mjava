	public RecoveredElement add(
		FieldDeclaration fieldDeclaration,
		int bracketBalance) {

		/* do not consider a field starting passed the type end (if set)
		it must be belonging to an enclosing type */
		if (typeDeclaration.declarationSourceEnd != 0
			&& fieldDeclaration.declarationSourceStart
				> typeDeclaration.declarationSourceEnd) {
			return this.parent.add(fieldDeclaration, bracketBalance);
		}
		if (fields == null) {
			fields = new RecoveredField[5];
			fieldCount = 0;
		} else {
			if (fieldCount == fields.length) {
				System.arraycopy(
					fields,
					0,
					(fields = new RecoveredField[2 * fieldCount]),
					0,
					fieldCount);
			}
		}
		RecoveredField element =
			fieldDeclaration.isField()
				? new RecoveredField(fieldDeclaration, this, bracketBalance)
				: new RecoveredInitializer(fieldDeclaration, this, bracketBalance);
		fields[fieldCount++] = element;

		/* consider that if the opening brace was not found, it is there */
		if (!foundOpeningBrace) {
			foundOpeningBrace = true;
			this.bracketBalance++;
		}
		/* if field not finished, then field becomes current */
		if (fieldDeclaration.declarationSourceEnd == 0)
			return element;
		return this;
	}

