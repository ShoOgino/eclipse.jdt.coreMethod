protected void consumeStatementIfWithElse() {
	// IfThenElseStatement ::=  'if' '(' Expression ')' StatementNoShortIf 'else' Statement
	// IfThenElseStatementNoShortIf ::=  'if' '(' Expression ')' StatementNoShortIf 'else' StatementNoShortIf

	int lengthE, lengthT;
	lengthE = astLengthStack[astLengthPtr--]; //first decrement

	if (((lengthT = astLengthStack[astLengthPtr]) != 0) && (lengthE != 0)) {
		expressionLengthPtr--;
		//optimize the push/pop
		Statement elseStatement = (Statement) astStack[astPtr];
		if (elseStatement instanceof Block) {
			astStack[--astPtr] = 
				new IfStatement(
					expressionStack[expressionPtr--], 
					(Statement) astStack[astPtr], 
					elseStatement, 
					intStack[intPtr--], 
					endStatementPosition); 
		} else {
			astStack[--astPtr] = 
				new IfStatement(
					expressionStack[expressionPtr--], 
					(Statement) astStack[astPtr], 
					elseStatement, 
					intStack[intPtr--], 
					endPosition); 
		}
	} else {
		astLengthPtr--; //second decrement
		expressionLengthPtr--;
		//here only one of lengthE/T can be different 0
		Statement thenStatement = (lengthT == 0) ? Block.None : (Statement) astStack[astPtr--];
		Statement elseStatement = (lengthE == 0) ? Block.None : (Statement) astStack[astPtr--];
		if (elseStatement instanceof Block) {
			pushOnAstStack(
				new IfStatement(
					expressionStack[expressionPtr--],
					thenStatement,
					elseStatement,
					intStack[intPtr--],
					endStatementPosition));	
		} else {
			pushOnAstStack(
				new IfStatement(
					expressionStack[expressionPtr--],
					thenStatement,
					elseStatement,
					intStack[intPtr--],
					endPosition));	
		}			
	}
}

