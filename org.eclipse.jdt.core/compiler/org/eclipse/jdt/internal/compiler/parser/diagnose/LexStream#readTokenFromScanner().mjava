	private void readTokenFromScanner(){
		int length = this.tokenCache.length;
		boolean tokenNotFound = true;

		while(tokenNotFound) {
			try {
				int tokenKind =  this.scanner.getNextToken();
				if (tokenKind == TokenNameBeginTypeArguments) {
					this.awaitingColonColon = true;
				} else if (tokenKind == TokenNameCOLON_COLON) {
					this.awaitingColonColon = false;
				}
				if(tokenKind != TokenNameEOF) {
					int start = this.scanner.getCurrentTokenStartPosition();
					int end = this.scanner.getCurrentTokenEndPosition();

					int nextInterval = this.currentInterval + 1;
					if(this.intervalStartToSkip.length == 0 ||
							nextInterval >= this.intervalStartToSkip.length ||
							start < this.intervalStartToSkip[nextInterval]) {
						Token token = new Token();
						token.kind = tokenKind;
						token.name = this.scanner.getCurrentTokenSource();
						token.start = start;
						token.end = end;
						token.line = Util.getLineNumber(end, this.scanner.lineEnds, 0, this.scanner.linePtr);

						if(this.currentInterval != this.previousInterval && (this.intervalFlagsToSkip[this.currentInterval] & RangeUtil.IGNORE) == 0){
							token.flags = IS_AFTER_JUMP;
							if((this.intervalFlagsToSkip[this.currentInterval] & RangeUtil.LBRACE_MISSING) != 0){
								token.flags |= LBRACE_MISSING;
							}
						}
						this.previousInterval = this.currentInterval;

						this.tokenCache[++this.tokenCacheIndex % length] = token;

						tokenNotFound = false;
					} else {
						this.scanner.resetTo(this.intervalEndToSkip[++this.currentInterval] + 1, this.scanner.eofPosition - 1);
					}
				} else {
					int start = this.scanner.getCurrentTokenStartPosition();
					int end = this.scanner.getCurrentTokenEndPosition();
					Token token = new Token();
					token.kind = tokenKind;
					token.name = CharOperation.NO_CHAR;
					token.start = start;
					token.end = end;
					token.line = Util.getLineNumber(end, this.scanner.lineEnds, 0, this.scanner.linePtr);

					this.tokenCache[++this.tokenCacheIndex % length] = token;

					this.tokenCacheEOFIndex = this.tokenCacheIndex;
					tokenNotFound = false;
				}
			} catch (InvalidInputException e) {
				// return next token
			}
		}
	}

