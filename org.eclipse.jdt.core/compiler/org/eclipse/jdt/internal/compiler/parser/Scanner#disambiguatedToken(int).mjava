int disambiguatedToken(int token) {
	final VanguardParser parser = getVanguardParser();
	if (token == TokenNamebreak  && this.sourceLevel == ClassFileConstants.JDK12 &&
			this.previewEnabled && mayBeAtBreakPreview()) {
		this.nextToken = TokenNameBreakPreviewMarker;
		return token;
	} else if (token == TokenNameARROW  && this.inCase) {
		this.nextToken = TokenNameARROW;
		this.inCase = false;
		return TokenNameBeginCaseExpr;
	} else	if (token == TokenNameLPAREN  && maybeAtLambdaOrCast()) {
		if (parser.parse(Goal.LambdaParameterListGoal) == VanguardParser.SUCCESS) {
			this.nextToken = TokenNameLPAREN;
			return TokenNameBeginLambda;
		}
		this.vanguardScanner.resetTo(this.startPosition, this.eofPosition - 1);
		if (parser.parse(Goal.IntersectionCastGoal) == VanguardParser.SUCCESS) {
			this.nextToken = TokenNameLPAREN;
			return TokenNameBeginIntersectionCast;
		}
	} else if (token == TokenNameLESS && maybeAtReferenceExpression()) {
		if (parser.parse(Goal.ReferenceExpressionGoal) == VanguardParser.SUCCESS) {
			this.nextToken = TokenNameLESS;
			return TokenNameBeginTypeArguments;
		}
	} else if (token == TokenNameAT && atTypeAnnotation()) {
		token = TokenNameAT308;
		if (maybeAtEllipsisAnnotationsStart()) {
			if (parser.parse(Goal.VarargTypeAnnotationGoal) == VanguardParser.SUCCESS) {
				this.consumingEllipsisAnnotations = true;
				this.nextToken = TokenNameAT308;
				return TokenNameAT308DOTDOTDOT;
			}
		}
	}
	return token;
}

