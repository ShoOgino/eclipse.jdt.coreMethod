int disambiguatedToken(int token) {
	final VanguardParser parser = getVanguardParser();
	if (token == TokenNameARROW  &&  mayBeAtCaseLabelExpr()) {
		assert this.caseStartPosition < this.startPosition;
		int nSz = this.startPosition - this.caseStartPosition;
		// add fake token of TokenNameCOLON, call vanguard on this modified source
		// TODO: Inefficient method due to redoing of the same source, investigate alternate
		// Can we do a dup of parsing/check the transition of the state?
		String s = new String(this.source, this.caseStartPosition, nSz);
		String modSource = s.concat(new String(new char[] {':'}));
		char[] nSource = modSource.toCharArray();
		VanguardParser vp = getNewVanguardParser(nSource);
		if (vp.parse(Goal.SwitchLabelCaseLhsGoal) == VanguardParser.SUCCESS) {
			this.nextToken = TokenNameARROW;
			return TokenNameBeginCaseExpr;
		}
	} else	if (token == TokenNameLPAREN  && maybeAtLambdaOrCast()) {
		if (parser.parse(Goal.LambdaParameterListGoal) == VanguardParser.SUCCESS) {
			this.nextToken = TokenNameLPAREN;
			return TokenNameBeginLambda;
		}
		this.vanguardScanner.resetTo(this.startPosition, this.eofPosition - 1);
		if (parser.parse(Goal.IntersectionCastGoal) == VanguardParser.SUCCESS) {
			this.nextToken = TokenNameLPAREN;
			return TokenNameBeginIntersectionCast;
		}
	} else if (token == TokenNameLESS && maybeAtReferenceExpression()) {
		if (parser.parse(Goal.ReferenceExpressionGoal) == VanguardParser.SUCCESS) {
			this.nextToken = TokenNameLESS;
			return TokenNameBeginTypeArguments;
		}
	} else if (token == TokenNameAT && atTypeAnnotation()) {
		token = TokenNameAT308;
		if (maybeAtEllipsisAnnotationsStart()) {
			if (parser.parse(Goal.VarargTypeAnnotationGoal) == VanguardParser.SUCCESS) {
				this.consumingEllipsisAnnotations = true;
				this.nextToken = TokenNameAT308;
				return TokenNameAT308DOTDOTDOT;
			}
		}
	}
	return token;
}

