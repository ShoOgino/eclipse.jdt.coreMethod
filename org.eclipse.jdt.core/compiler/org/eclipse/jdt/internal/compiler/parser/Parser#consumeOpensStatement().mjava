protected void consumeOpensStatement() {
	int length = this.astLengthStack[this.astLengthPtr--];
	this.astPtr -= length;

	ModuleReference[] targets = null;
	if (length > 0) {
		System.arraycopy(
			this.astStack,
			this.astPtr + 1,
			targets = new ModuleReference[length],
			0,
			length);
	}

	ImportReference pkgRef = (ImportReference) this.astStack[this.astPtr];
	OpensStatement expt = new OpensStatement(pkgRef, targets);
	expt.targets = targets;
	expt.declarationSourceStart = this.intStack[this.intPtr--];
	if (this.currentToken == TokenNameSEMICOLON){
		expt.declarationSourceEnd = this.scanner.currentPosition - 1;
	} else {
		expt.declarationSourceEnd = expt.sourceEnd;
	}
	expt.declarationSourceEnd =
		flushCommentsDefinedPriorTo(expt.declarationSourceEnd);
	expt.declarationEnd = expt.declarationSourceEnd;
	expt.sourceStart = expt.declarationSourceStart;
	expt.sourceEnd = pkgRef.sourceEnd;
	this.astStack[this.astPtr] = expt;
	// recovery
	if (this.currentElement instanceof RecoveredModule) {
		this.lastCheckPoint = expt.declarationSourceEnd + 1;
		//TBD
		//this.currentElement = this.currentElement.add(expt, 0);
		this.lastIgnoredToken = -1;
		this.restartRecovery = true;
		// used to avoid branching back into the regular automaton
	}
}

