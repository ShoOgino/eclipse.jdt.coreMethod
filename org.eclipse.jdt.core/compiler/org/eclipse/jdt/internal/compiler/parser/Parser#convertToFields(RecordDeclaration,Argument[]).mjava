private void convertToFields(RecordDeclaration rd, Argument[] args) {
	int length = args.length;
	FieldDeclaration[] fields = new FieldDeclaration[length];
	for (int i = 0, max = args.length; i < max; i++) {
		Argument arg = args[i];
		FieldDeclaration f = fields[i] = createFieldDeclaration(arg.name, arg.sourceStart, arg.sourceEnd);
		f.annotations = arg.annotations;
		f.bits = arg.bits;
		f.declarationSourceStart = arg.declarationSourceStart;
		f.declarationSourceEnd = arg.declarationSourceEnd;
		f.endPart1Position = arg.sourceEnd; //TODO BETA_JAVA14 - recheck
		f.endPart2Position = arg.declarationSourceEnd;
		f.modifiers = ClassFileConstants.AccPrivate | ClassFileConstants.AccFinal;
		// Note: JVMS 14 S 4.7.8 The Synthetic Attribute mandates do not mark Synthetic for Record compoents.
		// hence marking this "explicitly" as implicit.
		f.isImplicit = true;
		/*
		 * JLS 14 Sec 8.10.1 Record Header
		 * The record header declares a number of record components. The record components
		 * declare the fields of the record class. Each record component in the RecordHeader
		 * declares one private final field in the record class whose name is same as the
		 * Identifier in the record component.
		 * 
		 * JLS 14 Sec 8.10.3 Record Components
		 * For each record component appearing in the record component list:
		 * An implicitly declared private final field with the same name as the record
		 * component and the type as the declared type of the record component. 
		 */
		f.modifiers |= ClassFileConstants.AccPrivate | ClassFileConstants.AccFinal;
		f.modifiersSourceStart = arg.modifiersSourceStart;
		f.sourceStart = arg.sourceStart;
		f.sourceEnd = arg.sourceEnd;
		f.type = arg.type;
		/*
		 * JLS 14 SEC 8.10.3 Item 1 says the following:
		 *  "This field is annotated with the annotation that appears on the corresponding
		 *  record component, if this annotation type is applicable to a field declaration
		 *  or type context."
		 *  
		 *  However, at this point there is no sufficient information to conclude the ElementType
		 *  targeted by the annotation. Hence, do a blanket assignment for now and later (read binding
		 *  time) weed out the irrelevant ones.
		 */
		f.annotations = arg.annotations;
		if ((args[i].bits & ASTNode.HasTypeAnnotations) != 0) {
			f.bits |= ASTNode.HasTypeAnnotations;
		}
	}
	rd.fields = fields;
	rd.nRecordComponents = length;
}

