protected void consumeReferenceExpressionPrimaryForm() {
	// ReferenceExpression ::= Primary '::' NonWildTypeArgumentsopt Identifier

	ReferenceExpression rexp;
	TypeReference [] typeArguments = null;
	SingleNameReference methodReference;
	
	methodReference = (SingleNameReference) getUnspecifiedReferenceOptimized();
	int length = this.genericsLengthStack[this.genericsLengthPtr--];
	if (length > 0) {
		this.genericsPtr -= length;
		System.arraycopy(this.genericsStack, this.genericsPtr + 1, typeArguments = new TypeReference[length], 0, length);
		this.intPtr--;  // pop type arguments source start.
	}
	
	Expression primary = this.expressionStack[this.expressionPtr--];
	this.expressionLengthPtr--;
	rexp = new ReferenceExpression(primary, typeArguments, methodReference);
	pushOnExpressionStack(rexp);
}

