/*
 * Record a local declaration - regular method should have been created a block body
 */
@Override
public RecoveredElement add(LocalDeclaration localDeclaration, int bracketBalanceValue) {

	/* do not consider a type starting passed the type end (if set)
		it must be belonging to an enclosing type */
	if (this.fieldDeclaration.declarationSourceEnd != 0
			&& localDeclaration.declarationSourceStart > this.fieldDeclaration.declarationSourceEnd){
		resetPendingModifiers();
		if (this.parent == null) return this; // ignore
		return this.parent.add(localDeclaration, bracketBalanceValue);
	}
	/* method body should have been created */
	if (this.initializerBody == null) {
		Block block = new Block(0);
		block.sourceStart = ((Initializer)this.fieldDeclaration).sourceStart;
		RecoveredElement element = this.add(block, 1);
		if (this.bracketBalance > 0){
			for (int i = 0; i < this.bracketBalance - 1; i++){
				element = element.add(new Block(0), 1);
			}
			this.bracketBalance = 1;
		}
		return element.add(localDeclaration, bracketBalanceValue);
	}
	this.initializerBody.attachPendingModifiers(
				this.pendingAnnotations,
				this.pendingAnnotationCount,
				this.pendingModifiers,
				this.pendingModifersSourceStart);
	resetPendingModifiers();

	return this.initializerBody.add(localDeclaration, bracketBalanceValue, true);
}

