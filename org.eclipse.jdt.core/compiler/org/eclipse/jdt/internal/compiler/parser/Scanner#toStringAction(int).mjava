public final String toStringAction(int act) {
	switch (act) {
		case TokenNameIdentifier :
			return "Identifier("/*nonNLS*/ + new String(getCurrentTokenSource()) + ")"/*nonNLS*/;
		case TokenNameabstract :
			return "abstract"/*nonNLS*/;
		case TokenNameboolean :
			return "boolean"/*nonNLS*/;
		case TokenNamebreak :
			return "break"/*nonNLS*/;
		case TokenNamebyte :
			return "byte"/*nonNLS*/;
		case TokenNamecase :
			return "case"/*nonNLS*/;
		case TokenNamecatch :
			return "catch"/*nonNLS*/;
		case TokenNamechar :
			return "char"/*nonNLS*/;
		case TokenNameclass :
			return "class"/*nonNLS*/;
		case TokenNamecontinue :
			return "continue"/*nonNLS*/;
		case TokenNamedefault :
			return "default"/*nonNLS*/;
		case TokenNamedo :
			return "do"/*nonNLS*/;
		case TokenNamedouble :
			return "double"/*nonNLS*/;
		case TokenNameelse :
			return "else"/*nonNLS*/;
		case TokenNameextends :
			return "extends"/*nonNLS*/;
		case TokenNamefalse :
			return "false"/*nonNLS*/;
		case TokenNamefinal :
			return "final"/*nonNLS*/;
		case TokenNamefinally :
			return "finally"/*nonNLS*/;
		case TokenNamefloat :
			return "float"/*nonNLS*/;
		case TokenNamefor :
			return "for"/*nonNLS*/;
		case TokenNameif :
			return "if"/*nonNLS*/;
		case TokenNameimplements :
			return "implements"/*nonNLS*/;
		case TokenNameimport :
			return "import"/*nonNLS*/;
		case TokenNameinstanceof :
			return "instanceof"/*nonNLS*/;
		case TokenNameint :
			return "int"/*nonNLS*/;
		case TokenNameinterface :
			return "interface"/*nonNLS*/;
		case TokenNamelong :
			return "long"/*nonNLS*/;
		case TokenNamenative :
			return "native"/*nonNLS*/;
		case TokenNamenew :
			return "new"/*nonNLS*/;
		case TokenNamenull :
			return "null"/*nonNLS*/;
		case TokenNamepackage :
			return "package"/*nonNLS*/;
		case TokenNameprivate :
			return "private"/*nonNLS*/;
		case TokenNameprotected :
			return "protected"/*nonNLS*/;
		case TokenNamepublic :
			return "public"/*nonNLS*/;
		case TokenNamereturn :
			return "return"/*nonNLS*/;
		case TokenNameshort :
			return "short"/*nonNLS*/;
		case TokenNamestatic :
			return "static"/*nonNLS*/;
		case TokenNamesuper :
			return "super"/*nonNLS*/;
		case TokenNameswitch :
			return "switch"/*nonNLS*/;
		case TokenNamesynchronized :
			return "synchronized"/*nonNLS*/;
		case TokenNamethis :
			return "this"/*nonNLS*/;
		case TokenNamethrow :
			return "throw"/*nonNLS*/;
		case TokenNamethrows :
			return "throws"/*nonNLS*/;
		case TokenNametransient :
			return "transient"/*nonNLS*/;
		case TokenNametrue :
			return "true"/*nonNLS*/;
		case TokenNametry :
			return "try"/*nonNLS*/;
		case TokenNamevoid :
			return "void"/*nonNLS*/;
		case TokenNamevolatile :
			return "volatile"/*nonNLS*/;
		case TokenNamewhile :
			return "while"/*nonNLS*/;

		case TokenNameIntegerLiteral :
			return "Integer("/*nonNLS*/ + new String(getCurrentTokenSource()) + ")"/*nonNLS*/;
		case TokenNameLongLiteral :
			return "Long("/*nonNLS*/ + new String(getCurrentTokenSource()) + ")"/*nonNLS*/;
		case TokenNameFloatingPointLiteral :
			return "Float("/*nonNLS*/ + new String(getCurrentTokenSource()) + ")"/*nonNLS*/;
		case TokenNameDoubleLiteral :
			return "Double("/*nonNLS*/ + new String(getCurrentTokenSource()) + ")"/*nonNLS*/;
		case TokenNameCharacterLiteral :
			return "Char("/*nonNLS*/ + new String(getCurrentTokenSource()) + ")"/*nonNLS*/;
		case TokenNameStringLiteral :
			return "String("/*nonNLS*/ + new String(getCurrentTokenSource()) + ")"/*nonNLS*/;

		case TokenNamePLUS_PLUS :
			return "++"/*nonNLS*/;
		case TokenNameMINUS_MINUS :
			return "--"/*nonNLS*/;
		case TokenNameEQUAL_EQUAL :
			return "=="/*nonNLS*/;
		case TokenNameLESS_EQUAL :
			return "<="/*nonNLS*/;
		case TokenNameGREATER_EQUAL :
			return ">="/*nonNLS*/;
		case TokenNameNOT_EQUAL :
			return "!="/*nonNLS*/;
		case TokenNameLEFT_SHIFT :
			return "<<"/*nonNLS*/;
		case TokenNameRIGHT_SHIFT :
			return ">>"/*nonNLS*/;
		case TokenNameUNSIGNED_RIGHT_SHIFT :
			return ">>>"/*nonNLS*/;
		case TokenNamePLUS_EQUAL :
			return "+="/*nonNLS*/;
		case TokenNameMINUS_EQUAL :
			return "-="/*nonNLS*/;
		case TokenNameMULTIPLY_EQUAL :
			return "*="/*nonNLS*/;
		case TokenNameDIVIDE_EQUAL :
			return "/="/*nonNLS*/;
		case TokenNameAND_EQUAL :
			return "&="/*nonNLS*/;
		case TokenNameOR_EQUAL :
			return "|="/*nonNLS*/;
		case TokenNameXOR_EQUAL :
			return "^="/*nonNLS*/;
		case TokenNameREMAINDER_EQUAL :
			return "%="/*nonNLS*/;
		case TokenNameLEFT_SHIFT_EQUAL :
			return "<<="/*nonNLS*/;
		case TokenNameRIGHT_SHIFT_EQUAL :
			return ">>="/*nonNLS*/;
		case TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL :
			return ">>>="/*nonNLS*/;
		case TokenNameOR_OR :
			return "||"/*nonNLS*/;
		case TokenNameAND_AND :
			return "&&"/*nonNLS*/;
		case TokenNamePLUS :
			return "+"/*nonNLS*/;
		case TokenNameMINUS :
			return "-"/*nonNLS*/;
		case TokenNameNOT :
			return "!"/*nonNLS*/;
		case TokenNameREMAINDER :
			return "%"/*nonNLS*/;
		case TokenNameXOR :
			return "^"/*nonNLS*/;
		case TokenNameAND :
			return "&"/*nonNLS*/;
		case TokenNameMULTIPLY :
			return "*"/*nonNLS*/;
		case TokenNameOR :
			return "|"/*nonNLS*/;
		case TokenNameTWIDDLE :
			return "~"/*nonNLS*/;
		case TokenNameDIVIDE :
			return "/"/*nonNLS*/;
		case TokenNameGREATER :
			return ">"/*nonNLS*/;
		case TokenNameLESS :
			return "<"/*nonNLS*/;
		case TokenNameLPAREN :
			return "("/*nonNLS*/;
		case TokenNameRPAREN :
			return ")"/*nonNLS*/;
		case TokenNameLBRACE :
			return "{"/*nonNLS*/;
		case TokenNameRBRACE :
			return "}"/*nonNLS*/;
		case TokenNameLBRACKET :
			return "["/*nonNLS*/;
		case TokenNameRBRACKET :
			return "]"/*nonNLS*/;
		case TokenNameSEMICOLON :
			return ";"/*nonNLS*/;
		case TokenNameQUESTION :
			return "?"/*nonNLS*/;
		case TokenNameCOLON :
			return ":"/*nonNLS*/;
		case TokenNameCOMMA :
			return ","/*nonNLS*/;
		case TokenNameDOT :
			return "."/*nonNLS*/;
		case TokenNameEQUAL :
			return "="/*nonNLS*/;
		case TokenNameEOF :
			return "EOF"/*nonNLS*/;
		default :
			return "not-a-token"/*nonNLS*/;
	}
}

