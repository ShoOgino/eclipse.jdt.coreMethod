	public final String toStringAction(int act) {
		switch (act) {
			case TokenNameIdentifier :
				return "Identifier(" + new String(getCurrentTokenSource()) + ")";
			case TokenNameabstract :
				return "abstract";
			case TokenNameboolean :
				return "boolean";
			case TokenNamebreak :
				return "break";
			case TokenNamebyte :
				return "byte";
			case TokenNamecase :
				return "case";
			case TokenNamecatch :
				return "catch";
			case TokenNamechar :
				return "char";
			case TokenNameclass :
				return "class";
			case TokenNamecontinue :
				return "continue";
			case TokenNamedefault :
				return "default";
			case TokenNamedo :
				return "do";
			case TokenNamedouble :
				return "double";
			case TokenNameelse :
				return "else";
			case TokenNameextends :
				return "extends";
			case TokenNamefalse :
				return "false";
			case TokenNamefinal :
				return "final";
			case TokenNamefinally :
				return "finally";
			case TokenNamefloat :
				return "float";
			case TokenNamefor :
				return "for";
			case TokenNameif :
				return "if";
			case TokenNameimplements :
				return "implements";
			case TokenNameimport :
				return "import";
			case TokenNameinstanceof :
				return "instanceof";
			case TokenNameint :
				return "int";
			case TokenNameinterface :
				return "interface";
			case TokenNamelong :
				return "long";
			case TokenNamenative :
				return "native";
			case TokenNamenew :
				return "new";
			case TokenNamenull :
				return "null";
			case TokenNamepackage :
				return "package";
			case TokenNameprivate :
				return "private";
			case TokenNameprotected :
				return "protected";
			case TokenNamepublic :
				return "public";
			case TokenNamereturn :
				return "return";
			case TokenNameshort :
				return "short";
			case TokenNamestatic :
				return "static";
			case TokenNamesuper :
				return "super";
			case TokenNameswitch :
				return "switch";
			case TokenNamesynchronized :
				return "synchronized";
			case TokenNamethis :
				return "this";
			case TokenNamethrow :
				return "throw";
			case TokenNamethrows :
				return "throws";
			case TokenNametransient :
				return "transient";
			case TokenNametrue :
				return "true";
			case TokenNametry :
				return "try";
			case TokenNamevoid :
				return "void";
			case TokenNamevolatile :
				return "volatile";
			case TokenNamewhile :
				return "while";

			case TokenNameIntegerLiteral :
				return "Integer(" + new String(getCurrentTokenSource()) + ")";
			case TokenNameLongLiteral :
				return "Long(" + new String(getCurrentTokenSource()) + ")";
			case TokenNameFloatingPointLiteral :
				return "Float(" + new String(getCurrentTokenSource()) + ")";
			case TokenNameDoubleLiteral :
				return "Double(" + new String(getCurrentTokenSource()) + ")";
			case TokenNameCharacterLiteral :
				return "Char(" + new String(getCurrentTokenSource()) + ")";
			case TokenNameStringLiteral :
				return "String(" + new String(getCurrentTokenSource()) + ")";

			case TokenNamePLUS_PLUS :
				return "++";
			case TokenNameMINUS_MINUS :
				return "--";
			case TokenNameEQUAL_EQUAL :
				return "==";
			case TokenNameLESS_EQUAL :
				return "<=";
			case TokenNameGREATER_EQUAL :
				return ">=";
			case TokenNameNOT_EQUAL :
				return "!=";
			case TokenNameLEFT_SHIFT :
				return "<<";
			case TokenNameRIGHT_SHIFT :
				return ">>";
			case TokenNameUNSIGNED_RIGHT_SHIFT :
				return ">>>";
			case TokenNamePLUS_EQUAL :
				return "+=";
			case TokenNameMINUS_EQUAL :
				return "-=";
			case TokenNameMULTIPLY_EQUAL :
				return "*=";
			case TokenNameDIVIDE_EQUAL :
				return "/=";
			case TokenNameAND_EQUAL :
				return "&=";
			case TokenNameOR_EQUAL :
				return "|=";
			case TokenNameXOR_EQUAL :
				return "^=";
			case TokenNameREMAINDER_EQUAL :
				return "%=";
			case TokenNameLEFT_SHIFT_EQUAL :
				return "<<=";
			case TokenNameRIGHT_SHIFT_EQUAL :
				return ">>=";
			case TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL :
				return ">>>=";
			case TokenNameOR_OR :
				return "||";
			case TokenNameAND_AND :
				return "&&";
			case TokenNamePLUS :
				return "+";
			case TokenNameMINUS :
				return "-";
			case TokenNameNOT :
				return "!";
			case TokenNameREMAINDER :
				return "%";
			case TokenNameXOR :
				return "^";
			case TokenNameAND :
				return "&";
			case TokenNameMULTIPLY :
				return "*";
			case TokenNameOR :
				return "|";
			case TokenNameTWIDDLE :
				return "~";
			case TokenNameDIVIDE :
				return "/";
			case TokenNameGREATER :
				return ">";
			case TokenNameLESS :
				return "<";
			case TokenNameLPAREN :
				return "(";
			case TokenNameRPAREN :
				return ")";
			case TokenNameLBRACE :
				return "{";
			case TokenNameRBRACE :
				return "}";
			case TokenNameLBRACKET :
				return "[";
			case TokenNameRBRACKET :
				return "]";
			case TokenNameSEMICOLON :
				return ";";
			case TokenNameQUESTION :
				return "?";
			case TokenNameCOLON :
				return ":";
			case TokenNameCOMMA :
				return ",";
			case TokenNameDOT :
				return ".";
			case TokenNameEQUAL :
				return "=";
			case TokenNameEOF :
				return "EOF";
			default :
				return "not-a-token";
		}
	}

