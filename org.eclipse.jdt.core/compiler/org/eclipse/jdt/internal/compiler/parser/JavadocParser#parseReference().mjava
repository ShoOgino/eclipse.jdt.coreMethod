	/*
	 * Parse a reference in @see tag
	 */
	private Expression parseReference() throws InvalidInputException {
		TypeReference typeRef = null;
		Expression reference = null;
		nextToken : while (this.index < this.scanner.eofPosition) {
			int token = readToken();
			switch (token) {
				case TerminalTokens.TokenNameStringLiteral :
					// @see "string"
					int start = this.scanner.getCurrentTokenStartPosition();
					if (typeRef == null) {
						consumeToken();
						try {
							if (readToken() == TerminalTokens.TokenNameEOF) {
								return null;
							}
						} catch (InvalidInputException e) {
							// Do nothing as we want to underline from the beginning of the string
						}
					}
					this.sourceParser.problemReporter().javadocInvalidSeeReference(start, this.lineEnd - 1);
					return null;
				case TerminalTokens.TokenNameLESS :
					// @see "<a href="URL#Value">label</a>
					consumeToken();
					start = this.scanner.getCurrentTokenStartPosition();
					if (parseHref()) {
						if (typeRef == null) {
							consumeToken();
							try {
								if (readToken() == TerminalTokens.TokenNameEOF) {
									return null;
								}
							} catch (InvalidInputException e) {
								// Do nothing as we want to underline from the beginning of the href
							}
						}
						this.sourceParser.problemReporter().javadocInvalidSeeReference(start, this.lineEnd - 1);
					}
					return null;
				case TerminalTokens.TokenNameERROR :
					consumeToken();
					if (this.scanner.currentCharacter == '#') { // @see ...#member
						reference = parseMember(typeRef);
						if (reference == null) {
							return null;
						}
					}
					break nextToken;
				case TerminalTokens.TokenNameIdentifier :
					if (typeRef == null) {
						typeRef = parseQualifiedName(true);
						break;
					}
					break nextToken;
				default :
					break nextToken;
			}
		}
		
		// Verify that we got a reference
		if (reference == null) reference = typeRef;
		if (reference == null) {
			this.sourceParser.problemReporter().javadocMissingSeeReference(this.tagSourceStart, this.tagSourceEnd);
			return null;
		}
		
		// Verify that we're at line end
		int start = this.scanner.getCurrentTokenStartPosition();
		try {
			int token = readTokenAndConsume();
			if (token != TerminalTokens.TokenNameLPAREN) {
				return reference;
			}
		} catch (InvalidInputException e) {
			// Do nothing as we report an error after
		}
		this.sourceParser.problemReporter().javadocInvalidSeeReference(start, this.lineEnd - 1);
		return null;
	}

