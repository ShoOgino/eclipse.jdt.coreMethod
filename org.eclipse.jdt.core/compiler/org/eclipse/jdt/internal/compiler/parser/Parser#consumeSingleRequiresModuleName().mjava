protected void consumeSingleRequiresModuleName() {
	ModuleReference impt;
	int length;
	char[][] tokens = new char[length = this.identifierLengthStack[this.identifierLengthPtr--]][];
	this.identifierPtr -= length;
	long[] positions = new long[length];
	System.arraycopy(this.identifierStack, this.identifierPtr + 1, tokens, 0, length);
	System.arraycopy(this.identifierPositionStack, this.identifierPtr + 1, positions, 0, length);
	pushOnAstStack(impt = new ModuleReference(tokens, positions));

	if (this.currentToken == TokenNameSEMICOLON){
		impt.declarationSourceEnd = this.scanner.currentPosition - 1;
	} else {
		impt.declarationSourceEnd = impt.sourceEnd;
	}
	impt.declarationEnd = impt.declarationSourceEnd;
	//this.endPosition is just before the ;
	impt.declarationSourceStart = this.intStack[this.intPtr--];
	impt.modifiers = this.intStack[this.intPtr--];
	impt.modifiersSourceStart = this.intStack[this.intPtr--];
	if (impt.modifiersSourceStart >= 0) {
		impt.declarationSourceStart = impt.modifiersSourceStart;
	}
	// recovery TBD
//	if (this.currentElement != null){
//		this.lastCheckPoint = impt.declarationSourceEnd+1;
//		this.currentElement = this.currentElement.add(impt, 0);
//		this.lastIgnoredToken = -1;
//		this.restartRecovery = true; // used to avoid branching back into the regular automaton
//	}
}

