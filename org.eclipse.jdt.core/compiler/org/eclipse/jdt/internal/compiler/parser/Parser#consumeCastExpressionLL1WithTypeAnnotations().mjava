protected void consumeCastExpressionLL1WithTypeAnnotations() {
	// CastExpression ::= '(' Modifiers Name ')' InsideCastExpressionLL1 UnaryExpressionNotPlusMinus
	// Expression is used in order to make the grammar LL1

	//optimize push/pop

	// pop the expression
	Expression expression = this.expressionStack[this.expressionPtr--];
	this.expressionLengthPtr--;
	// pop the type reference
	TypeReference typeReference = (TypeReference) this.expressionStack[this.expressionPtr--];
	this.expressionLengthPtr--;
	
	int length;
	if ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {
		System.arraycopy(
				this.expressionStack,
				(this.expressionPtr -= length) + 1,
				typeReference.annotations = new Annotation[length],
				0,
				length);
		int typeReferenceSourceStart = typeReference.annotations[0].sourceStart;
		if (this.modifiersSourceStart < typeReferenceSourceStart) {
			typeReferenceSourceStart = this.modifiersSourceStart;
		}
		typeReference.sourceStart = typeReferenceSourceStart;
		typeReference.bits |= ASTNode.HasTypeAnnotations;
	}
	Expression cast;
	pushOnExpressionStack(cast = new CastExpression(expression, typeReference));
	// pop the two positions for left and right parenthesis 
	updateSourcePosition(cast);
	cast.sourceEnd = expression.sourceEnd;
	if (this.modifiers != ClassFileConstants.AccDefault) {
		problemReporter().invalidLocationForModifiers(typeReference);
	}
	resetModifiers();
}

