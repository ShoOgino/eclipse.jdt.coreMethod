protected void consumeAnnotatedType() {
	/* We go through some song & dance here to get the type annotations stacks
	   to reflect the fact that this type was unannotated. Using a dummy non-terminal
	   with an empty rhs leads to conflicts in many places :-(
	*/
	int dims = this.intStack[this.intPtr];
	if (dims != 0) {
		int counter = 0;
		for (int i = 0; i < dims; i++) {
			// we count existing dimensions with annotations
			counter += this.typeAnnotationLengthStack[this.typeAnnotationLengthPtr - dims + 1 + i];
		}
		System.arraycopy(
				this.typeAnnotationLengthStack,
				this.typeAnnotationLengthPtr - dims + 1,
				this.typeAnnotationLengthStack,
				this.typeAnnotationLengthPtr - dims + 2,
				dims);
		int length = this.expressionLengthStack[this.expressionLengthPtr--];
		this.typeAnnotationLengthStack[this.typeAnnotationLengthPtr - dims + 1] = length;
		int typeAnnotationStackLength = this.typeAnnotationStack.length;
		if (this.typeAnnotationPtr + counter + length >= typeAnnotationStackLength) {
			System.arraycopy(
					this.typeAnnotationStack,
					0,
					this.typeAnnotationStack = new Annotation[typeAnnotationStackLength + TypeAnnotationStackIncrement],
					0,
					typeAnnotationStackLength);
		}
		System.arraycopy(
				this.typeAnnotationStack,
				this.typeAnnotationPtr - counter + 1,
				this.typeAnnotationStack,
				this.typeAnnotationPtr - counter + 1 + length,
				counter);
		System.arraycopy(
				this.expressionStack,
				(this.expressionPtr -= length) + 1,
				this.typeAnnotationStack,
				this.typeAnnotationPtr - counter + 1,
				length);
		this.typeAnnotationPtr += length;
		this.typeAnnotationLengthPtr++;
	} else {
		int length = this.expressionLengthStack[this.expressionLengthPtr--];
		int typeAnnotationStackLength = this.typeAnnotationStack.length;
		if (this.typeAnnotationPtr + length >= typeAnnotationStackLength) {
			System.arraycopy(
					this.typeAnnotationStack,
					0,
					this.typeAnnotationStack = new Annotation[typeAnnotationStackLength + TypeAnnotationStackIncrement],
					0,
					typeAnnotationStackLength);
		}
		System.arraycopy(
				this.expressionStack,
				(this.expressionPtr -= length) + 1,
				this.typeAnnotationStack,
				this.typeAnnotationPtr + 1,
				length);
		this.typeAnnotationPtr += length;
		pushOnTypeAnnotationLengthStack(length);
	}
//	if (this.modifiers != ClassFileConstants.AccDefault) {
//		problemReporter().invalidLocationForModifiers(typeReference);
//	}
//	resetModifiers();
}

