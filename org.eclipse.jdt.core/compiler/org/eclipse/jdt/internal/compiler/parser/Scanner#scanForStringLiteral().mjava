private int scanForStringLiteral() throws InvalidInputException {
	boolean isTextBlock = false;
	int lastQuotePos = 0;

	// consume next character
	this.unicodeAsBackSlash = false;
	boolean isUnicode = false;
	isTextBlock = scanForTextBlockBeginning();
	if (isTextBlock) {
		try {
			this.rawStart = this.currentPosition - this.startPosition;
			int terminators = 0;
			while (this.currentPosition <= this.eofPosition) {
				if (this.currentCharacter == '"') {
					lastQuotePos = this.currentPosition;
					// look for text block delimiter
					if (scanForTextBlockClose()) {
							// Account for just the snippet being passed around
							// If already at the EOF, bail out.
						if (this.currentPosition + 2 < this.source.length && this.source[this.currentPosition + 2] == '"') {
							terminators++;
							if (terminators > 2)
								throw new InvalidInputException(UNTERMINATED_TEXT_BLOCK);
						} else {
							this.currentPosition += 2;
							return TerminalTokens.TokenNameTextBlock;
						}
					}
					if (this.withoutUnicodePtr != 0) {
						unicodeStore();
					}
				} else {
					terminators = 0;
				}
				outer: if (this.currentCharacter == '\\') {
					switch(this.source[this.currentPosition]) {
						case 'n' :
						case 'r' :
						case 'f' :
							break outer;
						case '\n' :
						case '\r' :
							this.currentCharacter = '\\';
							this.currentPosition++;
							break;
						case '\\' :
							this.currentPosition++;
							break;
						default :
							if (this.unicodeAsBackSlash) {
								this.withoutUnicodePtr--;
								// consume next character
								if (this.currentPosition >= this.eofPosition) {
									break;
								}
								this.unicodeAsBackSlash = false;
								if (((this.currentCharacter = this.source[this.currentPosition++]) == '\\') 
										&& (this.source[this.currentPosition] == 'u')) {
									getNextUnicodeChar();
									isUnicode = true;
									this.withoutUnicodePtr--;
								} else {
									isUnicode = false;
								}
							} else {
								if (this.withoutUnicodePtr == 0) {
									unicodeInitializeBuffer(this.currentPosition - this.startPosition);
								}
								this.withoutUnicodePtr --;
								this.currentCharacter = this.source[this.currentPosition++];
							}
							int oldPos = this.currentPosition - 1;
							scanEscapeCharacter();
							switch (this.currentCharacter) {
								case ' ':
									if (this.withoutUnicodePtr == 0) {
										unicodeInitializeBuffer(this.currentPosition - this.startPosition);
									}
									// Kludge, retain the '\' and also
									// when scanEscapeCharacter reads space in form of \040 and
									// set the next character to 's'
									// so, we get an escaped scape, i.e. \s, which will later be 
									// replaced by space
									unicodeStore('\\');
									this.currentCharacter = 's';
									break;
								case '\r':
								case '\n':
									if (this.withoutUnicodePtr == 0) {
										unicodeInitializeBuffer(this.currentPosition - this.startPosition);
									}
									unicodeStore('\\');
									this.currentPosition = oldPos;
									this.currentCharacter = this.source[this.currentPosition];
									break outer;
									
							}
					}
					if (this.withoutUnicodePtr != 0) {
						unicodeStore();
					}
				}
				// consume next character
				this.unicodeAsBackSlash = false;
				if (((this.currentCharacter = this.source[this.currentPosition++]) == '\\')
						&& (this.source[this.currentPosition] == 'u')) {
					getNextUnicodeChar();
					isUnicode = true;
				} else {
					isUnicode = false;
					if (this.currentCharacter == '"'/* || skipWhitespace*/)
						continue;
					if (this.withoutUnicodePtr != 0) {
						unicodeStore();
					}
				}
			}
			if (lastQuotePos > 0)
				this.currentPosition = lastQuotePos;
			this.currentPosition = (lastQuotePos > 0) ? lastQuotePos : this.startPosition + this.rawStart;
			throw new InvalidInputException(UNTERMINATED_TEXT_BLOCK);
		} catch (IndexOutOfBoundsException e) {
			this.currentPosition = (lastQuotePos > 0) ? lastQuotePos : this.startPosition + this.rawStart;
			throw new InvalidInputException(UNTERMINATED_TEXT_BLOCK);
		}
	} else {
		try {
			// consume next character
			this.unicodeAsBackSlash = false;
			isUnicode = false;
			if (((this.currentCharacter = this.source[this.currentPosition++]) == '\\')
					&& (this.source[this.currentPosition] == 'u')) {
				getNextUnicodeChar();
				isUnicode = true;
			} else {
				if (this.withoutUnicodePtr != 0) {
					unicodeStore();
				}
			}

			while (this.currentCharacter != '"') {
				if (this.currentPosition >= this.eofPosition) {
					throw new InvalidInputException(UNTERMINATED_STRING);
				}
				/**** \r and \n are not valid in string literals ****/
				if ((this.currentCharacter == '\n') || (this.currentCharacter == '\r')) {
					// relocate if finding another quote fairly close: thus unicode '/u000D' will be fully consumed
					if (isUnicode) {
						int start = this.currentPosition;
						for (int lookAhead = 0; lookAhead < 50; lookAhead++) {
							if (this.currentPosition >= this.eofPosition) {
								this.currentPosition = start;
								break;
							}
							if (((this.currentCharacter = this.source[this.currentPosition++]) == '\\') && (this.source[this.currentPosition] == 'u')) {
								isUnicode = true;
								getNextUnicodeChar();
							} else {
								isUnicode = false;
							}
							if (!isUnicode && this.currentCharacter == '\n') {
								this.currentPosition--; // set current position on new line character
								break;
							}
							if (this.currentCharacter == '\"') {
								throw new InvalidInputException(INVALID_CHAR_IN_STRING);
							}
						}
					} else {
						this.currentPosition--; // set current position on new line character
					}
					throw new InvalidInputException(INVALID_CHAR_IN_STRING);
				}
				if (this.currentCharacter == '\\') {
					if (this.unicodeAsBackSlash) {
						this.withoutUnicodePtr--;
						// consume next character
						this.unicodeAsBackSlash = false;
						if (((this.currentCharacter = this.source[this.currentPosition++]) == '\\') && (this.source[this.currentPosition] == 'u')) {
							getNextUnicodeChar();
							isUnicode = true;
							this.withoutUnicodePtr--;
						} else {
							isUnicode = false;
						}
					} else {
						if (this.withoutUnicodePtr == 0) {
							unicodeInitializeBuffer(this.currentPosition - this.startPosition);
						}
						this.withoutUnicodePtr --;
						this.currentCharacter = this.source[this.currentPosition++];
					}
					// we need to compute the escape character in a separate buffer
					scanEscapeCharacter();
					if (this.withoutUnicodePtr != 0) {
						unicodeStore();
					}
				}
				// consume next character
				this.unicodeAsBackSlash = false;
				if (((this.currentCharacter = this.source[this.currentPosition++]) == '\\')
						&& (this.source[this.currentPosition] == 'u')) {
					getNextUnicodeChar();
					isUnicode = true;
				} else {
					isUnicode = false;
					if (this.withoutUnicodePtr != 0) {
						unicodeStore();
					}
				}

			}
		} catch (IndexOutOfBoundsException e) {
			this.currentPosition--;
			throw new InvalidInputException(UNTERMINATED_STRING);
		} catch (InvalidInputException e) {
			if (e.getMessage().equals(INVALID_ESCAPE)) {
				// relocate if finding another quote fairly close: thus unicode '/u000D' will be fully consumed
				for (int lookAhead = 0; lookAhead < 50; lookAhead++) {
					if (this.currentPosition + lookAhead == this.eofPosition)
						break;
					if (this.source[this.currentPosition + lookAhead] == '\n')
						break;
					if (this.source[this.currentPosition + lookAhead] == '\"') {
						this.currentPosition += lookAhead + 1;
						break;
					}
				}

			}
			throw e; // rethrow
		}
		return TokenNameStringLiteral;
	}
}

