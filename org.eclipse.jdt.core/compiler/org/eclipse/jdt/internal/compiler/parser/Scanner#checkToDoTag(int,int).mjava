// chech presence of TODO: tags
public void checkToDoTag(int commentStart, int commentEnd) {

	// only look for newer TODO: tags
	if (this.todoCount > 0 && this.todoPositions[this.todoCount-1][0] >= commentStart) {
		return;
	}
	int tagLength = this.toDoTag.length;
	for (int i = commentStart; i < commentEnd && i < this.eofPosition; i++) {

		// check for tag occurrence
		boolean foundTag = true;
		for (int t = 0; t < tagLength; t++){
			if (this.source[i+t] != this.toDoTag[t]){
				foundTag = false;
				break;
			}
		}
		if (foundTag){

			int nextPos = i+5;
			char c = this.source[nextPos];

			int start = i; 
			int end = -1;
			for (int j = nextPos; j < commentEnd; j++){
				if ((c = this.source[j]) == '\n' || c == '\r'){
					end = j - 1;
					i = j+1;
					break;
				}
			}
			if (end < 0){
				for (int j = commentEnd; j >= nextPos; j--){
					if ((c = this.source[j]) == '*') {
						end = j - 1;
						break;
					}
				}
				if (end < 0) end = nextPos+1;
			}
			
			// trim message
			while (source[end] == ' ' && start <= end) end--;
			
			char[] message = new char[end-start+1];
			System.arraycopy(source, start, message, 0, end-start+1);
					
			if (this.todoMessages == null){
				this.todoMessages = new char[5][];
				this.todoPositions = new int[5][];
			} else if (this.todoCount == this.todoMessages.length) {
				System.arraycopy(this.todoMessages, 0, this.todoMessages = new char[this.todoCount*2][], 0, this.todoCount);
				System.arraycopy(this.todoPositions, 0, this.todoPositions = new int[this.todoCount*2][], 0, this.todoCount);
			}
			this.todoMessages[this.todoCount] = message;
			this.todoPositions[this.todoCount] = new int[]{ start, end };
			this.todoCount++;
		}
	}
}

