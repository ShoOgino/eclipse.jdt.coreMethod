protected boolean checkDeprecation(
	int commentSourceStart,
	int commentSourceEnd,
	char[] comment) {

	boolean deprecated = false;
	boolean oneStar = false;
	boolean invalidate = false;
	for (int[] index = new int[] {commentSourceStart + 3}; index[0] < commentSourceEnd - 10;) {
		char nextCharacter = getNextCharacter(comment, index);
		switch(nextCharacter) {
			case '@' :
				if ((getNextCharacter(comment, index) == 'd')
					&& (getNextCharacter(comment, index) == 'e')
					&& (getNextCharacter(comment, index) == 'p')
					&& (getNextCharacter(comment, index) == 'r')
					&& (getNextCharacter(comment, index) == 'e')
					&& (getNextCharacter(comment, index) == 'c')
					&& (getNextCharacter(comment, index) == 'a')
					&& (getNextCharacter(comment, index) == 't')
					&& (getNextCharacter(comment, index) == 'e')
					&& (getNextCharacter(comment, index) == 'd')) {
					// ensure the tag is properly ended: either followed by a space, a tab, line end or asterisk.
					nextCharacter = getNextCharacter(comment, index);
					deprecated = !invalidate && (Character.isWhitespace(nextCharacter) || nextCharacter == '*');
					if (deprecated) {
						return true;
					}
				}
				break;
			case '\n' :
			case '\r' :
			case '\f' :
				oneStar = false;
				invalidate = false;
				break;
			case '*' :
				if (oneStar) {
					invalidate = true;
				}
				oneStar = true;
				break;
			default :
				if (!CharOperation.isWhitespace(nextCharacter)) {
					invalidate = true;
				}
		}
	}
	return deprecated;
}

