	public void updateFromParserState() {
		Parser parser = this.parser();
		
		if (annotation == null && this.identifierPtr <= parser.identifierPtr) {
			Annotation annot = null;
			
			boolean needUpdateRParenPos = false;
			
			parser.identifierPtr = this.identifierPtr;
			parser.identifierLengthPtr = this.identifierLengthPtr;
			TypeReference typeReference = parser.getAnnotationType();
			
			switch (this.kind) {
				case NORMAL:
					MemberValuePair[] memberValuePairs = null;
					if (parser.astPtr > -1 && parser.astStack[parser.astPtr] instanceof MemberValuePair) {
						int argLength = parser.astLengthStack[parser.astLengthPtr];
						int argStart = parser.astPtr - argLength + 1;
						
						if (argLength > 0) {
							System.arraycopy(parser.astStack, argStart, memberValuePairs = new MemberValuePair[argLength], 0, argLength);
							parser.astLengthPtr--;
							parser.astPtr -= argLength;
							
							MemberValuePair lastMemberValuePair = memberValuePairs[memberValuePairs.length - 1];
							
							NormalAnnotation normalAnnotation = new NormalAnnotation(typeReference, this.sourceStart);
							normalAnnotation.memberValuePairs = memberValuePairs;
							normalAnnotation.declarationSourceEnd =
								lastMemberValuePair.value != null
										? lastMemberValuePair.value instanceof Annotation
												? ((Annotation)lastMemberValuePair.value).declarationSourceEnd
												: lastMemberValuePair.value.sourceEnd
										: lastMemberValuePair.sourceEnd;
							normalAnnotation.bits |= ASTNode.IsRecovered;
							
							annot = normalAnnotation;
							
							needUpdateRParenPos = true;
						}
					}
					
					
					break;
				case SINGLE_MEMBER:
					if (parser.expressionPtr > -1) {
						Expression memberValue = parser.expressionStack[parser.expressionPtr--];
						
						SingleMemberAnnotation singleMemberAnnotation = new SingleMemberAnnotation(typeReference, this.sourceStart);
						singleMemberAnnotation.memberValue = memberValue;
						singleMemberAnnotation.declarationSourceEnd = memberValue.sourceEnd;
						singleMemberAnnotation.bits |= ASTNode.IsRecovered;
						
						annot = singleMemberAnnotation;
							
						needUpdateRParenPos = true;
					}
					break;
			}
			
			if (!needUpdateRParenPos) {
				MarkerAnnotation markerAnnotation = new MarkerAnnotation(typeReference, this.sourceStart);
				markerAnnotation.declarationSourceEnd = markerAnnotation.sourceEnd;
				markerAnnotation.bits |= ASTNode.IsRecovered;
				
				annot = markerAnnotation;
			}
			
			parser.currentElement = this.addAnnotation(annot, this.identifierPtr);
			parser.annotationRecoveryCheckPoint(annot.sourceStart, annot.declarationSourceEnd);
			if (this.parent != null) {

				this.parent.updateFromParserState();
			}
		}
	}

