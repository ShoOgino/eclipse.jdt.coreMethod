	/*
	 * Parse a reference in @see tag
	 */
	protected boolean parseReference(boolean plain) throws InvalidInputException {
		Object typeRef = null;
		Object reference = null;
		int previousPosition = -1;
		nextToken : while (this.index < this.scanner.eofPosition) {
			previousPosition = this.index;
			int token = readToken();
			switch (token) {
				case TerminalTokens.TokenNameStringLiteral :
					// @see "string"
					int start = this.scanner.getCurrentTokenStartPosition();
					if (typeRef == null) {
						consumeToken();
						if (this.source[this.index] == '\r' || this.source[this.index] == '\n') {
							if (this.kind == DOM_PARSER) {
								parseTag();
								pushText(previousPosition, this.index-1);
							}
							return true;
						}
					}
					if (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidSeeReference(start, this.lineEnd);
					return false;
				case TerminalTokens.TokenNameLESS :
					// @see "<a href="URL#Value">label</a>
					consumeToken();
					start = this.scanner.getCurrentTokenStartPosition();
					if (parseHref()) {
						if (typeRef == null) {
							consumeToken();
							if (this.source[this.index] == '\r' || this.source[this.index] == '\n') {
								if (this.kind == DOM_PARSER) {
									parseTag();
									pushText(previousPosition, this.index-1);
								}
								return true;
							}
						}
						if (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidSeeReference(start, this.lineEnd);
					}
					return false;
				case TerminalTokens.TokenNameERROR :
					if (this.scanner.currentCharacter == '#') { // @see ...#member
						consumeToken();
						reference = parseMember(typeRef);
						if (reference != null) {
							return pushSeeRef(reference, plain);
						}
						return false;
					}
					break nextToken;
				case TerminalTokens.TokenNameIdentifier :
					if (typeRef == null) {
						typeRef = parseQualifiedName(true);
						break;
					}
					break nextToken;
				default :
					break nextToken;
			}
		}
		
		// Verify that we got a reference
		if (reference == null) reference = typeRef;
		if (reference == null) {
			if (this.sourceParser != null) this.sourceParser.problemReporter().javadocMissingSeeReference(this.tagSourceStart, this.tagSourceEnd);
			return false;
		}

		// Verify that line end does not start with an open parenthese (which could be a constructor reference wrongly written...)
		// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=47215
		int start = this.scanner.getCurrentTokenStartPosition();
		try {
			int token = readToken();
			if (token != TerminalTokens.TokenNameLPAREN) {
				// Reset position: we want to rescan last token
				if (this.currentTokenType != -1) {
					this.index = previousPosition;
					this.scanner.currentPosition = previousPosition;
					this.currentTokenType = -1;
				}
				return pushSeeRef(reference, plain);
			}
		} catch (InvalidInputException e) {
			// Do nothing as we report an error after
		}
		if (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidSeeReference(start, this.lineEnd);
		return false;
	}

