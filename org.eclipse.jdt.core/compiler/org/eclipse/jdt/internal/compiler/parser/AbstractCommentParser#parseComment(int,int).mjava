	/* (non-Javadoc)
	 * Returns true if tag @deprecated is present in javadoc comment.
	 * 
	 * If javadoc checking is enabled, will also construct an Javadoc node, which will be stored into Parser.javadoc
	 * slot for being consumed later on.
	 */
	protected boolean parseComment(int javadocStart, int javadocEnd) {

		boolean validComment = true;
		try {
			// Init
			this.index = javadocStart +3;
			this.endComment = javadocEnd - 2;
			this.astLengthPtr = -1;
			this.astPtr = -1;
			this.currentTokenType = -1;
			this.scanner.resetTo(this.index, this.endComment);
			this.inlineTagStarted = false;
			this.lineStarted = false;
			this.returnStatement = null;
			this.inherited = false;
			this.deprecated = false;
			this.linePtr = getLineNumber(javadocStart);
			this.lastLinePtr = getLineNumber(javadocEnd);
			this.lineEnd = (this.linePtr == this.lastLinePtr) ? this.endComment : javadocStart + 3;
			this.textStart = -1;
			char nextCharacter= 0, previousChar;
			int charPosition = -1, inlineStartPosition = 0;
			
			// Loop on each comment character
			while (this.index < this.endComment) {
				int previousPosition = this.index;
				previousChar = nextCharacter;
				
				// Calculate line end (cannot use this.scanner.linePtr as scanner does not parse line ends again)
				if (this.index > (this.lineEnd+1)) {
					updateLineEnd();
					this.lineStarted = false;
				}
				
				// Read next char only if token was consumed
				if (this.currentTokenType < 0) {
					nextCharacter = readChar(); // consider unicodes
				} else {
					previousPosition = this.scanner.getCurrentTokenStartPosition();
					switch (this.currentTokenType) {
						case TerminalTokens.TokenNameRBRACE:
							nextCharacter = '}';
							break;
						case TerminalTokens.TokenNameMULTIPLY:
							nextCharacter = '*';
							break;
					default:
							nextCharacter = this.scanner.currentCharacter;
					}
					consumeToken();
				}
				
				switch (nextCharacter) {
					case '@' :
						boolean valid = false;
						// Start tag parsing only if we are on line beginning or at inline tag beginning
						if (!this.lineStarted || previousChar == '{') {
							this.lineStarted = true;
							if (this.inlineTagStarted) {
								this.inlineTagStarted = false;
								if (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidTag(inlineStartPosition, charPosition);
								validComment = false;
							} else {
								if (previousChar == '{') {
									if (this.textStart != -1 && this.textStart <= charPosition) {
										pushText(this.textStart, charPosition);
									}
									this.inlineTagStarted = true;
								}
								this.scanner.resetTo(this.index, this.endComment);
								this.currentTokenType = -1; // flush token cache at line begin
								try {
									int tk = readTokenAndConsume();
									this.tagSourceStart = this.kind == COMPIL_PARSER ? this.scanner.getCurrentTokenStartPosition() : previousPosition;
									this.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();
									switch (tk) {
										case TerminalTokens.TokenNameIdentifier :
											char[] tag = this.scanner.getCurrentIdentifierSource();
											if (CharOperation.equals(tag, TAG_DEPRECATED)) {
												this.deprecated = true;
												valid = true;
											} else if (CharOperation.equals(tag, TAG_INHERITDOC)) {
												this.inherited = true;
												valid = true;
											} else if (CharOperation.equals(tag, TAG_PARAM)) {
												valid = parseParam();
											} else if (CharOperation.equals(tag, TAG_EXCEPTION)) {
												valid = parseThrows(false);
											} else if (CharOperation.equals(tag, TAG_SEE) ||
													CharOperation.equals(tag, TAG_LINK)) {
												valid = parseSee(false);
											} else if (CharOperation.equals(tag, TAG_LINKPLAIN)) {
												valid = parseSee(true);
											} else {
												valid = parseTag();
											}
											break;
										case TerminalTokens.TokenNamereturn :
											valid = parseReturn();
											break;
										case TerminalTokens.TokenNamethrows :
											valid = parseThrows(true);
											break;
									}
									if (!valid) {
										this.inlineTagStarted = false;
										validComment = false;
									}
									this.textStart = this.index;
								} catch (InvalidInputException e) {
									consumeToken();
								}
							}
						}
						break;
					case '\r':
					case '\n':
						if (this.lineStarted && this.textStart <= charPosition) {
							pushText(this.textStart, charPosition);
						}
						this.lineStarted = false;
						break;
					case '}' :
						if (this.inlineTagStarted) {
							if (this.lineStarted && this.textStart != -1 && this.textStart <= charPosition) {
								pushText(this.textStart, charPosition);
							}
							if (this.kind == DOM_PARSER) refreshInlineTagPosition(previousPosition);
							this.textStart = this.index;
							this.inlineTagStarted = false;
						}
						if (this.index < this.lineEnd) {
							this.lineStarted = true;
							charPosition = previousPosition;
						}
						break;
					case '{' :
						if (this.inlineTagStarted) {
							this.inlineTagStarted = false;
							if (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidTag(inlineStartPosition, this.index);
						} else {
							inlineStartPosition = previousPosition;
						}
						break;
					case '*' :
						charPosition = previousPosition;
						break;
					default :
						charPosition = previousPosition;
						if (!CharOperation.isWhitespace(nextCharacter)) {
							if (!this.lineStarted) {
								this.textStart = previousPosition;
							}
							this.lineStarted = true;
						}
				}
			}
			if (this.lineStarted && this.textStart <= this.endComment) {
				pushText(this.textStart, this.endComment);
			}
			updateDocComment();
		} catch (Exception ex) {
			validComment = false;
		}
		return validComment;
	}

