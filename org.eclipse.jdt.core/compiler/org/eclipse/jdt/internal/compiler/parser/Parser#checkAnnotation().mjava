public void checkAnnotation() {

	boolean deprecated = false;
	boolean checkDeprecated = false;
	int lastAnnotationIndex = -1;

	//since jdk1.2 look only in the last java doc comment...
	nextComment : for (lastAnnotationIndex = scanner.commentPtr; lastAnnotationIndex >= 0; lastAnnotationIndex--){
		//look for @deprecated into the first javadoc comment preceeding the declaration
		int commentSourceStart = scanner.commentStarts[lastAnnotationIndex];
		// javadoc only (non javadoc comment have negative end positions.)
		if (modifiersSourceStart != -1 && modifiersSourceStart < commentSourceStart) {
			continue nextComment;
		}
		if (scanner.commentStops[lastAnnotationIndex] < 0) {
			break nextComment;
		}
		checkDeprecated = true;
		int commentSourceEnd = scanner.commentStops[lastAnnotationIndex] - 1; //stop is one over
		char[] comment = scanner.source;

		for (int i = commentSourceStart + 3; i < commentSourceEnd - 10; i++) {
			if ((comment[i] == '@') 
				&& (comment[i + 1] == 'd')
				&& (comment[i + 2] == 'e')
				&& (comment[i + 3] == 'p')
				&& (comment[i + 4] == 'r')
				&& (comment[i + 5] == 'e')
				&& (comment[i + 6] == 'c')
				&& (comment[i + 7] == 'a')
				&& (comment[i + 8] == 't')
				&& (comment[i + 9] == 'e')
				&& (comment[i + 10] == 'd')) {
				// ensure the tag is properly ended: either followed by a space, a tab, line end or asterisk.
				int nextPos = i+11;
				char nextCharacter = comment[nextPos];
				if (nextCharacter == '\\') {
					int c1, c2, c3, c4;
					nextPos++;
					while (comment[nextPos] == 'u') nextPos++;
					if (!(((c1 = Character.getNumericValue(comment[nextPos++])) > 15
						|| c1 < 0)
						|| ((c2 = Character.getNumericValue(comment[nextPos++])) > 15 || c2 < 0)
						|| ((c3 = Character.getNumericValue(comment[nextPos++])) > 15 || c3 < 0)
						|| ((c4 = Character.getNumericValue(comment[nextPos++])) > 15 || c4 < 0))) {
							nextCharacter = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);
						}
				}
				deprecated = Character.isWhitespace(nextCharacter) || nextCharacter == '*';
				break nextComment;
			}
		}
		break nextComment;
	}
	if (deprecated) {
		checkAndSetModifiers(AccDeprecated);
	}
	// modify the modifier source start to point at the first comment
	if (lastAnnotationIndex >= 0 && checkDeprecated) {
		modifiersSourceStart = scanner.commentStarts[lastAnnotationIndex]; 
	}
}

