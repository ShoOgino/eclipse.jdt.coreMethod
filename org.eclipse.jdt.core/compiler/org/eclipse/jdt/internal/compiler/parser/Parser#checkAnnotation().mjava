public void checkAnnotation() {

	boolean deprecated = false;
	boolean checkDeprecated = false;
	int lastAnnotationIndex = -1;

	//since jdk1.2 look only in the last java doc comment...
	found : for (lastAnnotationIndex = scanner.commentPtr; lastAnnotationIndex >= 0; lastAnnotationIndex--){
		//look for @deprecated into the first javadoc comment preceeding the declaration
		int commentSourceStart = scanner.commentStarts[lastAnnotationIndex];
		// javadoc only (non javadoc comment have negative end positions.)
		if (modifiersSourceStart != -1 && modifiersSourceStart < commentSourceStart) {
			continue;
		}
		if (scanner.commentStops[lastAnnotationIndex] < 0) {
			break found;
		}
		checkDeprecated = true;
		int commentSourceEnd = scanner.commentStops[lastAnnotationIndex] - 1; //stop is one over
		char[] comment = scanner.source;

		for (int i = commentSourceStart + 3; i < commentSourceEnd - 10; i++) {
			if ((comment[i] == '@') 
				&& (comment[i + 1] == 'd')
				&& (comment[i + 2] == 'e')
				&& (comment[i + 3] == 'p')
				&& (comment[i + 4] == 'r')
				&& (comment[i + 5] == 'e')
				&& (comment[i + 6] == 'c')
				&& (comment[i + 7] == 'a')
				&& (comment[i + 8] == 't')
				&& (comment[i + 9] == 'e')
				&& (comment[i + 10] == 'd')) {
				// ensure the tag is properly ended: either followed by a space, a tab, line end or asterisk.
				int nextPos = i+11;
				deprecated = (comment[nextPos] == ' ') || (comment[nextPos] == '\t') || (comment[nextPos] == '\n') || (comment[nextPos] == '\r') || (comment[nextPos] == '*');
				break found;
			}
		}
		break found;
	}
	if (deprecated) {
		checkAndSetModifiers(AccDeprecated);
	}
	// modify the modifier source start to point at the first comment
	if (lastAnnotationIndex >= 0 && checkDeprecated) {
		modifiersSourceStart = scanner.commentStarts[lastAnnotationIndex]; 
	}
}

