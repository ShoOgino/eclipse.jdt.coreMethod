	private void generateMissingTypesAttribute() {
		int numberOfMissingTypes = this.missingTypes.size();
		TypeBinding[] missingTypesArray;
		this.missingTypes.toArray(missingTypesArray = new TypeBinding[numberOfMissingTypes]);
		Arrays.sort(missingTypesArray, new Comparator() {
			public int compare(Object o1, Object o2) {
				TypeBinding binding1 = (TypeBinding) o1;
				TypeBinding binding2 = (TypeBinding) o2;
				return CharOperation.compareTo(binding1.constantPoolName(), binding2.constantPoolName());
			}
		});
		int attributeLength = numberOfMissingTypes * 2 + 2;
		if (this.contentsOffset + attributeLength + 6 >= this.contents.length) {
			resizeContents(attributeLength + 6);
		}
		int missingTypesNameIndex = this.constantPool.literalIndex(AttributeNamesConstants.MissingTypesName);
		this.contents[this.contentsOffset++] = (byte) (missingTypesNameIndex >> 8);
		this.contents[this.contentsOffset++] = (byte) missingTypesNameIndex;

		// generate attribute length
		this.contents[this.contentsOffset++] = (byte) (attributeLength >> 24);
		this.contents[this.contentsOffset++] = (byte) (attributeLength >> 16);
		this.contents[this.contentsOffset++] = (byte) (attributeLength >> 8);
		this.contents[this.contentsOffset++] = (byte) attributeLength;
		
		// generate number of missing types
		this.contents[this.contentsOffset++] = (byte) (numberOfMissingTypes >> 8);
		this.contents[this.contentsOffset++] = (byte) numberOfMissingTypes;
		// generate entry for each missing type
		for (int i = 0; i < numberOfMissingTypes; i++) {
			int missingTypeIndex = this.constantPool.literalIndexForType(missingTypesArray[i]);
			this.contents[this.contentsOffset++] = (byte) (missingTypeIndex >> 8);
			this.contents[this.contentsOffset++] = (byte) missingTypeIndex;
		}
	}

