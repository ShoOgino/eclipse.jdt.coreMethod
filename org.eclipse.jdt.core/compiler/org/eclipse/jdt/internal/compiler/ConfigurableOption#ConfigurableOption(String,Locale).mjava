	public ConfigurableOption(String id, Locale loc) {
		this.id = id;
		this.value = value;
		this.loc = loc;

		this.componentName = id.substring(0,id.lastIndexOf('.'));

		ResourceBundle bundle = null;
		missing = "Missing ressources entries for"/*nonNLS*/ + componentName + " options"/*nonNLS*/;
		try {
			bundle = ResourceBundle.getBundle(componentName,loc); 
		} catch (MissingResourceException e) {
			id = missing;
			defaultValue = missing;
			category = missing;
			name = missing;
			description = missing;
			possibleValues = NoDiscreteValue;
		}
		if (bundle == null) return;
		try{
			StringTokenizer tokenizer =
				new StringTokenizer(
					bundle.getString(id + ".possibleValues"/*nonNLS*/),
					"|"/*nonNLS*/);
			int numberOfValues = Integer.parseInt(tokenizer.nextToken());
			if (numberOfValues == -1) {
				// the possible value are not discrete
				possibleValues = NoDiscreteValue;
				
				String token = tokenizer.nextToken();
				type = token;
				if(token.equals(STRING)){

				}
				else if(token.equals(INT) && tokenizer.hasMoreTokens()){
					token = tokenizer.nextToken();
					if(!token.equals("no"/*nonNLS*/)){
						minExisting = true;
						minInt = Integer.parseInt(token);
					}
					token = tokenizer.nextToken();
					if(!token.equals("no"/*nonNLS*/)){
						maxExisting = true;
						maxInt = Integer.parseInt(token);
					}
				}
				else if(token.equals(FLOAT) && tokenizer.hasMoreTokens()){
					token = tokenizer.nextToken();
					if(!token.equals("no"/*nonNLS*/)){
						minExisting = true;
						minFloat = Float.parseFloat(token);
					}
					token = tokenizer.nextToken();
					if(!token.equals("no"/*nonNLS*/)){
						maxExisting = true;
						maxFloat = Float.parseFloat(token);
					}
				}			
			} else {
				// possible value are discrete
				type = DISCRETE;
				possibleValues = new String[numberOfValues];
				int index = 0;
				while (tokenizer.hasMoreTokens()) {
					possibleValues[index] = tokenizer.nextToken();
					index++;
				}
			}
			
		} catch (MissingResourceException e) {
			possibleValues = NoDiscreteValue;
			type = missing;
		} catch (NoSuchElementException e) {
			possibleValues = NoDiscreteValue;
			type = missing;
		} catch (NumberFormatException e) {
			possibleValues = NoDiscreteValue;
			type = missing;
		}
		try{
			if(possibleValues == NoDiscreteValue){
				defaultValue = bundle.getString(id + ".default"/*nonNLS*/);
			}
			else{
				defaultValueIndex = Integer.parseInt(bundle.getString(id + ".default"/*nonNLS*/));
			}
		} catch (MissingResourceException e) {
			defaultValue = missing;
		} catch (NumberFormatException e) {
			defaultValueIndex = -1;
		}
		try{
			order = Integer.parseInt(bundle.getString(id + ".order"/*nonNLS*/));
		} catch (NumberFormatException e) {
			order = -1;
		} catch (MissingResourceException e) {
			order = -1;
		}
		try{
			category = bundle.getString(id + ".category"/*nonNLS*/);
		} catch (MissingResourceException e) {
			category = missing;
		}
		try{
			name = bundle.getString(id + ".name"/*nonNLS*/);
		} catch (MissingResourceException e) {
			name = missing;
		}
		try{
			description = bundle.getString(id + ".description"/*nonNLS*/);
		} catch (MissingResourceException e) {
			description = missing;
		}
	}

