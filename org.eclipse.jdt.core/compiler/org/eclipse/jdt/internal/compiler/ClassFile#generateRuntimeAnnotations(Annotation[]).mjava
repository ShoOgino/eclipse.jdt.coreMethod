	/**
	 * @param annotations
	 * @return the number of attributes created while dumping the annotations in the .class file
	 */
	private int generateRuntimeAnnotations(final Annotation[] annotations) {
		int attributesNumber = 0;
		final int length = annotations.length;
		int visibleAnnotationsCounter = 0;
		int invisibleAnnotationsCounter = 0;
		
		for (int i = 0; i < length; i++) {
			Annotation annotation = annotations[i];
			if (isRuntimeInvisible(annotation)) {
				invisibleAnnotationsCounter++;
			} else if (isRuntimeVisible(annotation)) {
				visibleAnnotationsCounter++;
			}
		}

		if (invisibleAnnotationsCounter != 0) {
			int annotationAttributeOffset = contentsOffset;
			if (contentsOffset + 10 >= contents.length) {
				resizeContents(10);
			}
			int runtimeInvisibleAnnotationsAttributeNameIndex =
				constantPool.literalIndex(AttributeNamesConstants.RuntimeInvisibleAnnotationsName);
			contents[contentsOffset++] = (byte) (runtimeInvisibleAnnotationsAttributeNameIndex >> 8);
			contents[contentsOffset++] = (byte) runtimeInvisibleAnnotationsAttributeNameIndex;
			int attributeLengthOffset = contentsOffset;
			contentsOffset += 4; // leave space for the attribute length
	
			int annotationsLengthOffset = contentsOffset;
			contentsOffset += 2; // leave space for the annotations length
		
			contents[annotationsLengthOffset++] = (byte) (invisibleAnnotationsCounter >> 8);
			contents[annotationsLengthOffset++] = (byte) invisibleAnnotationsCounter;

			loop: for (int i = 0; i < length; i++) {
				if (invisibleAnnotationsCounter == 0) break loop;
				Annotation annotation = annotations[i];
				if (isRuntimeInvisible(annotation)) {
					generateAnnotation(annotation, annotationAttributeOffset);
					invisibleAnnotationsCounter--;
					if (this.contentsOffset == annotationAttributeOffset) {
						break loop;
					}
				}
			}
			if (contentsOffset != annotationAttributeOffset) {
				int attributeLength = contentsOffset - attributeLengthOffset - 4;
				contents[attributeLengthOffset++] = (byte) (attributeLength >> 24);
				contents[attributeLengthOffset++] = (byte) (attributeLength >> 16);
				contents[attributeLengthOffset++] = (byte) (attributeLength >> 8);
				contents[attributeLengthOffset++] = (byte) attributeLength;			
				attributesNumber++;
			} else {		
				contentsOffset = annotationAttributeOffset;
			}
		}
	
		if (visibleAnnotationsCounter != 0) {
			int annotationAttributeOffset = contentsOffset;
			if (contentsOffset + 10 >= contents.length) {
				resizeContents(10);
			}
			int runtimeVisibleAnnotationsAttributeNameIndex =
				constantPool.literalIndex(AttributeNamesConstants.RuntimeVisibleAnnotationsName);
			contents[contentsOffset++] = (byte) (runtimeVisibleAnnotationsAttributeNameIndex >> 8);
			contents[contentsOffset++] = (byte) runtimeVisibleAnnotationsAttributeNameIndex;
			int attributeLengthOffset = contentsOffset;
			contentsOffset += 4; // leave space for the attribute length
	
			int annotationsLengthOffset = contentsOffset;
			contentsOffset += 2; // leave space for the annotations length
		
			contents[annotationsLengthOffset++] = (byte) (visibleAnnotationsCounter >> 8);
			contents[annotationsLengthOffset++] = (byte) visibleAnnotationsCounter;

			loop: for (int i = 0; i < length; i++) {
				if (visibleAnnotationsCounter == 0) break loop;
				Annotation annotation = annotations[i];
				if (isRuntimeVisible(annotation)) {
					visibleAnnotationsCounter--;
					generateAnnotation(annotation, annotationAttributeOffset);
					if (this.contentsOffset == annotationAttributeOffset) {
						break loop;
					}
				}
			}
			if (contentsOffset != annotationAttributeOffset) {
				int attributeLength = contentsOffset - attributeLengthOffset - 4;
				contents[attributeLengthOffset++] = (byte) (attributeLength >> 24);
				contents[attributeLengthOffset++] = (byte) (attributeLength >> 16);
				contents[attributeLengthOffset++] = (byte) (attributeLength >> 8);
				contents[attributeLengthOffset++] = (byte) attributeLength;			
				attributesNumber++;
			} else {
				contentsOffset = annotationAttributeOffset;
			}
		}
		return attributesNumber;
	}

