	/**
	 *
	 * INTERNAL USE-ONLY
	 */
	protected void consumeConstructorHeader() {
		// ConstructorHeader ::= ConstructorHeaderName MethodHeaderParameters MethodHeaderThrowsClauseopt
		super.consumeConstructorHeader();
		if (isLocalDeclaration()) {
			// we ignore the local variable declarations
			intArrayPtr--;
			return;
		}
		ConstructorDeclaration cd = (ConstructorDeclaration) astStack[astPtr];
		Argument[] arguments = cd.arguments;
		char[][] argumentTypes = null;
		char[][] argumentNames = null;
		int[] argumentTypeStarts = null;
		int[] argumentTypeEnds = null;
		int[] argumentNameStarts = null;
		int[] argumentNameEnds = null;
		if (arguments != null) {
			int argumentLength = arguments.length;
			argumentTypes = new char[argumentLength][];
			argumentNames = new char[argumentLength][];
			argumentNameStarts = new int[argumentLength];
			argumentNameEnds = new int[argumentLength];
			argumentTypeStarts = new int[argumentLength];
			argumentTypeEnds = new int[argumentLength];
			for (int i = 0; i < argumentLength; i++) {
				Argument argument = arguments[i];
				TypeReference argumentType = argument.type;
				argumentTypes[i] = returnTypeName(argumentType);
				argumentNames[i] = argument.name;
				argumentNameStarts[i] = argument.sourceStart();
				argumentNameEnds[i] = argument.sourceEnd();
				argumentTypeStarts[i] = argumentType.sourceStart();
				argumentTypeEnds[i] = argumentType.sourceEnd();
			}
		}
		TypeReference[] thrownExceptions = cd.thrownExceptions;
		char[][] exceptionTypes = null;
		int[] exceptionTypeStarts = null;
		int[] exceptionTypeEnds = null;
		if (thrownExceptions != null) {
			int thrownExceptionLength = thrownExceptions.length;
			exceptionTypes = new char[thrownExceptionLength][];
			exceptionTypeStarts = new int[thrownExceptionLength];
			exceptionTypeEnds = new int[thrownExceptionLength];
			for (int i = 0; i < thrownExceptionLength; i++) {
				TypeReference exception = thrownExceptions[i];
				exceptionTypes[i] = CharOperation.concatWith(exception.getTypeName(), '.');
				exceptionTypeStarts[i] = exception.sourceStart();
				exceptionTypeEnds[i] = exception.sourceEnd();
			}
		}
		requestor
			.enterConstructor(
				cd.declarationSourceStart,
				intArrayStack[intArrayPtr--],
				cd.modifiers,
				cd.modifiersSourceStart,
				cd.selector,
				cd.sourceStart(),
				(int) (selectorSourcePositions & 0xFFFFFFFFL),
		// retrieve the source end of the name
		argumentTypes,
			argumentTypeStarts,
			argumentTypeEnds,
			argumentNames,
			argumentNameStarts,
			argumentNameEnds,
			rParenPos,
		// right parenthesis
		exceptionTypes,
			exceptionTypeStarts,
			exceptionTypeEnds,
			scanner.currentPosition - 1);
	}

