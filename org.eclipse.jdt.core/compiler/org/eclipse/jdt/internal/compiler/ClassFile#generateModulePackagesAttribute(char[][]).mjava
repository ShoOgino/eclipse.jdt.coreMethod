	private int generateModulePackagesAttribute(char[][] packageNames) {
		int localContentsOffset = this.contentsOffset;
		int maxSize = 6 + 2*packageNames.length;
		if (localContentsOffset + maxSize >= this.contents.length) {
			resizeContents(maxSize);
		}
		int moduleAttributeNameIndex =
			this.constantPool.literalIndex(AttributeNamesConstants.ModulePackages);
		this.contents[localContentsOffset++] = (byte) (moduleAttributeNameIndex >> 8);
		this.contents[localContentsOffset++] = (byte) moduleAttributeNameIndex;

		int attrLengthOffset = localContentsOffset;
		localContentsOffset+= 4;
		int packageCountOffset = localContentsOffset;
		localContentsOffset+= 2;
		
		int packagesCount = 0;
		for (char[] packageName : packageNames) {
			if (packageName == null || packageName.length == 0) continue;
			int packageNameIndex = this.constantPool.literalIndexForPackage(packageName);
			this.contents[localContentsOffset++] = (byte) (packageNameIndex >> 8);
			this.contents[localContentsOffset++] = (byte) packageNameIndex;
			packagesCount++;
		}

		this.contents[packageCountOffset++] = (byte)(packagesCount >> 8);
		this.contents[packageCountOffset++] = (byte)packagesCount;
		int attrLength = 2 + 2 * packagesCount;
		this.contents[attrLengthOffset++] = (byte)(attrLength >> 24);
		this.contents[attrLengthOffset++] = (byte)(attrLength >> 16);
		this.contents[attrLengthOffset++] = (byte)(attrLength >> 8);
		this.contents[attrLengthOffset++] = (byte)attrLength;
		this.contentsOffset = localContentsOffset;
		return 1;
	}

