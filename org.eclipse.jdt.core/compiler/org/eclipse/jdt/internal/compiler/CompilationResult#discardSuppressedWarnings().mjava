	public void discardSuppressedWarnings() {

		if (this.suppressWarningsCount == 0) return;
		int removed = 0;
		nextProblem: for (int i = 0, length = this.problemCount; i < length; i++) {
			CategorizedProblem problem = this.problems[i];
			int problemID = problem.getID();
			if (!problem.isWarning()) {
				switch (problemID) {
					case IProblem.NonExternalizedStringLiteral :
					case IProblem.UnnecessaryNLSTag :
						break;
					default :
						continue nextProblem;
				}
			}
			int start = problem.getSourceStart();
			int end = problem.getSourceEnd();
			nextSuppress: for (int j = 0, max = this.suppressWarningsCount; j < max; j++) {
				long position = this.suppressWarningScopePositions[j];
				int startSuppress = (int) (position >>> 32);
				int endSuppress = (int) position;
				if (start < startSuppress) continue nextSuppress;
				if (end > endSuppress) continue nextSuppress;
				if ((ProblemReporter.getIrritant(problemID) & this.suppressWarningIrritants[j]) == 0)
					continue nextSuppress;
				// discard suppressed warning
				removed++;
				problems[i] = null;
				if (problemsMap != null) problemsMap.remove(problem);
				if (firstErrors != null) firstErrors.remove(problem);
				continue nextProblem;
			}
		}
		if (removed > 0) {
			for (int i = 0, index = 0; i < this.problemCount; i++) {
				CategorizedProblem problem;
				if ((problem = this.problems[i]) != null) {
					if (i > index) {
						this.problems[index++] = problem;
					} else {
						index++;
					}
				}
			}
			this.problemCount -= removed;
		}
	}

