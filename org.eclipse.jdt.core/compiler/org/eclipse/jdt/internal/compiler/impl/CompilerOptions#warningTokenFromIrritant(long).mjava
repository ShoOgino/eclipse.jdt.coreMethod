	public static String warningTokenFromIrritant(long irritant) {
		int irritantInt = (int) irritant;
		if (irritantInt == irritant) {
			switch (irritantInt) {
				case (int) MethodWithConstructorName :
					return "constructorName"; //$NON-NLS-1$
				case (int) OverriddenPackageDefaultMethod :
					return "pkgDefaultMethod"; //$NON-NLS-1$
				case (int) UsingDeprecatedAPI :
					return "deprecation"; //$NON-NLS-1$
				case (int) MaskedCatchBlock :
					return "maskedCatchBlock"; //$NON-NLS-1$
				case (int) UnusedLocalVariable :
					return "unusedLocal"; //$NON-NLS-1$
				case (int) UnusedArgument :
					return "unusedArgument"; //$NON-NLS-1$
				case (int) NoImplicitStringConversion :
					return "charConcat"; //$NON-NLS-1$
				case (int) AccessEmulation :
					return "syntheticAccess"; //$NON-NLS-1$
				case (int) NonExternalizedString :
					return "nls"; //$NON-NLS-1$
				case (int) AssertUsedAsAnIdentifier :
					return "assertIdentifier"; //$NON-NLS-1$
				case (int) UnusedImport :
					return "unusedImport"; //$NON-NLS-1$
				case (int) NonStaticAccessToStatic :
					return "staticReceiver"; //$NON-NLS-1$
				case (int) NoEffectAssignment :
					return "noEffectAssign"; //$NON-NLS-1$
				case (int) IncompatibleNonInheritedInterfaceMethod :
					return "intfNonInherited"; //$NON-NLS-1$
				case (int) UnusedPrivateMember :
					return "unusedPrivate"; //$NON-NLS-1$
				case (int) LocalVariableHiding :
					return "localHiding"; //$NON-NLS-1$
				case (int) FieldHiding :
					return "fieldHiding"; //$NON-NLS-1$
				case (int) AccidentalBooleanAssign :
					return "conditionAssign"; //$NON-NLS-1$
				case (int) EmptyStatement :								// TODO (philippe) still needed ?
					return "emptyBlock"; //$NON-NLS-1$
				case (int) MissingJavadocComments :
				case (int) MissingJavadocTags :
				case (int) InvalidJavadoc :
				case (int) (MissingJavadocComments | MissingJavadocTags | InvalidJavadoc):
					return "javadoc"; //$NON-NLS-1$
				case (int) UnqualifiedFieldAccess :
					return "unqualifiedField"; //$NON-NLS-1$
				case (int) UnusedDeclaredThrownException :
					return "unusedThrown"; //$NON-NLS-1$
				case (int) FinallyBlockNotCompleting :
					return "finally"; //$NON-NLS-1$
				case (int) UnnecessaryTypeCheck :
					return "uselessTypeCheck"; //$NON-NLS-1$
				case (int) UndocumentedEmptyBlock :
					return "emptyBlock"; //$NON-NLS-1$
				case (int) IndirectStaticAccess :
					return "indirectStatic"; //$NON-NLS-1$
				case (int) UnnecessaryElse :
					return "unnecessaryElse"; //$NON-NLS-1$
				case (int) UncheckedTypeOperation :
					return "unchecked"; //$NON-NLS-1$
			}
		} else {
			irritantInt = (int)(irritant >>> 32);
			switch (irritantInt) {
				case (int) (FinalParameterBound >>> 32) :
					return "finalBound"; //$NON-NLS-1$
				case (int) (MissingSerialVersion >>> 32) :
					return "serial"; //$NON-NLS-1$
				case (int) (EnumUsedAsAnIdentifier >>> 32) :
					return "enumIdentifier"; //$NON-NLS-1$
				case (int) (ForbiddenReference >>> 32) :
				case (int) (DiscouragedReference >>> 32) :
				case (int) ((ForbiddenReference | DiscouragedReference) >>> 32)  :
					return "restricted"; //$NON-NLS-1$
				case (int) (VarargsArgumentNeedCast >>> 32) :
					return "varargs"; //$NON-NLS-1$
				case (int) (NullReference >>> 32) :
					return "null"; //$NON-NLS-1$
				case (int) (Autoboxing >>> 32) :
					return "boxing"; //$NON-NLS-1$
				case (int) (AnnotationSuperInterface >>> 32) :
					return "intfAnnotation"; //$NON-NLS-1$
				case (int) (TypeParameterHiding >>> 32) :
					return "typeHiding"; //$NON-NLS-1$
				case (int) (MissingOverrideAnnotation >>> 32) :
					return "over-ann"; //$NON-NLS-1$
				case (int) (IncompleteEnumSwitch >>> 32) :
					return "enumSwitch"; //$NON-NLS-1$
				case (int) (MissingDeprecatedAnnotation >>> 32) :
					return "dep-ann"; //$NON-NLS-1$
			}
		}
		return null;
	}

