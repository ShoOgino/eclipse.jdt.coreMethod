	public static final Constant computeConstantOperation(
		Constant left,
		int leftId,
		int operator,
		Constant right,
		int rightId) {
		//this method  assumes that the TC has been done . So (except for divide by zero)
		//the result should be availbale with not runtime error

		switch (operator) {
			case AND :
				return computeConstantOperationAND(left, leftId, operator, right, rightId);
			case AND_AND :
				return computeConstantOperationAND_AND(left, leftId, operator, right, rightId);
			case DIVIDE :
				return computeConstantOperationDIVIDE(left, leftId, operator, right, rightId);
			case GREATER :
				return computeConstantOperationGREATER(left, leftId, operator, right, rightId);
			case GREATER_EQUAL :
				return computeConstantOperationGREATER_EQUAL(
					left,
					leftId,
					operator,
					right,
					rightId);
			case LEFT_SHIFT :
				return computeConstantOperationLEFT_SHIFT(
					left,
					leftId,
					operator,
					right,
					rightId);
			case LESS :
				return computeConstantOperationLESS(left, leftId, operator, right, rightId);
			case LESS_EQUAL :
				return computeConstantOperationLESS_EQUAL(
					left,
					leftId,
					operator,
					right,
					rightId);
			case MINUS :
				return computeConstantOperationMINUS(left, leftId, operator, right, rightId);
			case MULTIPLY :
				return computeConstantOperationMULTIPLY(left, leftId, operator, right, rightId);
			case OR :
				return computeConstantOperationOR(left, leftId, operator, right, rightId);
			case OR_OR :
				return computeConstantOperationOR_OR(left, leftId, operator, right, rightId);
			case PLUS :
				return computeConstantOperationPLUS(left, leftId, operator, right, rightId);
			case REMAINDER :
				return computeConstantOperationREMAINDER(
					left,
					leftId,
					operator,
					right,
					rightId);
			case RIGHT_SHIFT :
				return computeConstantOperationRIGHT_SHIFT(
					left,
					leftId,
					operator,
					right,
					rightId);
			case UNSIGNED_RIGHT_SHIFT :
				return computeConstantOperationUNSIGNED_RIGHT_SHIFT(
					left,
					leftId,
					operator,
					right,
					rightId);
			case XOR :
				return computeConstantOperationXOR(left, leftId, operator, right, rightId);

			default :
				return NotAConstant;
		}
	} //should not occurs....(conservative code)

