	public String toString() {
	

		StringBuffer buf = new StringBuffer("CompilerOptions:"); //$NON-NLS-1$
		if ((produceDebugAttributes & Vars) != 0){
			buf.append("\n-local variables debug attributes: ON"); //$NON-NLS-1$
		} else {
			buf.append("\n-local variables debug attributes: OFF"); //$NON-NLS-1$
		}
		if ((produceDebugAttributes & Lines) != 0){
			buf.append("\n-line number debug attributes: ON"); //$NON-NLS-1$
		} else {
			buf.append("\n-line number debug attributes: OFF"); //$NON-NLS-1$
		}
		if ((produceDebugAttributes & Source) != 0){
			buf.append("\n-source debug attributes: ON"); //$NON-NLS-1$
		} else {
			buf.append("\n-source debug attributes: OFF"); //$NON-NLS-1$
		}
		if (preserveAllLocalVariables){
			buf.append("\n-preserve all local variables: ON"); //$NON-NLS-1$
		} else {
			buf.append("\n-preserve all local variables: OFF"); //$NON-NLS-1$
		}
		if ((errorThreshold & UnreachableCode) != 0){
			buf.append("\n-unreachable code: ERROR"); //$NON-NLS-1$
		} else {
			if ((warningThreshold & UnreachableCode) != 0){
				buf.append("\n-unreachable code: WARNING"); //$NON-NLS-1$
			} else {
				buf.append("\n-unreachable code: IGNORE"); //$NON-NLS-1$
			}
		}
		if ((errorThreshold & ImportProblem) != 0){
			buf.append("\n-import problem: ERROR"); //$NON-NLS-1$
		} else {
			if ((warningThreshold & ImportProblem) != 0){
				buf.append("\n-import problem: WARNING"); //$NON-NLS-1$
			} else {
				buf.append("\n-import problem: IGNORE"); //$NON-NLS-1$
			}
		}
		if ((errorThreshold & MethodWithConstructorName) != 0){
			buf.append("\n-method with constructor name: ERROR");		 //$NON-NLS-1$
		} else {
			if ((warningThreshold & MethodWithConstructorName) != 0){
				buf.append("\n-method with constructor name: WARNING"); //$NON-NLS-1$
			} else {
				buf.append("\n-method with constructor name: IGNORE"); //$NON-NLS-1$
			}
		}
		if ((errorThreshold & OverriddenPackageDefaultMethod) != 0){
			buf.append("\n-overridden package default method: ERROR"); //$NON-NLS-1$
		} else {
			if ((warningThreshold & OverriddenPackageDefaultMethod) != 0){
				buf.append("\n-overridden package default method: WARNING"); //$NON-NLS-1$
			} else {
				buf.append("\n-overridden package default method: IGNORE"); //$NON-NLS-1$
			}
		}
		if ((errorThreshold & UsingDeprecatedAPI) != 0){
			buf.append("\n-deprecation: ERROR"); //$NON-NLS-1$
		} else {
			if ((warningThreshold & UsingDeprecatedAPI) != 0){
				buf.append("\n-deprecation: WARNING"); //$NON-NLS-1$
			} else {
				buf.append("\n-deprecation: IGNORE"); //$NON-NLS-1$
			}
		}
		if ((errorThreshold & MaskedCatchBlock) != 0){
			buf.append("\n-masked catch block: ERROR"); //$NON-NLS-1$
		} else {
			if ((warningThreshold & MaskedCatchBlock) != 0){
				buf.append("\n-masked catch block: WARNING"); //$NON-NLS-1$
			} else {
				buf.append("\n-masked catch block: IGNORE"); //$NON-NLS-1$
			}
		}
		if ((errorThreshold & UnusedLocalVariable) != 0){
			buf.append("\n-unused local variable: ERROR"); //$NON-NLS-1$
		} else {
			if ((warningThreshold & UnusedLocalVariable) != 0){
				buf.append("\n-unused local variable: WARNING"); //$NON-NLS-1$
			} else {
				buf.append("\n-unused local variable: IGNORE"); //$NON-NLS-1$
			}
		}
		if ((errorThreshold & UnusedArgument) != 0){
			buf.append("\n-unused parameter: ERROR"); //$NON-NLS-1$
		} else {
			if ((warningThreshold & UnusedArgument) != 0){
				buf.append("\n-unused parameter: WARNING"); //$NON-NLS-1$
			} else {
				buf.append("\n-unused parameter: IGNORE"); //$NON-NLS-1$
			}
		}
		if ((errorThreshold & AccessEmulation) != 0){
			buf.append("\n-synthetic access emulation: ERROR"); //$NON-NLS-1$
		} else {
			if ((warningThreshold & AccessEmulation) != 0){
				buf.append("\n-synthetic access emulation: WARNING"); //$NON-NLS-1$
			} else {
				buf.append("\n-synthetic access emulation: IGNORE"); //$NON-NLS-1$
			}
		}
		if ((errorThreshold & NonExternalizedString) != 0){
			buf.append("\n-non externalized string: ERROR"); //$NON-NLS-1$
		} else {
			if ((warningThreshold & NonExternalizedString) != 0){
				buf.append("\n-non externalized string: WARNING"); //$NON-NLS-1$
			} else {
				buf.append("\n-non externalized string: IGNORE"); //$NON-NLS-1$
			}
		}
		switch(targetJDK){
			case JDK1_1 :
				buf.append("\n-target JDK: 1.1"); //$NON-NLS-1$
				break;
			case JDK1_2 :
				buf.append("\n-target JDK: 1.2"); //$NON-NLS-1$
				break;
			case JDK1_3 :
				buf.append("\n-target JDK: 1.3"); //$NON-NLS-1$
				break;
			case JDK1_4 :
				buf.append("\n-target JDK: 1.4"); //$NON-NLS-1$
				break;
		}
		switch(complianceLevel){
			case JDK1_1 :
				buf.append("\n-compliance JDK: 1.1"); //$NON-NLS-1$
				break;
			case JDK1_2 :
				buf.append("\n-compliance JDK: 1.2"); //$NON-NLS-1$
				break;
			case JDK1_3 :
				buf.append("\n-compliance JDK: 1.3"); //$NON-NLS-1$
				break;
			case JDK1_4 :
				buf.append("\n-compliance JDK: 1.4"); //$NON-NLS-1$
				break;
		}
		if (isPrivateConstructorAccessChangingVisibility){
			buf.append("\n-private constructor access emulation: extra argument"); //$NON-NLS-1$
		} else {
			buf.append("\n-private constructor access emulation: make default access"); //$NON-NLS-1$
		}
		buf.append("\n-verbose : " + (verbose ? "ON" : "OFF")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
		buf.append("\n-produce reference info : " + (produceReferenceInfo ? "ON" : "OFF")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
		buf.append("\n-parse literal expressions as constants : " + (parseLiteralExpressionsAsConstants ? "ON" : "OFF")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
		buf.append("\n-runtime exception name for compile error : " + runtimeExceptionNameForCompileError); //$NON-NLS-1$
		buf.append("\n-encoding : " + (defaultEncoding == null ? "<default>" : defaultEncoding)); //$NON-NLS-1$ //$NON-NLS-2$
		return buf.toString();
	}

