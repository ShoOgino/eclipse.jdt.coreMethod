	public static long warningTokenToIrritant(String warningToken) {
		if (warningToken == null || warningToken.length() == 0) return 0;
		switch (warningToken.charAt(0)) {
			case 'a' :
				if ("all".equals(warningToken)) //$NON-NLS-1$
					return 0xFFFFFFFFFFFFFFFFl; // suppress all warnings
				if ("assertIdentifier".equals(warningToken)) //$NON-NLS-1$
					return AssertUsedAsAnIdentifier;
				break;
			case 'b' :
				if ("boxing".equals(warningToken)) //$NON-NLS-1$
					return Autoboxing;
				break;
			case 'c' :
				if ("constructorName".equals(warningToken)) //$NON-NLS-1$
					return MethodWithConstructorName;
				if ("conditionAssign".equals(warningToken)) //$NON-NLS-1$
					return AccidentalBooleanAssign;
				if ("charConcat".equals(warningToken)) //$NON-NLS-1$
					return NoImplicitStringConversion;
				break;
			case 'd' :
				if ("deprecation".equals(warningToken)) //$NON-NLS-1$
					return UsingDeprecatedAPI;
				if ("dep-ann".equals(warningToken)) //$NON-NLS-1$
					return MissingDeprecatedAnnotation;
				break;
			case 'e' :
				if ("emptyBlock".equals(warningToken)) //$NON-NLS-1$
					return UndocumentedEmptyBlock;
				if ("enumIdentifier".equals(warningToken)) //$NON-NLS-1$
					return EnumUsedAsAnIdentifier;
				if ("enumSwitch".equals(warningToken)) //$NON-NLS-1$
					return IncompleteEnumSwitch;
				break;
			case 'f' :
				if ("fieldHiding".equals(warningToken)) //$NON-NLS-1$
					return FieldHiding;
				if ("finally".equals(warningToken)) //$NON-NLS-1$
					return FinallyBlockNotCompleting;
				if ("finalBound".equals(warningToken)) //$NON-NLS-1$
					return FinalParameterBound;
				break;
			case 'i' :
				if ("intfNonInherited".equals(warningToken)) //$NON-NLS-1$
					return IncompatibleNonInheritedInterfaceMethod;
				if ("indirectStatic".equals(warningToken)) //$NON-NLS-1$
					return IndirectStaticAccess;
				if ("intfAnnotation".equals(warningToken)) //$NON-NLS-1$
					return AnnotationSuperInterface;
				break;
			case 'j' :
				if ("javadoc".equals(warningToken)) //$NON-NLS-1$
					return MissingJavadocComments | MissingJavadocTags | InvalidJavadoc;
				break;
			case 'l' :
				if ("localHiding".equals(warningToken)) //$NON-NLS-1$
					return LocalVariableHiding;
				break;
			case 'm' :
				if ("maskedCatchBlock".equals(warningToken)) //$NON-NLS-1$
					return MaskedCatchBlock;
				break;
			case 'n' :
				if ("nls".equals(warningToken)) //$NON-NLS-1$
					return NonExternalizedString;
				if ("noEffectAssign".equals(warningToken)) //$NON-NLS-1$
					return NoEffectAssignment;
				if ("null".equals(warningToken)) //$NON-NLS-1$
					return NullReference;
				break;
			case 'o' :
				if ("over-ann".equals(warningToken)) //$NON-NLS-1$
					return MissingOverrideAnnotation;
				break;
			case 'p' :
				if ("pkgDefaultMethod".equals(warningToken)) //$NON-NLS-1$
					return OverriddenPackageDefaultMethod;
				break;
			case 'r' :
				if ("restricted".equals(warningToken)) //$NON-NLS-1$
					return ForbiddenReference | DiscouragedReference;
				break;
			case 's' :
				if ("syntheticAccess".equals(warningToken)) //$NON-NLS-1$
					return AccessEmulation;
				if ("staticReceiver".equals(warningToken)) //$NON-NLS-1$
					return NonStaticAccessToStatic;
				if ("serial".equals(warningToken)) //$NON-NLS-1$
					return MissingSerialVersion;
				if ("semicolon".equals(warningToken)) //$NON-NLS-1$
					return EmptyStatement;
				break;
			case 't' :
				if ("typeHiding".equals(warningToken)) //$NON-NLS-1$
					return TypeParameterHiding;
				break;
			case 'u' :
				if ("unusedLocal".equals(warningToken)) //$NON-NLS-1$
					return UnusedLocalVariable;
				if ("unusedArgument".equals(warningToken)) //$NON-NLS-1$
					return UnusedArgument;
				if ("unchecked".equals(warningToken)) //$NON-NLS-1$
					return UncheckedTypeOperation;
				if ("unusedImport".equals(warningToken)) //$NON-NLS-1$
					return UnusedImport;
				if ("unusedPrivate".equals(warningToken)) //$NON-NLS-1$
					return UnusedPrivateMember;
				if ("unqualifiedField".equals(warningToken)) //$NON-NLS-1$
					return UnqualifiedFieldAccess;
				if ("unusedThrown".equals(warningToken)) //$NON-NLS-1$
					return UnusedDeclaredThrownException;
				if ("uselessTypeCheck".equals(warningToken)) //$NON-NLS-1$
					return UnnecessaryTypeCheck;
				if ("unnecessaryElse".equals(warningToken)) //$NON-NLS-1$
					return UnnecessaryElse;
				break;
			case 'v' :
				if ("varargs".equals(warningToken)) //$NON-NLS-1$
					return VarargsArgumentNeedCast;
				break;
			case 'w' :
				if ("warningToken".equals(warningToken)) //$NON-NLS-1$
					return UnhandledWarningToken;
				break;
		}
		return 0;
	}

