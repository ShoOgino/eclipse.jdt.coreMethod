/**
 * Change the value of the option corresponding to the option number
 *
 * @param optionNumber <CODE>int</CODE>
 * @param setting.getCurrentValueIndex() <CODE>int</CODE>
 */
void setOption(ConfigurableOption setting) {
	
	switch (setting.getID()) {
		case 1 : // Local variable table attribute
			if (setting.getCurrentValueIndex() == 0) {
				// set the debug flag with Vars.
				produceDebugAttributes |= Vars;
			} else {
				produceDebugAttributes &= ~Vars;
			}
			break;
		case 2 : // Line number attribute
			if (setting.getCurrentValueIndex() == 0) {
				// set the debug flag with Lines
				produceDebugAttributes |= Lines;
			} else {
				produceDebugAttributes &= ~Lines;
			}
			break;
		case 3 : // source file attribute
			if (setting.getCurrentValueIndex() == 0) {
				// set the debug flag with Source.
				produceDebugAttributes |= Source;
			} else {
				produceDebugAttributes &= ~Source;
			}
			break;
		case 4 : // preserveAllLocals flag
			preserveAllLocalVariables(setting.getCurrentValueIndex() == 0);
			break;
		case 5 : // unreachable code reported as error
			handleUnreachableCodeAsError(setting.getCurrentValueIndex() == 0);
			break;
		case 6 : // invalid import
			handleImportProblemAsError(setting.getCurrentValueIndex() == 0);
			break;
		case 7 : // methods with constructor name
			handleMethodWithConstructorNameAsWarning(setting.getCurrentValueIndex() == 0);
			break;
		case 8 : // overridden package default method
			handleOverriddenPackageDefaultMethodAsWarning(setting.getCurrentValueIndex() == 0);
			break;
		case 9 : // use of deprecated API
			handleDeprecationUseAsWarning(setting.getCurrentValueIndex() == 0);
			break;
		case 10 : // catch block hidden by another one
			handleMaskedCatchBlockAsWarning(setting.getCurrentValueIndex() == 0);
			break;
		case 11 : // local variable not used
			handleUnusedLocalVariableAsWarning(setting.getCurrentValueIndex() == 0);
			break;
		case 12 : // argument not used
			handleUnusedArgumentAsWarning(setting.getCurrentValueIndex() == 0);
			break;
		case 13 : // temporary warning
			if (setting.getCurrentValueIndex() == 0) {
				warningThreshold |= TemporaryWarning;
			}
			break;
		case 14 : // target JDK
			setTargetJDK(setting.getCurrentValueIndex() == 0 ? JDK1_1 : JDK1_2);
			break;
		case 15: // synthetic access emulation
			handleAccessEmulationAsWarning(setting.getCurrentValueIndex() == 0);
			break;
		case 16: // non externalized string literal
			handleNonExternalizedStringLiteralAsWarning(setting.getCurrentValueIndex() == 0);
			break;
		case 17: // assertion mode
			setAssertMode(setting.getCurrentValueIndex() == 0);
			break;
		case 18: // warn on assert identifier
			handleAssertIdentifierAsWarning(setting.getCurrentValueIndex() == 0);
			break;
	}
}

