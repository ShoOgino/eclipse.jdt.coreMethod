/**
 * Change the value of the option corresponding to the option ID
 */
void setOption(ConfigurableOption setting) {
	String componentName = Compiler.class.getName();
	
	String optionID = setting.getID();
	
	if(optionID.equals(componentName + ".debugLocalVariable"/*nonNLS*/)){
		if (setting.getValueIndex() == 0) {
			// set the debug flag with Vars.
			produceDebugAttributes |= Vars;
		} else {
			produceDebugAttributes &= ~Vars;
		}
	} else if(optionID.equals(componentName + ".debugLineNumber"/*nonNLS*/)) {
		if (setting.getValueIndex() == 0) {
			// set the debug flag with Lines
			produceDebugAttributes |= Lines;
		} else {
			produceDebugAttributes &= ~Lines;
		}
	}else if(optionID.equals(componentName + ".debugSourceFile"/*nonNLS*/)) {
		if (setting.getValueIndex() == 0) {
			// set the debug flag with Source.
			produceDebugAttributes |= Source;
		} else {
			produceDebugAttributes &= ~Source;
		}
	}else if(optionID.equals(componentName + ".codegenUnusedLocal"/*nonNLS*/)){
		preserveAllLocalVariables(setting.getValueIndex() == 0);
	}else if(optionID.equals(componentName + ".problemUnreachableCode"/*nonNLS*/)){
		switch(setting.getValueIndex()){
			case 0 : 
				setUnreachableCodeSeverity(Error);
				break;
			case 1 :
				setUnreachableCodeSeverity(Warning);
				break;
			case 2 :
				setUnreachableCodeSeverity(Ignore);
				break;
		}
	}else if(optionID.equals(componentName + ".problemInvalidImport"/*nonNLS*/)){
		switch(setting.getValueIndex()){
			case 0 : 
				setImportProblemSeverity(Error);
				break;
			case 1 :
				setImportProblemSeverity(Warning);
				break;
			case 2 :
				setImportProblemSeverity(Ignore);
				break;
		}
	}else if(optionID.equals(componentName + ".codegenTargetPlatform"/*nonNLS*/)){
		setTargetJDK(setting.getValueIndex() == 0 ? JDK1_1 : JDK1_2);
	}else if(optionID.equals(componentName + ".problemMethodWithConstructorName"/*nonNLS*/)){
		switch(setting.getValueIndex()){
			case 0 : 
				setMethodWithConstructorNameSeverity(Error);
				break;
			case 1 :
				setMethodWithConstructorNameSeverity(Warning);
				break;
			case 2 :
				setMethodWithConstructorNameSeverity(Ignore);
				break;
		}
	}else if(optionID.equals(componentName + ".problemOverridingPackageDefaultMethod"/*nonNLS*/)){
		switch(setting.getValueIndex()){
			case 0 : 
				setOverriddenPackageDefaultMethodSeverity(Error);
				break;
			case 1 :
				setOverriddenPackageDefaultMethodSeverity(Warning);
				break;
			case 2 :
				setOverriddenPackageDefaultMethodSeverity(Ignore);
				break;
		}
	}else if(optionID.equals(componentName + ".problemDeprecation"/*nonNLS*/)){
		switch(setting.getValueIndex()){
			case 0 : 
				setDeprecationUseSeverity(Error);
				break;
			case 1 :
				setDeprecationUseSeverity(Warning);
				break;
			case 2 :
				setDeprecationUseSeverity(Ignore);
				break;
		}
	}else if(optionID.equals(componentName + ".problemHiddenCatchBlock"/*nonNLS*/)){
		switch(setting.getValueIndex()){
			case 0 : 
				setMaskedCatchBlockSeverity(Error);
				break;
			case 1 :
				setMaskedCatchBlockSeverity(Warning);
				break;
			case 2 :
				setMaskedCatchBlockSeverity(Ignore);
				break;
		}
	}else if(optionID.equals(componentName + ".problemUnusedLocal"/*nonNLS*/)){
		switch(setting.getValueIndex()){
			case 0 : 
				setUnusedLocalVariableSeverity(Error);
				break;
			case 1 :
				setUnusedLocalVariableSeverity(Warning);
				break;
			case 2 :
				setUnusedLocalVariableSeverity(Ignore);
				break;
		}
	}else if(optionID.equals(componentName + ".problemUnusedParameter"/*nonNLS*/)){
		switch(setting.getValueIndex()){
			case 0 : 
				setUnusedArgumentSeverity(Error);
				break;
			case 1 :
				setUnusedArgumentSeverity(Warning);
				break;
			case 2 :
				setUnusedArgumentSeverity(Ignore);
				break;
		}
	}else if(optionID.equals(componentName + ".problemSyntheticAccessEmulation"/*nonNLS*/)){
		switch(setting.getValueIndex()){
			case 0 : 
				setAccessEmulationSeverity(Error);
				break;
			case 1 :
				setAccessEmulationSeverity(Warning);
				break;
			case 2 :
				setAccessEmulationSeverity(Ignore);
				break;
		}
	}else if(optionID.equals(componentName + ".problemNonExternalizedStringLiteral"/*nonNLS*/)){
		switch(setting.getValueIndex()){
			case 0 : 
				setNonExternalizedStringLiteralSeverity(Error);
				break;
			case 1 :
				setNonExternalizedStringLiteralSeverity(Warning);
				break;
			case 2 :
				setNonExternalizedStringLiteralSeverity(Ignore);
				break;
		}
	}else if(optionID.equals(componentName + ".problemAssertIdentifier"/*nonNLS*/)){
		switch(setting.getValueIndex()){
			case 0 : 
				setAssertIdentifierSeverity(Error);
				break;
			case 1 :
				setAssertIdentifierSeverity(Warning);
				break;
			case 2 :
				setAssertIdentifierSeverity(Ignore);
				break;
		}
	}else if(optionID.equals(componentName + ".source"/*nonNLS*/)){
		setAssertMode(setting.getValueIndex() == 1);
	}
}

