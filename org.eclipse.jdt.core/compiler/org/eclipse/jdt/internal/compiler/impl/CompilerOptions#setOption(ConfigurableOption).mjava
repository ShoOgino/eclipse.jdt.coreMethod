/**
 * Change the value of the option corresponding to the option ID
 */
void setOption(ConfigurableOption setting) {
	String componentName = Compiler.class.getName();
	
	String optionID = setting.getID();
	
	if(optionID.equals(OPTION_LocalVariableAttribute)){
		if (setting.getValueIndex() == 0) {
			// set the debug flag with Vars.
			produceDebugAttributes |= Vars;
		} else {
			produceDebugAttributes &= ~Vars;
		}
	} else if(optionID.equals(OPTION_LineNumberAttribute)) {
		if (setting.getValueIndex() == 0) {
			// set the debug flag with Lines
			produceDebugAttributes |= Lines;
		} else {
			produceDebugAttributes &= ~Lines;
		}
	}else if(optionID.equals(OPTION_SourceFileAttribute)) {
		if (setting.getValueIndex() == 0) {
			// set the debug flag with Source.
			produceDebugAttributes |= Source;
		} else {
			produceDebugAttributes &= ~Source;
		}
	}else if(optionID.equals(OPTION_PreserveUnusedLocal)){
		preserveAllLocalVariables(setting.getValueIndex() == 0);
	}else if(optionID.equals(OPTION_ReportUnreachableCode)){
		switch(setting.getValueIndex()){
			case 0 : 
				setUnreachableCodeSeverity(Error);
				break;
			case 1 :
				setUnreachableCodeSeverity(Warning);
				break;
			case 2 : 
				setUnreachableCodeSeverity(Ignore);
				break;
		}
	}else if(optionID.equals(OPTION_ReportInvalidImport)){
		switch(setting.getValueIndex()){
			case 0 : 
				setImportProblemSeverity(Error);
				break;
			case 1 :
				setImportProblemSeverity(Warning);
				break;
			case 2 :
				setImportProblemSeverity(Ignore);
				break;
		}
	}else if(optionID.equals(OPTION_TargetPlatform)){
		setTargetJDK(setting.getValueIndex() == 0 ? JDK1_1 : JDK1_2);
	}else if(optionID.equals(OPTION_ReportMethodWithConstructorName)){
		switch(setting.getValueIndex()){
			case 0 : 
				setMethodWithConstructorNameSeverity(Error);
				break;
			case 1 :
				setMethodWithConstructorNameSeverity(Warning);
				break;
			case 2 :
				setMethodWithConstructorNameSeverity(Ignore);
				break;
		}
	}else if(optionID.equals(OPTION_ReportOverridingPackageDefaultMethod)){
		switch(setting.getValueIndex()){
			case 0 : 
				setOverriddenPackageDefaultMethodSeverity(Error);
				break;
			case 1 :
				setOverriddenPackageDefaultMethodSeverity(Warning);
				break;
			case 2 :
				setOverriddenPackageDefaultMethodSeverity(Ignore);
				break;
		}
	}else if(optionID.equals(OPTION_ReportDeprecation)){
		switch(setting.getValueIndex()){
			case 0 : 
				setDeprecationUseSeverity(Error);
				break;
			case 1 :
				setDeprecationUseSeverity(Warning);
				break;
			case 2 :
				setDeprecationUseSeverity(Ignore);
				break;
		}
	}else if(optionID.equals(OPTION_ReportHiddenCatchBlock)){
		switch(setting.getValueIndex()){
			case 0 : 
				setMaskedCatchBlockSeverity(Error);
				break;
			case 1 :
				setMaskedCatchBlockSeverity(Warning);
				break;
			case 2 :
				setMaskedCatchBlockSeverity(Ignore);
				break;
		}
	}else if(optionID.equals(OPTION_ReportUnusedLocal)){
		switch(setting.getValueIndex()){
			case 0 : 
				setUnusedLocalVariableSeverity(Error);
				break;
			case 1 :
				setUnusedLocalVariableSeverity(Warning);
				break;
			case 2 :
				setUnusedLocalVariableSeverity(Ignore);
				break;
		}
	}else if(optionID.equals(OPTION_ReportUnusedParameter)){
		switch(setting.getValueIndex()){
			case 0 : 
				setUnusedArgumentSeverity(Error);
				break;
			case 1 :
				setUnusedArgumentSeverity(Warning);
				break;
			case 2 :
				setUnusedArgumentSeverity(Ignore);
				break;
		}
	}else if(optionID.equals(OPTION_ReportSyntheticAccessEmulation)){
		switch(setting.getValueIndex()){
			case 0 : 
				setAccessEmulationSeverity(Error);
				break;
			case 1 :
				setAccessEmulationSeverity(Warning);
				break;
			case 2 :
				setAccessEmulationSeverity(Ignore);
				break;
		}
	}else if(optionID.equals(OPTION_ReportNonExternalizedStringLiteral)){
		switch(setting.getValueIndex()){
			case 0 : 
				setNonExternalizedStringLiteralSeverity(Error);
				break;
			case 1 :
				setNonExternalizedStringLiteralSeverity(Warning);
				break;
			case 2 :
				setNonExternalizedStringLiteralSeverity(Ignore);
				break;
		}
	}else if(optionID.equals(OPTION_ReportAssertIdentifier)){
		switch(setting.getValueIndex()){
			case 0 : 
				setAssertIdentifierSeverity(Error);
				break;
			case 1 :
				setAssertIdentifierSeverity(Warning);
				break;
			case 2 :
				setAssertIdentifierSeverity(Ignore);
				break;
		}
	}else if(optionID.equals(OPTION_Source)){
		setAssertMode(setting.getValueIndex() == 1);
	}
}

