/**
 * Change the value of the option corresponding to the option ID
 */
void setOption(ConfigurableOption setting) {
	String componentName = Compiler.class.getName();
	
	String optionID = setting.getID();
	
	if(optionID.equals(componentName + ".debugLocalVariable"/*nonNLS*/)){
		if (setting.getValueIndex() == 0) {
			// set the debug flag with Vars.
			produceDebugAttributes |= Vars;
		} else {
			produceDebugAttributes &= ~Vars;
		}
	} else if(optionID.equals(componentName + ".debugLineNumber"/*nonNLS*/)) {
		if (setting.getValueIndex() == 0) {
			// set the debug flag with Lines
			produceDebugAttributes |= Lines;
		} else {
			produceDebugAttributes &= ~Lines;
		}
	}else if(optionID.equals(componentName + ".debugSourceFile"/*nonNLS*/)) {
		if (setting.getValueIndex() == 0) {
			// set the debug flag with Source.
			produceDebugAttributes |= Source;
		} else {
			produceDebugAttributes &= ~Source;
		}
	}else if(optionID.equals(componentName + ".codegenUnusedLocal"/*nonNLS*/)){
		preserveAllLocalVariables(setting.getValueIndex() == 0);
	}else if(optionID.equals(componentName + ".problemUnreachableCode"/*nonNLS*/)){
		switch(setting.getValueIndex()){
			case 0 : 
				setUnreachableCodeSeverity(ERROR);
				break;
			case 1 :
				setUnreachableCodeSeverity(WARNING);
				break;
			case 2 :
				setUnreachableCodeSeverity(IGNORE);
				break;
		}
	}else if(optionID.equals(componentName + ".problemInvalidImport"/*nonNLS*/)){
		switch(setting.getValueIndex()){
			case 0 : 
				setImportProblemSeverity(ERROR);
				break;
			case 1 :
				setImportProblemSeverity(WARNING);
				break;
			case 2 :
				setImportProblemSeverity(IGNORE);
				break;
		}
	}else if(optionID.equals(componentName + ".codegenTargetPlatform"/*nonNLS*/)){
		setTargetJDK(setting.getValueIndex() == 0 ? JDK1_1 : JDK1_2);
	}else if(optionID.equals(componentName + ".problemMethodWithConstructorName"/*nonNLS*/)){
		switch(setting.getValueIndex()){
			case 0 : 
				setMethodWithConstructorNameSeverity(ERROR);
				break;
			case 1 :
				setMethodWithConstructorNameSeverity(WARNING);
				break;
			case 2 :
				setMethodWithConstructorNameSeverity(IGNORE);
				break;
		}
	}else if(optionID.equals(componentName + ".problemOverridingPackageDefaultMethod"/*nonNLS*/)){
		switch(setting.getValueIndex()){
			case 0 : 
				setOverriddenPackageDefaultMethodSeverity(ERROR);
				break;
			case 1 :
				setOverriddenPackageDefaultMethodSeverity(WARNING);
				break;
			case 2 :
				setOverriddenPackageDefaultMethodSeverity(IGNORE);
				break;
		}
	}else if(optionID.equals(componentName + ".problemDeprecation"/*nonNLS*/)){
		switch(setting.getValueIndex()){
			case 0 : 
				setDeprecationUseSeverity(ERROR);
				break;
			case 1 :
				setDeprecationUseSeverity(WARNING);
				break;
			case 2 :
				setDeprecationUseSeverity(IGNORE);
				break;
		}
	}else if(optionID.equals(componentName + ".problemHiddenCatchBlock"/*nonNLS*/)){
		switch(setting.getValueIndex()){
			case 0 : 
				setMaskedCatchBlockSeverity(ERROR);
				break;
			case 1 :
				setMaskedCatchBlockSeverity(WARNING);
				break;
			case 2 :
				setMaskedCatchBlockSeverity(IGNORE);
				break;
		}
	}else if(optionID.equals(componentName + ".problemUnusedLocal"/*nonNLS*/)){
		switch(setting.getValueIndex()){
			case 0 : 
				setUnusedLocalVariableSeverity(ERROR);
				break;
			case 1 :
				setUnusedLocalVariableSeverity(WARNING);
				break;
			case 2 :
				setUnusedLocalVariableSeverity(IGNORE);
				break;
		}
	}else if(optionID.equals(componentName + ".problemUnusedParameter"/*nonNLS*/)){
		switch(setting.getValueIndex()){
			case 0 : 
				setUnusedArgumentSeverity(ERROR);
				break;
			case 1 :
				setUnusedArgumentSeverity(WARNING);
				break;
			case 2 :
				setUnusedArgumentSeverity(IGNORE);
				break;
		}
	}else if(optionID.equals(componentName + ".problemSyntheticAccessEmulation"/*nonNLS*/)){
		switch(setting.getValueIndex()){
			case 0 : 
				setAccessEmulationSeverity(ERROR);
				break;
			case 1 :
				setAccessEmulationSeverity(WARNING);
				break;
			case 2 :
				setAccessEmulationSeverity(IGNORE);
				break;
		}
	}else if(optionID.equals(componentName + ".problemNonExternalizedStringLiteral"/*nonNLS*/)){
		switch(setting.getValueIndex()){
			case 0 : 
				setNonExternalizedStringLiteralSeverity(ERROR);
				break;
			case 1 :
				setNonExternalizedStringLiteralSeverity(WARNING);
				break;
			case 2 :
				setNonExternalizedStringLiteralSeverity(IGNORE);
				break;
		}
	}else if(optionID.equals(componentName + ".problemAssertIdentifier"/*nonNLS*/)){
		switch(setting.getValueIndex()){
			case 0 : 
				setAssertIdentifierSeverity(ERROR);
				break;
			case 1 :
				setAssertIdentifierSeverity(WARNING);
				break;
			case 2 :
				setAssertIdentifierSeverity(IGNORE);
				break;
		}
	}else if(optionID.equals(componentName + ".source"/*nonNLS*/)){
		setAssertMode(setting.getValueIndex() == 1);
	}
}

