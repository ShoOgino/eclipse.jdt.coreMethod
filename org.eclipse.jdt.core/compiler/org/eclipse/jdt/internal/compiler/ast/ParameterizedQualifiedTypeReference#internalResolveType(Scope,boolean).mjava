    /*
     * No need to check for reference to raw type per construction
     */
	private TypeBinding internalResolveType(Scope scope, boolean checkBounds) {

		// handle the error here
		this.constant = NotAConstant;
		if (this.didResolve) { // is a shared type reference which was already resolved
			if (this.resolvedType != null && !this.resolvedType.isValidBinding())
				return null; // already reported error
			return this.resolvedType;
		} 
	    this.didResolve = true;
	    Binding binding = scope.getPackage(this.tokens);
	    if (binding != null && !binding.isValidBinding()) {
	    	this.resolvedType = (ReferenceBinding) binding;
			reportInvalidType(scope);
			return null;
		}

	    PackageBinding packageBinding = binding == null ? null : (PackageBinding) binding;
	    boolean isClassScope = scope.kind == Scope.CLASS_SCOPE;
		boolean typeIsConsistent = true;
		ReferenceBinding qualifiedType = null;
	    for (int i = packageBinding == null ? 0 : packageBinding.compoundName.length, max = this.tokens.length; i < max; i++) {
			findNextTypeBinding(i, scope, packageBinding);
			if (!(this.resolvedType.isValidBinding())) {
				reportInvalidType(scope);
				return null;
			}
			ReferenceBinding currentType = (ReferenceBinding) this.resolvedType;
			if (qualifiedType == null) {
				qualifiedType = currentType.enclosingType(); // if member type
				if (qualifiedType != null && currentType.isStatic() && (qualifiedType.isGenericType() || qualifiedType.isParameterizedType())) {
					qualifiedType = scope.environment().createRawType((ReferenceBinding)qualifiedType.erasure(), qualifiedType.enclosingType());
				}
			}				
			if (typeIsConsistent && currentType.isStatic() && qualifiedType != null && (qualifiedType.isParameterizedType() || qualifiedType.isGenericType())) {
				scope.problemReporter().staticMemberOfParameterizedType(this, scope.createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType));
				typeIsConsistent = false;
			}			
			// check generic and arity
		    TypeReference[] args = this.typeArguments[i];
		    if (args != null) {
				int argLength = args.length;
				TypeBinding[] argTypes = new TypeBinding[argLength];
				boolean argHasError = false;
				for (int j = 0; j < argLength; j++) {
				    TypeReference arg = args[j];
				    TypeBinding argType = isClassScope
						? arg.resolveTypeArgument((ClassScope) scope, currentType, j)
						: arg.resolveTypeArgument((BlockScope) scope, currentType, j);
					if (argType == null) {
						argHasError = true;
					} else {
						argTypes[j] = argType;
					}			    
				}
				if (argHasError) return null;
// TODO (philippe)	if ((this.bits & ASTNode.IsSuperType) != 0)
				if (isClassScope)
					if (((ClassScope) scope).detectHierarchyCycle(currentType, this, argTypes))
						return null;

			    TypeVariableBinding[] typeVariables = currentType.typeVariables();
				if (typeVariables == NoTypeVariables) { // check generic
					scope.problemReporter().nonGenericTypeCannotBeParameterized(this, currentType, argTypes);
					return null;
				} else if (argLength != typeVariables.length) { // check arity
					scope.problemReporter().incorrectArityForParameterizedType(this, currentType, argTypes);
					return null;
				}
				// check parameterizing non-static member type of raw type
				if (typeIsConsistent && !currentType.isStatic() && qualifiedType != null && qualifiedType.isRawType()) {
					scope.problemReporter().rawMemberTypeCannotBeParameterized(
							this, scope.environment().createRawType((ReferenceBinding)currentType.erasure(), qualifiedType), argTypes);
					typeIsConsistent = false;				
				}
				// if generic type X<T> is referred to as parameterized X<T>, then answer itself
				boolean isIdentical = (qualifiedType == null) || (qualifiedType instanceof SourceTypeBinding);
				if (isIdentical) {
				    for (int j = 0; j < argLength; j++) {
						if (typeVariables[j] != argTypes[j]) {
							isIdentical = false;
						    break;
						}
					}
				}
			    if (isIdentical) {
			    	qualifiedType = (ReferenceBinding) currentType.erasure();
			    } else {
					ParameterizedTypeBinding parameterizedType = scope.createParameterizedType((ReferenceBinding)currentType.erasure(), argTypes, qualifiedType);
					// check argument type compatibility
					if (checkBounds) // otherwise will do it in Scope.connectTypeVariables() or generic method resolution
						for (int j = 0; j < argLength; j++)
						    if (!typeVariables[j].boundCheck(parameterizedType, argTypes[j]))
								scope.problemReporter().typeMismatchError(argTypes[j], typeVariables[j], currentType, args[j]);
					qualifiedType = parameterizedType;
			    }
		    } else {
// TODO (philippe)	if ((this.bits & ASTNode.IsSuperType) != 0)
				if (isClassScope)
					if (((ClassScope) scope).detectHierarchyCycle(currentType, this, null))
						return null;
				if (currentType.isGenericType()) {
	   			    if (typeIsConsistent && qualifiedType != null && qualifiedType.isParameterizedType()) {
						scope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType));
						typeIsConsistent = false;
					}
	   			    qualifiedType = scope.environment().createRawType(currentType, qualifiedType); // raw type
				} else {
					qualifiedType = (qualifiedType != null && qualifiedType.isParameterizedType())
													? scope.createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType)
													: currentType;
				}
			}
		}
		this.resolvedType = qualifiedType;
		if (isTypeUseDeprecated(this.resolvedType, scope))
			reportDeprecatedType(scope);
		// array type ?
		if (this.dimensions > 0) {
			if (dimensions > 255)
				scope.problemReporter().tooManyDimensions(this);
			this.resolvedType = scope.createArrayType(this.resolvedType, dimensions);
		}
		return this.resolvedType;
	}

