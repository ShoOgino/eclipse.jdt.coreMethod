	/**
	 * Bytecode generation for a <clinit> method
	 *
	 * @param classScope org.eclipse.jdt.internal.compiler.lookup.ClassScope
	 * @param classFile org.eclipse.jdt.internal.compiler.codegen.ClassFile
	 */
	private void generateCode(ClassScope classScope, ClassFile classFile, int clinitOffset) {
			ConstantPool constantPool = classFile.constantPool;
			int constantPoolOffset = constantPool.currentOffset;
			int constantPoolIndex = constantPool.currentIndex;
			classFile.generateMethodInfoHeaderForClinit();
			int codeAttributeOffset = classFile.contentsOffset;
			classFile.generateCodeAttributeHeader();
			CodeStream codeStream = classFile.codeStream;
			this.resolve(classScope);

			codeStream.reset(this, classFile);
			TypeDeclaration declaringType = classScope.referenceContext;

			// initialize local positions - including initializer scope.
			scope.computeLocalVariablePositions(0, codeStream); // should not be necessary
			MethodScope staticInitializerScope = declaringType.staticInitializerScope;
			staticInitializerScope.computeLocalVariablePositions(0, codeStream);
			// offset by the argument size

			// 1.4 feature
			// This has to be done before any other initialization
			if (this.assertionSyntheticFieldBinding != null) {
				// generate code related to the activation of assertion for this class
				codeStream.generateClassLiteralAccessForType(
					classScope.enclosingSourceType(),
					classLiteralSyntheticField);
				codeStream.invokeJavaLangClassDesiredAssertionStatus();
				Label falseLabel = new Label(codeStream);
				codeStream.ifne(falseLabel);
				codeStream.iconst_1();
				Label jumpLabel = new Label(codeStream);
				codeStream.goto_(jumpLabel);
				falseLabel.place();
				codeStream.iconst_0();
				jumpLabel.place();
				codeStream.putstatic(this.assertionSyntheticFieldBinding);
			}
			// generate initializers
			if (declaringType.fields != null) {
				for (int i = 0, max = declaringType.fields.length; i < max; i++) {
					FieldDeclaration fieldDecl;
					if ((fieldDecl = declaringType.fields[i]).isStatic()) {
						fieldDecl.generateCode(staticInitializerScope, codeStream);
					}
				}
			}
			if (codeStream.position == 0) {
				// do not need to output a Clinit if no bytecodes
				// so we reset the offset inside the byte array contents.
				classFile.contentsOffset = clinitOffset;
				// like we don't addd a method we need to undo the increment on the method count
				classFile.methodCount--;
				// reset the constant pool to its state before the clinit
				constantPool.resetForClinit(constantPoolIndex, constantPoolOffset);
			} else {
				if (needFreeReturn) {
					int oldPosition = codeStream.position;
					codeStream.return_();
					codeStream.updateLocalVariablesAttribute(oldPosition);
				}
				// Record the end of the clinit: point to the declaration of the class
				codeStream.recordPositionsFrom(0, declaringType);
				classFile.completeCodeAttributeForClinit(codeAttributeOffset);
			}
	}

