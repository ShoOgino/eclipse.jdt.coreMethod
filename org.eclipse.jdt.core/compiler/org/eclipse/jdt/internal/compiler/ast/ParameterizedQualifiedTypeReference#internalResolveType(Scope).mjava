    /*
     * No need to check for reference to raw type per construction
     */
	private TypeBinding internalResolveType(Scope scope) {

		// handle the error here
		this.constant = NotAConstant;
		if (this.didResolve) { // is a shared type reference which was already resolved
			if (this.resolvedType != null && !this.resolvedType.isValidBinding())
				return null; // already reported error
			return this.resolvedType;
		} 
	    this.didResolve = true;
		ReferenceBinding qualifiedType = null;
	    boolean isClassScope = scope.kind == Scope.CLASS_SCOPE;
		for (int i = 0, max = this.tokens.length; i < max; i++) {
		    ReferenceBinding currentType;
		    if (i == 0) {
		        // isolate first fragment
				while (this.typeArguments[i] == null) i++;
				try {
					this.resolvedType = scope.getType(this.tokens, i+1);
				} catch (AbortCompilation e) {
					e.updateContext(this, scope.referenceCompilationUnit().compilationResult);
					throw e;
				}
				if (!(this.resolvedType.isValidBinding())) {
					reportInvalidType(scope);
					return null;
				}
				currentType = (ReferenceBinding) this.resolvedType;
				if (currentType.isMemberType()) { // check raw enclosing type
				    ArrayList enclosingTypes = new ArrayList();
				    boolean hasGenericEnclosing = false;
				    for (ReferenceBinding enclosing = currentType.enclosingType(); enclosing != null; enclosing = enclosing.enclosingType()) {
				        enclosingTypes.add(enclosing);
				        if (enclosing.isGenericType()) hasGenericEnclosing = true;
				    }
				    if (hasGenericEnclosing) {
				        for (int j = enclosingTypes.size() - 1; j >= 0; j--) {
				            ReferenceBinding enclosing = (ReferenceBinding)enclosingTypes.get(j);
				            if (enclosing.isGenericType()) {
					            qualifiedType = scope.environment().createRawType(enclosing, qualifiedType); // raw type
				            }
				        }
				    }
				}
		    } else {
			    this.resolvedType = currentType = scope.getMemberType(this.tokens[i], (ReferenceBinding)qualifiedType.erasure());
				if (!(this.resolvedType.isValidBinding())) {
					reportInvalidType(scope);
					return null;
				}
		    }
		    // check generic and arity
		    TypeReference[] args = this.typeArguments[i];
		    if (args != null) {
				int argLength = args.length;
				TypeBinding[] argTypes = new TypeBinding[argLength];
				boolean argHasError = false;
				for (int j = 0; j < argLength; j++) {
				    TypeReference arg = args[j];
				    TypeBinding argType = isClassScope
						? arg.resolveTypeArgument((ClassScope) scope, currentType, j)
						: arg.resolveTypeArgument((BlockScope) scope, currentType, j);
					if (argType == null) {
						argHasError = true;
					} else {
						argTypes[j] = argType;
					}			    
				}
				if (argHasError) return null;
// TODO (philippe)	if ((this.bits & ASTNode.IsSuperType) != 0)
				if (isClassScope)
					if (((ClassScope) scope).detectCycle(currentType, this, argTypes))
						return null;

			    TypeVariableBinding[] typeVariables = currentType.typeVariables();
				if (typeVariables == NoTypeVariables) { // check generic
					scope.problemReporter().nonGenericTypeCannotBeParameterized(this, currentType, argTypes);
					return null;
				} else if (argLength != typeVariables.length) { // check arity
					scope.problemReporter().incorrectArityForParameterizedType(this, currentType, argTypes);
					return null;
				}			
				ParameterizedTypeBinding parameterizedType = scope.createParameterizedType(currentType, argTypes, qualifiedType);
				// check argument type compatibility
				for (int j = 0; j < argLength; j++) {
				    TypeBinding argType = argTypes[j];
				    if (!typeVariables[j].boundCheck(parameterizedType, argType)) {
						scope.problemReporter().typeMismatchError(argType, typeVariables[j], currentType, args[j]);
				    }
				}
				qualifiedType = parameterizedType;
		    } else {
// TODO (philippe)	if ((this.bits & ASTNode.IsSuperType) != 0)
				if (isClassScope)
					if (((ClassScope) scope).detectCycle(currentType, this, null))
						return null;

				if (currentType.isGenericType()) { // check raw type
   			    	qualifiedType = scope.environment().createRawType(currentType, qualifiedType); // raw type
   			    } else if (qualifiedType != null && (qualifiedType.isParameterizedType() || qualifiedType.isRawType())) {
   			    	qualifiedType = scope.createParameterizedType(currentType, null, qualifiedType);
   			    }
			}
		}
		this.resolvedType = qualifiedType;
		if (isTypeUseDeprecated(this.resolvedType, scope)) {
			reportDeprecatedType(scope);
		}		
		// array type ?
		if (this.dimensions > 0) {
			if (dimensions > 255) {
				scope.problemReporter().tooManyDimensions(this);
			}
			this.resolvedType = scope.createArrayType(qualifiedType, dimensions);
		}
		return this.resolvedType;
	}

