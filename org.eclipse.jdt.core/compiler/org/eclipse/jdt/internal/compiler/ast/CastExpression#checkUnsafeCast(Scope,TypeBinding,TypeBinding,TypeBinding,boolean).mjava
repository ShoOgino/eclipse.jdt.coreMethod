	public boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing) {
		if (match == castType) {
			if (!isNarrowing && castType == this.resolvedType.leafComponentType()) { // do not tag as unnecessary when recursing through upper bounds
				tagAsUnnecessaryCast(scope, castType);
			}
			return true;
		}
		if (match != null && (
				castType.isBoundParameterizedType() 
				|| castType.isGenericType() 
				|| 	expressionType.isBoundParameterizedType() 
				|| expressionType.isGenericType())) {
			
			if (match.isProvablyDistinctFrom(isNarrowing ? expressionType : castType, 0)) {
				return false; 
			}
			if (isNarrowing ? !expressionType.isEquivalentTo(match) : !match.isEquivalentTo(castType)) {
				this.bits |= UnsafeCastMask;
				return true;
			}
			if ((castType.tagBits & TagBits.HasDirectWildcard) == 0) {
				if ((!match.isParameterizedType() && !match.isGenericType())
						|| expressionType.isRawType()) {
					this.bits |= UnsafeCastMask;
					return true;
				}
			}
		} else if (isNarrowing) {
			TypeBinding leafType = castType.leafComponentType();
			if (expressionType.id == T_JavaLangObject && castType.isArrayType() && (leafType.isBoundParameterizedType() || leafType.isGenericType())) {
				this.bits |= UnsafeCastMask;
				return true;
			}
			if (leafType.isTypeVariable()) {
				this.bits |= UnsafeCastMask;
				return true;
			}
		}
		if (!isNarrowing && castType == this.resolvedType.leafComponentType()) { // do not tag as unnecessary when recursing through upper bounds
			tagAsUnnecessaryCast(scope, castType);
		}
		return true;
	}	

