public TypeBinding resolveType(BlockScope scope) {
	constant = NotAConstant;
	TypeBinding expressionTb = expression.resolveType(scope);
	TypeBinding checkTb = type.resolveType(scope);
	if (expressionTb == null || checkTb == null)
		return null;

	//===== by grammatical construction, the next test is always false =====
	//if (checkTb.isBaseType()) {
	//	scope.problemReporter().invalidTypeError(type,checkTb);
	//	return null;
	//}

	if (!areTypesCastCompatible(scope, checkTb, expressionTb)) {
		scope.problemReporter().notCompatibleTypesError(this, expressionTb, checkTb);
		return null;
	}
	this.typeBinding = BooleanBinding;
	return BooleanBinding;
}

