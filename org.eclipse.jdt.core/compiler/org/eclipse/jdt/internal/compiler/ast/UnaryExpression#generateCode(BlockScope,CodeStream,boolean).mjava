	/**
	 * Code generation for an unary operation
	 *
	 * @param currentScope org.eclipse.jdt.internal.compiler.lookup.BlockScope
	 * @param codeStream org.eclipse.jdt.internal.compiler.codegen.CodeStream
	 * @param valueRequired boolean
	 */
	public void generateCode(
		BlockScope currentScope,
		CodeStream codeStream,
		boolean valueRequired) {
		int pc = codeStream.position;
		Label falseLabel, endifLabel;
		if (constant != Constant.NotAConstant) {
			// inlined value
			if (valueRequired) {
				codeStream.generateConstant(constant, implicitConversion);
			}
			codeStream.recordPositionsFrom(pc, this.sourceStart);
			return;
		}
		switch ((bits & OperatorMASK) >> OperatorSHIFT) {
			case NOT :
				switch (expression.implicitConversion >> 4) /* runtime type */ {
					case T_boolean :
						// ! <boolean>
						// Generate code for the condition
						expression.generateOptimizedBoolean(
							currentScope,
							codeStream,
							null,
							(falseLabel = new Label(codeStream)),
							valueRequired);
						if (valueRequired) {
							codeStream.iconst_0();
							codeStream.goto_(endifLabel = new Label(codeStream));
							codeStream.decrStackSize(1);
							falseLabel.place();
							if (valueRequired)
								codeStream.iconst_1();
							endifLabel.place();
						}
						break;
				}
				break;
			case TWIDDLE :
				switch (expression.implicitConversion >> 4 /* runtime */
					) {
					case T_int :
						// ~int
						expression.generateCode(currentScope, codeStream, valueRequired);
						if (valueRequired) {
							codeStream.iconst_m1();
							codeStream.ixor();
						}
						break;
					case T_long :
						expression.generateCode(currentScope, codeStream, valueRequired);
						if (valueRequired) {
							codeStream.ldc2_w(-1L);
							codeStream.lxor();
						}
				}
				break;
			case MINUS :
				// - <num>
				if (constant != NotAConstant) {
					if (valueRequired) {
						switch (expression.implicitConversion >> 4 /* runtime */
							) {
							case T_int :
								codeStream.generateInlinedValue(constant.intValue() * -1);
								break;
							case T_float :
								codeStream.generateInlinedValue(constant.floatValue() * -1.0f);
								break;
							case T_long :
								codeStream.generateInlinedValue(constant.longValue() * -1L);
								break;
							case T_double :
								codeStream.generateInlinedValue(constant.doubleValue() * -1.0);
						}
					}
				} else {
					expression.generateCode(currentScope, codeStream, valueRequired);
					if (valueRequired) {
						switch (expression.implicitConversion >> 4 /* runtime type */
							) {
							case T_int :
								codeStream.ineg();
								break;
							case T_float :
								codeStream.fneg();
								break;
							case T_long :
								codeStream.lneg();
								break;
							case T_double :
								codeStream.dneg();
						}
					}
				}
				break;
			case PLUS :
				expression.generateCode(currentScope, codeStream, valueRequired);
		}
		if (valueRequired) {
			codeStream.generateImplicitConversion(implicitConversion);
		}
		codeStream.recordPositionsFrom(pc, this.sourceStart);
	}

