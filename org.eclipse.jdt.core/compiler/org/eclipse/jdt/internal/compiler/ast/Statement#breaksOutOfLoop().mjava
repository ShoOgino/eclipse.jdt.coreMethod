public boolean breaksOutOfLoop() {
	class LoopVisitor extends ASTVisitor {
		Statement loopBody;
		boolean breaks;
		public LoopVisitor(Statement statement) {
			this.loopBody = statement;
			this.breaks = false;
		}
		public boolean visit(TypeDeclaration type, BlockScope skope) {
			return false;
		}
		public boolean visit(TypeDeclaration type, ClassScope skope) {
			return false;
		}
		public boolean visit(LambdaExpression lambda, BlockScope skope) {
			return false;
		}
		public boolean visit(WhileStatement whileStatement, BlockScope skope) {
			return false;
		}
		public boolean visit(DoStatement doStatement, BlockScope skope) {
			return false;
		}
		public boolean visit(ForeachStatement foreachStatement, BlockScope skope) {
			return false;
		}
		public boolean visit(ForStatement forStatement, BlockScope skope) {
			return false;
		}
		public boolean visit(SwitchStatement switchStatement, BlockScope skope) {
			return false;
		}
		public boolean visit(BreakStatement breakStatement, BlockScope skope) {
	    	this.breaks = true;
	    	return false;
	    }
		public boolean breaksOutOfLoop() {
			this.loopBody.traverse(this, null);
			return this.breaks;
		}
	}
	return new LoopVisitor(this).breaksOutOfLoop();
}

