@Override
public void resolve(BlockScope scope) {
	if (this.condition.containsPatternVariable()) {
		this.condition.collectPatternVariablesToScope(null, scope);
		LocalVariableBinding[] patternVariablesInFalseScope = this.condition.getPatternVariablesWhenFalse();
		TypeBinding type = this.condition.resolveTypeExpecting(scope, TypeBinding.BOOLEAN);
		this.condition.computeConversion(scope, type, type);
		if (this.action != null) {
			this.action.resolve(scope);
			this.action.injectPatternVariablesIfApplicable(patternVariablesInFalseScope, scope,
					(statement) -> { return !statement.breaksOut(null);});
		}
	} else {
		TypeBinding type = this.condition.resolveTypeExpecting(scope, TypeBinding.BOOLEAN);
		this.condition.computeConversion(scope, type, type);
		if (this.action != null)
			this.action.resolve(scope);
	}
}

