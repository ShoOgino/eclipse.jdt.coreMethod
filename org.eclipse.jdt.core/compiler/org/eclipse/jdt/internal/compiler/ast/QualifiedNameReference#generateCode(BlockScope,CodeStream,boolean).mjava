	public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {		
		int pc = codeStream.position;
		if (constant != Constant.NotAConstant) {
			if (valueRequired) {
				codeStream.generateConstant(constant, implicitConversion);
			}
		} else {
			FieldBinding lastFieldBinding = generateReadSequence(currentScope, codeStream);
			if (lastFieldBinding != null) {
				boolean isStatic = lastFieldBinding.isStatic();
				Constant fieldConstant = lastFieldBinding.constant();
				if (fieldConstant != Constant.NotAConstant) {
					if (!isStatic){
						codeStream.invokeObjectGetClass();
						codeStream.pop();
					}
					if (valueRequired) { // inline the last field constant
						codeStream.generateConstant(fieldConstant, implicitConversion);
					}
				} else {
					boolean isFirst = lastFieldBinding == this.binding 
													&& (this.indexOfFirstFieldBinding == 1 || lastFieldBinding.declaringClass == currentScope.enclosingReceiverType())
													&& this.otherBindings == null; // could be dup: next.next.next
					TypeBinding requiredGenericCast = getGenericCast(this.otherCodegenBindings == null ? 0 : this.otherCodegenBindings.length);
					if (valueRequired  
							|| (!isFirst && currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4)
							|| ((implicitConversion & TypeIds.UNBOXING) != 0)
							|| requiredGenericCast != null) {
						int lastFieldPc = codeStream.position;
						if (lastFieldBinding.declaringClass == null) { // array length
							codeStream.arraylength();
							if (valueRequired) {
								codeStream.generateImplicitConversion(implicitConversion);
							} else {
								// could occur if !valueRequired but compliance >= 1.4
								codeStream.pop();
							}
						} else {
							SyntheticMethodBinding accessor =
								syntheticReadAccessors == null
									? null
									: syntheticReadAccessors[syntheticReadAccessors.length - 1];
							if (accessor == null) {
								if (isStatic) {
									codeStream.getstatic(lastFieldBinding);
								} else {
									codeStream.getfield(lastFieldBinding);
								}
							} else {
								codeStream.invokestatic(accessor);
							}
							if (requiredGenericCast != null) codeStream.checkcast(requiredGenericCast);
							if (valueRequired) {
								codeStream.generateImplicitConversion(implicitConversion);
							} else {
								boolean isUnboxing = (implicitConversion & TypeIds.UNBOXING) != 0;
								// conversion only generated if unboxing
								if (isUnboxing) codeStream.generateImplicitConversion(implicitConversion);
								switch (isUnboxing ? postConversionType(currentScope).id : lastFieldBinding.type.id) {
									case T_long :
									case T_double :
										codeStream.pop2();
										break;
									default :
										codeStream.pop();
								}
							}
						}
						
						int fieldPosition = (int) (this.sourcePositions[this.sourcePositions.length - 1] >>> 32);
						codeStream.recordPositionsFrom(lastFieldPc, fieldPosition);
					} else {
						if (!isStatic){
							codeStream.invokeObjectGetClass(); // perform null check
							codeStream.pop();
						}
					}									
				}
			}
		}
		codeStream.recordPositionsFrom(pc, this.sourceStart);
	}

