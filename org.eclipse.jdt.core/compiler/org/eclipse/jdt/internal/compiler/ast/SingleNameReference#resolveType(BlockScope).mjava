	public TypeBinding resolveType(BlockScope scope) {
		// for code gen, harm the restrictiveFlag 	

		if ((binding = scope.getBinding(token, bits & RestrictiveFlagMASK, this))
			.isValidBinding()) {
			switch (bits & RestrictiveFlagMASK) {
				case VARIABLE : // =========only variable============
				case VARIABLE | TYPE : //====both variable and type============
					if (binding instanceof VariableBinding) {
						VariableBinding vb = (VariableBinding) binding;
						if (binding instanceof LocalVariableBinding) {
							bits &= ~RestrictiveFlagMASK; // clear bits
							bits |= LOCAL;
							constant = vb.constant;
							if ((!vb.isFinal()) && ((bits & DepthMASK) != 0))
								scope.problemReporter().cannotReferToNonFinalOuterLocal(
									(LocalVariableBinding) vb,
									this);
							return vb.type;
						}
						// a field
						return checkFieldAccess(scope);
					}

					// thus it was a type
					bits &= ~RestrictiveFlagMASK; // clear bits
					bits |= TYPE;
				case TYPE : //========only type==============
					constant = Constant.NotAConstant;
					//deprecated test
					if (isTypeUseDeprecated((TypeBinding) binding, scope))
						scope.problemReporter().deprecatedType((TypeBinding) binding, this);
					return (TypeBinding) binding;
			}
		}

		// error scenarii
		return this.reportError(scope);
	}

