	public void generateCompoundAssignment(
		BlockScope currentScope,
		CodeStream codeStream,
		Expression expression,
		int operator,
		int assignmentImplicitConversion,
		boolean valueRequired) {
		boolean isStatic;
		receiver.generateCode(
			currentScope,
			codeStream,
			!(isStatic = binding.isStatic()));
		if (isStatic) {
			if (syntheticReadAccessor == null) {
				codeStream.getstatic(binding);
			} else {
				codeStream.invokestatic(syntheticReadAccessor);
			}
		} else {
			codeStream.dup();
			if (syntheticReadAccessor == null) {
				codeStream.getfield(binding);
			} else {
				codeStream.invokestatic(syntheticReadAccessor);
			}
		}
		int operationTypeID;
		if ((operationTypeID = implicitConversion >> 4) == T_String) {
			codeStream.generateStringAppend(currentScope, null, expression);
		} else {
			// promote the array reference to the suitable operation type
			codeStream.generateImplicitConversion(implicitConversion);
			// generate the increment value (will by itself  be promoted to the operation value)
			if (expression == IntLiteral.One) { // prefix operation
				codeStream.generateConstant(expression.constant, implicitConversion);
			} else {
				expression.generateCode(currentScope, codeStream, true);
			}
			// perform the operation
			codeStream.sendOperator(operator, operationTypeID);
			// cast the value back to the array reference type
			codeStream.generateImplicitConversion(assignmentImplicitConversion);
		}
		fieldStore(codeStream, binding, syntheticWriteAccessor, valueRequired);
	}

