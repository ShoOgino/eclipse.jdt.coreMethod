	/*
	 * No need to emulate access to protected fields since not implicitly accessed
	 */
	public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo) {

		if (!flowInfo.isReachable()) return;
		if (binding.isPrivate()) {
			if ((currentScope.enclosingSourceType() != binding.declaringClass)
				&& (binding.constant == NotAConstant)) {
				syntheticReadAccessor =
					((SourceTypeBinding) binding.declaringClass).addSyntheticMethod(binding, true);
				currentScope.problemReporter().needToEmulateFieldReadAccess(binding, this);
				return;
			}

		} else if (receiver instanceof QualifiedSuperReference) { // qualified super

			// qualified super need emulation always
			SourceTypeBinding destinationType =
				(SourceTypeBinding) (((QualifiedSuperReference) receiver)
					.currentCompatibleType);
			syntheticReadAccessor = destinationType.addSyntheticMethod(binding, true);
			currentScope.problemReporter().needToEmulateFieldReadAccess(binding, this);
			return;

		} else if (binding.isProtected()) {

			SourceTypeBinding enclosingSourceType;
			if (((bits & DepthMASK) != 0)
				&& binding.declaringClass.getPackage()
					!= (enclosingSourceType = currentScope.enclosingSourceType()).getPackage()) {

				SourceTypeBinding currentCompatibleType =
					(SourceTypeBinding) enclosingSourceType.enclosingTypeAt(
						(bits & DepthMASK) >> DepthSHIFT);
				syntheticReadAccessor = currentCompatibleType.addSyntheticMethod(binding, true);
				currentScope.problemReporter().needToEmulateFieldReadAccess(binding, this);
				return;
			}
		}
		// if the binding declaring class is not visible, need special action
		// for runtime compatibility on 1.2 VMs : change the declaring class of the binding
		// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type
		if (binding.declaringClass != this.receiverType
			&& !this.receiverType.isArrayType()
			&& binding.declaringClass != null // array.length
			&& binding.constant == NotAConstant
			&& ((currentScope.environment().options.targetJDK >= CompilerOptions.JDK1_2
				&& binding.declaringClass.id != T_Object)
			//no change for Object fields (in case there was)
				|| !binding.declaringClass.canBeSeenBy(currentScope))) {
			this.codegenBinding =
				currentScope.enclosingSourceType().getUpdatedFieldBinding(
					binding,
					(ReferenceBinding) this.receiverType);
		}
	}

