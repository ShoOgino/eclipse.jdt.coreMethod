	public FlowInfo analyseCode(
		BlockScope currentScope,
		FlowContext flowContext,
		FlowInfo flowInfo) {

		// here requires to generate a sequence of finally blocks invocations depending corresponding
		// to each of the traversed try statements, so that execution will terminate properly.

		// lookup the label, this should answer the returnContext
		FlowContext targetContext;
		if (label == null) {
			targetContext = flowContext.getTargetContextForDefaultContinue();
		} else {
			targetContext = flowContext.getTargetContextForContinueLabel(label);
		}
		if (targetContext == null) {
			if (label == null) {
				currentScope.problemReporter().invalidContinue(this);
			} else {
				currentScope.problemReporter().undefinedLabel(this); // need to improve
			}
		} else {
			if (targetContext == FlowContext.NotContinuableContext) {
				currentScope.problemReporter().invalidContinue(this);
				return FlowInfo.DeadEnd;
			}
			targetLabel = targetContext.continueLabel();
			targetContext.recordContinueFrom(flowInfo);
			FlowContext traversedContext = flowContext;
			int subIndex = 0, maxSub = 5;
			subroutines = new AstNode[maxSub];
			while (true) {
				AstNode sub;
				if ((sub = traversedContext.subRoutine()) != null) {
					if (subIndex == maxSub) {
						System.arraycopy(
							subroutines,
							0,
							(subroutines = new AstNode[maxSub *= 2]),
							0,
							subIndex);
						// grow
					}
					subroutines[subIndex++] = sub;
					if (sub.cannotReturn()) {
						break;
					}
				}
				// remember the initialization at this
				// point for dealing with blank final variables.
				traversedContext.recordReturnFrom(flowInfo.unconditionalInits());

				if (traversedContext == targetContext) {
					break;
				} else {
					traversedContext = traversedContext.parent;
				}
			}
			// resize subroutines
			if (subIndex != maxSub) {
				System.arraycopy(
					subroutines,
					0,
					(subroutines = new AstNode[subIndex]),
					0,
					subIndex);
			}
		}
		return FlowInfo.DeadEnd;
	}

