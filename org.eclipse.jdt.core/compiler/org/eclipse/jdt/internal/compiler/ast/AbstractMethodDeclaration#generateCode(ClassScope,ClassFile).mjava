/**
 * Bytecode generation for a method
 */
public void generateCode(ClassScope classScope, ClassFile classFile) {
	int problemResetPC = 0;
	// for each method we start the code generate with wideMode equals to false
	// in the code Stream.
	classFile.codeStream.wideMode = false;
	if (ignoreFurtherInvestigation) {
		if (this.binding == null)
			return; // Handle methods with invalid signature or duplicates
		int problemsLength;
		IProblem[] problems = scope.referenceCompilationUnit().compilationResult.getProblems();
		IProblem[] problemsCopy = new IProblem[problemsLength = problems.length];
		System.arraycopy(problems, 0, problemsCopy, 0, problemsLength);
		classFile.addProblemMethod(this, binding, problemsCopy);
		return;
	}
	try {
		problemResetPC = classFile.contentsOffset;
		this.internalGenerateCode(classScope, classFile);
	} catch (AbortMethod e) {
		if (e.compilationResult == null) {
			try {
				if (statements != null) {
					for (int i = 0, max = statements.length; i < max; i++)
						statements[i].resetStateForCodeGeneration();
				}
				classFile.contentsOffset = problemResetPC;
				classFile.methodCount--;
				classFile.codeStream.wideMode = true;
				problemResetPC = classFile.contentsOffset;
				this.internalGenerateCode(classScope, classFile);
			} catch(AbortMethod e2) {
				int problemsLength;
				IProblem[] problems = scope.referenceCompilationUnit().compilationResult.getProblems();
				IProblem[] problemsCopy = new IProblem[problemsLength = problems.length];
				System.arraycopy(problems, 0, problemsCopy, 0, problemsLength);
				classFile.addProblemMethod(this, binding, problemsCopy, problemResetPC);
			}
		} else {
			int problemsLength;
			IProblem[] problems = scope.referenceCompilationUnit().compilationResult.getProblems();
			IProblem[] problemsCopy = new IProblem[problemsLength = problems.length];
			System.arraycopy(problems, 0, problemsCopy, 0, problemsLength);
			classFile.addProblemMethod(this, binding, problemsCopy, problemResetPC);
		}
	}
}

