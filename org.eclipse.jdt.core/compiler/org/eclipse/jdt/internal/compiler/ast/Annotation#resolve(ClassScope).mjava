	/*
	 * Resolve type annotation while a class scope
	 */
	public void resolve(ClassScope classScope) {

		// @param tags
		int paramTagsSize = parameters == null ? 0 : parameters.length;
		for (int i = 0; i < paramTagsSize; i++) {
			AnnotationArgument param = parameters[i];
			classScope.problemReporter().annotationUnexpectedTag(param.declarationSourceStart, param.declarationSourceEnd);
		}

		// @return tags
		if (this.returnStatement != null) {
			classScope.problemReporter().annotationUnexpectedTag(this.returnStatement.sourceStart, this.returnStatement.sourceEnd);
		}

		// @throws/@exception tags
		int throwsTagsNbre = thrownExceptions == null ? 0 : thrownExceptions.length;
		for (int i = 0; i < throwsTagsNbre; i++) {
			TypeReference typeRef = thrownExceptions[i];
			int start, end;
			if (typeRef instanceof AnnotationSingleTypeReference) {
				AnnotationSingleTypeReference singleRef = (AnnotationSingleTypeReference) typeRef;
				start = singleRef.tagSourceStart;
				end = singleRef.tagSourceEnd;
			} else if (typeRef instanceof AnnotationQualifiedTypeReference) {
				AnnotationQualifiedTypeReference singleRef = (AnnotationQualifiedTypeReference) typeRef;
				start = singleRef.tagSourceStart;
				end = singleRef.tagSourceEnd;
			} else {
				start = typeRef.sourceStart;
				end = typeRef.sourceEnd;
			}
			classScope.problemReporter().annotationUnexpectedTag(start, end);
		}

		// @see tags
		int seeTagsNbre = references == null ? 0 : references.length;
		for (int i = 0; i < seeTagsNbre; i++) {
			references[i].resolveType(classScope);
		}
	}

