	@Override
	public boolean isPolyExpression() throws UnsupportedOperationException {
		
		if (!this.use18specifics)
			return false;
		
		if (this.isPolyExpression)
			return true;

		if (this.expressionContext != ASSIGNMENT_CONTEXT && this.expressionContext != INVOCATION_CONTEXT)
			return false;
		
		if (this.originalValueIfTrueType == null || this.originalValueIfFalseType == null) // resolution error.
			return false;
		
		if (this.valueIfTrue.isPolyExpression() || this.valueIfFalse.isPolyExpression())
			return true;
		
		// "... unless both operands produce primitives (or boxed primitives)":
		if (this.originalValueIfTrueType.isBaseType() || (this.originalValueIfTrueType.id >= TypeIds.T_JavaLangByte && this.originalValueIfTrueType.id <= TypeIds.T_JavaLangBoolean)) {
			if (this.originalValueIfFalseType.isBaseType() || (this.originalValueIfFalseType.id >= TypeIds.T_JavaLangByte && this.originalValueIfFalseType.id <= TypeIds.T_JavaLangBoolean))
				return false;
		}
		
		// clause around generic method's return type prior to instantiation needs double check. 
		return this.isPolyExpression = true;
	}

