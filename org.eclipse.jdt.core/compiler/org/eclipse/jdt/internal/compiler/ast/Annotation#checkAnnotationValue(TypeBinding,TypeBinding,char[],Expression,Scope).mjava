	public static void checkAnnotationValue(TypeBinding requiredType, TypeBinding annotationType, char[] memberName, Expression memberValue, Scope scope) {
		if (requiredType == null) 
			return;
		if (memberValue == null) 
			return;
		
		// annotation methods can only return base types, String, Class, enum type, annotation types and arrays of these
		checkAnnotationMethodType: {
			TypeBinding leafType = requiredType.leafComponentType();
			switch (leafType.erasure().id) {
				case T_byte :
				case T_short :
				case T_char :
				case T_int :
				case T_long :
				case T_float :
				case T_double :
				case T_boolean :
				case T_JavaLangString :
					if (memberValue instanceof ArrayInitializer) {
						ArrayInitializer initializer = (ArrayInitializer) memberValue;
						final Expression[] expressions = initializer.expressions;
						if (expressions != null) {
							for (int i =0, max = expressions.length; i < max; i++) {
								if (expressions[i].constant == NotAConstant) {
									scope.problemReporter().annotationValueMustBeConstant(annotationType, memberName, memberValue);
								}
							}
						}
					} else if (memberValue.constant == NotAConstant) {
						scope.problemReporter().annotationValueMustBeConstant(annotationType, memberName, memberValue);
					}
					break checkAnnotationMethodType;
				case T_JavaLangClass :
					if (!(memberValue instanceof ClassLiteralAccess)) {
						scope.problemReporter().annotationValueMustBeClassLiteral(annotationType, memberName, memberValue);
					}
					break checkAnnotationMethodType;
			}
			if (leafType.isEnum()) {
				break checkAnnotationMethodType;
			}
			if (leafType.isAnnotationType()) {
				break checkAnnotationMethodType;
			}
		}
	}

