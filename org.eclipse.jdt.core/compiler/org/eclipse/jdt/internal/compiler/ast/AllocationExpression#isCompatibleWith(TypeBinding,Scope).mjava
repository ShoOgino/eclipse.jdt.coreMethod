public boolean isCompatibleWith(TypeBinding targetType, final Scope scope) {
	if (this.argumentsHaveErrors || this.binding == null || !this.binding.isValidBinding() || targetType == null || scope == null)
		return false;
	TypeBinding allocationType = this.resolvedType;
	if (isPolyExpression()) {
		TypeBinding originalExpectedType = this.typeExpected;
		try {
			this.typeExpected = targetType;
			TypeBinding [] inferredTypes = inferElidedTypes(scope);
			if (inferredTypes == null)
				return false;
			allocationType = scope.environment().createParameterizedType(((ParameterizedTypeBinding) this.resolvedType).genericType(), inferredTypes, this.resolvedType.enclosingType());
		} finally {
			this.typeExpected = originalExpectedType;
		}
	}
	return allocationType != null && allocationType.isCompatibleWith(targetType, scope);
}

