/**
 * Boolean generation for &&
 */
public void generateOptimizedConditionalAnd(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired) {

	int pc = codeStream.position;
	Constant condConst;
	if ((condConst = left.conditionalConstant()) != NotAConstant) {
		if (condConst.booleanValue() == true) {
			// <something equivalent to true> && x
			left.generateOptimizedBoolean(currentScope, codeStream, trueLabel, falseLabel, false);
			if (rightInitStateIndex != -1){
				codeStream.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);
			}
			if ((bits & OnlyValueRequiredMASK) != 0){
				right.generateCode(currentScope, codeStream, valueRequired);
			} else {
				right.generateOptimizedBoolean(currentScope, codeStream, trueLabel, falseLabel, valueRequired);
			}
		} else {
			// <something equivalent to false> && x
			left.generateOptimizedBoolean(currentScope, codeStream, trueLabel, falseLabel, false);
			if (valueRequired) {
				if ((bits & OnlyValueRequiredMASK) != 0) {
					codeStream.iconst_0();
				} else {
					if (falseLabel != null) {
						// implicit falling through the TRUE case
						codeStream.goto_(falseLabel);
					}
				}
			}
		}
		codeStream.recordPositionsFrom(pc, this);
		if (mergedInitStateIndex != -1){
			codeStream.removeNotDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);
		}
		return;
	}
	if ((condConst = right.conditionalConstant()) != NotAConstant) {
		if (condConst.booleanValue() == true) {
			// x && <something equivalent to true>
			if ((bits & OnlyValueRequiredMASK) != 0){
				left.generateCode(currentScope, codeStream, valueRequired);
			} else {
				left.generateOptimizedBoolean(currentScope, codeStream, trueLabel, falseLabel, valueRequired);
			}
			if (rightInitStateIndex != -1){
				codeStream.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);
			}
			right.generateOptimizedBoolean(currentScope, codeStream, trueLabel, falseLabel, false);
		} else {
			// x && <something equivalent to false>
			left.generateOptimizedBoolean(currentScope, codeStream, trueLabel, falseLabel, false);
			if (rightInitStateIndex != -1){
				codeStream.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);
			}
			right.generateOptimizedBoolean(currentScope, codeStream, trueLabel, falseLabel, false);
			if (valueRequired) {
				if ((bits & OnlyValueRequiredMASK) != 0) {
					codeStream.iconst_0();
				} else {
					if (falseLabel != null) {
						// implicit falling through the TRUE case
						codeStream.goto_(falseLabel);
					}
				}
			}
		}
		codeStream.recordPositionsFrom(pc, this);
		if (mergedInitStateIndex != -1){
			codeStream.removeNotDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);
		}
		return;
	}
	// default case
	if (falseLabel == null) {
		if (trueLabel != null) {
			// implicit falling through the FALSE case
			Label internalFalseLabel = new Label(codeStream);
			left.generateOptimizedBoolean(currentScope, codeStream, null, internalFalseLabel, true);
			if (rightInitStateIndex != -1){
				codeStream.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);
			}
			right.generateOptimizedBoolean(currentScope, codeStream, trueLabel, null, valueRequired);
			internalFalseLabel.place();
		}
	} else {
		// implicit falling through the TRUE case
		if (trueLabel == null) {
			left.generateOptimizedBoolean(currentScope, codeStream, null, falseLabel, true);
			if (rightInitStateIndex != -1){
				codeStream.addDefinitelyAssignedVariables(currentScope, rightInitStateIndex);
			}
			right.generateOptimizedBoolean(currentScope, codeStream, null, falseLabel, valueRequired);
		} else {
			// no implicit fall through TRUE/FALSE --> should never occur
		}
	}
	codeStream.recordPositionsFrom(pc, this);
	if (mergedInitStateIndex != -1){
		codeStream.removeNotDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);
	}
}

