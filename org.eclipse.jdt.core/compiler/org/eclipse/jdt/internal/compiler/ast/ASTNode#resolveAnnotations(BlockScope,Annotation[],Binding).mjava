	/**
	 * Resolve annotations, and check duplicates, answers combined tagBits 
	 * for recognized standard annotations
	 */
	public void resolveAnnotations(BlockScope scope, Annotation[] annotations, Binding recipient) {
		if (recipient != null) {
			switch (recipient.kind()) {
				case Binding.PACKAGE :
					// TODO (philippe) need support for package annotations
					break;
				case Binding.TYPE :
				case Binding.GENERIC_TYPE :
				case Binding.TYPE_PARAMETER :
					ReferenceBinding type = (ReferenceBinding) recipient;
					if ((type.tagBits & TagBits.AnnotationResolved) != 0) return;
					type.tagBits |= TagBits.AnnotationResolved;
					break;
				case Binding.METHOD :
					MethodBinding method = (MethodBinding) recipient;
					if ((method.tagBits & TagBits.AnnotationResolved) != 0) return;
					method.tagBits |= TagBits.AnnotationResolved;
					break;
				case Binding.FIELD :
					FieldBinding field = (FieldBinding) recipient;
					if ((field.tagBits & TagBits.AnnotationResolved) != 0) return;
					field.tagBits |= TagBits.AnnotationResolved;
					break;
				case Binding.LOCAL :
					LocalVariableBinding local = (LocalVariableBinding) recipient;
					if ((local.tagBits & TagBits.AnnotationResolved) != 0) return;
					local.tagBits |= TagBits.AnnotationResolved;
					break;
			}			
		}
		if (annotations == null) 
			return;
		int length = annotations.length;
		TypeBinding[] annotationTypes = new TypeBinding[length];
		for (int i = 0; i < length; i++) {
			Annotation annotation = annotations[i];
			annotation.recipient = recipient;
			annotationTypes[i] = annotation.resolveType(scope);
		}
		// check duplicate annotations
		for (int i = 0; i < length; i++) {
			TypeBinding annotationType = annotationTypes[i];
			if (annotationType == null) continue;
			boolean foundDuplicate = false;
			for (int j = i+1; j < length; j++) {
				if (annotationTypes[j] == annotationType) {
					foundDuplicate = true;
					annotationTypes[j] = null; // report it only once
					scope.problemReporter().duplicateAnnotation(annotations[j]);
				}
			}
			if (foundDuplicate) {
				scope.problemReporter().duplicateAnnotation(annotations[i]);
			}
		}
	}

