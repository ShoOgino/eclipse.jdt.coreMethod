	private boolean internalVisit(Annotation annotation) {
		AnnotationContext annotationContext = null;
		if (annotation.isRuntimeTypeInvisible()) {
			annotationContext = new AnnotationContext(annotation, this.typeReference, this.targetType, this.primaryAnnotations, AnnotationContext.INVISIBLE, this.annotationsOnDimensions);
		} else if (annotation.isRuntimeTypeVisible()) {
			annotationContext = new AnnotationContext(annotation, this.typeReference, this.targetType, this.primaryAnnotations, AnnotationContext.VISIBLE, this.annotationsOnDimensions);
		}
		if (annotationContext != null) {
			annotationContext.wildcard = this.currentWildcard;
			switch(this.targetType) {
				case AnnotationTargetTypeConstants.THROWS :
				case AnnotationTargetTypeConstants.CLASS_TYPE_PARAMETER :
				case AnnotationTargetTypeConstants.METHOD_TYPE_PARAMETER :
				case AnnotationTargetTypeConstants.METHOD_PARAMETER :
				case AnnotationTargetTypeConstants.TYPE_CAST :
				case AnnotationTargetTypeConstants.TYPE_INSTANCEOF :
				case AnnotationTargetTypeConstants.OBJECT_CREATION :
				case AnnotationTargetTypeConstants.CLASS_LITERAL :
				case AnnotationTargetTypeConstants.CLASS_EXTENDS_IMPLEMENTS:
					annotationContext.info = this.info;
					break;
				case AnnotationTargetTypeConstants.CLASS_TYPE_PARAMETER_BOUND :
				case AnnotationTargetTypeConstants.METHOD_TYPE_PARAMETER_BOUND :
					annotationContext.info2 = this.info2;
					annotationContext.info = this.info;
					break;
				case AnnotationTargetTypeConstants.LOCAL_VARIABLE :
					annotationContext.variableBinding = this.localVariable;
					break;
				case AnnotationTargetTypeConstants.TYPE_ARGUMENT_METHOD_CALL :
				case AnnotationTargetTypeConstants.TYPE_ARGUMENT_CONSTRUCTOR_CALL :
					annotationContext.info2 = this.info2;
					annotationContext.info = this.info;
			}
			this.annotationContexts.add(annotationContext);
		}
		return true;
	}

