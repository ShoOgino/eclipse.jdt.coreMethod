/**
 * Code generation for a array allocation expression
 */
public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {

	int pc = codeStream.position;
	ArrayBinding arrayBinding;
	
	if (initializer != null) {
		initializer.generateCode(currentScope, codeStream, valueRequired);
		return;
	}

	int nonNullDimensionsLength = 0;
	for (int i = 0, max = dimensions.length; i < max; i++)
		if (dimensions[i] != null) { 
				dimensions[i].generateCode(currentScope, codeStream, true);
				nonNullDimensionsLength++;
		}
		
	// Generate a sequence of bytecodes corresponding to an array allocation
	if ((arrayTb.isArrayType()) && ((arrayBinding = (ArrayBinding) arrayTb).dimensions == 1)) {
		// Mono-dimensional array
		codeStream.newArray(currentScope, arrayBinding);
	} else {
		// Multi-dimensional array
		codeStream.multianewarray(arrayTb, nonNullDimensionsLength);
	}
 
	if (valueRequired) {
		codeStream.generateImplicitConversion(implicitConversion);
	} else {
		codeStream.pop();
	}

	codeStream.recordPositionsFrom(pc, this.sourceStart);
}

