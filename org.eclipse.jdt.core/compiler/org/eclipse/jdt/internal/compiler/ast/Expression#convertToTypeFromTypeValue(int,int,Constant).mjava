public static final boolean convertToTypeFromTypeValue(int left , int right, Constant cst){
	//true if there is no loose of information while casting.
	//right is constant's type.id

	//a faster solution would be to use combinaison of 
	//some range.........????


	/*
	org.eclipse.jdt.internal.compiler.util.Constant cst ;
	cst = org.eclipse.jdt.internal.compiler.util.Constant.fromValue((float)898565456.0) ;
	org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding.convertToTypeFromTypeValue(
	org.eclipse.jdt.internal.compiler.ast.TypeReference.T_int,
	org.eclipse.jdt.internal.compiler.ast.TypeReference.T_float,
	cst)
	*/
	
	if (left == right) return true ;
	switch(left){
		case T_char 	:	
				switch (right) {
					case T_char	: return true ;
					case T_double : return cst.doubleValue() 	== cst.charValue() ;
					case T_float  : return cst.floatValue() 	== cst.charValue() ;
					case T_int    : return cst.intValue() 	== cst.charValue() ;
					case T_short  : return cst.shortValue() 	== cst.charValue() ;
					case T_byte   : return cst.byteValue() 	== cst.charValue() ;
					case T_long   : return cst.longValue() 	== cst.charValue() ;
					default : return false ;} //boolean

		case T_float 	:	
				switch (right) {
					case T_char	: return cst.charValue() 	== cst.floatValue() ;
					case T_double : return cst.doubleValue() 	== cst.floatValue() ;
					case T_float  : return true;
					case T_int    : return cst.intValue() 	== cst.floatValue() ;
					case T_short  : return cst.shortValue() 	== cst.floatValue() ;
					case T_byte   : return cst.byteValue() 	== cst.floatValue() ;
					case T_long   : return cst.longValue() 	== cst.floatValue() ;
					default : return false ;} //boolean
	case T_double 	:	
				switch (right) {
					case T_char	: return cst.charValue() 	== cst.doubleValue() ;
					case T_double : return true ;
					case T_float  : return cst.floatValue() 	== cst.doubleValue() ;
					case T_int    : return cst.intValue() 	== cst.doubleValue() ;
					case T_short  : return cst.shortValue() 	== cst.doubleValue() ;
					case T_byte   : return cst.byteValue() 	== cst.doubleValue() ;
					case T_long   : return cst.longValue() 	== cst.doubleValue() ;
					default : return false ;} //boolean
	case T_byte 	:	
				switch (right) {
					case T_char	: return cst.charValue() 	== cst.byteValue() ;
					case T_double : return cst.doubleValue() 	== cst.byteValue() ;
					case T_float  : return cst.floatValue() 	== cst.byteValue() ;
					case T_int    : return cst.intValue() 	== cst.byteValue() ;
					case T_short  : return cst.shortValue() 	== cst.byteValue() ;
					case T_byte   : return true ; 
					case T_long   : return cst.longValue() 	== cst.byteValue() ;
					default : return false ;} //boolean
	case T_short 	:	
				switch (right) {
					case T_char	: return cst.charValue() 	== cst.shortValue() ;
					case T_double : return cst.doubleValue() 	== cst.shortValue() ;
					case T_float  : return cst.floatValue() 	== cst.shortValue() ;
					case T_int    : return cst.intValue() 	== cst.shortValue() ;
					case T_short  : return true ;
					case T_byte   : return cst.byteValue() 	== cst.shortValue() ;
					case T_long   : return cst.longValue() 	== cst.shortValue() ;
					default : return false ;} //boolean
	case T_int 	:	
				switch (right) {
					case T_char	: return cst.charValue() 	== cst.intValue() ;
					case T_double : return cst.doubleValue() 	== cst.intValue() ;
					case T_float  : return cst.floatValue() 	== cst.intValue() ;
					case T_int    : return true ; 
					case T_short  : return cst.shortValue() 	== cst.intValue() ;
					case T_byte   : return cst.byteValue() 	== cst.intValue() ;
					case T_long   : return cst.longValue() 	== cst.intValue() ;
					default : return false ;} //boolean
	case T_long 	:	
				switch (right) {
					case T_char	: return cst.charValue() 	== cst.longValue() ;
					case T_double : return cst.doubleValue() 	== cst.longValue() ;
					case T_float  : return cst.floatValue() 	== cst.longValue() ;
					case T_int    : return cst.intValue() 	== cst.longValue() ;
					case T_short  : return cst.shortValue() 	== cst.longValue() ;
					case T_byte   : return cst.byteValue() 	== cst.longValue() ;
					case T_long   : return true ;
					default : return false ;} //boolean
	default : return false ; } //boolean
}

