public boolean breaksOut() {
	class ControlStructureVisitor extends ASTVisitor {
		Statement body;
		boolean breaksOut;
		public ControlStructureVisitor(Statement statement) {
			this.body = statement;
			this.breaksOut = false;
		}
		public boolean visit(TypeDeclaration type, BlockScope skope) {
			return false;
		}
		public boolean visit(TypeDeclaration type, ClassScope skope) {
			return false;
		}
		public boolean visit(LambdaExpression lambda, BlockScope skope) {
			return false;
		}
		public boolean visit(WhileStatement whileStatement, BlockScope skope) {
			return false;
		}
		public boolean visit(DoStatement doStatement, BlockScope skope) {
			return false;
		}
		public boolean visit(ForeachStatement foreachStatement, BlockScope skope) {
			return false;
		}
		public boolean visit(ForStatement forStatement, BlockScope skope) {
			return false;
		}
		public boolean visit(SwitchStatement switchStatement, BlockScope skope) {
			return false;
		}
		public boolean visit(BreakStatement breakStatement, BlockScope skope) {
	    	this.breaksOut = true;
	    	return false;
	    }
		public boolean breaksOut() {
			this.body.traverse(this, null);
			return this.breaksOut;
		}
	}
	return new ControlStructureVisitor(this).breaksOut();
}

