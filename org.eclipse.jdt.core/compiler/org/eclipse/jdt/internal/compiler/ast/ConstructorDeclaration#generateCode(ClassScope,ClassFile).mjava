	/**
	 * Bytecode generation for a constructor
	 *
	 * @param classScope org.eclipse.jdt.internal.compiler.lookup.ClassScope
	 * @param classFile org.eclipse.jdt.internal.compiler.codegen.ClassFile
	 */
	public void generateCode(ClassScope classScope, ClassFile classFile) {
		int problemResetPC = 0;
		if (ignoreFurtherInvestigation) {
			if (this.binding == null)
				return; // Handle methods with invalid signature or duplicates
			int problemsLength;
			IProblem[] problems =
				scope.referenceCompilationUnit().compilationResult.getProblems();
			IProblem[] problemsCopy = new IProblem[problemsLength = problems.length];
			System.arraycopy(problems, 0, problemsCopy, 0, problemsLength);
			classFile.addProblemConstructor(this, binding, problemsCopy);
			return;
		}
		try {
			problemResetPC = classFile.contentsOffset;
			classFile.generateMethodInfoHeader(binding);
			int methodAttributeOffset = classFile.contentsOffset;
			int attributeNumber = classFile.generateMethodInfoAttribute(binding);
			if ((!binding.isNative()) && (!binding.isAbstract())) {
				TypeDeclaration declaringType = classScope.referenceContext;
				int codeAttributeOffset = classFile.contentsOffset;
				classFile.generateCodeAttributeHeader();
				CodeStream codeStream = classFile.codeStream;
				codeStream.reset(this, classFile);
				// initialize local positions - including initializer scope.
				ReferenceBinding declaringClass = binding.declaringClass;
				int argSize = 0;
				scope.computeLocalVariablePositions(// consider synthetic arguments if any
				argSize =
					declaringClass.isNestedType()
						? ((NestedTypeBinding) declaringClass).syntheticArgumentsOffset
						: 1,
					codeStream);
				if (arguments != null) {
					for (int i = 0, max = arguments.length; i < max; i++) {
						// arguments initialization for local variable debug attributes
						LocalVariableBinding argBinding;
						codeStream.addVisibleLocalVariable(argBinding = arguments[i].binding);
						argBinding.recordInitializationStartPC(0);
						TypeBinding argType;
						if ((argType = argBinding.type) == LongBinding || (argType == DoubleBinding)) {
							argSize += 2;
						} else {
							argSize++;
						}
					}
				}
				MethodScope initializerScope = declaringType.initializerScope;
				initializerScope.computeLocalVariablePositions(argSize, codeStream);
				// offset by the argument size (since not linked to method scope)

				// generate constructor call
				if (constructorCall != null) {
					constructorCall.generateCode(scope, codeStream);
				}
				// generate field initialization - only if not invoking another constructor call of the same class
				if ((constructorCall != null)
					&& (constructorCall.accessMode != ExplicitConstructorCall.This)) {
					// generate synthetic fields initialization
					if (declaringClass.isNestedType()) {
						NestedTypeBinding nestedType = (NestedTypeBinding) declaringClass;
						SyntheticArgumentBinding[] syntheticArgs =
							nestedType.syntheticEnclosingInstances();
						for (int i = 0, max = syntheticArgs == null ? 0 : syntheticArgs.length;
							i < max;
							i++) {
							if (syntheticArgs[i].matchingField != null) {
								codeStream.aload_0();
								codeStream.load(syntheticArgs[i]);
								codeStream.putfield(syntheticArgs[i].matchingField);
							}
						}
						syntheticArgs = nestedType.syntheticOuterLocalVariables();
						for (int i = 0, max = syntheticArgs == null ? 0 : syntheticArgs.length;
							i < max;
							i++) {
							if (syntheticArgs[i].matchingField != null) {
								codeStream.aload_0();
								codeStream.load(syntheticArgs[i]);
								codeStream.putfield(syntheticArgs[i].matchingField);
							}
						}
					}
					// generate user field initialization
					if (declaringType.fields != null) {
						for (int i = 0, max = declaringType.fields.length; i < max; i++) {
							FieldDeclaration fieldDecl;
							if (!(fieldDecl = declaringType.fields[i]).isStatic()) {
								fieldDecl.generateCode(initializerScope, codeStream);
							}
						}
					}
				}
				// generate statements
				if (statements != null) {
					for (int i = 0, max = statements.length; i < max; i++) {
						statements[i].generateCode(scope, codeStream);
					}
				}
				if (needFreeReturn) {
					codeStream.return_();
				}
				// local variable attributes
				codeStream.exitUserScope(scope);
				codeStream.recordPositionsFrom(0, this);
				classFile.completeCodeAttribute(codeAttributeOffset);
				attributeNumber++;
			}
			classFile.completeMethodInfo(methodAttributeOffset, attributeNumber);

			// if a problem got reported during code gen, then trigger problem method creation
			if (ignoreFurtherInvestigation) {
				throw new AbortMethod(scope.referenceCompilationUnit().compilationResult);
			}
		} catch (AbortMethod e) {
			int problemsLength;
			IProblem[] problems =
				scope.referenceCompilationUnit().compilationResult.getProblems();
			IProblem[] problemsCopy = new IProblem[problemsLength = problems.length];
			System.arraycopy(problems, 0, problemsCopy, 0, problemsLength);
			classFile.addProblemConstructor(this, binding, problemsCopy, problemResetPC);
		}
	}

