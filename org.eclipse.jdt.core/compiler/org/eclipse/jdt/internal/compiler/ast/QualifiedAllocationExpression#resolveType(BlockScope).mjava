	public TypeBinding resolveType(BlockScope scope) {

		if (anonymousType == null && enclosingInstance == null)
			return super.resolveType(scope);
		// added for code assist... is not possible with 'normal' code

		// Propagate the type checking to the arguments, and checks if the constructor is defined.

		// ClassInstanceCreationExpression ::= Primary '.' 'new' SimpleName '(' ArgumentListopt ')' ClassBodyopt
		// ClassInstanceCreationExpression ::= Name '.' 'new' SimpleName '(' ArgumentListopt ')' ClassBodyopt
		// ==> by construction, when there is an enclosing instance the typename may NOT be qualified
		// ==> therefore by construction the type is always a SingleTypeReferenceType instead of being either 
		// sometime a SingleTypeReference and sometime a QualifedTypeReference

		constant = NotAConstant;
		TypeBinding enclosingInstTb = null;
		TypeBinding recType;
		if (anonymousType == null) {
			//----------------no anonymous class------------------------	
			if ((enclosingInstTb = enclosingInstance.resolveType(scope)) == null)
				return null;
			if (enclosingInstTb.isBaseType() | enclosingInstTb.isArrayType()) {
				scope.problemReporter().illegalPrimitiveOrArrayTypeForEnclosingInstance(
					enclosingInstTb,
					enclosingInstance);
				return null;
			}
			recType =
				((SingleTypeReference) type).resolveTypeEnclosing(
					scope,
					(ReferenceBinding) enclosingInstTb);
			// will check for null after args are resolved
			TypeBinding[] argumentTypes = NoParameters;
			if (arguments != null) {
				boolean argHasError = false;
				int length = arguments.length;
				argumentTypes = new TypeBinding[length];
				for (int i = 0; i < length; i++)
					if ((argumentTypes[i] = arguments[i].resolveType(scope)) == null)
						argHasError = true;
				if (argHasError)
					return recType;
			}
			if (recType == null)
				return null;
			if (!recType.canBeInstantiated()) {
				scope.problemReporter().cannotInstantiate(type, recType);
				return recType;
			}
			if ((binding =
				scope.getConstructor((ReferenceBinding) recType, argumentTypes, this))
				.isValidBinding()) {
				if (isMethodUseDeprecated(binding, scope))
					scope.problemReporter().deprecatedMethod(binding, this);

				if (arguments != null)
					for (int i = 0; i < arguments.length; i++)
						arguments[i].implicitWidening(binding.parameters[i], argumentTypes[i]);
			} else {
				if (binding.declaringClass == null)
					binding.declaringClass = (ReferenceBinding) recType;
				scope.problemReporter().invalidConstructor(this, binding);
				return recType;
			}

			// The enclosing instance must be compatible with the innermost enclosing type
			ReferenceBinding expectedType = binding.declaringClass.enclosingType();
			if (scope.areTypesCompatible(enclosingInstTb, expectedType))
				return recType;
			scope.problemReporter().typeMismatchErrorActualTypeExpectedType(
				enclosingInstance,
				enclosingInstTb,
				expectedType);
			return recType;
		}

		//--------------there is an anonymous type declaration-----------------
		if (enclosingInstance != null) {
			if ((enclosingInstTb = enclosingInstance.resolveType(scope)) == null)
				return null;
			if (enclosingInstTb.isBaseType() | enclosingInstTb.isArrayType()) {
				scope.problemReporter().illegalPrimitiveOrArrayTypeForEnclosingInstance(
					enclosingInstTb,
					enclosingInstance);
				return null;
			}
		}
		// due to syntax-construction, recType is a ReferenceBinding		
		recType =
			(enclosingInstance == null)
				? type.resolveType(scope)
				: ((SingleTypeReference) type).resolveTypeEnclosing(
					scope,
					(ReferenceBinding) enclosingInstTb);
		if (recType == null)
			return null;
		if (((ReferenceBinding) recType).isFinal()) {
			scope.problemReporter().anonymousClassCannotExtendFinalClass(type, recType);
			return null;
		}
		TypeBinding[] argumentTypes = NoParameters;
		if (arguments != null) {
			int length = arguments.length;
			argumentTypes = new TypeBinding[length];
			for (int i = 0; i < length; i++)
				if ((argumentTypes[i] = arguments[i].resolveType(scope)) == null)
					return null;
		}

		// an anonymous class inherits from java.lang.Object when declared "after" an interface
		ReferenceBinding superBinding =
			recType.isInterface() ? scope.getJavaLangObject() : (ReferenceBinding) recType;
		MethodBinding inheritedBinding =
			scope.getConstructor(superBinding, argumentTypes, this);
		if (!inheritedBinding.isValidBinding()) {
			if (inheritedBinding.declaringClass == null)
				inheritedBinding.declaringClass = superBinding;
			scope.problemReporter().invalidConstructor(this, inheritedBinding);
			return null;
		}
		if (enclosingInstance != null) {
			if (!scope
				.areTypesCompatible(
					enclosingInstTb,
					inheritedBinding.declaringClass.enclosingType())) {
				scope.problemReporter().typeMismatchErrorActualTypeExpectedType(
					enclosingInstance,
					enclosingInstTb,
					inheritedBinding.declaringClass.enclosingType());
				return null;
			}
		}

		// this promotion has to be done somewhere: here or inside the constructor of the
		// anonymous class. We do it here while the constructor of the inner is then easier.
		if (arguments != null)
			for (int i = 0; i < arguments.length; i++)
				arguments[i].implicitWidening(inheritedBinding.parameters[i], argumentTypes[i]);

		// Update the anonymous inner class : superclass, interface  
		scope.addAnonymousType(anonymousType, (ReferenceBinding) recType);
		anonymousType.resolve(scope);
		binding = anonymousType.createsInternalConstructorWithBinding(inheritedBinding);
		return anonymousType.binding; // 1.2 change
	}

