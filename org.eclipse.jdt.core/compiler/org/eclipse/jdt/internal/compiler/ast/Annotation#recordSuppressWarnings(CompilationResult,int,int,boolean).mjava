	public void recordSuppressWarnings(CompilationResult compilationResult, int startSuppresss, int endSuppress, boolean isSuppressingWarnings) {
		long suppressWarningIrritants = 0;
		MemberValuePair[] pairs = this.memberValuePairs();
		pairLoop: for (int i = 0, length = pairs.length; i < length; i++) {
			MemberValuePair pair = pairs[i];
			if (CharOperation.equals(pair.name, TypeConstants.VALUE)) {
				Expression value = pair.value;
				if (value instanceof ArrayInitializer) {
					ArrayInitializer initializer = (ArrayInitializer) value;
					Expression[] inits = initializer.expressions;
					for (int j = 0, initsLength = inits.length; j < initsLength; j++) {
						Constant cst = inits[j].constant;
						if (cst != Constant.NotAConstant && cst.typeID() == T_JavaLangString) {
							suppressWarningIrritants |= CompilerOptions.warningTokenToIrritant(cst.stringValue());
							if (~suppressWarningIrritants == 0) break pairLoop;
						}
					}
				} else {
					Constant cst = value.constant;
					if (cst != Constant.NotAConstant && cst.typeID() == T_JavaLangString) {
						suppressWarningIrritants |= CompilerOptions.warningTokenToIrritant(cst.stringValue());
						if (~suppressWarningIrritants == 0) break pairLoop;
					}
				}
				break pairLoop;
			}
		}
		if (isSuppressingWarnings && suppressWarningIrritants != 0) {
			compilationResult.recordSuppressWarnings(suppressWarningIrritants, startSuppresss, endSuppress);
		}
	}

