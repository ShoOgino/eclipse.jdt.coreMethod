	public ConstructorDeclaration getConstructor(Parser parser) {
		ConstructorDeclaration cd = null;
		//if a constructor has not the name of the type,
		//convert it into a method with 'null' as its return type
		boolean hasConstructor = true;
		if (this.methods != null) {
			for (int i = this.methods.length; --i >= 0;) {
				AbstractMethodDeclaration am;
				if ((am = this.methods[i]).isConstructor()) {
					if (!CharOperation.equals(am.selector, this.name)) {
						// the constructor was in fact a method with no return type
						// unless an explicit constructor call was supplied
						ConstructorDeclaration c = (ConstructorDeclaration) am;
						if (c.constructorCall == null || c.constructorCall.isImplicitSuper()) { //changed to a method
							MethodDeclaration m = parser.convertToMethodDeclaration(c, this.compilationResult);
							this.methods[i] = m;
						}
					} else {
						if (am instanceof CompactConstructorDeclaration) {
							CompactConstructorDeclaration ccd = (CompactConstructorDeclaration) am;
							ccd.recordDeclaration = this;
							if (ccd.arguments == null)
								ccd.arguments = this.args;
							return ccd;
						}
						// now we are looking at a "normal" constructor
						if (this.args == null) {
							if (am.arguments == null)
								return (ConstructorDeclaration) am;
							continue; // else check next one.
						} else {
							if (am.arguments == null || am.arguments.length != this.args.length)
								continue;
							for (int j = 0; j < this.args.length; j++) {
								if (!CharOperation.equals(this.args[j].type.getLastToken(),
										am.arguments[j].type.getLastToken())) {
									hasConstructor = false;
									break;
								}
								/*TODO: Strictly speaking, at this point we can only say
								 * that there is high possibility that there is a constructor
								 * If it is false, then definitely it is false; else we need
								 * to check the bindings to say that there is a canonical
								 * constructor. To take care at binding resolution time.
								 */
							}
							if (hasConstructor)
								return (ConstructorDeclaration) am;
						}
						
					}
				}
			}
		}
		return cd;
	}

