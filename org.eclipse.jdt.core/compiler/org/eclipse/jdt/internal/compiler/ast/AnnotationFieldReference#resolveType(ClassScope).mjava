	/* (non-Javadoc)
	 * Redefine to remove unnecessary tests while resolving in annotation
	 * @see org.eclipse.jdt.internal.compiler.ast.Expression#resolveType(org.eclipse.jdt.internal.compiler.lookup.ClassScope)
	 */
	public TypeBinding resolveType(ClassScope scope) {

		constant = NotAConstant;

		if (this.receiver == null) {
			this.receiverType = scope.enclosingSourceType();
		} else {
			this.receiverType = receiver.resolveType(scope);
		}
		if (this.receiverType == null) {
			return null;
		}

		this.binding = scope.findField(this.receiverType, token, this, true /*resolve*/);
		if (this.binding == null) {
			Binding fieldBinding = scope.getBinding(token, BindingIds.FIELD, this, true /*resolve*/);
			if (fieldBinding != null && fieldBinding instanceof FieldBinding) {
				this.binding = (FieldBinding) fieldBinding;
			} else {
				this.binding = new ProblemFieldBinding((ReferenceBinding) this.receiverType, token, fieldBinding.problemId());
			}
		}
		if (!this.binding.isValidBinding()) {
			constant = NotAConstant;
			scope.problemReporter().invalidField(this, this.receiverType);
			return null;
		}

		if (isFieldUseDeprecated(binding, scope, (this.bits & IsStrictlyAssignedMASK) != 0)) {
			scope.problemReporter().deprecatedField(this.binding, this);
		}
		return this.resolvedType = binding.type;
	}

