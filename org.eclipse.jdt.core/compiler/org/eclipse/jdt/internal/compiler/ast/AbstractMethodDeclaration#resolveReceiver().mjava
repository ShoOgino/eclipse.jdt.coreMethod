	public void resolveReceiver() {
		if (this.arguments != null && this.arguments.length > 0) {
			if (this.arguments[0].isReceiver()) {
				Receiver receiver = (Receiver) this.arguments[0];

				TypeBinding resolvedReceiverType = receiver.type.resolvedType;
				if (this.binding == null || resolvedReceiverType == null || !resolvedReceiverType.isValidBinding())
					return;

				ReferenceBinding declaringClass = this.binding.declaringClass;
				/* neither static methods nor methods in anonymous types can have explicit 'this' */
				if (this.isStatic() || declaringClass.isAnonymousType()) {
					this.scope.problemReporter().disallowedThisParameter(receiver);
					return; // No need to do further validation
				}

				ReferenceBinding enclosingReceiver = this.scope.enclosingReceiverType();
				if (this.isConstructor()) {
					/* Only non static member types or local types can declare explicit 'this' params in constructors */
					if (declaringClass.isStatic()
							|| (declaringClass.tagBits & (TagBits.IsLocalType | TagBits.IsMemberType)) == 0) { /* neither member nor local type */
						this.scope.problemReporter().disallowedThisParameter(receiver);
						return; // No need to do further validation
					}
					enclosingReceiver = enclosingReceiver.enclosingType();
				}

				if (enclosingReceiver != resolvedReceiverType) {
					this.scope.problemReporter().illegalTypeForExplicitThis(receiver, enclosingReceiver);
				}

				if ((receiver.qualifyingName == null) ? this.isConstructor() : !isQualifierValidForType(receiver.qualifyingName.getName(), enclosingReceiver)) {
					this.scope.problemReporter().illegalQualifierForExplicitThis(receiver, enclosingReceiver);					
				}
			}
		}
	}

