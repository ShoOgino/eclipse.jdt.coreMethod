	public boolean isCompatibleWith(TypeBinding left, Scope scope) {
		// 15.28.1
		final MethodBinding sam = left.getSingleAbstractMethod(this.enclosingScope);
		if (sam == null || !sam.isValidBinding())
			return false;
		boolean isCompatible;
		setExpectedType(left);
		IErrorHandlingPolicy oldPolicy = this.enclosingScope.problemReporter().switchErrorHandlingPolicy(silentErrorHandlingPolicy);
		try {
			this.binding = null;
			resolveType(this.enclosingScope);
		} catch (IncongruentLambdaException e) {
			return false;
		} finally {
			this.enclosingScope.problemReporter().switchErrorHandlingPolicy(oldPolicy);
			isCompatible = this.binding != null && this.binding.isValidBinding();
			if (isCompatible) {
				if (this.resultExpressions == null)
					this.resultExpressions = new SimpleLookupTable(); // gather for more specific analysis later.
				this.resultExpressions.put(left, this.binding.returnType);
			}
			this.binding = null;
			setExpectedType(null);
		}
		return isCompatible;
	}

