	public void computeConstant() {
		//the source is correctly formated so the exception should never occurs
		Double computedValue;
		try {
			computedValue = Double.valueOf(String.valueOf(source));
		} catch (NumberFormatException e) {
			/*
			 * this can happen if this is an hexadecimal floating-point literal and the libraries used 
			 * are < 1.5
			 */
			computedValue = new Double(Util.getFloatingPoint(source));
		}

		final double doubleValue = computedValue.doubleValue();
		if (doubleValue > Double.MAX_VALUE)
			return; //may be Infinity
		if (doubleValue < Double.MIN_VALUE) { //only a true 0 can be made of zeros
			//2.00000000000000000e-324 is illegal .... 
			label : for (int i = 0; i < source.length; i++) { //it is welled formated so just test against '0' and potential . D d  
				switch (source[i]) {
					case '0' :
					case '.' :
					case 'd' :
					case 'D' :
					case 'x' :
					case 'X' :
						break;
					case 'e' :
					case 'E' :
					case 'p' :
					case 'P' :
						break label; //exposant are valid....!
					default :
						return;
				}
			}
		} //error

		constant = Constant.fromValue(value = doubleValue);
	}

