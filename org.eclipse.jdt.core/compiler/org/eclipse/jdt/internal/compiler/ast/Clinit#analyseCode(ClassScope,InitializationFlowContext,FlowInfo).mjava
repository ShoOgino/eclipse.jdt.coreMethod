public void analyseCode(ClassScope classScope, InitializationFlowContext staticInitializerFlowContext, FlowInfo flowInfo){
	
	if (ignoreFurtherInvestigation)
		return;
	try {
		ExceptionHandlingFlowContext clinitContext = new ExceptionHandlingFlowContext(
			staticInitializerFlowContext.parent, 
			this, 
			NoExceptions, 
			scope,
			FlowInfo.DeadEnd);

		// check for missing returning path
		needFreeReturn = !((flowInfo == FlowInfo.DeadEnd) || flowInfo.isFakeReachable());

		// check missing blank final field initializations
		flowInfo = flowInfo.mergedWith(staticInitializerFlowContext.initsOnReturn);
		FieldBinding[] fields = scope.enclosingSourceType().fields();
		for (int i = 0, count = fields.length; i < count; i++) {
			FieldBinding field;
			if ((field = fields[i]).isStatic()
				&& field.isFinal()
				&& (!flowInfo.isDefinitelyAssigned(fields[i]))) {
				scope.problemReporter().uninitializedBlankFinalField(field, scope.referenceType().declarationOf(field)); // can complain against the field decl, since only one <clinit>
			}
		}
		// check static initializers thrown exceptions
		staticInitializerFlowContext.checkInitializerExceptions(scope, clinitContext, flowInfo);
	} catch (AbortMethod e) {
		this.ignoreFurtherInvestigation = true;		
	}
}

