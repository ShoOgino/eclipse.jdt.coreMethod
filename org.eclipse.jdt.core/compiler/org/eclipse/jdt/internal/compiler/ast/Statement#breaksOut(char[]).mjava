// Inspect AST nodes looking for a break statement, descending into nested control structures only when necessary (looking for a break with a specific label.)
public boolean breaksOut(final char[] label) {
	return new ASTVisitor() {
		
		boolean breaksOut;
		public boolean visit(TypeDeclaration type, BlockScope skope) { return label != null; }
		public boolean visit(TypeDeclaration type, ClassScope skope) { return label != null; }
		public boolean visit(LambdaExpression lambda, BlockScope skope) { return label != null;}
		public boolean visit(WhileStatement whileStatement, BlockScope skope) { return label != null; }
		public boolean visit(DoStatement doStatement, BlockScope skope) { return label != null; }
		public boolean visit(ForeachStatement foreachStatement, BlockScope skope) { return label != null; }
		public boolean visit(ForStatement forStatement, BlockScope skope) { return label != null; }
		public boolean visit(SwitchStatement switchStatement, BlockScope skope) { return label != null; }
		
		public boolean visit(BreakStatement breakStatement, BlockScope skope) {
			if (label == null || CharOperation.equals(label,  breakStatement.label))
				this.breaksOut = true;
	    	return false;
	    }
		
		public boolean breaksOut() {
			Statement.this.traverse(this, null);
			return this.breaksOut;
		}
	}.breaksOut();
}

