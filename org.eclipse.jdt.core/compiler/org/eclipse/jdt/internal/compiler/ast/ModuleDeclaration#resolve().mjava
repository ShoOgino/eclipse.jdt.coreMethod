	@Override
	public void resolve() {
		//
		if (this.binding == null) {
			this.ignoreFurtherInvestigation = true;
			return;
		}
		this.moduleBinding = this.scope.environment().getModule(this.moduleName);
		this.binding.compoundName = CharOperation.arrayConcat(this.tokens, this.name);
		Set<ModuleBinding> requiredModules = new HashSet<ModuleBinding>();
		for(int i = 0; i < this.requiresCount; i++) {
			ModuleReference ref = this.requires[i];
			if (ref.resolve(this.scope) != null) {
				if (!requiredModules.add(ref.binding)) {
					this.scope.problemReporter().duplicateModuleReference(IProblem.DuplicateRequires, ref);
				}
				Collection<ModuleBinding> deps = ref.binding.dependencyGraphCollector().get();
				if (deps.contains(this.moduleBinding))
					this.scope.problemReporter().cyclicModuleDependency(this.moduleBinding, ref);
			}
		}
		Set<PackageBinding> exportedPkgs = new HashSet<>();
		for (int i = 0; i < this.exportsCount; i++) {
			ExportReference ref = this.exports[i];
			if (ref.resolve(this.scope)) {
				if (!exportedPkgs.add(ref.resolvedPackage)) {
					this.scope.problemReporter().invalidExportReference(IProblem.DuplicateExports, ref);
				}
			}
		}
		for(int i = 0; i < this.usesCount; i++) {
			Set<TypeBinding> allTypes = new HashSet<TypeBinding>();
			if (this.uses[i].resolveType(this.scope) != null) {
				if (!allTypes.add(this.uses[i].resolvedType)) {
					this.scope.problemReporter().duplicateTypeReference(IProblem.DuplicateUses, this.uses[i]);
				}
			}
		}
		Map<TypeBinding, TypeBinding> services = new HashMap<TypeBinding, TypeBinding>(this.servicesCount); 
		for(int i = 0; i < this.servicesCount; i++) {
			if (this.interfaces[i].resolveType(this.scope) != null) {
				TypeBinding inf = this.interfaces[i].resolvedType;
				if (this.implementations[i].resolveType(this.scope) != null) {
					ReferenceBinding imp = (ReferenceBinding) this.implementations[i].resolvedType;
					if (inf.isValidBinding() && imp.isValidBinding()) {
						validate(this.interfaces[i], this.implementations[i]);
						if (services.get(inf) == imp) { //$IDENTITY-COMPARISON$
							this.scope.problemReporter().duplicateTypeReference(IProblem.DuplicateServices,
									this.interfaces[i], this.implementations[i]);
						} else {
							services.put(inf, imp);
						}
					}
				}
			}
		}
	}

