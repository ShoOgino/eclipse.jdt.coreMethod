public TypeBinding resolveType(BlockScope scope, boolean checkBounds) {
	// handle the error here
	this.constant = NotAConstant;
	if (this.resolvedType != null) // is a shared type reference which was already resolved
		return this.resolvedType.isValidBinding() ? this.resolvedType : null; // already reported error

	TypeBinding type = this.resolvedType = getTypeBinding(scope);
	if (this.resolvedType == null)
		return null; // detected cycle while resolving hierarchy	
	if (!this.resolvedType.isValidBinding()) {
		reportInvalidType(scope);
		return null;
	}
	if (isTypeUseDeprecated(this.resolvedType, scope))
		reportDeprecatedType(scope);
	type = scope.environment().convertToRawType(type);
	if (type.isRawType() && scope.compilerOptions().reportRawTypeReference) {
		scope.problemReporter().rawTypeReference(this, type);
	}			
	return this.resolvedType = type;
}

