	/**
	 * After a method has substituted type parameters, check if this resulted in any contradictory null annotations.
	 * Problems are either reported directly (if scope != null) or by returning a ProblemMethodBinding.
	 */
	public static MethodBinding checkForContraditions(
			final MethodBinding method, final InvocationSite invocationSite, final Scope scope) {
		
		class SearchContradictions extends TypeBindingVisitor {
			ReferenceBinding typeWithContradiction;
			@Override
			public boolean visit(ReferenceBinding referenceBinding) {
				if ((referenceBinding.tagBits & TagBits.AnnotationNullMASK) == TagBits.AnnotationNullMASK) {
					this.typeWithContradiction = referenceBinding;
					return false;
				}
				return true;
			}
			@Override
			public boolean visit(TypeVariableBinding typeVariable) {
				return visit((ReferenceBinding)typeVariable);
			}
			@Override
			public boolean visit(RawTypeBinding rawType) {
				return visit((ReferenceBinding)rawType);
			}
		}

		SearchContradictions searchContradiction = new SearchContradictions();
		TypeBindingVisitor.visit(searchContradiction, method.returnType);
		if (searchContradiction.typeWithContradiction != null) {
			if (scope == null)
				return new ProblemMethodBinding(method, method.selector, method.parameters, ProblemReasons.ContradictoryNullAnnotations);
			scope.problemReporter().contradictoryNullAnnotationsInferred(method, invocationSite);
			// note: if needed, we might want to update the method by removing the contradictory annotations??
			return method;
		}

		Expression[] arguments = null;
		if (invocationSite instanceof Invocation)
			arguments = ((Invocation)invocationSite).arguments();
		for (int i = 0; i < method.parameters.length; i++) {
			TypeBindingVisitor.visit(searchContradiction, method.parameters[i]);
			if (searchContradiction.typeWithContradiction != null) {
				if (scope == null)
					return new ProblemMethodBinding(method, method.selector, method.parameters, ProblemReasons.ContradictoryNullAnnotations);
				if (arguments != null && i < arguments.length)
					scope.problemReporter().contradictoryNullAnnotationsInferred(method, arguments[i]);
				else
					scope.problemReporter().contradictoryNullAnnotationsInferred(method, invocationSite);
				return method;
			}
		}
		return method;
	}

