public TypeBinding resolveType(BlockScope scope) {
	TypeBinding expressionTb = expression.resolveType(scope);
	if (expressionTb == null){
		constant = NotAConstant;
		return null;
	}
	int expressionId = expressionTb.id;
	if (expressionId > 15) {
		constant = NotAConstant;
		scope.problemReporter().invalidOperator(this, expressionTb);
		return null;
	}

	int tableId;
	switch ((bits & OperatorMASK) >> OperatorSHIFT) {
		case NOT :
			tableId = AND_AND;
			break;
		case TWIDDLE :
			tableId = LEFT_SHIFT;
			break;
		default :
			tableId = MINUS;
	} //+ and - cases

	// the code is an int
	// (cast)  left   Op (cast)  rigth --> result
	//  0000   0000       0000   0000      0000
	//  <<16   <<12       <<8    <<4       <<0
	int result = ResolveTypeTables[tableId][(expressionId << 4) + expressionId];
	expression.implicitConversion = result >>> 12;
	TypeBinding type;
	switch (result & 0x0000F) { // only switch on possible result type.....
		case T_boolean :
			type = BooleanBinding;
			break;
		case T_byte :
			type = ByteBinding;
			break;
		case T_char :
			type = CharBinding;
			break;
		case T_double :
			type = DoubleBinding;
			break;
		case T_float :
			type = FloatBinding;
			break;
		case T_int :
			type = IntBinding;
			break;
		case T_long :
			type = LongBinding;
			break;
		default : //error........
			constant = Constant.NotAConstant;
			if (expressionId != T_undefined)
				scope.problemReporter().invalidOperator(this, expressionTb);
			return null;
	}

	// compute the constant when valid
	if (expression.constant != Constant.NotAConstant) {
		constant = Constant.computeConstantOperation(expression.constant, expressionId, (bits & OperatorMASK) >> OperatorSHIFT);
	} else {
		constant = Constant.NotAConstant;
		if (((bits & OperatorMASK) >> OperatorSHIFT) == NOT) {
			Constant cst = expression.conditionalConstant();
			if (cst.typeID() == T_boolean)
				optimizedBooleanConstant = Constant.fromValue(!cst.booleanValue());
		}
	}
	return type;
}

