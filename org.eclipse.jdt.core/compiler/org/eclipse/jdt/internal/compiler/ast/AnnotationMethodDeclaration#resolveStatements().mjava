	public void resolveStatements() {

		super.resolveStatements();
		if (this.defaultValue != null) {
			if (this.defaultValue instanceof ArrayInitializer) {
				ArrayInitializer initializer = (ArrayInitializer) defaultValue;
				if ((initializer.resolveTypeExpecting(scope, this.binding.returnType)) != null) {
					this.defaultValue.resolvedType = initializer.binding = (ArrayBinding) this.binding.returnType;
				}
			} else {
				this.defaultValue.resolveType(this.scope);
			}
		}
		TypeBinding returnTypeBinding = this.binding.returnType;
		if (returnTypeBinding != null) {
				
			// annotation methods can only return base types, String, Class, enum type, annotation types and arrays of these
			checkAnnotationMethodType: {
				TypeBinding leafReturnType = returnTypeBinding.leafComponentType();
				switch (leafReturnType.erasure().id) {
					case T_byte :
					case T_short :
					case T_char :
					case T_int :
					case T_long :
					case T_float :
					case T_double :
					case T_boolean :
					case T_JavaLangString :
					case T_JavaLangClass :
						break checkAnnotationMethodType;
				}
				if (leafReturnType.isEnum()) {
					break checkAnnotationMethodType;
				}
				if (leafReturnType.isAnnotationType()) {
					scope.classScope().detectAnnotationCycle(scope.enclosingSourceType(), leafReturnType, this.returnType);
					break checkAnnotationMethodType;
				}
				scope.problemReporter().invalidAnnotationMemberType(this);
			}
			Annotation.checkAnnotationValue(returnTypeBinding, scope.enclosingSourceType(), this.selector, this.defaultValue, scope);
		}
		
		if (this.extendedDimensions != 0) {
			scope.problemReporter().illegalExtendedDimensions(this);		
		}		
	}

