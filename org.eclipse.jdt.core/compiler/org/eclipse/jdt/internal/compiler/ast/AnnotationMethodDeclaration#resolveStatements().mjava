	public void resolveStatements() {

		super.resolveStatements();
		TypeBinding returnTypeBinding = this.binding.returnType;
		if (returnTypeBinding != null) {
				
			// annotation methods can only return base types, String, Class, enum type, annotation types and arrays of these
			checkAnnotationMethodType: {
				TypeBinding leafReturnType = returnTypeBinding.leafComponentType();
					
				switch (leafReturnType.erasure().id) {
					case T_byte :
					case T_short :
					case T_char :
					case T_int :
					case T_long :
					case T_float :
					case T_double :
					case T_boolean :
					case T_JavaLangString :
					case T_JavaLangClass :
						if (returnTypeBinding.dimensions() <= 1) // only 1-dimensional array permitted
							break checkAnnotationMethodType;
				}
				if (leafReturnType.isEnum()) {
					if (returnTypeBinding.dimensions() <= 1) // only 1-dimensional array permitted
						break checkAnnotationMethodType;
				}
				if (leafReturnType.isAnnotationType()) {
					scope.classScope().detectAnnotationCycle(scope.enclosingSourceType(), leafReturnType, this.returnType);
					if (returnTypeBinding.dimensions() <= 1) // only 1-dimensional array permitted
						break checkAnnotationMethodType;
				}
				scope.problemReporter().invalidAnnotationMemberType(this);
			}
			if (this.defaultValue != null) {
				MemberValuePair pair = new MemberValuePair(this.selector, this.sourceStart, this.sourceEnd, this.defaultValue);
				pair.binding = this.binding;
				pair.resolveTypeExpecting(scope, returnTypeBinding);
			}
		}
		
		if (this.extendedDimensions != 0) {
			scope.problemReporter().illegalExtendedDimensions(this);		
		}		
	}

