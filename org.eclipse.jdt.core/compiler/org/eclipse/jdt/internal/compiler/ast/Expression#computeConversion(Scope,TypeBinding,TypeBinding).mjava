	/**
	 * Base types need that the widening is explicitly done by the compiler using some bytecode like i2f.
	 * Also check unsafe type operations.
	 */ 
	public void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType) {

		if (runtimeTimeType == null || compileTimeType == null)
			return;
		if (this.implicitConversion != 0) return; // already set independantly


		// it is possible for a Byte to be unboxed to a byte & then converted to an int
		// but it is not possible either for a byte to become Byte & then assigned to an Integer,
		// or to become an int before boxed into an Integer
		if (runtimeTimeType.isBaseType()) {
			if (!compileTimeType.isBaseType()) {
				compileTimeType = scope.computeBoxingType(compileTimeType);
				this.implicitConversion = UNBOXING;
			}
		} else {
			if (compileTimeType.isBaseType()) {
				compileTimeType = scope.computeBoxingType(compileTimeType);
				this.implicitConversion = BOXING | compileTimeType.id;
				return;
			}
		}

		switch (runtimeTimeType.id) {
			case T_byte :
			case T_short :
			case T_char :
				this.implicitConversion |= (T_int << 4) + compileTimeType.id;
				break;
			case T_String :
			case T_float :
			case T_boolean :
			case T_double :
			case T_int : //implicitConversion may result in i2i which will result in NO code gen
			case T_long :
				this.implicitConversion |= (runtimeTimeType.id << 4) + compileTimeType.id;
				break;
			default : // regular object ref
//				if (compileTimeType.isRawType() && runtimeTimeType.isBoundParameterizedType()) {
//				    scope.problemReporter().unsafeRawExpression(this, compileTimeType, runtimeTimeType);
//				}		
		}
	}	

