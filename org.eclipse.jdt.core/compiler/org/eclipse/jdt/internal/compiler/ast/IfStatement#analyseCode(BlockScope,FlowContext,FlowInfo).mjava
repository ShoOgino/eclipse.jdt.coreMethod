	public FlowInfo analyseCode(
		BlockScope currentScope,
		FlowContext flowContext,
		FlowInfo flowInfo) {

		FlowInfo thenFlowInfo, elseFlowInfo;

		// process the condition
		flowInfo = condition.analyseCode(currentScope, flowContext, flowInfo);
		Constant condConstant = this.condition.optimizedBooleanConstant();

		// process the THEN part
		if (this.thenStatement == null) {
			thenFlowInfo = flowInfo.initsWhenTrue();
		} else {
			thenFlowInfo =
				(condConstant != NotAConstant && condConstant.booleanValue() == false)
					? flowInfo.initsWhenTrue().copy().markAsFakeReachable(true)
					: flowInfo.initsWhenTrue().copy();
			// Save info for code gen
			thenInitStateIndex =
				currentScope.methodScope().recordInitializationStates(thenFlowInfo);
			if (!thenFlowInfo.complainIfUnreachable(thenStatement, currentScope, false)) {
				thenFlowInfo =
					thenStatement.analyseCode(currentScope, flowContext, thenFlowInfo);
			}
		};
		// optimizing the jump around the ELSE part
		this.thenExit = (thenFlowInfo == FlowInfo.DeadEnd) || thenFlowInfo.isFakeReachable();

		// process the ELSE part
		if (this.elseStatement == null) {
			elseFlowInfo = flowInfo.initsWhenFalse();
		} else {
			elseFlowInfo =
				(condConstant != NotAConstant && condConstant.booleanValue() == true)
					? flowInfo.initsWhenFalse().copy().markAsFakeReachable(true)
					: flowInfo.initsWhenFalse().copy();
			// Save info for code gen
			elseInitStateIndex =
				currentScope.methodScope().recordInitializationStates(elseFlowInfo);
			if (!elseFlowInfo.complainIfUnreachable(elseStatement, currentScope, false)) {
				elseFlowInfo =
					elseStatement.analyseCode(currentScope, flowContext, elseFlowInfo);
			}
		}

		// merge THEN & ELSE initializations
		FlowInfo mergedInfo;
		if (condConstant != NotAConstant && condConstant.booleanValue() == true) {
			// IF (TRUE)
			if (this.thenExit) {
				mergedInfo = elseFlowInfo.markAsFakeReachable(true);
				mergedInitStateIndex =
					currentScope.methodScope().recordInitializationStates(mergedInfo);
				return mergedInfo;
			} else {
				mergedInitStateIndex =
					currentScope.methodScope().recordInitializationStates(thenFlowInfo);
				return thenFlowInfo;
			}
		} else {
			// IF (FALSE)
			if (condConstant != NotAConstant && condConstant.booleanValue() == false) {
				if (elseFlowInfo == FlowInfo.DeadEnd || elseFlowInfo.isFakeReachable()) {
					mergedInfo = thenFlowInfo.markAsFakeReachable(true);
					mergedInitStateIndex =
						currentScope.methodScope().recordInitializationStates(mergedInfo);
					return mergedInfo;
				} else {
					mergedInitStateIndex =
						currentScope.methodScope().recordInitializationStates(elseFlowInfo);
					return elseFlowInfo;
				}
			}
		}
		mergedInfo = thenFlowInfo.mergedWith(elseFlowInfo.unconditionalInits());
		mergedInitStateIndex =
			currentScope.methodScope().recordInitializationStates(mergedInfo);
		return mergedInfo;
	}

