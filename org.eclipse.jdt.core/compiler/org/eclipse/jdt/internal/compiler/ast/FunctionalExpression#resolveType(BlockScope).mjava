	public /* @NonNull */ TypeBinding resolveType(BlockScope blockScope) {
		this.constant = Constant.NotAConstant;
		this.singleAbstractMethod = this.expectedType == null ? null : this.expectedType.getSingleAbstractMethod(blockScope);
		if (this.singleAbstractMethod == null || !this.singleAbstractMethod.isValidBinding()) {
			blockScope.problemReporter().targetTypeIsNotAFunctionalInterface(this);
			char [][] name = this.expectedType == null ? CharOperation.NO_CHAR_CHAR : CharOperation.splitOn('.', this.expectedType.shortReadableName());
			return this.functionalInterfaceType = new ProblemReferenceBinding(name, null, ProblemReasons.NotAFunctionalInterface);
		}
		return this.functionalInterfaceType = (ReferenceBinding) this.expectedType;
	}

