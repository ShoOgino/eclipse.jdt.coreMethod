/**
 * Normal == or != code generation.
 *
 * @param currentScope org.eclipse.jdt.internal.compiler.lookup.BlockScope
 * @param codeStream org.eclipse.jdt.internal.compiler.codegen.CodeStream
 * @param valueRequired boolean
 */
public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {

	if (constant != NotAConstant) {
		int pc = codeStream.position;
		if (valueRequired) 
			codeStream.generateConstant(constant, implicitConversion);
		codeStream.recordPositionsFrom(pc, this.sourceStart);
		return;
	}
	Label falseLabel;
	generateOptimizedBoolean(
		currentScope, 
		codeStream, 
		null, 
		falseLabel = new Label(codeStream), 
		valueRequired);
	if (falseLabel.hasForwardReferences()) {
		if (valueRequired){
			// comparison is TRUE 
			codeStream.iconst_1();
			if ((bits & ValueForReturnMASK) != 0){
				codeStream.ireturn();
				// comparison is FALSE
				falseLabel.place();
				codeStream.iconst_0();
			} else {
				Label endLabel = new Label(codeStream);
				codeStream.goto_(endLabel);
				codeStream.decrStackSize(1);
				// comparison is FALSE
				falseLabel.place();
				codeStream.iconst_0();
				endLabel.place();
			}
		} else {
			falseLabel.place();
		}	
	}	
}

