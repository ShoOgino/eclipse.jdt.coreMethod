	private void collectResultExpressions() {
		if (this.resultExpressions != null)
			return; // already calculated.

		class ResultExpressionsCollector extends ASTVisitor {
			Stack<SwitchExpression> seStack = new Stack<>();
			@SuppressWarnings("synthetic-access")
			@Override
			public boolean visit(SwitchExpression switchExpression, BlockScope blockScope) {
				switchExpression.resultExpressions = new ArrayList<>(0); // by default
				this.seStack.add(switchExpression);
				return true; // do nothing by default, keep traversing
			}
			@Override
			public void endVisit(SwitchExpression switchExpression, BlockScope blockScope) {
				this.seStack.pop();
			}
			@SuppressWarnings("synthetic-access")
			@Override
			public boolean visit(BreakStatement breakStatement, BlockScope blockScope) {
				if (breakStatement.expression != null && !this.seStack.isEmpty()) {
					this.seStack.peek().resultExpressions.add(breakStatement.expression);
				}
				return true; // do nothing by default, keep traversing
			}
		}
		ResultExpressionsCollector reCollector = new ResultExpressionsCollector();
		this.traverse(reCollector, this.scope);
	}

