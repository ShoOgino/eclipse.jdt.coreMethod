	public TypeBinding resolveType(BlockScope scope) {
		constant = NotAConstant;
		if (!(this.lhs instanceof Reference) || this.lhs.isThis()) {
			scope.problemReporter().expressionShouldBeAVariable(this.lhs);
			return null;
		}
		TypeBinding lhsType = lhs.resolveType(scope);
		TypeBinding expressionType = expression.resolveType(scope);
		if (lhsType == null || expressionType == null)
			return null;
	
		int lhsID = lhsType.id;
		int expressionID = expressionType.id;
		
		// autoboxing support
		boolean use15specifics = scope.environment().options.sourceLevel >= JDK1_5;
		boolean unboxedLhs = false, unboxedExpression = false;
		if (use15specifics) {
			if (!lhsType.isBaseType() && expressionID != T_JavaLangString) {
				int unboxedID = scope.computeBoxingType(lhsType).id;
				if (unboxedID != lhsID) {
					lhsID = unboxedID;
					unboxedLhs = true;
				}
			}
			if (!expressionType.isBaseType() && lhsID != T_JavaLangString) {
				int unboxedID = scope.computeBoxingType(expressionType).id;
				if (unboxedID != expressionID) {
					expressionID = unboxedID;
					unboxedExpression = true;
				}
			}
		}
		
		if (restrainUsageToNumericTypes() && !lhsType.isNumericType()) {
			scope.problemReporter().operatorOnlyValidOnNumericType(this, lhsType, expressionType);
			return null;
		}
		if (lhsID > 15 || expressionID > 15) {
			if (lhsID != T_JavaLangString) { // String += Thread is valid whereas Thread += String  is not
				scope.problemReporter().invalidOperator(this, lhsType, expressionType);
				return null;
			}
			expressionID = T_JavaLangObject; // use the Object has tag table
		}
	
		// the code is an int
		// (cast)  left   Op (cast)  rigth --> result 
		//  0000   0000       0000   0000      0000
		//  <<16   <<12       <<8     <<4        <<0
	
		// the conversion is stored INTO the reference (info needed for the code gen)
		int result = OperatorExpression.OperatorSignatures[operator][ (lhsID << 4) + expressionID];
		if (result == T_undefined) {
			scope.problemReporter().invalidOperator(this, lhsType, expressionType);
			return null;
		}
		if (operator == PLUS){
			if(lhsID == T_JavaLangObject) {
				// <Object> += <String> is illegal (39248)
				scope.problemReporter().invalidOperator(this, lhsType, expressionType);
				return null;
			} else {
				// <int | boolean> += <String> is illegal
				if ((lhsType.isNumericType() || lhsID == T_boolean) && !expressionType.isNumericType()){
					scope.problemReporter().invalidOperator(this, lhsType, expressionType);
					return null;
				}
			}
		}
		this.lhs.implicitConversion = (unboxedLhs ? UNBOXING : 0) | (result >>> 12);
		this.expression.implicitConversion = (unboxedExpression ? UNBOXING : 0) | ((result >>> 4) & 0x000FF);
		this.assignmentImplicitConversion =  (unboxedLhs ? BOXING : 0) | (lhsID << 4) | (result & 0x0000F);
		return this.resolvedType = lhsType;
	}

