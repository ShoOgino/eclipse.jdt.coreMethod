public TypeBinding resolveType(BlockScope scope) {
	constant = NotAConstant;
	TypeBinding lhsTb = lhs.resolveType(scope);
	TypeBinding expressionTb = expression.resolveType(scope);
	if (lhsTb == null || expressionTb == null)
		return null;

	int lhsId = lhsTb.id;
	int expressionId = expressionTb.id;
	if (restrainUsageToNumericTypes() && !lhsTb.isNumericType()) {
		scope.problemReporter().operatorOnlyValidOnNumericType(this, lhsTb, expressionTb);
		return null;
	}
	if (lhsId > 15 || expressionId > 15) {
		if (lhsId != T_String) { // String += Object is valid wheraas Object -= String is not
			scope.problemReporter().invalidOperator(this, lhsTb, expressionTb);
			return null;
		}
		expressionId = T_Object; // use the Object has tag table
	}

	// the code is an int
	// (cast)  left   Op (cast)  rigth --> result 
	//  0000   0000       0000   0000      0000
	//  <<16   <<12       <<8     <<4        <<0

	// the conversion is stored INTO the reference (info needed for the code gen)
	int result = OperatorExpression.ResolveTypeTables[operator][ (lhsId << 4) + expressionId];
	if (result == T_undefined) {
		scope.problemReporter().invalidOperator(this, lhsTb, expressionTb);
		return null;
	}
	if (operator == PLUS && scope.isJavaLangObject(lhsTb)) {
		// Object o = "hello"; 
		// o += " world"  // <--illegal
		scope.problemReporter().invalidOperator(this, lhsTb, expressionTb);
		return null;
	}
	lhs.implicitConversion = result >>> 12;
	expression.implicitConversion = (result >>> 4) & 0x000FF;
	assignmentImplicitConversion = (lhsId << 4) + (result & 0x0000F);
	return lhsTb;
}

