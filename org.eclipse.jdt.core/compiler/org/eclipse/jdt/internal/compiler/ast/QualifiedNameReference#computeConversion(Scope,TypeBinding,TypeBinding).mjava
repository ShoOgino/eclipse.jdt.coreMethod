	/**
	 * @see org.eclipse.jdt.internal.compiler.ast.Expression#computeConversion(org.eclipse.jdt.internal.compiler.lookup.Scope, org.eclipse.jdt.internal.compiler.lookup.TypeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding)
	 */
	public void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType) {
		if (runtimeTimeType == null || compileTimeType == null)
			return;		
		// set the generic cast after the fact, once the type expectation is fully known (no need for strict cast)
		FieldBinding field = null;
		int length = this.otherBindings == null ? 0 : this.otherBindings.length;
		if (length == 0) {
			if ((this.bits & Binding.FIELD) != 0 && this.binding != null && this.binding.isValidBinding()) {
				field = (FieldBinding) this.binding;
			}
		} else {
			field  = this.otherBindings[length-1];
		}
		if (field != null) {
			FieldBinding originalBinding = field.original();
			if (originalBinding != field) {
			    // extra cast needed if method return type has type variable
			    if ((originalBinding.type.tagBits & TagBits.HasTypeVariable) != 0 && runtimeTimeType.id != T_JavaLangObject) {
			    	TypeBinding targetType = (!compileTimeType.isBaseType() && runtimeTimeType.isBaseType()) 
			    		? compileTimeType  // unboxing: checkcast before conversion
			    		: runtimeTimeType;
			    	setGenericCast(length,originalBinding.type.genericCast(targetType));
			    }
			} 	
		}
		super.computeConversion(scope, runtimeTimeType, compileTimeType);
	}

