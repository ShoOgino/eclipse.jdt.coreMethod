	/**
	 * @see org.eclipse.jdt.internal.compiler.ast.Expression#computeConversion(org.eclipse.jdt.internal.compiler.lookup.Scope, org.eclipse.jdt.internal.compiler.lookup.TypeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding)
	 */
	public void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType) {
		
		// set the generic cast after the fact, once the type expectation is fully known (no need for strict cast)
		int length = this.otherBindings == null ? 0 : this.otherBindings.length;
		FieldBinding field = length == 0 ? (FieldBinding)this.binding : this.otherBindings[length-1];
		FieldBinding originalBinding = field.original();
		if (originalBinding != field) {
		    // extra cast needed if method return type has type variable
		    if ((originalBinding.type.tagBits & TagBits.HasTypeVariable) != 0 && runtimeTimeType.id != T_Object) {
		    	setGenericCast(length,originalBinding.type.genericCast(runtimeTimeType));
		    }
		} 	
		super.computeConversion(scope, runtimeTimeType, compileTimeType);
	}

