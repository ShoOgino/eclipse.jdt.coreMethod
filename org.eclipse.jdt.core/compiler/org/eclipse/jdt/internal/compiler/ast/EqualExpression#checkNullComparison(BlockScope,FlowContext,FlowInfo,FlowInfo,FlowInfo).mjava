	private void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse) {
		int rightStatus = this.right.nullStatus(flowInfo);
		int leftStatus = this.left.nullStatus(flowInfo);

		boolean leftNonNullChecked = false;
		boolean rightNonNullChecked = false;

		// check if either is a non-local expression known to be nonnull and compared to null, candidates are
		// - method/field annotated @NonNull
		// - allocation expression, some literals, this reference (see inside expressionNonNullComparison(..))
		boolean checkForNull = ((this.bits & OperatorMASK) >> OperatorSHIFT) == EQUAL_EQUAL;
		if (leftStatus == FlowInfo.NON_NULL && rightStatus == FlowInfo.NULL) {
			leftNonNullChecked = scope.problemReporter().expressionNonNullComparison(this.left, checkForNull);
		} else if (leftStatus == FlowInfo.NULL && rightStatus == FlowInfo.NON_NULL) {
			rightNonNullChecked = scope.problemReporter().expressionNonNullComparison(this.right, checkForNull);
		}
		
		if (!leftNonNullChecked) {
			VariableBinding var = this.left.variableBinding(scope);
			if (var != null && (var.type.tagBits & TagBits.IsBaseType) == 0) {
				checkVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, var, rightStatus, this.left);
			}
		}
		if (!rightNonNullChecked) {
			VariableBinding var = this.right.variableBinding(scope);
			if (var != null && (var.type.tagBits & TagBits.IsBaseType) == 0) {
				checkVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, var, leftStatus, this.right);
			}
		}

		if (leftNonNullChecked || rightNonNullChecked) {
			// above checks have not propagated unrechable into the corresponding branch, do it now:
			if (checkForNull) {
				initsWhenTrue.setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);
			} else {
				initsWhenFalse.setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);
			}
		}
	}

