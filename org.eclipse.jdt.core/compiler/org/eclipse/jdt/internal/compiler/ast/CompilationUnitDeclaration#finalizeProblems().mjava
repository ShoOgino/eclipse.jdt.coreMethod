public void finalizeProblems() {
	if (this.suppressWarningsCount == 0) return;
	int removed = 0;
	CategorizedProblem[] problems = this.compilationResult.problems;
	int problemCount = this.compilationResult.problemCount;
	IrritantSet[] foundIrritants = new IrritantSet[this.suppressWarningsCount];
	CompilerOptions options = this.scope.compilerOptions();
	boolean hasErrors = false;
	nextProblem: for (int iProblem = 0, length = problemCount; iProblem < length; iProblem++) {
		CategorizedProblem problem = problems[iProblem];
		int problemID = problem.getID();
		int irritant = ProblemReporter.getIrritant(problemID);
		if (problem.isError()) {
			if (problemID != IProblem.UnusedWarningToken) {
				// tolerate unused warning tokens which were promoted as errors
				hasErrors = true;
			}
			if (irritant == 0 || !options.suppressOptionalErrors) {
				continue;
			}
		}
		int start = problem.getSourceStart();
		int end = problem.getSourceEnd();
		nextSuppress: for (int iSuppress = 0, suppressCount = this.suppressWarningsCount; iSuppress < suppressCount; iSuppress++) {
			long position = this.suppressWarningScopePositions[iSuppress];
			int startSuppress = (int) (position >>> 32);
			int endSuppress = (int) position;
			if (start < startSuppress) continue nextSuppress;
			if (end > endSuppress) continue nextSuppress;
			if (!this.suppressWarningIrritants[iSuppress].isSet(irritant))
				continue nextSuppress;
			// discard suppressed warning
			removed++;
			problems[iProblem] = null;
			if (this.compilationResult.problemsMap != null) this.compilationResult.problemsMap.remove(problem);
			if (this.compilationResult.firstErrors != null) this.compilationResult.firstErrors.remove(problem);
			if (foundIrritants[iSuppress] == null){
				foundIrritants[iSuppress] = new IrritantSet(irritant);
			} else {
				foundIrritants[iSuppress].set(irritant);
			}
			continue nextProblem;
		}
	}
	// compact remaining problems
	if (removed > 0) {
		for (int i = 0, index = 0; i < problemCount; i++) {
			CategorizedProblem problem;
			if ((problem = problems[i]) != null) {
				if (i > index) {
					problems[index++] = problem;
				} else {
					index++;
				}
			}
		}
		this.compilationResult.problemCount -= removed;
	}
	// flag SuppressWarnings which had no effect (only if no (mandatory) error got detected within unit
	if (!hasErrors) {
		int severity = options.getSeverity(CompilerOptions.UnusedWarningToken);
		if (severity != ProblemSeverities.Ignore) {
			boolean unusedWarningTokenIsWarning = (severity & ProblemSeverities.Error) == 0;
			for (int iSuppress = 0, suppressCount = this.suppressWarningsCount; iSuppress < suppressCount; iSuppress++) {
				Annotation annotation = this.suppressWarningAnnotations[iSuppress];
				if (annotation == null) continue; // implicit annotation
				IrritantSet irritants = this.suppressWarningIrritants[iSuppress];
				if (unusedWarningTokenIsWarning && irritants.areAllSet()) continue; // @SuppressWarnings("all") also suppresses unused warning token
				if (irritants != foundIrritants[iSuppress]) { // mismatch, some warning tokens were unused
					MemberValuePair[] pairs = annotation.memberValuePairs();
					pairLoop: for (int iPair = 0, pairCount = pairs.length; iPair < pairCount; iPair++) {
						MemberValuePair pair = pairs[iPair];
						if (CharOperation.equals(pair.name, TypeConstants.VALUE)) {
							Expression value = pair.value;
							if (value instanceof ArrayInitializer) {
								ArrayInitializer initializer = (ArrayInitializer) value;
								Expression[] inits = initializer.expressions;
								if (inits != null) {
									for (int iToken = 0, tokenCount = inits.length; iToken < tokenCount; iToken++) {
										Constant cst = inits[iToken].constant;
										if (cst != Constant.NotAConstant && cst.typeID() == TypeIds.T_JavaLangString) {
											IrritantSet tokenIrritants = CompilerOptions.warningTokenToIrritants(cst.stringValue());
											if (tokenIrritants != null
													&& !tokenIrritants.areAllSet() // no complaint against @SuppressWarnings("all")
													&& options.isAnyEnabled(tokenIrritants) // if irritant is effectevely enabled
													&& (foundIrritants[iSuppress] == null || !foundIrritants[iSuppress].isAnySet(tokenIrritants))) { // if irritant had no matching problem
												if (unusedWarningTokenIsWarning) {
													int start = value.sourceStart, end = value.sourceEnd;
													nextSuppress: for (int jSuppress = iSuppress - 1; jSuppress >= 0; jSuppress--) {
														long position = this.suppressWarningScopePositions[jSuppress];
														int startSuppress = (int) (position >>> 32);
														int endSuppress = (int) position;
														if (start < startSuppress) continue nextSuppress;
														if (end > endSuppress) continue nextSuppress;
														if (this.suppressWarningIrritants[jSuppress].areAllSet()) break pairLoop; // suppress all?
													}
												}
												this.scope.problemReporter().unusedWarningToken(inits[iToken]);
											}
										}
									}
								}
							} else {
								Constant cst = value.constant;
								if (cst != Constant.NotAConstant && cst.typeID() == T_JavaLangString) {
									IrritantSet tokenIrritants = CompilerOptions.warningTokenToIrritants(cst.stringValue());
									if (tokenIrritants != null
											&& !tokenIrritants.areAllSet() // no complaint against @SuppressWarnings("all")
											&& options.isAnyEnabled(tokenIrritants) // if irritant is effectevely enabled
											&& (foundIrritants[iSuppress] == null || !foundIrritants[iSuppress].isAnySet(tokenIrritants))) { // if irritant had no matching problem
										if (unusedWarningTokenIsWarning) {
											int start = value.sourceStart, end = value.sourceEnd;
											nextSuppress: for (int jSuppress = iSuppress - 1; jSuppress >= 0; jSuppress--) {
												long position = this.suppressWarningScopePositions[jSuppress];
												int startSuppress = (int) (position >>> 32);
												int endSuppress = (int) position;
												if (start < startSuppress) continue nextSuppress;
												if (end > endSuppress) continue nextSuppress;
												if (this.suppressWarningIrritants[jSuppress].areAllSet()) break pairLoop; // suppress all?
											}
										}
										this.scope.problemReporter().unusedWarningToken(value);
									}
								}
							}
							break pairLoop;
						}
					}
				}
			}
		}
	}
}

