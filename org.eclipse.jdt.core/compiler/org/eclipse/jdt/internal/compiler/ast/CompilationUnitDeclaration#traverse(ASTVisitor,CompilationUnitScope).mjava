	public void traverse(
		ASTVisitor visitor,
		CompilationUnitScope unitScope) {

		if (ignoreFurtherInvestigation)
			return;
		try {
			if (visitor.visit(this, this.scope)) {
				boolean isPackageInfo = isPackageInfo();
				if (this.types != null && isPackageInfo) {
		            // resolve synthetic type declaration
					final TypeDeclaration syntheticTypeDeclaration = types[0];
					// resolve javadoc package if any
					final MethodScope classScope = syntheticTypeDeclaration.staticInitializerScope;
					if (this.javadoc != null) {
						this.javadoc.traverse(visitor, classScope);
					}
					final Annotation[] annotations = this.currentPackage.annotations;
					if (annotations != null) {
						int annotationsLength = annotations.length;
						for (int i = 0; i < annotationsLength; i++) {
							annotations[i].traverse(visitor, classScope);
						}
					}
				}
				if (currentPackage != null) {
					currentPackage.traverse(visitor, this.scope);
				}
				if (imports != null) {
					int importLength = imports.length;
					for (int i = 0; i < importLength; i++) {
						imports[i].traverse(visitor, this.scope);
					}
				}
				if (types != null) {
					int typesLength = types.length;
					for (int i = 0; i < typesLength; i++) {
						types[i].traverse(visitor, this.scope);
					}
				}
			}
			visitor.endVisit(this, this.scope);
		} catch (AbortCompilationUnit e) {
			// ignore
		}
	}

