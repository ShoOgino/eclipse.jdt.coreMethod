	public FlowInfo analyseCode(
		BlockScope currentScope,
		FlowContext flowContext,
		FlowInfo flowInfo) {

		Constant opConstant = left.optimizedBooleanConstant();
		if (opConstant != NotAConstant) {
			if (opConstant.booleanValue() == false) {
				// FALSE || anything
				 // need to be careful of scenario:
				//		(x || y) || !z, if passing the left info to the right, it would be swapped by the !
				FlowInfo mergedInfo = left.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();
				mergedInfo = right.analyseCode(currentScope, flowContext, mergedInfo);
				mergedInitStateIndex =
					currentScope.methodScope().recordInitializationStates(mergedInfo);
				return mergedInfo;
			}
		}
		FlowInfo leftInfo, rightInfo;
		leftInfo = left.analyseCode(currentScope, flowContext, flowInfo);
	
		 // need to be careful of scenario:
		//		(x || y) || !z, if passing the left info to the right, it would be swapped by the !
		rightInfo = leftInfo.initsWhenFalse().unconditionalInits().copy();
		rightInitStateIndex =
			currentScope.methodScope().recordInitializationStates(rightInfo);
		int mode = rightInfo.reachMode();
		if (opConstant != NotAConstant && opConstant.booleanValue() == true){
			rightInfo.setReachMode(FlowInfo.SILENT_FAKE_REACHABLE);
		}
		rightInfo = right.analyseCode(currentScope, flowContext, rightInfo);
		rightInfo.setReachMode(mode); // reset back
		FlowInfo mergedInfo = FlowInfo.conditional(
					// merging two true initInfos for such a negative case: if ((t && (b = t)) || f) r = b; // b may not have been initialized
					leftInfo.initsWhenTrue().copy().unconditionalInits().mergedWith(
						rightInfo.initsWhenTrue().copy().unconditionalInits()),
					rightInfo.initsWhenFalse().copy());
		mergedInitStateIndex =
			currentScope.methodScope().recordInitializationStates(mergedInfo);
		return mergedInfo;
	}

