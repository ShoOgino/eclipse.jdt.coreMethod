public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {
	
	Constant inlinedValue;
	if ((inlinedValue = left.constant) == NotAConstant) inlinedValue = left.conditionalConstant();
	if (inlinedValue != NotAConstant){
		if (inlinedValue.booleanValue() == true){ 
			// TRUE || anything
			FlowInfo mergedInfo = left.analyseCode(currentScope, flowContext, flowInfo);
			mergedInitStateIndex = currentScope.methodScope().recordInitializationStates(mergedInfo);
			right.analyseCode(currentScope, flowContext, mergedInfo.copy().markAsFakeReachable(true));
			return mergedInfo;
		} 
	} else {
		if ((inlinedValue = right.constant) == NotAConstant) inlinedValue = right.conditionalConstant();
	}
	if (inlinedValue != NotAConstant){
		// FALSE || anything, anything || TRUE, anything || FALSE
		FlowInfo mergedInfo = left.analyseCode(currentScope, flowContext, flowInfo);
		mergedInfo = right.analyseCode(currentScope, flowContext, mergedInfo);
		mergedInitStateIndex = currentScope.methodScope().recordInitializationStates(mergedInfo);
		return mergedInfo;
	}
	FlowInfo leftInfo, rightInfo;	leftInfo = left.analyseCode(currentScope, flowContext, flowInfo);
	rightInfo = leftInfo.initsWhenFalse().copy();
	rightInitStateIndex = currentScope.methodScope().recordInitializationStates(rightInfo);
	rightInfo = right.analyseCode(currentScope, flowContext, rightInfo);
	FlowInfo mergedInfo = FlowInfo.conditional(
		// merging two true initInfos for such a negative case: if ((t && (b = t)) || f) r = b; // b may not have been initialized
		leftInfo.initsWhenTrue().unconditionalInits().mergedWith(rightInfo.initsWhenTrue().copy().unconditionalInits()), 
		rightInfo.initsWhenFalse());
	mergedInitStateIndex = currentScope.methodScope().recordInitializationStates(mergedInfo);
	return mergedInfo;
}

