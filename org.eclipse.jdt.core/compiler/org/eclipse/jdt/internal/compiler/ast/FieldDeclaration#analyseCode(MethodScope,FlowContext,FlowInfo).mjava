	public FlowInfo analyseCode(
		MethodScope initializationScope,
		FlowContext flowContext,
		FlowInfo flowInfo) {

		if (this.binding != null && this.binding.isPrivate() && !this.binding.isPrivateUsed()) {
			if (!initializationScope.referenceCompilationUnit().compilationResult.hasSyntaxError()) {
				initializationScope.problemReporter().unusedPrivateField(this);
			}
		}
		// cannot define static non-constant field inside nested class
		if (this.binding != null
				&& this.binding.isValidBinding()
				&& this.binding.isStatic()
				&& !this.binding.isConstantValue()
				&& this.binding.declaringClass.isNestedType()
				&& this.binding.declaringClass.isClass() // no need to check for enum, since implicitly static
				&& !this.binding.declaringClass.isStatic()) {
			initializationScope.problemReporter().unexpectedStaticModifierForField(
				(SourceTypeBinding) this.binding.declaringClass,
				this);
		}

		checkAnnotationField: {
			if (!this.binding.declaringClass.isAnnotationType())
				break checkAnnotationField;
			if (this.initialization != null) {
				if (this.binding.type.isArrayType() && (this.initialization instanceof ArrayInitializer))
					break checkAnnotationField;
				if (this.initialization.constant != NotAConstant)
					break checkAnnotationField;
			}
			initializationScope.problemReporter().annotationFieldNeedConstantInitialization(this);
		}
		if (this.initialization != null) {
			flowInfo =
				this.initialization
					.analyseCode(initializationScope, flowContext, flowInfo)
					.unconditionalInits();
			flowInfo.markAsDefinitelyAssigned(this.binding);
		}
		return flowInfo;
	}

