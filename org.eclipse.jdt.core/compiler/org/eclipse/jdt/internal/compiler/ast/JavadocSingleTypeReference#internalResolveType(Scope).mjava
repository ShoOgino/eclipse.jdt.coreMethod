	/*
	 * 
	 */
	private TypeBinding internalResolveType(Scope scope) {
		// handle the error here
		this.constant = NotAConstant;
		if (this.resolvedType != null) { // is a shared type reference which was already resolved
			if (!this.resolvedType.isValidBinding())
				return null; // already reported error
		} else {
			this.resolvedType = getTypeBinding(scope);
			if (!this.resolvedType.isValidBinding()) {
				char[][] tokens = { this.token };
				Binding binding = scope.getTypeOrPackage(tokens);
				if (binding instanceof PackageBinding) {
					this.packageBinding = (PackageBinding) binding;
				} else {
					reportInvalidType(scope);
				}
				return null;
			}
			if (isTypeUseDeprecated(this.resolvedType, scope)) {
				reportDeprecatedType(scope);
			}
		}
		return this.resolvedType;
	}

