/**
 * Synchronized statement code generation
 *
 * @param currentScope org.eclipse.jdt.internal.compiler.lookup.BlockScope
 * @param codeStream org.eclipse.jdt.internal.compiler.codegen.CodeStream
 */
public void generateCode(BlockScope currentScope, CodeStream codeStream) {
	if ((bits & IsReachable) == 0) {
		return;
	}
	// in case the labels needs to be reinitialized
	// when the code generation is restarted in wide mode
	this.anyExceptionLabel = null;

	int pc = codeStream.position;

	// generate the synchronization expression
	expression.generateCode(scope, codeStream, true);
	if (block.isEmptyBlock()) {
		if ((synchroVariable.type == TypeBinding.LONG)
			|| (synchroVariable.type == TypeBinding.DOUBLE)) {
			codeStream.dup2();
		} else {
			codeStream.dup();
		}
		// only take the lock
		codeStream.monitorenter();
		codeStream.monitorexit();
		if (scope != currentScope) {
			codeStream.exitUserScope(scope);
		}
	} else {
		// enter the monitor
		codeStream.store(synchroVariable, true);
		codeStream.monitorenter();

		// generate  the body of the synchronized block
		this.enterAnyExceptionHandler(codeStream);
		block.generateCode(scope, codeStream);
		if (scope != currentScope) {
			// close all locals defined in the synchronized block except the secret local
			codeStream.exitUserScope(scope, synchroVariable);
		}

		BranchLabel endLabel = new BranchLabel(codeStream);
		if (!blockExit) {
			codeStream.load(synchroVariable);
			codeStream.monitorexit();
			this.exitAnyExceptionHandler();
			codeStream.goto_(endLabel);
			this.enterAnyExceptionHandler(codeStream);
		}
		// generate the body of the exception handler
		codeStream.pushOnStack(scope.getJavaLangThrowable());
		if (this.preSynchronizedInitStateIndex != -1) {
			codeStream.removeNotDefinitelyAssignedVariables(currentScope, this.preSynchronizedInitStateIndex);
		}
		this.placeAllAnyExceptionHandler();
		codeStream.load(synchroVariable);
		codeStream.monitorexit();
		this.exitAnyExceptionHandler();
		codeStream.athrow();
		// May loose some local variable initializations : affecting the local variable attributes
		if (this.mergedSynchronizedInitStateIndex != -1) {
			codeStream.removeNotDefinitelyAssignedVariables(currentScope, this.mergedSynchronizedInitStateIndex);
			codeStream.addDefinitelyAssignedVariables(currentScope, this.mergedSynchronizedInitStateIndex);
		}
		if (scope != currentScope) {
			codeStream.removeVariable(this.synchroVariable);
		}
		if (!blockExit) {
			endLabel.place();
		}
	}
	codeStream.recordPositionsFrom(pc, this.sourceStart);
}

