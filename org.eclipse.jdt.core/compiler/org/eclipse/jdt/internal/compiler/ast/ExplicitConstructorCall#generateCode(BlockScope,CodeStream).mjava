	/**
	 * Constructor call code generation
	 *
	 * @param currentScope org.eclipse.jdt.internal.compiler.lookup.BlockScope
	 * @param codeStream org.eclipse.jdt.internal.compiler.codegen.CodeStream
	 */
	public void generateCode(BlockScope currentScope, CodeStream codeStream) {

		if ((bits & IsReachableMASK) == 0) {
			return;
		}
		try {
			((MethodScope) currentScope).isConstructorCall = true;

			int pc = codeStream.position;
			codeStream.aload_0();

			// handling innerclass constructor invocation
			ReferenceBinding targetType;
			if ((targetType = binding.declaringClass).isNestedType()) {
				codeStream.generateSyntheticArgumentValues(
					currentScope,
					targetType,
					discardEnclosingInstance ? null : qualification,
					this);
			}
			// regular code gen
			if (arguments != null) {
				for (int i = 0, max = arguments.length; i < max; i++) {
					arguments[i].generateCode(currentScope, codeStream, true);
				}
			}
			if (syntheticAccessor != null) {
				// synthetic accessor got some extra arguments appended to its signature, which need values
				for (int i = 0,
					max = syntheticAccessor.parameters.length - binding.parameters.length;
					i < max;
					i++) {
					codeStream.aconst_null();
				}
				codeStream.invokespecial(syntheticAccessor);
			} else {
				codeStream.invokespecial(binding);
			}
			codeStream.recordPositionsFrom(pc, this);
		} finally {
			((MethodScope) currentScope).isConstructorCall = false;
		}
	}

