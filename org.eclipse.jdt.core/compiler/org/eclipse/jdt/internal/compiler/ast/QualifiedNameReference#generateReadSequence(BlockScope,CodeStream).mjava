	/*
	 * Generate code for all bindings (local and fields) excluding the last one, which may then be generated code
	 * for a read or write access.
	 */
	public void generateReadSequence(
		BlockScope currentScope,
		CodeStream codeStream) {
			
		// determine the rank until which we now we do not need any actual value for the field access
		int otherBindingsCount = this.otherCodegenBindings == null ? 0 : otherCodegenBindings.length;

		boolean needValue = otherBindingsCount == 0 || !this.otherBindings[0].isStatic();
		switch (bits & RestrictiveFlagMASK) {
			case FIELD :
				lastFieldBinding = (FieldBinding) this.codegenBinding;
				// if first field is actually constant, we can inline it
				if (lastFieldBinding.constant != NotAConstant) {
					break;
				}
				if (needValue && !lastFieldBinding.isStatic()) {
					if ((bits & DepthMASK) != 0) {
						ReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);
						Object[] emulationPath = currentScope.getEmulationPath(targetType, true /*only exact match*/, false/*consider enclosing arg*/);
						codeStream.generateOuterAccess(emulationPath, this, targetType, currentScope);
					} else {
						generateReceiver(codeStream);
					}
				}
				break;
			case LOCAL : // reading the first local variable
				if (!needValue) break; // no value needed
				lastFieldBinding = null;
				LocalVariableBinding localBinding = (LocalVariableBinding) this.codegenBinding;
				// regular local variable read
				if (localBinding.constant != NotAConstant) {
					codeStream.generateConstant(localBinding.constant, 0);
					// no implicit conversion
				} else {
					// outer local?
					if ((bits & DepthMASK) != 0) {
						// outer local can be reached either through a synthetic arg or a synthetic field
						VariableBinding[] path = currentScope.getEmulationPath(localBinding);
						codeStream.generateOuterAccess(path, this, localBinding, currentScope);
					} else {
						codeStream.load(localBinding);
					}
				}
		}

		// all intermediate field accesses are read accesses
		// only the last field binding is a write access
		if (this.otherCodegenBindings != null) {
			for (int i = 0; i < otherBindingsCount; i++) {
				FieldBinding nextField = this.otherCodegenBindings[i];
				if (lastFieldBinding != null) {
					needValue = !nextField.isStatic();
					if (needValue) {
						MethodBinding accessor =
							syntheticReadAccessors == null ? null : syntheticReadAccessors[i]; 
						if (accessor == null) {
							if (lastFieldBinding.constant != NotAConstant) {
								if (this.lastFieldBinding != this.codegenBinding && !this.lastFieldBinding.isStatic()) {
									codeStream.invokeObjectGetClass(); // perform null check
									codeStream.pop();
								}
								codeStream.generateConstant(lastFieldBinding.constant, 0);
							} else if (lastFieldBinding.isStatic()) {
								codeStream.getstatic(lastFieldBinding);
							} else {
								codeStream.getfield(lastFieldBinding);
							}
						} else {
							codeStream.invokestatic(accessor);
						}
					} else {
						if (this.codegenBinding != this.lastFieldBinding && !this.lastFieldBinding.isStatic()){
							codeStream.invokeObjectGetClass(); // perform null check
							codeStream.pop();
						}						
					}
				}
				this.lastFieldBinding = nextField;
			}
		}
	}

