	/*
	 * Generate code for all bindings (local and fields) excluding the last one, which may then be generated code
	 * for a read or write access.
	 */
	public FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream) {
			
		// determine the rank until which we now we do not need any actual value for the field access
		int otherBindingsCount = this.otherCodegenBindings == null ? 0 : otherCodegenBindings.length;
		boolean needValue = otherBindingsCount == 0 || !this.otherBindings[0].isStatic();
		FieldBinding lastFieldBinding = null;
		TypeBinding lastGenericCast = null;
		boolean complyTo14 = currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4;

		switch (bits & RestrictiveFlagMASK) {
			case Binding.FIELD :
				lastFieldBinding = (FieldBinding) this.codegenBinding;
				lastGenericCast = this.genericCast;
				// if first field is actually constant, we can inline it
				if (lastFieldBinding.constant() != Constant.NotAConstant) {
					break;
				}
				if (needValue && !lastFieldBinding.isStatic()) {
					int pc = codeStream.position;
					if ((bits & DepthMASK) != 0) {
						ReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);
						Object[] emulationPath = currentScope.getEmulationPath(targetType, true /*only exact match*/, false/*consider enclosing arg*/);
						codeStream.generateOuterAccess(emulationPath, this, targetType, currentScope);
					} else {
						generateReceiver(codeStream);
					}
					codeStream.recordPositionsFrom(pc, this.sourceStart);
				}
				break;
			case Binding.LOCAL : // reading the first local variable
				if (!needValue) break; // no value needed
				LocalVariableBinding localBinding = (LocalVariableBinding) this.codegenBinding;
				// regular local variable read
				Constant localConstant = localBinding.constant();
				if (localConstant != Constant.NotAConstant) {
					codeStream.generateConstant(localConstant, 0);
					// no implicit conversion
				} else {
					// outer local?
					if ((bits & DepthMASK) != 0) {
						// outer local can be reached either through a synthetic arg or a synthetic field
						VariableBinding[] path = currentScope.getEmulationPath(localBinding);
						codeStream.generateOuterAccess(path, this, localBinding, currentScope);
					} else {
						codeStream.load(localBinding);
					}
				}
		}
						
		// all intermediate field accesses are read accesses
		// only the last field binding is a write access
		if (this.otherCodegenBindings != null) {
			for (int i = 0; i < otherBindingsCount; i++) {
				FieldBinding nextField = this.otherCodegenBindings[i];
				TypeBinding nextGenericCast = this.otherGenericCasts == null ? null : this.otherGenericCasts[i];
				if (lastFieldBinding != null) {
					needValue = !nextField.isStatic();
					Constant fieldConstant = lastFieldBinding.constant();
					if (fieldConstant != Constant.NotAConstant) {
						if (i > 0 && !lastFieldBinding.isStatic()) {
							codeStream.invokeObjectGetClass(); // perform null check
							codeStream.pop();
						}
						if (needValue) {
							codeStream.generateConstant(fieldConstant, 0);
						}
					} else {
						if (needValue || (i > 0 && complyTo14)) {
							MethodBinding accessor = syntheticReadAccessors == null ? null : syntheticReadAccessors[i]; 
							if (accessor == null) {
								if (lastFieldBinding.isStatic()) {
									codeStream.getstatic(lastFieldBinding);
								} else {
									codeStream.getfield(lastFieldBinding);
								}
							} else {
								codeStream.invokestatic(accessor);
							}
							if (needValue) {
								if (lastGenericCast != null) codeStream.checkcast(lastGenericCast);
							} else {
								codeStream.pop();
							}
						} else {
							if (this.codegenBinding != lastFieldBinding && !lastFieldBinding.isStatic()){
								codeStream.invokeObjectGetClass(); // perform null check
								codeStream.pop();
							}						
						}
					}
				}
				lastFieldBinding = nextField;
				lastGenericCast = nextGenericCast;
			}
		}
		return lastFieldBinding;
	}

