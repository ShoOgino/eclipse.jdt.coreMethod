	/*
	 * Type checking for constructor, just another method, except for special check
	 * for recursive constructor invocations.
	 */
	public void resolve(ClassScope upperScope) {

		if (binding == null) {
			ignoreFurtherInvestigation = true;
		}

		// checking for recursive constructor call (protection)
		if (!ignoreFurtherInvestigation && constructorCall == null){
			constructorCall = new ExplicitConstructorCall(ExplicitConstructorCall.ImplicitSuper);
			constructorCall.sourceStart = sourceStart;
			constructorCall.sourceEnd = sourceEnd;
		}

		super.resolve(upperScope);

		try {
			// indirect reference: increment target constructor reference count
			if (constructorCall != null){
				if (constructorCall.binding != null
					&& !constructorCall.isSuperAccess()
					&& constructorCall.binding.isValidBinding()) {
					((ConstructorDeclaration)
							(upperScope.referenceContext.declarationOf(constructorCall.binding))).referenceCount++;
				}
			}
		} catch (AbortMethod e) {
			this.ignoreFurtherInvestigation = true;
		}
	}

