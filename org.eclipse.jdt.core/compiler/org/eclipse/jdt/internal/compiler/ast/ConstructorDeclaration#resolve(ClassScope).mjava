	/*
	 * Type checking for constructor, just another method, except for special check
	 * for recursive constructor invocations.
	 */
	public void resolve(ClassScope upperScope) {

		if (binding == null) {
			ignoreFurtherInvestigation = true;
			//return;
		}

		super.resolve(upperScope);

		try {
			// checking for recursive constructor call
			if (constructorCall != null) {
				// indirect reference: increment target constructor reference count
				if (constructorCall.binding != null
					&& !constructorCall.isSuperAccess()
					&& constructorCall.binding.isValidBinding()) {
					(
						(ConstructorDeclaration)
							(
								upperScope.referenceContext.declarationOf(
									constructorCall.binding))).referenceCount++;
				}
			}
		} catch (AbortMethod e) {
			this.ignoreFurtherInvestigation = true;
		}
	}

