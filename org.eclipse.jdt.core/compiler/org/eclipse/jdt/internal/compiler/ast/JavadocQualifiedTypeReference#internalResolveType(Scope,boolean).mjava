	/*
	 *
	 */
	private TypeBinding internalResolveType(Scope scope, boolean checkBounds) {
		// handle the error here
		constant = NotAConstant;
		if (resolvedType != null) // is a shared type reference which was already resolved
			return resolvedType.isValidBinding() ? resolvedType : null; // already reported error

		resolvedType = getTypeBinding(scope);
		if (!resolvedType.isValidBinding()) {
			Binding binding = scope.getTypeOrPackage(tokens);
			if (binding instanceof PackageBinding) {
				packageBinding = (PackageBinding) binding;
			} else {
				reportInvalidType(scope);
			}
			return null;
		}
		if (isTypeUseDeprecated(resolvedType, scope))
			reportDeprecatedType(scope);
		if (resolvedType instanceof ParameterizedTypeBinding) {
			resolvedType = ((ParameterizedTypeBinding)resolvedType).type;
		}
		return resolvedType;
	}

