	private static boolean checkInvocationArgument(BlockScope scope, Expression argument, TypeBinding parameterType, TypeBinding argumentType) {
		argument.computeConversion(scope, parameterType, argumentType);

		if (argumentType != NullBinding && parameterType.isWildcard() && ((WildcardBinding) parameterType).kind != Wildcard.SUPER)
		    return true; // unsafeWildcardInvocation
		if (argumentType != parameterType) {
			if (argumentType.needsUncheckedConversion(parameterType)) {
//			if (argumentType.isRawType() && (parameterType.isBoundParameterizedType() || parameterType.isGenericType())) {
				scope.problemReporter().unsafeTypeConversion(argument, argumentType, parameterType);
			}
		}
		return false;
	}

