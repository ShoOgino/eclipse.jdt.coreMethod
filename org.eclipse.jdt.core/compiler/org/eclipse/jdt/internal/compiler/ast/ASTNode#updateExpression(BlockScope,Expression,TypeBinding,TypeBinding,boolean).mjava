	private static TypeBinding updateExpression(BlockScope scope, Expression expression, TypeBinding argumentType, TypeBinding parameterType, boolean inferenceFinished) {
		TypeBinding updatedArgumentType = null;
		boolean isPolyAlloc = false;
		if (expression instanceof Invocation) {
			Invocation invocation = (Invocation)expression;
			updatedArgumentType = updateInvocation(invocation, parameterType);
			if (updatedArgumentType == null && invocation.inferenceKind() != 0 && !invocation.hasInferenceFinished())
				isPolyAlloc = true;
		} else if (expression instanceof ConditionalExpression) {
			updatedArgumentType = updateConditionExpresion(scope, ((ConditionalExpression) expression), argumentType, parameterType, inferenceFinished);
		}

		if (updatedArgumentType == null && (isPolyAlloc || argumentType instanceof PolyTypeBinding)) {
			updatedArgumentType = updateOtherPolyExpression(scope, expression, parameterType, inferenceFinished);
		}
		return updatedArgumentType;
	}

