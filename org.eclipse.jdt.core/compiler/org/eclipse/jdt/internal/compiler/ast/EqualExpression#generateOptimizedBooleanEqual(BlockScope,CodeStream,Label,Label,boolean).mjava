/**
 * Boolean generation for == with boolean operands
 *
 * Note this code does not optimize conditional constants !!!!
 */
public void generateOptimizedBooleanEqual(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired) {
	int pc = codeStream.position;
	// optimized cases: true == x, false == x
	if (left.constant != NotAConstant) {
		boolean inline = left.constant.booleanValue();
		right.generateOptimizedBoolean(currentScope, codeStream, (inline ? trueLabel : falseLabel), (inline ? falseLabel : trueLabel), valueRequired);
		codeStream.recordPositionsFrom(pc, this);
		return;
	} // optimized cases: x == true, x == false
	if (right.constant != NotAConstant) {
		boolean inline = right.constant.booleanValue();
		left.generateOptimizedBoolean(currentScope, codeStream, (inline ? trueLabel : falseLabel), (inline ? falseLabel : trueLabel), valueRequired);
		codeStream.recordPositionsFrom(pc, this);
		return;
	}
	// default case
	left.generateCode(currentScope, codeStream, valueRequired);
	right.generateCode(currentScope, codeStream, valueRequired);
	if (valueRequired) {
		if (falseLabel == null) {
			if (trueLabel != null) {
				// implicit falling through the FALSE case
				codeStream.if_icmpeq(trueLabel);
			}
		} else {
			// implicit falling through the TRUE case
			if (trueLabel == null) {
				codeStream.if_icmpne(falseLabel);
			} else {
				// no implicit fall through TRUE/FALSE --> should never occur
			}
		}
	}
	codeStream.recordPositionsFrom(pc, this);
}

