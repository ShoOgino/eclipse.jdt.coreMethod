	public TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedType) {
		// Array initializers can only occur on the right hand side of an assignment
		// expression, therefore the expected type contains the valid information
		// concerning the type that must be enforced by the elements of the array initializer.
	
		// this method is recursive... (the test on isArrayType is the stop case)
	
		this.constant = NotAConstant;
		
		// allow new List<?>[5]
		if ((this.bits & IsAnnotationDefaultValue) == 0) { // annotation default value need only to be commensurate JLS9.7
			TypeBinding leafComponentType = expectedType.leafComponentType();
			if (leafComponentType.isBoundParameterizedType() || leafComponentType.isGenericType() || leafComponentType.isTypeVariable()) {
			    scope.problemReporter().illegalGenericArray(leafComponentType, this);
			}
		}
			
		if (expectedType.isArrayType()) {
			this.resolvedType = this.binding = (ArrayBinding) expectedType;
			if (this.expressions == null)
				return this.binding;
			TypeBinding elementType = this.binding.elementsType();
			for (int i = 0, length = expressions.length; i < length; i++) {
				Expression expression = expressions[i];
				TypeBinding exprType = expression instanceof ArrayInitializer
						? expression.resolveTypeExpecting(scope, elementType)
						: expression.resolveType(scope);
				if (exprType == null)
					return null;

				// Compile-time conversion required?
				if (elementType != exprType) // must call before computeConversion() and typeMismatchError()
					scope.compilationUnitScope().recordTypeConversion(elementType, exprType);

				if ((expression.isConstantValueOfTypeAssignableToType(exprType, elementType)
						|| (elementType.isBaseType() && BaseTypeBinding.isWidening(elementType.id, exprType.id)))
						|| exprType.isCompatibleWith(elementType)) {
					expression.computeConversion(scope, elementType, exprType);
				} else if (scope.isBoxingCompatibleWith(exprType, elementType) 
									|| (exprType.isBaseType()  // narrowing then boxing ?
											&& scope.compilerOptions().sourceLevel >= JDK1_5 // autoboxing
											&& !elementType.isBaseType()
											&& expression.isConstantValueOfTypeAssignableToType(exprType, scope.environment().computeBoxingType(elementType)))) {
					expression.computeConversion(scope, elementType, exprType);
				} else {
					scope.problemReporter().typeMismatchError(exprType, elementType, expression);
					return null;
				} 				
			}
			return binding;
		}
		
		// infer initializer type for error reporting based on first element
		TypeBinding leafElementType = null;
		int dim = 1;
		if (expressions == null) {
			leafElementType = scope.getJavaLangObject();
		} else {
			Expression currentExpression = expressions[0];
			while(currentExpression != null && currentExpression instanceof ArrayInitializer) {
				dim++;
				Expression[] subExprs = ((ArrayInitializer) currentExpression).expressions;
				if (subExprs == null){
					leafElementType = scope.getJavaLangObject();
					currentExpression = null;
					break;
				}
				currentExpression = ((ArrayInitializer) currentExpression).expressions[0];
			}
			if (currentExpression != null) {
				leafElementType = currentExpression.resolveType(scope);
			}
		}
		if (leafElementType != null) {
			TypeBinding probableTb = scope.createArrayType(leafElementType, dim);
			scope.problemReporter().typeMismatchError(probableTb, expectedType, this);
		}
		return null;
	}

