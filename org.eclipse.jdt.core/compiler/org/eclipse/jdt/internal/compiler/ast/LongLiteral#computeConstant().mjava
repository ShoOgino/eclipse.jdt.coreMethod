public void computeConstant() {
	//the overflow (when radix=10) is tested using the fact that
	//the value should always grow during its computation

	int length = source.length - 1; //minus one because the last char is 'l' or 'L'
	
	long computedValue ;
	if (source[0] == '0')
	{	if (length == 1) { 	constant = Constant.fromValue(0L);	return;	}
		final int shift,radix;
		int j ;
		if ( (source[1] == 'x') | (source[1] == 'X') )
		{	shift = 4 ; j = 2; radix = 16;}
		else
		{	shift = 3 ; j = 1; radix = 8;}
		int nbDigit = 0;
		while (source[j]=='0') 
		{	j++; //jump over redondant zero
			if ( j == length)
			{	//watch for 0000000000000L
				constant = Constant.fromValue(value = 0L);
				return ;}}
				
		int digitValue ;
		if ((digitValue = Character.digit(source[j++],radix))	< 0 ) 	
		{	constant = FORMAT_ERROR; return ;}
		if (digitValue >= 8) nbDigit = 4;
		else 	if (digitValue >= 4) nbDigit = 3;
				else 	if (digitValue >= 2) nbDigit = 2;
						else nbDigit = 1; //digitValue is not 0
		computedValue = digitValue ;
		while (j<length)
		{	if ((digitValue = Character.digit(source[j++],radix))	< 0 ) 	
			{	constant = FORMAT_ERROR; return ;}
			if ((nbDigit += shift) > 64) return /*constant stays null*/ ;
			computedValue = (computedValue<<shift) | digitValue ;}}

	else
	{	//-----------case radix=10-----------------
		long previous = computedValue = 0;
		for (int i = 0 ; i < length; i++) 
		{	int digitValue ;	
			if ((digitValue = Character.digit(source[i], 10)) < 0 ) return /*constant stays null*/ ;
			previous = computedValue;
			computedValue = 10 * computedValue + digitValue ;
			if (previous > computedValue) return /*constant stays null*/;}}
	
	constant = Constant.fromValue(value = computedValue);
}

