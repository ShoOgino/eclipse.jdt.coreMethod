@Override
public void computeConstant() {
	char[] token = this.reducedForm != null ? this.reducedForm : this.source;
	int tokenLength = token.length;
	int length = tokenLength - 1;
	int radix = 10;
	int j = 0;
	if (token[0] == '0') {
		if (length == 1) {
			this.constant = LongConstant.fromValue(0L);
			return;
		}
		if ((token[1] == 'x') || (token[1] == 'X')) {
			radix = 16;
			j = 2;
		} else if ((token[1] == 'b') || (token[1] == 'B')) {
			radix = 2;
			j = 2;
		} else {
			radix = 8;
			j = 1;
		}
	}
	switch(radix) {
		case 2 :
			if ((length - 2) > 64) { // remove 0b or 0B
				return; /*constant stays null*/
			}
			computeValue(token, length, radix, j);
			break;
		case 16 :
			if (tokenLength <= 19) {
				if (CharOperation.equals(token, HEXA_MINUS_ONE_VALUE)) {
					this.constant = LongConstant.fromValue(-1L);
					return;
				}
				computeValue(token, length, radix, j);
			}
			break;
		case 10 :
			if (tokenLength > DECIMAL_MAX_VALUE.length
					|| (tokenLength == DECIMAL_MAX_VALUE.length
							&& CharOperation.compareTo(token, DECIMAL_MAX_VALUE, 0, length) > 0)) {
				return; /*constant stays null*/
			}
			computeValue(token, length, radix, j);
			break;
		case 8 :
			if (tokenLength <= 24) {
				if (tokenLength == 24 && token[j] > '1') {
					return; /*constant stays null*/
				}
				if (CharOperation.equals(token, OCTAL_MINUS_ONE_VALUE)) {
					this.constant = LongConstant.fromValue(-1L);
					return;
				}
				computeValue(token, length, radix, j);
			}
			break;
	}
}

