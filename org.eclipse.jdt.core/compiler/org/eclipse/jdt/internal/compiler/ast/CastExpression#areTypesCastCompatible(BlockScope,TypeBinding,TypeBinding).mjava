	public final void areTypesCastCompatible(
		BlockScope scope,
		TypeBinding castTb,
		TypeBinding expressionTb) {

		// see specifications p.68
		// handle errors and process constant when needed

		// if either one of the type is null ==>
		// some error has been already reported some where ==>
		// we then do not report an obvious-cascade-error.

		needRuntimeCheckcast = false;
		if (castTb == null || expressionTb == null)
			return;
		if (castTb.isBaseType()) {
			if (expressionTb.isBaseType()) {
				if (expressionTb == castTb) {
					constant = expression.constant; //use the same constant
					return;
				}
				if (scope.areTypesCompatible(expressionTb, castTb)
					|| BaseTypeBinding.isNarrowing(castTb.id, expressionTb.id)) {
					expression.implicitConversion = (castTb.id << 4) + expressionTb.id;
					if (expression.constant != Constant.NotAConstant)
						constant = expression.constant.castTo(expression.implicitConversion);
					return;
				}
			}
			scope.problemReporter().typeCastError(this, castTb, expressionTb);
			return;
		}

		//-----------cast to something which is NOT a base type--------------------------	
		if (expressionTb == NullBinding)
			return; //null is compatible with every thing

		if (expressionTb.isBaseType()) {
			scope.problemReporter().typeCastError(this, castTb, expressionTb);
			return;
		}

		if (expressionTb.isArrayType()) {
			if (castTb.isArrayType()) {
				//------- (castTb.isArray) expressionTb.isArray -----------
				TypeBinding expressionEltTb = ((ArrayBinding) expressionTb).elementsType(scope);
				if (expressionEltTb.isBaseType()) {
					// <---stop the recursion------- 
					if (((ArrayBinding) castTb).elementsType(scope) == expressionEltTb)
						needRuntimeCheckcast = true;
					else
						scope.problemReporter().typeCastError(this, castTb, expressionTb);
					return;
				}
				// recursively on the elements...
				areTypesCastCompatible(
					scope,
					((ArrayBinding) castTb).elementsType(scope),
					expressionEltTb);
				return;
			} else if (
				castTb.isClass()) {
				//------(castTb.isClass) expressionTb.isArray ---------------	
				if (scope.isJavaLangObject(castTb))
					return;
			} else { //------- (castTb.isInterface) expressionTb.isArray -----------
				if (scope.isJavaLangCloneable(castTb) || scope.isJavaIoSerializable(castTb)) {
					needRuntimeCheckcast = true;
					return;
				}
			}
			scope.problemReporter().typeCastError(this, castTb, expressionTb);
			return;
		}

		if (expressionTb.isClass()) {
			if (castTb.isArrayType()) {
				// ---- (castTb.isArray) expressionTb.isClass -------
				if (scope.isJavaLangObject(expressionTb)) { // potential runtime error
					needRuntimeCheckcast = true;
					return;
				}
			} else if (
				castTb.isClass()) { // ----- (castTb.isClass) expressionTb.isClass ------
				if (scope.areTypesCompatible(expressionTb, castTb)) // no runtime error
					return;
				if (scope.areTypesCompatible(castTb, expressionTb)) {
					// potential runtime  error
					needRuntimeCheckcast = true;
					return;
				}
			} else { // ----- (castTb.isInterface) expressionTb.isClass -------  
				if (((ReferenceBinding) expressionTb).isFinal()) {
					// no subclass for expressionTb, thus compile-time check is valid
					if (scope.areTypesCompatible(expressionTb, castTb))
						return;
				} else { // a subclass may implement the interface ==> no check at compile time
					needRuntimeCheckcast = true;
					return;
				}
			}
			scope.problemReporter().typeCastError(this, castTb, expressionTb);
			return;
		}

		//	if (expressionTb.isInterface()) { cannot be anything else
		if (castTb.isArrayType()) {
			// ----- (castTb.isArray) expressionTb.isInterface ------
			if (scope.isJavaLangCloneable(expressionTb)
				|| scope.isJavaIoSerializable(expressionTb)) // potential runtime error
				needRuntimeCheckcast = true;
			else
				scope.problemReporter().typeCastError(this, castTb, expressionTb);
			return;
		} else if (
			castTb.isClass()) { // ----- (castTb.isClass) expressionTb.isInterface --------
			if (scope.isJavaLangObject(castTb)) // no runtime error
				return;
			if (((ReferenceBinding) castTb).isFinal()) {
				// no subclass for castTb, thus compile-time check is valid
				if (!scope.areTypesCompatible(castTb, expressionTb)) {
					// potential runtime error
					scope.problemReporter().typeCastError(this, castTb, expressionTb);
					return;
				}
			}
		} else { // ----- (castTb.isInterface) expressionTb.isInterface -------
			if (castTb != expressionTb
				&& (Scope.compareTypes(castTb, expressionTb) == NotRelated)) {
				MethodBinding[] castTbMethods = ((ReferenceBinding) castTb).methods();
				MethodBinding[] expressionTbMethods =
					((ReferenceBinding) expressionTb).methods();
				int exprMethodsLength = expressionTbMethods.length;
				for (int i = 0, castMethodsLength = castTbMethods.length;
					i < castMethodsLength;
					i++)
					for (int j = 0; j < exprMethodsLength; j++)
						if (castTbMethods[i].returnType != expressionTbMethods[j].returnType)
							if (castTbMethods[i].selector == expressionTbMethods[j].selector)
								if (castTbMethods[i].areParametersEqual(expressionTbMethods[j]))
									scope.problemReporter().typeCastError(this, castTb, expressionTb);
			}
		}
		needRuntimeCheckcast = true;
		return;
	}

