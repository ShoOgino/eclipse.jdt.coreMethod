public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {

	Constant inlinedValue;
	if ((inlinedValue = left.constant) == NotAConstant) inlinedValue = left.conditionalConstant();
	if (inlinedValue != NotAConstant){
		if (inlinedValue.booleanValue() == false){ 
			// FALSE && anything
			FlowInfo mergedInfo = left.analyseCode(currentScope, flowContext, flowInfo);
			mergedInitStateIndex = currentScope.methodScope().recordInitializationStates(mergedInfo);
			right.analyseCode(currentScope, flowContext, mergedInfo.copy().markAsFakeReachable(true));
			return mergedInfo;
		} 
	} else {
		if ((inlinedValue = right.constant) == NotAConstant) inlinedValue = right.conditionalConstant();
	}
	if (inlinedValue != NotAConstant){
		// TRUE && anything, anything && TRUE, anything && FALSE
		FlowInfo mergedInfo = left.analyseCode(currentScope, flowContext, flowInfo);
		mergedInfo = right.analyseCode(currentScope, flowContext, mergedInfo);
		mergedInitStateIndex = currentScope.methodScope().recordInitializationStates(mergedInfo);
		return mergedInfo;
	}
	FlowInfo leftInfo = left.analyseCode(currentScope, flowContext, flowInfo);
	FlowInfo rightInfo = leftInfo.initsWhenTrue().copy();
	rightInitStateIndex = currentScope.methodScope().recordInitializationStates(rightInfo);
	rightInfo = right.analyseCode(currentScope, flowContext, rightInfo);
	FlowInfo mergedInfo = FlowInfo.conditional(
													rightInfo.initsWhenTrue(), 
													leftInfo.initsWhenFalse().unconditionalInits().mergedWith(rightInfo.initsWhenFalse().copy().unconditionalInits()));
	mergedInitStateIndex = currentScope.methodScope().recordInitializationStates(mergedInfo);
	return mergedInfo;
}

