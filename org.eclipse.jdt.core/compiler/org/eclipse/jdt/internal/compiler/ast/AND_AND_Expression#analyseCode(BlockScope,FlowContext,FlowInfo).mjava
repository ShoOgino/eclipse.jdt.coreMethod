	public FlowInfo analyseCode(
		BlockScope currentScope,
		FlowContext flowContext,
		FlowInfo flowInfo) {

		Constant opConstant = left.optimizedBooleanConstant();
		if (opConstant != NotAConstant) {
			if (opConstant.booleanValue() == true) {
				// TRUE && anything
				 // need to be careful of scenario:
				//		(x && y) && !z, if passing the left info to the right, it would be swapped by the !
				FlowInfo mergedInfo = left.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits(); 
				mergedInfo = right.analyseCode(currentScope, flowContext, mergedInfo);
				mergedInitStateIndex =
					currentScope.methodScope().recordInitializationStates(mergedInfo);
				return mergedInfo;
			}
		}
		FlowInfo leftInfo = left.analyseCode(currentScope, flowContext, flowInfo);
		 // need to be careful of scenario:
		//		(x && y) && !z, if passing the left info to the right, it would be swapped by the !
		FlowInfo rightInfo = leftInfo.initsWhenTrue().unconditionalInits().copy();
		if (opConstant != NotAConstant && opConstant.booleanValue() == false) rightInfo.markAsFakeReachable(true);

		rightInitStateIndex =
			currentScope.methodScope().recordInitializationStates(rightInfo);
		rightInfo = right.analyseCode(currentScope, flowContext, rightInfo);
		FlowInfo mergedInfo =
			FlowInfo.conditional(
				rightInfo.initsWhenTrue().copy(),
				leftInfo.initsWhenFalse().copy().unconditionalInits().mergedWith(
					rightInfo.initsWhenFalse().copy().unconditionalInits()));
		mergedInitStateIndex =
			currentScope.methodScope().recordInitializationStates(mergedInfo);
		return mergedInfo;
	}

