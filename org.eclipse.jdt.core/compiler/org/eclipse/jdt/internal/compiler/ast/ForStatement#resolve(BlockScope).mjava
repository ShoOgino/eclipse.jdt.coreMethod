	@Override
	public void resolve(BlockScope upperScope) {
		LocalVariableBinding[] patternVariablesInTrueScope = null;
		LocalVariableBinding[] patternVariablesInFalseScope = null;

		if (this.condition != null && this.condition.containsPatternVariable()) {
			this.condition.collectPatternVariablesToScope(null, upperScope);
			patternVariablesInTrueScope = this.condition.getPatternVariablesWhenTrue();
			patternVariablesInFalseScope = this.condition.getPatternVariablesWhenFalse();
		}
		// use the scope that will hold the init declarations
		this.scope = (this.bits & ASTNode.NeededScope) != 0 ? new BlockScope(upperScope) : upperScope;
		if (this.initializations != null)
			for (int i = 0, length = this.initializations.length; i < length; i++)
				this.initializations[i].resolve(this.scope);
		if (this.condition != null) {
			TypeBinding type = this.condition.resolveTypeExpecting(this.scope, TypeBinding.BOOLEAN);
			this.condition.computeConversion(this.scope, type, type);
		}
		if (this.increments != null)
			for (int i = 0, length = this.increments.length; i < length; i++) {
				this.increments[i].resolveWithPatternVariablesInScope(patternVariablesInTrueScope, this.scope);
			}

		if (this.action != null) {
			this.action.resolveWithPatternVariablesInScope(patternVariablesInTrueScope, this.scope);
			this.action.injectPatternVariablesIfApplicable(patternVariablesInFalseScope, this.scope,
					(statement) -> { return !statement.breaksOut(null);});
		}
	}

