	@Override
	public void resolve(BlockScope upperScope) {
		boolean hasPatternVariable = (this.bits & ASTNode.HasInstancePatternExpression) != 0;
		if (hasPatternVariable)
			upperScope = (BlockScope) upperScope.parent;
		// use the scope that will hold the init declarations
		this.scope = (this.bits & ASTNode.NeededScope) != 0 ? new BlockScope(upperScope) : upperScope;
		if (this.initializations != null)
			for (int i = 0, length = this.initializations.length; i < length; i++)
				this.initializations[i].resolve(this.scope);
		if (this.condition != null) {
		 	if (hasPatternVariable) {
		 	 	this.scope = this.patternScope = new BlockScope(this.scope);
		 	 	this.condition.resolvePatternVariable(this.scope, true);
		 	}
		}

		if (this.condition != null) {
			TypeBinding type = this.condition.resolveTypeExpecting(this.scope, TypeBinding.BOOLEAN);
			this.condition.computeConversion(this.scope, type, type);
		}
		if (this.increments != null)
			for (int i = 0, length = this.increments.length; i < length; i++)
				this.increments[i].resolve(this.scope);
		if (this.action != null) {
			BlockScope falseScope = null;
			BlockScope trueScope = null;
			if (hasPatternVariable) {
				trueScope = this.patternScope;
				if (this.action.doesNotCompleteNormally()) {
					falseScope = upperScope;
				}
			}
			this.action.resolve(hasPatternVariable ? trueScope : this.scope);
			if (falseScope != null)
				this.condition.resolvePatternVariable(falseScope, false);
		}
	}

