	@Override
	protected boolean generateFieldAssignment(FieldBinding field, int i) {
		// TODO : Add Code for missing field assignments
		/* JLS 14 8.10.5 Compact Record Constructor Declarations
		 * In addition, at the end of the body of the compact constructor, all the fields
		 * corresponding to the record components of R that are definitely unassigned
		 * (16 (Definite Assignment)) are implicitly initialized to the value of the
		 * corresponding formal parameter. These fields are implicitly initialized in the
		 * order that they are declared in the record component list.
		 */
		/*
		FieldReference lhs = new FieldReference(field.name, 0);
		lhs.receiver = ThisReference.implicitThis();
		lhs.actualReceiverType = this.recordDeclaration.binding;
		lhs.binding = field;
		lhs.resolvedType = field.type;
		//TODO: set definitelyAssigned to true;
		//TODO: Check anything to be done for null analysis.
		SingleNameReference rhs = new SingleNameReference(field.name, 0);
		rhs.actualReceiverType = this.recordDeclaration.binding;
 
		rhs.resolvedType = field.type;
		Assignment assignment = new Assignment(lhs, rhs, 0);
		Statement[] stmts = this.statements;
		if (this.statements == null) {
			this.statements = new Statement[] { assignment };
		} else {
			int len = this.statements.length;
			System.arraycopy(
					this.statements,
					0,
					stmts = new Statement[len + 1],
					0,
					len);
			stmts[len] = assignment;
			this.statements = stmts;
		}*/
		return true; // TODO: Enable the code above during flow analysis. 
	}

