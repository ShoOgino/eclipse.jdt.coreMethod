	private void checkAndCreateImplicitHashCode(ProblemReporter problemReporter) {
		if (null != getMethodByName(TypeConstants.HASHCODE))
			return;
		MethodDeclaration md = createMethodDeclaration(TypeConstants.HASHCODE, TypeReference.baseTypeReference(TypeIds.T_int, 0));
		MarkerAnnotation overrideAnnotation = new MarkerAnnotation(new SingleTypeReference(TypeConstants.JAVA_LANG_OVERRIDE[2], 0), 0);
		md.annotations = new Annotation[] { overrideAnnotation };

		List<Expression> initVals = new ArrayList<>();
		if (this.args != null) {
			for (Argument arg : this.args) {
				if (RecordDeclaration.disallowedComponentNames.contains(new String(arg.name)))
					continue;
				FieldReference fr = new FieldReference(arg.name, -1);
				fr.receiver = new ThisReference(-1, -1);
				Expression receiver = null;
				if (arg.type instanceof ArrayTypeReference) {
					MessageSend arraysHashCode = new MessageSend();
					arraysHashCode.selector = HASHCODE;
					arraysHashCode.receiver =
							new QualifiedNameReference(JAVA_UTIL_ARRAYS,
							this.default_long_pos, -1, -1);
					arraysHashCode.arguments = new Expression[] { fr};
					initVals.add(arraysHashCode);
					continue;
				} else if (arg.type.isBaseTypeReference()) {
					QualifiedNameReference boxReference = new QualifiedNameReference(
							RecordDeclaration.getBoxedName(arg.type.getLastToken()),
							this.default_long_pos, -1, -1);
					MessageSend m = new MessageSend();
					m.receiver = boxReference;
					m.selector = TypeConstants.VALUEOF;  // Integer.valueOf(int)
					m.arguments = new Expression[] { fr };
					receiver = m;
				} else {
					receiver = fr; //this.field
				}
				MessageSend messageSend = new MessageSend();
				messageSend.receiver = receiver;
				messageSend.selector = HASHCODE;
				initVals.add(messageSend);
			}
		}
		ArrayInitializer ai = new ArrayInitializer();
		ai.expressions = initVals.toArray(new Expression[0]);
		ArrayAllocationExpression aae = new ArrayAllocationExpression();
		aae.dimensions = new Expression[1];
		aae.dimensions[0] = null;
		aae.initializer = ai;
		aae.type = new SingleTypeReference(INT, -1);
		MessageSend arraysHashCode = new MessageSend();
		arraysHashCode.selector = HASHCODE;
		arraysHashCode.receiver =
				new QualifiedNameReference(JAVA_UTIL_ARRAYS,
				this.default_long_pos, -1, -1);
		arraysHashCode.arguments = new Expression[] { aae };
		md.statements = new Statement[] { new ReturnStatement(arraysHashCode, -1, -1) };
		md.isImplicit = true;
	}

