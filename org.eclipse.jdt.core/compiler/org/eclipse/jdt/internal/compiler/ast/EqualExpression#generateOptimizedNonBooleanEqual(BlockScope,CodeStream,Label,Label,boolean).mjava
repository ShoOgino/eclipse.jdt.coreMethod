/**
 * Boolean generation for == with non-boolean operands
 *
 */
public void generateOptimizedNonBooleanEqual(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired) {

	int pc = codeStream.position;
	Constant inline;
	if ((inline = right.constant) != NotAConstant) {
		// optimized case: x == null
		if (right.constant == NullConstant.Default) {
			left.generateCode(currentScope, codeStream, valueRequired);
			if (valueRequired) {
				if (falseLabel == null) {
					if (trueLabel != null) {
						// implicit falling through the FALSE case
						codeStream.ifnull(trueLabel);
					}
				} else {
					// implicit falling through the TRUE case
					if (trueLabel == null) {
						codeStream.ifnonnull(falseLabel);
					} else {
						// no implicit fall through TRUE/FALSE --> should never occur
					}
				}
			}
			codeStream.recordPositionsFrom(pc, this.sourceStart);
			return;
		}
		// optimized case: x == 0
		if (((left.implicitConversion >> 4) == T_int) && (inline.intValue() == 0)) {
			left.generateCode(currentScope, codeStream, valueRequired);
			if (valueRequired) {
				if (falseLabel == null) {
					if (trueLabel != null) {
						// implicit falling through the FALSE case
						codeStream.ifeq(trueLabel);
					}
				} else {
					// implicit falling through the TRUE case
					if (trueLabel == null) {
						codeStream.ifne(falseLabel);
					} else {
						// no implicit fall through TRUE/FALSE --> should never occur
					}
				}
			}
			codeStream.recordPositionsFrom(pc, this.sourceStart);
			return;
		}
	}
	if ((inline = left.constant) != NotAConstant) {
		// optimized case: null == x
		if (left.constant == NullConstant.Default) {
			right.generateCode(currentScope, codeStream, valueRequired);
			if (valueRequired) {
				if (falseLabel == null) {
					if (trueLabel != null) {
						// implicit falling through the FALSE case
						codeStream.ifnull(trueLabel);
					}
				} else {
					// implicit falling through the TRUE case
					if (trueLabel == null) {
						codeStream.ifnonnull(falseLabel);
					} else {
						// no implicit fall through TRUE/FALSE --> should never occur
					}
				}
			}
			codeStream.recordPositionsFrom(pc, this.sourceStart);
			return;
		}
		// optimized case: 0 == x
		if (((left.implicitConversion >> 4) == T_int)
			&& (inline.intValue() == 0)) {
			right.generateCode(currentScope, codeStream, valueRequired);
			if (valueRequired) {
				if (falseLabel == null) {
					if (trueLabel != null) {
						// implicit falling through the FALSE case
						codeStream.ifeq(trueLabel);
					}
				} else {
					// implicit falling through the TRUE case
					if (trueLabel == null) {
						codeStream.ifne(falseLabel);
					} else {
						// no implicit fall through TRUE/FALSE --> should never occur
					}
				}
			}
			codeStream.recordPositionsFrom(pc, this.sourceStart);
			return;
		}
	}
	// default case
	left.generateCode(currentScope, codeStream, valueRequired);
	right.generateCode(currentScope, codeStream, valueRequired);
	if (valueRequired) {
		if (falseLabel == null) {
			if (trueLabel != null) {
				// implicit falling through the FALSE case
				switch (left.implicitConversion >> 4) { // operand runtime type
					case T_int :
						codeStream.if_icmpeq(trueLabel);
						break;
					case T_float :
						codeStream.fcmpl();
						codeStream.ifeq(trueLabel);
						break;
					case T_long :
						codeStream.lcmp();
						codeStream.ifeq(trueLabel);
						break;
					case T_double :
						codeStream.dcmpl();
						codeStream.ifeq(trueLabel);
						break;
					default :
						codeStream.if_acmpeq(trueLabel);
				}
			}
		} else {
			// implicit falling through the TRUE case
			if (trueLabel == null) {
				switch (left.implicitConversion >> 4) { // operand runtime type
					case T_int :
						codeStream.if_icmpne(falseLabel);
						break;
					case T_float :
						codeStream.fcmpl();
						codeStream.ifne(falseLabel);
						break;
					case T_long :
						codeStream.lcmp();
						codeStream.ifne(falseLabel);
						break;
					case T_double :
						codeStream.dcmpl();
						codeStream.ifne(falseLabel);
						break;
					default :
						codeStream.if_acmpne(falseLabel);
				}
			} else {
				// no implicit fall through TRUE/FALSE --> should never occur
			}
		}
	}
	codeStream.recordPositionsFrom(pc, this.sourceStart);
}

