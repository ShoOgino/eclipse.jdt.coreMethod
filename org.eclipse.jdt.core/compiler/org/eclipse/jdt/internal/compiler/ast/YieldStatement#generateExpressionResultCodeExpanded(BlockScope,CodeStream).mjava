protected void generateExpressionResultCodeExpanded(BlockScope currentScope, CodeStream codeStream) {
	SwitchExpression se = this.switchExpression;
	addSecretYieldResultValue(this.scope);
	assert this.secretYieldResultValue != null;
	codeStream.record(this.secretYieldResultValue);
	SingleNameReference lhs = new SingleNameReference(this.secretYieldResultValue.name, 0);
	lhs.binding = this.secretYieldResultValue;
	lhs.bits &= ~ASTNode.RestrictiveFlagMASK; // clear bits
	lhs.bits |= Binding.LOCAL;
	lhs.bits |= ASTNode.IsSecretYieldValueUsage;
	((LocalVariableBinding) lhs.binding).markReferenced(); // TODO : Can be skipped?
	Assignment assignment = new Assignment(lhs, this.expression, 0);
	assignment.generateCode(this.scope, codeStream);

	int pc = codeStream.position;
	// generation of code responsible for invoking the finally
	// blocks in sequence
	if (this.subroutines != null){
		for (int i = 0, max = this.subroutines.length; i < max; i++){
			SubRoutineStatement sub = this.subroutines[i];
			sub.exitAnyExceptionHandler();
			sub.exitDeclaredExceptionHandlers(codeStream);
			SwitchExpression se1 = sub.getSwitchExpression();
			setSubroutineSwitchExpression(sub);
			boolean didEscape = sub.generateSubRoutineInvocation(currentScope, codeStream, this.targetLabel, this.initStateIndex, null);
			sub.setSwitchExpression(se1);
			if (didEscape) {
				codeStream.removeVariable(this.secretYieldResultValue);
					codeStream.recordPositionsFrom(pc, this.sourceStart);
					SubRoutineStatement.reenterAllExceptionHandlers(this.subroutines, i, codeStream);
					if (this.initStateIndex != -1) {
						codeStream.removeNotDefinitelyAssignedVariables(currentScope, this.initStateIndex);
						codeStream.addDefinitelyAssignedVariables(currentScope, this.initStateIndex);
					}
					restartExceptionLabels(codeStream);
					return;
			}
		}
	}
	se.loadStoredTypesAndKeep(codeStream);
	codeStream.load(this.secretYieldResultValue);
	codeStream.removeVariable(this.secretYieldResultValue);

	codeStream.goto_(this.targetLabel);
	codeStream.recordPositionsFrom(pc, this.sourceStart);
	SubRoutineStatement.reenterAllExceptionHandlers(this.subroutines, -1, codeStream);
	if (this.initStateIndex != -1) {
		codeStream.removeNotDefinitelyAssignedVariables(currentScope, this.initStateIndex);
		codeStream.addDefinitelyAssignedVariables(currentScope, this.initStateIndex);
	}
}

