	private TypeBinding getResultNumeric(Set<TypeBinding> typeSet, TypeBinding[] armTypes) {
		// note: if an expression has a type integer, then it will be a constant 
		// since non-constant integers are already processed before reaching here.

		/*
		 * Otherwise, if any result expression is of type char, and every other result expression is either of
		 * type char, or of type byte, or a constant expression of type int with a value that is representable
		 * in the type char, then the byte results are widened to char and the int results are narrowed to char.
		 */

		 /*  Otherwise, if any result expression is of type short, and every other result expression is either of
		 *  type short, or of type byte, or a constant expression of type int with a value that is representable
		 *  in the type short, then the byte results are widened to short and the int results are narrowed to
		 *  short.
		 */
		 /*  Otherwise, if any result expression is of type byte, and every other result expression is either of
		 *  type byte or a constant expression of type int with a value that is representable in the type byte,
		 *  then the int results are narrowed to byte.
		 */

		// DO NOT Change the order below [as per JLS 12 5.6.3 item 2, sub-items 5,6 and 7].
		TypeBinding[] csb = new TypeBinding[] {TypeBinding.CHAR, TypeBinding.SHORT, TypeBinding.BYTE};
		for (TypeBinding c : csb) {
			TypeBinding result = check_csb(typeSet, c);
			if (result != null)
				return result;
		}
		 /*  Otherwise, all the result expressions that are not of type int are widened to int. */
		return TypeBinding.INT;
	}

