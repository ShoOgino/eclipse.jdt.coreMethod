	public boolean isCompatibleWith(final TypeBinding left, final Scope someScope) {
		
		final MethodBinding sam = left.getSingleAbstractMethod(this.enclosingScope);
		
		if (sam == null || !sam.isValidBinding())
			return false;
		if (sam.parameters.length != this.arguments.length)
			return false;
		
		if (!this.shapeAnalysisComplete) {
			IErrorHandlingPolicy oldPolicy = this.enclosingScope.problemReporter().switchErrorHandlingPolicy(silentErrorHandlingPolicy);
			try {
				final LambdaExpression copy = copy();
				if (copy == null)
					return false;
				copy.setExpressionContext(this.expressionContext);
				copy.setExpectedType(left);
				copy.resolveType(this.enclosingScope);

				if (!argumentsTypeElided()) {
					this.argumentTypes = copy.argumentTypes;
				}
			
				if (this.body instanceof Block) {
					if (!this.returnsVoid) {
						this.valueCompatible = copy.doesNotCompleteNormally();
					}
				} else {
					this.voidCompatible = ((Expression) this.body).statementExpression();
				}
			
			} finally {
				this.shapeAnalysisComplete = true;
				this.enclosingScope.problemReporter().switchErrorHandlingPolicy(oldPolicy);
			}
		}

		if (sam.returnType.id == TypeIds.T_void) {
			if (!this.voidCompatible)
				return false;
		} else {
			if (!this.valueCompatible)
				return false;
		}
		
		if (!isPertinentToApplicability())
			return true;
	
		Expression [] returnExpressions = this.resultExpressions;
		for (int i = 0, length = returnExpressions.length; i < length; i++) {
			if (!returnExpressions[i].resolvedType.isCompatibleWith(sam.returnType))
				if (sam.returnType.id != TypeIds.T_void || this.body instanceof Block)
					return false;
		}
	
		TypeBinding [] samPararameterTypes = sam.parameters;
		for (int i = 0, length = samPararameterTypes.length; i < length; i++) { // lengths known to be equal.
			if (TypeBinding.notEquals(samPararameterTypes[i], this.argumentTypes[i]))
				return false;
		}

		return true;
	}

