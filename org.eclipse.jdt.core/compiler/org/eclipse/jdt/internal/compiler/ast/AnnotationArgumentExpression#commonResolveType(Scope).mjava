	private TypeBinding commonResolveType(Scope scope) {
		constant = NotAConstant;
		if (this.resolvedType != null) { // is a shared type reference which was already resolved
			if (!this.resolvedType.isValidBinding()) {
				return null; // already reported error
			}
		}
		else {
			if (this.argument != null) {
				TypeReference typeRef = this.argument.type;
				if (typeRef != null) {
					this.resolvedType = typeRef.getTypeBinding(scope);
					if (!this.resolvedType.isValidBinding()) {
						scope.problemReporter().invalidType(this, this.resolvedType);
						return null;
					}
					if (isTypeUseDeprecated(this.resolvedType, scope)) {
						scope.problemReporter().deprecatedType(this.resolvedType, this);
						return null;
					}
					return this.resolvedType;
				}
			}
		}
		return null;
	}

