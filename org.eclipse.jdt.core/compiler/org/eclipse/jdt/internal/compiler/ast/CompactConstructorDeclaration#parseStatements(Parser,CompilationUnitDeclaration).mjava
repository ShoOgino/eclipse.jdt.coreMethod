	@Override
	public void parseStatements(Parser parser, CompilationUnitDeclaration unit) {
		if (this.isImplicit && this.constructorCall == null) {
			this.constructorCall = SuperReference.implicitSuperConstructorCall();
			this.constructorCall.sourceStart = this.sourceStart;
			this.constructorCall.sourceEnd = this.sourceEnd;
			return;
		}
		parser.parse(this, unit, false);
		ASTVisitor visitor = new ASTVisitor() {
			@Override
			public boolean visit(MethodDeclaration methodDeclaration, ClassScope skope) {
				return false;
			}
			@Override
			public boolean visit(ReturnStatement returnStatement, BlockScope skope) {
				parser.problemReporter().recordCompactConstructorHasReturnStatement(returnStatement);
				return false;
			}
		};
		if (!this.isImplicit)
			unit.traverse(visitor, unit.scope);
	}

