public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext,
		FlowInfo flowInfo) {
	// keep implementation in sync with BinaryExpression#analyseCode
	if (this.referencesTable == null) {
		return super.analyseCode(currentScope, flowContext, flowInfo);
	}
	try {
		BinaryExpression cursor;
		cursor = this.referencesTable[0];
		flowInfo = cursor.left.analyseCode(currentScope, flowContext, flowInfo).
				unconditionalInits();
		if (cursor.resolvedType.id != TypeIds.T_JavaLangString) {
			cursor.left.checkNPE(currentScope, flowContext, flowInfo);
		}
		for (int i = 0, end = this.arity; i < end; i ++) {
			cursor = this.referencesTable[i];
			flowInfo = cursor.right.
					analyseCode(currentScope, flowContext, flowInfo).
						unconditionalInits();
			if (cursor.resolvedType.id != TypeIds.T_JavaLangString) {
				cursor.right.checkNPE(currentScope, flowContext, flowInfo);
			}
		}
		flowInfo = this.right.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();
		if (this.resolvedType.id != TypeIds.T_JavaLangString) {
			this.right.checkNPE(currentScope, flowContext, flowInfo);
		}
		return flowInfo;
	} finally {
		// account for exception possibly thrown by arithmetics
		flowContext.recordAbruptExit();
	}
}

