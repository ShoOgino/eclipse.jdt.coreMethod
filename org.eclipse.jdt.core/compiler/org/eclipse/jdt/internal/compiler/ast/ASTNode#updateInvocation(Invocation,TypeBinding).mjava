	private static TypeBinding updateInvocation(Invocation innerInvocation, TypeBinding targetType) {
		boolean invocationFinished = false;
		MethodBinding updatedMethod = innerInvocation.binding();
		if (innerInvocation.hasInferenceFinished() && updatedMethod != null) {
			// outer invocation already included invocation type inference for this inner
			invocationFinished = true;
		} else {
			// Inner Inference?
			InferenceContext18 infCtx18 = innerInvocation.inferenceContext();
			if (infCtx18 != null) {
				// Previous time around we only performed Invocation Applicability Inference, do the rest now:
				updatedMethod = infCtx18.getInvocationTypeInferenceSolution(innerInvocation, targetType);
				if (updatedMethod != null) {
					innerInvocation.updateBindings(updatedMethod);
					invocationFinished = true;
				}
			}
		}
		if (invocationFinished) {
			if (updatedMethod.isConstructor())
				return updatedMethod.declaringClass;
			else
				return updatedMethod.returnType;
		}
		return null;
	}

