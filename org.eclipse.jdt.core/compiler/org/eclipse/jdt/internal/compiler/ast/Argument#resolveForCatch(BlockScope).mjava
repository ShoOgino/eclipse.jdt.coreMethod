	public TypeBinding resolveForCatch(BlockScope scope) {

		// resolution on an argument of a catch clause
		// provide the scope with a side effect : insertion of a LOCAL
		// that represents the argument. The type must be from JavaThrowable

		TypeBinding exceptionType = this.type.resolveType(scope);
		if (exceptionType == null) return null;
		if (exceptionType.isGenericType() || exceptionType.isParameterizedType()) {
			scope.problemReporter().invalidParameterizedExceptionType(exceptionType, this);
			return null;
		}
		TypeBinding throwable = scope.getJavaLangThrowable();
		if (!exceptionType.isCompatibleWith(throwable)) {
			scope.problemReporter().typeMismatchError(exceptionType, throwable, this);
			return null;
		}
		
		Binding existingVariable = scope.getBinding(name, BindingIds.VARIABLE, this, false /*do not resolve hidden field*/);
		if (existingVariable != null && existingVariable.isValidBinding()){
			if (existingVariable instanceof LocalVariableBinding && this.hiddenVariableDepth == 0) {
				scope.problemReporter().redefineArgument(this);
				return null;
			}
			scope.problemReporter().localVariableHiding(this, existingVariable, false);
		}

		binding = new LocalVariableBinding(this, exceptionType, modifiers, false); // argument decl, but local var  (where isArgument = false)
		scope.addLocalVariable(binding);
		binding.constant = NotAConstant;
		return exceptionType;
	}

