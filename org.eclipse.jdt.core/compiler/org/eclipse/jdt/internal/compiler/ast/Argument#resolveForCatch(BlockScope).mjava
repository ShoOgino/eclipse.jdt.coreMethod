	public TypeBinding resolveForCatch(BlockScope scope) {

		// resolution on an argument of a catch clause
		// provide the scope with a side effect : insertion of a LOCAL
		// that represents the argument. The type must be from JavaThrowable

		TypeBinding exceptionType = this.type.resolveType(scope, true /* check bounds*/);
		if (exceptionType == null) return null;
		if (exceptionType.isBoundParameterizedType()) {
			scope.problemReporter().invalidParameterizedExceptionType(exceptionType, this);
			return null;
		}
		if (exceptionType.isTypeVariable()) {
			scope.problemReporter().invalidTypeVariableAsException(exceptionType, this);
			return null;
		}
		if (exceptionType.isArrayType() && ((ArrayBinding) exceptionType).leafComponentType == TypeBinding.VOID) {
			scope.problemReporter().variableTypeCannotBeVoidArray(this);
			return null;
		}
		if (exceptionType.findSuperTypeErasingTo(TypeIds.T_JavaLangThrowable, true) == null) {
			scope.problemReporter().cannotThrowType(this.type, exceptionType);
			return null;
		}			
		
		Binding existingVariable = scope.getBinding(name, Binding.VARIABLE, this, false /*do not resolve hidden field*/);
		if (existingVariable != null && existingVariable.isValidBinding()){
			if (existingVariable instanceof LocalVariableBinding && this.hiddenVariableDepth == 0) {
				scope.problemReporter().redefineArgument(this);
			} else {
				scope.problemReporter().localVariableHiding(this, existingVariable, false);
			}
		}

		this.binding = new LocalVariableBinding(this, exceptionType, modifiers, false); // argument decl, but local var  (where isArgument = false)
		resolveAnnotations(scope, this.annotations, this.binding);
		
		scope.addLocalVariable(binding);
		binding.setConstant(Constant.NotAConstant);
		return exceptionType;
	}

