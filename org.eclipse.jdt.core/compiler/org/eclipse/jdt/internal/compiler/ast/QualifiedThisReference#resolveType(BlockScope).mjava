	public TypeBinding resolveType(BlockScope scope) {
		constant = NotAConstant;
		TypeBinding qualificationTb = qualification.resolveType(scope);
		if (qualificationTb == null)
			return null;

		// the qualification MUST exactly match some enclosing type name
		// Its possible to qualify 'this' by the name of the current class
		int depth = 0;
		currentCompatibleType = scope.referenceType().binding;
		while (currentCompatibleType != null
			&& currentCompatibleType != qualificationTb) {
			depth++;
			currentCompatibleType =
				currentCompatibleType.isStatic() ? null : currentCompatibleType.enclosingType();
		}
		bits |= (depth & 0xFF) << DepthSHIFT; // encoded depth into 8 bits

		if (currentCompatibleType == null) {
			scope.problemReporter().incorrectEnclosingInstanceReference(
				this,
				qualificationTb);
			return null;
		}

		// Ensure one cannot write code like: B() { super(B.this); }
		if (depth == 0) {
			if (!checkAccess(scope.methodScope(), qualificationTb))
				return null;
		} else {
			// Could also be targeting an enclosing instance inside a super constructor invocation
			//	class X {
			//		public X(int i) {
			//			this(new Object() { Object obj = X.this; });
			//		}
			//	}

			MethodScope methodScope = scope.methodScope();
			while (methodScope != null) {
				if (methodScope.enclosingSourceType() == currentCompatibleType) {
					if (!this.checkAccess(methodScope, qualificationTb))
						return null;
					break;
				}
				methodScope = methodScope.parent.methodScope();
			}
		}
		return qualificationTb;
	}

