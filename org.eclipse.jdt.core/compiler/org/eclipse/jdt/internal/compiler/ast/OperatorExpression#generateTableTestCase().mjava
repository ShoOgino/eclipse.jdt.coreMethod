public static final String generateTableTestCase(){
	//return a String which is a java method allowing to test
	//the non zero entries of all tables

	/* slow code */

	/*
	org.eclipse.jdt.internal.compiler.ast.
	OperatorExpression.generateTableTestCase();
	*/

	int[] operators = new int[]{AND,AND_AND,DIVIDE,GREATER,GREATER_EQUAL,
			LEFT_SHIFT,LESS,LESS_EQUAL,MINUS,MULTIPLY,OR,OR_OR,PLUS,REMAINDER,
			RIGHT_SHIFT,UNSIGNED_RIGHT_SHIFT,XOR};

	class Decode {
		public  final String constant(int code){
			switch(code){ 
				case T_boolean 	: return "true" ;
				case T_byte		: return "((byte) 3)" ;
				case T_char		: return "'A'" ;
				case T_double	: return "300.0d" ;
				case T_float	: return "100.0f" ;
				case T_int		: return "1" ;
				case T_long		: return "7L" ;
				case T_String	: return "\"hello-world\"" ;
				case T_null		: return "null";
				case T_short	: return "((short) 5)";
				case T_Object	: return "null";}
			return "";}

		public  final String type(int code){
			switch(code){ 
				case T_boolean 	: return "z" ;
				case T_byte		: return "b" ;
				case T_char		: return "c" ;
				case T_double	: return "d" ;
				case T_float	: return "f" ;
				case T_int		: return "i" ;
				case T_long		: return "l" ;
				case T_String	: return "str" ;
				case T_null		: return "null";
				case T_short	: return "s";
				case T_Object	: return "obj";}
			return "xxx";}
		
		public  final String operator(int operator){
				switch (operator) {
				case EQUAL_EQUAL :	return "==";
				case LESS_EQUAL :	return "<=";
				case GREATER_EQUAL :return ">=";
				case LEFT_SHIFT :	return "<<";
				case RIGHT_SHIFT :	return ">>";
				case UNSIGNED_RIGHT_SHIFT :	return ">>>";
				case OR_OR :return "||";
				case AND_AND :		return "&&";
				case PLUS :			return "+";
				case MINUS :		return "-";
				case NOT :			return "!";
				case REMAINDER :	return "%";
				case XOR :			return "^";
				case AND :			return "&";
				case MULTIPLY :		return "*";
				case OR :			return "|";
				case TWIDDLE :		return "~";
				case DIVIDE :		return "/";
				case GREATER :		return ">";
				case LESS :			return "<";	};
			return "????";}
	}

		
	Decode decode = new Decode();
	String s ;
	s = "\tpublic static void binaryOperationTablesTestCase(){\n" +

		"\t\t//TC test : all binary operation (described in tables)\n"+
		"\t\t//method automatically generated by\n"+
		"\t\t//org.eclipse.jdt.internal.compiler.ast.OperatorExpression.generateTableTestCase();\n"+
	
		"\t\tString str0 ;\t String str\t= "+decode.constant(T_String)+";\n"+
		"\t\tint i0 ;\t int i\t= "+decode.constant(T_int)+" ;\n"+
		"\t\tboolean z0;\t boolean z\t= "+decode.constant(T_boolean)+";\n"+
		"\t\tchar c0; \t char  c\t= "+decode.constant(T_char)+" ;\n"+
		"\t\tfloat f0; \t float f\t= "+decode.constant(T_float)+" ;\n"+
		"\t\tdouble d0;\t double d\t= "+decode.constant(T_double)+" ;\n"+
		"\t\tbyte b0; \t byte b\t= "+decode.constant(T_byte)+";\n"+
		"\t\tshort s0; \t short s\t= "+decode.constant(T_short)+";\n"+
		"\t\tlong l0; \t long l\t= "+decode.constant(T_long)+" ;\n"+
		"\t\tObject obj0; \t Object obj\t= "+decode.constant(T_Object)+" ;\n"+

		"\n";

	int error = 0;		
	for (int i=0; i < operators.length ; i++)
	{	int operator = operators[i];
		for (int left=0; left<16;left++)
		for (int right=0; right<16;right++)
		{	int result = (ResolveTypeTables[operator][(left<<4)+right]) & 0x0000F;
			if (result != T_undefined)

				//1/ First regular computation then 2/ comparaison
				//with a compile time constant (generated by the compiler)
				//	z0 = s >= s;
				//	if ( z0 != (((short) 5) >= ((short) 5)))
				//		System.out.println(155);

			{	s += "\t\t"+decode.type(result)+"0"+" = "+decode.type(left);
				s += " "+decode.operator(operator)+" "+decode.type(right)+";\n";
				String begin = result == T_String ? "\t\tif (! " : "\t\tif ( ";
				String test = result == T_String ? ".equals(" : " != (" ;
				s += begin	+decode.type(result)+"0"+test
							+decode.constant(left)+" "
							+decode.operator(operator)+" "
							+decode.constant(right)+"))\n";
				s += "\t\t\tSystem.out.println("+ (++error) +");\n";
								
				}}}
		
	return s += "\n\t\tSystem.out.println(\"binary tables test : done\");}" ;
		}

