	public static final String generateTableTestCase(){
		//return a String which is a java method allowing to test
		//the non zero entries of all tables
	
		/*
		org.eclipse.jdt.internal.compiler.ast.
		OperatorExpression.generateTableTestCase();
		*/
	
		int[] operators = new int[]{AND,AND_AND,DIVIDE,GREATER,GREATER_EQUAL,
				LEFT_SHIFT,LESS,LESS_EQUAL,MINUS,MULTIPLY,OR,OR_OR,PLUS,REMAINDER,
				RIGHT_SHIFT,UNSIGNED_RIGHT_SHIFT,XOR};
	
		class Decode {
			public  final String constant(int code){
				switch(code){ 
					case T_boolean 	: return "true"; //$NON-NLS-1$
					case T_byte		: return "((byte) 3)"; //$NON-NLS-1$
					case T_char		: return "'A'"; //$NON-NLS-1$
					case T_double	: return "300.0d"; //$NON-NLS-1$
					case T_float	: return "100.0f"; //$NON-NLS-1$
					case T_int		: return "1"; //$NON-NLS-1$
					case T_long		: return "7L"; //$NON-NLS-1$
					case T_String	: return "\"hello-world\""; //$NON-NLS-1$
					case T_null		: return "null"; //$NON-NLS-1$
					case T_short	: return "((short) 5)"; //$NON-NLS-1$
					case T_Object	: return "null";} //$NON-NLS-1$
				return "";} //$NON-NLS-1$
	
			public  final String type(int code){
				switch(code){ 
					case T_boolean 	: return "z"; //$NON-NLS-1$
					case T_byte		: return "b"; //$NON-NLS-1$
					case T_char		: return "c"; //$NON-NLS-1$
					case T_double	: return "d"; //$NON-NLS-1$
					case T_float	: return "f"; //$NON-NLS-1$
					case T_int		: return "i"; //$NON-NLS-1$
					case T_long		: return "l"; //$NON-NLS-1$
					case T_String	: return "str"; //$NON-NLS-1$
					case T_null		: return "null"; //$NON-NLS-1$
					case T_short	: return "s"; //$NON-NLS-1$
					case T_Object	: return "obj";} //$NON-NLS-1$
				return "xxx";} //$NON-NLS-1$
			
			public  final String operator(int operator){
					switch (operator) {
					case EQUAL_EQUAL :	return "=="; //$NON-NLS-1$
					case LESS_EQUAL :	return "<="; //$NON-NLS-1$
					case GREATER_EQUAL :return ">="; //$NON-NLS-1$
					case LEFT_SHIFT :	return "<<"; //$NON-NLS-1$
					case RIGHT_SHIFT :	return ">>"; //$NON-NLS-1$
					case UNSIGNED_RIGHT_SHIFT :	return ">>>"; //$NON-NLS-1$
					case OR_OR :return "||"; //$NON-NLS-1$
					case AND_AND :		return "&&"; //$NON-NLS-1$
					case PLUS :			return "+"; //$NON-NLS-1$
					case MINUS :		return "-"; //$NON-NLS-1$
					case NOT :			return "!"; //$NON-NLS-1$
					case REMAINDER :	return "%"; //$NON-NLS-1$
					case XOR :			return "^"; //$NON-NLS-1$
					case AND :			return "&"; //$NON-NLS-1$
					case MULTIPLY :		return "*"; //$NON-NLS-1$
					case OR :			return "|"; //$NON-NLS-1$
					case TWIDDLE :		return "~"; //$NON-NLS-1$
					case DIVIDE :		return "/"; //$NON-NLS-1$
					case GREATER :		return ">"; //$NON-NLS-1$
					case LESS :			return "<";	} //$NON-NLS-1$
				return "????";} //$NON-NLS-1$
		}
	
			
		Decode decode = new Decode();
		String s;
	
		s = "\tpublic static void binaryOperationTablesTestCase(){\n" + //$NON-NLS-1$
	
			"\t\t//TC test : all binary operation (described in tables)\n"+ //$NON-NLS-1$
			"\t\t//method automatically generated by\n"+ //$NON-NLS-1$
			"\t\t//org.eclipse.jdt.internal.compiler.ast.OperatorExpression.generateTableTestCase();\n"+ //$NON-NLS-1$
		
			"\t\tString str0;\t String str\t= "+decode.constant(T_String)+";\n"+ //$NON-NLS-1$ //$NON-NLS-2$
			"\t\tint i0;\t int i\t= "+decode.constant(T_int)+";\n"+ //$NON-NLS-1$ //$NON-NLS-2$
			"\t\tboolean z0;\t boolean z\t= "+decode.constant(T_boolean)+";\n"+ //$NON-NLS-1$ //$NON-NLS-2$
			"\t\tchar c0; \t char  c\t= "+decode.constant(T_char)+";\n"+ //$NON-NLS-1$ //$NON-NLS-2$
			"\t\tfloat f0; \t float f\t= "+decode.constant(T_float)+";\n"+ //$NON-NLS-1$ //$NON-NLS-2$
			"\t\tdouble d0;\t double d\t= "+decode.constant(T_double)+";\n"+ //$NON-NLS-1$ //$NON-NLS-2$
			"\t\tbyte b0; \t byte b\t= "+decode.constant(T_byte)+";\n"+ //$NON-NLS-1$ //$NON-NLS-2$
			"\t\tshort s0; \t short s\t= "+decode.constant(T_short)+";\n"+ //$NON-NLS-1$ //$NON-NLS-2$
			"\t\tlong l0; \t long l\t= "+decode.constant(T_long)+";\n"+ //$NON-NLS-1$ //$NON-NLS-2$
			"\t\tObject obj0; \t Object obj\t= "+decode.constant(T_Object)+";\n"+ //$NON-NLS-1$ //$NON-NLS-2$
			"\n"; //$NON-NLS-1$
	
		int error = 0;		
		for (int i=0; i < operators.length; i++)
		{	int operator = operators[i];
			for (int left=0; left<16;left++)
			for (int right=0; right<16;right++)
			{	int result = (ResolveTypeTables[operator][(left<<4)+right]) & 0x0000F;
				if (result != T_undefined)
	
					//1/ First regular computation then 2/ comparaison
					//with a compile time constant (generated by the compiler)
					//	z0 = s >= s;
					//	if ( z0 != (((short) 5) >= ((short) 5)))
					//		System.out.println(155);
	
				{	s += "\t\t"+decode.type(result)+"0"+" = "+decode.type(left); //$NON-NLS-1$ //$NON-NLS-3$ //$NON-NLS-2$
					s += " "+decode.operator(operator)+" "+decode.type(right)+";\n"; //$NON-NLS-2$ //$NON-NLS-1$ //$NON-NLS-3$
					String begin = result == T_String ? "\t\tif (! " : "\t\tif ( "; //$NON-NLS-2$ //$NON-NLS-1$
					String test = result == T_String ? ".equals(" : " != ("; //$NON-NLS-2$ //$NON-NLS-1$
					s += begin	+decode.type(result)+"0"+test //$NON-NLS-1$
								+decode.constant(left)+" " //$NON-NLS-1$
								+decode.operator(operator)+" " //$NON-NLS-1$
								+decode.constant(right)+"))\n"; //$NON-NLS-1$
					s += "\t\t\tSystem.out.println("+ (++error) +");\n"; //$NON-NLS-1$ //$NON-NLS-2$
									
					}
				}
			}
			
		return s += "\n\t\tSystem.out.println(\"binary tables test : done\");}"; //$NON-NLS-1$
	}

