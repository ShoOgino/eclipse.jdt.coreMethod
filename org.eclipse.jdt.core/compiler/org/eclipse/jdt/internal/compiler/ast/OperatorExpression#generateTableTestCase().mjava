public static final String generateTableTestCase(){
	//return a String which is a java method allowing to test
	//the non zero entries of all tables

	/* slow code */

	/*
	org.eclipse.jdt.internal.compiler.ast.
	OperatorExpression.generateTableTestCase();
	*/

	int[] operators = new int[]{AND,AND_AND,DIVIDE,GREATER,GREATER_EQUAL,
			LEFT_SHIFT,LESS,LESS_EQUAL,MINUS,MULTIPLY,OR,OR_OR,PLUS,REMAINDER,
			RIGHT_SHIFT,UNSIGNED_RIGHT_SHIFT,XOR};

	class Decode {
		public  final String constant(int code){
			switch(code){ 
				case T_boolean 	: return "true"/*nonNLS*/ ;
				case T_byte		: return "((byte) 3)"/*nonNLS*/ ;
				case T_char		: return "'A'"/*nonNLS*/ ;
				case T_double	: return "300.0d"/*nonNLS*/ ;
				case T_float	: return "100.0f"/*nonNLS*/ ;
				case T_int		: return "1"/*nonNLS*/ ;
				case T_long		: return "7L"/*nonNLS*/ ;
				case T_String	: return "\"hello-world\""/*nonNLS*/ ;
				case T_null		: return "null"/*nonNLS*/;
				case T_short	: return "((short) 5)"/*nonNLS*/;
				case T_Object	: return "null"/*nonNLS*/;}
			return ""/*nonNLS*/;}

		public  final String type(int code){
			switch(code){ 
				case T_boolean 	: return "z"/*nonNLS*/ ;
				case T_byte		: return "b"/*nonNLS*/ ;
				case T_char		: return "c"/*nonNLS*/ ;
				case T_double	: return "d"/*nonNLS*/ ;
				case T_float	: return "f"/*nonNLS*/ ;
				case T_int		: return "i"/*nonNLS*/ ;
				case T_long		: return "l"/*nonNLS*/ ;
				case T_String	: return "str"/*nonNLS*/ ;
				case T_null		: return "null"/*nonNLS*/;
				case T_short	: return "s"/*nonNLS*/;
				case T_Object	: return "obj"/*nonNLS*/;}
			return "xxx"/*nonNLS*/;}
		
		public  final String operator(int operator){
				switch (operator) {
				case EQUAL_EQUAL :	return "=="/*nonNLS*/;
				case LESS_EQUAL :	return "<="/*nonNLS*/;
				case GREATER_EQUAL :return ">="/*nonNLS*/;
				case LEFT_SHIFT :	return "<<"/*nonNLS*/;
				case RIGHT_SHIFT :	return ">>"/*nonNLS*/;
				case UNSIGNED_RIGHT_SHIFT :	return ">>>"/*nonNLS*/;
				case OR_OR :return "||"/*nonNLS*/;
				case AND_AND :		return "&&"/*nonNLS*/;
				case PLUS :			return "+"/*nonNLS*/;
				case MINUS :		return "-"/*nonNLS*/;
				case NOT :			return "!"/*nonNLS*/;
				case REMAINDER :	return "%"/*nonNLS*/;
				case XOR :			return "^"/*nonNLS*/;
				case AND :			return "&"/*nonNLS*/;
				case MULTIPLY :		return "*"/*nonNLS*/;
				case OR :			return "|"/*nonNLS*/;
				case TWIDDLE :		return "~"/*nonNLS*/;
				case DIVIDE :		return "/"/*nonNLS*/;
				case GREATER :		return ">"/*nonNLS*/;
				case LESS :			return "<"/*nonNLS*/;	};
			return "????"/*nonNLS*/;}
	}

		
	Decode decode = new Decode();
	String s ;
	s = "\tpublic static void binaryOperationTablesTestCase(){\n"/*nonNLS*/ +

		"\t\t//TC test : all binary operation (described in tables)\n"/*nonNLS*/+
		"\t\t//method automatically generated by\n"/*nonNLS*/+
		"\t\t//org.eclipse.jdt.internal.compiler.ast.OperatorExpression.generateTableTestCase();\n"/*nonNLS*/+
	
		"\t\tString str0 ;\t String str\t= "/*nonNLS*/+decode.constant(T_String)+";\n"/*nonNLS*/+
		"\t\tint i0 ;\t int i\t= "/*nonNLS*/+decode.constant(T_int)+" ;\n"/*nonNLS*/+
		"\t\tboolean z0;\t boolean z\t= "/*nonNLS*/+decode.constant(T_boolean)+";\n"/*nonNLS*/+
		"\t\tchar c0; \t char  c\t= "/*nonNLS*/+decode.constant(T_char)+" ;\n"/*nonNLS*/+
		"\t\tfloat f0; \t float f\t= "/*nonNLS*/+decode.constant(T_float)+" ;\n"/*nonNLS*/+
		"\t\tdouble d0;\t double d\t= "/*nonNLS*/+decode.constant(T_double)+" ;\n"/*nonNLS*/+
		"\t\tbyte b0; \t byte b\t= "/*nonNLS*/+decode.constant(T_byte)+";\n"/*nonNLS*/+
		"\t\tshort s0; \t short s\t= "/*nonNLS*/+decode.constant(T_short)+";\n"/*nonNLS*/+
		"\t\tlong l0; \t long l\t= "/*nonNLS*/+decode.constant(T_long)+" ;\n"/*nonNLS*/+
		"\t\tObject obj0; \t Object obj\t= "/*nonNLS*/+decode.constant(T_Object)+" ;\n"/*nonNLS*/+

		"\n"/*nonNLS*/;

	int error = 0;		
	for (int i=0; i < operators.length ; i++)
	{	int operator = operators[i];
		for (int left=0; left<16;left++)
		for (int right=0; right<16;right++)
		{	int result = (ResolveTypeTables[operator][(left<<4)+right]) & 0x0000F;
			if (result != T_undefined)

				//1/ First regular computation then 2/ comparaison
				//with a compile time constant (generated by the compiler)
				//	z0 = s >= s;
				//	if ( z0 != (((short) 5) >= ((short) 5)))
				//		System.out.println(155);

			{	s += "\t\t"/*nonNLS*/+decode.type(result)+"0"/*nonNLS*/+" = "/*nonNLS*/+decode.type(left);
				s += " "/*nonNLS*/+decode.operator(operator)+" "/*nonNLS*/+decode.type(right)+";\n"/*nonNLS*/;
				String begin = result == T_String ? "\t\tif (! "/*nonNLS*/ : "\t\tif ( "/*nonNLS*/;
				String test = result == T_String ? ".equals("/*nonNLS*/ : " != ("/*nonNLS*/ ;
				s += begin	+decode.type(result)+"0"/*nonNLS*/+test
							+decode.constant(left)+" "/*nonNLS*/
							+decode.operator(operator)+" "/*nonNLS*/
							+decode.constant(right)+"))\n"/*nonNLS*/;
				s += "\t\t\tSystem.out.println("/*nonNLS*/+ (++error) +");\n"/*nonNLS*/;
								
				}}}
		
	return s += "\n\t\tSystem.out.println(\"binary tables test : done\");}"/*nonNLS*/ ;
		}

