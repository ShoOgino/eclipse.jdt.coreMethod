	private boolean validate(final ParameterizedTypeBinding allocationType, final Scope scope) {
		class ValidityInspector extends TypeBindingVisitor {
			private boolean noErrors;

			public ValidityInspector() {
				this.noErrors = true;
			}

			public boolean visit(IntersectionTypeBinding18 intersectionTypeBinding18) {
				Arrays.sort(intersectionTypeBinding18.intersectingTypes, (t1, t2) -> t1.id - t2.id);
				scope.problemReporter().anonymousDiamondWithNonDenotableTypeArguments(QualifiedAllocationExpression.this.type, allocationType);
				return this.noErrors = false;  // stop traversal
			}
			public boolean visit(TypeVariableBinding typeVariable) {
				if (typeVariable.isCapture()) {
					scope.problemReporter().anonymousDiamondWithNonDenotableTypeArguments(QualifiedAllocationExpression.this.type, allocationType);
					return this.noErrors = false;  // stop traversal
				}
				return true; // continue traversal
			}
			public boolean visit(ReferenceBinding ref) {
				if (!ref.canBeSeenBy(scope)) {
					scope.problemReporter().invalidType(QualifiedAllocationExpression.this.anonymousType, new ProblemReferenceBinding(ref.compoundName, ref, ProblemReasons.NotVisible));
					return this.noErrors = false;
				}
				return true;
			}
			public boolean isValid() {
				TypeBindingVisitor.visit(this, allocationType);
				return this.noErrors;
			}
		}
		
		return new ValidityInspector().isValid();
	}

