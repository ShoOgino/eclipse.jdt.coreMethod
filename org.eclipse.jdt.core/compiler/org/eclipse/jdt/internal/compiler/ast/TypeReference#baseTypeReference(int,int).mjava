/*
 * Answer a base type reference (can be an array of base type).
 */
public static final TypeReference baseTypeReference(int baseType, int dim) {
	
	if (dim == 0) {
		switch (baseType) {
			case (T_void) :
				return new SingleTypeReference(TypeBinding.VOID.simpleName, 0);
			case (T_boolean) :
				return new SingleTypeReference(TypeBinding.BOOLEAN.simpleName, 0);
			case (T_char) :
				return new SingleTypeReference(TypeBinding.CHAR.simpleName, 0);
			case (T_float) :
				return new SingleTypeReference(TypeBinding.FLOAT.simpleName, 0);
			case (T_double) :
				return new SingleTypeReference(TypeBinding.DOUBLE.simpleName, 0);
			case (T_byte) :
				return new SingleTypeReference(TypeBinding.BYTE.simpleName, 0);
			case (T_short) :
				return new SingleTypeReference(TypeBinding.SHORT.simpleName, 0);
			case (T_int) :
				return new SingleTypeReference(TypeBinding.INT.simpleName, 0);
			default : //T_long	
				return new SingleTypeReference(TypeBinding.LONG.simpleName, 0);
		}
	}
	switch (baseType) {
		case (T_void) :
			return new ArrayTypeReference(TypeBinding.VOID.simpleName, dim, 0);
		case (T_boolean) :
			return new ArrayTypeReference(TypeBinding.BOOLEAN.simpleName, dim, 0);
		case (T_char) :
			return new ArrayTypeReference(TypeBinding.CHAR.simpleName, dim, 0);
		case (T_float) :
			return new ArrayTypeReference(TypeBinding.FLOAT.simpleName, dim, 0);
		case (T_double) :
			return new ArrayTypeReference(TypeBinding.DOUBLE.simpleName, dim, 0);
		case (T_byte) :
			return new ArrayTypeReference(TypeBinding.BYTE.simpleName, dim, 0);
		case (T_short) :
			return new ArrayTypeReference(TypeBinding.SHORT.simpleName, dim, 0);
		case (T_int) :
			return new ArrayTypeReference(TypeBinding.INT.simpleName, dim, 0);
		default : //T_long	
			return new ArrayTypeReference(TypeBinding.LONG.simpleName, dim, 0);
	}
}

