	public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {
		SourceTypeBinding sourceType = currentScope.enclosingSourceType();
		if (this.receiverType.isArrayType()) {
			if (isConstructorReference()) {
				this.binding = sourceType.addSyntheticArrayMethod((ArrayBinding) this.receiverType, SyntheticMethodBinding.ArrayConstructor);
			} else if (CharOperation.equals(this.selector, TypeConstants.CLONE)) {
				this.binding = sourceType.addSyntheticArrayMethod((ArrayBinding) this.receiverType, SyntheticMethodBinding.ArrayClone);
			}
		} else if (this.lhs.isSuper()) {
			this.binding = sourceType.addSyntheticSuperBridgeMethod(this.binding);
		}
		
		int pc = codeStream.position;
		if (this.haveReceiver) {
			this.lhs.generateCode(currentScope, codeStream, true);
		}
		int invokeDynamicNumber = codeStream.classFile.recordBootstrapMethod(this);
		StringBuffer buffer = new StringBuffer();
		buffer.append('(');
		if (this.haveReceiver) {
			buffer.append('L');
			buffer.append(this.lhs.isSuper() ? sourceType.constantPoolName() : this.receiverType.constantPoolName());
			buffer.append(';');
		}
		buffer.append(')');
		buffer.append('L');
		buffer.append(this.resolvedType.constantPoolName());
		buffer.append(';');
		codeStream.invokeDynamic(invokeDynamicNumber, this.haveReceiver ? 1 : 0, 1, LAMBDA, buffer.toString().toCharArray());
		codeStream.recordPositionsFrom(pc, this.sourceStart);
	}

