	public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {
		SourceTypeBinding sourceType = currentScope.enclosingSourceType();
		if (this.receiverType.isArrayType()) {
			if (isConstructorReference()) {
				this.binding = sourceType.addSyntheticArrayMethod((ArrayBinding) this.receiverType, SyntheticMethodBinding.ArrayConstructor);
			} else if (CharOperation.equals(this.selector, TypeConstants.CLONE)) {
				this.binding = sourceType.addSyntheticArrayMethod((ArrayBinding) this.receiverType, SyntheticMethodBinding.ArrayClone);
			}
		} else if (this.lhs.isSuper()) {
			this.binding = sourceType.addSyntheticSuperBridgeMethod(this.binding);
		}
		
		int pc = codeStream.position;
		int invokeDynamicNumber = codeStream.classFile.recordBootstrapMethod(this);
		StringBuffer buffer = new StringBuffer();
		int argumentsSize = 0;
		buffer.append('(');
		if (this.haveReceiver) {
			this.lhs.generateCode(currentScope, codeStream, true);
			buffer.append(this.lhs.isSuper() ? sourceType.signature() : this.receiverType.signature());
			argumentsSize = 1;
		} else {
			if (this.isConstructorReference() && this.receiverType.isNestedType()) {
				NestedTypeBinding nestedType = (NestedTypeBinding) this.receiverType;
				ReferenceBinding[] syntheticArgumentTypes;
				if ((syntheticArgumentTypes = nestedType.syntheticEnclosingInstanceTypes()) != null) {
					int length = syntheticArgumentTypes.length;
					argumentsSize = length;
					for (int i = 0 ; i < length; i++) {
						ReferenceBinding syntheticArgumentType = syntheticArgumentTypes[i];
						buffer.append(syntheticArgumentType.signature());
						Object[] emulationPath = currentScope.getEmulationPath(
								syntheticArgumentType,
								false /* allow compatible match */,
								true /* disallow instance reference in explicit constructor call */);
						codeStream.generateOuterAccess(emulationPath, this, syntheticArgumentType, currentScope);
					}
				}
			}
		}
		buffer.append(')');
		buffer.append('L');
		buffer.append(this.resolvedType.constantPoolName());
		buffer.append(';');
		codeStream.invokeDynamic(invokeDynamicNumber, argumentsSize, 1, LAMBDA, buffer.toString().toCharArray());
		codeStream.recordPositionsFrom(pc, this.sourceStart);
	}

