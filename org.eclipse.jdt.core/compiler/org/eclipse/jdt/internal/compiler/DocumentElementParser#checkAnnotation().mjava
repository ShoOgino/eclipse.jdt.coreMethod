/*
 * Will clear the comment stack when looking
 * for a potential JavaDoc which might contain @deprecated.
 *
 * Additionally, before investigating for @deprecated, retrieve the positions
 * of the JavaDoc comments so as to notify requestor with them.
 */
public void checkAnnotation() {

	/* persisting javadoc positions */
	pushOnIntArrayStack(this.getJavaDocPositions());
	boolean deprecated = false;
	int lastAnnotationIndex = -1;

	//since jdk1.2 look only in the last java doc comment...
	found : {
		if ((lastAnnotationIndex = scanner.commentPtr) >= 0) { //look for @deprecated
			scanner.commentPtr = -1;
			// reset the comment stack, since not necessary after having checked
			int commentSourceStart = scanner.commentStarts[lastAnnotationIndex];
			// javadoc only (non javadoc comment have negative end positions.)
			if (scanner.commentStops[lastAnnotationIndex] < 0) {
				break found;
			}
			int commentSourceEnd = scanner.commentStops[lastAnnotationIndex] - 1;
			//stop is one over
			char[] comment = scanner.source;
			deprecated =
				checkDeprecation(
					commentSourceStart,
					commentSourceEnd,
					comment);
			break found;
		}
	}
	if (deprecated) {
		checkAndSetModifiers(AccDeprecated);
	}
	// modify the modifier source start to point at the first comment
	if (lastAnnotationIndex >= 0) {
		declarationSourceStart = scanner.commentStarts[0];
	}
}

