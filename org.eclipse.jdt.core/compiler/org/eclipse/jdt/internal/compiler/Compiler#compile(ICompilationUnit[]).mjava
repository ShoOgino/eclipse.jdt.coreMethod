	/**
	 * General API
	 * -> compile each of supplied files
	 * -> recompile any required types for which we have an incomplete principle structure
	 */
	public void compile(ICompilationUnit[] sourceUnits) {
		this.stats.startTime = System.currentTimeMillis();
		CompilationUnitDeclaration unit = null;
		int i = 0;
		try {
			// build and record parsed units
			reportProgress(Messages.compilation_beginningToCompile);

			beginToCompile(sourceUnits);

			if (this.annotationProcessorManager != null) {
				processAnnotations();
				if (!options.generateClassFiles) {
					// -proc:only was set on the command line
					return;
				}
			}
			// process all units (some more could be injected in the loop by the lookup environment)
			for (; i < this.totalUnits; i++) {
				unit = unitsToProcess[i];
				reportProgress(Messages.bind(Messages.compilation_processing, new String(unit.getFileName())));
				try {
					if (options.verbose)
						this.out.println(
							Messages.bind(Messages.compilation_process,
							new String[] {
								String.valueOf(i + 1),
								String.valueOf(this.totalUnits),
								new String(unitsToProcess[i].getFileName())
							}));
					process(unit, i);
				} finally {
					// cleanup compilation unit result
					unit.cleanUp();
				}
				unitsToProcess[i] = null; // release reference to processed unit declaration
				
				reportWorked(1, i);
				this.stats.lineCount += unit.compilationResult.lineSeparatorPositions.length;
				long acceptStart = System.currentTimeMillis();
				requestor.acceptResult(unit.compilationResult.tagAsAccepted());
				this.stats.generateTime += System.currentTimeMillis() - acceptStart; // record accept time as part of generation
				if (options.verbose)
					this.out.println(
						Messages.bind(Messages.compilation_done,
						new String[] {
							String.valueOf(i + 1),
							String.valueOf(this.totalUnits),
							new String(unit.getFileName())
						}));
			}
		} catch (AbortCompilation e) {
			this.handleInternalException(e, unit);
		} catch (Error e) {
			this.handleInternalException(e, unit, null);
			throw e; // rethrow
		} catch (RuntimeException e) {
			this.handleInternalException(e, unit, null);
			throw e; // rethrow
		} finally {
			this.reset();
			this.stats.endTime = System.currentTimeMillis();
		}
		if (options.verbose) {
			if (this.totalUnits > 1) {
				this.out.println(
					Messages.bind(Messages.compilation_units, String.valueOf(this.totalUnits))); 
			} else {
				this.out.println(
					Messages.bind(Messages.compilation_unit, String.valueOf(this.totalUnits))); 
			}
		}
	}

