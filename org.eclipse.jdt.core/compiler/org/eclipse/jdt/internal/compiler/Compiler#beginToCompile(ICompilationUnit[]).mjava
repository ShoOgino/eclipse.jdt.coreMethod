/**
 * Add the initial set of compilation units into the loop
 *  ->  build compilation unit declarations, their bindings and record their results.
 */
protected void beginToCompile(ICompilationUnit[] sourceUnits) {
	int maxUnits = sourceUnits.length;
	totalUnits = 0; 
	unitsToProcess = new CompilationUnitDeclaration[maxUnits];

	// Switch the current policy and compilation result for this unit to the requested one.
	for (int i = 0; i < maxUnits; i++) {
		CompilationUnitDeclaration parsedUnit;
		CompilationResult unitResult = new CompilationResult(sourceUnits[i], i, maxUnits);
		try {
			// diet parsing for large collection of units
			if (totalUnits < parseThreshold)
			{	parsedUnit = parser.parse(sourceUnits[i], unitResult);}
			else
			{	parsedUnit = parser.dietParse(sourceUnits[i], unitResult);}
			if (options.verbose) {
				System.out.println(Util.bind("compilation.request"/*nonNLS*/,new String[]{String.valueOf(i+1),String.valueOf(maxUnits),new String(sourceUnits[i].getFileName())}));
			}
			// initial type binding creation
			lookupEnvironment.buildTypeBindings(parsedUnit);
			this.addCompilationUnit(sourceUnits[i], parsedUnit);
		//} catch (AbortCompilationUnit e) {
		//	requestor.acceptResult(unitResult.tagAsAccepted());
		} finally {
			sourceUnits[i] = null; // no longer hold onto the unit
		}
	}
	// binding resolution
	lookupEnvironment.completeTypeBindings();
}

