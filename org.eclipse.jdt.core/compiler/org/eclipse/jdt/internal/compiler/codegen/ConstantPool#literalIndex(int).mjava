	/**
	 * This method returns the index into the constantPool corresponding to the int
	 * value. If the int is not already present into the pool, it is added. The
	 * int cache is updated and it returns the right index.
	 *
	 * @param key <CODE>int</CODE>
	 * @return <CODE>int</CODE>
	 */
	public int literalIndex(int key) {
		//Retrieve the index from the cache
		int index;
		// lazy initialization for base type caches
		// If it is null, initialize it, otherwise use it
		if (this.intCache == null) {
			this.intCache = new IntegerCache(INT_INITIAL_SIZE);
		}
		if ((index = this.intCache.putIfAbsent(key, this.currentIndex)) < 0) {
			this.currentIndex++;
			if ((index = -index) > 0xFFFF){
				this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());
			}
			// Write the integer constant entry into the constant pool
			// First add the tag
			int length = this.offsets.length;
			if (length <= index) {
				// resize
				System.arraycopy(this.offsets, 0, (this.offsets = new int[index * 2]), 0, length);
			}
			this.offsets[index] = this.currentOffset;
			writeU1(IntegerTag);
			// Then add the 4 bytes representing the int
			if (this.currentOffset + 4 >= this.poolContent.length) {
				resizePoolContents(4);
			}
			this.poolContent[this.currentOffset++] = (byte) (key >>> 24);
			this.poolContent[this.currentOffset++] = (byte) (key >>> 16);
			this.poolContent[this.currentOffset++] = (byte) (key >>> 8);
			this.poolContent[this.currentOffset++] = (byte) key;
		}
		return index;
	}

