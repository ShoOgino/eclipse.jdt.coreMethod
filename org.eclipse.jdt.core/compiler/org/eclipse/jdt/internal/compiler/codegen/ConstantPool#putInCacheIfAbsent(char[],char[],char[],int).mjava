/**
 * @param key1 the given declaring class name
 * @param key2 the given field name or method selector
 * @param key3 the given signature
 * @param value the new index
 * @return the given index
 */
private int putInCacheIfAbsent(final char[] key1, final char[] key2, final char[] key3, int value) {
	int index;
	HashtableOfObject key1Value = (HashtableOfObject) this.methodsAndFieldsCache.get(key1);
	if (key1Value == null) {
		key1Value = new HashtableOfObject();
		this.methodsAndFieldsCache.put(key1, key1Value);
		CachedIndexEntry cachedIndexEntry = new CachedIndexEntry(key3, value);
		index = -value;
		key1Value.put(key2, cachedIndexEntry);
	} else {
		Object key2Value = key1Value.get(key2);
		if (key2Value == null) {
			CachedIndexEntry cachedIndexEntry = new CachedIndexEntry(key3, value);
			index = -value;
			key1Value.put(key2, cachedIndexEntry);
		} else if (key2Value instanceof CachedIndexEntry) {
			// adding a second entry
			CachedIndexEntry entry = (CachedIndexEntry) key2Value;
			if (CharOperation.equals(key3, entry.signature)) {
				index = entry.index;
			} else {
				CharArrayCache charArrayCache = new CharArrayCache();
				charArrayCache.putIfAbsent(entry.signature, entry.index);
				index = charArrayCache.putIfAbsent(key3, value);				
				key1Value.put(key2, charArrayCache);
			}
		} else {
			CharArrayCache charArrayCache = (CharArrayCache) key2Value;
			index = charArrayCache.putIfAbsent(key3, value);			
		}
	}
	return index;
}

