	/**
	 * @param bootstrapIndex the given bootstrap index
	 * @param selector the given method selector
	 * @param descriptor the given signature
	 * @param value the new index
	 * @return the given index
	 */	private int putInDynamicCacheIfAbsent(int bootstrapIndex, final char[] selector, final char[] descriptor, final int value) {
		int index;
		HashtableOfObject key1Value = (HashtableOfObject) this.dynamicCache.get(bootstrapIndex);
		if (key1Value == null) {
			key1Value = new HashtableOfObject();
			this.dynamicCache.put(bootstrapIndex, key1Value);
			CachedIndexEntry cachedIndexEntry = new CachedIndexEntry(descriptor, value);
			index = -value;
			key1Value.put(selector, cachedIndexEntry);
		} else {
			Object key2Value = key1Value.get(selector);
			if (key2Value == null) {
				CachedIndexEntry cachedIndexEntry = new CachedIndexEntry(descriptor, value);
				index = -value;
				key1Value.put(selector, cachedIndexEntry);
			} else if (key2Value instanceof CachedIndexEntry) {
				// adding a second entry
				CachedIndexEntry entry = (CachedIndexEntry) key2Value;
				if (CharOperation.equals(descriptor, entry.signature)) {
					index = entry.index;
				} else {
					CharArrayCache charArrayCache = new CharArrayCache();
					charArrayCache.putIfAbsent(entry.signature, entry.index);
					index = charArrayCache.putIfAbsent(descriptor, value);
					key1Value.put(selector, charArrayCache);
				}
			} else {
				CharArrayCache charArrayCache = (CharArrayCache) key2Value;
				index = charArrayCache.putIfAbsent(descriptor, value);
			}
		}
		return index;
	}

