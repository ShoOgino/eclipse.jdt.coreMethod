	public void generateSyntheticBodyForMethodAccess(SyntheticAccessMethodBinding accessBinding) {

		initializeMaxLocals(accessBinding);
		MethodBinding methodBinding = accessBinding.targetMethod;
		TypeBinding[] parameters = methodBinding.parameters;
		int length = parameters.length;
		int resolvedPosition;
		if (methodBinding.isStatic())
			resolvedPosition = 0;
		else {
			this.aload_0();
			resolvedPosition = 1;
		}
		for (int i = 0; i < length; i++) {
			load(parameters[i], resolvedPosition);
			if ((parameters[i] == DoubleBinding) || (parameters[i] == LongBinding))
				resolvedPosition += 2;
			else
				resolvedPosition++;
		}
		TypeBinding type;
		int id;
		if (methodBinding.isStatic())
			this.invokestatic(methodBinding);
		else {
			if (methodBinding.isConstructor()
				|| methodBinding.isPrivate()
				// qualified super "X.super.foo()" targets methods from superclass
				|| (methodBinding.declaringClass != methodDeclaration.binding.declaringClass)) {
				this.invokespecial(methodBinding);
			} else {
				if (methodBinding.declaringClass.isInterface()) {
					this.invokeinterface(methodBinding);
				} else {
					this.invokevirtual(methodBinding);
				}
			}
		}
		if ((type = methodBinding.returnType).isBaseType())
			if (type == VoidBinding)
				this.return_();
			else
				if (type == IntBinding)
					this.ireturn();
				else
					if (type == FloatBinding)
						this.freturn();
					else
						if (type == LongBinding)
							this.lreturn();
						else
							if (type == DoubleBinding)
								this.dreturn();
							else
								this.ireturn();
		else
			this.areturn();
	}

