public int literalIndex(byte[] utf8encoding, char[] stringCharArray) {
    int index;
    if ((index = UTF8Cache.putIfAbsent(stringCharArray, this.currentIndex)) < 0) {
        // The entry doesn't exit yet
        if ((index = -index)> 0xFFFF) {
            this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());
        }
        currentIndex++;
        // Write the tag first
        int length = this.offsets.length;
        if (length <= index) {
        	// resize
            System.arraycopy(this.offsets, 0, (this.offsets = new int[index * 2]), 0, length);
        }
        this.offsets[index] = this.currentOffset;
        writeU1(Utf8Tag);
        int utf8encodingLength = utf8encoding.length;
        if (currentOffset + 2 + utf8encodingLength >= poolContent.length) {
            // we need to resize the poolContent array because we won't have
            // enough space to write the length
            resizePoolContents(2 + utf8encodingLength);
        }
        poolContent[currentOffset++] = (byte) (utf8encodingLength >> 8);
        poolContent[currentOffset++] = (byte) utf8encodingLength;
        // add in once the whole byte array
        System.arraycopy(utf8encoding, 0, poolContent, currentOffset, utf8encodingLength);
        currentOffset += utf8encodingLength;
    }
    return index;
}

