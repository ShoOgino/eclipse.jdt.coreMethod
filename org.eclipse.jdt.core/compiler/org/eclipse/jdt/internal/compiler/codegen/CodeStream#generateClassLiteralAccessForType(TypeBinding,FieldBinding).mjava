	/**
	 * Macro for building a class descriptor object
	 */
	public void generateClassLiteralAccessForType(
		TypeBinding accessedType,
		FieldBinding syntheticFieldBinding) {
		Label endLabel;
		ExceptionLabel anyExceptionHandler;
		int saveStackSize;
		if (accessedType.isBaseType()) {
			this.getTYPE(accessedType.id);
			return;
		}
		endLabel = new Label(this);

		if (syntheticFieldBinding != null) { // non interface case
			this.getstatic(syntheticFieldBinding);
			this.dup();
			this.ifnonnull(endLabel);
			this.pop();
		}

		/* Macro for building a class descriptor object... using or not a field cache to store it into...
		this sequence is responsible for building the actual class descriptor.
		
		If the fieldCache is set, then it is supposed to be the body of a synthetic access method
		factoring the actual descriptor creation out of the invocation site (saving space).
		If the fieldCache is nil, then we are dumping the bytecode on the invocation site, since
		we have no way to get a hand on the field cache to do better. */

		// Wrap the code in an exception handler to convert a ClassNotFoundException into a NoClassDefError

		anyExceptionHandler =
			new ExceptionLabel(
				this,
				TypeBinding.NullBinding /* represents ClassNotFoundException*/);
		this.ldc(
			accessedType == TypeBinding.NullBinding
				? "java.lang.Object"
				: String.valueOf(accessedType.constantPoolName()).replace('/', '.'));
		this.invokeClassForName();

		/* We need to protect the runtime code from binary inconsistencies
		in case the accessedType is missing, the ClassNotFoundException has to be converted
		into a NoClassDefError(old ex message), we thus need to build an exception handler for this one. */
		anyExceptionHandler.placeEnd();

		if (syntheticFieldBinding != null) { // non interface case
			this.dup();
			this.putstatic(syntheticFieldBinding);
		}
		this.goto_(endLabel);

		// Generate the body of the exception handler
		saveStackSize = stackDepth;
		stackDepth = 1;
		/* ClassNotFoundException on stack -- the class literal could be doing more things
		on the stack, which means that the stack may not be empty at this point in the
		above code gen. So we save its state and restart it from 1. */

		anyExceptionHandler.place();

		// Transform the current exception, and repush and throw a 
		// NoClassDefFoundError(ClassNotFound.getMessage())

		this.newNoClassDefFoundError();
		this.dup_x1();
		this.swap();

		// Retrieve the message from the old exception
		this.invokeThrowableGetMessage();

		// Send the constructor taking a message string as an argument
		this.invokeNoClassDefFoundErrorStringConstructor();
		this.athrow();
		endLabel.place();
		stackDepth = saveStackSize;
	}

