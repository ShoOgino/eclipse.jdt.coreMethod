/**
 * This method returns the index into the constantPool corresponding to the long
 * value. If the long is not already present into the pool, it is added. The 
 * long cache is updated and it returns the right index.
 *
 * @param key <CODE>long</CODE>
 * @return <CODE>int</CODE>
 */
public int literalIndex(long key) {
	// Retrieve the index from the cache
	// The long constant takes two indexes into the constant pool, but we only store
	// the first index into the long table
	int index;
	// lazy initialization for base type caches
	// If it is null, initialize it, otherwise use it
	if (longCache == null) {
		longCache = new LongCache(LONG_INITIAL_SIZE);
	}
	if ((index = longCache.putIfAbsent(key, this.currentIndex)) < 0) {
		if ((index = -index) > 0xFFFF){
			this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());
		}
		this.currentIndex+= 2; // long value need an extra place into thwe constant pool
		// Write the long into the constant pool
		// First add the tag
		writeU1(LongTag);
		// Then add the 8 bytes representing the long
		if (currentOffset + 8 >= poolContent.length) {
			resizePoolContents(8);
		}
		poolContent[currentOffset++] = (byte) (key >>> 56);
		poolContent[currentOffset++] = (byte) (key >>> 48);
		poolContent[currentOffset++] = (byte) (key >>> 40);
		poolContent[currentOffset++] = (byte) (key >>> 32);
		poolContent[currentOffset++] = (byte) (key >>> 24);
		poolContent[currentOffset++] = (byte) (key >>> 16);
		poolContent[currentOffset++] = (byte) (key >>> 8);
		poolContent[currentOffset++] = (byte) key;
	}
	return index;
}

