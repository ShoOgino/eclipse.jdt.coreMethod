/**
 * This method returns the index into the constantPool corresponding to the long
 * value. If the long is not already present into the pool, it is added. The
 * long cache is updated and it returns the right index.
 *
 * @param key <CODE>long</CODE>
 * @return <CODE>int</CODE>
 */
public int literalIndex(long key) {
    // Retrieve the index from the cache
    // The long constant takes two indexes into the constant pool, but we only store
    // the first index into the long table
    int index;
    // lazy initialization for base type caches
    // If it is null, initialize it, otherwise use it
    if (this.longCache == null) {
        this.longCache = new LongCache(LONG_INITIAL_SIZE);
    }
    if ((index = this.longCache.putIfAbsent(key, this.currentIndex)) < 0) {
        if ((index = -index) > 0xFFFF){
            this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());
        }
        this.currentIndex+= 2; // long value need an extra place into thwe constant pool
        // Write the long into the constant pool
        // First add the tag
        int length = this.offsets.length;
        if (length <= index) {
        	// resize
            System.arraycopy(this.offsets, 0, (this.offsets = new int[index * 2]), 0, length);
        }
        this.offsets[index] = this.currentOffset;
        writeU1(LongTag);
        // Then add the 8 bytes representing the long
        if (this.currentOffset + 8 >= this.poolContent.length) {
            resizePoolContents(8);
        }
        this.poolContent[this.currentOffset++] = (byte) (key >>> 56);
        this.poolContent[this.currentOffset++] = (byte) (key >>> 48);
        this.poolContent[this.currentOffset++] = (byte) (key >>> 40);
        this.poolContent[this.currentOffset++] = (byte) (key >>> 32);
        this.poolContent[this.currentOffset++] = (byte) (key >>> 24);
        this.poolContent[this.currentOffset++] = (byte) (key >>> 16);
        this.poolContent[this.currentOffset++] = (byte) (key >>> 8);
        this.poolContent[this.currentOffset++] = (byte) key;
    }
    return index;
}

