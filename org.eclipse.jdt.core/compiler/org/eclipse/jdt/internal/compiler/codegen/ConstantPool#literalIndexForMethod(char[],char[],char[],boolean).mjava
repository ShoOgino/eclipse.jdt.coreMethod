public int literalIndexForMethod(char[] declaringClass, char[] selector, char[] signature, boolean isInterface) {
	int index;
	if ((index = putInCacheIfAbsent(declaringClass, selector, signature, this.currentIndex)) < 0) {
		// it doesn't exist yet
		this.currentIndex++;
		if ((index = -index) > 0xFFFF){
			this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());
		}
		// Write the interface method ref constant into the constant pool
		// First add the tag
		writeU1(isInterface ? InterfaceMethodRefTag : MethodRefTag);

		int classIndexOffset = this.currentOffset;
		if (currentOffset + 4 >= poolContent.length) {
			resizePoolContents(4);
		}
		currentOffset+=4;
		
		final int classIndex = literalIndexForType(declaringClass);
		final int nameAndTypeIndex = literalIndexForNameAndType(selector, signature);

		poolContent[classIndexOffset++] = (byte) (classIndex >> 8);
		poolContent[classIndexOffset++] = (byte) classIndex;
		poolContent[classIndexOffset++] = (byte) (nameAndTypeIndex >> 8);
		poolContent[classIndexOffset] = (byte) nameAndTypeIndex;
	}
	return index;
}

