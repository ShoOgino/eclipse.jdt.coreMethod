public int literalIndexForMethod(char[] declaringClass, char[] selector, char[] signature, boolean isInterface) {
    int index;
    if ((index = putInCacheIfAbsent(declaringClass, selector, signature, this.currentIndex)) < 0) {
        // it doesn't exist yet
        this.currentIndex++;
        if ((index = -index) > 0xFFFF){
            this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());
        }
        // Write the interface method ref constant into the constant pool
        // First add the tag
        int length = this.offsets.length;
        if (length <= index) {
        	// resize
            System.arraycopy(this.offsets, 0, (this.offsets = new int[index * 2]), 0, length);
        }
        this.offsets[index] = this.currentOffset;
        writeU1(isInterface ? InterfaceMethodRefTag : MethodRefTag);

        int classIndexOffset = this.currentOffset;
        if (this.currentOffset + 4 >= this.poolContent.length) {
            resizePoolContents(4);
        }
        this.currentOffset+=4;

        final int classIndex = literalIndexForType(declaringClass);
        final int nameAndTypeIndex = literalIndexForNameAndType(selector, signature);

        this.poolContent[classIndexOffset++] = (byte) (classIndex >> 8);
        this.poolContent[classIndexOffset++] = (byte) classIndex;
        this.poolContent[classIndexOffset++] = (byte) (nameAndTypeIndex >> 8);
        this.poolContent[classIndexOffset] = (byte) nameAndTypeIndex;
    }
    return index;
}

