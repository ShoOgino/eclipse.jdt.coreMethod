/**
 * Generates the sequence of instructions which will perform the conversion of the expression
 * on the stack into a different type (e.g. long l = someInt; --> i2l must be inserted).
 * @param implicitConversionCode int
 */
public void generateImplicitConversion(int implicitConversionCode) {
	if ((implicitConversionCode & TypeIds.UNBOXING) != 0) {
		final int typeId = implicitConversionCode & TypeIds.COMPILE_TYPE_MASK;
		generateUnboxingConversion(typeId);
		// unboxing can further involve base type conversions
	}
	switch (implicitConversionCode & TypeIds.IMPLICIT_CONVERSION_MASK) {
		case TypeIds.Float2Char :
			this.f2i();
			this.i2c();
			break;
		case TypeIds.Double2Char :
			this.d2i();
			this.i2c();
			break;
		case TypeIds.Int2Char :
		case TypeIds.Short2Char :
		case TypeIds.Byte2Char :
			this.i2c();
			break;
		case TypeIds.Long2Char :
			this.l2i();
			this.i2c();
			break;
		case TypeIds.Char2Float :
		case TypeIds.Short2Float :
		case TypeIds.Int2Float :
		case TypeIds.Byte2Float :
			this.i2f();
			break;
		case TypeIds.Double2Float :
			this.d2f();
			break;
		case TypeIds.Long2Float :
			this.l2f();
			break;
		case TypeIds.Float2Byte :
			this.f2i();
			this.i2b();
			break;
		case TypeIds.Double2Byte :
			this.d2i();
			this.i2b();
			break;
		case TypeIds.Int2Byte :
		case TypeIds.Short2Byte :
		case TypeIds.Char2Byte :
			this.i2b();
			break;
		case TypeIds.Long2Byte :
			this.l2i();
			this.i2b();
			break;
		case TypeIds.Byte2Double :
		case TypeIds.Char2Double :
		case TypeIds.Short2Double :
		case TypeIds.Int2Double :
			this.i2d();
			break;
		case TypeIds.Float2Double :
			this.f2d();
			break;
		case TypeIds.Long2Double :
			this.l2d();
			break;
		case TypeIds.Byte2Short :
		case TypeIds.Char2Short :
		case TypeIds.Int2Short :
			this.i2s();
			break;
		case TypeIds.Double2Short :
			this.d2i();
			this.i2s();
			break;
		case TypeIds.Long2Short :
			this.l2i();
			this.i2s();
			break;
		case TypeIds.Float2Short :
			this.f2i();
			this.i2s();
			break;
		case TypeIds.Double2Int :
			this.d2i();
			break;
		case TypeIds.Float2Int :
			this.f2i();
			break;
		case TypeIds.Long2Int :
			this.l2i();
			break;
		case TypeIds.Int2Long :
		case TypeIds.Char2Long :
		case TypeIds.Byte2Long :
		case TypeIds.Short2Long :
			this.i2l();
			break;
		case TypeIds.Double2Long :
			this.d2l();
			break;
		case TypeIds.Float2Long :
			this.f2l();
	}
	if ((implicitConversionCode & TypeIds.BOXING) != 0) {
		// need to unbox/box the constant
		final int typeId = (implicitConversionCode & TypeIds.IMPLICIT_CONVERSION_MASK) >> 4;
		generateBoxingConversion(typeId);
	}
}

