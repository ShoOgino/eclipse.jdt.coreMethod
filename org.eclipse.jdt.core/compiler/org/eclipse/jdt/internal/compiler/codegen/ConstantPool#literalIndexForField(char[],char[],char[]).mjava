	public int literalIndexForField(char[] declaringClass, char[] name, char[] signature) {
		int index;
		if ((index = putInCacheIfAbsent(declaringClass, name, signature, this.currentIndex)) < 0) {
			this.currentIndex++;
			// doesn't exist yet
			if ((index = -index) > 0xFFFF){
				this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());
			}
			// Write the interface method ref constant into the constant pool
			// First add the tag
			int length = this.offsets.length;
			if (length <= index) {
				// resize
				System.arraycopy(this.offsets, 0, (this.offsets = new int[index * 2]), 0, length);
			}
			this.offsets[index] = this.currentOffset;
			writeU1(FieldRefTag);
			int classIndexOffset = this.currentOffset;
			if (this.currentOffset + 4 >= this.poolContent.length) {
				resizePoolContents(4);
			}
			this.currentOffset+=4;

			final int classIndex = literalIndexForType(declaringClass);
			final int nameAndTypeIndex = literalIndexForNameAndType(name, signature);

			this.poolContent[classIndexOffset++] = (byte) (classIndex >> 8);
			this.poolContent[classIndexOffset++] = (byte) classIndex;
			this.poolContent[classIndexOffset++] = (byte) (nameAndTypeIndex >> 8);
			this.poolContent[classIndexOffset] = (byte) nameAndTypeIndex;
		}
		return index;
	}

