	/**
	 * This method returns the index into the constantPool 
	 * corresponding to the field binding aFieldBinding.
	 *
	 * @param FieldBinding aFieldBinding
	 * @return <CODE>int</CODE>
	 */
	public int literalIndex(FieldBinding aFieldBinding) {
		int index;
		int nameAndTypeIndex;
		int classIndex;
		int indexWellKnownField;
		if ((indexWellKnownField = indexOfWellKnownFields(aFieldBinding)) == -1) {
			if ((index = fieldCache.get(aFieldBinding)) < 0) {
				// The entry doesn't exit yet
				classIndex = literalIndex(aFieldBinding.declaringClass);
				nameAndTypeIndex =
					literalIndexForFields(
						literalIndex(aFieldBinding.name),
						literalIndex(aFieldBinding.type.signature()),
						aFieldBinding);
				index = fieldCache.put(aFieldBinding, currentIndex++);
				writeU1(FieldRefTag);
				writeU2(classIndex);
				writeU2(nameAndTypeIndex);
			}
		} else {
			if ((index = wellKnownFields[indexWellKnownField]) == 0) {
				// that field need to be inserted
				classIndex = literalIndex(aFieldBinding.declaringClass);
				nameAndTypeIndex =
					literalIndexForFields(
						literalIndex(aFieldBinding.name),
						literalIndex(aFieldBinding.type.signature()),
						aFieldBinding);
				index = wellKnownFields[indexWellKnownField] = currentIndex++;
				writeU1(FieldRefTag);
				writeU2(classIndex);
				writeU2(nameAndTypeIndex);
			}
		}
		return index;
	}

