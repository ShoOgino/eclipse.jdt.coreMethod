/**
 * This method returns the index into the constantPool 
 * corresponding to the field binding aFieldBinding.
 *
 * @param aFieldBinding FieldBinding
 * @return <CODE>int</CODE>
 */
public int literalIndex(FieldBinding aFieldBinding) {
	int index;
	final char[] name = aFieldBinding.name;
	final char[] signature = aFieldBinding.type.signature();
	final char[] declaringClassConstantPoolName = aFieldBinding.declaringClass.constantPoolName();
	if ((index = getFromCache(declaringClassConstantPoolName, name, signature)) < 0) {
		// The entry doesn't exit yet
		int classIndex = literalIndexForType(declaringClassConstantPoolName);
		int nameAndTypeIndex = literalIndexForFields(literalIndex(name), literalIndex(signature), name, signature);
		index = putInCache(declaringClassConstantPoolName, name, signature, currentIndex++);
		if (index > 0xFFFF){
			this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());
		}
		writeU1(FieldRefTag);
		writeU2(classIndex);
		writeU2(nameAndTypeIndex);
	}
	return index;
}

