public void invokespecial(MethodBinding methodBinding) {
	if (DEBUG) System.out.println(position + "\t\tinvokespecial:"+methodBinding); //$NON-NLS-1$
	// initialized to 1 to take into account this  immediately
	countLabels = 0;
	int argCount = 1;
	int id;
	if (classFileOffset + 2 >= bCodeStream.length) {
		resizeByteArray();
	}
	position++;
	bCodeStream[classFileOffset++] = Opcodes.OPC_invokespecial;
	writeUnsignedShort(
		constantPool.literalIndexForMethod(
			methodBinding.constantPoolDeclaringClass(),
			methodBinding.selector,
			methodBinding.signature(classFile),
			false));
	if (methodBinding.isConstructor()) {
		final ReferenceBinding declaringClass = methodBinding.declaringClass;
		if (declaringClass.isNestedType()) {
			// enclosing instances
			TypeBinding[] syntheticArgumentTypes = declaringClass.syntheticEnclosingInstanceTypes();
			if (syntheticArgumentTypes != null) {
				for (int i = 0, max = syntheticArgumentTypes.length; i < max; i++) {
					if (((id = syntheticArgumentTypes[i].id) == TypeIds.T_double) || (id == TypeIds.T_long)) {
						argCount += 2;
					} else {
						argCount++;
					}
				}
			}
			// outer local variables
			SyntheticArgumentBinding[] syntheticArguments = declaringClass.syntheticOuterLocalVariables();
			if (syntheticArguments != null) {
				for (int i = 0, max = syntheticArguments.length; i < max; i++) {
					if (((id = syntheticArguments[i].type.id) == TypeIds.T_double) || (id == TypeIds.T_long)) {
						argCount += 2;
					} else {
						argCount++;
					}
				}
			}
		} else if (declaringClass.isEnum()) {
			// adding String and int
			argCount += 2;
		}
	}
	for (int i = methodBinding.parameters.length - 1; i >= 0; i--)
		if (((id = methodBinding.parameters[i].id) == TypeIds.T_double) || (id == TypeIds.T_long))
			argCount += 2;
		else
			argCount++;
	if (((id = methodBinding.returnType.id) == TypeIds.T_double) || (id == TypeIds.T_long))
		stackDepth += (2 - argCount);
	else
		if (id == TypeIds.T_void)
			stackDepth -= argCount;
		else
			stackDepth += (1 - argCount);
	if (stackDepth > stackMax)
		stackMax = stackDepth;
}

