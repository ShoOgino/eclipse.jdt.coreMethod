/**
 * Code responsible to generate the suitable code to supply values for the synthetic arguments of
 * a constructor invocation of a nested type.
 */
public void generateSyntheticArgumentValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite) {

	// perform some emulation work in case there is some and we are inside a local type only
	ReferenceBinding[] syntheticArgumentTypes;

	// generate the enclosing instance first
	if ((syntheticArgumentTypes = targetType.syntheticEnclosingInstanceTypes()) != null) {

		ReferenceBinding targetEnclosingType = targetType.isAnonymousType() ? 
				targetType.superclass().enclosingType() // supplying enclosing instance for the anonymous type's superclass
				: targetType.enclosingType();
				
		for (int i = 0, max = syntheticArgumentTypes.length; i < max; i++) {
			ReferenceBinding syntheticArgType = syntheticArgumentTypes[i];
			if (enclosingInstance != null && i == 0) {
				if (syntheticArgType != targetEnclosingType) {
					currentScope.problemReporter().unnecessaryEnclosingInstanceSpecification(enclosingInstance, targetType);
				}
				//if (currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4){
				enclosingInstance.generateCode(currentScope, this, true);
				if (syntheticArgType == targetEnclosingType){
					this.dup();
				} 
				this.invokeObjectGetClass(); // causes null check for all explicit enclosing instances
				this.pop();
				//} else {
				//	enclosingInstance.generateCode(currentScope, this, syntheticArgType == targetEnclosingType);
				//}			
			} else {
				Object[] emulationPath = currentScope.getCompatibleEmulationPath(syntheticArgType);
				if (emulationPath == null) {
					currentScope.problemReporter().missingEnclosingInstanceSpecification(syntheticArgType, invocationSite);
				} else {
					this.generateOuterAccess(emulationPath, invocationSite, currentScope);
				}
			}
		}
	} else { // we may still have an enclosing instance to consider
		if (enclosingInstance != null) {
			currentScope.problemReporter().unnecessaryEnclosingInstanceSpecification(enclosingInstance, targetType);
			//if (currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4){
			enclosingInstance.generateCode(currentScope, this, true);
			this.invokeObjectGetClass(); // causes null check for all explicit enclosing instances
			this.pop();
			//} else {
			//	enclosingInstance.generateCode(currentScope, this, false); // do not want the value
			//}			
		}
	}
	// generate the synthetic outer arguments then
	SyntheticArgumentBinding syntheticArguments[];
	if ((syntheticArguments = targetType.syntheticOuterLocalVariables()) != null) {
		for (int i = 0, max = syntheticArguments.length; i < max; i++) {
			VariableBinding[] emulationPath = currentScope.getEmulationPath(syntheticArguments[i].actualOuterLocalVariable);
			if (emulationPath == null) {
				// could not emulate a path to a given outer local variable (internal error)
				currentScope.problemReporter().needImplementation();
			} else {
				this.generateOuterAccess(emulationPath, invocationSite, currentScope);
			}
		}
	}
}

