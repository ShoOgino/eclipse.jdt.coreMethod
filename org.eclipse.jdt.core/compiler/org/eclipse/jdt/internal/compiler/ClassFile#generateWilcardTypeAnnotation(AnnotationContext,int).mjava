	private void generateWilcardTypeAnnotation(AnnotationContext annotationContext, int currentOffset) {
		// common part between type annotation and annotation
		generateAnnotation(annotationContext.annotation, currentOffset);
		if (this.contentsOffset == currentOffset) {
			// error occurred while generating the annotation
			return;
		}
		int[] wildcardLocations = getWildcardLocations(annotationContext.typeReference, annotationContext.wildcard);
		int targetType = annotationContext.targetType;
		switch(targetType) {
			case AnnotationTargetTypeConstants.CLASS_EXTENDS_IMPLEMENTS :
				targetType = AnnotationTargetTypeConstants.CLASS_EXTENDS_IMPLEMENTS_GENERIC_OR_ARRAY;
				break;
			case AnnotationTargetTypeConstants.LOCAL_VARIABLE :
				targetType = AnnotationTargetTypeConstants.LOCAL_VARIABLE_GENERIC_OR_ARRAY;
				break;
			case AnnotationTargetTypeConstants.METHOD_PARAMETER :
				targetType = AnnotationTargetTypeConstants.METHOD_PARAMETER_GENERIC_OR_ARRAY;
				break;
			case AnnotationTargetTypeConstants.FIELD :
				targetType = AnnotationTargetTypeConstants.FIELD_GENERIC_OR_ARRAY;
				break;
//				case AnnotationTargetTypeConstants.METHOD_RECEIVER :
//				// should not happen - possible extension
//				targetType = AnnotationTargetTypeConstants.METHOD_RECEIVER_GENERIC_OR_ARRAY;
//				break;
//			case AnnotationTargetTypeConstants.CLASS_TYPE_PARAMETER :
//				// should not happen - possible extension
//				targetType = AnnotationTargetTypeConstants.CLASS_TYPE_PARAMETER_GENERIC_OR_ARRAY;
//				break;
//			case AnnotationTargetTypeConstants.CLASS_TYPE_PARAMETER_BOUND :
//				// should not happen - possible extension
//				targetType = AnnotationTargetTypeConstants.CLASS_TYPE_PARAMETER_BOUND_GENERIC_OR_ARRAY;
//				break;
//			case AnnotationTargetTypeConstants.METHOD_TYPE_PARAMETER :
//				// should not happen - possible extension
//				targetType = AnnotationTargetTypeConstants.METHOD_TYPE_PARAMETER_GENERIC_OR_ARRAY;
//				break;
//			case AnnotationTargetTypeConstants.METHOD_TYPE_PARAMETER_BOUND :
//				// should not happen - possible extension
//				targetType = AnnotationTargetTypeConstants.METHOD_TYPE_PARAMETER_BOUND_GENERIC_OR_ARRAY;
//				break;
//			case AnnotationTargetTypeConstants.THROWS :
//				targetType = AnnotationTargetTypeConstants.THROWS_GENERIC_OR_ARRAY;
			case AnnotationTargetTypeConstants.TYPE_INSTANCEOF:
				targetType = AnnotationTargetTypeConstants.TYPE_INSTANCEOF_GENERIC_OR_ARRAY;
				break;
			case AnnotationTargetTypeConstants.CLASS_LITERAL:
				targetType = AnnotationTargetTypeConstants.CLASS_LITERAL_GENERIC_OR_ARRAY;
				break;
			case AnnotationTargetTypeConstants.OBJECT_CREATION:
				targetType = AnnotationTargetTypeConstants.OBJECT_CREATION_GENERIC_OR_ARRAY;
				break;
			case AnnotationTargetTypeConstants.TYPE_CAST:
				targetType = AnnotationTargetTypeConstants.TYPE_CAST_GENERIC_OR_ARRAY;
				break;
			case AnnotationTargetTypeConstants.TYPE_ARGUMENT_METHOD_CALL :
				targetType = AnnotationTargetTypeConstants.TYPE_ARGUMENT_METHOD_CALL_GENERIC_OR_ARRAY;
				break;
			case AnnotationTargetTypeConstants.TYPE_ARGUMENT_CONSTRUCTOR_CALL :
				targetType = AnnotationTargetTypeConstants.TYPE_ARGUMENT_CONSTRUCTOR_CALL_GENERIC_OR_ARRAY;
				break;
			case AnnotationTargetTypeConstants.METHOD_RETURN_TYPE :
				targetType = AnnotationTargetTypeConstants.METHOD_RETURN_TYPE_GENERIC_OR_ARRAY;
		}
		int[] locations = Annotation.getLocations(
				annotationContext.wildcard.bound,
				null,
				annotationContext.annotation,
				null);
		// reserve enough space
		if (this.contentsOffset + 5 >= this.contents.length) {
			resizeContents(5);
		}
		this.contents[this.contentsOffset++] =
			(byte) (locations != null ?
					AnnotationTargetTypeConstants.WILDCARD_BOUND_GENERIC_OR_ARRAY :
					AnnotationTargetTypeConstants.WILDCARD_BOUND);
		this.contents[this.contentsOffset++] = (byte) targetType;
		dumpTargetTypeContents(targetType, annotationContext);
		dumpLocations(wildcardLocations);
		dumpLocations(locations);
	}

