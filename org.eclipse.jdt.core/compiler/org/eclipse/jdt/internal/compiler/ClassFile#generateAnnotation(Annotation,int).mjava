	private void generateAnnotation(Annotation annotation, int currentOffset) {
		int startingContentsOffset = currentOffset;
		if (contentsOffset + 4 >= this.contents.length) {
			resizeContents(4);
		}
		TypeBinding annotationTypeBinding = annotation.resolvedType;
		if (annotationTypeBinding == null) {
			this.contentsOffset = startingContentsOffset;
			return;
		}
		final int typeIndex = constantPool.literalIndex(annotationTypeBinding.signature());
		contents[contentsOffset++] = (byte) (typeIndex >> 8);
		contents[contentsOffset++] = (byte) typeIndex;
		if (annotation instanceof NormalAnnotation) {
			NormalAnnotation normalAnnotation = (NormalAnnotation) annotation;
			MemberValuePair[] memberValuePairs = normalAnnotation.memberValuePairs;
			if (memberValuePairs != null) {
				final int memberValuePairsLength = memberValuePairs.length;
				contents[contentsOffset++] = (byte) (memberValuePairsLength >> 8);
				contents[contentsOffset++] = (byte) memberValuePairsLength;
				for (int i = 0; i < memberValuePairsLength; i++) {
					MemberValuePair memberValuePair = memberValuePairs[i];
					if (contentsOffset + 2 >= this.contents.length) {
						resizeContents(2);
					}
					final int elementNameIndex = constantPool.literalIndex(memberValuePair.name);
					contents[contentsOffset++] = (byte) (elementNameIndex >> 8);
					contents[contentsOffset++] = (byte) elementNameIndex;
					MethodBinding methodBinding = memberValuePair.binding;
					if (methodBinding == null) {
						contentsOffset = startingContentsOffset;
					} else {
						try {
							generateElementValue(memberValuePair.value, methodBinding.returnType, startingContentsOffset);
						} catch(ClassCastException e) {
							contentsOffset = startingContentsOffset;
						} catch(ShouldNotImplement e) {
							contentsOffset = startingContentsOffset;
						}
					}
				}
			} else {
				contents[contentsOffset++] = 0;
				contents[contentsOffset++] = 0;
			}
		} else if (annotation instanceof SingleMemberAnnotation) {
			SingleMemberAnnotation singleMemberAnnotation = (SingleMemberAnnotation) annotation;
			// this is a single member annotation (one member value)
			contents[contentsOffset++] = 0;
			contents[contentsOffset++] = 1;
			if (contentsOffset + 2 >= this.contents.length) {
				resizeContents(2);
			}
			final int elementNameIndex = constantPool.literalIndex(VALUE);
			contents[contentsOffset++] = (byte) (elementNameIndex >> 8);
			contents[contentsOffset++] = (byte) elementNameIndex;
			MethodBinding methodBinding = singleMemberAnnotation.memberValuePairs()[0].binding;
			if (methodBinding == null) {
				contentsOffset = startingContentsOffset;
			} else {
				try {
					generateElementValue(singleMemberAnnotation.memberValue, methodBinding.returnType, startingContentsOffset);
				} catch(ClassCastException e) {
					contentsOffset = startingContentsOffset;
				} catch(ShouldNotImplement e) {
					contentsOffset = startingContentsOffset;
				}
			}
		} else {
			// this is a marker annotation (no member value pairs)
			contents[contentsOffset++] = 0;
			contents[contentsOffset++] = 0;
		}
	}

