	private TypeBinding getANewArrayTypeBinding(char[] typeConstantPoolName, Scope scope) {
		if (typeConstantPoolName[0] == '[') {
			int dimensions = getDimensions(typeConstantPoolName);
			if (typeConstantPoolName.length - dimensions == 1) {
				// array of base types
				TypeBinding baseType = null;
				switch(typeConstantPoolName[typeConstantPoolName.length - 1]) {
					case 'Z':
						baseType = TypeBinding.BOOLEAN;
						break;
					case 'B':
						baseType = TypeBinding.BYTE;
						break;
					case 'C':
						baseType = TypeBinding.CHAR;
						break;
					case 'D':
						baseType = TypeBinding.DOUBLE;
						break;
					case 'F':
						baseType = TypeBinding.FLOAT;
						break;
					case 'I':
						baseType = TypeBinding.INT;
						break;
					case 'J':
						baseType = TypeBinding.LONG;
						break;
					case 'S':
						baseType = TypeBinding.SHORT;
						break;
					case 'V':
						baseType = TypeBinding.VOID;
				}
				return scope.createArrayType(baseType, dimensions);
			} else {
				// array of object types
				char[] elementTypeClassName = CharOperation.subarray(typeConstantPoolName, dimensions + 1, typeConstantPoolName.length - 1);
				TypeBinding type = (TypeBinding) scope.getTypeOrPackage(
					CharOperation.splitOn('/', elementTypeClassName));
				if (!type.isValidBinding()) {
					ProblemReferenceBinding problemReferenceBinding = (ProblemReferenceBinding) type;
					if ((problemReferenceBinding.problemId() & ProblemReasons.InternalNameProvided) != 0
							|| (problemReferenceBinding.problemId() & ProblemReasons.NotVisible) != 0) {
						type = problemReferenceBinding.closestMatch();
					} else if ((problemReferenceBinding.problemId() & ProblemReasons.NotFound) != 0 && this.innerClassesBindings != null) {
						// check local inner types to see if this is a anonymous type
						Set<TypeBinding> innerTypeBindings = this.innerClassesBindings.keySet();
						for (TypeBinding binding : innerTypeBindings) {
							if (CharOperation.equals(binding.constantPoolName(), elementTypeClassName)) {
								type = binding;
								break;
							}
						}
					}
				}
				return scope.createArrayType(type, dimensions);
			}
		} else {
			TypeBinding type = (TypeBinding) scope.getTypeOrPackage(
				CharOperation.splitOn('/', typeConstantPoolName));
			if (!type.isValidBinding()) {
				ProblemReferenceBinding problemReferenceBinding = (ProblemReferenceBinding) type;
				if ((problemReferenceBinding.problemId() & ProblemReasons.InternalNameProvided) != 0
						|| (problemReferenceBinding.problemId() & ProblemReasons.NotVisible) != 0) {
					type = problemReferenceBinding.closestMatch();
				} else if ((problemReferenceBinding.problemId() & ProblemReasons.NotFound) != 0 && this.innerClassesBindings != null) {
					// check local inner types to see if this is a anonymous type
					Set<TypeBinding> innerTypeBindings = this.innerClassesBindings.keySet();
					for (TypeBinding binding : innerTypeBindings) {
						if (CharOperation.equals(binding.constantPoolName(), typeConstantPoolName)) {
							type = binding;
							break;
						}
					}
				}
			}
			return type;
		}
	}

