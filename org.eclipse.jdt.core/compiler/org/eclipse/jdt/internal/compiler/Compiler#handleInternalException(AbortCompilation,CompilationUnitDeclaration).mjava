/*
 * Compiler recovery in case of internal AbortCompilation event
 */
protected void handleInternalException(AbortCompilation abortException, CompilationUnitDeclaration unit){

	/* special treatment for SilentAbort: silently cancelling the compilation process */
	if (abortException.isSilent){
		if (abortException.silentException == null) {
			return;
		} else {
			throw abortException.silentException;
		}
	}
	
	/* uncomment following line to see where the abort came from */
	// abortException.printStackTrace(); 
		
	// Exception may tell which compilation result it is related, and which problem caused it
	CompilationResult result = abortException.compilationResult; 
	if ((result == null) && (unit != null)) result = unit.compilationResult; // current unit being processed ?
	if ((result == null) && (unitsToProcess != null) && (totalUnits > 0)) result = unitsToProcess[totalUnits - 1].compilationResult; // last unit in beginToCompile ?
	if (result != null && !result.hasBeenAccepted){
		/* distant problem which could not be reported back there */
		if (abortException.problemId != 0){ 
			result.record(
				problemReporter.createProblem(
					result.getFileName(),
					abortException.problemId, 
					abortException.problemArguments, 
					Error, // severity
					0, // source start
					0, // source end
					0)); // line number
		} else {
			/* distant internal exception which could not be reported back there */
			if (abortException.exception != null){
				this.handleInternalException(abortException.exception, 	null, result);
				return;
			}
		}
		/* hand back the compilation result */
		if (!result.hasBeenAccepted) { 
			requestor.acceptResult(result.tagAsAccepted());
		}
	} else {
		/*
		if (abortException.problemId != 0){ 
			IProblem problem =
				problemReporter.createProblem(
					"???".toCharArray(),
					abortException.problemId, 
					abortException.problemArguments, 
					Error, // severity
					0, // source start
					0, // source end
					0); // line number
			System.out.println(problem.getMessage());
		}
		*/
		abortException.printStackTrace();
	}
}

