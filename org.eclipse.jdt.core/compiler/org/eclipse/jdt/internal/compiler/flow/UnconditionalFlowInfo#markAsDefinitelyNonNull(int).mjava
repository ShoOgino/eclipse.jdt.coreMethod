/**
 * Record a definite non-null assignment at a given position.
 */
final private void markAsDefinitelyNonNull(int position) {
	// DEAD_END guarded above
	this.tagBits |= NULL_FLAG_MASK;
	long mask;
	// position is zero-based
	if (position < BitCacheSize) {
		// use bits
		this.nullAssignmentStatusBit1 |= (mask = 1L << position);
		this.nullAssignmentValueBit2 |= mask; // set non null
		this.nullAssignmentStatusBit2 &= ~mask; // clear protection
		this.nullAssignmentValueBit1 &= ~mask; // clear null
		if (coverageTestFlag && coverageTestId == 29) {
			this.nullAssignmentStatusBit1 = 0;
		}
	} 
	else {
		// use extra vector
		int vectorIndex = (position / BitCacheSize) - 1;
		// REVIEW seems to be guarded
		this.extra[2][vectorIndex] |= 
			(mask = 1L << (position % BitCacheSize));
		this.extra[5][vectorIndex] |= mask;
		this.extra[3][vectorIndex] &= ~mask;
		this.extra[4][vectorIndex] &= ~mask;
		if (coverageTestFlag && coverageTestId == 30) {
			this.extra[5][vectorIndex] = ~0;
		}
	}
}

