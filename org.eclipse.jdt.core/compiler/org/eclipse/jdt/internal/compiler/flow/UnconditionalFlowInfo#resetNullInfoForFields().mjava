public void resetNullInfoForFields() {
	if (this != DEAD_END) {
		long mask = this.maxFieldCount < BitCacheSize ? (-1L << this.maxFieldCount) : 0L; 
		mask |= this.constantFieldsMask;
		// first reset normal bits:
		this.nullBit1 |= ~mask;
		this.nullBit2 &= mask;
		this.nullBit3 &= mask;
		this.nullBit4 |= ~mask;
		if (this.maxFieldCount >= BitCacheSize && this.extra != null) {
			// use extra vector
			int localsStartIndex = this.maxFieldCount/BitCacheSize - 1;
			int localsStartOffset = this.maxFieldCount % BitCacheSize;
			if (this.extraConstantFieldMask != null){
				for (int vectorIndex = 0; vectorIndex < this.extra[2].length; vectorIndex++) {
				    if (vectorIndex >= this.extraConstantFieldMask.length) {
				    	// no constant fields after this, just mask all fields
				    	if (vectorIndex == localsStartIndex) {
				    		// some locals, some fields at this vectorIndex
				    		mask = -1L << localsStartOffset;
				    	} else {
				    		// all fields here
				    		mask = 0L;
				    	}
				    } else {
				    	if (vectorIndex == localsStartIndex) {
				    		// some locals, some fields at this vectorIndex
				    		mask = ((-1 << localsStartOffset) | this.extraConstantFieldMask[vectorIndex]);
				    	} else {
				    		// all fields here
				    		mask = 0L | this.extraConstantFieldMask[vectorIndex];
				    	}
				    	
				    }
					this.extra[2][vectorIndex]
					    |= ~mask;
					this.extra[3][vectorIndex] &= mask;
					this.extra[4][vectorIndex] &= mask;
					this.extra[5][vectorIndex] |= ~mask;
				}
			} else {
				// no constant fields
				for (int vectorIndex = 0; vectorIndex < this.extra[2].length; vectorIndex++) {
				    if (vectorIndex == localsStartIndex) {
				    	// some locals, some fields at this vectorIndex
				    	mask = -1L << localsStartOffset;
				    } else {
				    	// all fields here
				    	mask = 0L;
				    }
					this.extra[2][vectorIndex]
					    |= ~mask;
					this.extra[3][vectorIndex] &= mask;
					this.extra[4][vectorIndex] &= mask;
					this.extra[5][vectorIndex] |= ~mask;
				}
			}
		}
	}
}

