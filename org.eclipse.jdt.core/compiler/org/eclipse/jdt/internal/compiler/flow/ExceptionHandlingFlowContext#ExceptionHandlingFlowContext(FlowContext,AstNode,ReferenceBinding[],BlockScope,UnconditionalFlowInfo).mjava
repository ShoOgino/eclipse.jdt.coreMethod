public ExceptionHandlingFlowContext(
	FlowContext parent, 
	AstNode associatedNode, 
	ReferenceBinding[] handledExceptions, 
	BlockScope scope, 
	UnconditionalFlowInfo flowInfo) {

	super(parent, associatedNode);
	isMethodContext = scope == scope.methodScope();
/*	
	// for a method, append the unchecked exceptions to the handled exceptions collection

	if (scope.methodScope() == scope) {
		int length;
		System.arraycopy(
			handledExceptions, 
			0, 
			(handledExceptions = 
				new ReferenceBinding[(length = handledExceptions.length) + 2]), 
			0, 
			length); 
		handledExceptions[length] = scope.getJavaLangRuntimeException();
		handledExceptions[length + 1] = scope.getJavaLangError();
	}
*/	
	this.handledExceptions = handledExceptions;
	int count = handledExceptions.length, cacheSize = (count / BitCacheSize) + 1;
	isReached = new int[cacheSize]; // none is reached by default
	isNeeded = new int[cacheSize]; // none is needed by default
	initsOnExceptions = new UnconditionalFlowInfo[count];
	for (int i = 0; i < count; i++) {
		indexes.put(handledExceptions[i], i); // key type  -> value index
		boolean isUnchecked = 
			(scope.compareUncheckedException(handledExceptions[i]) != NotRelated); 
		int cacheIndex = i / BitCacheSize, bitMask = 1 << (i % BitCacheSize);
		if (isUnchecked) {
			isReached[cacheIndex] |= bitMask;
			initsOnExceptions[i] = flowInfo.copy().unconditionalInits();
		} else {
			initsOnExceptions[i] = FlowInfo.DeadEnd;
		}
	}
	System.arraycopy(isReached, 0, isNeeded, 0, cacheSize);
}

