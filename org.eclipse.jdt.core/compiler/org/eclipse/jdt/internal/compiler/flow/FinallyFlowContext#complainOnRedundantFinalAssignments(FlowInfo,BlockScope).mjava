/**
 * Given some contextual initialization info (derived from a try block or a catch block), this 
 * code will check that the subroutine context does not also initialize a final variable potentially set
 * redundantly.
 */

public void complainOnRedundantFinalAssignments(FlowInfo flowInfo, BlockScope scope) {
	for (int i = 0; i < assignCount; i++) {
		Reference ref;
		if (((ref = finalAssignments[i]).bits & BindingIds.FIELD) != 0) {
			// final field
			if (flowInfo.isPotentiallyAssigned((FieldBinding)((NameReference)ref).binding)) {
				scope.problemReporter().duplicateInitializationOfBlankFinalField((FieldBinding)((NameReference)ref).binding,(NameReference)ref);
			}
		} else {
			// final local variable
			if (flowInfo.isPotentiallyAssigned((LocalVariableBinding)((NameReference)ref).binding)) {
				scope.problemReporter().duplicateInitializationOfFinalLocal((LocalVariableBinding)((NameReference)ref).binding,(NameReference)ref);
			}
		}
		// any reference reported at this level is removed from the parent context 
		// where it could also be reported again
		FlowContext currentContext = parent;
		while (currentContext != null) {
			if (currentContext.isSubRoutine()) {
				currentContext.removeFinalAssignmentIfAny(ref);
			}
			currentContext = currentContext.parent;
		}
	}
}

