	public void recordUsingNullReference(Scope scope, LocalVariableBinding local, 
			Expression reference, int checkType, FlowInfo flowInfo) {
		if ((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0)	{
		if (deferNullDiagnostic) { // within an enclosing loop, be conservative
			switch (checkType) {
				case CAN_ONLY_NULL_NON_NULL :
				case CAN_ONLY_NULL:
					if (flowInfo.cannotBeNull(local)) {
						if (checkType == CAN_ONLY_NULL_NON_NULL) {
							scope.problemReporter().localVariableCannotBeNull(local, reference);
						}
						return;
					}
					if (flowInfo.canOnlyBeNull(local)) {
						scope.problemReporter().localVariableCanOnlyBeNull(local, reference);
						return;
					}
					break;
				case MAY_NULL :
					if (flowInfo.cannotBeNull(local)) {
						return;
					}
					if (flowInfo.canOnlyBeNull(local)) {
						scope.problemReporter().localVariableCanOnlyBeNull(local, reference);
						return;
					}
					break;
				default:
					// never happens
			}
		}
		else { // no enclosing loop, be as precise as possible right now
			switch (checkType) {
				case CAN_ONLY_NULL_NON_NULL :
					if (flowInfo.isDefinitelyNonNull(local)) {
						scope.problemReporter().localVariableCannotBeNull(local, reference);				
						return;
					}
				case CAN_ONLY_NULL:
					if (flowInfo.isDefinitelyNull(local)) {
						scope.problemReporter().localVariableCanOnlyBeNull(local, reference);
						return;
					}
					break;
				case MAY_NULL :
					if (flowInfo.isDefinitelyNull(local)) {
						scope.problemReporter().localVariableCanOnlyBeNull(local, reference);
						return;
					}
					if (flowInfo.isPotentiallyNull(local)) {
						scope.problemReporter().localVariableMayBeNull(local, reference);
						return;
					}
					if (flowInfo.isDefinitelyNonNull(local)) {
						return; // shortcut: cannot be null
					}
					break;
				default:
					// never happens
			}
		}
		recordNullReference(local, reference, checkType); 
		// prepare to re-check with try/catch flow info
		}
	}

