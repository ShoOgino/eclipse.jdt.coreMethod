// REVIEW javadoc policy?
public void markAsComparedEqualToNull(LocalVariableBinding local) {
	// protected from non-object locals in calling methods
	if (this != DEAD_END) {
		this.tagBits |= NULL_FLAG_MASK;
		int position;
		long mask, unknownAssigned;
		// position is zero-based
		if ((position = local.id + this.maxFieldCount) < BitCacheSize) {
			// use bits
			mask = 1L << position;
			if ((mask & // leave assigned null unchanged
					this.nullAssignmentStatusBit1 &
					~this.nullAssignmentStatusBit2 &
					this.nullAssignmentValueBit1 &
					~this.nullAssignmentValueBit2) == 0) {
				unknownAssigned = this.nullAssignmentStatusBit1 &
					~this.nullAssignmentStatusBit2 &
					this.nullAssignmentValueBit1 &
					this.nullAssignmentValueBit2;
				// set protected
				this.nullAssignmentStatusBit2 |= mask;
				this.nullAssignmentStatusBit1 &= (mask = ~mask);
				// protected is null
				this.nullAssignmentValueBit1 &= mask | ~unknownAssigned;
				this.nullAssignmentValueBit2 &= mask;
				// clear potential anything but null
				// REVIEW co�ts relatifs d'un assignment et d'une n�gation?
				if (coverageTestFlag && coverageTestId == 24) {
					this.nullAssignmentValueBit2 = ~0;
				}
			}
			if (coverageTestFlag && coverageTestId == 25) {
				this.nullAssignmentValueBit2 = ~0;
			}
		} 
		else {
			// use extra vector
			int vectorIndex = (position / BitCacheSize) - 1;
			mask = 1L << (position % BitCacheSize);
			if (this.extra == null) {
				int length = vectorIndex + 1;
				this.extra = new long[extraLength][];
				for (int j = 0; j < extraLength; j++) {
					this.extra[j] = new long[length ];
				}
				if (coverageTestFlag && coverageTestId == 26) {
					throw new AssertionFailedException("COVERAGE 26"); //$NON-NLS-1$
				}
			}
			else {
				int oldLength;
				if (vectorIndex >= (oldLength = this.extra[0].length)) {
					int newLength = vectorIndex + 1;
					for (int j = 0; j < extraLength; j++) {
						System.arraycopy(this.extra[j], 0, 
							(this.extra[j] = new long[newLength]), 0,
							oldLength);
					}
					if (coverageTestFlag && coverageTestId == 27) {
						throw new AssertionFailedException("COVERAGE 27"); //$NON-NLS-1$
					}
				}
			}
			if ((mask &
					this.extra[2][vectorIndex] &
					~this.extra[3][vectorIndex] &
					this.extra[4][vectorIndex] &
					~this.extra[5][vectorIndex]) == 0) {
				unknownAssigned = this.extra[2][vectorIndex] &
					~this.extra[3][vectorIndex] &
					this.extra[4][vectorIndex] &
					this.extra[5][vectorIndex];
				this.extra[3][vectorIndex]	 |= mask;
				this.extra[2][vectorIndex] &= (mask = ~mask);
				this.extra[4][vectorIndex] &= mask | ~unknownAssigned;
				this.extra[5][vectorIndex]	&= mask;
				if (coverageTestFlag && coverageTestId == 28) {
					this.extra[5][vectorIndex] = ~0;
				}
			}
		}
	}
}

