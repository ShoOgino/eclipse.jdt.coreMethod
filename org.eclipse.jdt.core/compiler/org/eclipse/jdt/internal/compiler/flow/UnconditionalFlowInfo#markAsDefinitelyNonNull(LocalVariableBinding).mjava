public void markAsDefinitelyNonNull(LocalVariableBinding local) {
	// protected from non-object locals in calling methods
	if (this != DEAD_END) {
		this.tagBits |= NULL_FLAG_MASK;
		int position;
		long mask;
		// position is zero-based
		if ((position = local.id + this.maxFieldCount) < BitCacheSize) {		// use bits
			this.nullAssignmentStatusBit1 |= (mask = 1L << position);
			this.nullAssignmentValueBit2 |= mask; // set non null
			this.nullAssignmentStatusBit2 &= ~mask; // clear protection
			this.nullAssignmentValueBit1 &= ~mask; // clear null
			if (coverageTestFlag && coverageTestId == 29) {
				this.nullAssignmentStatusBit1 = 0;
			}
		} 
		else {
			// use extra vector
			int vectorIndex = (position / BitCacheSize) - 1;
			this.extra[2][vectorIndex] |= 
				(mask = 1L << (position % BitCacheSize));
			this.extra[5][vectorIndex] |= mask;
			this.extra[3][vectorIndex] &= ~mask;
			this.extra[4][vectorIndex] &= ~mask;
			if (coverageTestFlag && coverageTestId == 30) {
				this.extra[5][vectorIndex] = ~0;
			}
		}
	}
}

