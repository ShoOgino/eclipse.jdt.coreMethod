/**
 * Make a new null info registry, using an upstream flow info. All definite
 * assignments of the upstream are carried forward, since a try block may
 * exit before its first statement.
 * @param upstream - UnconditionalFlowInfo: the flow info before we enter the
 * 		try block; only definite assignments are considered; this parameter is
 *  	not modified by this constructor
 */
public NullInfoRegistry(UnconditionalFlowInfo upstream) {
	this.maxFieldCount = upstream.maxFieldCount;
	if ((upstream.tagBits & NULL_FLAG_MASK) != 0) {
		long u1, u2, u3, u4, nu2, nu3, nu4;
		this.nullBit2 = (u1 = upstream.nullBit1)
			& (u2 = upstream.nullBit2)
			& (nu3 = ~(u3 = upstream.nullBit3))
			& (nu4 = ~(u4 = upstream.nullBit4));
		this.nullBit3 =	u1 & (nu2 = ~u2) & u3 & nu4;
		this.nullBit4 =	u1 & nu2 &nu3 & u4;
		if ((this.nullBit2 | this.nullBit3 | this.nullBit4) != 0) {
			this.tagBits |= NULL_FLAG_MASK;
		}
		if (upstream.extra != null) {
			this.extra = new long[extraLength][];
			int length = upstream.extra[2].length;
			for (int i = 2; i < extraLength; i++) {
				this.extra[i] = new long[length];
			}
			for (int i = 0; i < length; i++) {
        		this.extra[2 + 1][i] = (u1 = upstream.extra[1 + 1][i])
        			& (u2 = upstream.extra[2 + 1][i])
        			& (nu3 = ~(u3 = upstream.extra[3 + 1][i]))
        			& (nu4 = ~(u4 = upstream.extra[4 + 1][i]));
        		this.extra[3 + 1][i] =	u1 & (nu2 = ~u2) & u3 & nu4;
        		this.extra[4 + 1][i] =	u1 & nu2 &nu3 & u4;
        		if ((this.extra[2 + 1][i] | this.extra[3 + 1][i] | this.extra[4 + 1][i]) != 0) {
        			this.tagBits |= NULL_FLAG_MASK;
        		}
			}
		}
	}
}

