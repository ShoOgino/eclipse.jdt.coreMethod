final public boolean isDefinitelyNonNull(LocalVariableBinding local) {
	// do not want to complain in unreachable code
	if ((this.tagBits & UNREACHABLE) != 0 || 
			(this.tagBits & NULL_FLAG_MASK) == 0) {
		return false;
	}
	if ((local.type.tagBits & TagBits.IsBaseType) != 0 || 
			local.constant() != Constant.NotAConstant) { 
		// REVIEW only true if local is of a non object type, hence 
		// REVIEW		second test is useless?
		return true;
	}
	int position = local.id + this.maxFieldCount;
	long mask;
	if (position < BitCacheSize) { // use bits
		return 
			(this.nullAssignmentStatusBit2 & 
				(mask = 1L << position)) != 0 ?
			(this.nullAssignmentStatusBit1 & mask) != 0 :
			(this.nullAssignmentStatusBit1 & 
				this.nullAssignmentValueBit2 & mask) != 0 &&
			(this.nullAssignmentValueBit1 & mask) == 0; 
	}
	// use extra vector
	if (this.extra == null) {
		return false; // if vector not yet allocated, then not initialized
	}
	int vectorIndex;
	if ((vectorIndex = (position / BitCacheSize) - 1)  
			>= this.extra[0].length) {
		return false; // if not enough room in vector, then not initialized
	}
	return 
		(this.extra[3][vectorIndex] & 
			(mask = 1L << (position % BitCacheSize))) != 0 ?
		(this.extra[2][vectorIndex] & mask) != 0 :
		(this.extra[2][vectorIndex] & 
			this.extra[5][vectorIndex] & mask) != 0 &&
		(this.extra[4][vectorIndex] & mask) == 0;
}

