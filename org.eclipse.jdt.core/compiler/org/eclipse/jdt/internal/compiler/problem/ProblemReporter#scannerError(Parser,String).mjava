public void scannerError(Parser parser, String errorTokenName) {
	Scanner scanner = parser.scanner;

	int flag = ParsingErrorNoSuggestion;
	int startPos = scanner.startPosition;

	//special treatment for recognized errors....
	if (errorTokenName.equals(Scanner.END_OF_SOURCE))
		flag = END_OF_SOURCE;
	else
		if (errorTokenName.equals(Scanner.INVALID_HEXA))
			flag = INVALID_HEXA;
		else
			if (errorTokenName.equals(Scanner.INVALID_OCTAL))
				flag = INVALID_OCTAL;
			else
				if (errorTokenName.equals(Scanner.INVALID_CHARACTER_CONSTANT))
					flag = INVALID_CHARACTER_CONSTANT;
				else
					if (errorTokenName.equals(Scanner.INVALID_ESCAPE))
						flag = INVALID_ESCAPE;
					else
						if (errorTokenName.equals(Scanner.INVALID_UNICODE_ESCAPE)){
							flag = INVALID_UNICODE_ESCAPE;
							// better locate the error message
							char[] source = scanner.source;
							int checkPos = scanner.currentPosition - 1;
							if (checkPos >= source.length) checkPos = source.length - 1;
							while (checkPos >= startPos){
								if (source[checkPos] == '\\') break;
								checkPos --;
							}
							startPos = checkPos;
						} else
							if (errorTokenName.equals(Scanner.INVALID_FLOAT))
								flag = INVALID_FLOAT;
							else
								if (errorTokenName.equals(Scanner.UNTERMINATED_STRING))
									flag = UNTERMINATED_STRING;
								else
									if (errorTokenName.equals(Scanner.UNTERMINATED_COMMENT))
										flag = UNTERMINATED_COMMENT;
									else
										if (errorTokenName.equals(Scanner.INVALID_CHAR_IN_STRING))
											flag = UNTERMINATED_STRING;

	this.handle(
		flag, 
		flag == ParsingErrorNoSuggestion 
			? new String[] {errorTokenName}
			: new String[0],
		// this is the current -invalid- token position
		startPos, 
		scanner.currentPosition - 1,
		parser.compilationUnit.compilationResult);
}

