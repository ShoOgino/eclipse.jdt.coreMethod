public void illegalReturnRedefinition(AbstractMethodDeclaration abstractMethodDecl, MethodBinding inheritedMethod, char[][] nonNullAnnotationName) {
	// nonNullAnnotationName is not used in 1.8-mode
	MethodDeclaration methodDecl = (MethodDeclaration) abstractMethodDecl;
	StringBuffer methodSignature = new StringBuffer();
	methodSignature
		.append(inheritedMethod.declaringClass.readableName())
		.append('.')
		.append(inheritedMethod.readableName());

	StringBuffer shortSignature = new StringBuffer();
	shortSignature
		.append(inheritedMethod.declaringClass.shortReadableName())
		.append('.')
		.append(inheritedMethod.shortReadableName());
	int sourceStart = methodDecl.returnType.sourceStart;
	Annotation[] annotations = methodDecl.annotations;
	Annotation annotation = findAnnotation(annotations, TypeIds.T_ConfiguredAnnotationNullable);
	if (annotation != null) {
		sourceStart = annotation.sourceStart;
	}
	TypeBinding inheritedReturnType = inheritedMethod.returnType;
	String[] arguments;
	String[] argumentsShort;
	if (this.options.useNullTypeAnnotations != Boolean.TRUE) {
		StringBuilder returnType = new StringBuilder();
		returnType.append('@').append(CharOperation.concatWith(nonNullAnnotationName, '.'));
		returnType.append(' ').append(inheritedReturnType.readableName());
		arguments = new String[] { methodSignature.toString(), returnType.toString() };
		
		returnType = new StringBuilder();
		returnType.append('@').append(nonNullAnnotationName[nonNullAnnotationName.length-1]);
		returnType.append(' ').append(inheritedReturnType.shortReadableName());
		argumentsShort = new String[] { shortSignature.toString(), returnType.toString() };
	} else {
		arguments = new String[] { methodSignature.toString(), 
									String.valueOf(inheritedReturnType.nullAnnotatedReadableName(this.options, false))};
		argumentsShort = new String[] { shortSignature.toString(),
									String.valueOf(inheritedReturnType.nullAnnotatedReadableName(this.options, true))};
	}
	this.handle(
			IProblem.IllegalReturnNullityRedefinition, 
			arguments,
			argumentsShort,
			sourceStart,
			methodDecl.returnType.sourceEnd);
}

