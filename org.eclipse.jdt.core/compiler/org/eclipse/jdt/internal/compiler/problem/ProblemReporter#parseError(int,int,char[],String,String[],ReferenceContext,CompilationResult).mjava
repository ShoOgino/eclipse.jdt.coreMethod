	public void parseError(
		int startPosition,
		int endPosition,
		char[] currentTokenSource,
		String errorTokenName,
		String[] possibleTokens,
		ReferenceContext context,
		CompilationResult compilationResult) {

		if (possibleTokens.length == 0) { //no suggestion available
			this.handle(ParsingErrorNoSuggestion, new String[] { errorTokenName },
			// this is the current -invalid- token position
			startPosition, endPosition, context, compilationResult);
			return;
		}

		//build a list of probable right tokens
		StringBuffer list = new StringBuffer(20);
		for (int i = 0, max = possibleTokens.length; i < max; i++) {
			if (i > 0)
				list.append(", ");
			list.append('"');
			list.append(possibleTokens[i]);
			list.append('"');
		}

		//extract the literal when it's a literal (fancier error message ...) 
		if ((errorTokenName.equals("IntegerLiteral"))
			|| (errorTokenName.equals("LongLiteral"))
			|| (errorTokenName.equals("FloatingPointLiteral"))
			|| (errorTokenName.equals("DoubleLiteral"))
			|| (errorTokenName.equals("StringLiteral"))
			|| (errorTokenName.equals("CharacterLiteral"))
			|| (errorTokenName.equals("Identifier"))) {
			errorTokenName = new String(currentTokenSource);
		}

		this.handle(ParsingError, new String[] { errorTokenName, list.toString()},
		// this is the current -invalid- token position
		startPosition, endPosition, context, compilationResult);
	}

