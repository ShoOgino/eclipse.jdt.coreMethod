public void illegalReturnRedefinition(ASTNode location, MethodBinding descriptorMethod,
			char[][] nonNullAnnotationName, 
			char/*@Nullable*/[][] providedAnnotationName, TypeBinding providedType) {
	StringBuffer methodSignature = new StringBuffer()
		.append(descriptorMethod.declaringClass.readableName())
		.append('.')
		.append(descriptorMethod.readableName());
	StringBuffer shortSignature = new StringBuffer()
		.append(descriptorMethod.declaringClass.shortReadableName())
		.append('.')
		.append(descriptorMethod.shortReadableName());
	StringBuffer providedPrefix = new StringBuffer(); 
	StringBuffer providedShortPrefix = new StringBuffer(); 
	if (providedAnnotationName != null) {
		providedPrefix.append('@').append(CharOperation.toString(providedAnnotationName)).append(' ');
		providedShortPrefix.append('@').append(providedAnnotationName[providedAnnotationName.length-1]).append(' ');
	}
	this.handle(
		providedAnnotationName == null
			? IProblem.ReferenceExpressionReturnNullRedefUnchecked
			: IProblem.ReferenceExpressionReturnNullRedef,
		new String[] { methodSignature.toString(),
						CharOperation.toString(nonNullAnnotationName), String.valueOf(descriptorMethod.returnType.readableName()),
						providedPrefix.toString(), String.valueOf(providedType.readableName())},
		new String[] { shortSignature.toString(),
						String.valueOf(nonNullAnnotationName[nonNullAnnotationName.length-1]), String.valueOf(descriptorMethod.returnType.shortReadableName()),
						providedShortPrefix.toString(), String.valueOf(providedType.shortReadableName())},
		location.sourceStart,
		location.sourceEnd);
}

