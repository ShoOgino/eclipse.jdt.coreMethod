public void nullityMismatchingTypeAnnotation(Expression expression, TypeBinding providedType, TypeBinding requiredType, NullAnnotationMatching status) 
{
	if (providedType.id == TypeIds.T_null) {
		nullityMismatchIsNull(expression, requiredType);
		return;
	}
	String[] arguments ;
	String[] shortArguments;
		
	int problemId = 0;
	if (status.superTypeHint != null) {
		problemId = (status.isUnchecked()
			? IProblem.NullityUncheckedTypeAnnotationDetailSuperHint
			: IProblem.NullityMismatchingTypeAnnotationSuperHint);
		arguments      = new String[] { null, null, status.superTypeHintName(this.options, false) };
		shortArguments = new String[] { null, null, status.superTypeHintName(this.options, true) };
	} else {
		problemId = (status.isUnchecked()
			? IProblem.NullityUncheckedTypeAnnotationDetail
			: IProblem.NullityMismatchingTypeAnnotation);
		arguments      = new String[2];
		shortArguments = new String[2];
	}
	arguments[0] = String.valueOf(requiredType.nullAnnotatedReadableName(this.options, false));
	arguments[1] = String.valueOf(providedType.nullAnnotatedReadableName(this.options, false));
	shortArguments[0] = String.valueOf(requiredType.nullAnnotatedReadableName(this.options, true));
	shortArguments[1] = String.valueOf(providedType.nullAnnotatedReadableName(this.options, true));
	this.handle(problemId, arguments, shortArguments, expression.sourceStart, expression.sourceEnd);
}

