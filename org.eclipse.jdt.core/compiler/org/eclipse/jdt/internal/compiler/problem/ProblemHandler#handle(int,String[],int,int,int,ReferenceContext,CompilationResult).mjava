	public void handle(
		int problemId,
		String[] problemArguments,
		int severity,
		int problemStartPosition,
		int problemEndPosition,
		ReferenceContext referenceContext,
		CompilationResult unitResult) {

		if (severity == Ignore)
			return;

		// if no reference context, we need to abort from the current compilation process
		if (referenceContext == null) {
			throw new AbortCompilation(problemId, problemArguments);
		}

		IProblem problem =
			this.createProblem(
				unitResult.getFileName(),
				problemId,
				problemArguments,
				severity,
				problemStartPosition,
				problemEndPosition,
				problemStartPosition >= 0
					? searchLineNumber(unitResult.lineSeparatorPositions, problemStartPosition)
					: 0);

		switch (severity & Error) {
			case Error :
				referenceContext.tagAsHavingErrors();
				this.record(problem, unitResult);

				// should abort ?
				int abortLevel;
				if ((abortLevel =
					(policy.stopOnFirstError() ? AbortCompilation : severity & Abort))
					!= 0) {
					referenceContext.abort(abortLevel);
				}
				break;
			case Warning :
				this.record(problem, unitResult);
				break;
		}
	}

