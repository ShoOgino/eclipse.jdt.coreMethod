private boolean isKeyword(int token) {
	switch(token) {
		case Scanner.TokenNameabstract:
		case Scanner.TokenNameassert:
		case Scanner.TokenNamebyte:
		case Scanner.TokenNamebreak:
		case Scanner.TokenNameboolean:
		case Scanner.TokenNamecase:
		case Scanner.TokenNamechar:
		case Scanner.TokenNamecatch:
		case Scanner.TokenNameclass:
		case Scanner.TokenNamecontinue:
		case Scanner.TokenNamedo:
		case Scanner.TokenNamedouble:
		case Scanner.TokenNamedefault:
		case Scanner.TokenNameelse:
		case Scanner.TokenNameextends:
		case Scanner.TokenNamefor:
		case Scanner.TokenNamefinal:
		case Scanner.TokenNamefloat:
		case Scanner.TokenNamefalse:
		case Scanner.TokenNamefinally:
		case Scanner.TokenNameif:
		case Scanner.TokenNameint:
		case Scanner.TokenNameimport:
		case Scanner.TokenNameinterface:
		case Scanner.TokenNameimplements:
		case Scanner.TokenNameinstanceof:
		case Scanner.TokenNamelong:
		case Scanner.TokenNamenew:
		case Scanner.TokenNamenull:
		case Scanner.TokenNamenative:
		case Scanner.TokenNamepublic:
		case Scanner.TokenNamepackage:
		case Scanner.TokenNameprivate:
		case Scanner.TokenNameprotected:
		case Scanner.TokenNamereturn:
		case Scanner.TokenNameshort:
		case Scanner.TokenNamesuper:
		case Scanner.TokenNamestatic:
		case Scanner.TokenNameswitch:
		case Scanner.TokenNamestrictfp:
		case Scanner.TokenNamesynchronized:
		case Scanner.TokenNametry:
		case Scanner.TokenNamethis:
		case Scanner.TokenNametrue:
		case Scanner.TokenNamethrow:
		case Scanner.TokenNamethrows:
		case Scanner.TokenNametransient:
		case Scanner.TokenNamevoid:
		case Scanner.TokenNamevolatile:
		case Scanner.TokenNamewhile:
			return true;
		default: 
			return false;
	}
}

