	public void fieldTypeProblem(
		SourceTypeBinding type,
		FieldDeclaration fieldDecl,
		TypeBinding expectedType) {
		int problemId = expectedType.problemId();
		switch (problemId) {
			case NotFound : // 1
			case NotVisible : // 2
			case Ambiguous : // 3
			case InternalNameProvided : // 4
			case InheritedNameHidesEnclosingName : // 5
				this.handle(
					FieldTypeProblemBase + problemId,
					new String[] {
						fieldDecl.name(),
						new String(type.sourceName()),
						new String(expectedType.readableName())},
					fieldDecl.type.sourceStart(),
					fieldDecl.type.sourceEnd());
				break;
			case NoError : // 0
			default :
				needImplementation(); // want to fail to see why we were here...
				break;
		}
	}

