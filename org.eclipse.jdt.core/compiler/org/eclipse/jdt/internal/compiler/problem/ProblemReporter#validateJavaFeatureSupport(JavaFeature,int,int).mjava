//Returns true if the problem is handled and reported (only errors considered and not warnings)
public boolean validateJavaFeatureSupport(JavaFeature feature, int sourceStart, int sourceEnd) {
	boolean versionInRange = feature.getCompliance() <= this.options.sourceLevel;
	String version = CompilerOptions.versionFromJdkLevel(feature.getCompliance());
	int problemId = -1;
	if (feature.isPreview()) {
		if (!versionInRange) {
			problemId = IProblem.PreviewFeatureNotSupported;
		} else if (!this.options.enablePreviewFeatures) {
			problemId = IProblem.PreviewFeatureDisabled;
		} else if (this.options.isAnyEnabled(IrritantSet.PREVIEW)) {
			problemId = IProblem.PreviewFeatureUsed;
		}
	} else if (!versionInRange) {
		problemId = IProblem.FeatureNotSupported;
	}
	if (problemId > -1) {
		String[] args = new String[] {feature.getName(), version};
		this.handle(
				problemId,
				args,
				args,
				sourceStart,
				sourceEnd);
		return true;
	}
	return false;
}

