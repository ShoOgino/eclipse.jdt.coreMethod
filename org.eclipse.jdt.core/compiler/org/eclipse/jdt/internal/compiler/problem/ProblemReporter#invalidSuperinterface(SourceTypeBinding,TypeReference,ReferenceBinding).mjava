public void invalidSuperinterface(SourceTypeBinding type, TypeReference superinterfaceRef, ReferenceBinding expectedType) {
	int problemId = expectedType.problemId();
	int id;
	switch (problemId) {
		case NotFound : // 1
			id = IProblem.InterfaceNotFound;
			break;
		case NotVisible : // 2
			id = IProblem.InterfaceNotVisible;
			break;
		case Ambiguous : // 3
			id = IProblem.InterfaceAmbiguous;
			break;
		case InternalNameProvided : // 4
			id = IProblem.InterfaceInternalNameProvided;
			break;
		case InheritedNameHidesEnclosingName : // 5
			id = IProblem.InterfaceInheritedNameHidesEnclosingName;
			break;
		case NoError : // 0
		default :
			needImplementation(); // want to fail to see why we were here...
			return;
	}
		this.handle(
			id,
			new String[] {new String(expectedType.readableName()), new String(type.sourceName())},
			new String[] {new String(expectedType.shortReadableName()), new String(type.sourceName())},
			superinterfaceRef.sourceStart,
			superinterfaceRef.sourceEnd);
}

