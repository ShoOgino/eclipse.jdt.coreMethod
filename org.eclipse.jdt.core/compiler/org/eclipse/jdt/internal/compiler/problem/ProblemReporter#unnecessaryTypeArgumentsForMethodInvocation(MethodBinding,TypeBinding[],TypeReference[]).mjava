public void unnecessaryTypeArgumentsForMethodInvocation(MethodBinding method, TypeBinding[] genericTypeArguments, TypeReference[] typeArguments) {
	String methodName = method.isConstructor()
		? new String(method.declaringClass.shortReadableName())
		: new String(method.selector);
	this.handle(
			method.isConstructor()
				? IProblem.UnusedTypeArgumentsForConstructorInvocation
				: IProblem.UnusedTypeArgumentsForMethodInvocation,
		new String[] { 
				methodName,
		        typesAsString(method.isVarargs(), method.parameters, false), 
		        new String(method.declaringClass.readableName()), 
		        typesAsString(method.isVarargs(), genericTypeArguments, false) },
		new String[] { 
				methodName,
		        typesAsString(method.isVarargs(), method.parameters, true), 
		        new String(method.declaringClass.shortReadableName()), 
		        typesAsString(method.isVarargs(), genericTypeArguments, true) },
		typeArguments[0].sourceStart,
		typeArguments[typeArguments.length-1].sourceEnd);		
}

