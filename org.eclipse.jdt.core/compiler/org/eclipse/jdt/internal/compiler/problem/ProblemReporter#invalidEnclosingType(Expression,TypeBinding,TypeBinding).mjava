public void invalidEnclosingType(Expression expression, TypeBinding type, TypeBinding enclosingType) {
	//CODE should be UPDATED according to error coding in the different type binding errors
	//The different targetted errors should be :
		//UndefinedType
		//NotVisibleType
		//AmbiguousType
		//InternalNameProvided

	int flag = IProblem.UndefinedType; // default
	switch (type.problemId()) {
		case NotFound : // 1
			flag = IProblem.UndefinedType;
			break;
		case NotVisible : // 2
			flag = IProblem.NotVisibleType;
			break;
		case Ambiguous : // 3
			flag = IProblem.AmbiguousType;
			break;
		case InternalNameProvided :
			flag = IProblem.InternalTypeNameProvided;
			break;
		case NoError : // 0
		default :
			needImplementation(); // want to fail to see why we were here...
			break;
	}

	this.handle(
		flag,
		new String[] {new String(enclosingType.readableName()) + "." + new String(type.readableName())}, //$NON-NLS-1$
		expression.sourceStart,
		expression.sourceEnd);
}

