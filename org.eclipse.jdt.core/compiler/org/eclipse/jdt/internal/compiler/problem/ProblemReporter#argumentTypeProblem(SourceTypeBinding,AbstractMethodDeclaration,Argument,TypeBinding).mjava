public void argumentTypeProblem(SourceTypeBinding type, AbstractMethodDeclaration methodDecl, Argument arg, TypeBinding expectedType) {
	int problemId = expectedType.problemId();
	int id;
	switch (problemId) {
		case NotFound : // 1
			id = IProblem.ArgumentTypeNotFound;
			break;
		case NotVisible : // 2
			id = IProblem.ArgumentTypeNotVisible;
			break;
		case Ambiguous : // 3
			id = IProblem.ArgumentTypeAmbiguous;
			break;
		case InternalNameProvided : // 4
			id = IProblem.ArgumentTypeInternalNameProvided;
			break;
		case InheritedNameHidesEnclosingName : // 5
			id = IProblem.ArgumentTypeInheritedNameHidesEnclosingName;
			break;
		case NoError : // 0
		default :
			needImplementation(); // want to fail to see why we were here...
			return;
	}
	this.handle(
		id,
		new String[] {new String(methodDecl.selector), arg.name(), new String(expectedType.readableName())},
		arg.type.sourceStart,
		arg.type.sourceEnd);
}

