/**
 * Returns the names of the extra marker attributes associated to this problem, so it can persisted into a marker 
 * by the JavaBuilder.
 * By default, no EXTRA attributes is persisted, but clients may choose to add more information into the marker.
 * Thus, a categorized problem persists the following attributes:
 * <ul>
 * <li>	{@link IMarker#MESSAGE} -&gt; {@link IProblem#getMessage()}</li>
 * <li>	{@link IMarker#SEVERITY} -&gt; {@link IMarker#SEVERITY_ERROR}/{@link IMarker#SEVERITY_WARNING}</li>
 * <li>	{@link IJavaModelMarker#ID} -&gt; {@link IProblem#getID()}</li>
 * <li>	{@link IMarker#CHAR_START}  -&gt; {@link IProblem#getSourceStart()}</li>
 * <li>	{@link IMarker#CHAR_END}  -&gt; {@link IProblem#getSourceEnd()}</li>
 * <li>	{@link IMarker#LINE_NUMBER}  -&gt; {@link IProblem#getSourceLineNumber()}</li>
 * <li>	{@link IJavaModelMarker#ARGUMENTS}  -&gt; some <code>String[]</code> used to compute quickfixes </li>
 * <li>	{@link IJavaModelMarker#CATEGORY_ID}  -&gt; {@link CategorizedProblem#getCategoryID()}</li>
 * </ul>
 * whereas a categorized task persists the following attributes (problems and tasks are differenciated by their
 * associated marker type, {@link CategorizedProblem#getMarkerType()}) :
 * <ul>
 * <li>	{@link IMarker#MESSAGE} -&gt; {@link IProblem#getMessage()}</li>
 * <li>	{@link IMarker#PRIORITY} -&gt; {@link IMarker#PRIORITY_HIGH}/{@link IMarker#PRIORITY_NORMAL}/{@link IMarker#PRIORITY_LOW}</li>
 * <li>	{@link IJavaModelMarker#ID} -&gt; {@link IProblem#getID()}</li>
 * <li>	{@link IMarker#CHAR_START}  -&gt; {@link IProblem#getSourceStart()}</li>
 * <li>	{@link IMarker#CHAR_END}  -&gt; {@link IProblem#getSourceEnd()}</li>
 * <li>	{@link IMarker#LINE_NUMBER}  -&gt; {@link IProblem#getSourceLineNumber()}</li>
 * <li>	{@link IMarker#USER_EDITABLE}  -&gt; {@link Boolean#FALSE}</li>
 * </ul>

 * The names must be eligible for marker creation, as defined by {@link IMarker#setAttributes(String[], Object[])}, 
 * and there must be as many names as values according to {@link #getExtraMarkerAttributeValues()}.
 * Note that extra marker attributes will be inserted after default ones (as described in {@link CategorizedProblem#getMarkerType()},
 * and thus could be used to override defaults.
 * @return the names of the corresponding marker attributes
 */
public String[] getExtraMarkerAttributeNames() {
	return DefaultProblem.EMPTY_NAMES;
}

