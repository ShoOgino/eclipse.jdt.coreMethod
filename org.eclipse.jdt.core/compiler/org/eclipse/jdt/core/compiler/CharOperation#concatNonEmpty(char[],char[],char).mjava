/**
 * Answers the concatenation of the two arrays inserting the separator character between the two arrays.
 * It answers null if the two arrays are null.
 * If the first array is null or is empty, then the second array is returned.
 * If the second array is null or is empty, then the first array is returned.
 * <br>
 * <br>
 * For example:
 * <ol>
 * <li><pre>
 *    first = null
 *    second = { 'a' }
 *    separator = '/'
 *    => result = { ' a' }
 * </pre>
 * </li>
 * <li><pre>
 *    first = { ' a' }
 *    second = null
 *    separator = '/'
 *    => result = { ' a' }
 * </pre>
 * </li>
 * <li><pre>
 *    first = { ' a' }
 *    second = { ' b' }
 *    separator = '/'
 *    => result = { ' a' , '/', 'b' }
 * </pre>
 * </li>
 * <li><pre>
 *    first = { ' a' }
 *    second = {  }
 *    separator = '/'
 *    => result = { ' a'}
 * </pre>
 * </li>

 * </ol>
 *
 * @param first the first array to concatenate
 * @param second the second array to concatenate
 * @param separator the character to insert
 * @return the concatenation of the two arrays inserting the separator character
 * between the two arrays , or null if the two arrays are null.
 * @since 3.12
 */
public static final char[] concatNonEmpty(
	char[] first,
	char[] second,
	char separator) {
	if (first == null || first.length == 0)
		return second;
	if (second == null || second.length == 0)
		return first;
	return concat(first, second, separator);
}

