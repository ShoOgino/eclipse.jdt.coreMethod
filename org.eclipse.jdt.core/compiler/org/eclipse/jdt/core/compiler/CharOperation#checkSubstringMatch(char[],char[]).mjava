/**
 * Internal substring matching method; called after the null and length
 * checks are performed.
 *
 * @param pattern the given pattern
 * @param name the given name
 * @return true if the pattern matches the given name, false otherwise
 *
 * @see CharOperation#substringMatch(char[], char[])
 */
private static final boolean checkSubstringMatch(char[] pattern, char[] name) {

/* XXX: to be revised/enabled

	// allow non-consecutive occurrence of pattern characters
	if (pattern.length >= 3) {
		int pidx = 0;

		for (int nidx = 0; nidx < name.length; nidx++) {
			if (Character.toLowerCase(name[nidx]) ==
					Character.toLowerCase(pattern[pidx]))
				pidx++;
			if (pidx == pattern.length)
				return true;
		}

	// for short patterns only allow consecutive occurrence
	} else {
*/
		// outer loop iterates on the characters of the name; trying to
		// match at any possible position
		outer: for (int nidx = 0; nidx < name.length - pattern.length + 1; nidx++) {
			// inner loop iterates on pattern characters
			for (int pidx = 0; pidx < pattern.length; pidx++) {
				if (Character.toLowerCase(name[nidx + pidx]) !=
						Character.toLowerCase(pattern[pidx])) {
					// no match until parameter list; do not match parameter list
					if ((name[nidx + pidx] == '(') || (name[nidx + pidx] == ':'))
						return false;
					continue outer;
				}
				if (pidx == pattern.length - 1)
					return true;
			}
		}
	// XXX: }

	return false;
}

