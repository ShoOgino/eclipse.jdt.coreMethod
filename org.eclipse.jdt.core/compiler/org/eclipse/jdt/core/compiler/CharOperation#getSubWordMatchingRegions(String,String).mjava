/**
 * Answers all the regions in a given name matching a subword pattern.
 * <p>
 * Each of these regions is made of its starting index and its length in the given
 * name. They are all concatenated in a single array of <code>int</code>
 * which therefore always has an even length.
 * <p>
 * Note that each region is disjointed from the following one.<br>
 * E.g. if the regions are <code>{ start1, length1, start2, length2 }</code>,
 * then <code>start1+length1</code> will always be smaller than
 * <code>start2</code>.
 * <p>
 * Examples:
 * <ol>
 * <li><pre>
 *    pattern = "linkedmap"
 *    name = LinkedHashMap
 *    result:  { 0, 6, 10, 3 }
 * </pre></li>
 * </ol>
 *
 * @see CharOperation#subWordMatch(char[], char[])
 * 	for more details on the subword behavior
 *
 * @param pattern the given pattern
 * @param name the given name
 * @return an array of <code>int</code> having two slots per returned
 * 	regions (first one is the starting index of the region and the second
 * 	one the length of the region).<br>
 * 	Note that it may be <code>null</code> if the given name does not match
 * 	the pattern
 * @since 3.21
 */
public static final int[] getSubWordMatchingRegions(String pattern, String name) {

	if (name == null)
		return null; // null name cannot match
	if (pattern == null) {
		// null pattern cannot match any region
		// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=264816
		return EMPTY_REGIONS;
	}

	return new SubwordMatcher(name).getMatchingRegions(pattern);
}

