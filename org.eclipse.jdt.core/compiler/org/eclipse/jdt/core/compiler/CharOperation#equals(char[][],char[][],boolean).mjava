	/**
	 * If isCaseSensite is true, answers true if the two arrays are identical character
	 * by character, otherwise false.
	 * If it is false, answers true if the two arrays are identical character by 
	 * character without checking the case, otherwise false.
	 * <br>
	 * <br>
	 * For example:
	 * <ol>
	 * <li><pre>
	 *    first = null
	 *    second = null
	 *    isCaseSensitive = true
	 *    result => true
	 * </pre>
	 * </li>
	 * <li><pre>
	 *    first = { { } }
	 *    second = null
	 *    isCaseSensitive = true
	 *    result => false
	 * </pre>
	 * </li>
	 * <li><pre>
	 *    first = { { 'A' } }
	 *    second = { { 'a' } }
	 *    isCaseSensitive = true
	 *    result => false
	 * </pre>
	 * </li>
	 * <li><pre>
	 *    first = { { 'A' } }
	 *    second = { { 'a' } }
	 *    isCaseSensitive = false
	 *    result => true
	 * </pre>
	 * </li>
	 * </ol>
	 * 
	 * @param first the first array
	 * @param second the second array
	 * @param isCaseSensitive check whether or not the equality should be case sensitive
	 * @return true if the two arrays are identical character by character according to the value
	 * of isCaseSensitive, otherwise false
	 */
	public static final boolean equals(
		char[][] first,
		char[][] second,
		boolean isCaseSensitive) {
	
		if (isCaseSensitive) {
			return equals(first, second);
		}
		if (first == second)
			return true;
		if (first == null || second == null)
			return false;
		if (first.length != second.length)
			return false;
	
		for (int i = first.length; --i >= 0;)
			if (!equals(first[i], second[i], false))
				return false;
		return true;
	}

