	/**
	 * Answers true if the given array starts with the given characters, false otherwise.
	 * The comparison can be set to be case sensitive or not.
	 * <br>
	 * <br>
	 * For example:
	 * <ol>
	 * <li><pre>
	 *    toBeFound = { 'a' , 'b' }
	 *    array = { 'a' , 'b', 'b', 'a', 'b', 'a' }
	 *    isCaseSensitive = true
	 *    result => true
	 * </pre>
	 * </li>
	 * <li><pre>
	 *    toBeFound = { 'a' , 'B' }
	 *    array = { 'a' , 'b', 'b', 'a', 'b', 'a' }
	 *    isCaseSensitive = false
	 *    result => true
	 * </pre>
	 * </li>
	 * <li><pre>
	 *    toBeFound = { 'a' , 'B' }
	 *    array = { 'a' , 'b', 'b', 'a', 'b', 'a' }
	 *    isCaseSensitive = true
	 *    result => false
	 * </pre>
	 * </li>
	 * <li><pre>
	 *    toBeFound = { 'a' , 'c' }
	 *    array = { 'a' , 'b', 'b', 'a', 'b', 'a' }
	 *    isCaseSensitive = true
	 *    result => false
	 * </pre>
	 * </li>
	 * </ol>
	 * 
	 * @param array the given array
	 * @param toBeFound the given character to search
	 * @param isCaseSensitive to set whether or not the comparison should be case sensitive
	 * @return true if the given array starts with the given characters, false otherwise
	 * @exception NullPointerException if the given array is null or if the given characters array to be found is null
	 */
	public static final boolean startsWith(char[] array, char[] toBeFound, boolean isCaseSensitive) {
		if (isCaseSensitive)
			return startsWith(array, toBeFound);
		int i = toBeFound.length;
		if (i > array.length)
			return false;
		while (--i >= 0)
			if (Character.toLowerCase(toBeFound[i]) != Character.toLowerCase(array[i]))
				return false;
		return true;
	}

