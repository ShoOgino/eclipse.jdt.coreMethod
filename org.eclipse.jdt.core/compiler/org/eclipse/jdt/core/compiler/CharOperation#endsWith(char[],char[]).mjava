	/**
	 * Return true if array ends with the sequence of characters contained in toBeFound, 
	 * otherwise false.
	 * <br>
	 * <br>
	 * For example:
	 * <ol>
	 * <li><pre>
	 *    array = { 'a', 'b', 'c', 'd' }
	 *    toBeFound = { 'b', 'c' }
	 *    result => false
	 * </pre>
	 * </li>
	 * <li><pre>
	 *    array = { 'a', 'b', 'c' }
	 *    toBeFound = { 'b', 'c' }
	 *    result => true
	 * </pre>
	 * </li>
	 * </ol>
	 * 
	 * @param array the array to check
	 * @param toBeFound the array to find
	 * @exception NullPointerException if array is null or toBeFound is null
	 * @return true if array ends with the sequence of characters contained in toBeFound, 
	 * otherwise false.
	 */
	public static final boolean endsWith(char[] array, char[] toBeFound) {
		int i = toBeFound.length;
		int j = array.length - i;

		if (j < 0)
			return false;
		while (--i >= 0)
			if (toBeFound[i] != array[i + j])
				return false;
		return true;
	}

