	/**
	 * @see org.eclipse.jdt.internal.compiler.ASTVisitor#visit(org.eclipse.jdt.internal.compiler.ast.Argument, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
	 */
	public boolean visit(Argument argument, BlockScope scope) {

		if (argument.modifiers != NO_MODIFIERS || argument.annotations != null) {
	        this.scribe.printComment();
			this.scribe.printModifiers(argument.annotations, this, ICodeFormatterConstants.ANNOTATION_ON_PARAMETER);
			this.scribe.space();
		}

		/*
		 * Argument type
		 */
		if (argument.type != null) {
			if (argument.type instanceof UnionTypeReference) {
				formatMultiCatchArguments(
						argument, 
						this.preferences.insert_space_before_binary_operator, 
						this.preferences.insert_space_after_binary_operator,
						this.preferences.alignment_for_union_type_in_multicatch,
						scope);
			} else {
				argument.type.traverse(this, scope);
			}
		}

		if (argument.isVarArgs()) {
			this.scribe.printNextToken(TerminalTokens.TokenNameELLIPSIS, this.preferences.insert_space_before_ellipsis);
			if (this.preferences.insert_space_after_ellipsis) {
				this.scribe.space();
			}
			this.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, false);
		} else {
			/*
			 * Print the argument name
			 */
			this.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, argument.type != null);
		}


		/*
		 * Check for extra dimensions
		 */
		int extraDimensions = getDimensions();
		if (extraDimensions != 0) {
			 for (int i = 0; i < extraDimensions; i++) {
			 	this.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);
			 	this.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);
			 }
		}

		return false;
	}

