	public boolean visit(NormalAnnotation annotation, BlockScope scope) {
		this.scribe.printNextToken(TerminalTokens.TokenNameAT);
		if (this.preferences.insert_space_after_at_in_annotation) {
			this.scribe.space();
		}
		this.scribe.printQualifiedReference(annotation.sourceEnd);
		this.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_annotation);
		if (this.preferences.insert_space_after_opening_paren_in_annotation) {
			this.scribe.space();
		}
		MemberValuePair[] memberValuePairs = annotation.memberValuePairs;
		if (memberValuePairs != null) {
			int length = memberValuePairs.length;
			for (int i = 0; i < length - 1; i++) {
				memberValuePairs[i].traverse(this, scope);
				this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_annotation);
				if (this.preferences.insert_space_after_comma_in_annotation) {
					this.scribe.space();
				}
			}
			memberValuePairs[length - 1].traverse(this, scope);
		}
		this.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_annotation);
		return false;
	}

