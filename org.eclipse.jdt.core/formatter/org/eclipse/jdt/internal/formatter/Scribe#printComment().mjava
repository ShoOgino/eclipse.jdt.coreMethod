	public void printComment() {
		try {
			// if we have a space between two tokens we ensure it will be dumped in the formatted string
			int currentTokenStartPosition = this.scanner.currentPosition;
			boolean hasComment = false;
			boolean hasLineComment = false;
			while ((this.currentToken = this.scanner.getNextToken()) != ITerminalSymbols.TokenNameEOF) {
				switch(this.currentToken) {
					case ITerminalSymbols.TokenNameWHITESPACE :
						int count = 0;
						char[] whiteSpaces = this.scanner.getCurrentTokenSource();
						for (int i = 0, max = whiteSpaces.length; i < max; i++) {
							switch(whiteSpaces[i]) {
								case '\r' :
									if ((i + 1) < max) {
										if (whiteSpaces[i + 1] == '\n') {
											i++;
											count++;
										}
									} else {
										count++; 
									}
									break;
								case '\n' :
									count++;
							}
						}
						if (count > 1) {
							if (hasLineComment) {
								// the line comment consumed the line break
								preserveEmptyLines(count + 1);
							} else {
								preserveEmptyLines(count);
							}
						} else if (count == 1) {
							if (hasLineComment) {
								preserveEmptyLines(1);
							} else if (hasComment || this.formatter.preferences.preserve_user_linebreaks) {
								printNewLine();
							}
						}
						currentTokenStartPosition = this.scanner.currentPosition;						
						break;
					case ITerminalSymbols.TokenNameCOMMENT_LINE :
						this.printCommentLine(this.scanner.getRawTokenSource(), this.scanner.getCurrentTokenStartPosition());
						currentTokenStartPosition = this.scanner.currentPosition;
						hasLineComment = true;					
						break;
					case ITerminalSymbols.TokenNameCOMMENT_BLOCK :
					case ITerminalSymbols.TokenNameCOMMENT_JAVADOC :
						this.printBlockComment(this.scanner.getRawTokenSource(), this.scanner.getCurrentTokenStartPosition());
						currentTokenStartPosition = this.scanner.currentPosition;
						hasLineComment = false;
						hasComment = true;
						break;
					default :
						// step back one token
						this.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);
						return;
				}
			}
		} catch (InvalidInputException e) {
			throw new AbortFormatting(e);
		}
	}

