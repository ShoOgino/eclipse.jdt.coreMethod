	private void handleBodyDeclarations(List<BodyDeclaration> bodyDeclarations) {
		BodyDeclaration previous = null;
		for (BodyDeclaration bodyDeclaration : bodyDeclarations) {
			int blankLines = 0;
			if (previous == null) {
				blankLines = this.options.blank_lines_before_first_class_body_declaration;
			} else if (!sameChunk(previous, bodyDeclaration)) {
				blankLines = this.options.blank_lines_before_new_chunk;
			} else if (bodyDeclaration instanceof FieldDeclaration) {
				blankLines = this.options.blank_lines_before_field;
			} else if (bodyDeclaration instanceof AbstractTypeDeclaration) {
				blankLines = this.options.blank_lines_before_member_type;
			} else if (bodyDeclaration instanceof MethodDeclaration) {
				blankLines = ((MethodDeclaration) bodyDeclaration).getBody() == null
						&& ((MethodDeclaration) previous).getBody() == null
								? this.options.blank_lines_before_abstract_method
								: this.options.blank_lines_before_method;
			} else if (bodyDeclaration instanceof AnnotationTypeMemberDeclaration) {
				blankLines = this.options.blank_lines_before_method;
			}
			putBlankLinesBefore(bodyDeclaration, blankLines);
			previous = bodyDeclaration;
		}
		if (previous != null) {
			ASTNode parent = previous.getParent();
			if (!(parent instanceof TypeDeclaration && this.tm.isFake((TypeDeclaration) parent))) {
				Token lastToken = this.tm.lastTokenIn(parent, -1);
				putBlankLinesBefore(lastToken, this.options.blank_lines_after_last_class_body_declaration);
			}
		}
	}

