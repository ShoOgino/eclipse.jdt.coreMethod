	private void format(FieldDeclaration fieldDeclaration, IAbstractSyntaxTreeVisitor visitor, MethodScope scope, boolean isChunkStart) {
		
		int newLineBeforeChunk = isChunkStart ? this.preferences.blank_lines_before_new_chunk : 0;
		if (newLineBeforeChunk > 0) {
			this.scribe.printEmptyLines(newLineBeforeChunk);
		}
		final int newLinesBeforeField = this.preferences.blank_lines_before_field;
		if (newLinesBeforeField > 0) {
			this.scribe.printEmptyLines(newLinesBeforeField);
		}
		Alignment fieldAlignment = this.scribe.getMemberAlignment();	//$NON-NLS-1$
	
		this.scribe.printModifiers();
		this.scribe.space();
		/*
		 * Field type
		 */
		fieldDeclaration.type.traverse(this, scope);
		
		/*
		 * Field name
		 */
		this.scribe.alignFragment(fieldAlignment, 0);
	
		this.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true);
	
		/*
		 * Check for extra dimensions
		 */
		int extraDimensions = getExtraDimension();
		if (extraDimensions != 0) {
			 for (int i = 0; i < extraDimensions; i++) {
			 	this.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);
			 	this.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);
			 }
		}
	
		/*
		 * Field initialization
		 */
		if (fieldDeclaration.initialization != null) {
			this.scribe.alignFragment(fieldAlignment, 1);
			this.scribe.printNextToken(TerminalTokens.TokenNameEQUAL, this.preferences.insert_space_before_assignment_operators);
			if (this.preferences.insert_space_after_assignment_operators) {
				this.scribe.space();
			}
			fieldDeclaration.initialization.traverse(this, scope);
		}
		
		this.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);

		if (fieldAlignment != null) {
			this.scribe.alignFragment(fieldAlignment, 2);
			this.scribe.printTrailingComment();
		} else {
			this.scribe.space();
			this.scribe.printTrailingComment();
		}
	}

