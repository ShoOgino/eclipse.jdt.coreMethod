	/**
	 * @see org.eclipse.jdt.internal.compiler.ASTVisitor#visit(org.eclipse.jdt.internal.compiler.ast.SwitchStatement, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
	 */
	public boolean visit(SwitchStatement switchStatement, BlockScope scope) {
		this.scribe.printNextToken(TerminalTokens.TokenNameswitch);
		this.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_switch);

		if (this.preferences.insert_space_after_opening_paren_in_switch) {
			this.scribe.space();
		}
		switchStatement.expression.traverse(this, scope);
		this.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_switch);
		/*
		 * Type body
		 */
		String switch_brace = this.preferences.brace_position_for_switch;
		formatOpeningBrace(switch_brace, this.preferences.insert_space_before_opening_brace_in_switch);
		this.scribe.printNewLine();

		final Statement[] statements = switchStatement.statements;
		int switchIndentationLevel = this.scribe.indentationLevel;
		int caseIndentation = 0;
		int statementIndentation = 0;
		int breakIndentation = 0;
		if (this.preferences.indent_switchstatements_compare_to_switch) {
			caseIndentation++;
			statementIndentation++;
			breakIndentation++;
		}
		if (this.preferences.indent_switchstatements_compare_to_cases) {
			statementIndentation++;
		}
		if (this.preferences.indent_breaks_compare_to_cases) {
			breakIndentation++;
		}
		boolean wasACase = false;
		boolean wasABreak = false;
		if (statements != null) {
			int statementsLength = statements.length;
			for (int i = 0; i < statementsLength; i++) {
				final Statement statement = statements[i];
				if (statement instanceof CaseStatement) {
					if (wasABreak) {
						this.scribe.setIndentation(switchIndentationLevel, caseIndentation);
						this.scribe.printComment();
					} else {
						if (wasACase) {
							this.scribe.printComment(Scribe.PRESERVE_EMPTY_LINES_IN_SWITCH_CASE);
						} else {
							this.scribe.printComment();
						}
						this.scribe.setIndentation(switchIndentationLevel, caseIndentation);
					}
					if (wasACase) {
						this.scribe.printNewLine();
					}
					statement.traverse(this, scope);
					// Print following trailing (if any) comment at statement indentation
					this.scribe.setIndentation(switchIndentationLevel, statementIndentation);
					this.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.COMPLEX_TRAILING_COMMENT);
					wasACase = true;
					wasABreak = false;
				} else if (statement instanceof BreakStatement) {
					this.scribe.setIndentation(switchIndentationLevel, breakIndentation);
					if (wasACase) {
						this.scribe.printNewLine();
					}
					this.scribe.printComment();
					statement.traverse(this, scope);
					wasACase = false;
					wasABreak = true;
				} else if (statement instanceof Block) {
					this.scribe.setIndentation(switchIndentationLevel, wasACase ? caseIndentation : statementIndentation);
					this.scribe.printComment();
					String bracePosition = wasACase ? this.preferences.brace_position_for_block_in_case : this.preferences.brace_position_for_block;
					formatBlock((Block) statement, scope, bracePosition, this.preferences.insert_space_before_opening_brace_in_block);
					wasACase = false;
					wasABreak = false;
				} else {
					this.scribe.setIndentation(switchIndentationLevel, statementIndentation);
					this.scribe.printNewLine();
					this.scribe.printComment();
					statement.traverse(this, scope);
					wasACase = false;
					wasABreak = false;
				}
				if (statement instanceof Expression) {
					/*
					 * Print the semi-colon
					 */
					this.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);
					this.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);
					this.scribe.printNewLine();
				} else if (statement instanceof LocalDeclaration) {
					LocalDeclaration currentLocal = (LocalDeclaration) statement;
					if (i < (statementsLength - 1)) {
						/*
						 * We need to check that the next statement is a local declaration
						 */
						if (statements[i + 1] instanceof LocalDeclaration) {
							LocalDeclaration nextLocal = (LocalDeclaration) statements[i + 1];
							if (currentLocal.declarationSourceStart != nextLocal.declarationSourceStart) {
								/*
								 * Print the semi-colon
								 */
								this.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);
								this.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);
								this.scribe.printNewLine();
							}
						} else {
							/*
							 * Print the semi-colon
							 */
							this.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);
							this.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);
							this.scribe.printNewLine();
						}
					} else {
						/*
						 * Print the semi-colon
						 */
						this.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);
						this.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);
						this.scribe.printNewLine();
					}
				} else if (!wasACase) {
					this.scribe.printNewLine();
				}
			}
		}
		this.scribe.printNewLine();
		if (wasABreak) {
			this.scribe.setIndentation(switchIndentationLevel, 0);
			this.scribe.printComment();
		} else {
			this.scribe.printComment();
			this.scribe.setIndentation(switchIndentationLevel, 0);
		}
		this.scribe.printNextToken(TerminalTokens.TokenNameRBRACE);
		this.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);
		if (switch_brace.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {
			this.scribe.unIndent();
		}
		return false;
	}

