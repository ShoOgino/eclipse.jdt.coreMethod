	@Override
	public boolean visit(ModuleDeclaration node) {
		// using settings for type declaration and fields for now, add new settings if necessary
		breakLineBefore(node);
		List<ModuleDirective> statements = node.moduleStatements();
		handleBracedCode(node, node.getName(), this.options.brace_position_for_type_declaration,
				this.options.indent_body_declarations_compare_to_type_header,
				statements.isEmpty() ? 0 : this.options.blank_lines_before_first_class_body_declaration,
				statements.isEmpty() ? 0 : this.options.blank_lines_after_last_class_body_declaration);

		ModuleDirective previous = null;
		for (ModuleDirective statement : statements) {
			if (previous != null) {
				boolean cameChunk = previous.getClass().equals(statement.getClass());
				putBlankLinesBefore(statement,
						cameChunk ? this.options.blank_lines_before_field : this.options.blank_lines_before_new_chunk);
			}
			previous = statement;
		}
		return true;
	}

