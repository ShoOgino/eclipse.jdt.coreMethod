	private void formatTypeOpeningBrace(String bracePosition, boolean insertSpaceBeforeBrace, TypeDeclaration typeDeclaration) {
		int fieldCount = (typeDeclaration.fields == null) ? 0 : typeDeclaration.fields.length;
		int methodCount = (typeDeclaration.methods == null) ? 0 : typeDeclaration.methods.length;
		int typeCount = (typeDeclaration.memberTypes == null) ? 0 : typeDeclaration.memberTypes.length;
	
		if (methodCount == 1 && typeDeclaration.methods[0].isDefaultConstructor()) {
			methodCount = 0;
		}
		final int memberLength = fieldCount + methodCount + typeCount;

		boolean insertNewLine = memberLength > 0;
		
		if (!insertNewLine) {
			if (typeDeclaration.kind() == IGenericType.ENUM_DECL) {
				insertNewLine = this.preferences.insert_new_line_in_empty_enum_declaration;
			} else if ((typeDeclaration.bits & ASTNode.IsAnonymousTypeMASK) != 0) {
				insertNewLine = this.preferences.insert_new_line_in_empty_anonymous_type_declaration;
			} else {
				insertNewLine = this.preferences.insert_new_line_in_empty_type_declaration;
			}
		}
	
		formatOpeningBrace(bracePosition, insertSpaceBeforeBrace);
		
		if (insertNewLine) {
			this.scribe.printNewLine();
		}
	}

