	private void format(FieldDeclaration fieldDeclaration, boolean isChunkStart, boolean isFirstClassBodyDeclaration) {
		if (isFirstClassBodyDeclaration) {
			int newLinesBeforeFirstClassBodyDeclaration = this.preferences.blank_lines_before_first_class_body_declaration;
			if (newLinesBeforeFirstClassBodyDeclaration > 0) {
				this.scribe.printEmptyLines(newLinesBeforeFirstClassBodyDeclaration);
			}
		} else {
			int newLineBeforeChunk = isChunkStart ? this.preferences.blank_lines_before_new_chunk : 0;
			if (newLineBeforeChunk > 0) {
				this.scribe.printEmptyLines(newLineBeforeChunk);
			}
			final int newLinesBeforeField = this.preferences.blank_lines_before_field;
			if (newLinesBeforeField > 0) {
				this.scribe.printEmptyLines(newLinesBeforeField);
			}
		}
		Alignment2 memberAlignment = this.scribe.getMemberAlignment();
	
        this.scribe.printComment();
		final List modifiers = fieldDeclaration.modifiers();
		if (modifiers.size() != 0) {
			this.scribe.printModifiers(modifiers, this);
			this.scribe.space();
		}

		fieldDeclaration.getType().accept(this);
		
		List fragments = fieldDeclaration.fragments();
		final int fragmentsLength = fragments.size();
		if (fragmentsLength > 1) {
			// multiple field declaration
			Alignment2 multiFieldDeclarationsAlignment =this.scribe.createAlignment(
					"multiple_field",//$NON-NLS-1$
					this.preferences.alignment_for_multiple_fields,
					fragmentsLength - 1,
					this.scribe.scanner.currentPosition);
			this.scribe.enterAlignment(multiFieldDeclarationsAlignment);
		
			boolean ok = false;
			do {
				try {
					for (int i = 0; i < fragmentsLength; i++) {
						VariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(i);
						/*
						 * Field name
						 */
						if (i == 0) {
							this.scribe.alignFragment(memberAlignment, 0);
							this.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true);
						} else {
							this.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, false);
						}
				
						/*
						 * Check for extra dimensions
						 */
						final int extraDimensions = fragment.getExtraDimensions();
						if (extraDimensions != 0) {
							 for (int index = 0; index < extraDimensions; index++) {
							 	this.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);
							 	this.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);
							 }
						}
					
						/*
						 * Field initialization
						 */
						final Expression initialization = fragment.getInitializer();
						if (initialization != null) {
							if (i == 0) {
								this.scribe.alignFragment(memberAlignment, 1);
							}
							this.scribe.printNextToken(TerminalTokens.TokenNameEQUAL, this.preferences.insert_space_before_assignment_operator);
							if (this.preferences.insert_space_after_assignment_operator) {
								this.scribe.space();
							}
							initialization.accept(this);
						}
						
						if (i != fragmentsLength - 1) {
							this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_multiple_field_declarations);
							this.scribe.printTrailingComment();
							this.scribe.alignFragment(multiFieldDeclarationsAlignment, i);

							if (this.preferences.insert_space_after_comma_in_multiple_field_declarations) {
								this.scribe.space();
							}
						} else {
							this.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);
							this.scribe.alignFragment(memberAlignment, 2);
							this.scribe.printTrailingComment();
						}
					}
					ok = true;
				} catch (AlignmentException e) {
					this.scribe.redoAlignment(e);
				}
			} while (!ok);
			this.scribe.exitAlignment(multiFieldDeclarationsAlignment, true);				
		} else {
			// single field declaration
			this.scribe.alignFragment(memberAlignment, 0);
			this.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true);
			VariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);
			final int extraDimensions = fragment.getExtraDimensions();
			if (extraDimensions != 0) {
				for (int i = 0; i < extraDimensions; i++) {
					this.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);
					this.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);
				}
			}
			final Expression initialization = fragment.getInitializer();
			if (initialization != null) {
				this.scribe.alignFragment(memberAlignment, 1);
				this.scribe.printNextToken(TerminalTokens.TokenNameEQUAL, this.preferences.insert_space_before_assignment_operator);
				if (this.preferences.insert_space_after_assignment_operator) {
					this.scribe.space();
				}
				Alignment2 assignmentAlignment = this.scribe.createAlignment("fieldDeclarationAssignmentAlignment", this.preferences.alignment_for_assignment, Alignment.R_OUTERMOST, 1, this.scribe.scanner.currentPosition); //$NON-NLS-1$
				this.scribe.enterAlignment(assignmentAlignment);
				boolean ok = false;
				do {
					try {
						this.scribe.alignFragment(assignmentAlignment, 0);
						initialization.accept(this);
						ok = true;
					} catch(AlignmentException e){
						this.scribe.redoAlignment(e);
					}
				} while (!ok);		
				this.scribe.exitAlignment(assignmentAlignment, true);			
			}
			
			this.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);

			if (memberAlignment != null) {
				this.scribe.alignFragment(memberAlignment, 2);
				this.scribe.printTrailingComment();
			} else {
				this.scribe.space();
				this.scribe.printTrailingComment();
			}
		}
	}

