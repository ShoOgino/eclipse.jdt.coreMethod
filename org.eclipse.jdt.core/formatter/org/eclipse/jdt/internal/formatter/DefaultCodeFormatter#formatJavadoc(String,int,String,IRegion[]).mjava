	/*
	 * Format a javadoc comment.
	 */
	private TextEdit formatJavadoc(String source, int indentationLevel, String lineSeparator, IRegion[] regions) {
		Object oldOption = oldCommentFormatOption();
		boolean isFormattingComments = oldOption == null
			? DefaultCodeFormatterConstants.TRUE.equals(this.options.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_FORMAT_JAVADOC_COMMENT))
			: DefaultCodeFormatterConstants.TRUE.equals(oldOption);
		if (isFormattingComments) {
			if (lineSeparator != null) {
				this.preferences.line_separator = lineSeparator;
			} else {
				this.preferences.line_separator = Util.LINE_SEPARATOR;
			}
			this.preferences.initial_indentation_level = indentationLevel;
			if (this.codeSnippetParsingUtil == null) this.codeSnippetParsingUtil = new CodeSnippetParsingUtil();
			this.codeSnippetParsingUtil.parseCompilationUnit(source.toCharArray(), getDefaultCompilerOptions(), true);
			this.newCodeFormatter = new CodeFormatterVisitor(this.preferences, this.options, regions, this.codeSnippetParsingUtil, this.preferences.comment_format_javadoc_comment);
			IRegion coveredRegion = getCoveredRegion(regions);
			int start = coveredRegion.getOffset();
			int end = start + coveredRegion.getLength();
			this.newCodeFormatter.format(source, start, end, indentationLevel);
			return this.newCodeFormatter.scribe.getRootEdit();
		}
		return null;
	}

