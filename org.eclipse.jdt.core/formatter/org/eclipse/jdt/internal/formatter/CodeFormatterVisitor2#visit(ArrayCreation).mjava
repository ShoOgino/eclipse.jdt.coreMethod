	public boolean visit(ArrayCreation node) {
		this.scribe.printNextToken(TerminalTokens.TokenNamenew);
		this.scribe.space();
		node.getType().accept(this);
		
		final List dimensions = node.dimensions();
		final int dimensionsLength = dimensions.size();
		for (int i = 0; i < dimensionsLength; i++) {
			if (this.preferences.insert_space_before_opening_bracket_in_array_allocation_expression) {
				this.scribe.space();
			}
			this.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET, false);
			Expression dimension = (Expression) dimensions.get(i);
			if (dimension != null) {
				if (this.preferences.insert_space_after_opening_bracket_in_array_allocation_expression) {
					this.scribe.space();
				}
				dimension.accept(this);
				this.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET, this.preferences.insert_space_before_closing_bracket_in_array_allocation_expression);
			} else {
				this.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET, this.preferences.insert_space_between_empty_brackets_in_array_allocation_expression);
			}
		}
		final ArrayInitializer initializer = node.getInitializer();
		if (initializer != null) {
			initializer.accept(this);
		}

		return false;
	}

