	public boolean visit(CombinedBinaryExpression combinedBinaryExpression, BlockScope scope) {
		// keep implementation in sync with BinaryExpression#resolveType
		if (combinedBinaryExpression.referencesTable == null) {
			this.addRealFragment(combinedBinaryExpression.left);
			this.operatorsList.add(new Integer(TerminalTokens.TokenNamePLUS));
			this.addRealFragment(combinedBinaryExpression.right);
			return false;
		}
		BinaryExpression cursor = combinedBinaryExpression.referencesTable[0];
		if (cursor.left instanceof CombinedBinaryExpression) {
			this.visit((CombinedBinaryExpression) cursor.left, scope);
		} else {
			this.addRealFragment(cursor.left);
		}
		for (int i = 0, end = combinedBinaryExpression.arity; i < end; i ++) {
			this.operatorsList.add(new Integer(TerminalTokens.TokenNamePLUS));
			this.addRealFragment(combinedBinaryExpression.referencesTable[i].right);
		}
		this.operatorsList.add(new Integer(TerminalTokens.TokenNamePLUS));
		this.addRealFragment(combinedBinaryExpression.right);
		return false;
	}

