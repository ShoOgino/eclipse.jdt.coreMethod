	/**
	 * @see org.eclipse.jdt.internal.compiler.ASTVisitor#visit(org.eclipse.jdt.internal.compiler.ast.ForStatement, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
	 */
	public boolean visit(ForStatement forStatement, BlockScope scope) {
	
		this.scribe.printNextToken(TerminalTokens.TokenNamefor);
		this.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_for_paren);
		
		if (this.preferences.insert_space_in_for_parens) {
			this.scribe.space();
		}
		final Statement[] initializations = forStatement.initializations;
		if (initializations != null) {
			int length = initializations.length;
			for (int i = 0; i < length; i++) {
				initializations[i].traverse(this, scope);
				if (i >= 0 && (i < length - 1) && !(initializations[i] instanceof LocalDeclaration)) {
					this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_for_inits);
					if (this.preferences.insert_space_after_comma_in_for_inits) {
						this.scribe.space();
					}
				}				
			}
		}
		this.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);
		if (this.preferences.insert_space_after_semicolon_in_for) {
			this.scribe.space();
		}
		final Expression condition = forStatement.condition;
		if (condition != null) {
			condition.traverse(this, scope);
		}
		this.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);
		if (this.preferences.insert_space_after_semicolon_in_for) {
			this.scribe.space();
		}
		final Statement[] increments = forStatement.increments;
		if (increments != null) {
			for (int i = 0, length = increments.length; i < length; i++) {
				increments[i].traverse(this, scope);
				if (i != length - 1) {
					this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_for_increments);
					if (this.preferences.insert_space_after_comma_in_for_increments) {
						this.scribe.space();
					}
				}
			}
		}
		this.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_in_for_parens);
		
		final Statement action = forStatement.action;
		if (action != null) {
			if (action instanceof Block) {
				action.traverse(this, scope);
			} else if (action instanceof EmptyStatement && !this.preferences.put_empty_statement_on_new_line) {
				action.traverse(this, scope);
			} else {
				this.scribe.indent();
				this.scribe.printNewLine();
				action.traverse(this, scope);
				this.scribe.unIndent();
			}
			if (action instanceof Expression) {
				this.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);
				this.scribe.printTrailingComment();
			}
		} else {
			this.scribe.indent();
			/*
			 * This is an empty statement
			 */
			formatEmptyStatement(); 
			this.scribe.unIndent();
		}
		return false;
	}

