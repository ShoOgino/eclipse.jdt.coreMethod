	/**
	 * @see org.eclipse.jdt.internal.compiler.IAbstractSyntaxTreeVisitor#visit(org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration, org.eclipse.jdt.internal.compiler.lookup.ClassScope)
	 */
	public boolean visit(
		ConstructorDeclaration constructorDeclaration,
		ClassScope scope) {
			
		if (constructorDeclaration.modifiers != NO_MODIFIERS) {
			this.scribe.printModifiers();
		}
		/*
		 * Print the method name
		 */	
		this.scribe.printNextToken(ITerminalSymbols.TokenNameIdentifier, true); 

		formatMethodArguments(
			constructorDeclaration, 
			this.preferences.insert_space_before_method_declaration_open_paren,
			this.preferences.insert_space_between_empty_arguments,
			this.preferences.insert_space_before_closing_paren,
			this.preferences.insert_space_before_first_argument,
			this.preferences.insert_space_before_comma_in_constructor_arguments,
			this.preferences.insert_space_after_comma_in_constructor_arguments);

		formatThrowsClause(
				constructorDeclaration,
				this.preferences.insert_space_before_comma_in_constructor_throws,
				this.preferences.insert_space_after_comma_in_constructor_throws);

		if (!constructorDeclaration.isNative() && !constructorDeclaration.isAbstract()) {
			/*
			 * Method body
			 */
			String method_declaration_brace = this.preferences.method_declaration_brace_position;
			formatOpeningBrace(method_declaration_brace, this.preferences.insert_space_before_method_open_brace, this.preferences.insert_new_line_in_empty_method_body);
			this.scribe.indent();			
			final int numberOfBlankLinesAtBeginningOfMethodBody = this.preferences.number_of_blank_lines_to_insert_at_beginning_of_method_body;
			if (numberOfBlankLinesAtBeginningOfMethodBody > 0) {
				this.scribe.printNewLines(numberOfBlankLinesAtBeginningOfMethodBody);
			}
			if (constructorDeclaration.constructorCall != null && !constructorDeclaration.constructorCall.isImplicitSuper()) {
				constructorDeclaration.constructorCall.traverse(this, constructorDeclaration.scope);
				this.scribe.printNextToken(ITerminalSymbols.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);
				this.scribe.printTrailingComment();
			}
			final Statement[] statements = constructorDeclaration.statements;
			if (statements != null) {
				formatStatements(constructorDeclaration.scope, statements);
			} else if (this.preferences.insert_new_line_in_empty_method_body) {
				this.scribe.printNewLine();
			}
			this.scribe.printComment(true);
			this.scribe.unIndent();
			this.scribe.printNextToken(ITerminalSymbols.TokenNameRBRACE);
			this.scribe.printTrailingComment();
			if (method_declaration_brace.equals(FormattingPreferences.NEXT_LINE_SHIFTED)) {
				this.scribe.unIndent();
			}
		} else {
			// no method body
			this.scribe.printNextToken(ITerminalSymbols.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);
			this.scribe.printTrailingComment();
		}
		return false;
	}

