	private TextEdit formatStatements(String source, int indentationLevel, String lineSeparator, int offset, int length) {
		if (USE_NEW_FORMATTER) {
			ASTParser parser = ASTParser.newParser(AST.JLS3);
			parser.setSource(source.toCharArray());
			parser.setKind(ASTParser.K_STATEMENTS);
			parser.setCompilerOptions(getDefaultCompilerOptions());
			parser.setResolveBindings(false);
			parser.setUnitName(""); //$NON-NLS-1$
			org.eclipse.jdt.core.dom.ASTNode node = parser.createAST(null);
			if (lineSeparator != null) {
				this.preferences.line_separator = lineSeparator;
			} else {
				this.preferences.line_separator = Util.LINE_SEPARATOR;
			}
			this.preferences.initial_indentation_level = indentationLevel;

			this.newCodeFormatter2 = new CodeFormatterVisitor2(this.preferences, this.options, offset, length, (CompilationUnit) node.getRoot());
			
			return this.newCodeFormatter2.format(source, (Block) node);
		}
		
		ConstructorDeclaration constructorDeclaration = this.codeSnippetParsingUtil.parseStatements(source.toCharArray(), getDefaultCompilerOptions(), true, false);
		
		if (constructorDeclaration.statements == null) {
			// a problem occured while parsing the source
			return null;
		}
		return internalFormatStatements(source, indentationLevel, lineSeparator, constructorDeclaration, offset, length);
	}

