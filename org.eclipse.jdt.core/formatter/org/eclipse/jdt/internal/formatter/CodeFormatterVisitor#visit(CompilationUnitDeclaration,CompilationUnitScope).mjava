	/**
	 * @see org.eclipse.jdt.internal.compiler.IAbstractSyntaxTreeVisitor#visit(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration, org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope)
	 */
	public boolean visit(
		CompilationUnitDeclaration compilationUnitDeclaration,
		CompilationUnitScope scope) {
		
		/* 
		 * Package declaration
		 */
		if (compilationUnitDeclaration.currentPackage != null) {
			// OPTION
			// dump the package keyword
			int blankLinesBeforePackage = this.preferences.blank_lines_before_package;
			if (blankLinesBeforePackage > 0) {
				this.scribe.printNewLines(blankLinesBeforePackage - 1);
			}
			this.scribe.printComment();
			this.scribe.printNextToken(ITerminalSymbols.TokenNamepackage);
			this.scribe.space();
			this.scribe.printQualifiedReference(compilationUnitDeclaration.currentPackage.sourceEnd);
			this.scribe.printNextToken(ITerminalSymbols.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);
			this.scribe.printTrailingComment();
			int blankLinesAfterPackage = this.preferences.blank_lines_after_package;
			if (blankLinesAfterPackage > 0) {
				this.scribe.printNewLines(blankLinesAfterPackage);
			}				
		} else {
			this.scribe.printComment();
		}
		
		/*
		 * Import statements
		 */
		final ImportReference[] imports = compilationUnitDeclaration.imports;
		if (imports != null) {
			int blankLinesBeforeImports = this.preferences.blank_lines_before_imports;
			if (blankLinesBeforeImports > 0) {
				this.scribe.printNewLines(blankLinesBeforeImports);
			}
			int importLength = imports.length;
			for (int i = 0; i < importLength; i++) {
				imports[i].traverse(this, scope);
			}			
			
			int blankLinesAfterImports = this.preferences.blank_lines_after_imports;
			if (blankLinesAfterImports > 0) {
				this.scribe.printNewLines(blankLinesAfterImports);
			}
		}

		/*
		 * Type declarations
		 */
		final TypeDeclaration[] types = compilationUnitDeclaration.types;
		if (types != null) {
			int typesLength = types.length;
			for (int i = 0; i < typesLength; i++) {
				types[i].traverse(this, scope);
			}
		}
		this.scribe.printLastComment();
		return false;
	}

