	public void printBlockComment(char[] s, int commentStart) {
		String commentSource = new String(s);
		StringTokenizer tokenizer = new StringTokenizer(commentSource, "\r\n");	//$NON-NLS-1$
		printIndentationIfNecessary();
		Location location = null;
		int lineCounter = 0;
		int startSearchIndex = 0;
		while(tokenizer.hasMoreElements()) {
			String lineContents = tokenizer.nextToken();
			if (lineContents.length() != 0) {
				printIndentationIfNecessary();
				if (lineCounter >= 1) {
					buffer.append(" ");//$NON-NLS-1$
				}
				// add position mapping
				String reduceLine = lineContents.trim();
				final int reduceLineLength = reduceLine.length();
				if (this.positionsToMap != null) {
					int start = commentSource.indexOf(reduceLine, startSearchIndex);
					mapPositions(start + commentStart, this.buffer.length(), reduceLineLength);
					startSearchIndex = start + reduceLineLength + 1;
				}
				buffer.append(reduceLine);
				column += reduceLineLength;
				location = new Location(this, 0);
				buffer.append(this.lineSeparator);
				this.line++;
				lineCounter++;
				column = 1;
			}
		}
		if (location != null) {
			resetAt(location);
		}
		this.lastNumberOfNewLines = 0;
		needSpace = false;
	}

