	public void printBlockComment(char[] s, int commentStart) {
		String commentSource = new String(s);
		StringTokenizer tokenizer = new StringTokenizer(commentSource, "\r\n");	//$NON-NLS-1$
		printIndentationIfNecessary();
		Location location = null;
		int lineCounter = 0;
		int startSearchIndex = 0;
		int currentTokenStartPosition = this.scanner.getCurrentTokenStartPosition();
		int currentTokenEndPosition = this.scanner.getCurrentTokenEndPosition() + 1;
		
		while(tokenizer.hasMoreElements()) {
			String lineContents = tokenizer.nextToken();
			if (lineContents.length() != 0) {
				printIndentationIfNecessary();
				if (lineCounter >= 1) {
					buffer.append(" ");//$NON-NLS-1$
				}
				// remove leading whitespaces
				int lineStartPosition = currentTokenStartPosition + commentSource.indexOf(lineContents, startSearchIndex);
				this.scanner.resetTo(lineStartPosition, this.scannerEndPosition - 1);
				String reduceLine = null;
				try {
					if (this.scanner.getNextToken() == ITerminalSymbols.TokenNameWHITESPACE) {
						int begin = this.scanner.getCurrentTokenEndPosition() + 1 - lineStartPosition;
						if (begin < lineContents.length()) {
							reduceLine = lineContents.substring(begin);
						} else {
							reduceLine = ""; //$NON-NLS-1$
						}
					} else {
						reduceLine = lineContents;
					}
				} catch (InvalidInputException e) {
					// should not happen
				}
				final int reduceLineLength = reduceLine.length();
				// add position mapping
				int start = commentSource.indexOf(reduceLine, startSearchIndex);
				if (this.positionsToMap != null) {
					mapPositions(start + commentStart, this.buffer.length(), reduceLineLength);
				}
				startSearchIndex = start + reduceLineLength + 1;
				buffer.append(reduceLine);
				column += reduceLineLength;
				location = new Location(this, 0);
				buffer.append(this.lineSeparator);
				this.line++;
				lineCounter++;
				column = 1;
			}
		}
		if (location != null) {
			resetAt(location);
		}
		this.lastNumberOfNewLines = 0;
		needSpace = false;
		this.scanner.resetTo(currentTokenEndPosition, this.scannerEndPosition - 1);
	}

