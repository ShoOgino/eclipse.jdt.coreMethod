	/**
	 * @param commentToken token to wrap
	 * @param startPosition position in line of the beginning of the comment
	 * @param simulate if {@code true}, the properties of internal tokens will not really change. This
	 * mode is useful for checking how much space the comment takes.
	 * @param noWrap if {@code true}, it means that wrapping is disabled for this comment (for example because there's
	 * a NON-NLS tag after it). This method is still useful for checking comment length in that case.
	 * @return position in line at the end of comment
	 */
	public int wrapMultiLineComment(Token commentToken, int startPosition, boolean simulate, boolean noWrap) {
		this.lineCounter = 1;
		this.counter = startPosition;

		List<Token> structure = commentToken.getInternalStructure();
		if (structure == null || structure.isEmpty())
			return startPosition + this.tm.getLength(commentToken, startPosition);

		commentToken.setIndent(this.tm.toIndent(startPosition, true));
		this.lineStartPosition = commentToken.getIndent();
		this.simulation = simulate;
		this.wrapDisabled = noWrap;
		this.potentialWrapToken = this.potentialWrapTokenSubstitute = null;
		this.blockStructure = structure;
		traverse(structure, 0);

		boolean newLinesAtBoundries = commentToken.tokenType == TokenNameCOMMENT_JAVADOC
				? this.options.comment_new_lines_at_javadoc_boundaries
				: this.options.comment_new_lines_at_block_boundaries;
		if (this.lineCounter > 1 && newLinesAtBoundries) {
			Token endingToken = structure.get(structure.size() - 1);
			if (!simulate && endingToken.tokenType != TokenNameNotAToken) {
				structure.get(0).breakAfter();
				endingToken.breakBefore();
				endingToken.setAlign(1);
			}
			return startPosition + this.tm.getLength(endingToken, startPosition);
		} else if (this.lineCounter > 1 && !newLinesAtBoundries) {
			// the rest of this code assumes that newLinesAtBoundries==true, so now subtract the additional lines
			this.lineCounter -= 2;

			this.lineCounter -= structure.get(1).getLineBreaksBefore();
			structure.get(1).clearLineBreaksBefore();
			Token last = structure.get(structure.size() - 1);
			this.lineCounter -= last.getLineBreaksBefore();
			last.clearLineBreaksBefore();
		}
		return this.counter;
	}

