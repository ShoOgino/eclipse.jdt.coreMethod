	@Override
	public boolean visit(RecordDeclaration node) {
		int lParen = this.tm.firstIndexAfter(node.getName(), TokenNameLPAREN);
		List<SingleVariableDeclaration> components = node.recordComponents();
		int rParen = this.tm.firstIndexAfter(
				components.isEmpty() ? node.getName() : components.get(components.size() - 1), TokenNameRPAREN);
		handleParenthesesPositions(lParen, rParen, this.options.parenthesis_positions_in_record_declaration);

		if (!components.isEmpty()) {
			int wrappingOption = this.options.alignment_for_record_components;
			this.wrapGroupEnd = this.tm.lastIndexIn(components.get(components.size() - 1), -1);
			handleArguments(components, wrappingOption);
		}

		List<Type> superInterfaceTypes = node.superInterfaceTypes();
		if (!superInterfaceTypes.isEmpty()) {
			this.wrapParentIndex = this.tm.lastIndexIn(node.getName(), -1);
			this.wrapIndexes.add(this.tm.firstIndexBefore(superInterfaceTypes.get(0), TokenNameimplements));
			prepareElementsList(superInterfaceTypes, TokenNameCOMMA, -1);
			handleWrap(this.options.alignment_for_superinterfaces_in_record_declaration, PREFERRED);
		}
		return true;
	}

