	@Override
	public boolean visit(RecordDeclaration node) {
		handleToken(node.getName(), TokenNameIdentifier, true, false);

		List<TypeParameter> typeParameters = node.typeParameters();
		handleTypeParameters(typeParameters);

		handleToken(node.getName(), TokenNameLBRACE,
				this.options.insert_space_before_opening_brace_in_record_declaration, false);
		List<Type> superInterfaces = node.superInterfaceTypes();
		if (!superInterfaces.isEmpty()) {
			handleTokenBefore(superInterfaces.get(0), TokenNameimplements, true, true);
			handleCommas(superInterfaces, this.options.insert_space_before_comma_in_superinterfaces,
					this.options.insert_space_after_comma_in_superinterfaces);
		}

		List<SingleVariableDeclaration> components = node.recordComponents();
		if (handleEmptyParens(node, this.options.insert_space_between_empty_parens_in_constructor_declaration)) {
			handleToken(node, TokenNameLPAREN,
					this.options.insert_space_before_opening_paren_in_record_declaration, false);
		} else {
			handleToken(node, TokenNameLPAREN,
					this.options.insert_space_before_opening_paren_in_record_declaration,
					this.options.insert_space_after_opening_paren_in_record_declaration);

			if (this.options.insert_space_before_closing_paren_in_record_declaration) {
				ASTNode nodeBeforeBrace = components.isEmpty() ? node.getName() : components.get(components.size() - 1);
				handleTokenAfter(nodeBeforeBrace, TokenNameRPAREN, true, false);
			}
		}
		handleCommas(components, this.options.insert_space_before_comma_in_record_components,
				this.options.insert_space_after_comma_in_record_components);
		return true;
	}

