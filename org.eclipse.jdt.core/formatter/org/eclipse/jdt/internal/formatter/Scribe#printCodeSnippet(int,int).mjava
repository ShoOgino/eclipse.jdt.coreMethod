	/*
	 * prints a code snippet
	 */
	private void printCodeSnippet(int startPosition, int endPosition) {
		String snippet = new String(this.scanner.source, startPosition, endPosition - startPosition + 1);
		
		// 1 - strip content prefix (@see JavaDocRegion#preprocessCodeSnippet)
		ILineTracker tracker= new DefaultLineTracker();
		String contentPrefix= IJavaDocTagConstants.JAVADOC_STAR;

		StringBuffer inputBuffer= new StringBuffer();
		inputBuffer.setLength(0);
		inputBuffer.append(snippet);
		tracker.set(snippet);
		for (int lines= tracker.getNumberOfLines() - 1; lines > 0; lines--) {
			int lineOffset;
			try {
				lineOffset= tracker.getLineOffset(lines);
			} catch (BadLocationException e) {
				// should not happen
				CommentFormatterUtil.log(e);
				return;
			}
			int prefixOffset= inputBuffer.indexOf(contentPrefix, lineOffset);
			if (prefixOffset >= 0 && inputBuffer.substring(lineOffset, prefixOffset).trim().length() == 0)
				inputBuffer.delete(lineOffset, prefixOffset + 1 + 1);
		}
		
		// 2 - convert HTML to Java (@see JavaDocRegion#convertHtml2Java)
		HTMLEntity2JavaReader reader= new HTMLEntity2JavaReader(new StringReader(inputBuffer.toString()));
		char[] buf= new char[snippet.length()]; // html2text never gets longer, only shorter!
		String convertedSnippet;
		try {
			int read= reader.read(buf);
			convertedSnippet = new String(buf, 0, read);
		} catch (IOException e) {
			// should not happen
			CommentFormatterUtil.log(e);
			return;
		}
		
		// 3 - process snippet (@see JavaDocRegion#formatCodeSnippet)
		// include comments in case of line comments are present in the snippet
		String formattedSnippet = convertedSnippet;
		TextEdit edit= CommentFormatterUtil.format2(CodeFormatter.K_UNKNOWN | CodeFormatter.F_INCLUDE_COMMENTS, convertedSnippet, 0, this.lineSeparator, this.formatter.preferences.getMap());
		if (edit != null) {
			formattedSnippet= CommentFormatterUtil.evaluateFormatterEdit(convertedSnippet, edit, null);
		}

		// 4 - add the content prefix (@see JavaDocRegion#postprocessCodeSnippet)
		StringBuffer outputBuffer= new StringBuffer();
		tracker= new DefaultLineTracker();
		this.column = 1;
		printIndentationIfNecessary(outputBuffer); // append indentation
		outputBuffer.append(BLOCK_LINE_PREFIX);
		String linePrefix = outputBuffer.toString();		
		outputBuffer.setLength(0);
		
		// 5 - convert back to HTML (@see JavaDocRegion#convertJava2Html)
		Java2HTMLEntityReader javaReader= new Java2HTMLEntityReader(new StringReader(formattedSnippet));
		buf= new char[256];
		StringBuffer conversionBuffer= new StringBuffer();
		int l;
		try {
			do {
				l= javaReader.read(buf);
				if (l != -1)
					conversionBuffer.append(buf, 0, l);
			} while (l > 0);
			formattedSnippet = conversionBuffer.toString();
		} catch (IOException e) {
			// should not happen
			CommentFormatterUtil.log(e);
			return;
		}
		
		outputBuffer.append(formattedSnippet);
		
		tracker.set(outputBuffer.toString());
		
		for (int lines= tracker.getNumberOfLines() - 1; lines > 0; lines--) {
			try {
				outputBuffer.insert(tracker.getLineOffset(lines), linePrefix);
			} catch (BadLocationException e) {
				// should not happen
				CommentFormatterUtil.log(e);
				return;
			}
		}
		// replace old text with the formatted snippet
		addReplaceEdit(startPosition, endPosition, outputBuffer.toString());		
	}

