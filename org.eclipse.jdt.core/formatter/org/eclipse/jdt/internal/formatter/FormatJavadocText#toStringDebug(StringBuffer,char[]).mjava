public void toStringDebug(StringBuffer buffer, char[] source) {
	if (buffer.length() > 0) {
		for (int l=0; l<this.linesBefore; l++) {
			buffer.append('\n');
			for (int t=0; t<this.depth; t++) buffer.append('\t');
		}
	}
	if (this.separatorsPtr == -1) {
		super.toStringDebug(buffer, source);
		return;
	}
	int ptr = 0;
	int nextStart = this.sourceStart;
	int idx = 0;
	while (idx<=this.separatorsPtr || (this.htmlNodesPtr != -1 && ptr <= this.htmlNodesPtr)) {
		if (idx > this.separatorsPtr) {
			// last node
			FormatJavadocNode node = this.htmlNodes[ptr++];
			node.toStringDebug(buffer, source);
			return;
		}
		int end = (int) (this.separators[idx] >>> 32);
		if (this.htmlNodesPtr >= 0 && ptr <= this.htmlNodesPtr && end > this.htmlNodes[ptr].sourceStart) {
			FormatJavadocNode node = this.htmlNodes[ptr++];
			node.toStringDebug(buffer, source);
		} else {
			if (idx > 1 && source[nextStart] != '<') {
				buffer.append('\n');
				for (int t=0; t<this.depth; t++) buffer.append('\t');
			}
			buffer.append(source, nextStart, end - nextStart + 1);
		}
		nextStart = (int) this.separators[idx++];
	}
	if (source[nextStart] == '<') {
		switch (getHtmlTagID()) {
			case JAVADOC_CODE_TAGS_ID:
				buffer.append('\n');
				for (int t=0; t<this.depth; t++) buffer.append('\t');
				break;
		}
	}
	buffer.append(source, nextStart, this.sourceEnd-nextStart+1);
	buffer.append(' ');
}

