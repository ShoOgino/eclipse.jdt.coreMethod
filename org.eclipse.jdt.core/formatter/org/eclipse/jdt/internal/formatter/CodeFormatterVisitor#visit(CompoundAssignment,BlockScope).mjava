	/**
	 * @see org.eclipse.jdt.internal.compiler.IAbstractSyntaxTreeVisitor#visit(org.eclipse.jdt.internal.compiler.ast.CompoundAssignment, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
	 */
	public boolean visit(
		CompoundAssignment compoundAssignment,
		BlockScope scope) {
			
		final int numberOfParens = (compoundAssignment.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;
		if (numberOfParens > 0) {
			manageOpeningParenthesizedExpression(compoundAssignment, numberOfParens);
		}
		compoundAssignment.lhs.traverse(this, scope);
		
		/*
		 * Print the operator
		 */
		int operator;
		switch(compoundAssignment.operator) {
			case OperatorIds.PLUS :
				operator = ITerminalSymbols.TokenNamePLUS_EQUAL;
				break;
			case OperatorIds.MINUS :
				operator = ITerminalSymbols.TokenNameMINUS_EQUAL;
				break;
			case OperatorIds.MULTIPLY :
				operator = ITerminalSymbols.TokenNameMULTIPLY_EQUAL;
				break;
			case OperatorIds.DIVIDE :
				operator = ITerminalSymbols.TokenNameDIVIDE_EQUAL;
				break;
			case OperatorIds.AND :
				operator = ITerminalSymbols.TokenNameAND_EQUAL;
				break;
			case OperatorIds.OR :
				operator = ITerminalSymbols.TokenNameOR_EQUAL;
				break;
			case OperatorIds.XOR :
				operator = ITerminalSymbols.TokenNameXOR_EQUAL;
				break;
			case OperatorIds.REMAINDER :
				operator = ITerminalSymbols.TokenNameREMAINDER_EQUAL;
				break;
			case OperatorIds.LEFT_SHIFT :
				operator = ITerminalSymbols.TokenNameLEFT_SHIFT_EQUAL;
				break;
			case OperatorIds.RIGHT_SHIFT :
				operator = ITerminalSymbols.TokenNameRIGHT_SHIFT_EQUAL;
				break;
			default: // OperatorIds.UNSIGNED_RIGHT_SHIFT :
				operator = ITerminalSymbols.TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL;
		}
		
		this.scribe.printNextToken(operator, this.preferences.insert_space_before_assignment_operators);
		if (this.preferences.insert_space_after_assignment_operators) {
			this.scribe.space();
		}
		compoundAssignment.expression.traverse(this, scope);
		
		if (numberOfParens > 0) {
			manageClosingParenthesizedExpression(compoundAssignment, numberOfParens);
		}
		return false;
	}

