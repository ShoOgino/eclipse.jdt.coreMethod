	@Override
	public boolean visit(InfixExpression node) {
		Operator operator = node.getOperator();
		boolean spaceBefore = SPACE_BEFORE_OPERATOR.get(operator).test(this.options);
		boolean spaceAfter = SPACE_AFTER_OPERATOR.get(operator).test(this.options);
		if (this.tm.isStringConcatenation(node)) {
			spaceBefore = this.options.insert_space_before_string_concatenation;
			spaceAfter = this.options.insert_space_after_string_concatenation;
		}
		handleOperator(operator.toString(), node.getRightOperand(), spaceBefore, spaceAfter);
		List<Expression> extendedOperands = node.extendedOperands();
		for (Expression operand : extendedOperands) {
			handleOperator(operator.toString(), operand, spaceBefore, spaceAfter);
		}
		return true;
	}

