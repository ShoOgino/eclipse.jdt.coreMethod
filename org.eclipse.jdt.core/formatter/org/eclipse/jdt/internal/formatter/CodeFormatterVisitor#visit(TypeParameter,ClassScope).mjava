	public boolean visit(TypeParameter typeParameter, ClassScope scope) {
		if (typeParameter.annotations != null) formatInlineAnnotations(typeParameter.annotations, false);
		this.scribe.printNextToken(TerminalTokens.TokenNameIdentifier);
		if (typeParameter.type != null) {
			this.scribe.space();
			this.scribe.printNextToken(TerminalTokens.TokenNameextends, true);
			this.scribe.space();
			typeParameter.type.traverse(this, scope);
		}
		final TypeReference[] bounds = typeParameter.bounds;
		if (bounds != null) {
			this.scribe.printNextToken(TerminalTokens.TokenNameAND, this.preferences.insert_space_before_and_in_type_parameter);
			if (this.preferences.insert_space_after_and_in_type_parameter) {
				this.scribe.space();
			}
			int boundsLength = bounds.length;
			for (int i = 0; i < boundsLength - 1; i++) {
				bounds[i].traverse(this, scope);
				this.scribe.printNextToken(TerminalTokens.TokenNameAND, this.preferences.insert_space_before_and_in_type_parameter);
				if (this.preferences.insert_space_after_and_in_type_parameter) {
					this.scribe.space();
				}
			}
			bounds[boundsLength - 1].traverse(this, scope);
		}
		return false;
	}

