	/**
	 * @see org.eclipse.jdt.internal.compiler.IAbstractSyntaxTreeVisitor#visit(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
	 */
	public boolean visit(LocalDeclaration localDeclaration, BlockScope scope) {

		if (!isMultipleLocalDeclaration(localDeclaration)) {
			if (localDeclaration.modifiers != NO_MODIFIERS) {
				this.scribe.printModifiers();
				this.scribe.space();
			}
	
			/*
			 * Argument type 
			 */		
			if (localDeclaration.type != null) {
				localDeclaration.type.traverse(this, scope);
			}
		}
		/*
		 * Print the argument name
		 */	
		this.scribe.printNextToken(ITerminalSymbols.TokenNameIdentifier, true); 
		/*
		 * Check for extra dimensions
		 */
		int extraDimensions = getExtraDimension();
		if (extraDimensions != 0) {
			 for (int index = 0; index < extraDimensions; index++) {
			 	this.scribe.printNextToken(ITerminalSymbols.TokenNameLBRACKET);
			 	this.scribe.printNextToken(ITerminalSymbols.TokenNameRBRACKET);
			 }
		}
	
		if (localDeclaration.initialization != null) {
			/*
			 * Print the method name
			 */	
			this.scribe.printNextToken(ITerminalSymbols.TokenNameEQUAL, this.preferences.insert_space_before_assignment_operators);
			if (this.preferences.insert_space_after_assignment_operators) {
				this.scribe.space();
			}			 
			localDeclaration.initialization.traverse(this, scope);
		}

		if (isPartOfMultipleLocalDeclaration()) {
			this.scribe.printNextToken(ITerminalSymbols.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_multiple_local_declarations); 
			if (this.preferences.insert_space_after_comma_in_multiple_local_declarations) {
				this.scribe.space();
			}
		}
		return false;
	}

