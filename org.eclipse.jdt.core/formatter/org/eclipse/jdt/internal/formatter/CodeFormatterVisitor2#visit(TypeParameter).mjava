	public boolean visit(TypeParameter node) {
		node.getName().accept(this);
		final List bounds = node.typeBounds();
		final int boundsLength = bounds.size();
		if (boundsLength != 0) {
			this.scribe.printNextToken(TerminalTokens.TokenNameextends, true);
			this.scribe.space();
			((Type) bounds.get(0)).accept(this);
			if (boundsLength > 1) {
				this.scribe.printNextToken(TerminalTokens.TokenNameAND, this.preferences.insert_space_before_and_in_type_parameter);
				if (this.preferences.insert_space_after_and_in_type_parameter) {
					this.scribe.space();
				}
				for (int i = 1; i < boundsLength - 1; i++) {
					((Type) bounds.get(i)).accept(this);
					this.scribe.printNextToken(TerminalTokens.TokenNameAND, this.preferences.insert_space_before_and_in_type_parameter);
					if (this.preferences.insert_space_after_and_in_type_parameter) {
						this.scribe.space();
					}
				}
				((Type) bounds.get(boundsLength - 1)).accept(this);
			}
		}
		return false;
	}

