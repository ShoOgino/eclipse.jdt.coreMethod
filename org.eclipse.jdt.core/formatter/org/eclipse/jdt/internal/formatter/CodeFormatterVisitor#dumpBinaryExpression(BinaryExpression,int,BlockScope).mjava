	private boolean dumpBinaryExpression(
		BinaryExpression binaryExpression,
		int operator,
		BlockScope scope) {

		final int numberOfParens = (binaryExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;

		if (numberOfParens > 0) {
			manageOpeningParenthesizedExpression(binaryExpression, numberOfParens);
		}
		BinaryExpressionFragmentBuilder builder = buildFragments(binaryExpression, scope);
		final int fragmentsSize = builder.size();

		if (this.expressionsDepth < 0) {
			this.expressionsDepth = 0;
		} else {
			this.expressionsDepth++;
			this.expressionsPos <<= 2;
		}
		try {
			this.lastBinaryExpressionAlignmentBreakIndentation = 0;
			if ((builder.realFragmentsSize() > 1 || fragmentsSize > 4) && numberOfParens == 0) {
				int scribeLine = this.scribe.line;
				this.scribe.printComment();
				Alignment binaryExpressionAlignment = this.scribe.createAlignment(
						Alignment.BINARY_EXPRESSION,
						this.preferences.alignment_for_binary_expression,
						Alignment.R_OUTERMOST,
						fragmentsSize,
						this.scribe.scanner.currentPosition);
				this.scribe.enterAlignment(binaryExpressionAlignment);
				boolean ok = false;
				ASTNode[] fragments = builder.fragments();
				int[] operators = builder.operators();
				do {
					try {
						final int max = fragmentsSize - 1;
						for (int i = 0; i < max; i++) {
							ASTNode fragment = fragments[i];
							fragment.traverse(this, scope);
							this.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);
							if (this.scribe.lastNumberOfNewLines == 1) {
								// a new line has been inserted while printing the comment
								// hence we need to use the break indentation level before printing next token...
								this.scribe.indentationLevel = binaryExpressionAlignment.breakIndentationLevel;
							}
							if (this.preferences.wrap_before_binary_operator) {
								this.scribe.alignFragment(binaryExpressionAlignment, i);
								this.scribe.printNextToken(operators[i], this.preferences.insert_space_before_binary_operator);
							} else {
								this.scribe.printNextToken(operators[i], this.preferences.insert_space_before_binary_operator);
								this.scribe.alignFragment(binaryExpressionAlignment, i);
							}
							switch(operators[i]) {
								case TerminalTokens.TokenNameMINUS :
									if (isNextToken(TerminalTokens.TokenNameMINUS)
											|| isNextToken(TerminalTokens.TokenNameMINUS_MINUS)) {
										// the next character is a '-' or '--' (unary operator)
										this.scribe.space();
									}
									break;
								case TerminalTokens.TokenNamePLUS :
									if (isNextToken(TerminalTokens.TokenNamePLUS)
											|| isNextToken(TerminalTokens.TokenNamePLUS_PLUS)) {
										// the next character is a + or ++ (unary operator)
										this.scribe.space();
									}
							}
							if (this.preferences.insert_space_after_binary_operator) {
								this.scribe.space();
							}
						}
						fragments[max].traverse(this, scope);
						this.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);
						ok = true;
					} catch(AlignmentException e){
						this.scribe.redoAlignment(e);
					}
				} while (!ok);
				this.scribe.exitAlignment(binaryExpressionAlignment, true);
				if (this.scribe.line == scribeLine) {
					// The expression was not broken => reset last break indentation
					this.lastBinaryExpressionAlignmentBreakIndentation = 0;
				} else {
					this.lastBinaryExpressionAlignmentBreakIndentation = binaryExpressionAlignment.breakIndentationLevel;
				}
			} else {
				this.expressionsPos |= EXPRESSIONS_POS_ENTER_TWO;
				binaryExpression.left.traverse(this, scope);
				this.expressionsPos &= ~EXPRESSIONS_POS_MASK;
				this.expressionsPos |= EXPRESSIONS_POS_BETWEEN_TWO;
				this.scribe.printNextToken(operator, this.preferences.insert_space_before_binary_operator, Scribe.PRESERVE_EMPTY_LINES_IN_BINARY_EXPRESSION);
				if (operator == TerminalTokens.TokenNameMINUS && isNextToken(TerminalTokens.TokenNameMINUS)) {
					// the next character is a minus (unary operator)
					this.scribe.space();
				}
				if (this.preferences.insert_space_after_binary_operator) {
					this.scribe.space();
				}
				binaryExpression.right.traverse(this, scope);
			}
		}
		finally {
			this.expressionsDepth--;
			this.expressionsPos >>= 2;
			if (this.expressionsDepth < 0) {
				this.lastBinaryExpressionAlignmentBreakIndentation = 0;
			}
		}
		if (numberOfParens > 0) {
			manageClosingParenthesizedExpression(binaryExpression, numberOfParens);
		}
		return false;
	}

