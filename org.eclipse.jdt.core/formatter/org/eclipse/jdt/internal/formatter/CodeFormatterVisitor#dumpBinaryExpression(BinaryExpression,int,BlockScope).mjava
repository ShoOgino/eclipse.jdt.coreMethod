	private boolean dumpBinaryExpression(
		BinaryExpression binaryExpression,
		int operator,
		BlockScope scope) {

		final int numberOfParens = (binaryExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;

		if (numberOfParens > 0) {
			manageOpeningParenthesizedExpression(binaryExpression, numberOfParens);
		}
		BinaryExpressionFragmentBuilder builder = buildFragments(binaryExpression, scope);
		final int fragmentsSize = builder.size();

		if ((builder.realFragmentsSize() > 1 || builder.size() > 4) && numberOfParens == 0) {
			this.scribe.printComment();
			Alignment binaryExpressionAlignment = this.scribe.createAlignment("binaryExpressionAlignment", this.preferences.alignment_for_binary_expression, Alignment.R_OUTERMOST, fragmentsSize, this.scribe.scanner.currentPosition); //$NON-NLS-1$
			this.scribe.enterAlignment(binaryExpressionAlignment);
			boolean ok = false;
			ASTNode[] fragments = builder.fragments();
			int[] operators = builder.operators();
			do {
				try {
					for (int i = 0; i < fragmentsSize - 1; i++) {
						ASTNode fragment = fragments[i];
						fragment.traverse(this, scope);
						this.scribe.printTrailingComment();
						if (this.scribe.lastNumberOfNewLines == 1) {
							// a new line has been inserted by printTrailingComment()
							this.scribe.indentationLevel = binaryExpressionAlignment.breakIndentationLevel;
						}
						if (this.preferences.wrap_before_binary_operator) {
							this.scribe.alignFragment(binaryExpressionAlignment, i);
							this.scribe.printNextToken(operators[i], this.preferences.insert_space_before_binary_operator);
						} else {
							this.scribe.printNextToken(operators[i], this.preferences.insert_space_before_binary_operator);
							this.scribe.alignFragment(binaryExpressionAlignment, i);
						}
						if (operators[i] == TerminalTokens.TokenNameMINUS && isNextToken(TerminalTokens.TokenNameMINUS)) {
							// the next character is a minus (unary operator)
							this.scribe.space();
						}
						if (this.preferences.insert_space_after_binary_operator) {
							this.scribe.space();
						}
					}
					fragments[fragmentsSize - 1].traverse(this, scope);
					this.scribe.printTrailingComment();
					ok = true;
				} catch(AlignmentException e){
					this.scribe.redoAlignment(e);
				}
			} while (!ok);
			this.scribe.exitAlignment(binaryExpressionAlignment, true);
		} else {
			binaryExpression.left.traverse(this, scope);
			this.scribe.printNextToken(operator, this.preferences.insert_space_before_binary_operator);
			if (operator == TerminalTokens.TokenNameMINUS && isNextToken(TerminalTokens.TokenNameMINUS)) {
				// the next character is a minus (unary operator)
				this.scribe.space();
			}
			if (this.preferences.insert_space_after_binary_operator) {
				this.scribe.space();
			}
			binaryExpression.right.traverse(this, scope);
		}
		if (numberOfParens > 0) {
			manageClosingParenthesizedExpression(binaryExpression, numberOfParens);
		}
		return false;
	}

