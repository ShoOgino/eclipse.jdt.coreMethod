/** 
 * Appends <code>token</code> to the formatted output.<br>
 * If it contains <code>\n</code>, append a LINE_SEPARATOR and indent after it.
 */
private void outputCurrentToken(int token) {
	char[] source = scanner.source;
	int startPosition = scanner.startPosition;

	switch(token) {
		case Scanner.TokenNameCOMMENT_JAVADOC :
		case Scanner.TokenNameCOMMENT_BLOCK :
		case Scanner.TokenNameCOMMENT_LINE :
			boolean endOfLine = false;
			int currentCommentOffset = getCurrentCommentOffset();
			int beginningOfLineSpaces = 0;
			for (int i = startPosition, max = scanner.currentPosition; i < max; i++) {
				char currentCharacter = source[i];
				switch(currentCharacter) {
					case '\r' :
					case '\n' :
						 endOfLine = true;
						 currentLineBuffer.append(currentCharacter);
						 beginningOfLineSpaces = 0;
						 break;
					case '\t' :
						if (endOfLine) {
							// we remove a maximum of currentCommentOffset characters (tabs are converted to space numbers).
							beginningOfLineSpaces+=options.tabSize;
							if (beginningOfLineSpaces > currentCommentOffset)
								currentLineBuffer.append(currentCharacter);						
						} else {
							currentLineBuffer.append(currentCharacter);
						}
						break;
					case ' ' :
						if (endOfLine) {
							// we remove a maximum of currentCommentOffset characters (tabs are converted to space numbers).
							beginningOfLineSpaces++;
							if (beginningOfLineSpaces > currentCommentOffset)
								currentLineBuffer.append(currentCharacter);						
						} else {
							currentLineBuffer.append(currentCharacter);
						}
						break;
					default:
						beginningOfLineSpaces = 0;
						currentLineBuffer.append(currentCharacter);
						endOfLine = false;
				}
			}
			break;
		default:
			currentLineBuffer.append(source, startPosition, scanner.currentPosition - startPosition);
	}
	updateMappedPositions(startPosition);
}

