	private boolean isValidEdit(OptimizedReplaceEdit edit) {
		final int editLength= edit.length;
		final int editReplacementLength= edit.replacement.length();
		final int editOffset= edit.offset;
		if (editLength != 0) {
			
			IRegion covering = getCoveringRegion(editOffset, (editOffset + editLength - 1));
			if (covering != null) {
				if (editReplacementLength != 0 && editLength == editReplacementLength) {
					for (int i = editOffset, max = editOffset + editLength; i < max; i++) {
						if (scanner.source[i] != edit.replacement.charAt(i - editOffset)) {
							return true;
						}
					}
					return false;
				}
				return true;
			}

			IRegion starting = getRegionAt(editOffset + editLength);
			if (starting != null) {
				int i = editOffset;
				for (int max = editOffset + editLength; i < max; i++) {
					int replacementStringIndex = i - editOffset;
					if (replacementStringIndex >= editReplacementLength || scanner.source[i] != edit.replacement.charAt(replacementStringIndex)) {
						break;
					}
				}
				if (i - editOffset != editReplacementLength && i != editOffset + editLength - 1) {
					edit.offset = starting.getOffset();
					edit.length = 0;
					edit.replacement = edit.replacement.substring(i - editOffset);
					return true;
				}
			}
			
			return false;
		}
		
		IRegion covering = getCoveringRegion(editOffset, editOffset);
		if (covering != null) {
			return true;
		}

		if (editOffset == this.scannerEndPosition) {
			int index = Arrays.binarySearch(
				this.regions,
				new Region(editOffset, 0),
				new Comparator() {
					public int compare(Object o1, Object o2) {
						IRegion r1 = (IRegion)o1;
						IRegion r2 = (IRegion)o2;
						
						int r1End = r1.getOffset() + r1.getLength();
						int r2End = r2.getOffset() + r2.getLength();
						
						return r1End - r2End;
					}
				});
			if (index < 0) {
				return false;
			}
			return true;
		}
		return false;
	}

