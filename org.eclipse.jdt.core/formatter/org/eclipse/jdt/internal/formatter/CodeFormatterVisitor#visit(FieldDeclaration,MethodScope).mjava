	// field is an enum constant
	public boolean visit(FieldDeclaration enumConstant, MethodScope scope) {
        /*
         * Print comments to get proper line number
         */
        this.scribe.printComment();
        final int line = this.scribe.line; 
        
        this.scribe.printModifiers(enumConstant.annotations, this);
		this.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true); 
		formatEnumConstantArguments(
			enumConstant,
			this.preferences.insert_space_before_opening_paren_in_enum_constant,
			this.preferences.insert_space_between_empty_parens_in_enum_constant,
			this.preferences.insert_space_before_closing_paren_in_enum_constant,
			this.preferences.insert_space_after_opening_paren_in_enum_constant,
			this.preferences.insert_space_before_comma_in_enum_constant_arguments,
			this.preferences.insert_space_after_comma_in_enum_constant_arguments,
			this.preferences.alignment_for_arguments_in_enum_constant);			
		
		Expression initialization = enumConstant.initialization;
		if (initialization instanceof QualifiedAllocationExpression) {
			TypeDeclaration typeDeclaration = ((QualifiedAllocationExpression) initialization).anonymousType;
			int fieldsCount = typeDeclaration.fields == null ? 0 : typeDeclaration.fields.length;
			int methodsCount = typeDeclaration.methods == null ? 0 : typeDeclaration.methods.length;
			int membersCount = typeDeclaration.memberTypes == null ? 0 : typeDeclaration.memberTypes.length;
			
			/*
			 * Type body
			 */
			String enum_constant_brace = this.preferences.brace_position_for_enum_constant;
	
	        formatLeftCurlyBrace(line, enum_constant_brace);
			formatTypeOpeningBrace(enum_constant_brace, this.preferences.insert_space_before_opening_brace_in_enum_constant, typeDeclaration);
			
			if (this.preferences.indent_body_declarations_compare_to_enum_constant_header) {
				this.scribe.indent();
			}
	
			if (fieldsCount != 0 || methodsCount != 0 || membersCount != 0) {
				formatTypeMembers(typeDeclaration);
			}
	
			this.scribe.printComment();
			
			if (this.preferences.indent_body_declarations_compare_to_enum_constant_header) {
				this.scribe.unIndent();
			}
			
			if (this.preferences.insert_new_line_in_empty_enum_constant) {
				this.scribe.printNewLine();
			}
			this.scribe.printNextToken(TerminalTokens.TokenNameRBRACE);
			this.scribe.printTrailingComment();
			if (enum_constant_brace.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {
				this.scribe.unIndent();
			}
			if (hasComments()) {
				this.scribe.printNewLine();
			}
		}
		return false;
	}

