	private void formatVariableDeclarationFragments(final List fragments, boolean insertSpaceBeforeComma, boolean insertSpaceAfterComma) {
		final int fragmentsLength = fragments.size();
		if (fragmentsLength > 1) {
			// multiple field declaration
			Alignment2 multiFieldDeclarationsAlignment =this.scribe.createAlignment(
					"multiple_field",//$NON-NLS-1$
					this.preferences.alignment_for_multiple_fields,
					fragmentsLength - 1,
					this.scribe.scanner.currentPosition);
			this.scribe.enterAlignment(multiFieldDeclarationsAlignment);
		
			boolean ok = false;
			do {
				try {
					for (int i = 0; i < fragmentsLength; i++) {
						VariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(i);
						/*
						 * Field name
						 */
						if (i == 0) {
							this.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true);
						} else {
							this.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, false);
						}
				
						/*
						 * Check for extra dimensions
						 */
						final int extraDimensions = fragment.getExtraDimensions();
						if (extraDimensions != 0) {
							 for (int index = 0; index < extraDimensions; index++) {
							 	this.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);
							 	this.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);
							 }
						}
					
						/*
						 * Field initialization
						 */
						final Expression initialization = fragment.getInitializer();
						if (initialization != null) {
							this.scribe.printNextToken(TerminalTokens.TokenNameEQUAL, this.preferences.insert_space_before_assignment_operator);
							if (this.preferences.insert_space_after_assignment_operator) {
								this.scribe.space();
							}
							Alignment2 assignmentAlignment = this.scribe.createAlignment("fieldDeclarationAssignmentAlignment", this.preferences.alignment_for_assignment, 1, this.scribe.scanner.currentPosition); //$NON-NLS-1$
							this.scribe.enterAlignment(assignmentAlignment);
							boolean ok2 = false;
							do {
								try {
									this.scribe.alignFragment(assignmentAlignment, 0);
									initialization.accept(this);
									ok2 = true;
								} catch(AlignmentException e){
									this.scribe.redoAlignment(e);
								}
							} while (!ok2);		
							this.scribe.exitAlignment(assignmentAlignment, true);			
						}
						
						if (i != fragmentsLength - 1) {
							this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, insertSpaceBeforeComma);
							this.scribe.printTrailingComment();
							this.scribe.alignFragment(multiFieldDeclarationsAlignment, i);

							if (insertSpaceAfterComma) {
								this.scribe.space();
							}
						}
					}
					ok = true;
				} catch (AlignmentException e) {
					this.scribe.redoAlignment(e);
				}
			} while (!ok);
			this.scribe.exitAlignment(multiFieldDeclarationsAlignment, true);				
		} else {
			// single field declaration
			this.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true);
			VariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);
			final int extraDimensions = fragment.getExtraDimensions();
			if (extraDimensions != 0) {
				for (int i = 0; i < extraDimensions; i++) {
					this.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);
					this.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);
				}
			}
			final Expression initialization = fragment.getInitializer();
			if (initialization != null) {
				this.scribe.printNextToken(TerminalTokens.TokenNameEQUAL, this.preferences.insert_space_before_assignment_operator);
				if (this.preferences.insert_space_after_assignment_operator) {
					this.scribe.space();
				}
				Alignment2 assignmentAlignment = this.scribe.createAlignment("localDeclarationAssignmentAlignment", this.preferences.alignment_for_assignment, 1, this.scribe.scanner.currentPosition); //$NON-NLS-1$
				this.scribe.enterAlignment(assignmentAlignment);
				boolean ok = false;
				do {
					try {
						this.scribe.alignFragment(assignmentAlignment, 0);
						initialization.accept(this);
						ok = true;
					} catch(AlignmentException e){
						this.scribe.redoAlignment(e);
					}
				} while (!ok);		
				this.scribe.exitAlignment(assignmentAlignment, true);			
			}
		}
	}

