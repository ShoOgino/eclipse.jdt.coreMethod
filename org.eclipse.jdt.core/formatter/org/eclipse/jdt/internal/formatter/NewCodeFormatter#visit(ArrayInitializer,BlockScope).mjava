	/**
	 * @see org.eclipse.jdt.internal.compiler.IAbstractSyntaxTreeVisitor#visit(org.eclipse.jdt.internal.compiler.ast.ArrayInitializer, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
	 */
	public boolean visit(ArrayInitializer arrayInitializer, BlockScope scope) {

		final int numberOfParens = (arrayInitializer.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;
		if (numberOfParens > 0) {
			manageOpeningParenthesizedExpression(arrayInitializer, numberOfParens);
		}
		this.scribe.printNextToken(ITerminalSymbols.TokenNameLBRACE);
		
		final Expression[] expressions = arrayInitializer.expressions;
		if (expressions != null) {
			int expressionsLength = expressions.length;
			if (expressionsLength > 1) {
				Alignment expressionsAlignment =this.scribe.createAlignment(
						"expressions",//$NON-NLS-1$
						this.preferences.array_initializer_expressions_alignment,
						expressionsLength - 1,
						this.scribe.scanner.currentPosition);
				this.scribe.enterAlignment(expressionsAlignment);
				boolean ok = false;
				do {
					try {
						if (this.preferences.insert_space_before_first_initializer) {
							this.scribe.space();
						}
						expressions[0].traverse(this, scope);
						for (int i = 1; i < expressionsLength; i++) {
							this.scribe.printNextToken(ITerminalSymbols.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);
							if (this.preferences.insert_space_after_comma_in_array_initializer) {
								this.scribe.space();
							}
							this.scribe.alignFragment(expressionsAlignment, i - 1);
							expressions[i].traverse(this, scope);
						}
						ok = true;
					} catch (AlignmentException e) {
						this.scribe.redoAlignment(e);
					}
				} while (!ok);
				this.scribe.exitAlignment(expressionsAlignment, true);
			} else {
				// we don't need to use an alignment
				if (this.preferences.insert_space_before_first_initializer) {
					this.scribe.space();
				}
				expressions[0].traverse(this, scope);
				for (int i = 1; i < expressionsLength; i++) {
					this.scribe.printNextToken(ITerminalSymbols.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);
					if (this.preferences.insert_space_after_comma_in_array_initializer) {
						this.scribe.space();
					}
					expressions[i].traverse(this, scope);
				}
			}
			if (isComma()) {
				this.scribe.printNextToken(ITerminalSymbols.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);
			}
			this.scribe.printNextToken(ITerminalSymbols.TokenNameRBRACE, this.preferences.insert_space_before_closing_brace_in_array_initializer); 
		} else {
			this.scribe.printNextToken(ITerminalSymbols.TokenNameRBRACE, this.preferences.insert_space_between_empty_array_initializer);
		}

		if (numberOfParens > 0) {
			manageClosingParenthesizedExpression(arrayInitializer, numberOfParens);
		}
		return false;
	}

