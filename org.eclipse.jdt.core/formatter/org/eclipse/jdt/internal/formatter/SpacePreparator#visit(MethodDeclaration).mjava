	@Override
	public boolean visit(MethodDeclaration node) {
		handleToken(node.getName(), TokenNameIdentifier, true, false);

		List<SingleVariableDeclaration> params = node.parameters();
		if (!node.isCompactConstructor()) {
			boolean beforeOpenParen = node.isConstructor()
					? this.options.insert_space_before_opening_paren_in_constructor_declaration
					: this.options.insert_space_before_opening_paren_in_method_declaration;
			boolean afterOpenParen = node.isConstructor()
					? this.options.insert_space_after_opening_paren_in_constructor_declaration
					: this.options.insert_space_after_opening_paren_in_method_declaration;
			boolean betweenEmptyParens = node.isConstructor()
					? this.options.insert_space_between_empty_parens_in_constructor_declaration
					: this.options.insert_space_between_empty_parens_in_method_declaration;
			if (handleEmptyParens(node.getName(), betweenEmptyParens)) {
				handleToken(node.getName(), TokenNameLPAREN, beforeOpenParen, false);
			} else {
				handleToken(node.getName(), TokenNameLPAREN, beforeOpenParen, afterOpenParen);

				boolean beforeCloseParen = node.isConstructor()
						? this.options.insert_space_before_closing_paren_in_constructor_declaration
						: this.options.insert_space_before_closing_paren_in_method_declaration;
				if (beforeCloseParen) {
					ASTNode nodeBeforeBrace = params.isEmpty() ? node.getName() : params.get(params.size() - 1);
					handleTokenAfter(nodeBeforeBrace, TokenNameRPAREN, true, false);
				}
			}

			boolean beforeComma = node.isConstructor()
					? this.options.insert_space_before_comma_in_constructor_declaration_parameters
					: this.options.insert_space_before_comma_in_method_declaration_parameters;
			boolean afterComma = node.isConstructor()
					? this.options.insert_space_after_comma_in_constructor_declaration_parameters
					: this.options.insert_space_after_comma_in_method_declaration_parameters;
			if (node.getReceiverType() != null) {
				params = new ArrayList<>(params);
				params.add(0, null); // space for explicit receiver, null OK - first value not read in handleCommas
			}
			handleCommas(params, beforeComma, afterComma);
		}

		boolean beforeOpeningBrace = node.isCompactConstructor()
				? this.options.insert_space_before_opening_brace_in_record_constructor
				: node.isConstructor() ? this.options.insert_space_before_opening_brace_in_constructor_declaration
						: this.options.insert_space_before_opening_brace_in_method_declaration;
		if (beforeOpeningBrace && node.getBody() != null)
			this.tm.firstTokenIn(node.getBody(), TokenNameLBRACE).spaceBefore();

		if (node.getReceiverType() != null)
			this.tm.lastTokenIn(node.getReceiverType(), -1).spaceAfter();

		List<Type> thrownExceptionTypes = node.thrownExceptionTypes();
		if (!thrownExceptionTypes.isEmpty()) {
			handleTokenBefore(thrownExceptionTypes.get(0), TokenNamethrows, true, false);

			boolean beforeComma = node.isConstructor()
					? this.options.insert_space_before_comma_in_constructor_declaration_throws
							: this.options.insert_space_before_comma_in_method_declaration_throws;
			boolean afterComma = node.isConstructor()
					? this.options.insert_space_after_comma_in_constructor_declaration_throws
							: this.options.insert_space_after_comma_in_method_declaration_throws;
			handleCommas(thrownExceptionTypes, beforeComma, afterComma);
		}

		List<TypeParameter> typeParameters = node.typeParameters();
		if (!typeParameters.isEmpty()) {
			handleTypeParameters(typeParameters);
			handleTokenBefore(typeParameters.get(0), TokenNameLESS, true, false);
			handleTokenAfter(typeParameters.get(typeParameters.size() - 1), TokenNameGREATER, false, true);
		}

		handleSemicolon(node);
		return true;
	}

