	@Override
	public boolean visit(MethodDeclaration node) {
		handleToken(node.getName(), TokenNameIdentifier, true, false);

		boolean spaceBeforeOpenParen = node.isConstructor()
				? this.options.insert_space_before_opening_paren_in_constructor_declaration
				: this.options.insert_space_before_opening_paren_in_method_declaration;
		boolean spaceAfterOpenParen = node.isConstructor()
				? this.options.insert_space_after_opening_paren_in_constructor_declaration
				: this.options.insert_space_after_opening_paren_in_method_declaration;
		boolean spaceBetweenEmptyParens = node.isConstructor()
				? this.options.insert_space_between_empty_parens_in_constructor_declaration
				: this.options.insert_space_between_empty_parens_in_method_declaration;
		if (handleEmptyParens(node.getName(), spaceBetweenEmptyParens)) {
			handleToken(node.getName(), TokenNameLPAREN, spaceBeforeOpenParen, false);
		} else {
			handleToken(node.getName(), TokenNameLPAREN, spaceBeforeOpenParen, spaceAfterOpenParen);

			boolean spaceBeforeCloseParen = node.isConstructor()
					? this.options.insert_space_before_closing_paren_in_constructor_declaration
					: this.options.insert_space_before_closing_paren_in_method_declaration;
			if (spaceBeforeCloseParen) {
				List<SingleVariableDeclaration> params = node.parameters();
				ASTNode beforeBrace = params.isEmpty() ? node.getName() : params.get(params.size() - 1);
				handleTokenAfter(beforeBrace, TokenNameRPAREN, true, false);
			}
		}

		if ((node.isConstructor() ? this.options.insert_space_before_opening_brace_in_constructor_declaration
				: this.options.insert_space_before_opening_brace_in_method_declaration) && node.getBody() != null)
			this.tm.firstTokenIn(node.getBody(), TokenNameLBRACE).spaceBefore();

		boolean beforeComma = node.isConstructor()
				? this.options.insert_space_before_comma_in_constructor_declaration_parameters
				: this.options.insert_space_before_comma_in_method_declaration_parameters;
		boolean afterComma = node.isConstructor()
				? this.options.insert_space_after_comma_in_constructor_declaration_parameters
				: this.options.insert_space_after_comma_in_method_declaration_parameters;
		handleCommas(node.parameters(), beforeComma, afterComma);

		List<Type> thrownExceptionTypes = node.thrownExceptionTypes();
		if (!thrownExceptionTypes.isEmpty()) {
			this.tm.firstTokenBefore(thrownExceptionTypes.get(0), TokenNamethrows).spaceBefore();

			beforeComma = node.isConstructor()
					? this.options.insert_space_before_comma_in_constructor_declaration_throws
					: this.options.insert_space_before_comma_in_method_declaration_throws;
			afterComma = node.isConstructor()
					? this.options.insert_space_after_comma_in_constructor_declaration_throws
					: this.options.insert_space_after_comma_in_method_declaration_throws;
			handleCommas(thrownExceptionTypes, beforeComma, afterComma);
		}

		List<TypeParameter> typeParameters = node.typeParameters();
		if (!typeParameters.isEmpty()) {
			handleTypeParameters(typeParameters);
			handleTokenBefore(typeParameters.get(0), TokenNameLESS, true, false);
			handleTokenAfter(typeParameters.get(typeParameters.size() - 1), TokenNameGREATER, false, true);
		}
		return true;
	}

