	public boolean visit(InfixExpression node) { 
		final Expression leftOperand = node.getLeftOperand();
		final Expression rightOperand = node.getRightOperand();
		if (leftOperand.getNodeType() == ASTNode.INFIX_EXPRESSION && isSplittable(leftOperand)) {
			leftOperand.accept(this);
		} else {
			this.fragments.add(leftOperand);
		}
		if (operatorCounter == this.operators.length) {
			// need to resize
			System.arraycopy(this.operators, 0, (this.operators = new int[this.operatorCounter * 2]), 0, this.operatorCounter);
		}
		final int extractInfixExpressionOperator = CodeFormatterVisitor2.extractInfixExpressionOperator(node);
		this.operators[this.operatorCounter++] = extractInfixExpressionOperator;
		if (rightOperand.getNodeType() == ASTNode.INFIX_EXPRESSION && isSplittable(leftOperand)) {
			rightOperand.accept(this);
		} else {
			this.fragments.add(rightOperand);
		}
		final List extendedOperands = node.extendedOperands();
		final int extendedOperandsLength = extendedOperands.size();
		if (extendedOperandsLength != 0) {
			for (int i = 0; i < extendedOperandsLength; i++) {
				if (operatorCounter == this.operators.length) {
					// need to resize
					System.arraycopy(this.operators, 0, (this.operators = new int[this.operatorCounter * 2]), 0, this.operatorCounter);
				}
				this.operators[this.operatorCounter++] = extractInfixExpressionOperator;
				final Expression extendedOperand = ((Expression) extendedOperands.get(i));
				if (extendedOperand instanceof InfixExpression) {
					extendedOperand.accept(this);
				} else {
					this.fragments.add(extendedOperand);
				}
			}
		}
		return false;
	}

