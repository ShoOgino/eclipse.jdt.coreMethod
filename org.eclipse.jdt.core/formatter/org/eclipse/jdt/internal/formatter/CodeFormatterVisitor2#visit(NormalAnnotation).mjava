	public boolean visit(NormalAnnotation node) {
		this.scribe.printNextToken(TerminalTokens.TokenNameAT);
		if (this.preferences.insert_space_after_at_in_annotation) {
			this.scribe.space();
		}
		node.getTypeName().accept(this);
		this.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_annotation);
		if (this.preferences.insert_space_after_opening_paren_in_annotation) {
			this.scribe.space();
		}
		final List memberValuePairs = node.values();
		final int memberValuePairsLength = memberValuePairs.size();
		if (memberValuePairs.size() != 0) {
			for (int i = 0; i < memberValuePairsLength - 1; i++) {
				((MemberValuePair) memberValuePairs.get(i)).accept(this);
				this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_annotation);
				if (this.preferences.insert_space_after_comma_in_annotation) {
					this.scribe.space();
				}
			}
			((MemberValuePair) memberValuePairs.get(memberValuePairsLength - 1)).accept(this);
		}
		this.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_annotation);
		return false;
	}

