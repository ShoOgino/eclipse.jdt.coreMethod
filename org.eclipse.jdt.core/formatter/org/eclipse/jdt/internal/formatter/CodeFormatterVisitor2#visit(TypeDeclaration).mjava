	public boolean visit(TypeDeclaration node) {
        /*
         * Print comments to get proper line number
         */
        this.scribe.printComment();
        final int line = this.scribe.line; 
        
        final List modifiers = node.modifiers();
        if (modifiers.size() != 0) {
            this.scribe.printModifiers(modifiers, this);
            this.scribe.space();
        }
        final boolean isInterface = node.isInterface();
		if (isInterface) {
			this.scribe.printNextToken(TerminalTokens.TokenNameinterface, true);
        } else {
			this.scribe.printNextToken(TerminalTokens.TokenNameclass, true);
        }

        this.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true); 

        final List typeParameters = node.typeParameters();
        final int typeParametersLength = typeParameters.size();
		if (typeParametersLength != 0) {
			this.scribe.printNextToken(TerminalTokens.TokenNameLESS, this.preferences.insert_space_before_opening_angle_bracket_in_type_parameters); 
			if (this.preferences.insert_space_after_opening_angle_bracket_in_type_parameters) {
				this.scribe.space();
			}
			for (int i = 0; i < typeParametersLength - 1; i++) {
				((TypeParameter) typeParameters.get(i)).accept(this);
				this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_type_parameters);
				if (this.preferences.insert_space_after_comma_in_type_parameters) {
					this.scribe.space();
				}				
			}
			((TypeParameter) typeParameters.get(typeParametersLength - 1)).accept(this);
			if (isClosingGenericToken()) {
				this.scribe.printNextToken(CLOSING_GENERICS_EXPECTEDTOKENS, this.preferences.insert_space_before_closing_angle_bracket_in_type_parameters); 
			}
			if (this.preferences.insert_space_after_closing_angle_bracket_in_type_parameters) {
				this.scribe.space();
			}
		}
		/* 
		 * Superclass 
		 */
		final Type superclass = node.getSuperclassType();
		if (superclass != null) {
			Alignment2 superclassAlignment =this.scribe.createAlignment(
					"superclass", //$NON-NLS-1$
					this.preferences.alignment_for_superclass_in_type_declaration,
					2,
					this.scribe.scanner.currentPosition);
			this.scribe.enterAlignment(superclassAlignment);
			boolean ok = false;
			do {
				try {
					this.scribe.alignFragment(superclassAlignment, 0);
					this.scribe.printNextToken(TerminalTokens.TokenNameextends, true);
					this.scribe.alignFragment(superclassAlignment, 1);
					this.scribe.space();
					superclass.accept(this);
					ok = true;
				} catch (AlignmentException e) {
					this.scribe.redoAlignment(e);
				}
			} while (!ok);
			this.scribe.exitAlignment(superclassAlignment, true); 
		}

		/* 
		 * Super Interfaces 
		 */
		final List superInterfaces = node.superInterfaceTypes();
		final int superInterfacesLength = superInterfaces.size();
		if (superInterfacesLength != 0) {
			Alignment2 interfaceAlignment = this.scribe.createAlignment(
					"superInterfaces",//$NON-NLS-1$
					this.preferences.alignment_for_superinterfaces_in_type_declaration,
					superInterfacesLength+1,  // implements token is first fragment
					this.scribe.scanner.currentPosition);
			this.scribe.enterAlignment(interfaceAlignment);
			boolean ok = false;
			do {
				try {
					this.scribe.alignFragment(interfaceAlignment, 0);
					if (isInterface) {
						this.scribe.printNextToken(TerminalTokens.TokenNameextends, true);
					} else {
						this.scribe.printNextToken(TerminalTokens.TokenNameimplements, true);
					}
					this.scribe.alignFragment(interfaceAlignment, 1);
					this.scribe.space();
					((Type) superInterfaces.get(0)).accept(this);
					for (int i = 1; i < superInterfacesLength; i++) {
						this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_superinterfaces);
						this.scribe.printTrailingComment();
						this.scribe.alignFragment(interfaceAlignment, i+1);
						if (this.preferences.insert_space_after_comma_in_superinterfaces) {
							this.scribe.space();
						}
						((Type) superInterfaces.get(i)).accept(this);
					}
					ok = true;
				} catch (AlignmentException e) {
					this.scribe.redoAlignment(e);
				}
			} while (!ok);
			this.scribe.exitAlignment(interfaceAlignment, true);
		}

		final String class_declaration_brace = this.preferences.brace_position_for_type_declaration;
		final boolean space_before_opening_brace = this.preferences.insert_space_before_opening_brace_in_type_declaration;

		formatLeftCurlyBrace(line, class_declaration_brace);
		final List bodyDeclarations = node.bodyDeclarations();
		formatTypeOpeningBrace(class_declaration_brace, space_before_opening_brace, bodyDeclarations.size() != 0, node);
		
		final boolean indent_body_declarations_compare_to_header = this.preferences.indent_body_declarations_compare_to_type_header;

		if (indent_body_declarations_compare_to_header) {
			this.scribe.indent();
		}
		
		formatTypeMembers(bodyDeclarations, true);
		
		if (indent_body_declarations_compare_to_header) {
			this.scribe.unIndent();
		}

		if (this.preferences.insert_new_line_in_empty_type_declaration) {
			this.scribe.printNewLine();
		}
		this.scribe.printNextToken(TerminalTokens.TokenNameRBRACE);
		this.scribe.printTrailingComment();
		if (class_declaration_brace.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {
			this.scribe.unIndent();
		}
		if (hasComments()) {
			this.scribe.printNewLine();
		}
		return false;
	}

