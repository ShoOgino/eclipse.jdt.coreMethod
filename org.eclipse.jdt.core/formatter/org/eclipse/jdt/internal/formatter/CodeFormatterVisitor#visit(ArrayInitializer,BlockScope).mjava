	/**
	 * @see org.eclipse.jdt.internal.compiler.ASTVisitor#visit(org.eclipse.jdt.internal.compiler.ast.ArrayInitializer, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
	 */
	public boolean visit(ArrayInitializer arrayInitializer, BlockScope scope) {
		final int numberOfParens = (arrayInitializer.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;
		if (numberOfParens > 0) {
			manageOpeningParenthesizedExpression(arrayInitializer, numberOfParens);
		}

		if (this.arrayInitializersDepth < 0) {
			this.arrayInitializersDepth = 0;
		} else {
			this.arrayInitializersDepth++;
		}
		int arrayInitializerIndentationLevel = this.scribe.indentationLevel;
		try {
			final Expression[] expressions = arrayInitializer.expressions;
			if (expressions != null) {
				String array_initializer_brace_position = this.preferences.brace_position_for_array_initializer;
				formatOpeningBrace(array_initializer_brace_position, this.preferences.insert_space_before_opening_brace_in_array_initializer);

				int expressionsLength = expressions.length;
				final boolean insert_new_line_after_opening_brace = this.preferences.insert_new_line_after_opening_brace_in_array_initializer;
				boolean ok = false;
				Alignment arrayInitializerAlignment = null;
				if (expressionsLength > 1) {
					if (insert_new_line_after_opening_brace) {
						this.scribe.printNewLine();
					}
					arrayInitializerAlignment = this.scribe.createAlignment(
							Alignment.ARRAY_INITIALIZER,
							this.preferences.alignment_for_expressions_in_array_initializer,
							Alignment.R_OUTERMOST,
							expressionsLength,
							this.scribe.scanner.currentPosition,
							this.preferences.continuation_indentation_for_array_initializer,
							true);
	
					if (insert_new_line_after_opening_brace) {
						arrayInitializerAlignment.fragmentIndentations[0] = arrayInitializerAlignment.breakIndentationLevel;
					}
	
					this.scribe.enterAlignment(arrayInitializerAlignment);
					do {
						try {
							this.scribe.alignFragment(arrayInitializerAlignment, 0);
							if (this.preferences.insert_space_after_opening_brace_in_array_initializer) {
								this.scribe.space();
							}
							expressions[0].traverse(this, scope);
							for (int i = 1; i < expressionsLength; i++) {
								this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);
								this.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);
								this.scribe.alignFragment(arrayInitializerAlignment, i);
								if (this.preferences.insert_space_after_comma_in_array_initializer) {
									this.scribe.space();
								}
								expressions[i].traverse(this, scope);
								if (i == expressionsLength - 1) {
									if (isNextToken(TerminalTokens.TokenNameCOMMA)) {
										this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);
										this.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);
									}
								}
							}
							ok = true;
						} catch (AlignmentException e) {
							this.scribe.redoAlignment(e);
						}
					} while (!ok);
					this.scribe.exitAlignment(arrayInitializerAlignment, true);
				} else {
					// Use an alignment with no break in case when the array initializer
					// is not inside method arguments alignments
					if (this.scribe.currentAlignment == null || this.scribe.currentAlignment.kind != Alignment.MESSAGE_ARGUMENTS) {
						arrayInitializerAlignment = this.scribe.createAlignment(
								Alignment.ARRAY_INITIALIZER,
								this.preferences.alignment_for_expressions_in_array_initializer,
								Alignment.R_OUTERMOST,
								0,
								this.scribe.scanner.currentPosition,
								this.preferences.continuation_indentation_for_array_initializer,
								true);
						this.scribe.enterAlignment(arrayInitializerAlignment);
					}
					do {
						try {
							if (insert_new_line_after_opening_brace) {
								this.scribe.printNewLine();
								this.scribe.indent();
							}
							// we don't need to use an alignment
							if (this.preferences.insert_space_after_opening_brace_in_array_initializer) {
								this.scribe.space();
							} else {
								this.scribe.needSpace = false;
							}
							expressions[0].traverse(this, scope);
							if (isNextToken(TerminalTokens.TokenNameCOMMA)) {
								this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);
								this.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);
							}
							if (insert_new_line_after_opening_brace) {
								this.scribe.unIndent();
							}
							ok = true;
						} catch (AlignmentException e) {
							if (arrayInitializerAlignment == null) throw e;
							this.scribe.redoAlignment(e);
						}
					} while (!ok);
					if (arrayInitializerAlignment != null) {
						this.scribe.exitAlignment(arrayInitializerAlignment, true);
					}
				}
				if (this.preferences.insert_new_line_before_closing_brace_in_array_initializer) {
					this.scribe.printNewLine();
				} else if (this.preferences.insert_space_before_closing_brace_in_array_initializer) {
					this.scribe.space();
				}
				this.scribe.printNextToken(TerminalTokens.TokenNameRBRACE, false, Scribe.PRESERVE_EMPTY_LINES_IN_CLOSING_ARRAY_INITIALIZER + (arrayInitializerIndentationLevel << 16));
				if (array_initializer_brace_position.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {
					this.scribe.unIndent();
				}
			} else {
				boolean keepEmptyArrayInitializerOnTheSameLine = this.preferences.keep_empty_array_initializer_on_one_line;
				String array_initializer_brace_position = this.preferences.brace_position_for_array_initializer;
				if (keepEmptyArrayInitializerOnTheSameLine) {
					this.scribe.printNextToken(TerminalTokens.TokenNameLBRACE, this.preferences.insert_space_before_opening_brace_in_array_initializer);
					if (isNextToken(TerminalTokens.TokenNameCOMMA)) {
						this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);
						this.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);
					}
					this.scribe.printNextToken(TerminalTokens.TokenNameRBRACE, this.preferences.insert_space_between_empty_braces_in_array_initializer);
				} else {
					formatOpeningBrace(array_initializer_brace_position, this.preferences.insert_space_before_opening_brace_in_array_initializer);
					if (isNextToken(TerminalTokens.TokenNameCOMMA)) {
						this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);
						this.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);
					}
					this.scribe.printNextToken(TerminalTokens.TokenNameRBRACE, this.preferences.insert_space_between_empty_braces_in_array_initializer);
					if (array_initializer_brace_position.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {
						this.scribe.unIndent();
					}
				}
			}
		} finally {
			this.arrayInitializersDepth--;
		}
		

		if (numberOfParens > 0) {
			manageClosingParenthesizedExpression(arrayInitializer, numberOfParens);
		}
		return false;
	}

