	@Override
	public boolean visit(SwitchStatement node) {
		handleBracedCode(node, node.getExpression(), this.options.brace_position_for_switch,
				this.options.indent_switchstatements_compare_to_switch, true);

		if (this.options.indent_switchstatements_compare_to_cases) {
			int openBraceIndex = this.tm.firstIndexIn(node, TokenNameLBRACE);
			this.tm.get(openBraceIndex + 1).indent();
			int closeBraceIndex = this.tm.lastIndexIn(node, TokenNameRBRACE);
			this.tm.get(closeBraceIndex).unindent();
		}

		boolean isBreakStatement = false;
		List<Statement> statements = node.statements();
		for (Statement statement : statements) {
			if (isBreakStatement) // actually, was break statement
				this.tm.firstTokenIn(statement, -1).indent();
			isBreakStatement = statement instanceof BreakStatement;
			if (this.options.indent_switchstatements_compare_to_cases
					&& (isBreakStatement || statement instanceof SwitchCase || statement instanceof Block)) {
				unindent(statement);
			}
			if (statement instanceof Block)
				continue; // will add break in visit(Block) if necessary
			if (this.options.put_empty_statement_on_new_line || !(statement instanceof EmptyStatement))
				breakLineBefore(statement);
			if (isBreakStatement) {
				if (this.options.indent_breaks_compare_to_cases)
					indent(statement);
				this.tm.firstTokenAfter(statement, -1).unindent();
			}
		}
		if (isBreakStatement) // actually, was break statement
			this.tm.lastTokenIn(node, -1).indent();

		return true;
	}

