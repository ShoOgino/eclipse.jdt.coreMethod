	public boolean visit(EnumConstantDeclaration node) {
        this.scribe.printComment();
        final int line = this.scribe.line; 
        
        final List modifiers = node.modifiers();
        if (modifiers.size() != 0) {
            this.scribe.printModifiers(modifiers, this);
            this.scribe.space();
        }
		this.scribe.printNextToken(TerminalTokens.TokenNameIdentifier);
		if (isNextToken(TerminalTokens.TokenNameLPAREN)) {
			this.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_enum_constant);
			final List arguments = node.arguments();
			final int argumentsLength = arguments.size();
			if (argumentsLength != 0) {
				Alignment2 argumentsAlignment = this.scribe.createAlignment(
						"enumConstantArguments",//$NON-NLS-1$
						this.preferences.alignment_for_arguments_in_enum_constant,
						argumentsLength,
						this.scribe.scanner.currentPosition);
				this.scribe.enterAlignment(argumentsAlignment);
				boolean ok = false;
				do {
					try {
						if (this.preferences.insert_space_after_opening_paren_in_enum_constant) {
							this.scribe.space();
						}
						for (int i = 0; i < argumentsLength; i++) {
							if (i > 0) {
								this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_enum_constant_arguments);
								this.scribe.printTrailingComment();
							}
							this.scribe.alignFragment(argumentsAlignment, i);
							if (i > 0 && this.preferences.insert_space_after_comma_in_enum_constant_arguments) {
								this.scribe.space();
							}
							((Expression) arguments.get(i)).accept(this);
						}
						ok = true;
					} catch (AlignmentException e) {
						this.scribe.redoAlignment(e);
					}
				} while (!ok);
				this.scribe.exitAlignment(argumentsAlignment, true);
			
				this.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_enum_constant); 
			} else {
				this.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_between_empty_parens_in_enum_constant); 
			}
		}

		final AnonymousClassDeclaration anonymousClassDeclaration = node.getAnonymousClassDeclaration();
		if (anonymousClassDeclaration != null) {
			final List bodyDeclarations = anonymousClassDeclaration.bodyDeclarations();
			String enum_constant_brace = this.preferences.brace_position_for_enum_constant;
			
	        formatLeftCurlyBrace(line, enum_constant_brace);
			formatTypeOpeningBrace(enum_constant_brace, this.preferences.insert_space_before_opening_brace_in_enum_constant, bodyDeclarations.size() != 0, node);
			
			if (this.preferences.indent_body_declarations_compare_to_enum_constant_header) {
				this.scribe.indent();
			}

			formatTypeMembers(bodyDeclarations, true);

			if (this.preferences.indent_body_declarations_compare_to_enum_constant_header) {
				this.scribe.unIndent();
			}
			
			if (this.preferences.insert_new_line_in_empty_enum_constant) {
				this.scribe.printNewLine();
			}
			this.scribe.printNextToken(TerminalTokens.TokenNameRBRACE);
			if (enum_constant_brace.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {
				this.scribe.unIndent();
			}
			if (hasComments()) {
				this.scribe.printNewLine();
			}
		}
		return false;
	}

