	public boolean visit(TryStatement node) {

		this.scribe.printNextToken(TerminalTokens.TokenNametry);
		node.getBody().accept(this);
		final List catchClauses = node.catchClauses();
		final int catchClausesLength = catchClauses.size();
		if (catchClausesLength != 0) {
			for (int i = 0; i < catchClausesLength; i++) {
				if (this.preferences.insert_new_line_before_catch_in_try_statement) {
					this.scribe.printNewLine();
				}	
				this.scribe.printNextToken(TerminalTokens.TokenNamecatch, this.preferences.insert_space_after_closing_brace_in_block);
				final int line = this.scribe.line;
				this.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_catch);
				
				if (this.preferences.insert_space_after_opening_paren_in_catch) {
					this.scribe.space();
				}
				
				final CatchClause catchClause = ((CatchClause) catchClauses.get(i));
				catchClause.getException().accept(this);
			
				this.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_catch);
				
				formatLeftCurlyBrace(line, this.preferences.brace_position_for_block);
				catchClause.getBody().accept(this);
			}
		}
		final Block finallyBlock = node.getFinally();
		if (finallyBlock != null) {
			if (this.preferences.insert_new_line_before_finally_in_try_statement) {
				this.scribe.printNewLine();
			}	
			this.scribe.printNextToken(TerminalTokens.TokenNamefinally, this.preferences.insert_space_after_closing_brace_in_block);
			finallyBlock.accept(this);
		}
		return false;
	}

