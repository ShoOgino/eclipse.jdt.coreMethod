	/**
	 * @see org.eclipse.jdt.internal.compiler.IAbstractSyntaxTreeVisitor#visit(org.eclipse.jdt.internal.compiler.ast.DoStatement, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
	 */
	public boolean visit(DoStatement doStatement, BlockScope scope) {

		this.scribe.printNextToken(ITerminalSymbols.TokenNamedo);
		
		final Statement action = doStatement.action;
		if (action != null) {
			if (action instanceof Block) {
				action.traverse(this, scope);
			} else {
				this.scribe.printNewLine();
				this.scribe.indent();
				action.traverse(this, scope);
				this.scribe.unIndent();
				this.scribe.printTrailingComment();
				this.scribe.printNewLine();
			}
			if (action instanceof Expression) {
				this.scribe.printNextToken(ITerminalSymbols.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);
				this.scribe.printTrailingComment();
				this.scribe.printNewLine();
			} else if (action instanceof Block && this.preferences.insert_new_line_in_control_statements) {
				this.scribe.printTrailingComment();
			}
		} else {
			this.scribe.indent();
			/*
			 * This is an empty statement
			 */
			formatEmptyStatement(); 
			this.scribe.unIndent();
		}
		
		this.scribe.printNextToken(ITerminalSymbols.TokenNamewhile, this.preferences.insert_space_after_block_close_brace);
		this.scribe.printNextToken(ITerminalSymbols.TokenNameLPAREN, this.preferences.insert_space_before_while_condition);
		
		if (this.preferences.insert_space_in_while_condition) {
			this.scribe.space();
		}
		
		doStatement.condition.traverse(this, scope);
		
		this.scribe.printNextToken(ITerminalSymbols.TokenNameRPAREN, this.preferences.insert_space_in_while_condition);
		this.scribe.printNextToken(ITerminalSymbols.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);
		return false;
	}

