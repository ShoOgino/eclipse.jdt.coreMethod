	public boolean visit(MethodDeclaration node) {
        /*
         * Print comments to get proper line number
         */
        this.scribe.printComment();
        final int line = this.scribe.line;
        
        final List modifiers = node.modifiers();
        final int modifiersLength = modifiers.size();
        if (modifiersLength != 0) {
        	this.scribe.printModifiers(modifiers, this);
        	this.scribe.space();
        }
		
        final List typeParameters = node.typeParameters();
        final int typeParametersLength = typeParameters.size();
		if (typeParametersLength != 0) {
			this.scribe.printNextToken(TerminalTokens.TokenNameLESS, this.preferences.insert_space_before_opening_angle_bracket_in_type_parameters); 
			if (this.preferences.insert_space_after_opening_angle_bracket_in_type_parameters) {
				this.scribe.space();
			}
			for (int i = 0; i < typeParametersLength - 1; i++) {
				((TypeParameter) typeParameters.get(i)).accept(this);
				this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_type_parameters);
				if (this.preferences.insert_space_after_comma_in_type_parameters) {
					this.scribe.space();
				}				
			}
			((TypeParameter) typeParameters.get(typeParametersLength - 1)).accept(this);
			if (isClosingGenericToken()) {
				this.scribe.printNextToken(CLOSING_GENERICS_EXPECTEDTOKENS, this.preferences.insert_space_before_closing_angle_bracket_in_type_parameters); 
			}
			if (this.preferences.insert_space_after_closing_angle_bracket_in_type_parameters) {
				this.scribe.space();
			}
		}
		
		final Type returnType = node.getReturnType2();
		if (returnType != null) {
			returnType.accept(this);
		}
		/*
		 * Print the method name
		 */
		this.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true); 

		this.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_method_declaration); 
		
		final List parameters = node.parameters();
		final int parametersLength = parameters.size();
		if (parametersLength != 0) {
			if (this.preferences.insert_space_after_opening_paren_in_method_declaration) {
				this.scribe.space();
			}
			Alignment2 parametersAlignment = this.scribe.createAlignment(
					"methodParameters",//$NON-NLS-1$
					this.preferences.alignment_for_parameters_in_method_declaration,
					parametersLength,
					this.scribe.scanner.currentPosition);
			this.scribe.enterAlignment(parametersAlignment);
			boolean ok = false;
			do {
				try {
					for (int i = 0; i < parametersLength; i++) {
						if (i > 0) {
							this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_method_declaration_parameters);
							this.scribe.printTrailingComment();
						}
						this.scribe.alignFragment(parametersAlignment, i);
						if (i > 0 && this.preferences.insert_space_after_comma_in_method_declaration_parameters) {
							this.scribe.space();
						}
						((SingleVariableDeclaration) parameters.get(i)).accept(this);
					}
					ok = true;
				} catch (AlignmentException e) {
					this.scribe.redoAlignment(e);
				}
			} while (!ok);
			this.scribe.exitAlignment(parametersAlignment, true);
		
			this.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_method_declaration); 
		} else {
			this.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_between_empty_parens_in_method_declaration); 
		}
		/*
		 * Check for extra dimensions
		 */
		final int extraDimensions = node.getExtraDimensions();
		if (extraDimensions != 0) {
			 for (int i = 0; i < extraDimensions; i++) {
			 	this.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);
			 	this.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);
			 }
		}
				
		final List thrownExceptions = node.thrownExceptions();
		final int thrownExceptionsLength = thrownExceptions.size();
		if (thrownExceptionsLength != 0) {
			Alignment2 throwsAlignment = this.scribe.createAlignment(
					"throws",//$NON-NLS-1$
					node.isConstructor()
						? this.preferences.alignment_for_throws_clause_in_constructor_declaration
						: this.preferences.alignment_for_throws_clause_in_method_declaration,
					thrownExceptionsLength, // throws is the first token
					this.scribe.scanner.currentPosition);
		
			this.scribe.enterAlignment(throwsAlignment);
			boolean ok = false;
			do {
				try {
					this.scribe.alignFragment(throwsAlignment, 0);
					this.scribe.printNextToken(TerminalTokens.TokenNamethrows, true); 
		
					for (int i = 0; i < thrownExceptionsLength; i++) {
						if (i > 0) {
							this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_method_declaration_throws);
							this.scribe.printTrailingComment();
							this.scribe.alignFragment(throwsAlignment, i);
							if (this.preferences.insert_space_after_comma_in_method_declaration_throws) {
								this.scribe.space();
							}
						} else {
							this.scribe.space();
						}
						((Name) thrownExceptions.get(i)).accept(this);
					}
					ok = true;
				} catch (AlignmentException e) {
					this.scribe.redoAlignment(e);
				}
			} while (!ok);
			this.scribe.exitAlignment(throwsAlignment, true);
		}

		final Block body = node.getBody();
		if (body != null) {
			/*
			 * Method body
			 */
			String method_declaration_brace = this.preferences.brace_position_for_method_declaration;
            formatLeftCurlyBrace(line, method_declaration_brace);
			formatOpeningBrace(method_declaration_brace, this.preferences.insert_space_before_opening_brace_in_method_declaration);
			final int numberOfBlankLinesAtBeginningOfMethodBody = this.preferences.blank_lines_at_beginning_of_method_body;
			if (numberOfBlankLinesAtBeginningOfMethodBody > 0) {
				this.scribe.printEmptyLines(numberOfBlankLinesAtBeginningOfMethodBody);
			}
			final List statements = body.statements();
			final int statementsLength = statements.size();
			if (statementsLength != 0) {
				this.scribe.printNewLine();
				if (this.preferences.indent_statements_compare_to_body) {
					this.scribe.indent();
				}
				formatStatements(statements, true);
				this.scribe.printComment();
				if (this.preferences.indent_statements_compare_to_body) {
					this.scribe.unIndent();
				}
			} else if (this.preferences.insert_new_line_in_empty_method_body) {
				this.scribe.printNewLine();
				if (this.preferences.indent_statements_compare_to_body) {
					this.scribe.indent();
				}
				this.scribe.printComment();
				if (this.preferences.indent_statements_compare_to_body) {
					this.scribe.unIndent();
				}
			}
			this.scribe.printNextToken(TerminalTokens.TokenNameRBRACE);
			this.scribe.printTrailingComment();
			if (method_declaration_brace.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {
				this.scribe.unIndent();
			}
		} else {
			// no method body
			this.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);
			this.scribe.printTrailingComment();
		}
		return false;
	}

