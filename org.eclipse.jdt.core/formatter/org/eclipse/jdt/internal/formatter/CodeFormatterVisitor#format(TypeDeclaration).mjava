	private void format(TypeDeclaration typeDeclaration){
        /*
         * Print comments to get proper line number
         */
        this.scribe.printComment();
        final int line = this.scribe.line; 
        
        this.scribe.printModifiers(typeDeclaration.annotations, this);
		/*
		 * Type name
		 */
        switch(typeDeclaration.getKind()) {
        	case IGenericType.CLASS :
				this.scribe.printNextToken(TerminalTokens.TokenNameclass, true); 
        		break;
        	case IGenericType.INTERFACE :
				this.scribe.printNextToken(TerminalTokens.TokenNameinterface, true); 
        		break;
        	case IGenericType.ENUM :
				this.scribe.printNextToken(TerminalTokens.TokenNameenum, true); 
        		break;
        	case IGenericType.ANNOTATION_TYPE :
        		// TODO (olivier) need to be merged with format(AnnotationTypeDecl)
				this.scribe.printNextToken(TerminalTokens.TokenNameAT, this.preferences.insert_space_before_at_in_annotation_type_declaration);
				this.scribe.printNextToken(TerminalTokens.TokenNameinterface, this.preferences.insert_space_after_at_in_annotation_type_declaration); 
        		break;
        }
		this.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true); 

		TypeParameter[] typeParameters = typeDeclaration.typeParameters;
		if (typeParameters != null) {
			this.scribe.printNextToken(TerminalTokens.TokenNameLESS, this.preferences.insert_space_before_opening_angle_bracket_in_type_parameters); 
			if (this.preferences.insert_space_after_opening_angle_bracket_in_type_parameters) {
				this.scribe.space();
			}
			int length = typeParameters.length;
			for (int i = 0; i < length - 1; i++) {
				typeParameters[i].traverse(this, typeDeclaration.scope);
				this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_type_parameters);
				if (this.preferences.insert_space_after_comma_in_type_parameters) {
					this.scribe.space();
				}				
			}
			typeParameters[length - 1].traverse(this, typeDeclaration.scope);
			if (isClosingGenericToken()) {
				this.scribe.printNextToken(CLOSING_GENERICS_EXPECTEDTOKENS, this.preferences.insert_space_before_closing_angle_bracket_in_type_parameters); 
			}
			if (this.preferences.insert_space_after_closing_angle_bracket_in_type_parameters) {
				this.scribe.space();
			}
		}
		/* 
		 * Superclass 
		 */
		final TypeReference superclass = typeDeclaration.superclass;
		if (superclass != null) {
			Alignment superclassAlignment =this.scribe.createAlignment(
					"superclass", //$NON-NLS-1$
					this.preferences.alignment_for_superclass_in_type_declaration,
					2,
					this.scribe.scanner.currentPosition);
			this.scribe.enterAlignment(superclassAlignment);
			boolean ok = false;
			do {
				try {
					this.scribe.alignFragment(superclassAlignment, 0);
					this.scribe.printNextToken(TerminalTokens.TokenNameextends, true);
					this.scribe.alignFragment(superclassAlignment, 1);
					this.scribe.space();
					superclass.traverse(this, typeDeclaration.scope);
					ok = true;
				} catch (AlignmentException e) {
					this.scribe.redoAlignment(e);
				}
			} while (!ok);
			this.scribe.exitAlignment(superclassAlignment, true); 
		}

		/* 
		 * Super Interfaces 
		 */
		final TypeReference[] superInterfaces = typeDeclaration.superInterfaces;
		if (superInterfaces != null) {
			int alignment_for_superinterfaces;
			switch(typeDeclaration.getKind()) {
				case IGenericType.ENUM :
					alignment_for_superinterfaces = this.preferences.alignment_for_superinterfaces_in_enum_declaration;
					break;
				default:
					alignment_for_superinterfaces = this.preferences.alignment_for_superinterfaces_in_type_declaration;
					break;
			}
			int superInterfaceLength = superInterfaces.length;
			Alignment interfaceAlignment =this.scribe.createAlignment(
					"superInterfaces",//$NON-NLS-1$
					alignment_for_superinterfaces,
					superInterfaceLength+1,  // implements token is first fragment
					this.scribe.scanner.currentPosition);
			this.scribe.enterAlignment(interfaceAlignment);
			boolean ok = false;
			do {
				try {
					this.scribe.alignFragment(interfaceAlignment, 0);
					if (typeDeclaration.getKind() == IGenericType.INTERFACE) {
						this.scribe.printNextToken(TerminalTokens.TokenNameextends, true);
					} else  {
						this.scribe.printNextToken(TerminalTokens.TokenNameimplements, true);
					}
					for (int i = 0; i < superInterfaceLength; i++) {
						if (i > 0) {
							this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_superinterfaces);
							this.scribe.printTrailingComment();
							this.scribe.alignFragment(interfaceAlignment, i+1);
							if (this.preferences.insert_space_after_comma_in_superinterfaces) {
								this.scribe.space();
							}
							superInterfaces[i].traverse(this, typeDeclaration.scope);
						} else {
							this.scribe.alignFragment(interfaceAlignment, i+1);
							this.scribe.space();
							superInterfaces[i].traverse(this, typeDeclaration.scope);
						}
					}
					ok = true;
				} catch (AlignmentException e) {
					this.scribe.redoAlignment(e);
				}
			} while (!ok);
			this.scribe.exitAlignment(interfaceAlignment, true);
		}

		/*
		 * Type body
		 */
		String class_declaration_brace;
		boolean space_before_opening_brace;
		switch(typeDeclaration.getKind()) {
			case IGenericType.ENUM :
				class_declaration_brace = this.preferences.brace_position_for_enum_declaration;
				space_before_opening_brace = this.preferences.insert_space_before_opening_brace_in_enum_declaration;
				break;
			default:
				class_declaration_brace = this.preferences.brace_position_for_type_declaration;
				space_before_opening_brace = this.preferences.insert_space_before_opening_brace_in_type_declaration;
				break;
		}
        formatLeftCurlyBrace(line, class_declaration_brace);
		formatTypeOpeningBrace(class_declaration_brace, space_before_opening_brace, typeDeclaration);
		
		boolean indent_body_declarations_compare_to_header;
		switch(typeDeclaration.getKind()) {
			case IGenericType.ENUM :
				indent_body_declarations_compare_to_header = this.preferences.indent_body_declarations_compare_to_enum_declaration_header;
				break;
			default:
				indent_body_declarations_compare_to_header = this.preferences.indent_body_declarations_compare_to_type_header;
				break;
		}		
		if (indent_body_declarations_compare_to_header) {
			this.scribe.indent();
		}
		
		if (typeDeclaration.getKind() == IGenericType.ENUM) {
			FieldDeclaration[] fieldDeclarations = typeDeclaration.fields;
			if (fieldDeclarations != null) {
				int length = fieldDeclarations.length;
				loop: for (int i = 0; i < length; i++) {
					FieldDeclaration fieldDeclaration = fieldDeclarations[i];
					if (fieldDeclaration.getKind() != AbstractVariableDeclaration.ENUM_CONSTANT) {
						break loop;
					}
					if (i < length) {
						fieldDeclaration.traverse(this, typeDeclaration.initializerScope);
					}
					if (isNextToken(TerminalTokens.TokenNameCOMMA)) {
						this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_enum_declarations);
						if (this.preferences.insert_space_after_comma_in_enum_declarations) {
							this.scribe.space();
						}
						this.scribe.printTrailingComment();
					}
				}
				this.scribe.printNewLine();				
			}
			if (isNextToken(TerminalTokens.TokenNameSEMICOLON)) {
				this.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);
				this.scribe.printTrailingComment();
			}
		}

		formatTypeMembers(typeDeclaration);

		this.scribe.printComment();
		
		if (indent_body_declarations_compare_to_header) {
			this.scribe.unIndent();
		}
		
		switch(typeDeclaration.getKind()) {
			case IGenericType.ENUM :
				if (this.preferences.insert_new_line_in_empty_enum_declaration) {
					this.scribe.printNewLine();
				}
				break;
			default :
				if (this.preferences.insert_new_line_in_empty_type_declaration) {
					this.scribe.printNewLine();
				}
		}
		this.scribe.printNextToken(TerminalTokens.TokenNameRBRACE);
		this.scribe.printTrailingComment();
		if (class_declaration_brace.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {
			this.scribe.unIndent();
		}
		if (hasComments()) {
			this.scribe.printNewLine();
		}
	}

