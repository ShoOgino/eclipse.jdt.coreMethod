	private int useAlignmentBreakIndentation(int emptyLinesRules) {
		// preserve line breaks in wrapping if specified
		// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=198074
		boolean specificEmptyLinesRule = emptyLinesRules != PRESERVE_EMPTY_LINES_KEEP_LAST_NEW_LINES_INDENTATION;
		if ((this.currentAlignment != null || specificEmptyLinesRule) && !this.formatter.preferences.join_wrapped_lines) {
			// insert a new line only if it has not been already done before
			// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=283476
			if (this.lastNumberOfNewLines == 0 || specificEmptyLinesRule || this.formatter.arrayInitializersDepth >= 0) {
				
				// Do not use alignment break indentation in specific circumstances
				boolean useAlignmentBreakIndentation;
				boolean useAlignmentShiftBreakIndentation = false;
				boolean useLastBinaryExpressionAlignmentBreakIndentation = false;
				switch (emptyLinesRules) {
					case DO_NOT_PRESERVE_EMPTY_LINES:
					case PRESERVE_EMPTY_LINES_IN_SWITCH_CASE:
					case PRESERVE_EMPTY_LINES_AT_END_OF_METHOD_DECLARATION:
					case PRESERVE_EMPTY_LINES_AT_END_OF_BLOCK:
						return PRESERVE_EMPTY_LINES_DO_NOT_USE_ANY_INDENTATION;
					case PRESERVE_EMPTY_LINES_IN_BINARY_EXPRESSION:
						useAlignmentBreakIndentation = true;
						if ((this.formatter.expressionsPos & CodeFormatterVisitor.EXPRESSIONS_POS_MASK) == CodeFormatterVisitor.EXPRESSIONS_POS_BETWEEN_TWO) {
							// we're just before the left expression, try to use the last
							// binary expression break indentation if any
							useLastBinaryExpressionAlignmentBreakIndentation = true;
						}
						break;
					case PRESERVE_EMPTY_LINES_IN_EQUALITY_EXPRESSION:
						useAlignmentShiftBreakIndentation = this.currentAlignment == null || this.currentAlignment.kind == Alignment.BINARY_EXPRESSION;
						useAlignmentBreakIndentation = !useAlignmentShiftBreakIndentation;
						break;
					case PRESERVE_EMPTY_LINES_IN_FORMAT_OPENING_BRACE:
						useAlignmentBreakIndentation = this.formatter.arrayInitializersDepth <= 1
							&& this.currentAlignment != null
							&& this.currentAlignment.kind == Alignment.ARRAY_INITIALIZER;
						break;
					case PRESERVE_EMPTY_LINES_IN_FORMAT_LEFT_CURLY_BRACE:
						useAlignmentBreakIndentation = false;
						break;
					default:
						if ((emptyLinesRules & 0xFFFF) == PRESERVE_EMPTY_LINES_IN_CLOSING_ARRAY_INITIALIZER && this.scanner.currentCharacter == '}' ) {
							// last array initializer closing brace
							this.indentationLevel = emptyLinesRules >> 16;
							this.preserveLineBreakIndentation = true;
							return PRESERVE_EMPTY_LINES_USE_CURRENT_INDENTATION;
						}
						useAlignmentBreakIndentation = true;
						break;
				}

				// If there's an alignment try to align on its break indentation level
				Alignment alignment = this.currentAlignment;
				if (alignment == null) {
					if (useLastBinaryExpressionAlignmentBreakIndentation) {
						if (this.indentationLevel < this.formatter.lastBinaryExpressionAlignmentBreakIndentation) {
							this.indentationLevel = this.formatter.lastBinaryExpressionAlignmentBreakIndentation;
						}
					}
					if (useAlignmentShiftBreakIndentation && this.memberAlignment != null) {
						if (this.indentationLevel < this.memberAlignment.shiftBreakIndentationLevel) {
							this.indentationLevel = this.memberAlignment.shiftBreakIndentationLevel;
						}
					}
				} else {
					// Use the member alignment break indentation level when
					// it's closer from the wrapped line than the current alignment
					if (this.memberAlignment != null && this.memberAlignment.location.inputOffset > alignment.location.inputOffset) {
						alignment = this.memberAlignment;
					}

					// Use the break indentation level if possible...
					if (useLastBinaryExpressionAlignmentBreakIndentation) {
						if (this.indentationLevel < this.formatter.lastBinaryExpressionAlignmentBreakIndentation) {
							this.indentationLevel = this.formatter.lastBinaryExpressionAlignmentBreakIndentation;
						}
					}
					if (useAlignmentBreakIndentation) {
						if (this.indentationLevel < alignment.breakIndentationLevel) {
							this.indentationLevel = alignment.breakIndentationLevel;
						}
					} else if (useAlignmentShiftBreakIndentation) {
						if (this.indentationLevel < alignment.shiftBreakIndentationLevel) {
							this.indentationLevel = alignment.shiftBreakIndentationLevel;
						}
					}
				}
				this.preserveLineBreakIndentation = true;
				if (useLastBinaryExpressionAlignmentBreakIndentation || useAlignmentShiftBreakIndentation) {
					return PRESERVE_EMPTY_LINES_USE_TEMPORARY_INDENTATION;
				}
				return PRESERVE_EMPTY_LINES_USE_CURRENT_INDENTATION;
			}
		}
		return PRESERVE_EMPTY_LINES_DO_NOT_USE_ANY_INDENTATION;
	}

