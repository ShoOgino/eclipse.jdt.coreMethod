	public boolean visit(PrefixExpression node) {
		int operator;
		boolean insertSpaceBeforeOperator;
		boolean insertSpaceAfterOperator;
		final Operator operator2 = node.getOperator();
		if (operator2 == PrefixExpression.Operator.INCREMENT) {
			operator = TerminalTokens.TokenNamePLUS_PLUS;
			insertSpaceBeforeOperator = this.preferences.insert_space_before_prefix_operator;
			insertSpaceAfterOperator = this.preferences.insert_space_after_prefix_operator;
		} else if (operator2 == PrefixExpression.Operator.DECREMENT) {
			operator = TerminalTokens.TokenNameMINUS_MINUS;
			insertSpaceBeforeOperator = this.preferences.insert_space_before_prefix_operator;
			insertSpaceAfterOperator = this.preferences.insert_space_after_prefix_operator;
		} else if (operator2 == PrefixExpression.Operator.COMPLEMENT) {
			operator = TerminalTokens.TokenNameTWIDDLE;
			insertSpaceBeforeOperator = this.preferences.insert_space_before_unary_operator;
			insertSpaceAfterOperator = this.preferences.insert_space_after_unary_operator;
		} else if (operator2 == PrefixExpression.Operator.MINUS) {
			operator = TerminalTokens.TokenNameMINUS;
			insertSpaceBeforeOperator = this.preferences.insert_space_before_unary_operator;
			insertSpaceAfterOperator = this.preferences.insert_space_after_unary_operator;
		} else if (operator2 == PrefixExpression.Operator.NOT) {
			operator = TerminalTokens.TokenNameNOT;
			insertSpaceBeforeOperator = this.preferences.insert_space_before_unary_operator;
			insertSpaceAfterOperator = this.preferences.insert_space_after_unary_operator;
		} else {
			operator = TerminalTokens.TokenNamePLUS;
			insertSpaceBeforeOperator = this.preferences.insert_space_before_unary_operator;
			insertSpaceAfterOperator = this.preferences.insert_space_after_unary_operator;
		}

		this.scribe.printNextToken(operator, insertSpaceBeforeOperator);
		if (insertSpaceAfterOperator) {
			this.scribe.space();
		}
		node.getOperand().accept(this);
		return false;
	}

