/** 
 * Initializing the formatter options with external settings
 */
public FormatterOptions(Map settings){
	if (settings == null) return;

	// filter options which are related to the assist component
	Object[] entries = settings.entrySet().toArray();
	for (int i = 0, max = entries.length; i < max; i++){
		Map.Entry entry = (Map.Entry)entries[i];
		if (!(entry.getKey() instanceof String)) continue;
		if (!(entry.getValue() instanceof String)) continue;
		String optionID = (String) entry.getKey();
		String optionValue = (String) entry.getValue();
		
		if(optionID.equals(OPTION_InsertNewlineBeforeOpeningBrace)){
			if (optionValue.equals(INSERT)){
				this.newLineBeforeOpeningBraceMode = true;
			} else if (optionValue.equals(DO_NOT_INSERT)){
				this.newLineBeforeOpeningBraceMode = false;
			}
			continue;
		}
		if(optionID.equals(OPTION_InsertNewlineInControlStatement)){
			if (optionValue.equals(INSERT)){
				this.newlineInControlStatementMode = true;
			} else if (optionValue.equals(DO_NOT_INSERT)){
				this.newlineInControlStatementMode = false;
			}
			continue;
		}
		if(optionID.equals(OPTION_ClearAllBlankLines)){
			if (optionValue.equals(CLEAR_ALL)){
				this.clearAllBlankLinesMode = true;
			} else if (optionValue.equals(PRESERVE_ONE)){
				this.clearAllBlankLinesMode = false;
			}
			continue;
		}
		if(optionID.equals(OPTION_InsertNewLineBetweenElseAndIf)){
			if (optionValue.equals(INSERT)){
				this.compactElseIfMode = false;
			} else if (optionValue.equals(DO_NOT_INSERT)){
				this.compactElseIfMode = true;
			}
			continue;
		}
		if(optionID.equals(OPTION_InsertNewLineInEmptyBlock)){
			if (optionValue.equals(INSERT)){
				this.newLineInEmptyBlockMode = true;
			} else if (optionValue.equals(DO_NOT_INSERT)){
				this.newLineInEmptyBlockMode = false;
			}
			continue;
		}
		if(optionID.equals(OPTION_SplitLineExceedingLength)){
			try {
				int val = Integer.parseInt(optionValue);
				if (val >= 0) this.maxLineLength = val;
			} catch(NumberFormatException e){
			}
		}
		if(optionID.equals(OPTION_CompactAssignment)){
			if (optionValue.equals(COMPACT)){
				this.compactAssignmentMode = true;
			} else if (optionValue.equals(NORMAL)){
				this.compactAssignmentMode = false;
			}
			continue;
		}
		if(optionID.equals(OPTION_TabulationChar)){
			if (optionValue.equals(TAB)){
				this.indentWithTab = true;
			} else if (optionValue.equals(SPACE)){
				this.indentWithTab = false;
			}
			continue;
		}
		if(optionID.equals(OPTION_TabulationSize)){
			try {
				int val = Integer.parseInt(optionValue);
				if (val > 0) this.tabSize = val;
			} catch(NumberFormatException e){
			}
		}
	}
}

