/**
 * Change the value of the option corresponding to the option number
 *
 * @param optionNumber <CODE>int</CODE>
 * @param newValue <CODE>int</CODE>
 */
public void setOption(ConfigurableOption setting) {
	String componentName = CodeFormatter.class.getName();
	
	String optionID = setting.getID();
	
	if(optionID.equals(componentName+".newlineOpeningBrace"/*nonNLS*/)){
		setNewLineBeforeOpeningBraceMode(setting.getValueIndex() == 0);
	}else if(optionID.equals(componentName+".newlineControlStatement"/*nonNLS*/)){
		setNewlineInControlStatementMode(setting.getValueIndex() == 0);
	}else if(optionID.equals(componentName+".newlineClearAll"/*nonNLS*/)){
		setClearAllBlankLinesMode(setting.getValueIndex() == 0);
	}else if(optionID.equals(componentName+".newlineElseIf"/*nonNLS*/)){
		setCompactElseIfMode(setting.getValueIndex() == 0);
	}else if(optionID.equals(componentName+".newlineEmptyBlock"/*nonNLS*/)){
		setNewLineInEmptyBlockMode(setting.getValueIndex() == 0);
	}else if(optionID.equals(componentName+".lineSplit"/*nonNLS*/)){
		try {
			setMaxLineLength(Integer.parseInt(setting.getValue()));
		} catch(NumberFormatException e){
		}
	}else if(optionID.equals(componentName+".compactAssignment"/*nonNLS*/)){
		setCompactAssignmentMode(setting.getValueIndex() == 0);
	}else if(optionID.equals(componentName+".tabulationChar"/*nonNLS*/)){
		setIndentationUsesTab(setting.getValueIndex() == 0);
	}else if(optionID.equals(componentName+".tabulationSize"/*nonNLS*/)){
		try {
			setTabSize(Integer.parseInt(setting.getValue()));
		} catch(NumberFormatException e){
		}
	}
}

