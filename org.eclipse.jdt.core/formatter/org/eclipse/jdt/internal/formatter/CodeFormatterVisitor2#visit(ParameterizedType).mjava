	public boolean visit(ParameterizedType node) {
		node.getType().accept(this);
		this.scribe.printNextToken(TerminalTokens.TokenNameLESS, this.preferences.insert_space_before_opening_angle_bracket_in_parameterized_type_reference);
		if (this.preferences.insert_space_after_opening_angle_bracket_in_parameterized_type_reference) {
			this.scribe.space();
		}
		final List typeArguments = node.typeArguments();
		final int typeArgumentsLength = typeArguments.size();
		for (int i = 0; i < typeArgumentsLength - 1; i++) {
			((Type) typeArguments.get(i)).accept(this);
			this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_parameterized_type_reference);
			if (this.preferences.insert_space_after_comma_in_parameterized_type_reference) {
				this.scribe.space();
			}			
		}
		((Type) typeArguments.get(typeArgumentsLength - 1)).accept(this);
		if (isClosingGenericToken()) {
			this.scribe.printNextToken(CLOSING_GENERICS_EXPECTEDTOKENS, this.preferences.insert_space_before_closing_angle_bracket_in_parameterized_type_reference);
		}
		return false;
	}

