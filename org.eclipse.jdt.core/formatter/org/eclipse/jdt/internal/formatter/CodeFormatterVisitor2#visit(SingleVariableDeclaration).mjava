	public boolean visit(SingleVariableDeclaration node) {
		final List modifiers = node.modifiers();
		if (modifiers.size() != 0) {
			this.scribe.printModifiers(modifiers, this);
			this.scribe.space();
		}

		node.getType().accept(this);
		
		// single field declaration
		this.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true);
		final int extraDimensions = node.getExtraDimensions();
		if (extraDimensions != 0) {
			for (int i = 0; i < extraDimensions; i++) {
				this.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);
				this.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);
			}
		}
		final Expression initialization = node.getInitializer();
		if (initialization != null) {
			this.scribe.printNextToken(TerminalTokens.TokenNameEQUAL, this.preferences.insert_space_before_assignment_operator);
			if (this.preferences.insert_space_after_assignment_operator) {
				this.scribe.space();
			}
			Alignment2 assignmentAlignment = this.scribe.createAlignment("localDeclarationAssignmentAlignment", this.preferences.alignment_for_assignment, Alignment.R_OUTERMOST, 1, this.scribe.scanner.currentPosition); //$NON-NLS-1$
			this.scribe.enterAlignment(assignmentAlignment);
			boolean ok = false;
			do {
				try {
					this.scribe.alignFragment(assignmentAlignment, 0);
					initialization.accept(this);
					ok = true;
				} catch(AlignmentException e){
					this.scribe.redoAlignment(e);
				}
			} while (!ok);		
			this.scribe.exitAlignment(assignmentAlignment, true);			
		}
		return false;
	}

