	/**
	 * @see org.eclipse.jdt.internal.compiler.IAbstractSyntaxTreeVisitor#visit(org.eclipse.jdt.internal.compiler.ast.TryStatement, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
	 */
	public boolean visit(TryStatement tryStatement, BlockScope scope) {

		this.scribe.printNextToken(TerminalTokens.TokenNametry);
		tryStatement.tryBlock.traverse(this, scope);
		if (this.preferences.insert_new_line_in_control_statements) {
			this.scribe.printNewLine();
		}	
		if (tryStatement.catchArguments != null) {
			for (int i = 0, max = tryStatement.catchBlocks.length; i < max; i++) {
				this.scribe.printNextToken(TerminalTokens.TokenNamecatch, this.preferences.insert_space_after_block_close_brace);
				this.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_catch_expression);
				
				if (this.preferences.insert_space_in_catch_expression) {
					this.scribe.space();
				}
				
				tryStatement.catchArguments[i].traverse(this, scope);
			
				this.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_in_catch_expression);
				
				tryStatement.catchBlocks[i].traverse(this, scope);
				if (this.preferences.insert_new_line_in_control_statements) {
					this.scribe.printNewLine();
				}	
			}
		}
		if (tryStatement.finallyBlock != null) {
			this.scribe.printNextToken(TerminalTokens.TokenNamefinally, this.preferences.insert_space_after_block_close_brace);
			tryStatement.finallyBlock.traverse(this, scope);
		}
		return false;
	}

