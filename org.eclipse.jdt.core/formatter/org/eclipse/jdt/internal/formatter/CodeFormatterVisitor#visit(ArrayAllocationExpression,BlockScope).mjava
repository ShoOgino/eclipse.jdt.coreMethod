	/**
	 * @see org.eclipse.jdt.internal.compiler.ASTVisitor#visit(org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
	 */
	public boolean visit(
		ArrayAllocationExpression arrayAllocationExpression,
		BlockScope scope) {

			final int numberOfParens = (arrayAllocationExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;
			if (numberOfParens > 0) {
				manageOpeningParenthesizedExpression(arrayAllocationExpression, numberOfParens);
			}
			this.scribe.printNextToken(TerminalTokens.TokenNamenew);
			this.scribe.space();
			arrayAllocationExpression.type.traverse(this, scope);
			
			if (isNextToken(TerminalTokens.TokenNameLBRACKET)) {
				final Expression[] dimensions = arrayAllocationExpression.dimensions;
				int dimensionsLength = dimensions.length;
				for (int i = 0; i < dimensionsLength; i++) {
					if (this.preferences.insert_space_before_opening_bracket_in_array_allocation_expression) {
						this.scribe.space();
					}
					this.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET, false);
					if (dimensions[i] != null) {
						if (this.preferences.insert_space_after_opening_bracket_in_array_allocation_expression) {
							this.scribe.space();
						}
						dimensions[i].traverse(this, scope);
						this.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET, this.preferences.insert_space_before_closing_bracket_in_array_allocation_expression);
					} else {
						this.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET, this.preferences.insert_space_between_empty_brackets_in_array_allocation_expression);
					}
				}
			}
			final ArrayInitializer initializer = arrayAllocationExpression.initializer;
			if (initializer != null) {
				initializer.traverse(this, scope);
			}

			if (numberOfParens > 0) {
				manageClosingParenthesizedExpression(arrayAllocationExpression, numberOfParens);
			}
			return false;
	}

