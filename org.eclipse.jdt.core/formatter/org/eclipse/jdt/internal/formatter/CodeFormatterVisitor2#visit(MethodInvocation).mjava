	public boolean visit(MethodInvocation node) {
		MethodInvocationFragmentBuilder builder = new MethodInvocationFragmentBuilder();
		node.accept(builder);
		
		final List fragments = builder.fragments();
		final int fragmentsLength = fragments.size();
		if (fragmentsLength >= 3) {
			// manage cascading method invocations
			// check the first fragment
			final Expression firstFragment = (Expression) fragments.get(0);
			switch(firstFragment.getNodeType()) {
				case ASTNode.METHOD_INVOCATION :
					formatSingleMethodInvocation((MethodInvocation) firstFragment);
					break;
				default:
					firstFragment.accept(this);
			}
			Alignment2 cascadingMessageSendAlignment =
				this.scribe.createAlignment(
					"cascadingMessageSendAlignment", //$NON-NLS-1$
					this.preferences.alignment_for_selector_in_method_invocation,
					Alignment.R_INNERMOST,
					fragmentsLength,
					this.scribe.scanner.currentPosition);
			this.scribe.enterAlignment(cascadingMessageSendAlignment);
			boolean ok = false;
			do {
				try {
					this.scribe.alignFragment(cascadingMessageSendAlignment, 0);
					this.scribe.printNextToken(TerminalTokens.TokenNameDOT);
					for (int i = 1; i < fragmentsLength - 1; i++) {
						MethodInvocation  currentMethodInvocation = (MethodInvocation) fragments.get(i);
						formatSingleMethodInvocation(currentMethodInvocation);
						this.scribe.alignFragment(cascadingMessageSendAlignment, i);
						this.scribe.printNextToken(TerminalTokens.TokenNameDOT);
					}
					MethodInvocation  currentMethodInvocation = (MethodInvocation) fragments.get(fragmentsLength - 1);
					formatSingleMethodInvocation(currentMethodInvocation);
					ok = true;
				} catch(AlignmentException e){
					this.scribe.redoAlignment(e);
				}
			} while (!ok);		
			this.scribe.exitAlignment(cascadingMessageSendAlignment, true);
		} else {
			Expression expression = node.getExpression();
			if (expression != null) {
				expression.accept(this);
				this.scribe.printNextToken(TerminalTokens.TokenNameDOT);
			}
			formatSingleMethodInvocation(node);			
		}
		return false;
	}

