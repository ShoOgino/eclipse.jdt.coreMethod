	public boolean visit(BinaryExpression binaryExpression, BlockScope scope) {
		if (buildFragments(binaryExpression)) {
			switch((binaryExpression.bits & EqualExpression.OperatorMASK) >> EqualExpression.OperatorSHIFT) {
				case OperatorIds.AND :
					this.operatorsList.add(new Integer(ITerminalSymbols.TokenNameAND));
					break;
				case OperatorIds.DIVIDE :
					this.operatorsList.add(new Integer(ITerminalSymbols.TokenNameDIVIDE));
					break;
				case OperatorIds.GREATER :
					this.operatorsList.add(new Integer(ITerminalSymbols.TokenNameGREATER));
					break;
				case OperatorIds.GREATER_EQUAL :
					this.operatorsList.add(new Integer(ITerminalSymbols.TokenNameGREATER_EQUAL));
					break;
				case OperatorIds.LEFT_SHIFT :
					this.operatorsList.add(new Integer(ITerminalSymbols.TokenNameLEFT_SHIFT));
					break;
				case OperatorIds.LESS :
					this.operatorsList.add(new Integer(ITerminalSymbols.TokenNameLESS));
					break;
				case OperatorIds.LESS_EQUAL :
					this.operatorsList.add(new Integer(ITerminalSymbols.TokenNameLESS_EQUAL));
					break;
				case OperatorIds.MINUS :
					this.operatorsList.add(new Integer(ITerminalSymbols.TokenNameMINUS));
					break;
				case OperatorIds.MULTIPLY :
					this.operatorsList.add(new Integer(ITerminalSymbols.TokenNameMULTIPLY));
					break;
				case OperatorIds.OR :
					this.operatorsList.add(new Integer(ITerminalSymbols.TokenNameOR));
					break;
				case OperatorIds.PLUS :
					this.operatorsList.add(new Integer(ITerminalSymbols.TokenNamePLUS));
					break;
				case OperatorIds.REMAINDER :
					this.operatorsList.add(new Integer(ITerminalSymbols.TokenNameREMAINDER));
					break;
				case OperatorIds.RIGHT_SHIFT :
					this.operatorsList.add(new Integer(ITerminalSymbols.TokenNameRIGHT_SHIFT));
					break;
				case OperatorIds.UNSIGNED_RIGHT_SHIFT :
					this.operatorsList.add(new Integer(ITerminalSymbols.TokenNameUNSIGNED_RIGHT_SHIFT));
					break;
				case OperatorIds.XOR :
					this.operatorsList.add(new Integer(ITerminalSymbols.TokenNameXOR));
			}
			return true;
		} else {
			return false;
		}
	}

