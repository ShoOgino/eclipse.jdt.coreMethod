	public boolean visit(BinaryExpression binaryExpression, BlockScope scope) {
		final int numberOfParens = (binaryExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;
		if (numberOfParens > 0) {
			this.addRealFragment(binaryExpression);
		} else {
			switch((binaryExpression.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT) {
				case OperatorIds.PLUS :
					if (buildFragments(binaryExpression)) {
						this.operatorsList.add(new Integer(TerminalTokens.TokenNamePLUS));
						return true;
					} else {
						return false;
					}
				case OperatorIds.MINUS :
					if (buildFragments(binaryExpression)) {
						this.operatorsList.add(new Integer(TerminalTokens.TokenNameMINUS));
						return true;
					} else {
						return false;
					}
				case OperatorIds.MULTIPLY :
					if (buildFragments(binaryExpression)) {
						this.operatorsList.add(new Integer(TerminalTokens.TokenNameMULTIPLY));
						return true;
					} else {
						return false;
					}
				case OperatorIds.REMAINDER :
					if (buildFragments(binaryExpression)) {
						this.operatorsList.add(new Integer(TerminalTokens.TokenNameREMAINDER));
						return true;
					} else {
						return false;
					}
				case OperatorIds.XOR :
					if (buildFragments(binaryExpression)) {
						this.operatorsList.add(new Integer(TerminalTokens.TokenNameXOR));
						return true;
					} else {
						return false;
					}
				case OperatorIds.DIVIDE :
					if (buildFragments(binaryExpression)) {
						this.operatorsList.add(new Integer(TerminalTokens.TokenNameDIVIDE));
						return true;
					} else {
						return false;
					}
				case OperatorIds.OR :
					if (buildFragments(binaryExpression)) {
						this.operatorsList.add(new Integer(TerminalTokens.TokenNameOR));
						return true;
					} else {
						return false;
					}
				case OperatorIds.AND :
					if (buildFragments(binaryExpression)) {
						this.operatorsList.add(new Integer(TerminalTokens.TokenNameAND));
						return true;
					} else {
						return false;
					}
				default:
					this.addRealFragment(binaryExpression);
			}
		}
		return false;
	}

