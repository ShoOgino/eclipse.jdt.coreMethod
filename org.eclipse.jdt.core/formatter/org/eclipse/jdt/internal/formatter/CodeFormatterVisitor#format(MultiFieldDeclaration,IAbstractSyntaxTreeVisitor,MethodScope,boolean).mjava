	private void format(MultiFieldDeclaration multiFieldDeclaration, IAbstractSyntaxTreeVisitor visitor, MethodScope scope, boolean isChunkStart) {

		int newLineBeforeChunk = isChunkStart ? this.preferences.blank_lines_before_new_chunk : 0;
		if (newLineBeforeChunk > 0) {
			this.scribe.printNewLines(newLineBeforeChunk);
		}
		final int newLinesBeforeField = this.preferences.blank_lines_before_field;
		if (newLinesBeforeField > 0) {
			this.scribe.printNewLines(newLinesBeforeField);
		}
		Alignment fieldAlignment = this.scribe.getAlignment("typeMembers");	//$NON-NLS-1$

		if (multiFieldDeclaration.declarations[0].modifiers != NO_MODIFIERS) {
			this.scribe.printModifiers();
		}
		this.scribe.alignFragment(fieldAlignment, 0);

		multiFieldDeclaration.declarations[0].type.traverse(this, scope);

		for (int i = 0, length = multiFieldDeclaration.declarations.length; i < length; i++) {
			FieldDeclaration fieldDeclaration = multiFieldDeclaration.declarations[i];
			/*
			 * Field name
			 */
			if (i == 0) {
				this.scribe.alignFragment(fieldAlignment, 1);
			}
			this.scribe.printNextToken(ITerminalSymbols.TokenNameIdentifier, true);
	
			/*
			 * Check for extra dimensions
			 */
			int extraDimensions = getExtraDimension();
			if (extraDimensions != 0) {
				 for (int index = 0; index < extraDimensions; index++) {
				 	this.scribe.printNextToken(ITerminalSymbols.TokenNameLBRACKET);
				 	this.scribe.printNextToken(ITerminalSymbols.TokenNameRBRACKET);
				 }
			}
		
			/*
			 * Field initialization
			 */
			if (fieldDeclaration.initialization != null) {
				if (i == 0) {
					this.scribe.alignFragment(fieldAlignment, 2);
				}
				this.scribe.printNextToken(ITerminalSymbols.TokenNameEQUAL, this.preferences.insert_space_before_assignment_operators);
				if (this.preferences.insert_space_after_assignment_operators) {
					this.scribe.space();
				}
				fieldDeclaration.initialization.traverse(this, scope);
			}
			
			if (i != length - 1) {
				if (i == 0 && fieldDeclaration.initialization == null) {
					this.scribe.alignFragment(fieldAlignment, 2);
				}				
				this.scribe.printNextToken(ITerminalSymbols.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_multiple_field_declarations);
				if (this.preferences.insert_space_after_comma_in_multiple_field_declarations) {
					this.scribe.space();
				}
			} else {
				this.scribe.printNextToken(ITerminalSymbols.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);
				
				this.scribe.alignFragment(fieldAlignment, 3);
				this.scribe.printTrailingComment();
				this.scribe.printNewLine();
			}
		}
		if (fieldAlignment != null) {
			this.scribe.exitAlignment(fieldAlignment, false);
		}
	}

