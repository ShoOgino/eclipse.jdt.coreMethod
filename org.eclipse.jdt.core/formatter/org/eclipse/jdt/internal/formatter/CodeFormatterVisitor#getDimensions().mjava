	private int getDimensions() {

		this.localScanner.resetTo(this.scribe.scanner.currentPosition, this.scribe.scannerEndPosition - 1);
		int dimensions = 0;
		int balance = 0;
		boolean inAnnotation = false;
		int parenBalance = 0; // for inline annotations
		try {
			int token;
			loop: while ((token = this.localScanner.getNextToken()) != TerminalTokens.TokenNameEOF) {
				switch(token) {
					case TerminalTokens.TokenNameRBRACKET:
						dimensions++;
						balance--;
						break;
					case TerminalTokens.TokenNameLPAREN:
						parenBalance++;
						break;
					case TerminalTokens.TokenNameRPAREN:
						if (! inAnnotation) break loop;
						if (--parenBalance == 0) inAnnotation = false;
						break;
					case TerminalTokens.TokenNameAT :
						inAnnotation = true;
						break;
					case TerminalTokens.TokenNameIdentifier :
					case TerminalTokens.TokenNameEQUAL :
						if (parenBalance == 0 && ! inAnnotation) break loop;
						break;
					case TerminalTokens.TokenNameCOMMENT_BLOCK :
					case TerminalTokens.TokenNameCOMMENT_JAVADOC :
					case TerminalTokens.TokenNameCOMMENT_LINE :
						break;
					case TerminalTokens.TokenNameLBRACKET :
						balance++;
						break;
					default:
						if (parenBalance == 0) break loop;
				}
			}
		} catch(InvalidInputException e) {
			// ignore
		}
		if (balance == 0) {
			return dimensions;
		}
		return 0;
	}

