	/**
	 * @see org.eclipse.jdt.core.ICodeFormatter#format(java.lang.String, int, int, java.lang.String)
	 */
	public String format(
		String string,
		int indentationLevel,
		int[] positions,
		String lineSeparator) {

		// reset the scribe
		this.scribe.reset();

		long startTime = System.currentTimeMillis();

		final char[] compilationUnitSource = string.toCharArray();
		CompilationUnitDeclaration compilationUnitDeclaration = NewCodeFormatter.parse(compilationUnitSource, JavaCore.getOptions());
		
		this.scribe.scanner.setSource(compilationUnitSource);
		this.localScanner.setSource(compilationUnitSource);
		this.scribe.scannerEndPosition = compilationUnitSource.length;
		this.scribe.scanner.resetTo(0, this.scribe.scannerEndPosition);
		if (compilationUnitDeclaration == null || compilationUnitDeclaration.ignoreFurtherInvestigation) {
			if (DEBUG) {
				System.out.println(compilationUnitDeclaration.compilationResult);
			} 
			return string;
		}
		this.preferences.line_delimiter = lineSeparator;
		this.preferences.initial_indentation_level = indentationLevel;
		this.scribe.setLineSeparatorAndIdentationLevel(this.preferences);
		
		this.lastLocalDeclarationSourceStart = 0;		
		try {
			compilationUnitDeclaration.traverse(this, compilationUnitDeclaration.scope);
		} catch(AbortFormatting e){
			StringBuffer buffer = new StringBuffer("COULD NOT FORMAT\n" + this.scribe.formattedSource()); //$NON-NLS-1$
			buffer.append(compilationUnitSource, this.scribe.scanner.getCurrentTokenEndPosition(), this.scribe.scannerEndPosition - this.scribe.scanner.getCurrentTokenEndPosition());
			if (DEBUG) {
				System.out.println("COULD NOT FORMAT \n" + this.scribe.scanner);	//$NON-NLS-1$
				System.out.println(this.scribe);
			}
			return buffer.toString();
		}
		if (DEBUG){
			System.out.println("Formatting time: " + (System.currentTimeMillis() - startTime));	//$NON-NLS-1$
		}
		return this.scribe.toString();
	}

