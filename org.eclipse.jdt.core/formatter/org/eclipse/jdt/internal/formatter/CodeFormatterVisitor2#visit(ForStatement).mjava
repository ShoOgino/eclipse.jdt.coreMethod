	public boolean visit(ForStatement node) {
		this.scribe.printNextToken(TerminalTokens.TokenNamefor);
	    final int line = this.scribe.line;
	    this.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_for);
		
		if (this.preferences.insert_space_after_opening_paren_in_for) {
			this.scribe.space();
		}
		final List initializers = node.initializers();
		final int initializersLength = initializers.size();
		if (initializersLength != 0) {
			for (int i = 0; i < initializersLength; i++) {
				Expression initializer = (Expression) initializers.get(i);
				switch(initializer.getNodeType()) {
					case ASTNode.VARIABLE_DECLARATION_EXPRESSION :
						formatLocalDeclaration((VariableDeclarationExpression) initializer, this.preferences.insert_space_before_comma_in_for_inits, this.preferences.insert_space_after_comma_in_for_inits);
						break;
					default:
						initializer.accept(this);
						if (i >= 0 && (i < initializersLength - 1)) {
							this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_for_inits);
							if (this.preferences.insert_space_after_comma_in_for_inits) {
								this.scribe.space();
							}
							// TODO (olivier) need to check why we need this here
							this.scribe.printTrailingComment();
						}
				}
			}
		}
		this.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon_in_for);
		final Expression condition = node.getExpression();
		if (condition != null) {
			if (this.preferences.insert_space_after_semicolon_in_for) {
				this.scribe.space();
			}
			condition.accept(this);
		}
		this.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon_in_for);
		final List updaters = node.updaters();
		final int updatersLength = updaters.size();
		if (updatersLength != 0) {
			if (this.preferences.insert_space_after_semicolon_in_for) {
				this.scribe.space();
			}
			for (int i = 0; i < updatersLength; i++) {
				((Expression) updaters.get(i)).accept(this);
				if (i != updatersLength - 1) {
					this.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_for_increments);
					if (this.preferences.insert_space_after_comma_in_for_increments) {
						this.scribe.space();
					}
					this.scribe.printTrailingComment();
				}
			}
		}
		this.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_for);
		
		formatAction(line, node.getBody());
		return false;
	}

