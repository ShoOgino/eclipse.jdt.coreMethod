	/**
	 * Returns the priority of the token given as argument<br>
	 * The most prioritary the token is, the smallest the return value is.
	 * @return the priority of <code>token</code>
	 * @param token the token of which the priority is requested
	 */
	private static int getTokenPriority(int token) {
		switch (token) {
			case TokenNameextends :
			case TokenNameimplements :
			case TokenNamethrows :
				return 10;
			case TokenNameSEMICOLON : // ;
				return 20;
			case TokenNameCOMMA : // ,
				return 25;
			case TokenNameEQUAL : // =
				return 30;
			case TokenNameAND_AND : // && 
			case TokenNameOR_OR : // || 
				return 40;
			case TokenNameQUESTION : // ? 
			case TokenNameCOLON : // :
				return 50; // it's better cutting on ?: than on ;
			case TokenNameEQUAL_EQUAL : // == 
			case TokenNameNOT_EQUAL : // != 
				return 60;
			case TokenNameLESS : // < 
			case TokenNameLESS_EQUAL : // <= 
			case TokenNameGREATER : // > 
			case TokenNameGREATER_EQUAL : // >= 
			case TokenNameinstanceof : // instanceof
				return 70;
			case TokenNamePLUS : // + 
			case TokenNameMINUS : // - 
				return 80;
			case TokenNameMULTIPLY : // * 
			case TokenNameDIVIDE : // / 
			case TokenNameREMAINDER : // % 
				return 90;
			case TokenNameLEFT_SHIFT : // << 
			case TokenNameRIGHT_SHIFT : // >> 
			case TokenNameUNSIGNED_RIGHT_SHIFT : // >>> 
				return 100;
			case TokenNameAND : // &
			case TokenNameOR : // | 
			case TokenNameXOR : // ^ 
				return 110;
			case TokenNameMULTIPLY_EQUAL : // *= 
			case TokenNameDIVIDE_EQUAL : // /= 
			case TokenNameREMAINDER_EQUAL : // %= 
			case TokenNamePLUS_EQUAL : // += 
			case TokenNameMINUS_EQUAL : // -= 
			case TokenNameLEFT_SHIFT_EQUAL : // <<= 
			case TokenNameRIGHT_SHIFT_EQUAL : // >>= 
			case TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL : // >>>=
			case TokenNameAND_EQUAL : // &= 
			case TokenNameXOR_EQUAL : // ^= 
			case TokenNameOR_EQUAL : // |= 
				return 120;
			case TokenNameDOT : // .
				return 130;
			default :
				return Integer.MAX_VALUE;
		}
	}

