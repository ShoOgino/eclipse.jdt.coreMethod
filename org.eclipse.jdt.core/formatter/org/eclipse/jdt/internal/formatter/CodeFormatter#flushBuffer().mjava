	/**
	 * Dumps <code>currentLineBuffer</code> into the formatted string.
	 */
	private void flushBuffer() {
		String currentString = currentLineBuffer.toString();
		splitDelta = 0;
		beginningOfLineIndex = formattedSource.length();
		if (containsOpenCloseBraces) {
			containsOpenCloseBraces = false;
			outputLine(
				currentString,
				false,
				indentationLevelForOpenCloseBraces,
				0,
				-1,
				null,
				0);
			indentationLevelForOpenCloseBraces = currentLineIndentationLevel;
		} else {
			outputLine(currentString, false, currentLineIndentationLevel, 0, -1, null, 0);
		}
		int scannerSourceLength = scanner.source.length;
		if (scannerSourceLength > 2) {
			if (scanner.source[scannerSourceLength - 1] == '\n' && 
				scanner.source[scannerSourceLength - 2] == '\r') {
					formattedSource.append(options.lineSeparatorSequence);
					increaseGlobalDelta(options.lineSeparatorSequence.length - 2);
			} else if (scanner.source[scannerSourceLength - 1] == '\n') {
				formattedSource.append(options.lineSeparatorSequence);
				increaseGlobalDelta(options.lineSeparatorSequence.length - 1);
			} else if (scanner.source[scannerSourceLength - 1] == '\r') {
				formattedSource.append(options.lineSeparatorSequence);
				increaseGlobalDelta(options.lineSeparatorSequence.length - 1);
			}
		}
		updateMappedPositions(scanner.startPosition);
	}

