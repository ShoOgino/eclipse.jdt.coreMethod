	/**
	 * @see org.eclipse.jdt.internal.compiler.ASTVisitor#visit(org.eclipse.jdt.internal.compiler.ast.LambdaExpression, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
	 */
	public boolean visit(LambdaExpression lambdaExpression, BlockScope scope) {
		
		final int numberOfParens = (lambdaExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;
		if (numberOfParens > 0) {
			manageOpeningParenthesizedExpression(lambdaExpression, numberOfParens);
		}
		if (isNextToken(TerminalTokens.TokenNameLPAREN)) {
			// Format arguments
			formatMethodArguments(
				null,
				lambdaExpression.arguments,
				lambdaExpression.getScope(),
				this.preferences.insert_space_before_opening_paren_in_method_declaration,
				this.preferences.insert_space_between_empty_parens_in_method_declaration,
				this.preferences.insert_space_before_closing_paren_in_method_declaration,
				this.preferences.insert_space_after_opening_paren_in_method_declaration,
				this.preferences.insert_space_before_comma_in_method_declaration_parameters,
				this.preferences.insert_space_after_comma_in_method_declaration_parameters,
				this.preferences.alignment_for_parameters_in_method_declaration);
		} else {
			// This MUST be a single, untyped parameter
			this.scribe.printNextToken(TerminalTokens.TokenNameIdentifier);
		}
		if (this.preferences.insert_space_before_lambda_arrow) this.scribe.space();
		this.scribe.printNextToken(TerminalTokens.TokenNameARROW);
		if (this.preferences.insert_space_after_lambda_arrow) this.scribe.space();
		if (lambdaExpression.body instanceof Block) {
			formatBlock((Block) lambdaExpression.body, scope, this.preferences.brace_position_for_lambda_body, this.preferences.insert_space_before_opening_brace_in_block);
		} else {
			lambdaExpression.body.traverse(this, scope);
		}

		if (numberOfParens > 0) {
			manageClosingParenthesizedExpression(lambdaExpression, numberOfParens);
		}
		return false;
	}

