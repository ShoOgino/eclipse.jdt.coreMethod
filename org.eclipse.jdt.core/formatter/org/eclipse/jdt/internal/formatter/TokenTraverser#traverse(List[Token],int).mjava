	public int traverse(List<Token> tokens, int startIndex) {
		initTraverse(tokens, startIndex);

		for (int i = startIndex; i < tokens.size(); i++) {
			if (this.structureChanged)
				initTraverse(tokens, i);

			this.next = null;
			if (i < tokens.size() - 1) {
				this.next = tokens.get(i + 1);
			}
			this.lineBreaksAfter = Math.max(this.current.getLineBreaksAfter(),
					this.next != null ? this.next.getLineBreaksBefore() : 0);
			this.spaceAfter = this.current.isSpaceAfter();
			if (this.lineBreaksAfter == 0) {
				this.spaceAfter = this.spaceAfter || (this.next != null && this.next.isSpaceBefore());
			}

			if (!this.token(this.current, i))
				return i;

			if (this.next != null) {
				this.previous = this.current;
				this.current = this.next;
				this.lineBreaksBefore = this.lineBreaksAfter;
				this.spaceBefore = this.spaceAfter;
				if (this.lineBreaksBefore > 0)
					this.spaceBefore = this.current.isSpaceBefore();
			}
		}
		return tokens.size() - 1;
	}

