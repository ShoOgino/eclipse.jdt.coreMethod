private String operatorString(int operator) {
 switch (operator) {
  case TokenNameextends :
   return "extends"/*nonNLS*/;

  case TokenNameimplements :
   return "implements"/*nonNLS*/;

  case TokenNamethrows :
   return "throws"/*nonNLS*/;

  case TokenNameSEMICOLON : // ;
   return ";"/*nonNLS*/;

  case TokenNameCOMMA : // ,
   return ","/*nonNLS*/;

  case TokenNameEQUAL : // =
   return "="/*nonNLS*/;

  case TokenNameAND_AND : // && (15.22)
   return "&&"/*nonNLS*/;

  case TokenNameOR_OR : // || (15.23)
   return "||"/*nonNLS*/;

  case TokenNameQUESTION : // ? (15.24)
   return "?"/*nonNLS*/;

  case TokenNameCOLON : // : (15.24)
   return ":"/*nonNLS*/;

  case TokenNameEQUAL_EQUAL : // == (15.20, 15.20.1, 15.20.2, 15.20.3)
   return "=="/*nonNLS*/;

  case TokenNameNOT_EQUAL : // != (15.20, 15.20.1, 15.20.2, 15.20.3)
   return "!="/*nonNLS*/;

  case TokenNameLESS : // < (15.19.1)
   return "<"/*nonNLS*/;

  case TokenNameLESS_EQUAL : // <= (15.19.1)
   return "<="/*nonNLS*/;

  case TokenNameGREATER : // > (15.19.1)
   return ">"/*nonNLS*/;

  case TokenNameGREATER_EQUAL : // >= (15.19.1)
   return ">="/*nonNLS*/;

  case TokenNameinstanceof : // instanceof
   return "instanceof"/*nonNLS*/;

  case TokenNamePLUS : // + (15.17, 15.17.2)
   return "+"/*nonNLS*/;

  case TokenNameMINUS : // - (15.17.2)
   return "-"/*nonNLS*/;

  case TokenNameMULTIPLY : // * (15.16.1)
   return "*"/*nonNLS*/;

  case TokenNameDIVIDE : // / (15.16.2)
   return "/"/*nonNLS*/;

  case TokenNameREMAINDER : // % (15.16.3)
   return "%"/*nonNLS*/;

  case TokenNameLEFT_SHIFT : // << (15.18)
   return "<<"/*nonNLS*/;

  case TokenNameRIGHT_SHIFT : // >> (15.18)
   return ">>"/*nonNLS*/;

  case TokenNameUNSIGNED_RIGHT_SHIFT : // >>> (15.18)
   return ">>>"/*nonNLS*/;

  case TokenNameAND : // & (15.21, 15.21.1, 15.21.2)
   return "&"/*nonNLS*/;

  case TokenNameOR : // | (15.21, 15.21.1, 15.21.2)
   return "|"/*nonNLS*/;

  case TokenNameXOR : // ^ (15.21, 15.21.1, 15.21.2)
   return "^"/*nonNLS*/;

  case TokenNameMULTIPLY_EQUAL : // *= (15.25.2)
   return "*="/*nonNLS*/;

  case TokenNameDIVIDE_EQUAL : // /= (15.25.2)
   return "/="/*nonNLS*/;

  case TokenNameREMAINDER_EQUAL : // %= (15.25.2)
   return "%="/*nonNLS*/;

  case TokenNamePLUS_EQUAL : // += (15.25.2)
   return "+="/*nonNLS*/;

  case TokenNameMINUS_EQUAL : // -= (15.25.2)
   return "-="/*nonNLS*/;

  case TokenNameLEFT_SHIFT_EQUAL : // <<= (15.25.2)
   return "<<="/*nonNLS*/;

  case TokenNameRIGHT_SHIFT_EQUAL : // >>= (15.25.2)
   return ">>="/*nonNLS*/;

  case TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL : // >>>= (15.25.2)
   return ">>>="/*nonNLS*/;

  case TokenNameAND_EQUAL : // &= (15.25.2)
   return "&="/*nonNLS*/;

  case TokenNameXOR_EQUAL : // ^= (15.25.2)
   return "^="/*nonNLS*/;

  case TokenNameOR_EQUAL : // |= (15.25.2)
   return "|="/*nonNLS*/;

  case TokenNameDOT : // .
   return "."/*nonNLS*/;

  default :
   return ""/*nonNLS*/;
 }
}

