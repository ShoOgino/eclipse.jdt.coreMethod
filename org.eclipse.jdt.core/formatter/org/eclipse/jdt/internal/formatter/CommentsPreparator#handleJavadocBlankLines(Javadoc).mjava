	private void handleJavadocBlankLines(Javadoc node) {
		List<TagElement> tagElements = node.tags();
		List<Integer> tagIndexes = tagElements.stream()
				.filter(t -> !t.isNested() && t.getTagName() != null && t.getTagName().length() > 1)
				.map(t -> tokenStartingAt(t.getStartPosition()))
				.collect(Collectors.toList());
		tagIndexes.addAll(this.commonAttributeAnnotations);
		Collections.sort(tagIndexes);
		
		String previousName = null;
		if (!tagIndexes.isEmpty()) {
			int firstIndex = tagIndexes.get(0);
			previousName = this.ctm.toString(firstIndex);
			if (this.options.comment_insert_empty_line_before_root_tags && firstIndex > 1)
				this.ctm.get(firstIndex).putLineBreaksBefore(2);
		}
		if (this.options.comment_insert_empty_line_between_different_tags) {
			for (int i = 1; i < tagIndexes.size(); i++) {
				Token tagToken = this.ctm.get(tagIndexes.get(i));
				String thisName = this.tm.toString(tagToken);
				boolean sameType = previousName.equals(thisName)
						|| (isCommonsAttributeAnnotation(previousName) && isCommonsAttributeAnnotation(thisName));
				if (!sameType)
					tagToken.putLineBreaksBefore(2);
				previousName = thisName;
			}
		}
	}

