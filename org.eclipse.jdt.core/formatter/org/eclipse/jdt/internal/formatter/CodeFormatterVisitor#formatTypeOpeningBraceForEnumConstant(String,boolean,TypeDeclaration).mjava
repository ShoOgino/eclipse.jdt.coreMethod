	private void formatTypeOpeningBraceForEnumConstant(String bracePosition, boolean insertSpaceBeforeBrace, TypeDeclaration typeDeclaration) {
		int fieldCount = (typeDeclaration.fields == null) ? 0 : typeDeclaration.fields.length;
		int methodCount = (typeDeclaration.methods == null) ? 0 : typeDeclaration.methods.length;
		int typeCount = (typeDeclaration.memberTypes == null) ? 0 : typeDeclaration.memberTypes.length;

		if (methodCount <= 2) {
			for (int i = 0, max = methodCount; i < max; i++) {
				final AbstractMethodDeclaration abstractMethodDeclaration = typeDeclaration.methods[i];
				if (abstractMethodDeclaration.isDefaultConstructor()) {
					methodCount--;
				} else if (abstractMethodDeclaration.isClinit()) {
					methodCount--;
				}
			}
		}
		final int memberLength = fieldCount + methodCount+typeCount;

		boolean insertNewLine = memberLength > 0;

		if (!insertNewLine) {
			if ((typeDeclaration.bits & ASTNode.IsAnonymousType) != 0) {
				insertNewLine = this.preferences.insert_new_line_in_empty_enum_constant;
			}
		}

		formatOpeningBrace(bracePosition, insertSpaceBeforeBrace);

		if (insertNewLine) {
			this.scribe.printNewLine();
		}
	}

