	/**
	 * @see org.eclipse.jdt.internal.compiler.ASTVisitor#visit(org.eclipse.jdt.internal.compiler.ast.IntersectionCastTypeReference, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
	 */
	public boolean visit(IntersectionCastTypeReference intersectionCastTypeReference, BlockScope scope) {
		int length = intersectionCastTypeReference.typeReferences == null ? 0 : intersectionCastTypeReference.typeReferences.length;
		for (int i = 0; i < length; i++) {
			intersectionCastTypeReference.typeReferences[i].traverse(this, scope);
			if (i != length - 1) {
				// Borrowing the formatting option from binary operators
				this.scribe.printNextToken(TerminalTokens.TokenNameAND, this.preferences.insert_space_before_binary_operator);
				if (this.preferences.insert_space_after_binary_operator) {
					this.scribe.space();
				}
			}
		}
		return false;
	}

