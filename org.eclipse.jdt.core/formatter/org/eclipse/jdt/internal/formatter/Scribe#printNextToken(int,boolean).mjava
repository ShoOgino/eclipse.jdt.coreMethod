	public void printNextToken(int expectedTokenType, boolean considerSpaceIfAny) {
		// Set brace flag, it's useful for the scribe while preserving line breaks
		switch (expectedTokenType) {
			case TerminalTokens.TokenNameRBRACE:
			case TerminalTokens.TokenNameLBRACE:
				this.formatBrace = true;
		}
		try {
			printComment(CodeFormatter.K_UNKNOWN);
			try {
				this.currentToken = this.scanner.getNextToken();
				if (expectedTokenType != this.currentToken) {
					throw new AbortFormatting("unexpected token type, expecting:"+expectedTokenType+", actual:"+this.currentToken);//$NON-NLS-1$//$NON-NLS-2$
				}
				print(this.scanner.currentPosition - this.scanner.startPosition, considerSpaceIfAny);
			} catch (InvalidInputException e) {
				throw new AbortFormatting(e);
			}
		}
		finally {
			// Flush brace flag
			switch (expectedTokenType) {
				case TerminalTokens.TokenNameRBRACE:
				case TerminalTokens.TokenNameLBRACE:
					this.formatBrace = false;
			}
		}
	}

