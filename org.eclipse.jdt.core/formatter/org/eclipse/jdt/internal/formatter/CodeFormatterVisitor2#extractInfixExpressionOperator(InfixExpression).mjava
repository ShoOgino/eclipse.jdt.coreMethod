	public static int extractInfixExpressionOperator(InfixExpression node) {
		final InfixExpression.Operator infixOperator = node.getOperator();
		if (infixOperator == InfixExpression.Operator.AND) {
			return TerminalTokens.TokenNameAND;
		} else if (infixOperator == InfixExpression.Operator.CONDITIONAL_AND) {
			return TerminalTokens.TokenNameAND_AND;
		} else if (infixOperator == InfixExpression.Operator.CONDITIONAL_OR) {
			return TerminalTokens.TokenNameOR_OR;
		} else if (infixOperator == InfixExpression.Operator.DIVIDE) {
			return TerminalTokens.TokenNameDIVIDE;
		} else if (infixOperator == InfixExpression.Operator.EQUALS) {
			return TerminalTokens.TokenNameEQUAL_EQUAL;
		} else if (infixOperator == InfixExpression.Operator.GREATER) {
			return TerminalTokens.TokenNameGREATER;
		} else if (infixOperator == InfixExpression.Operator.GREATER_EQUALS) {
			return TerminalTokens.TokenNameGREATER_EQUAL;
		} else if (infixOperator == InfixExpression.Operator.LEFT_SHIFT) {
			return TerminalTokens.TokenNameLEFT_SHIFT;
		} else if (infixOperator == InfixExpression.Operator.LESS) {
			return TerminalTokens.TokenNameLESS;
		} else if (infixOperator == InfixExpression.Operator.LESS_EQUALS) {
			return TerminalTokens.TokenNameLESS_EQUAL;
		} else if (infixOperator == InfixExpression.Operator.MINUS) {
			return TerminalTokens.TokenNameMINUS;
		} else if (infixOperator == InfixExpression.Operator.NOT_EQUALS) {
			return TerminalTokens.TokenNameNOT_EQUAL;
		} else if (infixOperator == InfixExpression.Operator.OR) {
			return TerminalTokens.TokenNameOR;
		} else if (infixOperator == InfixExpression.Operator.PLUS) {
			return TerminalTokens.TokenNamePLUS;
		} else if (infixOperator == InfixExpression.Operator.REMAINDER) {
			return TerminalTokens.TokenNameREMAINDER;
		} else if (infixOperator == InfixExpression.Operator.RIGHT_SHIFT_SIGNED) {
			return TerminalTokens.TokenNameRIGHT_SHIFT;
		} else if (infixOperator == InfixExpression.Operator.RIGHT_SHIFT_UNSIGNED) {
			return TerminalTokens.TokenNameUNSIGNED_RIGHT_SHIFT;
		} else if (infixOperator == InfixExpression.Operator.TIMES) {
			return TerminalTokens.TokenNameMULTIPLY;
		} else {
			return TerminalTokens.TokenNameXOR;
		}
	}

