	/**
	 * @see org.eclipse.jdt.internal.compiler.IAbstractSyntaxTreeVisitor#visit(org.eclipse.jdt.internal.compiler.ast.MethodDeclaration, org.eclipse.jdt.internal.compiler.lookup.ClassScope)
	 */
	public boolean visit(
		MethodDeclaration methodDeclaration,
		ClassScope scope) {

		if (methodDeclaration.modifiers != NO_MODIFIERS) {
			this.scribe.printModifiers();
			this.scribe.space();
		}
		
		/*
		 * Print the method return type
		 */	
		final TypeReference returnType = methodDeclaration.returnType;
		final MethodScope methodDeclarationScope = methodDeclaration.scope;
		
		if (returnType != null) {
			returnType.traverse(this, methodDeclarationScope);
		}
		/*
		 * Print the method name
		 */
		this.scribe.printNextToken(ITerminalSymbols.TokenNameIdentifier, true); 

		/*
		 * Check for extra dimensions
		 */
		int extraDimensions = getExtraDimension();
		if (extraDimensions != 0) {
			 for (int i = 0; i < extraDimensions; i++) {
			 	this.scribe.printNextToken(ITerminalSymbols.TokenNameLBRACKET);
			 	this.scribe.printNextToken(ITerminalSymbols.TokenNameRBRACKET);
			 }
		}

		formatMethodArguments(
			methodDeclaration, 
			this.preferences.insert_space_before_method_declaration_open_paren,
			this.preferences.insert_space_between_empty_arguments,
			this.preferences.insert_space_before_closing_paren,
			this.preferences.insert_space_before_first_argument,
			this.preferences.insert_space_before_comma_in_method_arguments,
			this.preferences.insert_space_after_comma_in_method_arguments);

		formatThrowsClause(
			methodDeclaration,
			this.preferences.insert_space_before_comma_in_method_throws,
			this.preferences.insert_space_after_comma_in_method_throws);

		if (!methodDeclaration.isNative() && !methodDeclaration.isAbstract() && ((methodDeclaration.modifiers & CompilerModifiers.AccSemicolonBody) == 0)) {
			/*
			 * Method body
			 */
			String method_declaration_brace = this.preferences.method_declaration_brace_position;
			formatOpeningBrace(method_declaration_brace, this.preferences.insert_space_before_method_open_brace);
			this.scribe.indent();			
			final int numberOfBlankLinesAtBeginningOfMethodBody = this.preferences.number_of_blank_lines_to_insert_at_beginning_of_method_body;
			if (numberOfBlankLinesAtBeginningOfMethodBody > 0) {
				this.scribe.printNewLines(numberOfBlankLinesAtBeginningOfMethodBody);
			}
			final Statement[] statements = methodDeclaration.statements;
			if (statements != null) {
				this.scribe.printNewLine();
				formatStatements(methodDeclarationScope, statements, true);
			} else if (this.preferences.insert_new_line_in_empty_method_body) {
				this.scribe.printNewLine();
			}
			this.scribe.printComment();
			this.scribe.unIndent();
			this.scribe.printNextToken(ITerminalSymbols.TokenNameRBRACE);
			this.scribe.printTrailingComment();
			if (method_declaration_brace.equals(FormattingPreferences.NEXT_LINE_SHIFTED)) {
				this.scribe.unIndent();
			}
		} else {
			// no method body
			this.scribe.printNextToken(ITerminalSymbols.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);
			this.scribe.printTrailingComment();
		}
		return false;
	}

