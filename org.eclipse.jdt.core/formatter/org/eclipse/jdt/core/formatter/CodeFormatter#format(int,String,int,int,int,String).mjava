	/**
	 * Format <code>source</code>,
	 * and returns a text edit that correspond to the difference between the given
	 * string and the formatted string.
	 * <p>
	 * It returns null if the given string cannot be formatted.
	 * </p><p>
	 * If the offset position is matching a whitespace, the result can include
	 * whitespaces. It would be up to the caller to get rid of preceding
	 * whitespaces.
	 * </p>
	 *
	 * @param kind Use to specify the kind of the code snippet to format. It can
	 * be any of these:
	 * <ul>
	 * 	<li>{@link #K_EXPRESSION}</li>
	 * 	<li>{@link #K_STATEMENTS}</li>
	 * 	<li>{@link #K_CLASS_BODY_DECLARATIONS}</li>
	 * 	<li>{@link #K_COMPILATION_UNIT}</li>
	 * 	<li>{@link #K_MODULE_INFO}</li>
	 * 	<li>{@link #K_UNKNOWN}</li>
	 * 	<li>{@link #K_SINGLE_LINE_COMMENT}</li>
	 * 	<li>{@link #K_MULTI_LINE_COMMENT}</li>
	 * 	<li>{@link #K_JAVA_DOC}</li>
	 * </ul>
	 * <b>Since 3.4</b> for {@link #K_MODULE_INFO} and <b>since 3.6</b> for other
	 * kinds unrelated to comments, the {@link #F_INCLUDE_COMMENTS} flag can be
	 * used to format comments on the fly (see the flag documentation for more
	 * detailed explanation).
	 * @param source the source to format
	 * @param offset the given offset to start recording the edits (inclusive).
	 * @param length the given length to stop recording the edits (exclusive).
	 * @param indentationLevel the initial indentation level, used
	 *      to shift left/right the entire source fragment. An initial indentation
	 *      level of zero or below has no effect.
	 * @param lineSeparator the line separator to use in formatted source,
	 *     if set to <code>null</code>, then the platform default one will be used.
	 * @return the text edit
	 * @throws IllegalArgumentException if offset is lower than 0, length is lower than 0 or
	 * length is greater than source length.
	 */
	public abstract TextEdit format(int kind, String source, int offset, int length, int indentationLevel, String lineSeparator);

