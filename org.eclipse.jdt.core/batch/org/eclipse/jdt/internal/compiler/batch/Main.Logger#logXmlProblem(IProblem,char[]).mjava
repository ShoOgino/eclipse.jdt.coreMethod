		/**
		 * @param problem
		 *            the given problem to log
		 * @param unitSource
		 *            the given unit source
		 */
		private void logXmlProblem(IProblem problem, char[] unitSource) {
			final int sourceStart = problem.getSourceStart();
			final int sourceEnd = problem.getSourceEnd();
			parameters.clear();
			parameters.put(PROBLEM_ID, getFieldName(problem.getID()));
			parameters.put(PROBLEM_SEVERITY, problem.isError() ? ERROR : WARNING);
			parameters.put(PROBLEM_LINE, new Integer(problem.getSourceLineNumber()));
			parameters.put(PROBLEM_SOURCE_START, new Integer(sourceStart));
			parameters.put(PROBLEM_SOURCE_END, new Integer(sourceEnd));
			this.printTag(PROBLEM_TAG, parameters, true, false);
			parameters.clear();
			parameters.put(VALUE, problem.getMessage());
			this.printTag(PROBLEM_MESSAGE, parameters, true, true);
			parameters.clear();
			StringBuffer buffer = new StringBuffer();
			if ((sourceStart > sourceEnd)
				|| ((sourceStart < 0) && (sourceEnd < 0))) {
				buffer.append(Util.bind("problem.noSourceInformation")); //$NON-NLS-1$
			} else {
				buffer.append(unitSource, sourceStart, sourceEnd - sourceStart + 1);
			}
			parameters.put(VALUE, String.valueOf(buffer));
			this.printTag(PROBLEM_SOURCE, parameters, true, true);
			String[] arguments = problem.getArguments();
			final int length = arguments.length;
			if (length != 0) {
				this.printTag(PROBLEM_ARGUMENTS, null, true, false);
				parameters.clear();
				for (int i = 0; i < length; i++) {
					parameters.put(PROBLEM_ARGUMENT_VALUE, arguments[i]);
					this.printTag(PROBLEM_ARGUMENT, parameters, true, true);
				}
				this.endTag(PROBLEM_ARGUMENTS);
			}
			this.endTag(PROBLEM_TAG);
		}

