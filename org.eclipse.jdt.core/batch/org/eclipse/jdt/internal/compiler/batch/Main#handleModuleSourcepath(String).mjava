protected ArrayList handleModuleSourcepath(String arg) {
	ArrayList<String> modulePaths = processModulePathEntries(arg);
	final int classpathsSize;
	if ((modulePaths != null)
		&& ((classpathsSize = modulePaths.size()) != 0)) {

		if (this.destinationPath == null) {
			addPendingErrors(this.bind("configure.missingDestinationPath"));//$NON-NLS-1$
		}
		String[] paths = new String[modulePaths.size()];
		modulePaths.toArray(paths);
		// We reuse the same List to store <Classpath>, which earlier contained <String>
		modulePaths.clear();
		for (int i = 0; i < classpathsSize; i++) {
			processPathEntries(DEFAULT_SIZE_CLASSPATH, modulePaths, paths[i],
					null, false, true);
		}
//		Parser parser = getNewParser();
		for (int i = 0; i < paths.length; i++) {
			File dir = new File(paths[i]);
			if (dir.isDirectory()) {
				// 1. Create FileSystem.Classpath for each module
				// 2. Iterator each module in case of directory for source files and add to this.fileNames

				modulePaths =
						(ArrayList) ModuleFinder.findModules(dir, this.destinationPath, getNewParser(), this.options, false);
				for (Object obj : modulePaths) {
					Classpath classpath = (Classpath) obj;
					File modLocation = new File(classpath.getPath());
					String[] result = FileFinder.find(modLocation, SuffixConstants.SUFFIX_STRING_java);
					String destPath = classpath.getDestinationPath();
					IModule mod = classpath.getModule();
					String moduleName = mod == null ? null : new String(mod.name());

					// Add them to this.filenames
					if (this.filenames != null) {
						int filesCount = this.filenames.length;
						// some source files were specified explicitly
						int length = result.length;
						System.arraycopy(
							this.filenames,
							0,
							(this.filenames = new String[length + filesCount]),
							0,
							filesCount);
						System.arraycopy(
							this.encodings,
							0,
							(this.encodings = new String[length + filesCount]),
							0,
							filesCount);
						System.arraycopy(
							this.destinationPaths,
							0,
							(this.destinationPaths = new String[length + filesCount]),
							0,
							filesCount);
						System.arraycopy(
								this.modNames,
								0,
								(this.modNames = new String[length + filesCount]),
								0,
								filesCount);
						System.arraycopy(result, 0, this.filenames, filesCount, length);
						for (int j = 0; j < length; j++) {
							this.modNames[filesCount + j] = moduleName;
							this.destinationPaths[filesCount + j] = destPath;
						}
						filesCount += length;
					} else {
						this.filenames = result;
						int filesCount = this.filenames.length;
						this.encodings = new String[filesCount];
						this.destinationPaths = new String[filesCount];
						this.modNames = new String[filesCount];
						for (int j = 0; j < filesCount; j++) {
							this.destinationPaths[j] = destPath;
							this.modNames[j] = moduleName;
						}
					}
				}
			}
		}
		
	}
	return modulePaths;
}

