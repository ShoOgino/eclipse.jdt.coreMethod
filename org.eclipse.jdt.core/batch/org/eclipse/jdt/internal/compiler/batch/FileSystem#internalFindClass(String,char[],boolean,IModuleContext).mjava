private NameEnvironmentAnswer internalFindClass(String qualifiedTypeName, char[] typeName, boolean asBinaryOnly, IModuleContext moduleContext) {
	if (this.knownFileNames.contains(qualifiedTypeName)) return null; // looking for a file which we know was provided at the beginning of the compilation

	String qualifiedBinaryFileName = qualifiedTypeName + SUFFIX_STRING_class;
	String qualifiedPackageName =
		qualifiedTypeName.length() == typeName.length
			? Util.EMPTY_STRING
			: qualifiedBinaryFileName.substring(0, qualifiedTypeName.length() - typeName.length - 1);

	if (IModuleContext.UNNAMED_MODULE_CONTEXT == moduleContext) {
		return Stream.of(this.classpaths)
				.map(p -> p.getLookupEnvironment().typeLookup())
				.reduce(ITypeLookup::chain)
				.map(t -> t.findClass(typeName, qualifiedPackageName, qualifiedBinaryFileName, asBinaryOnly)).orElse(null);
	}
	return moduleContext.getEnvironment().map(env -> env.typeLookup())
				.reduce(ITypeLookup::chain)
				.map(lookup -> lookup.findClass(typeName, qualifiedPackageName, qualifiedBinaryFileName, asBinaryOnly))
				.orElse(null);
}

