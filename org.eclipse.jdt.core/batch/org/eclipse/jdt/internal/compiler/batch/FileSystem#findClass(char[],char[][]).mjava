private NameEnvironmentAnswer findClass(char[] name, char[][] packageName) {
	String fullName = assembleName(name, packageName, File.separatorChar);
	for (int i = 0, length = knownFileNames.length; i < length; i++)
		if (fullName.equals(knownFileNames[i]))
			return null; // looking for a file which we know was provided at the beginning of the compilation

	String filename = new String(name);
	String binaryFilename = filename + ".class"/*nonNLS*/;
	String sourceFilename = filename + ".java"/*nonNLS*/;
	for (int i = 0, length = classpaths.length; i < length; i++) {
		Classpath classpath = classpaths[i];
		boolean binaryExists = classpath.exists(binaryFilename, packageName);
		boolean sourceExists = classpath.exists(sourceFilename, packageName);
		if (binaryExists == sourceExists) {
			if (binaryExists) { // so both are true
				long binaryModified = classpath.lastModified(binaryFilename, packageName);
				long sourceModified = classpath.lastModified(sourceFilename, packageName);
				if (binaryModified > sourceModified)
					return classpath.readClassFile(binaryFilename, packageName);
				if (sourceModified > 0)
					return classpath.readJavaFile(sourceFilename, packageName);
			}
		} else {
			if (binaryExists)
				return classpath.readClassFile(binaryFilename, packageName);
			else
				return classpath.readJavaFile(sourceFilename, packageName);
		}
	}
	return null; 
}

