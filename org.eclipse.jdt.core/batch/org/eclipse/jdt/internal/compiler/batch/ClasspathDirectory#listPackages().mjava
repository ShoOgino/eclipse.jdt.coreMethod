@Override
public char[][] listPackages() {
	Set<String> packageNames = new HashSet<>();
	try {
		Path basePath = FileSystems.getDefault().getPath(this.path);
		Files.walkFileTree(basePath, new SimpleFileVisitor<Path>() {
			@Override
			public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {
				if (file.toString().toLowerCase().endsWith(SUFFIX_STRING_class)) {
					packageNames.add(file.getParent().relativize(basePath).toString().replace('/', '.'));
				}
				return FileVisitResult.CONTINUE;
			}
		});
	} catch (IOException e) {
		// treat as if files are missing
	}
	return packageNames.stream().map(String::toCharArray).toArray(char[][]::new);
}

