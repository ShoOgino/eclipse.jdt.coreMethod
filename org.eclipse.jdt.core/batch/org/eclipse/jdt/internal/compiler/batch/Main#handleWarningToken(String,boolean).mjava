/*
 * External API
 * Handle a single warning token.
*/
protected void handleWarningToken(String token, boolean isEnabling) {
	if (token.length() == 0) return;
	switch(token.charAt(0)) {
		case 'a' :
			if (token.equals("allDeprecation")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportDeprecation,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				this.options.put(
					CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode,
					isEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);
				this.options.put(
					CompilerOptions.OPTION_ReportDeprecationWhenOverridingDeprecatedMethod,
					isEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);
				return;
			} else if (token.equals("allJavadoc")) { //$NON-NLS-1$
				this.warnAllJavadocOn = this.warnJavadocOn = isEnabling;
				return;
			} else if (token.equals("assertIdentifier")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportAssertIdentifier,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("allDeadCode")) { //$NON-NLS-1$
				this.options.put(
						CompilerOptions.OPTION_ReportDeadCode,
						isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
					this.options.put(
						CompilerOptions.OPTION_ReportDeadCodeInTrivialIfStatement,
						isEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);
					return;
			} else if (token.equals("allOver-ann")) { //$NON-NLS-1$
				this.options.put(
						CompilerOptions.OPTION_ReportMissingOverrideAnnotation,
						isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				this.options.put(
						CompilerOptions.OPTION_ReportMissingOverrideAnnotationForInterfaceMethodImplementation,
						isEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);
				return;
			}
			break;
		case 'b' :
			if (token.equals("boxing")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportAutoboxing,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			}
			break;
		case 'c' :
			if (token.equals("constructorName")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportMethodWithConstructorName,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("conditionAssign")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportPossibleAccidentalBooleanAssignment,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("compareIdentical")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportComparingIdentical,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("charConcat") /*|| token.equals("noImplicitStringConversion")/*backward compatible*/) {//$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportNoImplicitStringConversion,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			}
			break;
		case 'd' :
			if (token.equals("deprecation")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportDeprecation,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				this.options.put(
					CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode,
					CompilerOptions.DISABLED);
				this.options.put(
					CompilerOptions.OPTION_ReportDeprecationWhenOverridingDeprecatedMethod,
					CompilerOptions.DISABLED);
				return;
			} else if (token.equals("dep-ann")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportMissingDeprecatedAnnotation,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("discouraged")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportDiscouragedReference,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("deadCode")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportDeadCode,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				this.options.put(
					CompilerOptions.OPTION_ReportDeadCodeInTrivialIfStatement,
					CompilerOptions.DISABLED);
				return;
			}
			break;
		case 'e' :
			if (token.equals("enumSwitch") //$NON-NLS-1$
					|| token.equals("incomplete-switch")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportIncompleteEnumSwitch,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("emptyBlock")) {//$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportUndocumentedEmptyBlock,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("enumIdentifier")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportEnumIdentifier,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			}
			break;
		case 'f' :
			if (token.equals("fieldHiding")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportFieldHiding,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("finalBound")) {//$NON-NLS-1$
				this.options.put(
						CompilerOptions.OPTION_ReportFinalParameterBound,
						isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("finally")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportFinallyBlockNotCompletingNormally,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("forbidden")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportForbiddenReference,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("fallthrough")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportFallthroughCase,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			}
			break;
		case 'h' :
			if (token.equals("hiding")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportHiddenCatchBlock,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				this.options.put(
					CompilerOptions.OPTION_ReportLocalVariableHiding,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				this.options.put(
					CompilerOptions.OPTION_ReportFieldHiding,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				this.options.put(
					CompilerOptions.OPTION_ReportTypeParameterHiding,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("hashCode")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportMissingHashCodeMethod,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			}
			break;
		case 'i' :
			if (token.equals("indirectStatic")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportIndirectStaticAccess,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("intfNonInherited") || token.equals("interfaceNonInherited")/*backward compatible*/) { //$NON-NLS-1$ //$NON-NLS-2$
				this.options.put(
					CompilerOptions.OPTION_ReportIncompatibleNonInheritedInterfaceMethod,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("intfAnnotation")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportAnnotationSuperInterface,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("intfRedundant") /*|| token.equals("redundantSuperinterface")*/) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportRedundantSuperinterface,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);	
				return;
			}
			break;
		case 'j' :
			if (token.equals("javadoc")) {//$NON-NLS-1$
				this.warnJavadocOn = isEnabling;
				return;
			}
			break;
		case 'l' :
			if (token.equals("localHiding")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportLocalVariableHiding,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			}
			break;
		case 'm' :
			if (token.equals("maskedCatchBlock") || token.equals("maskedCatchBlocks")/*backward compatible*/) { //$NON-NLS-1$ //$NON-NLS-2$
				this.options.put(
					CompilerOptions.OPTION_ReportHiddenCatchBlock,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			}
			break;
		case 'n' :
			if (token.equals("nls")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportNonExternalizedStringLiteral,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("noEffectAssign")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportNoEffectAssignment,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (/*token.equals("charConcat") ||*/ token.equals("noImplicitStringConversion")/*backward compatible*/) {//$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportNoImplicitStringConversion,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("null")) { //$NON-NLS-1$
				this.options.put(
						CompilerOptions.OPTION_ReportNullReference,
						isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				this.options.put(
						CompilerOptions.OPTION_ReportPotentialNullReference,
						isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				this.options.put(
						CompilerOptions.OPTION_ReportRedundantNullCheck,
						isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("nullDereference")) { //$NON-NLS-1$
				this.options.put(
						CompilerOptions.OPTION_ReportNullReference,
						isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				if (!isEnabling) {
					this.options.put(
							CompilerOptions.OPTION_ReportPotentialNullReference,
							CompilerOptions.IGNORE);
					this.options.put(
							CompilerOptions.OPTION_ReportRedundantNullCheck,
							CompilerOptions.IGNORE);
				}
				return;
			}
			break;
		case 'o' :
			if (token.equals("over-sync") /*|| token.equals("syncOverride")*/) { //$NON-NLS-1$ 
				this.options.put(
					CompilerOptions.OPTION_ReportMissingSynchronizedOnInheritedMethod,
					isEnabling ? CompilerOptions.ERROR : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("over-ann")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportMissingOverrideAnnotation,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				this.options.put(
					CompilerOptions.OPTION_ReportMissingOverrideAnnotationForInterfaceMethodImplementation,
					CompilerOptions.DISABLED);
				return;
			}
			break;
		case 'p' :
			if (token.equals("pkgDefaultMethod") || token.equals("packageDefaultMethod")/*backward compatible*/ ) { //$NON-NLS-1$ //$NON-NLS-2$
				this.options.put(
					CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);	
				return;
			} else if (token.equals("paramAssign")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportParameterAssignment,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			}
			break;
		case 'r' :
			if (token.equals("raw")) {//$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportRawTypeReference,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (/*token.equals("intfRedundant") ||*/ token.equals("redundantSuperinterface")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportRedundantSuperinterface,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);	
				return;
			}
			break;
		case 's' :
			if (token.equals("specialParamHiding")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportSpecialParameterHidingField,
					isEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);
				return;
			} else if (token.equals("syntheticAccess") || token.equals("synthetic-access")) { //$NON-NLS-1$ //$NON-NLS-2$
				this.options.put(
					CompilerOptions.OPTION_ReportSyntheticAccessEmulation,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("staticReceiver")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportNonStaticAccessToStatic,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else 	if (/*token.equals("over-sync") ||*/ token.equals("syncOverride")) { //$NON-NLS-1$ 
				this.options.put(
					CompilerOptions.OPTION_ReportMissingSynchronizedOnInheritedMethod,
					isEnabling ? CompilerOptions.ERROR : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("semicolon")) {//$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportEmptyStatement,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("serial")) {//$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportMissingSerialVersion,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("suppress")) {//$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_SuppressWarnings,
					isEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);
				return;
			} else if (token.equals("static-access")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportNonStaticAccessToStatic,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				this.options.put(
					CompilerOptions.OPTION_ReportIndirectStaticAccess,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("super")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportOverridingMethodWithoutSuperInvocation,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			}
			break;
		case 't' :
			if (token.startsWith("tasks")) { //$NON-NLS-1$
				String taskTags = Util.EMPTY_STRING;
				int start = token.indexOf('(');
				int end = token.indexOf(')');
				if (start >= 0 && end >= 0 && start < end){
					taskTags = token.substring(start+1, end).trim();
					taskTags = taskTags.replace('|',',');
				}
				if (taskTags.length() == 0){
					throw new IllegalArgumentException(this.bind("configure.invalidTaskTag", token)); //$NON-NLS-1$
				}
				this.options.put(
					CompilerOptions.OPTION_TaskTags,
					isEnabling ? taskTags : Util.EMPTY_STRING);
				return;
			} else if (token.equals("typeHiding")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportTypeParameterHiding,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			}
			break;
		case 'u' :
			if (token.equals("unusedLocal") || token.equals("unusedLocals")/*backward compatible*/) { //$NON-NLS-1$ //$NON-NLS-2$
				this.options.put(
					CompilerOptions.OPTION_ReportUnusedLocal,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("unusedArgument") || token.equals("unusedArguments")/*backward compatible*/) { //$NON-NLS-1$ //$NON-NLS-2$
				this.options.put(
					CompilerOptions.OPTION_ReportUnusedParameter,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("unusedImport") || token.equals("unusedImports")/*backward compatible*/) { //$NON-NLS-1$ //$NON-NLS-2$
				this.options.put(
					CompilerOptions.OPTION_ReportUnusedImport,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("unusedPrivate")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportUnusedPrivateMember,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("unusedLabel")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportUnusedLabel,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("uselessTypeCheck")) {//$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportUnnecessaryTypeCheck,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("unchecked") || token.equals("unsafe")) {//$NON-NLS-1$ //$NON-NLS-2$
				this.options.put(
					CompilerOptions.OPTION_ReportUncheckedTypeOperation,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("unnecessaryElse")) {//$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportUnnecessaryElse,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("unnecessaryOperator")) {//$NON-NLS-1$
				this.options.put(
						CompilerOptions.OPTION_ReportUnnecessaryOperator,
						isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
					return;
			} else if (token.equals("unusedThrown")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportUnusedDeclaredThrownException,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("unqualifiedField") || token.equals("unqualified-field-access")) { //$NON-NLS-1$ //$NON-NLS-2$
				this.options.put(
					CompilerOptions.OPTION_ReportUnqualifiedFieldAccess,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("unused")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportUnusedLocal,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				this.options.put(
					CompilerOptions.OPTION_ReportUnusedParameter,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				this.options.put(
					CompilerOptions.OPTION_ReportUnusedImport,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				this.options.put(
					CompilerOptions.OPTION_ReportUnusedPrivateMember,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				this.options.put(
					CompilerOptions.OPTION_ReportUnusedDeclaredThrownException,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				this.options.put(
						CompilerOptions.OPTION_ReportUnusedLabel,
						isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				this.options.put(
						CompilerOptions.OPTION_ReportUnusedTypeArgumentsForMethodInvocation,
						isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			} else if (token.equals("unusedTypeArgs")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportUnusedTypeArgumentsForMethodInvocation,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			}
			break;
		case 'v' :
			if (token.equals("varargsCast")) { //$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportVarargsArgumentNeedCast,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			}
			break;
		case 'w' :
			if (token.equals("warningToken")) {//$NON-NLS-1$
				this.options.put(
					CompilerOptions.OPTION_ReportUnhandledWarningToken,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				this.options.put(
					CompilerOptions.OPTION_ReportUnusedWarningToken,
					isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
				return;
			}
			break;
	}
	addPendingErrors(this.bind("configure.invalidWarning", token)); //$NON-NLS-1$
}

