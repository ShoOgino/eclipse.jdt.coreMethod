private void addNewEntry(ArrayList paths, String currentClasspathName, ArrayList currentRuleSpecs, String customEncoding, boolean isSource) {
	AccessRule[] accessRules = new AccessRule[currentRuleSpecs.size()];
	boolean rulesOK = true;
	Iterator i = currentRuleSpecs.iterator();
	int j = 0;
	while (i.hasNext()) {
		String ruleSpec = (String) i.next();
		char key = ruleSpec.charAt(0);
		String pattern = ruleSpec.substring(1);
		if (pattern.length() > 0) {
			switch (key) {
			case '+':
				accessRules[j++] = new AccessRule(pattern
						.toCharArray(), 0);
				break;
			case '~':
				accessRules[j++] = new AccessRule(pattern
						.toCharArray(),
						IProblem.DiscouragedReference);
				break;
			case '-':
				accessRules[j++] = new AccessRule(pattern
						.toCharArray(),
						IProblem.ForbiddenReference);
				break;
			case '?':
				accessRules[j++] = new AccessRule(pattern
						.toCharArray(),
						IProblem.ForbiddenReference, true/*keep looking for accessible type*/);
				break;
			default:
				rulesOK = false;
			}
		} else {
			rulesOK = false;
		}
	}
	if (rulesOK) {
		String templates[] = new String[AccessRuleSet.MESSAGE_TEMPLATES_LENGTH];
		templates[0] = Main.bind(
			"template.restrictedAccess.type", //$NON-NLS-1$
			new String[] {"{0}", currentClasspathName}); //$NON-NLS-1$ 
		templates[1] = Main.bind(
			"template.restrictedAccess.constructor", //$NON-NLS-1$
			new String[] {"{0}", currentClasspathName}); //$NON-NLS-1$ 
		templates[2] = Main.bind(
			"template.restrictedAccess.method", //$NON-NLS-1$
			new String[] {"{0}", "{1}", currentClasspathName}); //$NON-NLS-1$ //$NON-NLS-2$ 
		templates[3] = Main.bind(
			"template.restrictedAccess.field", //$NON-NLS-1$
			new String[] {"{0}", "{1}", currentClasspathName}); //$NON-NLS-1$ //$NON-NLS-2$ 
		AccessRuleSet accessRuleSet = new AccessRuleSet(accessRules, templates);
		FileSystem.Classpath currentClasspath = FileSystem.getClasspath(
				currentClasspathName,
				customEncoding,
				isSource ? ClasspathLocation.SOURCE : ClasspathLocation.BINARY | ClasspathLocation.SOURCE,
				accessRuleSet);
		if (currentClasspath != null) {
			paths.add(currentClasspath);
		} else {
			this.logger.logIncorrectClasspath(currentClasspathName);
			// we go on anyway
		}
	} else {
		this.logger.logIncorrectClasspath(currentClasspathName);
		// we go on anyway
	}
}

