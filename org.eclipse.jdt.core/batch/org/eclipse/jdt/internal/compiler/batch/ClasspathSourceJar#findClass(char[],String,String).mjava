	public NameEnvironmentAnswer findClass(char[] typeName, String qualifiedPackageName, String qualifiedBinaryFileName) {
		if (!isPackage(qualifiedPackageName)) 
			return null; // most common case

		ZipEntry sourceEntry = this.zipFile.getEntry(qualifiedBinaryFileName.substring(0, qualifiedBinaryFileName.length() - 6)  + SUFFIX_STRING_java);
		if (sourceEntry != null) {
			ZipEntry binaryEntry = this.zipFile.getEntry(qualifiedBinaryFileName);
			if (binaryEntry != null) {
				if (sourceEntry.getTime() > binaryEntry.getTime()) {
					try {
						return new NameEnvironmentAnswer(new CompilationUnit(Util.getInputStreamAsCharArray(this.zipFile.getInputStream(sourceEntry), -1, this.encoding),
								qualifiedBinaryFileName.substring(0, qualifiedBinaryFileName.length() - 6)  + SUFFIX_STRING_java, this.encoding),
								fetchAccessRestriction(qualifiedBinaryFileName));
					} catch (IOException e) {
						// treat as if source file is missing
					}
				} else {
					try {
						ClassFileReader reader = ClassFileReader.read(this.zipFile, qualifiedBinaryFileName);
						if (reader != null) return new NameEnvironmentAnswer(reader, 
								fetchAccessRestriction(qualifiedBinaryFileName));
					} catch(ClassFormatException e) {
						// treat as if class file is missing
					} catch (IOException e) {
						// treat as if class file is missing
					}
				}
			} else {
				try {
					return new NameEnvironmentAnswer(new CompilationUnit(Util.getInputStreamAsCharArray(this.zipFile.getInputStream(sourceEntry), -1, this.encoding),
							qualifiedBinaryFileName.substring(0, qualifiedBinaryFileName.length() - 6)  + SUFFIX_STRING_java, this.encoding),
							fetchAccessRestriction(qualifiedBinaryFileName));
				} catch (IOException e) {
					// treat as if source file is missing
				}
			}
		}
		return null;
	}

