	public BasicModule(ModuleDeclaration descriptor, IModulePathEntry root) {
		this.name = descriptor.moduleName;
		this.root = root;
		if (descriptor.requiresCount > 0) {
			ModuleReference[] refs = descriptor.requires;
			this.requires = new ModuleReferenceImpl[refs.length];
			for (int i = 0; i < refs.length; i++) {
				ModuleReferenceImpl ref = new ModuleReferenceImpl();
				ref.name = CharOperation.concatWith(refs[i].tokens, '.');
				ref.isPublic = refs[i].isPublic();
				this.requires[i] = ref;
			}
		} else {
			this.requires = new ModuleReferenceImpl[0];
		}
		if (descriptor.exportsCount > 0) {
			ExportReference[] refs = descriptor.exports;
			this.exports = new PackageExport[refs.length];
			for (int i = 0; i < refs.length; i++) {
				PackageExport exp = createPackageExport(refs, i);
				this.exports[i] = exp;
			}
		} else {
			this.exports = new PackageExport[0];
		}
		if (descriptor.usesCount > 0) {
			TypeReference[] u = descriptor.uses;
			this.uses = new char[u.length][];
			for(int i = 0; i < u.length; i++) {
				this.uses[i] = CharOperation.concatWith(u[i].getTypeName(), '.');
			}
		}
		if (descriptor.servicesCount > 0) {
			TypeReference[] services = descriptor.interfaces;
			TypeReference[] with = descriptor.implementations;
			this.provides = new Service[descriptor.servicesCount];
			for (int i = 0; i < descriptor.servicesCount; i++) {
				this.provides[i] = createService(services[i], with[i]);
			}
		}
		this.isAutomodule = false; // Just to be explicit
	}

