static Classpath getClasspath(String classpathName, String encoding, 
		boolean isSourceOnly, AccessRuleSet accessRuleSet, 
		String destinationPath) {
	Classpath result = null;
	File file = new File(convertPathSeparators(classpathName));
	if (file.isDirectory()) {
		if (file.exists()) {
			result = new ClasspathDirectory(file, encoding, 
					isSourceOnly ? ClasspathLocation.SOURCE : 
						ClasspathLocation.SOURCE | ClasspathLocation.BINARY, 
					accessRuleSet,
					destinationPath == null || destinationPath == Main.NONE ?
						destinationPath : // keep == comparison valid
						convertPathSeparators(destinationPath));
		}
	} else { 
		String lowercaseClasspathName = classpathName.toLowerCase();
		if (lowercaseClasspathName.endsWith(SUFFIX_STRING_jar)
				|| lowercaseClasspathName.endsWith(SUFFIX_STRING_zip)) {
			if (isSourceOnly) {
				// source only mode
				result = new ClasspathSourceJar(file, true, accessRuleSet, 
					encoding, 
					destinationPath == null || destinationPath == Main.NONE ?
						destinationPath : // keep == comparison valid
						convertPathSeparators(destinationPath));
			} else {
				// class file only mode
				if (destinationPath != null) {
					result = null; // [-d dir] not allowed for binaries only jar
				} else {
					result = new ClasspathJar(file, true, accessRuleSet, null);
				}
			}
		}
	}
	return result;
}

