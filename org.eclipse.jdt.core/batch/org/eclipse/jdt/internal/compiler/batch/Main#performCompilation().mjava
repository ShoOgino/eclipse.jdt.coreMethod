	/*
	 *  Low-level API performing the actual compilation
	 */
	public void performCompilation() throws InvalidInputException {

		this.startTime = System.currentTimeMillis();

		INameEnvironment environment = getLibraryAccess();
		this.batchCompiler =
			new Compiler(
				environment,
				getHandlingPolicy(),
				this.options,
				getBatchRequestor(),
				getProblemFactory(),
				this.out,
				false);
		
		// enable shared byte[]'s used by ClassFile to avoid allocating MBs during a build
		this.batchCompiler.lookupEnvironment.sharedArraysUsed = false;
		this.batchCompiler.lookupEnvironment.sharedClassFileHeader = new byte[30000];
		this.batchCompiler.lookupEnvironment.sharedClassFileContents = new byte[30000];

		this.compilerOptions = batchCompiler.options;

		// set the non-externally configurable options.
		this.compilerOptions.verbose = this.verbose;
		this.compilerOptions.produceReferenceInfo = this.produceRefInfo;
		try {
			this.logger.startLoggingSources();
			batchCompiler.compile(getCompilationUnits());
		} finally {
			this.logger.endLoggingSources();
		}

		this.logger.printStats(this);
		
		// cleanup
		environment.cleanup();
	}

