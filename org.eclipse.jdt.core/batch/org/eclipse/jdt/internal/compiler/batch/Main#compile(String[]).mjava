	/*
	 *  Low-level API performing the actual compilation
	 */
	public boolean compile(String[] argv) {

		// decode command line arguments
		try {
			configure(argv);
			if (this.proceed) {
//				if (this.verbose) {
//					System.out.println(new CompilerOptions(this.options));
//				}
				if (this.showProgress)
					this.out.println(Main.bind("progress.compiling")); //$NON-NLS-1$
				for (int i = 0; i < this.repetitions; i++) {
					this.globalProblemsCount = 0;
					this.globalErrorsCount = 0;
					this.globalWarningsCount = 0;
					this.lineCount = 0;
					this.exportedClassFilesCounter = 0;

					if (this.repetitions > 1) {
						this.out.flush();
						this.out.println(
							Main.bind(
								"compile.repetition", //$NON-NLS-1$
								String.valueOf(i + 1),
								String.valueOf(this.repetitions)));
					} 
					// request compilation
					performCompilation();
				}
				if (this.showProgress)
					this.out.println();
			}
			if (this.systemExitWhenFinished) {
				this.out.flush();
				this.err.flush();
				System.exit(this.globalErrorsCount > 0 ? -1 : 0);
			}
		} catch (InvalidInputException e) {
			this.err.println(e.getMessage());
			this.err.flush();
			if (this.systemExitWhenFinished) {
				System.exit(-1);
			}
			return false;
		} catch (RuntimeException e) { // internal compiler failure
			if (this.systemExitWhenFinished) {
				this.out.flush();
				this.err.flush();
				if (this.log != null) {
					this.err.close();
				}
				System.exit(-1);
			}
			return false;
			//e.printStackTrace();
		} finally {
			this.out.flush();
			this.err.flush();
			if (this.log != null) {
				this.err.close();
			}
		}
		if (this.globalErrorsCount == 0)
			return true;
		return false;
	}

