/*
 *  Low-level API performing the actual compilation
 */
protected void compile(String[] argv) {
	// decode command line arguments
	try {
		configure(argv);
		if (showProgress) System.out.print("Compiling");
		for (int i = 0; i < repetitions; i++){
			globalProblemsCount = 0;
			globalErrorsCount = 0;
			globalWarningsCount = 0;		
			lineCount = 0;
			if (repetitions > 1){
				out.flush();
				out.println("Repetition "+(i+1)+"/"+repetitions);
			}
			long startTime = System.currentTimeMillis();

			// request compilation
			performCompilation();
			if (timer) {
				time = System.currentTimeMillis() - startTime;
				if (lineCount != 0){
					out.println("Compiled " + lineCount + " lines in "+ time + " ms ("+ (((int)((lineCount*10000.0)/time))/10.0) + " lines/s)");
				} else {
					out.println("Total compilation time: " + time);
				}
			}
			if (globalProblemsCount > 0) {
				if (globalProblemsCount == 1) {
					out.print("1 problem (");
				} else {
					out.print(globalProblemsCount + " problems (");
				}
				if (globalErrorsCount > 0) {
					if (globalErrorsCount == 1) {
						out.print("1 error");
					} else {
						out.print(globalErrorsCount + " errors");
					}
				}
				if (globalWarningsCount > 0) {
					if (globalErrorsCount > 0) {
						out.print(", ");
					}
					if (globalWarningsCount == 1) {
						out.print("1 warning");
					} else {
						out.print(globalWarningsCount + " warnings");
					}
				}
				out.println(")");
			}
			if (exportedClassFilesCounter != 0 && (this.showProgress || this.timer || this.verbose)) {
				if (exportedClassFilesCounter == 1) {
					out.println("1 .class file generated");
				} else {
					out.println(exportedClassFilesCounter + " .class files generated");
				}
			}
		}
		if (showProgress) System.out.println();
		if (systemExitWhenFinished){
			out.flush();
			System.exit(globalErrorsCount > 0 ? -1 : 0);
		}
	} catch (InvalidInputException e) {
		out.println(e.getMessage());
		out.println("------------------------");
		printUsage();
		if (systemExitWhenFinished){
			System.exit(-1);			
		}
	} catch (ThreadDeath e) { // do not stop this one
		throw e;
	} catch (Throwable e) { // internal compiler error
		if (systemExitWhenFinished) {
			out.flush();
			System.exit(-1);
		}
	} finally {
		out.flush();
	}
}

