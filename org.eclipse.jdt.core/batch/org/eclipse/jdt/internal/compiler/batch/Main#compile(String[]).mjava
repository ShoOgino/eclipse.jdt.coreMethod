	/*
	 *  Low-level API performing the actual compilation
	 */
	public boolean compile(String[] argv) {

		// decode command line arguments
		try {
			configure(argv);
			if (this.proceed) {
				if (this.showProgress)
					this.out.println(Main.bind("progress.compiling")); //$NON-NLS-1$
				for (int i = 0; i < this.repetitions; i++) {
					this.globalProblemsCount = 0;
					this.globalErrorsCount = 0;
					this.globalWarningsCount = 0;
					this.lineCount = 0;
					this.exportedClassFilesCounter = 0;

					if (this.repetitions > 1) {
						this.out.flush();
						this.out.println(
							Main.bind(
								"compile.repetition", //$NON-NLS-1$
								String.valueOf(i + 1),
								String.valueOf(this.repetitions)));
					} 
					long startTime = System.currentTimeMillis();
					// request compilation
					performCompilation();
					if (this.timer) {

						this.time = System.currentTimeMillis() - startTime;
						if (this.lineCount != 0) {
							this.out.println(
								Main.bind(
									"compile.instantTime", 	//$NON-NLS-1$
									new String[] {
										String.valueOf(this.lineCount),
										String.valueOf(this.time),
										String.valueOf(((int)(this.lineCount * 10000.0 / this.time)) / 10.0)}));
						} else {
							this.out.println(Main.bind("compile.totalTime", String.valueOf(this.time))); //$NON-NLS-1$
						}
					}
					if (this.globalProblemsCount > 0) {
						if (this.globalProblemsCount == 1) {
							this.err.print(Main.bind("compile.oneProblem")); //$NON-NLS-1$
						} else {
							this.err.print(
								Main.bind("compile.severalProblems", String.valueOf(this.globalProblemsCount))); 	//$NON-NLS-1$
						}
						this.err.print(" ("); //$NON-NLS-1$
						if (this.globalErrorsCount > 0) {
							if (this.globalErrorsCount == 1) {
								this.err.print(Main.bind("compile.oneError")); //$NON-NLS-1$
							} else {
								this.err.print(
									Main.bind("compile.severalErrors", String.valueOf(this.globalErrorsCount))); 	//$NON-NLS-1$
							}
						}
						if (this.globalWarningsCount > 0) {
							if (this.globalErrorsCount > 0) {
								this.err.print(", "); //$NON-NLS-1$
							}
							if (this.globalWarningsCount == 1) {
								this.err.print(Main.bind("compile.oneWarning")); //$NON-NLS-1$
							} else {
								this.err.print(
									Main.bind("compile.severalWarnings", String.valueOf(this.globalWarningsCount))); 	//$NON-NLS-1$
							}
						}
						this.err.println(")"); //$NON-NLS-1$
					}
					if (this.exportedClassFilesCounter != 0
						&& (this.showProgress || this.timer || this.verbose)) {
						if (this.exportedClassFilesCounter == 1) {
							this.out.println(Main.bind("compile.oneClassFileGenerated")); //$NON-NLS-1$
						} else {
							this.out.println(
								Main.bind(
									"compile.severalClassFilesGenerated", //$NON-NLS-1$
									String.valueOf(this.exportedClassFilesCounter)));
						}
					}
				}
				if (this.showProgress)
					this.out.println();
			}
			if (this.systemExitWhenFinished) {
				this.out.flush();
				this.err.flush();
				System.exit(this.globalErrorsCount > 0 ? -1 : 0);
			}
		} catch (InvalidInputException e) {
			this.err.println(e.getMessage());
			this.err.println("------------------------"); //$NON-NLS-1$
			printUsage();
			if (this.systemExitWhenFinished) {
				System.exit(-1);
			}
			return false;
		} catch (ThreadDeath e) { // do not stop this one
			throw e;
		} catch (Throwable e) { // internal compiler error
			if (this.systemExitWhenFinished) {
				this.out.flush();
				this.err.flush();
				if (this.log != null) {
					this.err.close();
				}
				System.exit(-1);
			}
			return false;
			//e.printStackTrace();
		} finally {
			this.out.flush();
			this.err.flush();
			if (this.log != null) {
				this.err.close();
			}
		}
		if (this.globalErrorsCount == 0){
			return true;
		} else {
			return false;
		}
	}

