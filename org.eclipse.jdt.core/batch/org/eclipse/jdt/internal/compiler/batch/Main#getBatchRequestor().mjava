/*
 * Answer the component to which will be handed back compilation results from the compiler
 */
public ICompilerRequestor getBatchRequestor() {
	return new ICompilerRequestor() {
		int lineDelta = 0;
		public void acceptResult(CompilationResult compilationResult) {
			if (compilationResult.lineSeparatorPositions != null) {
				int unitLineCount = compilationResult.lineSeparatorPositions.length;
				Main.this.lineCount += unitLineCount;
				this.lineDelta += unitLineCount;
				if (Main.this.showProgress && this.lineDelta > 2000) {
					// in -log mode, dump a dot every 2000 lines compiled
					Main.this.logger.logProgress();
					this.lineDelta = 0;
				}
			}
			Main.this.logger.startLoggingSource(compilationResult);
			if (compilationResult.hasProblems() || compilationResult.hasTasks()) {
				int localErrorCount = Main.this.logger.logProblems(compilationResult.getAllProblems(), compilationResult.compilationUnit.getContents(), Main.this);
				// exit?
				if (Main.this.systemExitWhenFinished && !Main.this.proceedOnError && (localErrorCount > 0)) {
					// ensure dumping problems for enqueued units as well, since may contain primary errors (123476)
					CompilationUnitDeclaration[] queuedUnits = Main.this.batchCompiler.unitsToProcess;
					for (int i = 0, length = Main.this.batchCompiler.totalUnits; i < length; i++) {
						CompilationUnitDeclaration queuedUnit = queuedUnits[i];
						if (queuedUnit == null) continue;
						CompilationResult result = queuedUnit.compilationResult;
						if (result.hasProblems() && !result.hasBeenAccepted) {
							Main.this.logger.logProblems(result.getAllProblems(), result.compilationUnit.getContents(), Main.this);
						}
					}
					Main.this.logger.endLoggingSource();
					Main.this.logger.endLoggingSources();
					Main.this.logger.printStats();
					Main.this.logger.flush();
					Main.this.logger.close();
					System.exit(-1);
				}
			}
			outputClassFiles(compilationResult);
			Main.this.logger.endLoggingSource();
		}
	};
}

