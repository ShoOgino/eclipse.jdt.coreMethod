	/*
	 * Answer the component to which will be handed back compilation results from the compiler
	 */
	protected ICompilerRequestor getBatchRequestor() {
		return new ICompilerRequestor() {
			int lineDelta = 0;
			public void acceptResult(CompilationResult compilationResult) {
				if (compilationResult.lineSeparatorPositions != null) {
					int unitLineCount = compilationResult.lineSeparatorPositions.length;
					lineCount += unitLineCount;
					lineDelta += unitLineCount;
					if (showProgress
						&& lineDelta > 2000) { // in -log mode, dump a dot every 2000 lines compiled
						System.out.print('.');
						lineDelta = 0;
					}
				}
				if (compilationResult.hasProblems()) {
					IProblem[] problems = compilationResult.getProblems();
					int count = problems.length;
					int localErrorCount = 0;
					for (int i = 0; i < count; i++) {
						if (problems[i] != null) {
							globalProblemsCount++;
							if (localErrorCount == 0)
								out.println("----------"); //$NON-NLS-1$
							out.print(
								globalProblemsCount
									+ ". "  //$NON-NLS-1$
									+ (problems[i].isError()
										? Main.bind("requestor.error")  //$NON-NLS-1$
										: Main.bind("requestor.warning")));  //$NON-NLS-1$
							if (problems[i].isError()) {
								globalErrorsCount++;
							} else {
								globalWarningsCount++;
							}
							out.print(" "); //$NON-NLS-1$
							out.print(
								Main.bind("requestor.in", new String(problems[i].getOriginatingFileName()))); //$NON-NLS-1$
							try {
								out.println(
									((DefaultProblem) problems[i]).errorReportSource(
										compilationResult.compilationUnit));
								out.println(problems[i].getMessage());
							} catch (Exception e) {
								out.println(
									Main.bind("requestor.notRetrieveErrorMessage", problems[i].toString())); //$NON-NLS-1$
							}
							out.println("----------"); //$NON-NLS-1$
							if (problems[i].isError())
								localErrorCount++;
						}
					};
					// exit?
					if (systemExitWhenFinished && !proceedOnError && (localErrorCount > 0)) {
						out.flush();
						System.exit(-1);
					}
				}
				outputClassFiles(compilationResult);
			}
		};
	}

