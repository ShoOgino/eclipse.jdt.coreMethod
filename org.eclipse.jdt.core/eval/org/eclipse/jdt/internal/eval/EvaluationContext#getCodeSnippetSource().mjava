/**
 * Returns the source of the CodeSnippet class.
 * This is used to generate the binary of the CodeSnippetClass
 * @see getCodeSnippetBytes
 */
public static String getCodeSnippetSource() {
	return
		"package org.eclipse.jdt.internal.eval.target;\n" +
		"\n" +
		"/*\n" +
		" * (c) Copyright IBM Corp. 2000, 2001.\n" +
		" * All Rights Reserved.\n" +
		" */\n" +
		"/**\n" +
		" * The root of all code snippet classes. Code snippet classes\n" +
		" * are supposed to overide the run() method.\n" +
		" * <p>\n" +
		" * IMPORTANT NOTE:\n" +
		" * All methods in this class must be public since this class is going to be loaded by the\n" +
		" * bootstrap class loader, and the other code snippet support classes might be loaded by \n" +
		" * another class loader (so their runtime packages are going to be different).\n" +
		" */\n" +
		"public class CodeSnippet {\n" +
		"	private Class resultType = void.class;\n" +
		"	private Object resultValue = null;\n" +
		"/**\n" +
		" * Returns the result type of the code snippet evaluation.\n" +
		" */\n" +
		"public Class getResultType() {\n" +
		"	return this.resultType;\n" +
		"}\n" +
		"/**\n" +
		" * Returns the result value of the code snippet evaluation.\n" +
		" */\n" +
		"public Object getResultValue() {\n" +
		"	return this.resultValue;\n" +
		"}\n" +
		"/**\n" +
		" * The code snippet. Subclasses must override this method with a transformed code snippet\n" +
		" * that stores the result using setResult(Class, Object).\n" +
		" */\n" +
		"public void run() {\n" +
		"}\n" +
		"/**\n" +
		" * Stores the result type and value of the code snippet evaluation.\n" +
		" */\n" +
		"public void setResult(Object resultValue, Class resultType) {\n" +
		"	this.resultValue = resultValue;\n" +
		"	this.resultType = resultType;\n" +
		"}\n" +
		"}\n";
}

