/**
 * Normal field binding did not work, try to bind to a field of the delegate receiver.
 */
public TypeBinding reportError(BlockScope scope) {

	if (this.evaluationContext.declaringTypeName != null) {
		delegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);
		if (delegateThis == null){ ; // if not found then internal error, field should have been found
			return super.reportError(scope);
		}
	} else {
		return super.reportError(scope);
	}

	if ((binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) binding).problemId() == NotFound)
		|| (binding instanceof ProblemBinding && ((ProblemBinding) binding).problemId() == NotFound)){
		// will not support innerclass emulation inside delegate
		FieldBinding fieldBinding = scope.getField(delegateThis.type, this.tokens[0], this);
		if (!fieldBinding.isValidBinding()) {
			if (((ProblemFieldBinding) fieldBinding).problemId() == NotVisible) {
				// manage the access to a private field of the enclosing type
				CodeSnippetScope localScope = new CodeSnippetScope(scope);
				this.codegenBinding = this.binding = localScope.getFieldForCodeSnippet(delegateThis.type, this.tokens[0], this);
				if (binding.isValidBinding()) {
					return checkFieldAccess(scope);						
				} else {
					return super.reportError(scope);
				}
			} else {
				return super.reportError(scope);
			}
		}
		this.codegenBinding = binding = fieldBinding;
		return checkFieldAccess(scope);
	}

	TypeBinding result;
	if (binding instanceof ProblemFieldBinding
		&& ((ProblemFieldBinding) binding).problemId() == NotVisible) {
		result = resolveTypeVisibility(scope);
		if (result == null)
			return super.reportError(scope);
		if (result.isValidBinding()) {
			return result;
		}
	}

	return super.reportError(scope);
}

