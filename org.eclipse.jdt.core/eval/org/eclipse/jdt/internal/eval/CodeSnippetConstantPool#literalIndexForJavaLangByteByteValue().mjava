	/**
	 * This method returns the index into the constantPool corresponding to the 
	 * method descriptor. It can be either an interface method reference constant
	 * or a method reference constant.
	 *
	 * @return <CODE>int</CODE>
	 */
	public int literalIndexForJavaLangByteByteValue() {
		int index;
		int nameAndTypeIndex;
		int classIndex;
		// Looking into the method ref table
		if ((index = wellKnownMethods[BYTEVALUE_BYTE_METHOD]) == 0) {
			classIndex = literalIndexForJavaLangByte();
			if ((nameAndTypeIndex =
				wellKnownMethodNameAndTypes[BYTEVALUE_BYTE_METHOD_NAME_AND_TYPE])
				== 0) {
				int nameIndex = literalIndex(BYTEVALUE_BYTE_METHOD_NAME);
				int typeIndex = literalIndex(BYTEVALUE_BYTE_METHOD_SIGNATURE);
				nameAndTypeIndex =
					wellKnownMethodNameAndTypes[BYTEVALUE_BYTE_METHOD_NAME_AND_TYPE] =
						currentIndex++;
				writeU1(NameAndTypeTag);
				writeU2(nameIndex);
				writeU2(typeIndex);
			}
			index = wellKnownMethods[BYTEVALUE_BYTE_METHOD] = currentIndex++;
			// Write the method ref constant into the constant pool
			// First add the tag
			writeU1(MethodRefTag);
			// Then write the class index
			writeU2(classIndex);
			// The write the nameAndType index
			writeU2(nameAndTypeIndex);
		}
		return index;
	}

