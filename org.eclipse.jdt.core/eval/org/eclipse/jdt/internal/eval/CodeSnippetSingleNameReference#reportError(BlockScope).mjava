/**
 * Normal field binding did not work, try to bind to a field of the delegate receiver.
 */
public TypeBinding reportError(BlockScope scope) {

	constant = Constant.NotAConstant;
	if (binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) binding).problemId() == NotFound){
		if (this.evaluationContext.declaringTypeName != null) {
			delegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);
			if (delegateThis != null){ ; // if not found then internal error, field should have been found
				// will not support innerclass emulation inside delegate
				binding = scope.getField(delegateThis.type, this.token, this);
				if (!binding.isValidBinding()) return super.reportError(scope);
				return checkFieldAccess(scope);
			}
		}
	}
	if (binding instanceof ProblemBinding && ((ProblemBinding) binding).problemId() == NotFound){
		if (this.evaluationContext.declaringTypeName != null) {
			delegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);
			if (delegateThis != null){ ; // if not found then internal error, field should have been found
				// will not support innerclass emulation inside delegate
				FieldBinding fieldBinding = scope.getField(delegateThis.type, this.token, this);
				if (!fieldBinding.isValidBinding()) {
					if (((ProblemFieldBinding) fieldBinding).problemId() == NotVisible) {
						// manage the access to a private field of the enclosing type
						CodeSnippetScope localScope = new CodeSnippetScope(scope);
						binding = localScope.getFieldForCodeSnippet(delegateThis.type, this.token, this);
						return checkFieldAccess(scope);						
					} else {
						return super.reportError(scope);
					}
				}
				binding = fieldBinding;
				return checkFieldAccess(scope);
			}
		}
	}
	return super.reportError(scope);
}

