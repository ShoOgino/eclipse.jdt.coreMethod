	/**
	 * This method returns the index into the constantPool corresponding to the 
	 * method descriptor. It can be either an interface method reference constant
	 * or a method reference constant.
	 *
	 * @return <CODE>int</CODE>
	 */
	public int literalIndexJavaLangReflectFieldGetter(int typeID) {
		int index = 0;
		int nameAndTypeIndex = 0;
		int classIndex = 0;
		switch (typeID) {
			case T_int :
				if ((index = wellKnownMethods[GET_INT_METHOD]) == 0) {
					classIndex = literalIndexForJavaLangReflectField();
					if ((nameAndTypeIndex =
						wellKnownMethodNameAndTypes[GET_INT_METHOD_NAME_AND_TYPE])
						== 0) {
						int nameIndex = literalIndex(GET_INT_METHOD_NAME);
						int typeIndex = literalIndex(GET_INT_METHOD_SIGNATURE);
						nameAndTypeIndex =
							wellKnownMethodNameAndTypes[GET_INT_METHOD_NAME_AND_TYPE] = currentIndex++;
						writeU1(NameAndTypeTag);
						writeU2(nameIndex);
						writeU2(typeIndex);
					}
					index = wellKnownMethods[GET_INT_METHOD] = currentIndex++;
					// Write the method ref constant into the constant pool
					// First add the tag
					writeU1(MethodRefTag);
					// Then write the class index
					writeU2(classIndex);
					// The write the nameAndType index
					writeU2(nameAndTypeIndex);
				}
				break;
			case T_byte :
				if ((index = wellKnownMethods[GET_BYTE_METHOD]) == 0) {
					classIndex = literalIndexForJavaLangReflectField();
					if ((nameAndTypeIndex =
						wellKnownMethodNameAndTypes[GET_BYTE_METHOD_NAME_AND_TYPE])
						== 0) {
						int nameIndex = literalIndex(GET_BYTE_METHOD_NAME);
						int typeIndex = literalIndex(GET_BYTE_METHOD_SIGNATURE);
						nameAndTypeIndex =
							wellKnownMethodNameAndTypes[GET_BYTE_METHOD_NAME_AND_TYPE] = currentIndex++;
						writeU1(NameAndTypeTag);
						writeU2(nameIndex);
						writeU2(typeIndex);
					}
					index = wellKnownMethods[GET_BYTE_METHOD] = currentIndex++;
					// Write the method ref constant into the constant pool
					// First add the tag
					writeU1(MethodRefTag);
					// Then write the class index
					writeU2(classIndex);
					// The write the nameAndType index
					writeU2(nameAndTypeIndex);
				}
				break;
			case T_short :
				if ((index = wellKnownMethods[GET_SHORT_METHOD]) == 0) {
					classIndex = literalIndexForJavaLangReflectField();
					if ((nameAndTypeIndex =
						wellKnownMethodNameAndTypes[GET_SHORT_METHOD_NAME_AND_TYPE])
						== 0) {
						int nameIndex = literalIndex(GET_SHORT_METHOD_NAME);
						int typeIndex = literalIndex(GET_SHORT_METHOD_SIGNATURE);
						nameAndTypeIndex =
							wellKnownMethodNameAndTypes[GET_SHORT_METHOD_NAME_AND_TYPE] = currentIndex++;
						writeU1(NameAndTypeTag);
						writeU2(nameIndex);
						writeU2(typeIndex);
					}
					index = wellKnownMethods[GET_SHORT_METHOD] = currentIndex++;
					// Write the method ref constant into the constant pool
					// First add the tag
					writeU1(MethodRefTag);
					// Then write the class index
					writeU2(classIndex);
					// The write the nameAndType index
					writeU2(nameAndTypeIndex);
				}
				break;
			case T_long :
				if ((index = wellKnownMethods[GET_LONG_METHOD]) == 0) {
					classIndex = literalIndexForJavaLangReflectField();
					if ((nameAndTypeIndex =
						wellKnownMethodNameAndTypes[GET_LONG_METHOD_NAME_AND_TYPE])
						== 0) {
						int nameIndex = literalIndex(GET_LONG_METHOD_NAME);
						int typeIndex = literalIndex(GET_LONG_METHOD_SIGNATURE);
						nameAndTypeIndex =
							wellKnownMethodNameAndTypes[GET_LONG_METHOD_NAME_AND_TYPE] = currentIndex++;
						writeU1(NameAndTypeTag);
						writeU2(nameIndex);
						writeU2(typeIndex);
					}
					index = wellKnownMethods[GET_LONG_METHOD] = currentIndex++;
					// Write the method ref constant into the constant pool
					// First add the tag
					writeU1(MethodRefTag);
					// Then write the class index
					writeU2(classIndex);
					// The write the nameAndType index
					writeU2(nameAndTypeIndex);
				}
				break;
			case T_float :
				if ((index = wellKnownMethods[GET_FLOAT_METHOD]) == 0) {
					classIndex = literalIndexForJavaLangReflectField();
					if ((nameAndTypeIndex =
						wellKnownMethodNameAndTypes[GET_FLOAT_METHOD_NAME_AND_TYPE])
						== 0) {
						int nameIndex = literalIndex(GET_FLOAT_METHOD_NAME);
						int typeIndex = literalIndex(GET_FLOAT_METHOD_SIGNATURE);
						nameAndTypeIndex =
							wellKnownMethodNameAndTypes[GET_FLOAT_METHOD_NAME_AND_TYPE] = currentIndex++;
						writeU1(NameAndTypeTag);
						writeU2(nameIndex);
						writeU2(typeIndex);
					}
					index = wellKnownMethods[GET_FLOAT_METHOD] = currentIndex++;
					// Write the method ref constant into the constant pool
					// First add the tag
					writeU1(MethodRefTag);
					// Then write the class index
					writeU2(classIndex);
					// The write the nameAndType index
					writeU2(nameAndTypeIndex);
				}
				break;
			case T_double :
				if ((index = wellKnownMethods[GET_DOUBLE_METHOD]) == 0) {
					classIndex = literalIndexForJavaLangReflectField();
					if ((nameAndTypeIndex =
						wellKnownMethodNameAndTypes[GET_DOUBLE_METHOD_NAME_AND_TYPE])
						== 0) {
						int nameIndex = literalIndex(GET_DOUBLE_METHOD_NAME);
						int typeIndex = literalIndex(GET_DOUBLE_METHOD_SIGNATURE);
						nameAndTypeIndex =
							wellKnownMethodNameAndTypes[GET_DOUBLE_METHOD_NAME_AND_TYPE] = currentIndex++;
						writeU1(NameAndTypeTag);
						writeU2(nameIndex);
						writeU2(typeIndex);
					}
					index = wellKnownMethods[GET_DOUBLE_METHOD] = currentIndex++;
					// Write the method ref constant into the constant pool
					// First add the tag
					writeU1(MethodRefTag);
					// Then write the class index
					writeU2(classIndex);
					// The write the nameAndType index
					writeU2(nameAndTypeIndex);
				}
				break;
			case T_char :
				if ((index = wellKnownMethods[GET_CHAR_METHOD]) == 0) {
					classIndex = literalIndexForJavaLangReflectField();
					if ((nameAndTypeIndex =
						wellKnownMethodNameAndTypes[GET_CHAR_METHOD_NAME_AND_TYPE])
						== 0) {
						int nameIndex = literalIndex(GET_CHAR_METHOD_NAME);
						int typeIndex = literalIndex(GET_CHAR_METHOD_SIGNATURE);
						nameAndTypeIndex =
							wellKnownMethodNameAndTypes[GET_CHAR_METHOD_NAME_AND_TYPE] = currentIndex++;
						writeU1(NameAndTypeTag);
						writeU2(nameIndex);
						writeU2(typeIndex);
					}
					index = wellKnownMethods[GET_CHAR_METHOD] = currentIndex++;
					// Write the method ref constant into the constant pool
					// First add the tag
					writeU1(MethodRefTag);
					// Then write the class index
					writeU2(classIndex);
					// The write the nameAndType index
					writeU2(nameAndTypeIndex);
				}
				break;
			case T_boolean :
				if ((index = wellKnownMethods[GET_BOOLEAN_METHOD]) == 0) {
					classIndex = literalIndexForJavaLangReflectField();
					if ((nameAndTypeIndex =
						wellKnownMethodNameAndTypes[GET_BOOLEAN_METHOD_NAME_AND_TYPE])
						== 0) {
						int nameIndex = literalIndex(GET_BOOLEAN_METHOD_NAME);
						int typeIndex = literalIndex(GET_BOOLEAN_METHOD_SIGNATURE);
						nameAndTypeIndex =
							wellKnownMethodNameAndTypes[GET_BOOLEAN_METHOD_NAME_AND_TYPE] = currentIndex++;
						writeU1(NameAndTypeTag);
						writeU2(nameIndex);
						writeU2(typeIndex);
					}
					index = wellKnownMethods[GET_BOOLEAN_METHOD] = currentIndex++;
					// Write the method ref constant into the constant pool
					// First add the tag
					writeU1(MethodRefTag);
					// Then write the class index
					writeU2(classIndex);
					// The write the nameAndType index
					writeU2(nameAndTypeIndex);
				}
				break;
			default :
				if ((index = wellKnownMethods[GET_OBJECT_METHOD]) == 0) {
					classIndex = literalIndexForJavaLangReflectField();
					if ((nameAndTypeIndex =
						wellKnownMethodNameAndTypes[GET_OBJECT_METHOD_NAME_AND_TYPE])
						== 0) {
						int nameIndex = literalIndex(GET_OBJECT_METHOD_NAME);
						int typeIndex = literalIndex(GET_OBJECT_METHOD_SIGNATURE);
						nameAndTypeIndex =
							wellKnownMethodNameAndTypes[GET_OBJECT_METHOD_NAME_AND_TYPE] = currentIndex++;
						writeU1(NameAndTypeTag);
						writeU2(nameIndex);
						writeU2(typeIndex);
					}
					index = wellKnownMethods[GET_OBJECT_METHOD] = currentIndex++;
					// Write the method ref constant into the constant pool
					// First add the tag
					writeU1(MethodRefTag);
					// Then write the class index
					writeU2(classIndex);
					// The write the nameAndType index
					writeU2(nameAndTypeIndex);
				}
		}
		return index;
	}

