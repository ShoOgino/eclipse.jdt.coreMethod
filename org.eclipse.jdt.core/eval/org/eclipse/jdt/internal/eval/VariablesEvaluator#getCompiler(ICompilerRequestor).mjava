	/**
	 * Creates and returns a compiler for this evaluator.
	 */
	Compiler getCompiler(ICompilerRequestor requestor) {
		Compiler compiler = super.getCompiler(requestor);

		// Initialize the compiler's lookup environment with the already compiled super class
		IBinaryType binaryType = this.context.getRootCodeSnippetBinary();
		if (binaryType != null) {
			compiler.lookupEnvironment.cacheBinaryType(binaryType);
		}

		// and the installed global variable classes
		VariablesInfo installedVars = this.context.installedVars;
		if (installedVars != null) {
			ClassFile[] classFiles = installedVars.classFiles;
			for (int i = 0; i < classFiles.length; i++) {
				ClassFile classFile = classFiles[i];
				IBinaryType binary = null;
				try {
					binary = new ClassFileReader(classFile.getBytes(), null);
				} catch (ClassFormatException e) {
					e.printStackTrace(); // Should never happen since we compiled this type
				}
				compiler.lookupEnvironment.cacheBinaryType(binary);
			}
		}

		return compiler;
	}

