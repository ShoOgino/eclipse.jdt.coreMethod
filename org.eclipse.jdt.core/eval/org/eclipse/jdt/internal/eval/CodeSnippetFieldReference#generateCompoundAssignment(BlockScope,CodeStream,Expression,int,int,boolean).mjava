	public void generateCompoundAssignment(
		BlockScope currentScope,
		CodeStream codeStream,
		Expression expression,
		int operator,
		int assignmentImplicitConversion,
		boolean valueRequired) {

		boolean isStatic;
		if (binding.canBeSeenBy(receiverType, this, currentScope)) {
			receiver.generateCode(
				currentScope,
				codeStream,
				!(isStatic = binding.isStatic()));
			if (isStatic) {
				codeStream.getstatic(binding);
			} else {
				codeStream.dup();
				codeStream.getfield(binding);
			}
			int operationTypeID;
			if ((operationTypeID = implicitConversion >> 4) == T_String) {
				codeStream.generateStringAppend(currentScope, null, expression);
			} else {
				// promote the array reference to the suitable operation type
				codeStream.generateImplicitConversion(implicitConversion);
				// generate the increment value (will by itself  be promoted to the operation value)
				if (expression == IntLiteral.One) { // prefix operation
					codeStream.generateConstant(expression.constant, implicitConversion);
				} else {
					expression.generateCode(currentScope, codeStream, true);
				}
				// perform the operation
				codeStream.sendOperator(operator, operationTypeID);
				// cast the value back to the array reference type
				codeStream.generateImplicitConversion(assignmentImplicitConversion);
			}
			fieldStore(codeStream, binding, null, valueRequired);
		} else {
			receiver.generateCode(
				currentScope,
				codeStream,
				!(isStatic = binding.isStatic()));
			if (isStatic) {
				// used to store the value
				 ((CodeSnippetCodeStream) codeStream).generateEmulationForField(binding);
				codeStream.aconst_null();

				// used to retrieve the actual value
				codeStream.aconst_null();
				((CodeSnippetCodeStream) codeStream).generateEmulatedReadAccessForField(
					binding);
			} else {
				// used to store the value
				 ((CodeSnippetCodeStream) codeStream).generateEmulationForField(binding);
				receiver.generateCode(
					currentScope,
					codeStream,
					!(isStatic = binding.isStatic()));

				// used to retrieve the actual value
				codeStream.dup();
				((CodeSnippetCodeStream) codeStream).generateEmulatedReadAccessForField(
					binding);

			}
			int operationTypeID;
			if ((operationTypeID = implicitConversion >> 4) == T_String) {
				codeStream.generateStringAppend(currentScope, null, expression);
			} else {
				// promote the array reference to the suitable operation type
				codeStream.generateImplicitConversion(implicitConversion);
				// generate the increment value (will by itself  be promoted to the operation value)
				if (expression == IntLiteral.One) { // prefix operation
					codeStream.generateConstant(expression.constant, implicitConversion);
				} else {
					expression.generateCode(currentScope, codeStream, true);
				}
				// perform the operation
				codeStream.sendOperator(operator, operationTypeID);
				// cast the value back to the array reference type
				codeStream.generateImplicitConversion(assignmentImplicitConversion);
			}
			// current stack is:
			// field receiver value
			if (valueRequired) {
				if ((binding.type == LongBinding) || (binding.type == DoubleBinding)) {
					codeStream.dup2_x2();
				} else {
					codeStream.dup_x2();
				}
			}
			// current stack is:
			// value field receiver value				
			((CodeSnippetCodeStream) codeStream).generateEmulatedWriteAccessForField(
				binding);
		}
	}

