private void buildCUSource() {
	StringBuffer buffer = new StringBuffer();

	// package declaration
	if (this.packageName != null && this.packageName.length != 0) {
		buffer.append("package "/*nonNLS*/);
		buffer.append(this.packageName);
		buffer.append(";"/*nonNLS*/).append(JavaModelManager.LINE_SEPARATOR);
		this.lineNumberOffset++;
	}

	// import declarations
	char[][] imports = this.imports;
	for (int i = 0; i < imports.length; i++) {
		buffer.append("import "/*nonNLS*/);
		buffer.append(imports[i]);
		buffer.append(';').append(JavaModelManager.LINE_SEPARATOR);
		this.lineNumberOffset++;
	}

	// class declaration
	buffer.append("public class "/*nonNLS*/);
	buffer.append(this.className);

	// super class is either a global variable class or the CodeSnippet class
	if (this.varClassName != null) {
		buffer.append(" extends "/*nonNLS*/);
		buffer.append(this.varClassName);
	} else {
		buffer.append(" extends "/*nonNLS*/);
		buffer.append(PACKAGE_NAME);
		buffer.append("."/*nonNLS*/);
		buffer.append(ROOT_CLASS_NAME);
	}
	buffer.append(" {"/*nonNLS*/).append(JavaModelManager.LINE_SEPARATOR);
	this.lineNumberOffset++;

	if (this.declaringTypeName != null){
		buffer.append("  "/*nonNLS*/);
		buffer.append(this.declaringTypeName);
		buffer.append(" "/*nonNLS*/);
		buffer.append(DELEGATE_THIS); // val$this
		buffer.append(';').append(JavaModelManager.LINE_SEPARATOR);
		this.lineNumberOffset++;
	}
	// add some storage location for local variable persisted state
	if (localVarNames != null) {
		for (int i = 0, max = localVarNames.length; i < max; i++) {
			buffer.append("    "/*nonNLS*/);
			buffer.append(localVarTypeNames[i]);
			buffer.append(" "/*nonNLS*/);
			buffer.append(LOCAL_VAR_PREFIX); // val$...
			buffer.append(localVarNames[i]);
			buffer.append(';').append(JavaModelManager.LINE_SEPARATOR);
			this.lineNumberOffset++;
		}
	}
	// run() method declaration
	buffer.append("public void run() throws Throwable {"/*nonNLS*/).append(JavaModelManager.LINE_SEPARATOR);
	this.lineNumberOffset++;
	startPosOffset = buffer.length();
	buffer.append(codeSnippet);
	buffer.append('}').append(JavaModelManager.LINE_SEPARATOR);

	// end of class declaration
	buffer.append('}').append(JavaModelManager.LINE_SEPARATOR);

	// store result
	int length = buffer.length();
	this.cuSource = new char[length];
	buffer.getChars(0, length, this.cuSource, 0);
}

