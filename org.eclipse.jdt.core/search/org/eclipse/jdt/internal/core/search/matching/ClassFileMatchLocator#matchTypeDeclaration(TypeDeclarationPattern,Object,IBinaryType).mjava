boolean matchTypeDeclaration(TypeDeclarationPattern pattern, Object binaryInfo, IBinaryType enclosingBinaryType) {
	if (!(binaryInfo instanceof IBinaryType)) return false;

	IBinaryType type = (IBinaryType) binaryInfo;
	char[] fullyQualifiedTypeName = convertClassFileFormat(type.getName());
	if (pattern.enclosingTypeNames == null || pattern instanceof QualifiedTypeDeclarationPattern) {
		if (!checkTypeName(pattern.simpleName, pattern.pkg, fullyQualifiedTypeName, pattern.isCaseSensitive())) return false;
	} else {
		char[] enclosingTypeName = CharOperation.concatWith(pattern.enclosingTypeNames, '.');
		char[] patternString = pattern.pkg == null
			? enclosingTypeName
			: CharOperation.concat(pattern.pkg, enclosingTypeName, '.');
		if (!checkTypeName(pattern.simpleName, patternString, fullyQualifiedTypeName, pattern.isCaseSensitive())) return false;
	}

	int kind  = type.getKind();
	switch (pattern.typeSuffix) {
		case CLASS_SUFFIX:
			return kind == IGenericType.CLASS_DECL;
		case INTERFACE_SUFFIX:
			return kind == IGenericType.INTERFACE_DECL;
		case ENUM_SUFFIX:
			return kind == IGenericType.ENUM_DECL;
		case ANNOTATION_TYPE_SUFFIX:
			return kind == IGenericType.ANNOTATION_TYPE_DECL;
		case CLASS_AND_INTERFACE_SUFFIX:
			return kind == IGenericType.CLASS_DECL || kind == IGenericType.INTERFACE_DECL;
		case CLASS_AND_ENUM_SUFFIX:
			return kind == IGenericType.CLASS_DECL || kind == IGenericType.ENUM_DECL;
		case TYPE_SUFFIX: // nothing
	}
	return true;
}

