/**
 * @see SearchPattern#matchesBinary(Object, Object)
 */
public boolean matchesBinary(Object binaryInfo, Object enclosingBinaryInfo) {
	if (!(binaryInfo instanceof IBinaryMethod)) return false;

	IBinaryMethod method = (IBinaryMethod)binaryInfo;
	if (!this.matchesName(this.selector, method.getSelector())) return false;

	// declaring type
	if (enclosingBinaryInfo != null && (this.declaringSimpleName != null || this.declaringQualification != null)) {
		IBinaryType declaringType = (IBinaryType)enclosingBinaryInfo;
		char[] declaringTypeName = (char[])declaringType.getName().clone();
		CharOperation.replace(declaringTypeName, '/', '.');
		if (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringTypeName))
			return false;
	}

	// parameter types
	int parameterCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;
	if (parameterCount > -1 || this.declaringSimpleName == null) {
		String methodDescriptor = new String(method.getMethodDescriptor()).replace('/', '.');

		if (parameterCount > -1) {
			String[] arguments = Signature.getParameterTypes(methodDescriptor);
			int argumentCount = arguments.length;
			if (parameterCount != argumentCount) return false;
			for (int i = 0; i < parameterCount; i++) {
				char[] qualification = this.parameterQualifications[i];
				char[] type = this.parameterSimpleNames[i];
				if (!this.matchesType(type, qualification, Signature.toString(arguments[i]).toCharArray()))
					return false;
			}
		}

		// look at return type only if declaring type is not specified
		if (this.declaringSimpleName == null) {
			String returnTypeSignature = Signature.toString(Signature.getReturnType(methodDescriptor));
			if (!this.matchesType(this.returnSimpleName, this.returnQualification, returnTypeSignature.toCharArray())) {
				return false;
			}
		}
	}
	return true;
}

