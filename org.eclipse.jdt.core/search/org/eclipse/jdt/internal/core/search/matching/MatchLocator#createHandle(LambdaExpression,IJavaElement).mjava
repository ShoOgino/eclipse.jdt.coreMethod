/**
 * Creates an IMethod from the given lambda declaration and type.
 */
protected IJavaElement createHandle(LambdaExpression lambdaExpression, IJavaElement parent) {
	if (!(parent instanceof IType)) return parent;

	IType type = (IType) parent;
	Argument[] arguments = lambdaExpression.arguments();
	int syntheticArgumentSize = lambdaExpression.getSyntheticArgumentSize();
	MethodBinding descriptor = lambdaExpression.descriptor;
	int argCount = arguments == null ? 0 : arguments.length;
	if (type.isBinary()) {
		ClassFileReader reader = classFileReader(type);
		if (reader != null) {
			// build arguments names
			char[][] argumentTypeNames = new char[argCount - syntheticArgumentSize][];
			for (int i = syntheticArgumentSize; i < argCount; i++) {
				char[] typeName = null;
				if (arguments != null) {
					TypeReference typeRef = arguments[i].type;
					typeName = CharOperation.concatWith(typeRef.getTypeName(), '.');
					for (int k = 0, dim = typeRef.dimensions(); k < dim; k++)
						typeName = CharOperation.concat(typeName, new char[] {'[', ']'});
				}
				if (typeName == null) {
					// invalid type name
					return null;
				}
				argumentTypeNames[i - syntheticArgumentSize] = typeName;
			}
			// return binary method
			IMethod binaryMethod = createBinaryMethodHandle(type, descriptor.selector, argumentTypeNames);
			if (binaryMethod == null) {
				// when first attempt fails, try with similar matches if any...
				PossibleMatch similarMatch = this.currentPossibleMatch.getSimilarMatch();
				while (similarMatch != null) {
					type = ((ClassFile)similarMatch.openable).getType();
					binaryMethod = createBinaryMethodHandle(type, descriptor.selector, argumentTypeNames);
					if (binaryMethod != null) {
						return binaryMethod;
					}
					similarMatch = similarMatch.getSimilarMatch();
				}
			}
			return binaryMethod;
		}
		if (BasicSearchEngine.VERBOSE) {
			System.out.println("Not able to createHandle for the lambda expression " + //$NON-NLS-1$
					CharOperation.charToString(descriptor.selector) + " May miss some results");  //$NON-NLS-1$
		}
		return null;
	}

	String[] parameterTypeSignatures = new String[argCount - syntheticArgumentSize];
	if (arguments != null) {
		for (int i = syntheticArgumentSize; i < argCount; i++) {
			TypeReference typeRef = arguments[i].type;
			char[] typeName = CharOperation.concatWith(typeRef.getParameterizedTypeName(), '.');
			parameterTypeSignatures[i - syntheticArgumentSize] = Signature.createTypeSignature(typeName, false);
		}
	}

	return createMethodHandle(type, new String(descriptor.selector), parameterTypeSignatures);
}

