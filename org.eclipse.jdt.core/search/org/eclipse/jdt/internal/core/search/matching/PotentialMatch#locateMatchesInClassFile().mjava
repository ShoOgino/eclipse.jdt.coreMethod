/**
 * Locate declaration in the current class file. This class file is always in a jar.
 */
public void locateMatchesInClassFile() throws CoreException {
	MatchLocator locator = this.matchingNodeSet.locator;
	org.eclipse.jdt.internal.core.ClassFile classFile = (org.eclipse.jdt.internal.core.ClassFile) this.openable;
	IBinaryType info = locator.getBinaryInfo(classFile, this.resource);
	if (info == null) return; // unable to go further

	// check class definition
	SearchPattern pattern = locator.pattern;
	BinaryType binaryType = (BinaryType) classFile.getType();
	if (pattern.matchesBinary(info, null))
		locator.reportBinaryMatch(binaryType, info, IJavaSearchResultCollector.EXACT_MATCH);

	int accuracy = IJavaSearchResultCollector.EXACT_MATCH;
	if (pattern.mustResolve) {
		try {
			BinaryTypeBinding binding = locator.cacheBinaryType(binaryType);
			if (binding != null) {
				// filter out element not in hierarchy scope
				if (!locator.typeInHierarchy(binding)) return;

				MethodBinding[] methods = binding.methods();
				for (int i = 0, l = methods.length; i < l; i++) {
					MethodBinding method = methods[i];
					int level = pattern.matchLevel(method);
					if (level >= SearchPattern.POTENTIAL_MATCH) {
						IMethod methodHandle = binaryType.getMethod(
							new String(method.isConstructor() ? binding.compoundName[binding.compoundName.length-1] : method.selector),
							Signature.getParameterTypes(new String(method.signature()).replace('/', '.')));
						locator.reportBinaryMatch(
							methodHandle, 
							info, 
							level == SearchPattern.ACCURATE_MATCH
								? IJavaSearchResultCollector.EXACT_MATCH
								: IJavaSearchResultCollector.POTENTIAL_MATCH);
					}
				}

				FieldBinding[] fields = binding.fields();
				for (int i = 0, l = fields.length; i < l; i++) {
					FieldBinding field = fields[i];
					int level = pattern.matchLevel(field);
					if (level >= SearchPattern.POTENTIAL_MATCH) {
						IField fieldHandle = binaryType.getField(new String(field.name));
						locator.reportBinaryMatch(
							fieldHandle, 
							info, 
							level == SearchPattern.ACCURATE_MATCH
								? IJavaSearchResultCollector.EXACT_MATCH
								: IJavaSearchResultCollector.POTENTIAL_MATCH);
					}
				}

				// no need to check binary info since resolve was successful
				return;
			}
		} catch (AbortCompilation e) { // if compilation was aborted it is a problem with the class path
		}
		// report as a potential match if binary info matches the pattern		
		accuracy = IJavaSearchResultCollector.POTENTIAL_MATCH;
	}

	IBinaryMethod[] methods = info.getMethods();
	if (methods != null) {
		for (int i = 0, l = methods.length; i < l; i++) {
			IBinaryMethod method = methods[i];
			if (pattern.matchesBinary(method, info)) {
				IMethod methodHandle = binaryType.getMethod(
					new String(method.isConstructor() ? info.getName() : method.getSelector()),
					Signature.getParameterTypes(new String(method.getMethodDescriptor()).replace('/', '.')));
				locator.reportBinaryMatch(methodHandle, info, accuracy);
			}
		}
	}

	IBinaryField[] fields = info.getFields();
	if (fields != null) {
		for (int i = 0, l = fields.length; i < l; i++) {
			IBinaryField field = fields[i];
			if (pattern.matchesBinary(field, info)) {
				IField fieldHandle = binaryType.getField(new String(field.getName()));
				locator.reportBinaryMatch(fieldHandle, info, accuracy);
			}
		}
	}
}

