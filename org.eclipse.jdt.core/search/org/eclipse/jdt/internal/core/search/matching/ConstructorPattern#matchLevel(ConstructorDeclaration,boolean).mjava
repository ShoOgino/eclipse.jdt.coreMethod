/**
 * Returns whether the given constructor declaration has an implicit constructor reference that matches
 * this constructor pattern.
 * Look at resolved information only if specified.
 */
protected int matchLevel(ConstructorDeclaration constructor, boolean resolve) {
	int referencesLevel = IMPOSSIBLE_MATCH;
	if (this.findReferences) {
		ExplicitConstructorCall constructorCall = constructor.constructorCall;
		if (constructorCall != null && constructorCall.accessMode == ExplicitConstructorCall.ImplicitSuper) {
			// eliminate explicit super call as it will be treated with matchLevel(ExplicitConstructorCall, boolean)
			referencesLevel = matchLevel(constructorCall, resolve);
			if (referencesLevel == ACCURATE_MATCH) return ACCURATE_MATCH; // cannot get better
		}
	}

	int declarationsLevel = IMPOSSIBLE_MATCH;
	if (this.findDeclarations) {
		if (resolve) {
			declarationsLevel = matchLevel(constructor.binding);
		} else {
			// constructor name is stored in selector field
			if (this.declaringSimpleName != null && !matchesName(this.declaringSimpleName, constructor.selector))
				return referencesLevel; // answer referencesLevel since this is an IMPOSSIBLE_MATCH

			// parameter types
			if (this.parameterSimpleNames != null && constructor.arguments != null)
				if (this.parameterSimpleNames.length != constructor.arguments.length)
					return referencesLevel; // answer referencesLevel since this is an IMPOSSIBLE_MATCH

			if (!this.mustResolve) return ACCURATE_MATCH; // cannot get better
			declarationsLevel = POTENTIAL_MATCH;
		}
	}
	return referencesLevel >= declarationsLevel ? referencesLevel : declarationsLevel; // answer the stronger match
}

