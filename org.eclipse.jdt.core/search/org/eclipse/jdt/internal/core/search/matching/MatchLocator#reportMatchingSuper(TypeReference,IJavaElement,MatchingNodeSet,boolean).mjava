protected void reportMatchingSuper(TypeReference superReference, IJavaElement enclosingElement, MatchingNodeSet nodeSet, boolean matchedClassContainer) throws CoreException {
	ASTNode[] nodes = null;
	if (superReference instanceof ParameterizedSingleTypeReference) {
		TypeReference[] typeArguments = ((ParameterizedSingleTypeReference)superReference).typeArguments;
		if (typeArguments != null && typeArguments.length > 0) {
			nodes = nodeSet.matchingNodes(superReference.sourceStart, typeArguments[typeArguments.length-1].sourceEnd);
		}
	} else if (superReference instanceof ParameterizedQualifiedTypeReference) {
		TypeReference[][] typeArguments = ((ParameterizedQualifiedTypeReference)superReference).typeArguments;
		if (typeArguments != null && typeArguments.length > 0) {
			TypeReference[] lastTypeArgs = typeArguments[typeArguments.length-1];
			int end = superReference.sourceEnd;
			if (lastTypeArgs != null && lastTypeArgs.length > 0 && lastTypeArgs[lastTypeArgs.length-1].sourceEnd > end) {
				end = lastTypeArgs[lastTypeArgs.length-1].sourceEnd;
			}
			nodes = nodeSet.matchingNodes(superReference.sourceStart, end);
		}
	}
	if (nodes != null) {
		if ((this.matchContainer & PatternLocator.CLASS_CONTAINER) == 0) {
			for (int i = 0, l = nodes.length; i < l; i++)
				nodeSet.matchingNodes.removeKey(nodes[i]);
		} else {
			if (encloses(enclosingElement))
				for (int i = 0, l = nodes.length; i < l; i++) {
					ASTNode node = nodes[i];
					Integer level = (Integer) nodeSet.matchingNodes.removeKey(node);
					this.patternLocator.matchReportReference(node, enclosingElement, level.intValue(), this);
				}
		}
	} else {
		Integer level = (Integer) nodeSet.matchingNodes.removeKey(superReference);
		if (level != null && matchedClassContainer)
			this.patternLocator.matchReportReference(superReference, enclosingElement, level.intValue(), this);
	}
}

