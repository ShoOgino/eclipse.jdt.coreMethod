private static SearchPattern createTypePattern(String fullyQualifiedName, int limitTo) {
	SearchPattern searchPattern = null;
	int lastDot = fullyQualifiedName.lastIndexOf('.');
	int lastDollar = fullyQualifiedName.lastIndexOf('$');
	if (lastDollar < lastDot) lastDollar = -1; // must be in last segment
	char[] enclosingTypeName, simpleName;
	if (lastDollar >= 0){
		enclosingTypeName = fullyQualifiedName.substring(lastDot+1, lastDollar).toCharArray();
		simpleName = fullyQualifiedName.substring(lastDollar+1, fullyQualifiedName.length()).toCharArray();
	} else {
		enclosingTypeName = NO_CHAR;
		simpleName = (lastDot != -1 ? fullyQualifiedName.substring(lastDot + 1) : fullyQualifiedName).toCharArray();
	}
	char[] qualification = lastDot != -1 ? fullyQualifiedName.substring(0, lastDot).toCharArray() : null;
	
	switch (limitTo) {
		case IJavaSearchConstants.DECLARATIONS :
			char[][] enclosingTypeNames = CharOperation.splitOn('$', enclosingTypeName);
			searchPattern = new TypeDeclarationPattern(qualification, enclosingTypeNames, simpleName, TYPE_SUFFIX, EXACT_MATCH, CASE_SENSITIVE);
			break;
		case IJavaSearchConstants.REFERENCES :
			if (enclosingTypeName.length > 0) {
				qualification = CharOperation.concat(qualification, enclosingTypeName, '.');
			}
			searchPattern = new TypeReferencePattern(qualification, simpleName, EXACT_MATCH, CASE_SENSITIVE);
			break;
		case IJavaSearchConstants.IMPLEMENTORS : 
			searchPattern = new SuperInterfaceReferencePattern(qualification, simpleName, EXACT_MATCH, CASE_SENSITIVE);
			break;
		case IJavaSearchConstants.ALL_OCCURRENCES :
			char[] fullQualification;
			if (enclosingTypeName.length > 0) {
				fullQualification = CharOperation.concat(qualification, enclosingTypeName, '.');
				enclosingTypeNames = CharOperation.splitOn('$', enclosingTypeName);
			} else {
				fullQualification = qualification;
				enclosingTypeNames = NO_CHAR_CHAR;
			}
			searchPattern = new OrPattern(
				new TypeDeclarationPattern(qualification, enclosingTypeNames, simpleName, TYPE_SUFFIX, EXACT_MATCH, CASE_SENSITIVE), 
				new TypeReferencePattern(fullQualification, simpleName, EXACT_MATCH, CASE_SENSITIVE));
			break;
	}
	return searchPattern;
}

