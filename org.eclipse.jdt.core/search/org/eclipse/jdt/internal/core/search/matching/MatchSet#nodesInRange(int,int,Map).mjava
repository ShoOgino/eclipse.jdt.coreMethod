/**
 * Returns the matching nodes that are in the given range in the source order.
 */
private AstNode[] nodesInRange(int start, int end, Map set) {
	// collect nodes in the given range
	ArrayList nodes = new ArrayList();
	for (Iterator keys = set.keySet().iterator(); keys.hasNext();) {
		AstNode node = (AstNode)keys.next();
		if (start <= node.sourceStart && node.sourceEnd <= end) {
			nodes.add(node);
		}
	}
	AstNode[] result = new AstNode[nodes.size()];
	nodes.toArray(result);

	// sort nodes by source starts
	Util.Comparer comparer = new Util.Comparer() {
		public int compare(Object o1, Object o2) {
			AstNode node1 = (AstNode) o1;
			AstNode node2 = (AstNode) o2;
			return node1.sourceStart - node2.sourceStart;
		}
	};
	Util.sort(result, comparer);
		
	return result;
}

