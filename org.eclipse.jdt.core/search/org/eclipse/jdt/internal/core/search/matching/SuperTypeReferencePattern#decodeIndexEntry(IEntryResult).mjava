/*
 * "superRef/Object/java.lang/X/p" represents "class p.X extends java.lang.Object"
 * "superRef/Exception//X/p" represents "class p.X extends Exception"
 */
protected void decodeIndexEntry(IEntryResult entryResult){
	char[] word = entryResult.getWord();
	int slash = SUPER_REF.length - 1;
	this.decodedSuperSimpleName = CharOperation.subarray(word, slash + 1, slash = CharOperation.indexOf(SEPARATOR, word, slash + 1));
	int oldSlash = slash;
	slash = CharOperation.indexOf(SEPARATOR, word, slash + 1);
	this.decodedSuperQualification = (slash == oldSlash + 1)
		? null // could not have been known at index time
		: CharOperation.subarray(word, oldSlash + 1, slash);
	this.decodedSuperClassOrInterface = word[slash + 1];
	slash += 2;
	this.decodedSimpleName = CharOperation.subarray(word, slash + 1, slash = CharOperation.indexOf(SEPARATOR, word, slash + 1));
	oldSlash = slash;
	slash = CharOperation.indexOf(SEPARATOR, word, slash + 1);
	if (slash == oldSlash + 1) { // could not have been known at index time
		this.decodedEnclosingTypeName = null;
	} else {
		this.decodedEnclosingTypeName = (slash == oldSlash + 2 && word[oldSlash + 1] == ONE_ZERO[0])
			? ONE_ZERO
			: CharOperation.subarray(word, oldSlash + 1, slash);
	}
	oldSlash = slash;
	slash = CharOperation.indexOf(SEPARATOR, word, slash + 1);
	this.decodedQualification = (slash == oldSlash + 1)
		? null // could not have been known at index time
		: CharOperation.subarray(word, oldSlash + 1, slash);
	this.decodedClassOrInterface = word[slash + 1];
	this.decodedModifiers = word[slash + 2]; // implicit cast to int type
}

