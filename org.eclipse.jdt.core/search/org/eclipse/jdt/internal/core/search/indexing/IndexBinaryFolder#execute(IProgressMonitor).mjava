	/**
	 * Ensure consistency of a folder index. Need to walk all nested resources,
	 * and discover resources which have either been changed, added or deleted
	 * since the index was produced.
	 */
	public boolean execute(IProgressMonitor progressMonitor) {

		if (progressMonitor != null && progressMonitor.isCanceled()) return COMPLETE;

		if (!this.folder.isAccessible())
			return COMPLETE; // nothing to do

		IIndex index = manager.getIndex(this.folder.getFullPath(), true /*reuse index file*/, true /*create if none*/);
		if (index == null)
			return COMPLETE;
		ReadWriteMonitor monitor = manager.getMonitorFor(index);
		if (monitor == null)
			return COMPLETE; // index got deleted since acquired
		try {
			monitor.enterRead(); // ask permission to read

			/* if index has changed, commit these before querying */
			if (index.hasChanged()) {
				try {
					monitor.exitRead(); // free read lock
					monitor.enterWrite(); // ask permission to write
					if (IndexManager.VERBOSE)
						JobManager.verbose("-> merging index " + index.getIndexFile()); //$NON-NLS-1$
					index.save();
				} catch (IOException e) {
					return FAILED;
				} finally {
					monitor.exitWriteEnterRead(); // finished writing and reacquire read permission
				}
			}
			final String OK = "OK"; //$NON-NLS-1$
			final String DELETED = "DELETED"; //$NON-NLS-1$
			final long indexLastModified = index.getIndexFile().lastModified();

			final Hashtable indexedFileNames = new Hashtable(100);
			IQueryResult[] results = index.queryInDocumentNames("");// all file names //$NON-NLS-1$
			for (int i = 0, max = results == null ? 0 : results.length; i < max; i++) {
				String fileName = results[i].getPath();
				indexedFileNames.put(fileName, DELETED);
			}
			this.folder.accept(new IResourceVisitor() {
				public boolean visit(IResource resource) {
					if (isCancelled) return false;
					if (resource.getType() == IResource.FILE) {
						String extension = resource.getFileExtension();
						if ((extension != null)
							&& extension.equalsIgnoreCase("class")) { //$NON-NLS-1$
							IPath path = resource.getLocation();
							if (path != null) {
								File resourceFile = path.toFile();
								String name = new IFileDocument((IFile) resource).getName();
								if (indexedFileNames.get(name) == null) {
									indexedFileNames.put(name, resource);
								} else {
									indexedFileNames.put(
										name,
										resourceFile.lastModified() > indexLastModified
											? (Object) resource
											: (Object) OK);
								}
							}
						}
						return false;
					}
					return true;
				}
			});

			IPath folderPath = this.folder.getFullPath();
			IPath projectPath = this.project.getFullPath();
			Enumeration names = indexedFileNames.keys();
			while (names.hasMoreElements()) {
				if (this.isCancelled) return FAILED;
				
				String name = (String) names.nextElement();
				Object value = indexedFileNames.get(name);
				if (value instanceof IFile) {
					manager.addBinary((IFile) value, folderPath);
				} else if (value == DELETED) {
					manager.remove(name, projectPath);
				}
			}

			// request to save index when all class files have been indexed
			manager.request(new SaveIndex(folderPath, manager));

		} catch (CoreException e) {
			if (JobManager.VERBOSE) {
				JobManager.verbose("-> failed to index " + this.folder + " because of the following exception:"); //$NON-NLS-1$ //$NON-NLS-2$
				e.printStackTrace();
			}
			manager.removeIndex(this.folder.getFullPath());
			return FAILED;
		} catch (IOException e) {
			if (JobManager.VERBOSE) {
				JobManager.verbose("-> failed to index " + this.folder + " because of the following exception:"); //$NON-NLS-1$ //$NON-NLS-2$
				e.printStackTrace();
			}
			manager.removeIndex(this.folder.getFullPath());
			return FAILED;
		} finally {
			monitor.exitRead(); // free read lock
		}
		return COMPLETE;
	}

