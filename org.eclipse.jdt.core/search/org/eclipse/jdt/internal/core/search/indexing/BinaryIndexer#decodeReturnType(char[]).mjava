	private char[] decodeReturnType(char[] signature) throws ClassFormatException {
		if (signature == null)
			return null;
		int indexOfClosingParen = CharOperation.lastIndexOf(')', signature);
		if (indexOfClosingParen == -1)
			throw new ClassFormatException(ClassFormatException.ErrInvalidMethodSignature);
		int arrayDim = 0;
		for (int i = indexOfClosingParen + 1, max = signature.length; i < max; i++) {
			switch (signature[i]) {
				case 'B' :
					if (arrayDim > 0) {
						return convertToArrayType(BYTE, arrayDim);
					} else {
						return BYTE;
					}
				case 'C' :
					if (arrayDim > 0) {
						return convertToArrayType(CHAR, arrayDim);
					} else {
						return CHAR;
					}
				case 'D' :
					if (arrayDim > 0) {
						return convertToArrayType(DOUBLE, arrayDim);
					} else {
						return DOUBLE;
					}
				case 'F' :
					if (arrayDim > 0) {
						return convertToArrayType(FLOAT, arrayDim);
					} else {
						return FLOAT;
					}
				case 'I' :
					if (arrayDim > 0) {
						return convertToArrayType(INT, arrayDim);
					} else {
						return INT;
					}
				case 'J' :
					if (arrayDim > 0) {
						return convertToArrayType(LONG, arrayDim);
					} else {
						return LONG;
					}
				case 'L' :
					int indexOfSemiColon = CharOperation.indexOf(';', signature, i + 1);
					if (indexOfSemiColon == -1)
						throw new ClassFormatException(ClassFormatException.ErrInvalidMethodSignature);
					if (arrayDim > 0) {
						return convertToArrayType(
							replace('/', '.', CharOperation.subarray(signature, i + 1, indexOfSemiColon)),
							arrayDim);
					} else {
						return replace(
							'/',
							'.',
							CharOperation.subarray(signature, i + 1, indexOfSemiColon));
					}
				case 'S' :
					if (arrayDim > 0) {
						return convertToArrayType(SHORT, arrayDim);
					} else {
						return SHORT;
					}
				case 'Z' :
					if (arrayDim > 0) {
						return convertToArrayType(BOOLEAN, arrayDim);
					} else {
						return BOOLEAN;
					}
				case 'V' :
					return VOID;
				case '[' :
					arrayDim++;
					break;
				default :
					throw new ClassFormatException(ClassFormatException.ErrInvalidMethodSignature);
			}
		}
		return null;
	}

