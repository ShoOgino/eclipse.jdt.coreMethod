/**
 * Creates an IMethod from the given method declaration and type. 
 */
public IMethod createMethodHandle(AbstractMethodDeclaration method, IType type) {
	if (type == null) return null;
	Argument[] arguments = method.arguments;
	int length = arguments == null ? 0 : arguments.length;
	if (type.isBinary()) {
		// don't cache the methods of the binary type
		ClassFileReader reader = classFileReader(type);
		if (reader == null) return null;
		IBinaryMethod[] methods = reader.getMethods();

		if (methods != null) {
			for (int i = 0, methodsLength = methods.length; i < methodsLength; i++) {
				IBinaryMethod binaryMethod = methods[i];
				char[] selector = binaryMethod.isConstructor() ? type.getElementName().toCharArray() : binaryMethod.getSelector();
				if (CharOperation.equals(selector, method.selector)) {
					String[] parameterTypes = Signature.getParameterTypes(new String(binaryMethod.getMethodDescriptor()));
					if (length != parameterTypes.length) continue;
					boolean sameParameters = true;
					for (int j = 0; j < length; j++) {
						TypeReference parameterType = arguments[j].type;
						char[] typeName = CharOperation.concatWith(parameterType.getTypeName(), '.');
						for (int k = 0; k < parameterType.dimensions(); k++)
							typeName = CharOperation.concat(typeName, "[]" .toCharArray()); //$NON-NLS-1$
						String parameterTypeName = parameterTypes[j].replace('/', '.');
						if (!Signature.toString(parameterTypeName).endsWith(new String(typeName))) {
							sameParameters = false;
							break;
						} else {
							parameterTypes[j] = parameterTypeName;
						}
					}
					if (sameParameters)
						return type.getMethod(new String(selector), parameterTypes);
				}
			}
		}
		return null;
	}

	String[] parameterTypeSignatures = new String[length];
	for (int i = 0; i < length; i++) {
		TypeReference parameterType = arguments[i].type;
		char[] typeName = CharOperation.concatWith(parameterType.getTypeName(), '.');
		for (int j = 0; j < parameterType.dimensions(); j++)
			typeName = CharOperation.concat(typeName, "[]" .toCharArray()); //$NON-NLS-1$
		parameterTypeSignatures[i] = Signature.createTypeSignature(typeName, false);
	}
	return type.getMethod(new String(method.selector), parameterTypeSignatures);
}

