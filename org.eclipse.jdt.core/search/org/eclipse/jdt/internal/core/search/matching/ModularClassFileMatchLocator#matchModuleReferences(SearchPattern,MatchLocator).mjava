	private void matchModuleReferences(SearchPattern pattern, MatchLocator locator) throws CoreException {
		// Only process Module patterns
		switch (pattern.kind) {
			case MODULE_PATTERN:
				break;
			case OR_PATTERN:
				SearchPattern[] patterns = ((OrPattern) pattern).patterns;
				for (int i = 0, length = patterns.length; i < length; i++) {
					SearchPattern p = patterns[i];
					if (p.kind == MODULE_PATTERN)
						matchModuleReferences(patterns[i], locator);
				}
				// $FALL-THROUGH$ - fall through default to return
			default:
				return;
		}
		ModulePattern modulePattern  = (ModulePattern) pattern;
		if (!modulePattern.findReferences) {
			return;
		}
		matchModuleReferences(locator, modulePattern, this.binaryModule.exports());
		matchModuleReferences(locator, modulePattern, this.binaryModule.opens());
		if (this.module != null) {
			matchModuleReferences(locator, modulePattern, this.module.getAllRequiredModules());
		}
	}

