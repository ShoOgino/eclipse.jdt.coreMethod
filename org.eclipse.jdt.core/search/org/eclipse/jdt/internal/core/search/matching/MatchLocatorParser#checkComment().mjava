public void checkComment() {
	super.checkComment();
	if (this.javadoc != null) {
		// Search for pattern locator matches in javadoc comment @throws/@exception tags
		TypeReference[] thrownExceptions = this.javadoc.thrownExceptions;
		int throwsTagsNbre = thrownExceptions == null ? 0 : thrownExceptions.length;
		for (int i = 0; i < throwsTagsNbre; i++) {
			TypeReference typeRef = thrownExceptions[i];
			patternLocator.match(typeRef, nodeSet);
		}

		// Search for pattern locator matches in javadoc comment @see tags
		Expression[] references = this.javadoc.references;
		int seeTagsNbre = references == null ? 0 : references.length;
		for (int i = 0; i < seeTagsNbre; i++) {
			Expression reference = references[i];
			if (reference instanceof TypeReference) {
				TypeReference typeRef = (TypeReference) reference;
				patternLocator.match(typeRef, nodeSet);
			} else if (reference instanceof JavadocFieldReference) {
				JavadocFieldReference fieldRef = (JavadocFieldReference) reference;
				patternLocator.match(fieldRef, nodeSet);
				if (fieldRef.receiver instanceof TypeReference) {
					TypeReference typeRef = (TypeReference) fieldRef.receiver;
					patternLocator.match(typeRef, nodeSet);
				}
			} else if (reference instanceof JavadocMessageSend) {
				JavadocMessageSend messageSend = (JavadocMessageSend) reference;
				patternLocator.match(messageSend, nodeSet);
				if (messageSend.receiver instanceof TypeReference) {
					TypeReference typeRef = (TypeReference) messageSend.receiver;
					patternLocator.match(typeRef, nodeSet);
				}
			} else if (reference instanceof JavadocAllocationExpression) {
				JavadocAllocationExpression constructor = (JavadocAllocationExpression) reference;
				patternLocator.match(constructor, nodeSet);
				if (constructor.type != null) {
					patternLocator.match(constructor.type, nodeSet);
				}
			}
		}
	}
}

