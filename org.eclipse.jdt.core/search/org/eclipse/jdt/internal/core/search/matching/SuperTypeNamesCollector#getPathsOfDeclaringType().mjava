private String[] getPathsOfDeclaringType() {
	char[] declaringQualification = this.pattern.declaringQualification;
	char[] declaringSimpleName = this.pattern.declaringSimpleName;
	if (declaringQualification != null || declaringSimpleName != null) {
		final PathCollector pathCollector = new PathCollector();
		IJavaSearchScope scope = SearchEngine.createWorkspaceScope();
	
		IndexManager indexManager = ((JavaModelManager)JavaModelManager.getJavaModelManager())
										.getIndexManager();
		int detailLevel = IInfoConstants.PathInfo;
		SearchPattern searchPattern = new TypeDeclarationPattern(
			declaringSimpleName != null ? null : declaringQualification, // use the qualification only if no simple name
			null, // do find member types
			declaringSimpleName,
			IIndexConstants.TYPE_SUFFIX,
			this.pattern.matchMode, 
			true);
		IIndexSearchRequestor searchRequestor = new IndexSearchAdapter(){
			public void acceptClassDeclaration(String resourcePath, char[] simpleTypeName, char[][] enclosingTypeNames, char[] packageName) {
				if (enclosingTypeNames != IIndexConstants.ONE_ZERO_CHAR) { // filter out local and anonymous classes
					pathCollector.acceptClassDeclaration(resourcePath, simpleTypeName, enclosingTypeNames, packageName);
				}
			}		
			public void acceptInterfaceDeclaration(String resourcePath, char[] simpleTypeName, char[][] enclosingTypeNames, char[] packageName) {
				if (enclosingTypeNames != IIndexConstants.ONE_ZERO_CHAR) { // filter out local and anonymous classes
					pathCollector.acceptInterfaceDeclaration(resourcePath, simpleTypeName, enclosingTypeNames, packageName);
				}
			}		
		};		
		if (indexManager != null) {
			indexManager.performConcurrentJob(
				new PatternSearchJob(
					searchPattern, 
					scope, 
					detailLevel, 
					searchRequestor, 
					indexManager),
				IJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH,
				progressMonitor);
			return pathCollector.getPaths();
		}
	}
	return null;
}

