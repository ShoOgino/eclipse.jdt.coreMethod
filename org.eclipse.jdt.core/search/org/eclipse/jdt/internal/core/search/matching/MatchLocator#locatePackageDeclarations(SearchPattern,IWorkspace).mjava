/**
 * Locates the package declarations corresponding to the search pattern. 
 */
private void locatePackageDeclarations(SearchPattern searchPattern, IWorkspace workspace) throws JavaModelException {
	if (searchPattern instanceof OrPattern) {
		OrPattern orPattern = (OrPattern)searchPattern;
		this.locatePackageDeclarations(orPattern.leftPattern, workspace);
		this.locatePackageDeclarations(orPattern.rightPattern, workspace);
	} else if (searchPattern instanceof PackageDeclarationPattern) {
		PackageDeclarationPattern pkgPattern = (PackageDeclarationPattern)searchPattern;
		String pkgName = new String(pkgPattern.pkgName);
		IJavaProject[] projects = JavaModelManager.getJavaModel(workspace).getJavaProjects();
		for (int i = 0, length = projects.length; i < length; i++) {
			IJavaProject javaProject = projects[i];
			IPackageFragmentRoot[] roots = javaProject.getPackageFragmentRoots();
			for (int j = 0, rootsLength = roots.length; j < rootsLength; j++) {
				IJavaElement[] pkgs = roots[j].getChildren();
				for (int k = 0, pksLength = pkgs.length; k < pksLength; k++) {
					IJavaElement pkg = pkgs[k];
					if (pkgPattern.matchesName(pkgPattern.pkgName, pkg.getElementName().toCharArray())) {
						IResource resource = pkg.getUnderlyingResource();
						if (resource == null) { // case of a file in an external jar
							resource = javaProject.getProject();
						}
						this.potentialMatchesIndex = 0;
						this.potentialMatches = new PotentialMatch[] {
							new PotentialMatch(this, resource, null)
						};
						try {
							this.report(-1, -2, pkg, IJavaSearchResultCollector.EXACT_MATCH);
						} catch (CoreException e) {
							if (e instanceof JavaModelException) {
								throw (JavaModelException)e;
							} else {
								throw new JavaModelException(e);
							}
						}
					}
				}
			}
		}
	}
}

