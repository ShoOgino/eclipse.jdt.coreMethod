protected int resolveLevel(MessageSend messageSend) {
	MethodBinding method = messageSend.binding;
	if (method == null) {
		return INACCURATE_MATCH;
	}
	if (messageSend.resolvedType == null) {
		// Closest match may have different argument numbers when ProblemReason is NotFound
		// see MessageSend#resolveType(BlockScope)
		// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=97322
		int argLength = messageSend.arguments == null ? 0 : messageSend.arguments.length;
		if (pattern.parameterSimpleNames == null || argLength == pattern.parameterSimpleNames.length) {
			return INACCURATE_MATCH;
		}
		return IMPOSSIBLE_MATCH;
	}
	
	int methodLevel = matchMethod(method, false);
	if (methodLevel == IMPOSSIBLE_MATCH) {
		if (method != method.original()) methodLevel = matchMethod(method.original(), false);
		if (methodLevel == IMPOSSIBLE_MATCH) return IMPOSSIBLE_MATCH;
		method = method.original();
	}

	// receiver type
	char[] qualifiedPattern = qualifiedPattern(this.pattern.declaringSimpleName, this.pattern.declaringQualification);
	if (qualifiedPattern == null) return methodLevel; // since any declaring class will do

	int declaringLevel;
	if (isVirtualInvoke(method, messageSend) && (messageSend.actualReceiverType instanceof ReferenceBinding)) {
		ReferenceBinding methodReceiverType = (ReferenceBinding) messageSend.actualReceiverType;
		declaringLevel = resolveLevelAsSubtype(qualifiedPattern, methodReceiverType);
		if (declaringLevel == IMPOSSIBLE_MATCH) {
			if (method.declaringClass == null || this.allSuperDeclaringTypeNames == null) {
				declaringLevel = INACCURATE_MATCH;
			} else {
				char[][] compoundName = methodReceiverType.compoundName;
				for (int i = 0, max = this.allSuperDeclaringTypeNames.length; i < max; i++) {
					if (CharOperation.equals(this.allSuperDeclaringTypeNames[i], compoundName)) {
						return methodLevel // since this is an ACCURATE_MATCH so return the possibly weaker match
							| OVERRIDDEN_FLAVOR; // this is an overridden method => add flavor to returned level
					}
				}
				/* Do not return interfaces potential matches
				 * @see "https://bugs.eclipse.org/bugs/show_bug.cgi?id=157814#c8"
				if (methodReceiverType.isInterface()) {
					// all methods interface with same name and parameters are potential matches
					// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=156491
					return INACCURATE_MATCH | POLYMORPHIC_FLAVOR;
				}
				*/
			}
		}
		if ((declaringLevel & FLAVORS_MASK) != 0) {
			// level got some flavors => return it
			return declaringLevel;
		}
	} else {
		declaringLevel = resolveLevelForType(qualifiedPattern, method.declaringClass);
	}
	return methodLevel > declaringLevel ? declaringLevel : methodLevel; // return the weaker match
}

