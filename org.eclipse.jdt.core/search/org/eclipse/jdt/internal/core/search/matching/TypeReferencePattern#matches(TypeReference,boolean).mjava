/**
 * Returns whether this type pattern matches the given type reference.
 * Look at resolved information only if specified.
 */
private boolean matches(TypeReference typeRef, boolean resolve) {
	if (!resolve) {
		if (this.simpleName != null) {
			if (typeRef instanceof SingleTypeReference) {
				return this.matchesName(this.simpleName, ((SingleTypeReference)typeRef).token);
			} else { // QualifiedTypeReference
				char[][] tokens = ((QualifiedTypeReference)typeRef).tokens;
				for (int i = 0, max = tokens.length; i < max; i++){
					if (this.matchesName(this.simpleName, tokens[i])) return true;
				}
				return false;
			}				
		}
	} else {

		TypeBinding typeBinding = typeRef.binding;
		if (typeBinding != null){
			if (typeBinding instanceof ArrayBinding) typeBinding = ((ArrayBinding)typeBinding).leafComponentType;
			if (typeRef instanceof SingleTypeReference){
				if (!this.matchesType(this.simpleName, this.qualification, typeBinding)){
					return false;
				}
			} else { // QualifiedTypeReference
				QualifiedTypeReference qNameRef = (QualifiedTypeReference)typeRef;
				char[][] tokens = qNameRef.tokens;
				int lastIndex = tokens.length-1;
				// try to match all enclosing types for which the token matches as well.
				while (typeBinding != null && lastIndex >= 0){
					if (matchesName(this.simpleName, tokens[lastIndex--])
						&& matchesType(this.simpleName, this.qualification, typeBinding)) return true;
						//&& matchesAsSubtype(this.simpleName, this.qualification, typeBinding)) return true;
					if (typeBinding instanceof ReferenceBinding){
						typeBinding = ((ReferenceBinding)typeBinding).enclosingType();
					} else {
						typeBinding = null;
					}
				}
				return false;
			} 
		}
			
	}
	return true;
}

