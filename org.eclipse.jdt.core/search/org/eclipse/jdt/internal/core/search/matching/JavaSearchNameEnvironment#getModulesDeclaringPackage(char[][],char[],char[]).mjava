@Override
public char[][] getModulesDeclaringPackage(char[][] parentPackageName, char[] packageName, char[] moduleName) {
	String qualifiedPackageName = String.valueOf(CharOperation.concatWith(parentPackageName, packageName, '/'));
	if (this.moduleLocations == null || moduleName == ModuleBinding.UNNAMED) {
		for (ClasspathLocation location : this.locationSet) {
			IModule module = location.getModule();
			if (module == null && location.isPackage(qualifiedPackageName, null))
				return new char[][] { moduleName };
		}
		return null;
		
	} else if (moduleName == ModuleBinding.ANY) {
		char[][] moduleNames = CharOperation.NO_CHAR_CHAR;
		for (ClasspathLocation location : this.locationSet) {
			IModule module = location.getModule();
			if (module != null && location.isPackage(qualifiedPackageName, null))
				moduleNames = CharOperation.arrayConcat(moduleNames, module.name()); // FIXME(SHMOD): handle multiple modules per location
		}
		return moduleNames == CharOperation.NO_CHAR_CHAR ? null : moduleNames;
	} else {
		String moduleNameString = String.valueOf(moduleName);
		ClasspathLocation location = this.moduleLocations.get(moduleNameString);
		if (location != null) {
			if (location.isPackage(qualifiedPackageName, moduleNameString))
				return new char[][] { moduleName };
			return null;
		}
	}
	return null;
}

