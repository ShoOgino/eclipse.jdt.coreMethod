/*
 * Parse the given compiation unit and build its type bindings.
 * Remember the parsed unit.
 */
public CompilationUnitDeclaration buildBindings(org.eclipse.jdt.core.ICompilationUnit compilationUnit) throws JavaModelException {
	final IFile file = (IFile)compilationUnit.getUnderlyingResource();
	CompilationUnitDeclaration unit = null;
	
	// get main type name
	final String fileName = file.getFullPath().lastSegment();
	final char[] mainTypeName =
		fileName.substring(0, fileName.length() - 5).toCharArray();
	
	// find out if unit is already known
	char[] qualifiedName = compilationUnit.getType(new String(mainTypeName)).getFullyQualifiedName().toCharArray();
	unit = (CompilationUnitDeclaration)this.parsedUnits.get(qualifiedName);
	if (unit != null) return unit;

	// source unit
	final char[] source = Util.getResourceContentsAsCharArray(file);
	ICompilationUnit sourceUnit = new ICompilationUnit() {
		public char[] getContents() {
			return source;
		}
		public char[] getFileName() {
			return fileName.toCharArray();
		}
		public char[] getMainTypeName() {
			return mainTypeName;
		}
	};
	
	// diet parse
	MatchSet originalMatchSet = this.parser.matchSet;
	try {
		this.parser.matchSet = new MatchSet(this);
		CompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0);
		unit = this.parser.dietParse(sourceUnit, compilationResult);
	} finally {
		if (originalMatchSet == null) {
			if (!this.parser.matchSet.isEmpty() 
					&& unit != null) {
				// potential matches were found while initializing the search pattern
				// from the lookup environment: add them in the list of potential matches
				PotentialMatch potentialMatch = 
					new PotentialMatch(
						this,
						file, 
						(CompilationUnit)compilationUnit, 
						unit,
						this.parser.matchSet);
				this.addPotentialMatch(potentialMatch);
			}
			this.parser.matchSet = null;
		} else {
			this.parser.matchSet = originalMatchSet;
		}
	}
	if (unit != null) {
		this.lookupEnvironment.buildTypeBindings(unit);
		this.lookupEnvironment.completeTypeBindings(unit, true);
		this.parsedUnits.put(qualifiedName, unit);
	}
	return unit;
}

