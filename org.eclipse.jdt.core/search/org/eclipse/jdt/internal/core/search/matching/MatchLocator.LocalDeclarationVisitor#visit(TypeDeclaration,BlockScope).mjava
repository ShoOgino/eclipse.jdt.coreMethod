	public boolean visit(TypeDeclaration typeDeclaration, BlockScope unused) {
		try {
			char[] simpleName;
			if ((typeDeclaration.bits & ASTNode.IsAnonymousTypeMASK) != 0) {				
				simpleName = CharOperation.NO_CHAR;
			} else {
				simpleName = typeDeclaration.name;
			}
			int occurrenceCount = occurrencesCounts.get(simpleName);
			if (occurrenceCount == HashtableOfIntValues.NO_VALUE) {
				occurrenceCount = 1;
			} else {
				occurrenceCount = occurrenceCount + 1;
			}
			occurrencesCounts.put(simpleName, occurrenceCount);
			if (typeDeclaration.allocation == null || typeDeclaration.allocation.enumConstant == null) {
				if ((typeDeclaration.bits & ASTNode.IsAnonymousTypeMASK) != 0) {				
					reportMatching(typeDeclaration, enclosingElement, -1, nodeSet, occurrenceCount);
				} else {
					Integer level = (Integer) nodeSet.matchingNodes.removeKey(typeDeclaration);
					reportMatching(typeDeclaration, enclosingElement, level != null ? level.intValue() : -1, nodeSet, occurrenceCount);
				}
			} else {
				Integer level = (Integer) nodeSet.matchingNodes.removeKey(typeDeclaration);
				if (level != null) {
					FieldDeclaration enumConstant = typeDeclaration.allocation.enumConstant;
					int offset = enumConstant.sourceStart;
					SearchMatch match = newDeclarationMatch(enclosingElement, level.intValue(), offset, enumConstant.sourceEnd-offset+1);
					report(match);
				}
			}
			return false; // don't visit members as this was done during reportMatching(...)
		} catch (CoreException e) {
			throw new WrappedCoreException(e);
		}
	}

