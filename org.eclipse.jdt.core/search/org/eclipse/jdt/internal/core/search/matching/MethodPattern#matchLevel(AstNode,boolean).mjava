/**
 * @see SearchPattern#matchLevel(AstNode, boolean)
 */
public int matchLevel(AstNode node, boolean resolve) {
	if (resolve) {
		if (this.findReferences && node instanceof MessageSend)
			return matchLevel((MessageSend) node);
		if (this.findDeclarations && node instanceof MethodDeclaration)
			return matchLevel(((MethodDeclaration) node).binding);
		return IMPOSSIBLE_MATCH;
	}

	char[] itsSelector = null;
	AstNode[] args = null;
	TypeReference methodReturnType = null;
	boolean checkTypeReferences = false;
	if (this.findDeclarations && node instanceof MethodDeclaration) {
		MethodDeclaration method = (MethodDeclaration) node;
		itsSelector = method.selector;
		args = method.arguments;
		methodReturnType = method.returnType;
		checkTypeReferences = true;
	} else if (this.findReferences && node instanceof MessageSend) {
		MessageSend messageSend = (MessageSend) node;
		itsSelector = messageSend.selector;
		args = messageSend.arguments;
	}

	if (!matchesName(this.selector, itsSelector))
		return IMPOSSIBLE_MATCH;
	if (this.parameterSimpleNames != null) {
		int length = this.parameterSimpleNames.length;
		int argsLength = args == null ? 0 : args.length;
		if (length != argsLength) return IMPOSSIBLE_MATCH;

		if (checkTypeReferences)
			for (int i = 0; i < argsLength; i++)
				if (!matchesTypeReference(this.parameterSimpleNames[i], ((Argument) args[i]).type))
					return IMPOSSIBLE_MATCH;
	}
	if (methodReturnType != null && !matchesTypeReference(this.returnSimpleName, methodReturnType))
		return IMPOSSIBLE_MATCH;
	return this.mustResolve ? POTENTIAL_MATCH : ACCURATE_MATCH;
}

