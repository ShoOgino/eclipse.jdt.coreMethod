/**
 * Locates the package declarations corresponding to the search pattern. 
 */
protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant) throws CoreException {
	if (searchPattern instanceof OrPattern) {
		SearchPattern[] patterns = ((OrPattern) searchPattern).patterns;
		for (int i = 0, length = patterns.length; i < length; i++)
			locatePackageDeclarations(patterns[i], participant);
	} else if (searchPattern instanceof PackageDeclarationPattern) {
		IJavaElement focus = ((InternalSearchPattern) searchPattern).focus;
		if (focus != null) {
			if (encloses(focus)) {
				SearchMatch match = new PackageDeclarationMatch(focus.getAncestor(IJavaElement.PACKAGE_FRAGMENT), SearchMatch.A_ACCURATE, -1, -1, participant, focus.getResource());
				report(match);
			}
			return;
		}
		PackageDeclarationPattern pkgPattern = (PackageDeclarationPattern) searchPattern;
		IPath[] scopeProjectsAndJars = this.scope.enclosingProjectsAndJars();
		int scopeLength = scopeProjectsAndJars.length;
		IJavaProject[] projects = JavaModelManager.getJavaModelManager().getJavaModel().getJavaProjects();
		for (int i = 0, length = projects.length; i < length; i++) {
			IJavaProject javaProject = projects[i];
			// Verify that project belongs to the scope
			boolean found = false;
			for (int j=0; j<scopeLength; j++) {
				if (projects[i].getPath().equals(scopeProjectsAndJars[j])) {
					found = true;
					break;
				}
			}
			if (!found) continue;
			this.nameLookup = ((JavaProject) projects[i]).newNameLookup(this.workingCopies);
			IPackageFragment[] packageFragments = this.nameLookup.findPackageFragments(new String(pkgPattern.pkgName), true, true);
			int pLength = packageFragments == null ? 0 : packageFragments.length;
			for (int p=0; p<pLength; p++) {
				IPackageFragment fragment = packageFragments[p];
				IResource resource = fragment.getResource();
				if (resource == null) // case of a file in an external jar
					resource = javaProject.getProject();
				try {
					if (encloses(fragment)) {
						SearchMatch match = new PackageDeclarationMatch(fragment, SearchMatch.A_ACCURATE, -1, -1, participant, resource);
						report(match);
					}
				} catch (JavaModelException e) {
					throw e;
				} catch (CoreException e) {
					throw new JavaModelException(e);
				}
			}
		}
	}
}

