/**
 * Type entries are encoded as 'typeDecl/' ('C' | 'I') '/' PackageName '/' TypeName
 * e.g. 'typeDecl/C/java.lang/Object'
 * e.g. 'typeDecl/I/java.lang/Cloneable'
 *
 * Current encoding is optimized for queries: all classes/interfaces
 */
protected char[] indexEntryPrefix() {
	char[] packageName = this.isCaseSensitive ? pkg : null;
	switch(this.classOrInterface) {
		case CLASS_SUFFIX :
			if (packageName == null) return CLASS_DECL;
			break;
		case INTERFACE_SUFFIX :
			if (packageName == null) return INTERFACE_DECL;
			break;
		default :
			return TYPE_DECL; // cannot do better given encoding
	}

	char[] typeName = this.isCaseSensitive ? simpleName : null;
	if (typeName != null && this.matchMode == PATTERN_MATCH) {
		int starPos = CharOperation.indexOf('*', typeName);
		switch(starPos) {
			case -1 :
				break;
			case 0 :
				typeName = null;
				break;
			default : 
				typeName = CharOperation.subarray(typeName, 0, starPos);
		}
	}

	int packageLength = packageName.length;
	int typeLength = typeName == null ? 0 : typeName.length;
	int pos = TYPE_DECL_LENGTH;
	char[] result = new char[pos + packageLength + typeLength + 3];
	System.arraycopy(TYPE_DECL, 0, result, 0, pos);
	result[pos++] = classOrInterface;
	result[pos++] = SEPARATOR;
	System.arraycopy(packageName, 0, result, pos, packageLength);
	pos += packageLength;
	result[pos++] = SEPARATOR;
	if (typeLength > 0)
		System.arraycopy(typeName, 0, result, pos, typeName.length);
	return result;
}

