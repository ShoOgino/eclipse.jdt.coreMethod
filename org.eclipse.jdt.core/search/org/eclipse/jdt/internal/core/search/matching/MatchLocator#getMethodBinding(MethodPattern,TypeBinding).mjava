private MethodBinding getMethodBinding(MethodPattern methodPattern, TypeBinding declaringTypeBinding) {
	MethodBinding result;
	char[][] parameterTypes = methodPattern.parameterSimpleNames;
	if (parameterTypes == null) return null;
	int paramTypeslength = parameterTypes.length;
	ReferenceBinding referenceBinding = (ReferenceBinding) declaringTypeBinding;
	MethodBinding[] methods = referenceBinding.getMethods(methodPattern.selector);
	int methodsLength = methods.length;
	TypeVariableBinding[] refTypeVariables = referenceBinding.typeVariables();
	int typeVarLength = refTypeVariables==null ? 0 : refTypeVariables.length;
	List <MethodBinding> possibleMethods = new ArrayList<MethodBinding>(methodsLength);
	for (int i=0; i<methodsLength; i++) {
		TypeBinding[] methodParameters = methods[i].parameters;
		int paramLength = methodParameters==null ? 0 : methodParameters.length;
		TypeVariableBinding[] methodTypeVariables = methods[i].typeVariables;
		int methTypeVarLength = methodTypeVariables==null ? 0 : methodTypeVariables.length;
		boolean found = false;
		if (methodParameters != null && paramLength == paramTypeslength) {
			for (int p=0; p<paramLength; p++) {
				TypeBinding parameter = methodParameters[p];
				if (matchParams(methodPattern, p, parameter)) {
					// param erasure match
					found = true;
				} else {
					// type variable
					found = false;
					if (refTypeVariables != null) {
						for (int v=0; v<typeVarLength; v++) {
							if (!CharOperation.equals(refTypeVariables[v].sourceName, parameterTypes[p])) {
								found = false;
								break;
							}
							found = true;
						}
					}
					if (!found && methodTypeVariables != null) {
						for (int v=0; v<methTypeVarLength; v++) {
							if (!CharOperation.equals(methodTypeVariables[v].sourceName, parameterTypes[p])) {
								found = false;
								break;
							}
							found = true;
						}
					}
					if (!found) break;
				}
			}
		}
		if (found) {
			possibleMethods.add(methods[i]);
		}
	}
	result =  getMostApplicableMethod(possibleMethods, methodPattern);
	return result;
}

