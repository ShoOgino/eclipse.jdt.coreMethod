	/**
	 * Parses the member bodies in the given type.
	 */
	private void parseBodies(
		TypeDeclaration type,
		CompilationUnitDeclaration unit) {
		// fields
		FieldDeclaration[] fields = type.fields;
		if (fields != null) {
			for (int i = 0; i < fields.length; i++) {
				FieldDeclaration field = fields[i];
				if ((this.matchSet.matchContainer & SearchPattern.CLASS) != 0) {
					this.matchSet.checkMatching(field);
				}
				if (field instanceof Initializer) { // initializer block
					this.parse((Initializer) field, type, unit);
				}
			}
		}

		// methods
		AbstractMethodDeclaration[] methods = type.methods;
		if (methods != null) {
			for (int i = 0; i < methods.length; i++) {
				AbstractMethodDeclaration method = methods[i];
				if ((this.matchSet.matchContainer & SearchPattern.CLASS) != 0) {
					this.matchSet.checkMatching(method);
				}
				if (method.sourceStart >= type.bodyStart) { // if not synthetic
					if (method instanceof MethodDeclaration) {
						this.parse((MethodDeclaration) method, unit);
					} else
						if (method instanceof ConstructorDeclaration) {
							this.parse((ConstructorDeclaration) method, unit);
						}
				}
			}
		}

		// member types
		MemberTypeDeclaration[] memberTypes = type.memberTypes;
		if (memberTypes != null) {
			for (int i = 0; i < memberTypes.length; i++) {
				MemberTypeDeclaration memberType = memberTypes[i];
				if ((this.matchSet.matchContainer & SearchPattern.CLASS) != 0) {
					this.matchSet.checkMatching(memberType);
				}
				this.parseBodies(memberType, unit);
			}
		}
	}

