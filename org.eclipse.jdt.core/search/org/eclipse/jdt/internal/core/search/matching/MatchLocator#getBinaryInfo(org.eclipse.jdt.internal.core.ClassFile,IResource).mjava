	public IBinaryType getBinaryInfo(org.eclipse.jdt.internal.core.ClassFile classFile, IResource resource) throws CoreException {
		BinaryType binaryType = (BinaryType)classFile.getType();
		if (classFile.isOpen()) {
			// reuse the info from the java model cache
			return (IBinaryType)binaryType.getElementInfo();
		} else {
			// create a temporary info
			IBinaryType info;
			try {
				IJavaElement pkg = classFile.getParent();
				PackageFragmentRoot root = (PackageFragmentRoot)pkg.getParent();
				if (root.isArchive()) {
					// class file in a jar
					String pkgPath = pkg.getElementName().replace('.', '/');
					String classFilePath = 
						(pkgPath.length() > 0) ?
							pkgPath + "/" + classFile.getElementName() : //$NON-NLS-1$
							classFile.getElementName();
					ZipFile zipFile = null;
					try {
						zipFile = ((JarPackageFragmentRoot)root).getJar();
						info = org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.read(
							zipFile,
							classFilePath);
					} finally {
						JavaModelManager.getJavaModelManager().closeZipFile(zipFile);
					}
				} else {
					// class file in a directory
					String osPath = resource.getLocation().toOSString();
					info = org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.read(osPath);
				}
				return info;
			} catch (org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException e) {
				//e.printStackTrace();
				return null;
			} catch (java.io.IOException e) {
				throw new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);
			}
		}
	}

