/**
 * Returns whether elements of the given project or jar can see the given focus (an IJavaProject or
 * a JarPackageFragmentRot) either because the focus is part of the project or the jar, or because it is
 * accessible throught the project's classpath
 */
public static int canSeeFocus(SearchPattern pattern, IPath projectOrJarPath) {
	try {
		IJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();
		IJavaProject project = getJavaProject(projectOrJarPath, model);
		IJavaElement[] focuses = getFocusedElementsAndTypes(pattern, project, null);
		if (focuses.length == 0) return PROJECT_CAN_NOT_SEE_FOCUS;
		if (project != null) {
			return canSeeFocus(focuses, (JavaProject) project, null);
		}

		// projectOrJarPath is a jar
		// it can see the focus only if it is on the classpath of a project that can see the focus
		int result = PROJECT_CAN_NOT_SEE_FOCUS;
		IJavaProject[] allProjects = model.getJavaProjects();
		for (int i = 0, length = allProjects.length; i < length; i++) {
			JavaProject otherProject = (JavaProject) allProjects[i];
			IClasspathEntry entry = otherProject.getClasspathEntryFor(projectOrJarPath);
			if (entry != null && entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {
				int canSeeFocus = canSeeFocus(focuses, otherProject, null);
				if (canSeeFocus == PROJECT_CAN_SEE_FOCUS)
					return PROJECT_CAN_SEE_FOCUS;
				if (canSeeFocus == PROJECT_SOURCE_CAN_NOT_SEE_FOCUS)
					result = PROJECT_SOURCE_CAN_NOT_SEE_FOCUS;
			}
		}
		return result;
	} catch (JavaModelException e) {
		return PROJECT_CAN_NOT_SEE_FOCUS;
	}
}

