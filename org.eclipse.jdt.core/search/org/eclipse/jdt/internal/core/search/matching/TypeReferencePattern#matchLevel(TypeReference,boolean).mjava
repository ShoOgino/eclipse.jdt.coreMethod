/**
 * Returns whether this type pattern matches the given type reference.
 * Look at resolved information only if specified.
 */
private int matchLevel(TypeReference typeRef, boolean resolve) {
	if (!resolve) {
		if (this.simpleName == null) {
			return this.needsResolve ? POSSIBLE_MATCH : ACCURATE_MATCH;
		} else {
			if (typeRef instanceof SingleTypeReference) {
				if (this.matchesName(this.simpleName, ((SingleTypeReference)typeRef).token)) {
					return this.needsResolve ? POSSIBLE_MATCH : ACCURATE_MATCH;
				} else {
					return IMPOSSIBLE_MATCH;
				}
			} else { // QualifiedTypeReference
				char[][] tokens = ((QualifiedTypeReference)typeRef).tokens;
				for (int i = 0, max = tokens.length; i < max; i++){
					if (this.matchesName(this.simpleName, tokens[i])) {
						return this.needsResolve ? POSSIBLE_MATCH : ACCURATE_MATCH;
					}
				}
				return IMPOSSIBLE_MATCH;
			}				
		} 
	} else {
		TypeBinding typeBinding = typeRef.binding;
		if (typeBinding == null) {
			return INACCURATE_MATCH;
		} else {
			if (typeBinding instanceof ArrayBinding) typeBinding = ((ArrayBinding)typeBinding).leafComponentType;
			if (typeRef instanceof SingleTypeReference){
				return this.matchLevelForType(this.simpleName, this.qualification, typeBinding);
			} else { // QualifiedTypeReference
				QualifiedTypeReference qTypeRef = (QualifiedTypeReference)typeRef;
				char[][] tokens = qTypeRef.tokens;
				int lastIndex = tokens.length-1;
				// try to match all enclosing types for which the token matches as well.
				while (typeBinding != null && lastIndex >= 0){
					if (matchesName(this.simpleName, tokens[lastIndex--])) {
						int level = this.matchLevelForType(this.simpleName, this.qualification, typeBinding);
						if (level != IMPOSSIBLE_MATCH) {
							return level;
						}
					}
					if (typeBinding instanceof ReferenceBinding){
						typeBinding = ((ReferenceBinding)typeBinding).enclosingType();
					} else {
						typeBinding = null;
					}
				}
				return IMPOSSIBLE_MATCH;
			} 
		}
			
	}
}

