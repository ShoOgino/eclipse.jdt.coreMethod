/**
 * Returns whether this type pattern matches the given type reference.
 * Look at resolved information only if specified.
 */
protected int matchLevel(TypeReference typeRef, boolean resolve) {
	if (!resolve) {
		if (this.simpleName == null)
			return this.mustResolve ? POTENTIAL_MATCH : ACCURATE_MATCH;

		if (typeRef instanceof SingleTypeReference) {
			if (matchesName(this.simpleName, ((SingleTypeReference) typeRef).token))
				return this.mustResolve ? POTENTIAL_MATCH : ACCURATE_MATCH;
		} else { // QualifiedTypeReference
			char[][] tokens = ((QualifiedTypeReference) typeRef).tokens;
			// can only be a possible match since resolution is needed to find out if it is a type ref
			for (int i = 0, max = tokens.length; i < max; i++)
				if (this.matchesName(this.simpleName, tokens[i])) return POTENTIAL_MATCH;
		}
		return IMPOSSIBLE_MATCH;
	}

	TypeBinding typeBinding = typeRef.resolvedType;
	if (typeBinding instanceof ArrayBinding)
		typeBinding = ((ArrayBinding) typeBinding).leafComponentType;
	if (typeBinding instanceof ProblemReferenceBinding) {
		Binding binding = ((ProblemReferenceBinding) typeBinding).original;
		if (binding instanceof TypeBinding)
			typeBinding = (TypeBinding) binding;
		else if (binding == null)
			typeBinding = null;
	}
	if (typeBinding == null) return INACCURATE_MATCH;

	if (typeRef instanceof SingleTypeReference)
		return matchLevelForType(this.simpleName, this.qualification, typeBinding);

	QualifiedTypeReference qTypeRef = (QualifiedTypeReference) typeRef;
	char[][] tokens = qTypeRef.tokens;
	int lastIndex = tokens.length-1;
	// try to match all enclosing types for which the token matches as well.
	while (typeBinding != null && lastIndex >= 0) {
		if (matchesName(this.simpleName, tokens[lastIndex--])) {
			int level = matchLevelForType(this.simpleName, this.qualification, typeBinding);
			if (level != IMPOSSIBLE_MATCH) return level;
		}
		if (typeBinding instanceof ReferenceBinding)
			typeBinding = ((ReferenceBinding)typeBinding).enclosingType();
		else return IMPOSSIBLE_MATCH;
	}
	return IMPOSSIBLE_MATCH;
}

