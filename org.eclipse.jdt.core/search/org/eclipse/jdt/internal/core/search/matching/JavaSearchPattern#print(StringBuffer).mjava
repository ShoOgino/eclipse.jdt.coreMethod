	protected StringBuffer print(StringBuffer output) {
		output.append(", "); //$NON-NLS-1$
		if (hasTypeArguments() && hasSignatures()) {
			output.append("signature:\""); //$NON-NLS-1$
			output.append(this.typeSignatures[0]);
			output.append("\", "); //$NON-NLS-1$
		}
		switch(getMatchMode()) {
			case R_EXACT_MATCH : 
				output.append("exact match, "); //$NON-NLS-1$
				break;
			case R_PREFIX_MATCH :
				output.append("prefix match, "); //$NON-NLS-1$
				break;
			case R_PATTERN_MATCH :
				output.append("pattern match, "); //$NON-NLS-1$
				break;
			case R_REGEXP_MATCH :
				output.append("regexp match, "); //$NON-NLS-1$
				break;
			case R_CAMELCASE_MATCH :
				output.append("camel case match, "); //$NON-NLS-1$
				break;
			case R_CAMELCASE_SAME_PART_COUNT_MATCH:
				output.append("camel case same part count match, "); //$NON-NLS-1$
				break;
		}
		if (isCaseSensitive())
			output.append("case sensitive, "); //$NON-NLS-1$
		else
			output.append("case insensitive, "); //$NON-NLS-1$
		if ((this.matchCompatibility & R_FULL_MATCH) != 0) {
			output.append("generic full match, "); //$NON-NLS-1$
		}
		if ((this.matchCompatibility & R_ERASURE_MATCH) != 0) {
			output.append("generic erasure match, "); //$NON-NLS-1$
		}
		if ((this.matchCompatibility & R_EQUIVALENT_MATCH) != 0) {
			output.append("generic equivalent match, "); //$NON-NLS-1$
		}
		output.append("fine grain: "); //$NON-NLS-1$
		output.append(getFineGrainFlagString(this.fineGrain));
		return output;
	}

