	/**
	 * Method Declaration entries are encoded as described
	 * 
	 * Binary Method Declaration for class
	 * MethodName '/' Arity '/' DeclaringQualifier '/' TypeName '/' TypeModifers '/' PackageName '/' Signature '/' ParameterNamesopt '/' Modifiers '/' returnType
	 * Source method for class
	 * MethodName '/' Arity '/' DeclaringQualifier '/' TypeName '/' TypeModifers '/' PackageName '/' ParameterTypes '/' ParameterNamesopt '/' Modifiers '/' returnType
	 * TypeModifiers contains some encoded extra information
	 * 		{@link ExtraFlags#IsMemberType}
	 * 		{@link ExtraFlags#HasNonPrivateStaticMemberTypes}
	 * 		{@link ExtraFlags#ParameterTypesStoredAsSignature}
	 */
	public static char[] createDeclarationIndexKey(
			char[] typeName,
			char[] declaringQualification,
			char[] methodName,
			int argCount,
			char[] signature,
			char[][] parameterTypes,
			char[][] parameterNames,
			char[] returnType,
			int modifiers,
			char[] packageName,
			int typeModifiers,
			int extraFlags) {
		
		char[] countChars;
		char[] parameterTypesChars = null;
		char[] parameterNamesChars = null;
		
		
		countChars = argCount < 10 ? COUNTS[argCount]: ("/" + String.valueOf(argCount)).toCharArray(); //$NON-NLS-1$
		if (argCount > 0) {
			if (signature == null) {
				if (parameterTypes != null && parameterTypes.length == argCount) {
					char[][] parameterTypeErasures = new char[argCount][];
					for (int i = 0; i < parameterTypes.length; i++) {
						parameterTypeErasures[i] = getTypeErasure(parameterTypes[i]);
					}
					parameterTypesChars = CharOperation.concatWith(parameterTypeErasures, PARAMETER_SEPARATOR);
				}
			} else {
				extraFlags |= ExtraFlags.ParameterTypesStoredAsSignature;
			}
			
			if (parameterNames != null && parameterNames.length == argCount) {
				parameterNamesChars = CharOperation.concatWith(parameterNames, PARAMETER_SEPARATOR);
			}
		}
				
		char[] returnTypeChars = returnType == null ? CharOperation.NO_CHAR : getTypeErasure(returnType);
		
		
		int typeNameLength = typeName == null ? 0 : typeName.length;
		int qualifierLength = declaringQualification == null ? 0 : declaringQualification.length;
		int methodNameLength = methodName == null ? 0 : methodName.length;
		int packageNameLength = packageName == null ? 0 : packageName.length;
		int countCharsLength = countChars.length;
		int parameterTypesLength = signature == null ? (parameterTypesChars == null ? 0 : parameterTypesChars.length): signature.length;
		int parameterNamesLength = parameterNamesChars == null ? 0 : parameterNamesChars.length;
		int returnTypeLength = returnTypeChars.length;
		
		int resultLength = methodNameLength + countCharsLength + qualifierLength + typeNameLength + 2 /* type modifiers */
				+ packageNameLength + parameterTypesLength + parameterNamesLength + returnTypeLength + 2 /* modifiers*/ + 9; // SEPARATOR = 9
		char[] result = new char[resultLength];
		
		int pos = 0;
		if (methodNameLength > 0) {
			System.arraycopy(methodName, 0, result, pos, methodNameLength);
			pos += methodNameLength;
		}
		if (countCharsLength > 0) {
			System.arraycopy(countChars, 0, result, pos, countCharsLength);
			pos += countCharsLength;
		}
		result[pos++] = SEPARATOR;
		if (qualifierLength > 0) {
			System.arraycopy(declaringQualification, 0, result, pos, qualifierLength);
			pos += qualifierLength;
		}
		result[pos++] = SEPARATOR;

		if (typeNameLength > 0) {
			System.arraycopy(typeName, 0, result, pos, typeNameLength);
			pos += typeNameLength;
		}

		
		int typeModifiersWithExtraFlags = typeModifiers | encodeExtraFlags(extraFlags);
		result[pos++] = SEPARATOR;
		result[pos++] = (char) typeModifiersWithExtraFlags;
		result[pos++] = (char) (typeModifiersWithExtraFlags>>16);
		
		result[pos++] = SEPARATOR;
		if (packageNameLength > 0) {
			System.arraycopy(packageName, 0, result, pos, packageNameLength);
			pos += packageNameLength;
		}
		
		if (argCount == 0) {
			result[pos++] = SEPARATOR;
			result[pos++] = SEPARATOR;
			result[pos++] = SEPARATOR;
		} else if (argCount > 0) {
			result[pos++] = SEPARATOR;
			if (parameterTypesLength > 0) {
				if (signature == null) {
					System.arraycopy(parameterTypesChars, 0, result, pos, parameterTypesLength);
				} else {
					System.arraycopy(CharOperation.replaceOnCopy(signature, SEPARATOR, '\\'), 0, result, pos, parameterTypesLength);
				}
				pos += parameterTypesLength;
			}
			
			result[pos++] = SEPARATOR;
			if (parameterNamesLength > 0) {
				System.arraycopy(parameterNamesChars, 0, result, pos, parameterNamesLength);
				pos += parameterNamesLength;
			}
			
			result[pos++] = SEPARATOR;
		}
		result[pos++] = (char) modifiers;
		result[pos++] = (char) (modifiers>>16);
		result[pos++] = SEPARATOR;

		if (returnTypeLength > 0) {
			System.arraycopy(returnTypeChars, 0, result, pos, returnTypeLength);
			pos += returnTypeLength;
		}
		result[pos++] = SEPARATOR;
		return result;
	}

