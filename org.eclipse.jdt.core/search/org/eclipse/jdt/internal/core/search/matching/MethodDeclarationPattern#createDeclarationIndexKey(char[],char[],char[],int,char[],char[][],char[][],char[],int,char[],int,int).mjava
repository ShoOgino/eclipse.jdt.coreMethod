	/**
	 * Method Declaration entries are encoded as described
	 *
	 * Binary Method Declaration for class
	 * MethodName '/' Arity '/' DeclaringQualifier '/' TypeName '/' TypeModifers '/' PackageName '/' Signature '/' ParameterNamesopt '/' Modifiers '/' returnType
	 * Source method for class
	 * MethodName '/' Arity '/' DeclaringQualifier '/' TypeName '/' TypeModifers '/' PackageName '/' ParameterTypes '/' ParameterNamesopt '/' Modifiers '/' returnType
	 * TypeModifiers contains some encoded extra information
	 * 		{@link ExtraFlags#IsMemberType}
	 * 		{@link ExtraFlags#HasNonPrivateStaticMemberTypes}
	 * 		{@link ExtraFlags#ParameterTypesStoredAsSignature}
	 */
	public static char[] createDeclarationIndexKey(
			char[] typeName,
			char[] declaringQualification,
			char[] methodName,
			int argCount,
			char[] signature,
			char[][] parameterTypes,
			char[][] parameterNames,
			char[] returnType,
			int modifiers,
			char[] packageName,
			int typeModifiers,
			int extraFlags) {

		char[] countChars;
		char[] parameterTypesChars = null;
		char[] parameterNamesChars = null;


		countChars = argCount < 10 ? new char[] {COUNTS[argCount][1]}:  String.valueOf(argCount).toCharArray();
		if (argCount > 0) {
			if (signature == null) {
				if (parameterTypes != null && parameterTypes.length == argCount) {
					parameterTypesChars = CharOperation.concatWith(parameterTypes, PARAMETER_SEPARATOR);
				}
			} else {
				extraFlags |= ExtraFlags.ParameterTypesStoredAsSignature;
			}
			if (parameterNames != null && parameterNames.length == argCount) {
				parameterNamesChars = CharOperation.concatWith(parameterNames, PARAMETER_SEPARATOR);
			}
		}

		char[] returnTypeChars = returnType == null ? CharOperation.NO_CHAR : getTypeErasure(returnType);
		int typeModifiersWithExtraFlags = typeModifiers | encodeExtraFlags(extraFlags);
		int entryIndex = 0;
		int numEntries = 10;
		char [][] tmp = new char[numEntries][];

		tmp[entryIndex++] = methodName != null ? methodName : CharOperation.NO_CHAR;
		tmp[entryIndex++] = countChars;
		tmp[entryIndex++] = declaringQualification != null ? declaringQualification : CharOperation.NO_CHAR;
		tmp[entryIndex++] = typeName != null ? typeName : CharOperation.NO_CHAR;
		tmp[entryIndex++] = new char[] {(char) typeModifiersWithExtraFlags, (char) (typeModifiersWithExtraFlags>>16)};
		tmp[entryIndex++] = packageName != null ? packageName : CharOperation.NO_CHAR;

		if (argCount == 0) {
			tmp[entryIndex++] = CharOperation.NO_CHAR;
			tmp[entryIndex++] = CharOperation.NO_CHAR;
		} else if (argCount > 0) {
			tmp[entryIndex++] = signature != null ? CharOperation.replaceOnCopy(signature, SEPARATOR, '\\') : parameterTypesChars != null ? parameterTypesChars  : CharOperation.NO_CHAR;
			tmp[entryIndex++] = parameterNamesChars != null ? parameterNamesChars : CharOperation.NO_CHAR;
		}
		tmp[entryIndex++] = new char[] {(char) modifiers, (char) (modifiers>>16)};
		tmp[entryIndex] = returnTypeChars;
		return CharOperation.concatWithAll(tmp, '/');
	}

