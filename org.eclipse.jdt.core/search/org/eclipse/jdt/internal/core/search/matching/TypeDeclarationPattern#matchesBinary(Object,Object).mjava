/**
 * @see SearchPattern#matchesBinary(Object, Object)
 */
public boolean matchesBinary(Object binaryInfo, Object enclosingBinaryInfo) {
	if (!(binaryInfo instanceof IBinaryType)) return false;

	IBinaryType type = (IBinaryType) binaryInfo;
	char[] fullyQualifiedTypeName = (char[]) type.getName().clone();
	CharOperation.replace(fullyQualifiedTypeName, '/', '.');

	if (this.enclosingTypeNames == null) {
		if (!matchesType(this.simpleName, this.pkg, fullyQualifiedTypeName)) return false;
	} else {
		char[] enclosingTypeName = CharOperation.concatWith(this.enclosingTypeNames, '.');
		char[] pattern = this.pkg == null
			? enclosingTypeName
			: CharOperation.concat(this.pkg, enclosingTypeName, '.');
		if (!matchesType(this.simpleName, pattern, fullyQualifiedTypeName)) return false;
	}

	switch (this.classOrInterface) {
		case CLASS_SUFFIX:
			return !type.isInterface();
		case INTERFACE_SUFFIX:
			return type.isInterface();
		case TYPE_SUFFIX: // nothing
	}
	return true;
}

