/**
 * Query a given index for matching entries. 
 */
public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException {

	if (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();
	
	/* narrow down a set of entries using prefix criteria */
	long[] possibleRefs = null;
	int maxRefs = -1;
	this.resetQuery();
	do {
		IEntryResult[] entries = input.queryEntriesPrefixedBy(indexEntryPrefix());
		if (entries == null) break;

		int numFiles = input.getNumFiles();
		long[] references = null;
		int referencesLength = -1;
		for (int i = 0, max = entries.length; i < max; i++) {
			if (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();

			/* retrieve and decode entry */	
			IEntryResult entry = entries[i];
			decodeIndexEntry(entry);
			if (matchIndexEntry()) {
				/* accumulate references in an array of bits : 1 if the reference is present, 0 otherwise */
				int[] fileReferences = entry.getFileReferences();
				for (int j = 0, refLength = fileReferences.length; j < refLength; j++) {
					int fileReference = fileReferences[j];
					int vectorIndex = fileReference / 64; // a long has 64 bits
					if (references == null) {
						referencesLength = (numFiles / 64) + 1;
						references = new long[referencesLength];
					}
					long mask = 1L << (fileReference % 64);
					references[vectorIndex] |= mask;
				}
			}
		}
		
		/* only select entries which actually match the entire search pattern */
		if (references == null) return;
		if (possibleRefs == null) {
			/* first query : these are the possible references */
			possibleRefs = references;
			maxRefs = numFiles;
		} else {
			/* eliminate possible references that don't match the current references */
			int possibleLength = possibleRefs.length;
			for (int i = 0, length = references.length; i < length; i++) {
				if (i < possibleLength)
					possibleRefs[i] &= references[i];
				else
					possibleRefs[i] = 0;
			}
			// check to see that there are still possible references after the merge
			while (--possibleLength >= 0 && possibleRefs[possibleLength] == 0);
			if (possibleLength == -1) return;
		}
	} while (this.hasNextQuery());

	/* report possible references that remain */
	if (possibleRefs != null) {
		int[] refs = new int[maxRefs];
		int refsLength = 0;
		for (int reference = 1; reference <= maxRefs; reference++) {
			int vectorIndex = reference / 64; // a long has 64 bits
			if ((possibleRefs[vectorIndex] & (1L << (reference % 64))) != 0)
				refs[refsLength++] = reference;
		}
		System.arraycopy(refs, 0, refs = new int[refsLength], 0, refsLength);
		this.feedIndexRequestor(requestor, refs, input, scope);
	}
}

