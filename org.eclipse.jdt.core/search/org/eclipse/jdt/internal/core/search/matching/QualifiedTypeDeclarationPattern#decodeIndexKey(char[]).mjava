public void decodeIndexKey(char[] key) {
	int slash = CharOperation.indexOf(SEPARATOR, key, 0);
	this.simpleName = CharOperation.subarray(key, 0, slash);

	int start = ++slash;
	
	// read package
	if (key[start] == SEPARATOR) {
		this.pkg = CharOperation.NO_CHAR;
	} else {
		slash = CharOperation.indexOf(SEPARATOR, key, start);
		this.pkg = internedPackageNames.add(CharOperation.subarray(key, start, slash));
	}
	this.qualification = this.pkg;

	// Retrieve enclosing type names
	start = ++slash;
	int last;
	if (key[start] == SEPARATOR) {
		this.enclosingTypeNames = CharOperation.NO_CHAR_CHAR;		
	} else {
		last = slash = CharOperation.indexOf(SEPARATOR, key, start);
		int length = this.qualification.length;
		int size = last - start;
		System.arraycopy(this.qualification, 0, this.qualification = new char[length+1+size], 0, length);
		this.qualification[length] = '.';
		if (last == (start+1) && key[start] == ZERO_CHAR) {
			this.enclosingTypeNames = ONE_ZERO_CHAR;
			this.qualification[length+1] = ZERO_CHAR;
		} else {
			this.enclosingTypeNames = CharOperation.splitOn('.', key, start, last);
			System.arraycopy(key, start, this.qualification, length+1, size);
		}
	}

	// read modifiers
	start = slash + 1;
	slash = CharOperation.indexOf(SEPARATOR, key, start);
	last = slash - 1;
	this.modifiers = key[last-1] + (key[last]<<16);
	decodeModifiers();
	
	// module name
	start = slash + 1; // beginning of module name;
	slash = CharOperation.indexOf(SEPARATOR, key, start); 
	this.moduleName = start == slash ? CharOperation.NO_CHAR : CharOperation.subarray(key, start, slash);

	// Primary or Secondary
	start = slash + 1;
	this.secondary = key[start] == 'S';
}

