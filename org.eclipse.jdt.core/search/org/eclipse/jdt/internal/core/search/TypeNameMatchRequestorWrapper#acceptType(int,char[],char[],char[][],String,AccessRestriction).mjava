/* (non-Javadoc)
 * @see org.eclipse.jdt.internal.core.search.IRestrictedAccessTypeRequestor#acceptType(int, char[], char[], char[][], java.lang.String, org.eclipse.jdt.internal.compiler.env.AccessRestriction)
 */
public void acceptType(int modifiers, char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path, AccessRestriction access) {
	if (access == null) { // accept only if there's no access violation
		if (this.scope instanceof JavaSearchScope) {
			String projectPath = ((JavaSearchScope)this.scope).projectPathFor(path);
			if (projectPath == null) {
				if (this.workingCopies == null) {
					// Internal resource, project path won't be store as it can be computed from path
					TypeNameMatch match = new TypeNameMatch(modifiers, packageName, simpleTypeName, enclosingTypeNames, path);
					this.requestor.acceptTypeNameMatch(match);
				} else {
					// Internal working copy, project path won't be store as it can be computed from path
					WorkingCopiesTypeNameMatch match = new WorkingCopiesTypeNameMatch(modifiers, packageName, simpleTypeName, enclosingTypeNames, path, this.workingCopies);
					this.requestor.acceptTypeNameMatch(match);
				}
			} else {
				// External resource, store specific project path
				ExternalTypeNameMatch match = new ExternalTypeNameMatch(modifiers, packageName, simpleTypeName, enclosingTypeNames, path, projectPath);
				this.requestor.acceptTypeNameMatch(match);
			}
		}
	}
}

