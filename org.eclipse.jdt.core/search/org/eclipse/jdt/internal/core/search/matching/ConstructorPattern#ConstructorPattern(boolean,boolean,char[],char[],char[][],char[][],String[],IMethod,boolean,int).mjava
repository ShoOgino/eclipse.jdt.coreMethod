/*
 * Instanciate a method pattern with signatures for generics search
 */
public ConstructorPattern(
	boolean findDeclarations,
	boolean findReferences,
	char[] declaringSimpleName,	
	char[] declaringQualification,
	char[][] parameterQualifications, 
	char[][] parameterSimpleNames,
	String[] parameterSignatures,
	IMethod method,
	boolean varargs,
	int matchRule) {

	this(findDeclarations,
		findReferences,
		declaringSimpleName,	
		declaringQualification,
		parameterQualifications, 
		parameterSimpleNames,
		varargs,
		matchRule);

	// Get unique key for parameterized constructors
	String uniqueKey = null;
	if (method instanceof ParameterizedSourceMethod) {
		uniqueKey = ((ParameterizedSourceMethod)method).uniqueKey;
	} else if (method instanceof ParameterizedBinaryMethod) {
		uniqueKey = ((ParameterizedBinaryMethod)method).uniqueKey;
	} else {
		constructorParameters = true;
	}

	// Store type signature and arguments for declaring type
	if (uniqueKey != null) {
		String methodReceiverType = Util.extractMethodReceiverType(uniqueKey);
		if (methodReceiverType != null) {
			this.typeSignatures = Util.splitTypeLevelsSignature(methodReceiverType);
			setTypeArguments(Util.getAllTypeArguments(this.typeSignatures));
		} else {
			storeTypeSignaturesAndArguments(method.getDeclaringType());
		}
	} else {
		storeTypeSignaturesAndArguments(method.getDeclaringType());
	}

	// store type signatures and arguments for method parameters type
	if (parameterSignatures != null) {
		int length = parameterSignatures.length;
		if (length > 0) {
			parametersTypeSignatures = new char[length][][];
			parametersTypeArguments = new char[length][][][];
			for (int i=0; i<length; i++) {
				parametersTypeSignatures[i] = Util.splitTypeLevelsSignature(parameterSignatures[i]);
				parametersTypeArguments[i] = Util.getAllTypeArguments(parametersTypeSignatures[i]);
			}
		}
	}

	// Store type signatures and arguments for method
	constructorArguments = extractMethodArguments(method);
	if (hasConstructorArguments())  ((InternalSearchPattern)this).mustResolve = true;
}

