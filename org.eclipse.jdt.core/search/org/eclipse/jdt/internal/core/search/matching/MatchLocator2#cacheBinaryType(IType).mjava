	/*
	 * Caches the given binary type in the lookup environment and returns it.
	 * Returns the existing one if already cached.
	 * Returns null if source type binding was cached.
	 */
	BinaryTypeBinding cacheBinaryType(IType type) throws JavaModelException {
		IType enclosingType = type.getDeclaringType();
		if (enclosingType != null) {
			// force caching of enclosing types first, so that binary type can be found in lookup enviroment
			this.cacheBinaryType(enclosingType);
		}
		IBinaryType binaryType = (IBinaryType)((BinaryType)type).getRawInfo();
		BinaryTypeBinding binding = this.lookupEnvironment.cacheBinaryType(binaryType);
		if (binding == null) { // it was already cached as a result of a previous query
			char[][] compoundName = CharOperation.splitOn('.', type.getFullyQualifiedName().toCharArray());
			ReferenceBinding referenceBinding = this.lookupEnvironment.getCachedType(compoundName);
			if (referenceBinding != null && (referenceBinding instanceof BinaryTypeBinding)) {
				// if the binding could be found and if it comes from a binary type,
				binding = (BinaryTypeBinding)referenceBinding;
			}
		}
		return binding;
	}

