	/**
	 * @see SearchPattern#matches(AstNode, boolean)
	 */
	protected boolean matches(AstNode node, boolean resolve) {
		if (!(node instanceof ConstructorDeclaration))
			return false;

		ConstructorDeclaration constructor = (ConstructorDeclaration) node;

		// constructor name is stored in selector field
		if (this.declaringSimpleName != null
			&& !this.matchesName(this.declaringSimpleName, constructor.selector))
			return false;

		// declaring type
		MethodBinding binding = constructor.binding;
		if (resolve && binding != null) {
			ReferenceBinding declaringBinding = binding.declaringClass;
			if (!this
				.matchesType(
					this.declaringSimpleName,
					this.declaringQualification,
					declaringBinding))
				return false;
		}

		// argument types
		int argumentCount =
			this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;
		if (argumentCount > -1) {
			int parameterCount =
				constructor.arguments == null ? 0 : constructor.arguments.length;
			if (parameterCount != argumentCount)
				return false;

			if (resolve && binding != null) {
				for (int i = 0; i < parameterCount; i++) {
					char[] qualification = this.parameterQualifications[i];
					char[] type = this.parameterSimpleNames[i];
					if (!this.matchesType(type, qualification, binding.parameters[i]))
						return false;
				}
			}
		}

		return true;
	}

