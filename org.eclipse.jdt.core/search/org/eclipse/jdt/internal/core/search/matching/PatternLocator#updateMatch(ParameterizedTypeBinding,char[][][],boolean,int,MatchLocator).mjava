protected void updateMatch(ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, boolean patternHasTypeParameters, int depth, MatchLocator locator) {
	// Only possible if locator has an unit scope.
	if (locator.unitScope == null) return;

	// Set match raw flag
	boolean endPattern = patternTypeArguments==null  ? true  : depth>=patternTypeArguments.length;
	TypeBinding[] argumentsBindings = parameterizedBinding.arguments;
	boolean isRaw = parameterizedBinding.isRawType()|| (argumentsBindings==null && parameterizedBinding.genericType().isGenericType());
	if (isRaw && !this.match.isRaw()) {
		this.match.setRaw(isRaw);
	}

	// Update match
	if (!endPattern && patternTypeArguments != null) {
		// verify if this is a reference to the generic type itself
		if (!isRaw && patternHasTypeParameters && argumentsBindings != null) {
			boolean needUpdate = false;
			TypeVariableBinding[] typeVariables = parameterizedBinding.genericType().typeVariables();
			for (int i=0, l=argumentsBindings.length; i<l; i++) {
				if (argumentsBindings[i] != typeVariables[i]) {
					needUpdate = true;
					break;
				}
			}
			if (needUpdate) {
				char[][] patternArguments =  patternTypeArguments[depth];
				updateMatch(argumentsBindings, locator, patternArguments, patternHasTypeParameters);
			}
		} else {
			char[][] patternArguments =  patternTypeArguments[depth];
			updateMatch(argumentsBindings, locator, patternArguments, patternHasTypeParameters);
		}
	}

	// Recurse
	TypeBinding enclosingType = parameterizedBinding.enclosingType();
	if (enclosingType != null && (enclosingType.isParameterizedType() || enclosingType.isRawType())) {
		updateMatch((ParameterizedTypeBinding)enclosingType, patternTypeArguments, patternHasTypeParameters, depth+1, locator);
	}
}

