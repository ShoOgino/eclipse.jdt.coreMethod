public String toString() {
	StringBuffer result = new StringBuffer();
	result.append("Exact matches:"); //$NON-NLS-1$
	for (Iterator iter = this.matchingNodes.keySet().iterator(); iter.hasNext();) {
		result.append("\n"); //$NON-NLS-1$
		AstNode node = (AstNode)iter.next();
		Object value = this.matchingNodes.get(node);
		if (value instanceof Integer) {
			result.append('\t');
			int accuracy = ((Integer)value).intValue();
			switch (accuracy) {
				case SearchPattern.IMPOSSIBLE_MATCH:
					result.append("IMPOSSIBLE_MATCH: "); //$NON-NLS-1$
					break;
				case SearchPattern.POSSIBLE_MATCH:
					result.append("POSSIBLE_MATCH: "); //$NON-NLS-1$
					break;
				case SearchPattern.INACCURATE_MATCH:
					result.append("INACCURATE_MATCH: "); //$NON-NLS-1$
					break;
				case SearchPattern.ACCURATE_MATCH:
					result.append("ACCURATE_MATCH: "); //$NON-NLS-1$
					break;
			}
		} 
		node.print(0, result);
	}
	result.append("\nPotential matches:"); //$NON-NLS-1$
	for (Iterator iter = this.potentialMatchingNodes.keySet().iterator(); iter.hasNext();) {
		result.append("\n"); //$NON-NLS-1$
		AstNode node = (AstNode)iter.next();
		Object value = this.potentialMatchingNodes.get(node);
		if (value instanceof Integer) {
			result.append("\t"); //$NON-NLS-1$
			int accuracy = ((Integer)value).intValue();
			switch (accuracy) {
				case SearchPattern.IMPOSSIBLE_MATCH:
					result.append("IMPOSSIBLE_MATCH: "); //$NON-NLS-1$
					break;
				case SearchPattern.POSSIBLE_MATCH:
					result.append("POSSIBLE_MATCH: "); //$NON-NLS-1$
					break;
				case SearchPattern.INACCURATE_MATCH:
					result.append("INACCURATE_MATCH: "); //$NON-NLS-1$
					break;
				case SearchPattern.ACCURATE_MATCH:
					result.append("ACCURATE_MATCH: "); //$NON-NLS-1$
					break;
			}
		}
		node.print(0, result);
	}
	return result.toString();
}

