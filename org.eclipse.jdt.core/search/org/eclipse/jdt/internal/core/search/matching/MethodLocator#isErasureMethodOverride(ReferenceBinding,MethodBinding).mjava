/*
 * Return whether a method may override a method in super classes erasures or not.
 */
private boolean isErasureMethodOverride(ReferenceBinding type, MethodBinding method) {
	if (type == null) return false;

	// matches superclass
	if (!type.isInterface() && !CharOperation.equals(type.compoundName, TypeConstants.JAVA_LANG_OBJECT)) {
		ReferenceBinding superClass = type.superclass();
		if (superClass.isParameterizedType()) {
			TypeBinding erasure = ((ParameterizedTypeBinding)superClass).erasure();
			if (erasure instanceof ReferenceBinding) {
				MethodBinding[] methods = superClass.getMethods(this.pattern.selector);
				int length = methods.length;
				for (int i = 0; i<length; i++) {
					if (methods[i].areParametersEqual(method)) return true;
				}
			}
		}
		if (isErasureMethodOverride(superClass, method)) {
			return true;
		}
	}

	// matches interfaces
	ReferenceBinding[] interfaces = type.superInterfaces();
	if (interfaces == null) return false;
	int iLength = interfaces.length;
	for (int i = 0; i<iLength; i++) {
		if (interfaces[i].isParameterizedType()) {
			TypeBinding erasure = ((ParameterizedTypeBinding)interfaces[i]).erasure();
			if (erasure instanceof ReferenceBinding) {
				MethodBinding[] methods = ((ReferenceBinding)erasure).getMethods(this.pattern.selector);
				int length = methods.length;
				for (int j = 0; j<length; j++) {
					if (methods[i].areParametersEqual(method)) return true;
				}
			}
		}
		if (isErasureMethodOverride(interfaces[i], method)) {
			return true;
		}
	}
	return false;
}

