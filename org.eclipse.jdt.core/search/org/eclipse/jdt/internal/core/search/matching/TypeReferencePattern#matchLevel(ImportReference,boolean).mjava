/**
 * Returns whether this type pattern matches the given import reference.
 * Look at resolved information only if specified.
 */
protected int matchLevel(ImportReference importRef, boolean resolve) {
	// NOTE: Not called when resolve is true, see MatchingNodeSet.reportMatching(unit)
	// EXCEPT for OrPatterns since they choose the matching pattern again using this method instead of matchLevel(binding)
	if (this.qualification != null) {
		char[][] tokens = importRef.tokens;
		char[] pattern = this.simpleName == null
			? this.qualification
			: CharOperation.concat(this.qualification, this.simpleName, '.');
		char[] qualifiedTypeName = CharOperation.concatWith(tokens, '.');
		switch (this.matchMode) {
			case EXACT_MATCH :
			case PREFIX_MATCH :
				if (CharOperation.prefixEquals(pattern, qualifiedTypeName, this.isCaseSensitive)) return POTENTIAL_MATCH;
				break;
			case PATTERN_MATCH:
				if (CharOperation.match(pattern, qualifiedTypeName, this.isCaseSensitive)) return POTENTIAL_MATCH;
				break;
		}
	} else {
		if (this.simpleName == null) return ACCURATE_MATCH;
		char[][] tokens = importRef.tokens;
		for (int i = 0, length = tokens.length; i < length; i++)
			if (matchesName(this.simpleName, tokens[i])) return ACCURATE_MATCH;
	}
	return IMPOSSIBLE_MATCH;
}

