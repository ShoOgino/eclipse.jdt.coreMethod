private char[][] getModuleList(TypeDeclarationPattern typePattern) {
	if (!typePattern.moduleGraph)
		return typePattern.moduleNames;
	if (typePattern.moduleGraphElements != null) // already computed
		return typePattern.moduleGraphElements;
	typePattern.moduleGraphElements = CharOperation.NO_CHAR_CHAR; // signal processing done.
	// compute (lazy)
	List<String> moduleList = Arrays.asList(CharOperation.toStrings(typePattern.moduleNames));
	int sz = moduleList.size();
	HashSet<String> mGraph = new HashSet<>();
	for (int i = 0; i < sz; ++i) {
		mGraph = getModuleGraph(moduleList.get(i), typePattern, mGraph);
	}
	sz = mGraph.size();
	if (sz > 0) {
		String[] ar = mGraph.toArray(new String[0]);
		char[][] tmp = new char[sz][];
		for (int i = 0; i < sz; ++i) {
			tmp[i] = ar[i].toCharArray();
		}	
		typePattern.moduleGraphElements = tmp;
	}
	return typePattern.moduleGraphElements;
}

