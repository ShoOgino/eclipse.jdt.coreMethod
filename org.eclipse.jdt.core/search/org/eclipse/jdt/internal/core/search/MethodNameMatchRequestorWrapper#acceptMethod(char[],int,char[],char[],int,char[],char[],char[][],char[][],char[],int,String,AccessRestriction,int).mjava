	@Override
	public void acceptMethod(char[] methodName, int parameterCount, char[] declaringQualifier,
			char[] simpleTypeName, int typeModifiers, char[] packageName, char[] signature, char[][] parameterTypes,
			char[][] parameterNames, char[] returnType, int modifiers, String path,
			AccessRestriction access, int methodIndex) {
		// Get the type
		char[][] enclosingTypeNames = declaringQualifier != null && declaringQualifier.length > 0 ? CharOperation.splitOn('.', declaringQualifier) : CharOperation.NO_CHAR_CHAR;
		IType type = getType(typeModifiers, packageName, simpleTypeName, enclosingTypeNames, path, access);
		if (type == null) return;
		if (!(!(this.scope instanceof HierarchyScope) || ((HierarchyScope) this.scope).enclosesFineGrained(type))) return;
		parameterTypes = parameterTypes == null ? CharOperation.NO_CHAR_CHAR : parameterTypes;
		IMethod method = type.getMethod(new String(methodName), CharOperation.toStrings(parameterTypes));
		this.requestor.acceptMethodNameMatch(new JavaSearchMethodNameMatch(method, modifiers));
	}

