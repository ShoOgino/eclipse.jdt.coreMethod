	/**
	 * Constructor declaration entries are encoded as follow: 'constructorDecl/' TypeName '/' Arity
	 * 	e.g.	constructorDecl/X/0
	 *			constructorDecl/Y/1
	 *
	 */
	public static final char[] bestConstructorDeclarationPrefix(
		char[] typeName,
		int arity,
		int matchMode,
		boolean isCaseSensitive) {

		if (!isCaseSensitive || typeName == null)
			return CONSTRUCTOR_DECL;
		switch (matchMode) {
			case EXACT_MATCH :
				if (arity >= 0) {
					char[] countChars;
					if (arity < 10) {
						countChars = COUNTS[arity];
					} else {
						countChars = String.valueOf(arity).toCharArray();
					}
					return concat(CONSTRUCTOR_DECL, typeName, countChars, SEPARATOR);
				}
			case PREFIX_MATCH :
				return CharOperation.concat(CONSTRUCTOR_DECL, typeName);
			case PATTERN_MATCH :
				int starPos = CharOperation.indexOf('*', typeName);
				switch (starPos) {
					case -1 :
						return CharOperation.concat(CONSTRUCTOR_DECL, typeName);
					default :
						int refLength = CONSTRUCTOR_DECL.length;
						char[] result = new char[refLength + starPos];
						System.arraycopy(CONSTRUCTOR_DECL, 0, result, 0, refLength);
						System.arraycopy(typeName, 0, result, refLength, starPos);
						return result;
					case 0 : // fall through
				}
			default :
				return CONSTRUCTOR_DECL;
		}
	}

