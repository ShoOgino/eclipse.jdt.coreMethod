/**
 * Returns whether elements of the given project or jar can see the given focus (an IJavaProject or
 * a JarPackageFragmentRot) either because the focus is part of the project or the jar, or because it is 
 * accessible throught the project's classpath
 */
public static boolean canSeeFocus(IJavaElement focus, IPath projectOrJarPath) {
	try {
		IJavaModel model = focus.getJavaModel();
		IJavaProject project = getJavaProject(projectOrJarPath, model);
		if (focus instanceof JarPackageFragmentRoot) {
			// focus is part of a jar
			JarPackageFragmentRoot jar = (JarPackageFragmentRoot)focus;
			IPath jarPath = jar.getPath();
			if (project == null) {
				// consider that a jar can see another jar only they are both referenced by the same project
				return haveSameParent(projectOrJarPath, jarPath, model); 
			} else {
				IClasspathEntry[] entries = ((JavaProject)project).getExpandedClasspath(true);
				for (int i = 0, length = entries.length; i < length; i++) {
					IClasspathEntry entry = entries[i];
					if ((entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) 
						&& entry.getPath().equals(jarPath)) {
							return true;
					}
				}
				return false;
			}
		} else {
			// focus is part of a project
			IJavaProject focusProject = (IJavaProject)focus;
			if (project == null) {
				// consider that a jar can see a project only if it is on the classpath of a project that can see the focus project
				IJavaProject[] allProjects = model.getJavaProjects();
				for (int i = 0, length = allProjects.length; i < length; i++) {
					IClasspathEntry[] entries = allProjects[i].getResolvedClasspath(true);
					for (int j = 0, length2 = entries.length; j < length2; j++) {
						IClasspathEntry entry = entries[j];
						if ((entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) 
								&& entry.getPath().equals(projectOrJarPath)
								&& canSeeFocus(focus, allProjects[i].getPath())) {
							return true;
						}
					}
				}
				return false;
			} else {
				if (focusProject.equals(project)) {
					return true;
				} else {
					IPath focusPath = focusProject.getProject().getFullPath();
					IClasspathEntry[] entries = ((JavaProject)project).getExpandedClasspath(true);
					for (int i = 0, length = entries.length; i < length; i++) {
						IClasspathEntry entry = entries[i];
						if ((entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) 
							&& entry.getPath().equals(focusPath)) {
								return true;
						}
					}
					return false;
				}
			}
		}
	} catch (JavaModelException e) {
		return false;
	}
}

