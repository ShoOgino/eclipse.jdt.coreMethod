/* (non-Javadoc)
 * @see IJavaSearchScope#enclosingProjectsAndJars()
 */
public IPath[] enclosingProjectsAndJars() {
	try {
		Vector paths = new Vector();
		IJavaModel javaModel = JavaModelManager.getJavaModel(ResourcesPlugin.getWorkspace());
		IWorkspaceRoot root = javaModel.getWorkspace().getRoot();
		for (int i = 0; i < this.elementCount; i++){
			IResource element = this.elements[i];
			IPath path = element.getProject().getFullPath();
			IProject project = element.getProject();
			if (project.exists() && project.isOpen()) {
				if (!paths.contains(path)) paths.add(path);
				if (this.includesClasspaths) {
					IJavaProject javaProject = javaModel.getJavaProject(project.getName());
					IClasspathEntry[] entries = ((JavaProject)javaProject).getExpandedClasspath(true);
					for (int j = 0; j < entries.length; j++) {
						IClasspathEntry entry = entries[j];
						switch (entry.getEntryKind()) {
							case IClasspathEntry.CPE_PROJECT:
								path = entry.getPath();
								if (!paths.contains(path) && root.getProject(path.lastSegment()).isAccessible()) {
									paths.add(path);
								}
								break;
							case IClasspathEntry.CPE_LIBRARY:
								if (this.includesBinaries) {
									path = entry.getPath();
									if (!paths.contains(path)) paths.add(path);
								}
								break;
						}
					}
				}
			}
		}
		IPath[] result = new IPath[paths.size()];
		paths.copyInto(result);
		return result;
	} catch (JavaModelException e) {
		return new IPath[0];
	}
}

