//public void match(FieldDeclaration node, MatchingNodeSet nodeSet) - SKIP IT
public void match(MethodDeclaration node, MatchingNodeSet nodeSet) {
	if (!this.pattern.findDeclarations) return;

	if (!matchesName(this.pattern.selector, node.selector)) return;
	if (this.pattern.parameterSimpleNames != null) {
		int length = this.pattern.parameterSimpleNames.length;
		AstNode[] args = node.arguments;
		int argsLength = args == null ? 0 : args.length;
		if (length != argsLength) return;

		for (int i = 0; i < argsLength; i++)
			if (!matchesTypeReference(this.pattern.parameterSimpleNames[i], ((Argument) args[i]).type)) return;
	}
	TypeReference returnType =  node.returnType;
	if (returnType == null || !matchesTypeReference(this.pattern.returnSimpleName, returnType)) return;

	nodeSet.addMatch(node, this.pattern.mustResolve ? POTENTIAL_MATCH : ACCURATE_MATCH);
}
//public void match(Reference node, MatchingNodeSet nodeSet) - SKIP IT
//public void match(TypeDeclaration node, MatchingNodeSet nodeSet) - SKIP IT
//public void match(TypeReference node, MatchingNodeSet nodeSet) - SKIP IT

