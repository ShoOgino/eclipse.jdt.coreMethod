	/**
	 * Ensure consistency of a project index. Need to walk all nested resources,
	 * and discover resources which have either been changed, added or deleted
	 * since the index was produced.
	 */
	public boolean execute(IProgressMonitor progressMonitor) {

		if (progressMonitor != null && progressMonitor.isCanceled()) return true;
		if (!project.isAccessible()) return true; // nothing to do

		IPath projectPath = this.project.getFullPath();
		IIndex index = this.manager.getIndex(projectPath, true, /*reuse index file*/ true /*create if none*/);
		if (index == null) return true;
		ReadWriteMonitor monitor = this.manager.getMonitorFor(index);
		if (monitor == null) return true; // index got deleted since acquired

		try {
			monitor.enterRead(); // ask permission to read
			saveIfNecessary(index, monitor);

			IQueryResult[] results = index.queryInDocumentNames(""); // all file names //$NON-NLS-1$
			int max = results == null ? 0 : results.length;
			final Hashtable indexedFileNames = new Hashtable(100);
			final String OK = "OK"; //$NON-NLS-1$
			final String DELETED = "DELETED"; //$NON-NLS-1$
			for (int i = 0; i < max; i++)
				indexedFileNames.put(results[i].getPath(), DELETED);
			final long indexLastModified = max == 0 ? 0L : index.getIndexFile().lastModified();

			IClasspathEntry[] entries = JavaCore.create(this.project).getRawClasspath();
			IWorkspaceRoot root = this.project.getWorkspace().getRoot();
			for (int i = 0, length = entries.length; i < length; i++) {
				if (this.isCancelled) return false;

				IClasspathEntry entry = entries[i];
				if ((entry.getEntryKind() == IClasspathEntry.CPE_SOURCE)) { // Index only source folders. Libraries are done as a separate job
					IResource sourceFolder = root.findMember(entry.getPath());
					if (sourceFolder != null) {
						final char[][] patterns = ((ClasspathEntry) entry).fullExclusionPatternChars();
						if (max == 0) {
							sourceFolder.accept(new IResourceVisitor() {
								public boolean visit(IResource resource) {
									if (isCancelled) return false;
									if (resource.getType() == IResource.FILE) {
										if (Util.isJavaFileName(resource.getName()) && resource.getLocation() != null) {
											if (patterns == null || !Util.isExcluded(resource, patterns)) {
												String name = new IFileDocument((IFile) resource).getName();
												indexedFileNames.put(name, resource);
											}
										}
										return false;
									}
									return true;
								}
							});
						} else {
							sourceFolder.accept(new IResourceVisitor() {
								public boolean visit(IResource resource) {
									if (isCancelled) return false;
									if (resource.getType() == IResource.FILE) {
										if (Util.isJavaFileName(resource.getName())) {
											IPath path = resource.getLocation();
											if (path != null && (patterns == null || !Util.isExcluded(resource, patterns))) {
												String name = new IFileDocument((IFile) resource).getName();
												indexedFileNames.put(name,
													indexedFileNames.get(name) == null || indexLastModified < path.toFile().lastModified()
														? (Object) resource
														: (Object) OK);
											}
										}
										return false;
									}
									return true;
								}
							});
						}
					}
				}
			}

			Enumeration names = indexedFileNames.keys();
			boolean shouldSave = false;
			while (names.hasMoreElements()) {
				if (this.isCancelled) return false;

				String name = (String) names.nextElement();
				Object value = indexedFileNames.get(name);
				if (value != OK) {
					shouldSave = true;
					if (value == DELETED)
						this.manager.remove(name, projectPath);
					else
						this.manager.addSource((IFile) value, projectPath);
				}
			}

			// request to save index when all cus have been indexed
			if (shouldSave)
				this.manager.request(new SaveIndex(projectPath, manager));

		} catch (CoreException e) {
			if (JobManager.VERBOSE) {
				JobManager.verbose("-> failed to index " + this.project + " because of the following exception:"); //$NON-NLS-1$ //$NON-NLS-2$
				e.printStackTrace();
			}
			this.manager.removeIndex(projectPath);
			return false;
		} catch (IOException e) {
			if (JobManager.VERBOSE) {
				JobManager.verbose("-> failed to index " + this.project + " because of the following exception:"); //$NON-NLS-1$ //$NON-NLS-2$
				e.printStackTrace();
			}
			this.manager.removeIndex(projectPath);
			return false;
		} finally {
			monitor.exitRead(); // free read lock
		}
		return true;
	}

