	/**
	 * Reports the given reference to the search requestor.
	 * Reports only occurence of the reference that have an accurracy which is not -1.
	 * Finds the accurate positions of the tokens given by qualifiedName
	 * in the source.
	 */
	public void reportAccurateReference(
		int sourceStart,
		int sourceEnd,
		char[][] qualifiedName,
		IJavaElement element,
		int[] accuracies,
		boolean accuracyStartsOnFirstToken)
		throws CoreException {

		// compute source positions of the qualified reference 
		Scanner scanner = parser.scanner;
		scanner.setSourceBuffer(
			this.potentialMatches[this.potentialMatchesIndex].getSource());
		scanner.resetTo(sourceStart, sourceEnd);

		int refSourceStart = -1, refSourceEnd = -1;
		int tokenNumber = qualifiedName.length;
		int token = -1;
		int previousValid = -1;
		int i = 0;
		int accuracyIndex = 0;
		do {
			int currentPosition = scanner.currentPosition;
			// read token
			try {
				token = scanner.getNextToken();
			} catch (InvalidInputException e) {
			}
			if (token != TerminalSymbols.TokenNameEOF) {
				char[] currentTokenSource = scanner.getCurrentTokenSource();
				boolean equals = false;
				while (i < tokenNumber
					&& !(equals = CharOperation.equals(qualifiedName[i++], currentTokenSource))) {
				}
				if (equals && (previousValid == -1 || previousValid == i - 2)) {
					previousValid = i - 1;
					if (refSourceStart == -1) {
						refSourceStart = currentPosition;
					}
					refSourceEnd = scanner.currentPosition - 1;
				} else {
					i = 0;
					refSourceStart = -1;
					previousValid = -1;
				}
				// read '.'
				try {
					token = scanner.getNextToken();
				} catch (InvalidInputException e) {
				}
			}
			if (i == tokenNumber) {
				if (accuracies[accuracyIndex] != -1) {
					// accept reference
					if (refSourceStart != -1) {
						this.report(refSourceStart, refSourceEnd, element, accuracies[accuracyIndex]);
					} else {
						this.report(sourceStart, sourceEnd, element, accuracies[accuracyIndex]);
					}
					i = 0;
					refSourceStart = -1;
					previousValid = -1;
				}
			}
			if (accuracyStartsOnFirstToken) {
				accuracyIndex++;
			}
		} while (token != TerminalSymbols.TokenNameEOF && accuracyIndex < accuracies.length);

	}

