	/*
	 * Extract method arguments using unique key for parameterized methods
	 * and type parameters for non-generic ones.
	 */
	char[][] extractMethodArguments(IMethod method) {
		String[] argumentsSignatures = null;
		BindingKey key;
		if (method.isResolved() && (key = new BindingKey(method.getKey())).isParameterizedMethod()) {
			argumentsSignatures = key.getTypeArguments();
		} else {
			try {
				ITypeParameter[] parameters = method.getTypeParameters();
				if (parameters != null) {
					int length = parameters.length;
					if (length > 0) {
						char[][] arguments = new char[length][];
						for (int i=0; i<length; i++) {
							arguments[i] = Signature.createTypeSignature(parameters[i].getElementName(), false).toCharArray();
						}
						return arguments;
					}
				}
			}
			catch (JavaModelException jme) {
				// do nothing
			}
			return null;
		}

		// Parameterized method
		if (argumentsSignatures != null) {
			int length = argumentsSignatures.length;
			if (length > 0) {
				char[][] methodArguments = new char[length][];
				for (int i=0; i<length; i++) {
					methodArguments[i] = argumentsSignatures[i].toCharArray();
					CharOperation.replace(methodArguments[i], new char[] { '$', '/' }, '.');
				}
				return methodArguments;
			}
		}
		return null;
	}

