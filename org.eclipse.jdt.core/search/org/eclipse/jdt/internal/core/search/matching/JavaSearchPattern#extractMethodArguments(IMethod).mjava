	/*
	 * Extract method arguments using unique key for parameterized methods
	 * and type parameters for non-generic ones.
	 */
	char[][] extractMethodArguments(IMethod method) {
		String[] argumentsSignatures = null;
		if (method instanceof ParameterizedSourceMethod) {
			argumentsSignatures = ((ParameterizedSourceMethod)method).genericTypeArgumentsSignatures;
		} else if (method instanceof ParameterizedBinaryMethod) {
			argumentsSignatures = ((ParameterizedBinaryMethod)method).genericTypeArgumentsSignatures;
		} else {
			try {
				ITypeParameter[] parameters = method.getTypeParameters();
				int length = parameters==null ? 0 : parameters.length;
				if (length > 0) {
					char[][] arguments = new char[length][];
					for (int i=0; i<length; i++) {
						arguments[i] = Signature.createTypeSignature(parameters[i].getElementName(), false).toCharArray();
					}
					return arguments;
				}
			}
			catch (JavaModelException jme) {
				// do nothing
			}
			return null;
		}

		// Parameterized method
		int length = argumentsSignatures==null ? 0 : argumentsSignatures.length;
		if (length > 0) {
			char[][] methodArguments = new char[length][];
			for (int i=0; i<length; i++) {
				methodArguments[i] = argumentsSignatures[i].toCharArray();
				CharOperation.replace(methodArguments[i], new char[] { '$', '/' }, '.');
			}
			return methodArguments;
		}
		return null;
	}

