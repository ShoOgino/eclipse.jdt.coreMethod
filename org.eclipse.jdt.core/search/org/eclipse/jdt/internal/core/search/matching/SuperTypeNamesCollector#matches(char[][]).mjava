protected boolean matches(char[][] compoundName) {
	int length = compoundName.length;
	if (length == 0) return false;
	char[] simpleName = compoundName[length-1];
	int last = length - 1;
	if (this.typeSimpleName != null) {
		// most frequent case: simple name equals last segment of compoundName
		if (this.pattern.matchesName(simpleName, this.typeSimpleName)) {
			char[][] qualification = new char[last][];
			System.arraycopy(compoundName, 0, qualification, 0, last);
			return 
				this.pattern.matchesName(
					this.typeQualification, 
					CharOperation.concatWith(qualification, '.'));
		} else if (!CharOperation.endsWith(simpleName, this.typeSimpleName)) {
			return false;
		} else {
			// member type -> transform A.B.C$D into A.B.C.D
			System.arraycopy(compoundName, 0, compoundName = new char[length+1][], 0, last);
			int dollar = CharOperation.indexOf('$', simpleName);
			if (dollar == -1) return false;
			compoundName[last] = CharOperation.subarray(simpleName, 0, dollar);
			compoundName[length] = CharOperation.subarray(simpleName, dollar+1, simpleName.length); 
			return this.matches(compoundName);
		}
	} else {
		char[][] qualification = new char[last][];
		System.arraycopy(compoundName, 0, qualification, 0, last);
		return 
			this.pattern.matchesName(
				this.typeQualification, 
				CharOperation.concatWith(qualification, '.'));
	}
}

