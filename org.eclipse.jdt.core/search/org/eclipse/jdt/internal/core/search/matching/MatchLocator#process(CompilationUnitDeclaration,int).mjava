	/*
	 * Process a compilation unit already parsed and build.
	 */
	public void process(CompilationUnitDeclaration unit, int i) throws CoreException {
		MatchingNodeSet matchingNodeSet = null;
		try {
			this.currentPotentialMatch = this.matchesToProcess[i];
			if (this.currentPotentialMatch == null) return;
			matchingNodeSet = this.currentPotentialMatch.matchingNodeSet;
			
			if (unit == null || unit.isEmpty()) {
				if (this.currentPotentialMatch.openable instanceof org.eclipse.jdt.internal.core.ClassFile) {
					this.currentPotentialMatch.locateMatchesInClassFile();
				}
				return;
			}
			if (hasAlreadyDefinedType(unit)) {
				// skip type has it is hidden so not visible
				return;
			}
	
			this.parser.matchSet = this.currentPotentialMatch.matchingNodeSet;
			getMethodBodies(unit, i);
						
			// report matches that don't need resolve
			matchingNodeSet.cuHasBeenResolved = this.compilationAborted;
			matchingNodeSet.reportMatching(unit);

			if (this.pattern.mustResolve 
					&& unit.types != null 
					&& !this.compilationAborted) {

				if (SearchEngine.VERBOSE) {
					System.out.println("Resolving " + this.currentPotentialMatch.openable.toStringWithAncestors()); //$NON-NLS-1$
				}

				// fault in fields & methods
				if (unit.scope != null)
					unit.scope.faultInTypes();
		
				// verify inherited methods
				if (unit.scope != null)
					unit.scope.verifyMethods(this.lookupEnvironment.methodVerifier());
		
				// type checking
				unit.resolve();
		
				// refresh the total number of units known at this stage
				unit.compilationResult.totalUnitsKnown = totalUnits;

				// report matches that needed resolve
				matchingNodeSet.cuHasBeenResolved = true;
				matchingNodeSet.reportMatching(unit);
			}
		} catch (AbortCompilation e) {
			// could not resolve: report innacurate matches
			if (matchingNodeSet != null) {
				matchingNodeSet.cuHasBeenResolved = true;
				matchingNodeSet.reportMatching(unit);
			}
			if (!(e instanceof AbortCompilationUnit)) {
				// problem with class path
				throw e;
			}
		} finally {
			this.parser.matchSet = null;
			this.currentPotentialMatch = null;
		}
	}

