/**
 * Collects the names of all the supertypes of the given type.
 */
private char[][][] collectSuperTypeNames(ReferenceBinding type) {

	// superclass
	char[][][] superClassNames = null;
	ReferenceBinding superclass = type.superclass();
	if (superclass != null) {
		superClassNames = this.collectSuperTypeNames(superclass);
	}

	// interfaces
	char[][][][] superInterfaceNames = null;
	int superInterfaceNamesLength = 0;
	ReferenceBinding[] interfaces = type.superInterfaces();
	if (interfaces != null) {
		superInterfaceNames = new char[interfaces.length][][][];
		for (int i = 0; i < interfaces.length; i++) {
			superInterfaceNames[i] = this.collectSuperTypeNames(interfaces[i]);
			superInterfaceNamesLength += superInterfaceNames[i].length;
		}
	}

	int length = 
		(superclass == null ? 0 : 1)
		+ (superClassNames == null ? 0 : superClassNames.length)
		+ (interfaces == null ? 0 : interfaces.length)
		+ superInterfaceNamesLength;
	char[][][] result = new char[length][][];
	int index = 0;
	if (superclass != null) {
		result[index++] = superclass.compoundName;
		if (superClassNames != null) {
			System.arraycopy(superClassNames, 0, result, index, superClassNames.length);
			index += superClassNames.length;
		}
	}
	if (interfaces != null) {
		for (int i = 0, max = interfaces.length; i < max; i++) {
			result[index++] = interfaces[i].compoundName;
			if (superInterfaceNames != null) {
				System.arraycopy(superInterfaceNames[i], 0, result, index, superInterfaceNames[i].length);
				index += superInterfaceNames[i].length;
			}
		}
	}
	
	return result;
}

