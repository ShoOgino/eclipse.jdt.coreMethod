protected char[][][] collect() throws JavaModelException {
	
	if (this.type != null) {
		this.result = new char[1][][];
		this.resultIndex = 0;
		this.createParser((JavaProject)this.type.getJavaProject());
		if (this.type.isBinary()) {
			BinaryTypeBinding binding = this.cacheBinaryType(this.type);
			this.collectSuperTypeNames(binding);
		} else {
			try {
				ICompilationUnit unit = this.type.getCompilationUnit();
				if (unit.isWorkingCopy()) {
					unit = (ICompilationUnit)unit.getOriginalElement();
				}
				CompilationUnitDeclaration parsedUnit = this.buildBindings(unit);
				if (parsedUnit != null) {
					parsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);
				}
			} catch (AbortCompilation e) {
				// report inacurrate matches
				return null;
			}
		}
		return this.result;
	} else {	
		// Collect the paths of the cus that declare a type which matches declaringQualification + declaringSimpleName
		String[] paths = this.getPathsOfDeclaringType();
		
		// Create bindings from source types and binary types
		// and collect super type names of the type declaration 
		// that match the given declaring type
		if (paths != null) {
			Util.sort(paths); // sort by projects
			JavaProject previousProject = null;
			this.result = new char[1][][];
			this.resultIndex = 0;
			for (int i = 0, length = paths.length; i < length; i++) {
				try {
					Openable openable = this.handleFactory.createOpenable(paths[i]);
					if (openable == null)
						continue; // outside classpath
					IJavaProject project = openable.getJavaProject();
					if (previousProject == null || !previousProject.equals(project)) {
						previousProject = (JavaProject)project;
						this.createParser(previousProject);
					}
					if (openable instanceof ICompilationUnit) {
						ICompilationUnit unit = (ICompilationUnit)openable;
						CompilationUnitDeclaration parsedUnit = this.buildBindings(unit);
						if (parsedUnit != null) {
							parsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);
						}
					} else if (openable instanceof IClassFile) {
						IClassFile classFile = (IClassFile)openable;
						BinaryTypeBinding binding = this.cacheBinaryType(classFile.getType());
						if (this.matches(binding)) {
							this.collectSuperTypeNames(binding);
						}
					}
				} catch (AbortCompilation e) {
					// ignore: continue with next element
				} catch (JavaModelException e) {
					// ignore: continue with next element
				}
			}
			System.arraycopy(this.result, 0, this.result = new char[this.resultIndex][][], 0, this.resultIndex);
			return this.result;
		} else {
			return null;
		}
	}
}

