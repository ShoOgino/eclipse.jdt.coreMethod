protected char[][][] collect() {
		
	// Collect the paths of the cus that declare a type which matches declaringQualification + declaringSimpleName
	String[] paths = this.getPathsOfDeclaringType();
	
	// Create bindings from source types and binary types
	// and collect super type names of the type declaration 
	// that match the given declaring type
	if (paths != null) {
		this.result = new char[1][][];
		this.resultIndex = 0;
		for (int i = 0, length = paths.length; i < length; i++) {
			try {
				Openable openable = locator.handleFactory.createOpenable(paths[i]);
				if (openable == null)
					continue; // outside classpath
				if (openable instanceof ICompilationUnit) {
					ICompilationUnit unit = (ICompilationUnit)openable;
					CompilationUnitDeclaration parsedUnit = locator.buildBindings(unit);
					if (parsedUnit != null) {
						parsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);
					}
				} else if (openable instanceof IClassFile) {
					IClassFile classFile = (IClassFile)openable;
					IBinaryType binaryType = (IBinaryType)((BinaryType)classFile.getType()).getRawInfo();
					BinaryTypeBinding binding = locator.lookupEnvironment.cacheBinaryType(binaryType);
					if (this.matches(binding)) {
						this.collectSuperTypeNames(binding);
					}
				}
			} catch (AbortCompilation e){
				//e.printStackTrace(); 
				// ignore: continue with next element
			} catch (JavaModelException e) {
				// ignore: continue with next element
			}
		}
		System.arraycopy(this.result, 0, this.result = new char[this.resultIndex][][], 0, this.resultIndex);
		return this.result;
	} else {
		return null;
	}
}

