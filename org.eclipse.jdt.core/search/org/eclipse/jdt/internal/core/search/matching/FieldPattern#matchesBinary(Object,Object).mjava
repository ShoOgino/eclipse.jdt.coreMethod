/**
 * @see SearchPattern#matchesBinary(Object, Object)
 */
public boolean matchesBinary(Object binaryInfo, Object enclosingBinaryInfo) {
	if (!this.findDeclarations) return false; // only relevant when finding declarations
	if (!(binaryInfo instanceof IBinaryField)) return false;

	IBinaryField field = (IBinaryField) binaryInfo;
	if (!matchesName(this.name, field.getName())) return false;

	// declaring type
	if (enclosingBinaryInfo != null) {
		IBinaryType declaringType = (IBinaryType) enclosingBinaryInfo;
		char[] declaringTypeName = (char[]) declaringType.getName().clone();
		CharOperation.replace(declaringTypeName, '/', '.');
		if (!matchesType(this.declaringSimpleName, this.declaringQualification, declaringTypeName))
			return false;
	}

	// field type
	String fieldTypeSignature = new String(field.getTypeName()).replace('/', '.');
	return matchesType(this.typeSimpleName, this.typeQualification, Signature.toString(fieldTypeSignature).toCharArray());
}

