/**
 * Returns whether this field reference pattern matches the given field declaration in
 * write access.
 * Look at resolved information only if specified.
 */
protected int matchLevel(FieldDeclaration fieldDecl, boolean resolve) {
	if (resolve)
		return matchField(fieldDecl.binding, true);

	int referencesLevel = IMPOSSIBLE_MATCH;
	if (this.findReferences) {
		// must be a write only access with an initializer
		if (this.writeAccess && !this.readAccess && fieldDecl.initialization != null) {
			if (matchesName(this.name, fieldDecl.name)) {
				if (!this.mustResolve) return ACCURATE_MATCH; // cannot get better
				referencesLevel = POTENTIAL_MATCH;
			}
		}
	}

	int declarationsLevel = IMPOSSIBLE_MATCH;
	if (this.findDeclarations) {
		// answer referencesLevel if this is an IMPOSSIBLE_MATCH
		if (!fieldDecl.isField()) return referencesLevel; // ignore field initializers
		if (!matchesName(this.name, fieldDecl.name)) return referencesLevel;
		if (!matchesTypeReference(this.typeSimpleName, fieldDecl.type)) return referencesLevel;

		if (!this.mustResolve) return ACCURATE_MATCH; // cannot get better
		declarationsLevel = POTENTIAL_MATCH;
	}
	return referencesLevel >= declarationsLevel ? referencesLevel : declarationsLevel; // answer the stronger match
}

