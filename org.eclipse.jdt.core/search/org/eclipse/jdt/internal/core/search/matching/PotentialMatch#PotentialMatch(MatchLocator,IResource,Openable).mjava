public PotentialMatch(MatchLocator locator, IResource resource, Openable openable) {
	this.locator = locator;
	this.resource = resource;
	this.openable = openable;
	if (openable instanceof CompilationUnit) {
		this.buildTypeBindings(this.getSource());
	} else if (openable instanceof org.eclipse.jdt.internal.core.ClassFile) {
		try {
			String source = ((org.eclipse.jdt.internal.core.ClassFile)openable).getSource();
			if (source != null) {
				this.buildTypeBindings(source.toCharArray());
				
				// try to use the main type's class file as the openable
				TypeDeclaration[] types = this.parsedUnit.types;
				if (types != null && types.length > 0) {
					String simpleTypeName = new String(types[0].name);
					IPackageFragment parent = (IPackageFragment)openable.getParent();
					org.eclipse.jdt.core.IClassFile classFile = 
						parent.getClassFile(simpleTypeName + ".class");
					if (classFile.exists()) {
						this.openable = (Openable)classFile;
					} 
				}
			}
		} catch (JavaModelException e) {
		}
	}
}

