/**
 * Return if pattern method may override a method in super classes
 * or or implement one in super interfaces of given type.
 * @param type
 * @return level
 */
int matchOverriddenMethod(ReferenceBinding type) {
	if (type == null) return INACCURATE_MATCH;
	int level = IMPOSSIBLE_MATCH;

	// matches superclass
	if (!type.isInterface() && !CharOperation.equals(type.compoundName, TypeConstants.JAVA_LANG_OBJECT)) {
		if (type.superclass().isParameterizedType()) {
			TypeBinding erasure = ((ParameterizedTypeBinding)type.superclass()).erasure();
			if (erasure instanceof ReferenceBinding) {
				MethodBinding[] methods = ((ReferenceBinding)erasure).getMethods(this.pattern.selector);
				int length = methods.length;
				for (int i = 0; i<length && level == IMPOSSIBLE_MATCH; i++) {
					level = matchMethod(methods[i]);
				}
				if (level != IMPOSSIBLE_MATCH) return level;
			}
		}
		level = matchOverriddenMethod(type.superclass());
		if (level != IMPOSSIBLE_MATCH) return level;
	}

	// matches interfaces
	ReferenceBinding[] interfaces = type.superInterfaces();
	if (interfaces == null) return INACCURATE_MATCH;
	int iLength = interfaces.length;
	for (int i = 0; i<iLength; i++) {
		if (interfaces[i].isParameterizedType()) {
			TypeBinding erasure = ((ParameterizedTypeBinding)interfaces[i]).erasure();
			if (erasure instanceof ReferenceBinding) {
				MethodBinding[] methods = ((ReferenceBinding)erasure).getMethods(this.pattern.selector);
				int mLength = methods.length;
				for (int j = 0; j<mLength && level == IMPOSSIBLE_MATCH; j++) {
					level = matchMethod(methods[j]);
				}
				if (level != IMPOSSIBLE_MATCH) return level;
			}
		}
		level = matchOverriddenMethod(interfaces[i]);
		if (level != IMPOSSIBLE_MATCH) return level;
	}
	return IMPOSSIBLE_MATCH;
}

