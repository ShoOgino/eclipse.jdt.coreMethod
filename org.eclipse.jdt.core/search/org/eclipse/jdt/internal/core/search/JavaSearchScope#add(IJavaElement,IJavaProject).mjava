/**
 * Add an element to the java search scope. If project is not null, then use it to
 * retrieve and store access restriction corresponding to the provided element.
 * @param element The element we want to add to current java search scope
 * @throws JavaModelException May happen if some Java Model info are not available
 */
public void add(IJavaElement element, IJavaProject project) throws JavaModelException {
	IPackageFragmentRoot root = null;
	int includeMask = SOURCES | APPLICATION_LIBRARIES | SYSTEM_LIBRARIES;
	switch (element.getElementType()) {
		case IJavaElement.JAVA_MODEL:
			// a workspace sope should be used
			break; 
		case IJavaElement.JAVA_PROJECT:
			if (project == null)
				add((JavaProject)element, null, includeMask, new HashSet(2), null);
			else
				add((JavaProject)project, element.getPath(), includeMask, new HashSet(2), null);
			break;
		case IJavaElement.PACKAGE_FRAGMENT_ROOT:
			root = (IPackageFragmentRoot)element;
			if (project == null)
				add(root.getPath(), true, null);
			else
				add((JavaProject)project, root.getPath(), includeMask, new HashSet(2), null);
			break;
		case IJavaElement.PACKAGE_FRAGMENT:
			root = (IPackageFragmentRoot)element.getParent();
			if (root.isArchive()) {
				String relativePath = Util.concatWith(((PackageFragment) element).names, '/');
				IPath path = root.getPath().append(new Path(relativePath));
				if (project == null)
					add(path, false, null);
				else
					add((JavaProject)project, path, includeMask, new HashSet(2), null);
			} else {
				IResource resource = element.getResource();
				if (resource != null && resource.isAccessible()) {
					if (project == null)
						add(resource.getFullPath(), false, null);
					else
						add((JavaProject)project, resource.getFullPath(), includeMask, new HashSet(2), null);
				}
			}
			break;
		default:
			// remember sub-cu (or sub-class file) java elements
			if (element instanceof IMember) {
				if (this.elements == null) {
					this.elements = new ArrayList();
				}
				this.elements.add(element);
			}
			this.add(this.fullPath(element), true, null);
			
			// find package fragment root including this java element
			IJavaElement parent = element.getParent();
			while (parent != null && !(parent instanceof IPackageFragmentRoot)) {
				parent = parent.getParent();
			}
			if (parent instanceof IPackageFragmentRoot) {
				root = (IPackageFragmentRoot)parent;
			}
	}
	
	if (root != null) {
		if (root.getKind() == IPackageFragmentRoot.K_BINARY) {
			this.addEnclosingProjectOrJar(root.getPath());
		} else {
			this.addEnclosingProjectOrJar(root.getJavaProject().getProject().getFullPath());
		}
	}
}

