/*
 * Parse the given compiation unit and build its type bindings.
 * Don't build methods and fields.
 */
private CompilationUnitDeclaration buildBindings(ICompilationUnit compilationUnit) throws JavaModelException {
	final IFile file = 
		compilationUnit.isWorkingCopy() ?
			(IFile)compilationUnit.getOriginalElement().getUnderlyingResource() :
			(IFile)compilationUnit.getUnderlyingResource();
	
	// get main type name
	final String fileName = file.getFullPath().lastSegment();
	final char[] mainTypeName =
		fileName.substring(0, fileName.length() - 5).toCharArray();
	
	// source unit
	final char[] source = 
		compilationUnit.isWorkingCopy() ?
			compilationUnit.getBuffer().getCharacters() :
			Util.getResourceContentsAsCharArray(file);
	org.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit = 
		new org.eclipse.jdt.internal.compiler.env.ICompilationUnit() {
			public char[] getContents() {
				return source;
			}
			public char[] getFileName() {
				return fileName.toCharArray();
			}
			public char[] getMainTypeName() {
				return mainTypeName;
			}
			public char[][] getPackageName() {
				return null;
			}
		};
	
	// diet parse
	CompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0, 0);
	CompilationUnitDeclaration unit = this.locator.parser.dietParse(sourceUnit, compilationResult);
	if (unit != null) {
		this.locator.lookupEnvironment.buildTypeBindings(unit);
		this.locator.lookupEnvironment.completeTypeBindings(unit, false);
	}
	return unit;
}

