@Override
public void decodeIndexKey(char[] key) {

	int start = 0;
	int slash = CharOperation.indexOf(SEPARATOR, key, start);
	this.selector = CharOperation.subarray(key, start, slash);

	start = slash + 1;
	slash = CharOperation.indexOf(SEPARATOR, key, start);
	int last = slash - 1;

	this.parameterCount = 0;
	int power = 1;
	for (int i = last; i >= start; i--) {
		if (i == last) {
			this.parameterCount = key[i] - '0';
		} else {
			power *= 10;
			this.parameterCount += power * (key[i] - '0');
		}
	}

	start = slash + 1;
	slash = CharOperation.indexOf(SEPARATOR, key, start);
	this.declaringQualification = CharOperation.subarray(key, start, slash);

	start = slash + 1;
	slash = CharOperation.indexOf(SEPARATOR, key, start);
	this.declaringSimpleName = CharOperation.subarray(key, start, slash);

	start = slash + 1;
	slash = CharOperation.indexOf(SEPARATOR, key, start);
	last = slash - 1;
	int typeModifiersWithExtraFlags = key[last-1] + (key[last]<<16);
	this.declaringTypeModifiers = ConstructorPattern.decodeModifers(typeModifiersWithExtraFlags);
	this.extraFlags = ConstructorPattern.decodeExtraFlags(typeModifiersWithExtraFlags);

	// initialize optional fields
	this.declaringPackageName = null;
	this.modifiers = 0;
	this.signature = null;
	this.parameterTypes = null;
	this.parameterNames = null;

	start = slash + 1;
	slash = CharOperation.indexOf(SEPARATOR, key, start);
	this.declaringPackageName = CharOperation.subarray(key, start, slash);

	start = slash + 1;
	slash = CharOperation.indexOf(SEPARATOR, key, start);
	if (this.parameterCount == 0) {
		start = slash + 1;
		slash = CharOperation.indexOf(SEPARATOR, key, start); // skip parameter type/signature

		start = slash + 1;
		slash = CharOperation.indexOf(SEPARATOR, key, start); //skip parameter names

		this.modifiers = key[last-1] + (key[last]<<16);
	} else if (this.parameterCount > 0){

		boolean hasParameterStoredAsSignature = (this.extraFlags & ExtraFlags.ParameterTypesStoredAsSignature) != 0;
		if (hasParameterStoredAsSignature) {
			this.signature  = CharOperation.subarray(key, start, slash);
			CharOperation.replace(this.signature , '\\', SEPARATOR);
		} else {
			this.parameterTypes = CharOperation.splitOnWithEnclosures(PARAMETER_SEPARATOR, '<', '>', key, start, slash);
		}
		start = slash + 1;
		slash = CharOperation.indexOf(SEPARATOR, key, start);

		if (slash != start) {
			this.parameterNames = CharOperation.splitOn(PARAMETER_SEPARATOR, key, start, slash);
		}

		start = slash + 1;
		slash = CharOperation.indexOf(SEPARATOR, key, start);
		last = slash - 1;

		this.modifiers = key[last-1] + (key[last]<<16);
	} else {
		this.modifiers = ClassFileConstants.AccPublic;
	}

	start = slash + 1;
	slash = CharOperation.indexOf(SEPARATOR, key, start);
	this.returnSimpleName = CharOperation.subarray(key, start, slash); //TODO : separate return qualified and simple names - currently stored together in simple name.

	removeInternalFlags(); // remove internal flags
}

