	private void matchModuleDeclaration(SearchPattern pattern, MatchLocator locator) throws CoreException {
		switch (pattern.kind) {
			case MODULE_PATTERN:
				break;
			case OR_PATTERN:
				SearchPattern[] patterns = ((OrPattern) pattern).patterns;
				for (int i = 0, length = patterns.length; i < length; i++) {
					SearchPattern p = patterns[i];
					if (p.kind == MODULE_PATTERN)
						matchModuleReferences(patterns[i], locator);
				}
				// $FALL-THROUGH$ - fall through default to return
			default:
				return;
		}
		ModulePattern modulePattern  = (ModulePattern) pattern;
		if (!locator.patternLocator.matchesName(modulePattern.name, this.moduleName))
			return;
		ModuleBinding moduleBinding = null;
		int level = PatternLocator.ACCURATE_MATCH;
		if (locator.patternLocator.mustResolve) {
			moduleBinding = locator.lookupEnvironment.getModule(this.moduleName);
			level = locator.patternLocator.resolveLevel(moduleBinding);
		}
		if (level == PatternLocator.IMPOSSIBLE_MATCH)
			return;
		int accuracy = level == PatternLocator.ACCURATE_MATCH ? SearchMatch.A_ACCURATE : SearchMatch.A_INACCURATE;
		SearchMatch match = locator.newDeclarationMatch(this.moduleDesc, moduleBinding, accuracy, -1, 0);
		locator.report(match);
	}

