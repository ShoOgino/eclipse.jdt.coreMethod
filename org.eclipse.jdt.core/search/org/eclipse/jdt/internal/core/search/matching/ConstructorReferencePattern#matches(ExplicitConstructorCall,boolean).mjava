/**
 * Returns whether this constructor pattern  matches the given explicit constructor call.
 * Look at resolved information only if specified.
 */
private boolean matches(ExplicitConstructorCall call, boolean resolve) {
	// TBD: constructor name is super simple type name

	// declaring type
	MethodBinding binding = call.binding;
	if (resolve && binding != null) {
		ReferenceBinding declaringBinding = binding.declaringClass;
		if (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringBinding))
			return false;
	}
		
	// argument types
	int argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;
	if (argumentCount > -1) {
		int parameterCount = call.arguments == null ? 0 : call.arguments.length;
		if (parameterCount != argumentCount)
			return false;

		if (resolve && binding != null) {
			for (int i = 0; i < parameterCount; i++) {
				char[] qualification = this.parameterQualifications[i];
				char[] type = this.parameterSimpleNames[i];
				if (!this.matchesType(type, qualification, binding.parameters[i]))
					return false;
			}
		}
	}

	return true;
}

