	/**
	 * Creates an IMethod from the given method declaration and simple type names. 
	 */
	private IMethod createMethodHandle(
		AbstractMethodDeclaration method,
		char[][] definingTypeNames) {
		IType type = this.createTypeHandle(definingTypeNames);
		Argument[] arguments = method.arguments;
		int length = arguments == null ? 0 : arguments.length;
		String[] parameterTypeSignatures = new String[length];
		for (int i = 0; i < length; i++) {
			TypeReference parameterType = arguments[i].type;
			char[] typeName = CharOperation.concatWith(parameterType.getTypeName(), '.');
			for (int j = 0; j < parameterType.dimensions(); j++) {
				typeName = CharOperation.concat(typeName, "[]" /*nonNLS*/.toCharArray());
			}
			parameterTypeSignatures[i] = Signature.createTypeSignature(typeName, false);
		}
		return type.getMethod(new String(method.selector), parameterTypeSignatures);
	}

