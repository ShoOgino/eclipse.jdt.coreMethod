/**
 * @see SearchPattern#matches(AstNode, boolean)
 */
protected boolean matches(AstNode node, boolean resolve) {
	if (!(node instanceof MethodDeclaration)) return false;

	MethodDeclaration method = (MethodDeclaration)node;
	
	// selector
	if (!this.matchesName(this.selector, method.selector))
		return false;

	// declaring type
	MethodBinding binding = method.binding;
	if (resolve && binding != null) {
		ReferenceBinding declaringType = binding.declaringClass;
		if (declaringType != null) {
			if (!binding.isStatic() && !binding.isPrivate()) {
				if (!this.matchesAsSubtype(declaringType, this.declaringSimpleName, this.declaringQualification))
					return false;
			} else {
				if (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringType))
					return false;
			}
		}
	}

	// return type
	if (this.returnQualification == null) {
		if (this.returnSimpleName != null) {
			TypeReference methodReturnType = method.returnType;
			if (methodReturnType != null) {
				char[][] methodReturnTypeName = methodReturnType.getTypeName();
				char[] sourceName = this.toArrayName(
					methodReturnTypeName[methodReturnTypeName.length-1], 
					methodReturnType.dimensions());
				if (!this.matchesName(this.returnSimpleName, sourceName))
					return false;
			}
		}
	} else {
		if (resolve 
				&& binding != null 
				&& !this.matchesType(this.returnSimpleName, this.returnQualification, binding.returnType))
			return false;
	}
		
	// parameter types
	int parameterCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;
	if (parameterCount > -1) {
		int argumentCount = method.arguments == null ? 0 : method.arguments.length;
		if (parameterCount != argumentCount)
			return false;
	
		if (resolve && binding != null) {
			for (int i = 0; i < parameterCount; i++) {
				char[] qualification = this.parameterQualifications[i];
				char[] type = this.parameterSimpleNames[i];
				if (!this.matchesType(type, qualification, binding.parameters[i]))
					return false;
			}
		}
	}

	return true;
}

