private void computeClasspathLocations(
	IWorkspaceRoot root,
	JavaProject javaProject) throws CoreException {

	String encoding = null;

	IClasspathEntry[] classpath = javaProject.getExpandedClasspath(true/*ignore unresolved variables*/);
	int length = classpath.length;
	ArrayList locations = new ArrayList(length);
	nextEntry : for (int i = 0; i < length; i++) {
		IClasspathEntry entry = classpath[i];
		IPath path = entry.getPath();
		Object target = JavaModel.getTarget(root, path, true);
		if (target == null) continue nextEntry;

		switch(entry.getEntryKind()) {
			case IClasspathEntry.CPE_SOURCE :
				if (!(target instanceof IContainer)) continue nextEntry;
				if (encoding == null) {
					encoding = javaProject.getOption(JavaCore.CORE_ENCODING, true);
				}
				locations.add(new ClasspathSourceDirectory((IContainer)target, encoding));
				continue nextEntry;

			case IClasspathEntry.CPE_LIBRARY :
				if (target instanceof IResource) {
					IResource resource = (IResource) target;
					ClasspathLocation location = null;
					if (resource instanceof IFile) {
						String fileName = path.lastSegment();
						if (!Util.isArchiveFileName(fileName)) continue nextEntry;
						location = getClasspathJar((IFile)resource);
					} else if (resource instanceof IContainer) {
						location = ClasspathLocation.forBinaryFolder((IContainer) target, false); // is library folder not output folder
					}
					locations.add(location);
				} else if (target instanceof File) {
					String fileName = path.lastSegment();
					if (!Util.isArchiveFileName(fileName)) continue nextEntry;
					locations.add(getClasspathJar(path.toOSString()));
				}
				continue nextEntry;
		}
	}

	this.locations = new ClasspathLocation[locations.size()];
	locations.toArray(this.locations);
}

