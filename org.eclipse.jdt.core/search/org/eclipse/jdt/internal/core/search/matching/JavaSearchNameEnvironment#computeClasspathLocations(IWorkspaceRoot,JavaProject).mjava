private void computeClasspathLocations(IWorkspaceRoot workspaceRoot, JavaProject javaProject) {

	String encoding = null;
	IPackageFragmentRoot[] roots = null;
	try {
		roots = javaProject.getAllPackageFragmentRoots();
	} catch (JavaModelException e) {
		// project doesn't exist
		this.locations = new ClasspathLocation[0];
		return;
	}
	int length = roots.length;
	ClasspathLocation[] cpLocations = new ClasspathLocation[length];
	int index = 0;
	JavaModelManager manager = JavaModelManager.getJavaModelManager();
	for (int i = 0; i < length; i++) {
		IPackageFragmentRoot root = roots[i];
		IPath path = root.getPath();
		try {
			if (root.isArchive()) {
				ZipFile zipFile = manager.getZipFile(path);
				cpLocations[index++] = new ClasspathJar(zipFile);
			} else {
				Object target = JavaModel.getTarget(workspaceRoot, path, false);
				if (root.getKind() == IPackageFragmentRoot.K_SOURCE) {
					if (encoding == null) {
						encoding = javaProject.getOption(JavaCore.CORE_ENCODING, true);
					}
					cpLocations[index++] = new ClasspathSourceDirectory((IContainer)target, encoding);
				} else {
					cpLocations[index++] = ClasspathLocation.forBinaryFolder((IContainer) target, false);
				}
			}
		} catch (CoreException e1) {
			// problem opening zip file or getting root kind
			// consider root corrupt and ignore
			// just resize cpLocations
			System.arraycopy(cpLocations, 0, cpLocations = new ClasspathLocation[cpLocations.length-1], 0, index);
		}
	}
	this.locations = cpLocations;
}

