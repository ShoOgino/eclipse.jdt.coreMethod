	/**
	 * Add an additional compilation unit into the loop
	 *  ->  build compilation unit declarations, their bindings and record their results.
	 */
	public void accept(ICompilationUnit sourceUnit) {
		// Switch the current policy and compilation result for this unit to the requested one.
		CompilationResult unitResult =
			new CompilationResult(sourceUnit, totalUnits, totalUnits, this.options.maxProblemsPerUnit);
		try {
			// diet parsing for large collection of unit
			CompilationUnitDeclaration parsedUnit;
			MatchSet originalMatchSet = this.parser.matchSet;
			try {
				this.parser.matchSet = new MatchingNodeSet(this);
				if (totalUnits < parseThreshold) {
					parsedUnit = parser.parse(sourceUnit, unitResult);
				} else {
					parsedUnit = parser.dietParse(sourceUnit, unitResult);
				}
			} finally {
				this.parser.matchSet = originalMatchSet;
			}
	
			if (options.verbose) {
				String count = String.valueOf(totalUnits + 1);
				System.out.println(
					Util.bind(
						"compilation.request" , //$NON-NLS-1$
						new String[] {
							count,
							count,
							new String(sourceUnit.getFileName())}));
			}
	
			// initial type binding creation
			lookupEnvironment.buildTypeBindings(parsedUnit);
			this.addCompilationUnit(sourceUnit, parsedUnit);
	
			// binding resolution
			lookupEnvironment.completeTypeBindings(parsedUnit);
		} catch (AbortCompilationUnit e) {
			// at this point, currentCompilationUnitResult may not be sourceUnit, but some other
			// one requested further along to resolve sourceUnit.
			if (unitResult.compilationUnit == sourceUnit) { // only report once
				//requestor.acceptResult(unitResult.tagAsAccepted());
			} else {
				throw e; // want to abort enclosing request to compile
			}
		}
	}

