	/**
	 * Returns whether this constructor pattern  matches the given allocation expression.
	 * Look at resolved information only if specified.
	 */
	private boolean matches(AllocationExpression allocation, boolean resolve) {

		// constructor name is simple type name
		char[][] typeName = allocation.type.getTypeName();
		if (this.declaringSimpleName != null
			&& !this.matchesName(this.declaringSimpleName, typeName[typeName.length - 1]))
			return false;

		// declaring type
		MethodBinding binding = allocation.binding;
		if (resolve && binding != null) {
			ReferenceBinding declaringBinding = binding.declaringClass;
			if (!this
				.matchesType(
					this.declaringSimpleName,
					this.declaringQualification,
					declaringBinding))
				return false;
		}

		// argument types
		int argumentCount =
			this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;
		if (argumentCount > -1) {
			int parameterCount =
				allocation.arguments == null ? 0 : allocation.arguments.length;
			if (parameterCount != argumentCount)
				return false;

			if (resolve && binding != null) {
				for (int i = 0; i < parameterCount; i++) {
					char[] qualification = this.parameterQualifications[i];
					char[] type = this.parameterSimpleNames[i];
					if (!this.matchesType(type, qualification, binding.parameters[i]))
						return false;
				}
			}
		}

		return true;
	}

