/*
 * Type entries are encoded as simpleTypeName / packageName / enclosingTypeName / modifiers
 * e.g. Object/java.lang//0
 * e.g. Cloneable/java.lang//512
 * e.g. LazyValue/javax.swing/UIDefaults/0
 */
public void decodeIndexKey(char[] key) {
	int slash = CharOperation.indexOf(SEPARATOR, key, 0);
	this.simpleName = CharOperation.subarray(key, 0, slash);

	int start = slash + 1;
	slash = CharOperation.indexOf(SEPARATOR, key, start);
	this.pkg = slash == start ? CharOperation.NO_CHAR : CharOperation.subarray(key, start, slash);

	slash = CharOperation.indexOf(SEPARATOR, key, start = slash + 1);
	if (slash == start) {
		this.enclosingTypeNames = CharOperation.NO_CHAR_CHAR;
	} else {
		char[] names = CharOperation.subarray(key, start, slash);
		this.enclosingTypeNames = CharOperation.equals(ONE_ZERO, names) ? ONE_ZERO_CHAR : CharOperation.splitOn('.', names);
	}

	this.modifiers = key[key.length - 1]; // implicit cast to int type
	// Extract suffix from modifiers instead of index key
	int kind = this.modifiers & (IConstants.AccInterface+IConstants.AccEnum+IConstants.AccAnnotation);
	switch (kind) {
		case IConstants.AccAnnotation:
		case IConstants.AccAnnotation+IConstants.AccInterface:
			this.typeSuffix = ANNOTATION_TYPE_SUFFIX;
			break;
		case IConstants.AccEnum:
			this.typeSuffix = ENUM_SUFFIX;
			break;
		case IConstants.AccInterface:
			this.typeSuffix = INTERFACE_SUFFIX;
			break;
		default:
			this.typeSuffix = CLASS_SUFFIX;
			break;
	}
}

