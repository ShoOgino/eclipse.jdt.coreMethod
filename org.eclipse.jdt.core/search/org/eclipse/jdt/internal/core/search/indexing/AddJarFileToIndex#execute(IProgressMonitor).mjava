	public boolean execute(IProgressMonitor progressMonitor) {
		
		if (progressMonitor != null && progressMonitor.isCanceled()) return COMPLETE;
		try {
			IPath indexedPath = this.path;
			// if index already cached, then do not perform any check
			IIndex index = (IIndex) manager.getIndex(indexedPath, false);
			if (index != null) {
				if (JobManager.VERBOSE) 
					JobManager.verbose("-> no indexing required (index already exists) for " + this.path); //$NON-NLS-1$
				return COMPLETE;
			}

			index = manager.getIndex(indexedPath);
			if (index == null) {
				if (JobManager.VERBOSE) 
					JobManager.verbose("-> index could not be created for " + this.path); //$NON-NLS-1$
				return COMPLETE;
			}
			ReadWriteMonitor monitor = manager.getMonitorFor(index);
			if (monitor == null) {
				if (JobManager.VERBOSE) 
					JobManager.verbose("-> index for " + this.path + " just got deleted"); //$NON-NLS-1$//$NON-NLS-2$
				return COMPLETE; // index got deleted since acquired
			}
			ZipFile zip = null;
			try {
				// this path will be a relative path to the workspace in case the zipfile in the workspace otherwise it will be a path in the
				// local file system
				Path zipFilePath = null;

				monitor.enterWrite(); // ask permission to write
				if (resource != null) {
					IPath location = this.resource.getLocation();
					if (location == null)
						return FAILED;
					zip = new ZipFile(location.toFile());
					zipFilePath = (Path) this.resource.getFullPath().makeRelative();
					// absolute path relative to the workspace
				} else {
					zip = new ZipFile(this.path.toFile());
					zipFilePath = (Path) this.path;
					// path is already canonical since coming from a library classpath entry
				}

				if (JobManager.VERBOSE)
					JobManager.verbose("-> indexing " + zip.getName()); //$NON-NLS-1$
				long initialTime = System.currentTimeMillis();

				final HashSet indexedFileNames = new HashSet(100);
				IQueryResult[] results = index.queryInDocumentNames(""); // all file names //$NON-NLS-1$
				int resultLength = results == null ? 0 : results.length;
				if (resultLength != 0) {
					/* check integrity of the existing index file
					 * if the length is equal to 0, we want to index the whole jar again
					 * If not, then we want to check that there is no missing entry, if
					 * one entry is missing then we 
					 */
					for (int i = 0; i < resultLength; i++) {
						String fileName = results[i].getPath();
						indexedFileNames.add(fileName);
					}
					boolean needToReindex = false;
					for (Enumeration e = zip.entries(); e.hasMoreElements();) {
						// iterate each entry to index it
						ZipEntry ze = (ZipEntry) e.nextElement();
						if (Util.isClassFileName(ze.getName())) {
							JarFileEntryDocument entryDocument =
								new JarFileEntryDocument(ze, null, zipFilePath);
							if (!indexedFileNames.remove(entryDocument.getName())) {
								needToReindex = true;
								break;
							}
						}
					}
					if (!needToReindex && indexedFileNames.size() == 0) {
						if (JobManager.VERBOSE)
							JobManager.verbose(
								"-> no indexing required (index is consistent with library) for " //$NON-NLS-1$
								+ zip.getName() + " (" //$NON-NLS-1$
								+ (System.currentTimeMillis() - initialTime) + "ms)"); //$NON-NLS-1$
						return COMPLETE;
					}
				}

				/*
				 * Index the jar for the first time or reindex the jar in case the previous index file has been corrupted
				 */
				if (index != null) {
					// index already existed: recreate it so that we forget about previous entries
					index = manager.recreateIndex(indexedPath);
				}
				for (Enumeration e = zip.entries(); e.hasMoreElements();) {
					if (this.isCancelled) {
						if (JobManager.VERBOSE) {
							JobManager.verbose(
								"-> indexing of " //$NON-NLS-1$
								+ zip.getName() 
								+ " has been cancelled"); //$NON-NLS-1$
						}
						return FAILED;
					}
					
					// iterate each entry to index it
					ZipEntry ze = (ZipEntry) e.nextElement();
					if (Util.isClassFileName(ze.getName())) {
						byte[] classFileBytes =
							org.eclipse.jdt.internal.compiler.util.Util.getZipEntryByteContent(ze, zip);
						// Add the name of the file to the index
						index.add(
							new JarFileEntryDocument(ze, classFileBytes, zipFilePath),
							new BinaryIndexer(true));
					}
				}
				if (JobManager.VERBOSE)
					JobManager.verbose(
						"-> done indexing of " //$NON-NLS-1$
						+ zip.getName() + " (" //$NON-NLS-1$
						+ (System.currentTimeMillis() - initialTime) + "ms)"); //$NON-NLS-1$
			} finally {
				if (zip != null)
					zip.close();
				monitor.exitWrite(); // free write lock
			}
		} catch (IOException e) {
			return FAILED;
		}
		return COMPLETE;
	}

