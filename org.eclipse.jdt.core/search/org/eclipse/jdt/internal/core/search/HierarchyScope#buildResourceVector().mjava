private void buildResourceVector() throws JavaModelException {
	Hashtable resources = new Hashtable();
	Hashtable paths = new Hashtable();
	fTypes = fHierarchy.getAllTypes();
	for (int i = 0; i < fTypes.length; i++) {
		IType type = fTypes[i];
		IResource resource = type.getUnderlyingResource();
		if (resource != null && resources.get(resource) == null) {
			resources.put(resource, resource);
			add(resource);
		}
		IPackageFragmentRoot root = (IPackageFragmentRoot)type.getPackageFragment().getParent();
		if (root instanceof JarPackageFragmentRoot) {
			// type in a jar
			JarPackageFragmentRoot jar = (JarPackageFragmentRoot)root;
			String zipFileName;
			ZipFile zipFile = null;
			try {
				zipFile = jar.getJar();
				zipFileName = zipFile.getName();
			} catch (CoreException e) {
				throw new JavaModelException(e);
			} finally {
				if (zipFile != null) {
					try {
						zipFile.close();
					} catch (IOException e) {
						// ignore 
					}
				}
			}
			String resourcePath = 
				zipFileName + 
				JAR_FILE_ENTRY_SEPARATOR + 
				type.getFullyQualifiedName().replace('.', '/') +
				".class";
			this.resourcePaths.put(resourcePath, resourcePath);
			paths.put(jar.getPath(), type);
		} else {
			// type is a project
			paths.put(type.getJavaProject().getProject().getFullPath(), type);
		}
	}
	this.enclosingProjectsAndJars = new IPath[paths.size()];
	int i = 0;
	for (Enumeration e = paths.keys(); e.hasMoreElements();) {
		this.enclosingProjectsAndJars[i++] = (IPath)e.nextElement();
	}
}

