	private void buildResourceVector() throws JavaModelException {
		HashMap resources = new HashMap();
		HashMap paths = new HashMap();
		fTypes = fHierarchy.getAllTypes();
		IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();
		for (int i = 0; i < fTypes.length; i++) {
			IType type = fTypes[i];
			IResource resource = type.getUnderlyingResource();
			if (resource != null && resources.get(resource) == null) {
				resources.put(resource, resource);
				add(resource);
			}
			IPackageFragmentRoot root =
				(IPackageFragmentRoot) type.getPackageFragment().getParent();
			if (root instanceof JarPackageFragmentRoot) {
				// type in a jar
				JarPackageFragmentRoot jar = (JarPackageFragmentRoot) root;
				Object target = JavaModel.getTarget(workspaceRoot, jar.getPath(), true);
				String zipFileName;
				if (target instanceof IFile) {
					zipFileName = ((IFile)target).getLocation().toOSString();
				} else if (target instanceof File) {
					zipFileName = ((File)target).getPath();
				} else {
					continue; // unknown target
				}
				String resourcePath =
					zipFileName
						+ JAR_FILE_ENTRY_SEPARATOR
						+ type.getFullyQualifiedName().replace('.', '/')
						+ ".class";//$NON-NLS-1$
				
				this.resourcePaths.add(resourcePath);
				paths.put(jar.getPath(), type);
			} else {
				// type is a project
				paths.put(type.getJavaProject().getProject().getFullPath(), type);
			}
		}
		this.enclosingProjectsAndJars = new IPath[paths.size()];
		int i = 0;
		for (Iterator iter = paths.keySet().iterator(); iter.hasNext();) {
			this.enclosingProjectsAndJars[i++] = (IPath) iter.next();
		}
	}

