private void writeDocumentNumbers(int[] documentNumbers, FileOutputStream stream) throws IOException {
	// must store length as a positive int to detect in-lined array of 1 element
	int length = documentNumbers.length;
	writeStreamInt(stream, length);
	Util.sort(documentNumbers);
	int idx = this.bufferIndex;
	switch (this.documentReferenceSize) {
		case 1 :
			this.bufferIndex += length;
			if (this.bufferIndex < BUFFER_WRITE_SIZE) {
				for (int i = 0; i < length; i++) {
					this.streamBuffer[idx++] = (byte) documentNumbers[i];
				}
			} else {
				for (int i = 0; i < length; i++) {
					this.streamBuffer[idx++] = (byte) documentNumbers[i];
					if (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full
						stream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);
						idx = 0;
						this.bufferIndex -= BUFFER_WRITE_SIZE;
					}
				}
			}
			this.streamEnd += length;
			break;
		case 2 :
			int size = length << 1;
			this.bufferIndex += size;
			if (this.bufferIndex < BUFFER_WRITE_SIZE) {
				for (int i = 0; i < length; i++) {
					this.streamBuffer[idx++] = (byte) (documentNumbers[i] >> 8);
					this.streamBuffer[idx++] = (byte) documentNumbers[i];
				}
			} else {
				for (int i = 0; i < length; i++) {
					this.streamBuffer[idx++] = (byte) (documentNumbers[i] >> 8);
					if (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full
						stream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);
						idx = 0;
						this.bufferIndex -= BUFFER_WRITE_SIZE;
					}
					this.streamBuffer[idx++] = (byte) documentNumbers[i];
					if (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full
						stream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);
						idx = 0;
						this.bufferIndex -= BUFFER_WRITE_SIZE;
					}
				}
			}
			this.streamEnd += size;
			break;
		default :
			size = length << 2;
			this.bufferIndex += size;
			if (this.bufferIndex < BUFFER_WRITE_SIZE) {
				for (int i = 0; i < length; i++) {
					int number = documentNumbers[i];
					this.streamBuffer[idx++] = (byte) (number >> 24);
					this.streamBuffer[idx++] = (byte) (number >> 16);
					this.streamBuffer[idx++] = (byte) (number >> 8);
					this.streamBuffer[idx++] = (byte) number;
				}
			} else {
				for (int i = 0; i < length; i++) {
					int number = documentNumbers[i];
					this.streamBuffer[idx++] = (byte) (number >> 24);
					if (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full
						stream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);
						idx = 0;
						this.bufferIndex -= BUFFER_WRITE_SIZE;
					}
					this.streamBuffer[idx++] = (byte) (number >> 16);
					if (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full
						stream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);
						idx = 0;
						this.bufferIndex -= BUFFER_WRITE_SIZE;
					}
					this.streamBuffer[idx++] = (byte) (number >> 8);
					if (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full
						stream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);
						idx = 0;
						this.bufferIndex -= BUFFER_WRITE_SIZE;
					}
					this.streamBuffer[idx++] = (byte) number;
					if (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full
						stream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);
						idx = 0;
						this.bufferIndex -= BUFFER_WRITE_SIZE;
					}
				}
			}
			this.streamEnd += size;
			break;
	}
}

