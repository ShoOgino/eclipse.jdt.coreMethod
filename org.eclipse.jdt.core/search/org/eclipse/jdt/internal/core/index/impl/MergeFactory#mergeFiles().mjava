	/**
	 * Merges the files of the 2 indexes in the new index, removes the files
	 * to be removed, and records the changes made to propagate them to the 
	 * word references.
	 */

	protected void mergeFiles() throws IOException {
		int positionInMerge = 1;
		int compare;
		while (oldInput.hasMoreFiles() || addsInput.hasMoreFiles()) {
			IndexedFile file1 = oldInput.getCurrentFile();
			IndexedFile file2 = addsInput.getCurrentFile();

			//if the file has been removed we don't take it into account
			while (file1 != null && wasRemoved(file1, OLD_INDEX)) {
				oldInput.moveToNextFile();
				file1 = oldInput.getCurrentFile();
			}
			while (file2 != null && wasRemoved(file2, ADDS_INDEX)) {
				addsInput.moveToNextFile();
				file2 = addsInput.getCurrentFile();
			}

			//the addsIndex was empty, we just removed files from the oldIndex
			if (file1 == null && file2 == null)
				break;

			//test if we reached the end of one the 2 index
			if (file1 == null)
				compare = 1;
			else
				if (file2 == null)
					compare = -1;
				else
					compare = file1.getPath().compareTo(file2.getPath());

			//records the changes to Make
			if (compare == 0) {
				//the file has been modified: 
				//we remove it from the oldIndex and add it to the addsIndex
				removeFile(file1, OLD_INDEX);
				mappingAdds[file2.getFileNumber()] = positionInMerge;
				file1.setFileNumber(positionInMerge);
				mergeOutput.addFile(file1);
				oldInput.moveToNextFile();
				addsInput.moveToNextFile();
			} else
				if (compare < 0) {
					mappingOld[file1.getFileNumber()] = positionInMerge;
					file1.setFileNumber(positionInMerge);
					mergeOutput.addFile(file1);
					oldInput.moveToNextFile();
				} else {
					mappingAdds[file2.getFileNumber()] = positionInMerge;
					file2.setFileNumber(positionInMerge);
					mergeOutput.addFile(file2);
					addsInput.moveToNextFile();
				}
			positionInMerge++;
		}
		mergeOutput.flushFiles();
	}

