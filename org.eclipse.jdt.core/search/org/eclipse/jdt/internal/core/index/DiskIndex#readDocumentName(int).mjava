synchronized String readDocumentName(int docNumber) throws IOException {
	if (this.cachedChunks == null)
		this.cachedChunks = new String[this.numberOfChunks][];

	int chunkNumber = docNumber / CHUNK_SIZE;
	String[] chunk = this.cachedChunks[chunkNumber];
	if (chunk == null) {
		boolean isLastChunk = chunkNumber == this.numberOfChunks - 1;
		int start = this.chunkOffsets[chunkNumber];
		int numberOfBytes = (isLastChunk ? this.startOfCategoryTables : this.chunkOffsets[chunkNumber + 1]) - start;
		if (numberOfBytes < 0)
			throw new IllegalArgumentException();
		byte[] bytes = new byte[numberOfBytes];
		FileInputStream file = new FileInputStream(getIndexFile());
		try {
			file.skip(start);
			if (file.read(bytes, 0, numberOfBytes) != numberOfBytes)
				throw new IOException();
		} finally {
			file.close();
		}
		DataInputStream stream = new DataInputStream(new ByteArrayInputStream(bytes));
		int numberOfNames = isLastChunk ? this.sizeOfLastChunk : CHUNK_SIZE;
		chunk = this.cachedChunks[chunkNumber] = new String[numberOfNames];
		readChunk(chunk, stream, 0, numberOfNames);
	}
	return chunk[docNumber - (chunkNumber * CHUNK_SIZE)];
}

