	/**                                                                   
	 * Evicts a chunk from the page table and the chunk table.            
	 * After this method returns, {@link #fPointer}  will contain
	 * the index of the evicted chunk within the page table.              
	 */                                                                   
	private void evictChunk() {
		/*
		 * Use the CLOCK algorithm to determine which chunk to evict.
		 * i.e., if the chunk in the current slot of the page table has been
		 * recently referenced (i.e. the reference flag is set), unset the
		 * reference flag and move to the next slot.  Otherwise, evict the
		 * chunk in the current slot.
		 */
		while (true) {
			Chunk chunk = fPageTable[fPointer];
			if (chunk.fCacheHitFlag) {
				chunk.fCacheHitFlag= false;
				fPointer= (fPointer + 1) % fPageTable.length;
			} else {
				chunk.fDatabase.releaseChunk(chunk);
				chunk.fCacheIndex= -1;
				fPageTable[fPointer] = null;
				return;
			}
		}
	}

