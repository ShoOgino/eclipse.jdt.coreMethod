	/**
	 * Returns the closest ancestor of the given type, or null if none. Note that
	 * this looks for an exact match. It will not return subtypes of the given type.
	 */
	@SuppressWarnings("unchecked")
	public <T extends NdTreeNode> T getAncestorOfType(Class<T> type) {
		long targetType = getPDOM().getNodeType(type);

		Nd pdom = getPDOM();
		long current = PARENT.getAddress(pdom, this.address);

		while (current != 0) {
			short currentType = NODE_TYPE.get(pdom, current);

			if (currentType == targetType) {
				NdNode result = load(pdom, current);

				if (type.isInstance(result)) {
					return (T) result;
				} else {
					throw new IndexException("The node at address " + current + 
							" should have been an instance of " + type.getName() + 
							" but was an instance of " + result.getClass().getName());
				}
			}

			current = PARENT.getAddress(pdom, current);
		}

		return null;
	}

