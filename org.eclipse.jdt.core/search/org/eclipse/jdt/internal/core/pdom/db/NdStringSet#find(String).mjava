	/**
	 * Search for the given string in the receiver. This could cause the entire list to be loaded from the
	 * Database. The results are cached, so the list will only be loaded one time during the lifetime of this
	 * instance. Returns the record of the String.
	 */
	public long find(String str) throws CoreException {
		if (lazyCache != null) {
			Long l = lazyCache.get(str);
			if (l != null)
				return l.longValue();
		}

		// if there is nothing in the Database, then there is nothing to load
		if (getHead() == 0)
			return 0;

		// otherwise prepare the cache for the data that is about to be loaded
		if (lazyCache == null)
			lazyCache = new HashMap<String, Long>();

		// if nothing has been loaded, then start loading with the head node, otherwise continue
		// loading from whatever is after the last loaded node
		long curr = loaded == 0 ? getHead() : NodeType.Next.get(db, loaded);
		while (curr != 0) {
			long next = NodeType.Next.get(db, curr);
			long item = NodeType.Item.get(db, curr);

			IString string = db.getString(item);

			// put the value into the cache
			lazyCache.put(string.getString(), Long.valueOf(item));

			// return immediately if this is the target
			if (string.compare(str, true) == 0)
				return item;

			// otherwise keep looking
			loaded = curr;
			curr = next;
		}

		return 0;
	}

