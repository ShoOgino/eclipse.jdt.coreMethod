	/**
	 * Creates a many-to-one pointer which points to this object's owner. If the pointer is non-null when the owner is
	 * deleted, this object will be deleted too.
	 * 
	 * @param builder the struct to which the field will be added
	 * @param forwardPointer the field which holds the pointer in the other direction
	 * @return a newly constructed field
	 */
	public static <T extends INdStruct, B extends INdStruct> FieldManyToOne<T> createOwner(StructDef<B> builder,
			FieldOneToMany<B> forwardPointer) {
		// Although it would work to have a non-NdNode owned in this manner, we currently have no legitimate use-cases
		// for this to occur. If this happens it is almost certainly an accidental copy-paste error where someone
		// intended to call create but called this method instead. If we ever discover a legitimate use-case for it,
		// this could be removed and things would probably still work.
		if (!NdNode.class.isAssignableFrom(builder.getStructClass())) {
			throw new IllegalArgumentException(FieldManyToOne.class.getSimpleName() + " can't be the owner of " //$NON-NLS-1$
					+ builder.getStructClass().getSimpleName() + " because the latter isn't a subclass of " //$NON-NLS-1$
					+ NdNode.class.getSimpleName()); 
		}

		FieldManyToOne<T> result = new FieldManyToOne<T>(builder, forwardPointer, true);
		builder.add(result);
		builder.addDestructableField(result);
		builder.addOwnerField(result);
		return result;
	}

