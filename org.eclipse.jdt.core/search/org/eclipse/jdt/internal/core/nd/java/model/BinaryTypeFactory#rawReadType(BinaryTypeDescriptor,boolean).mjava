	/**
	 * Read the class file from disk, circumventing the index's cache. This should only be used by callers
	 * that need to read information from the class file which aren't present in the index (such as method bodies).
	 */
	public static ClassFileReader rawReadType(BinaryTypeDescriptor descriptor, boolean fullyInitialize) throws JavaModelException {
		if (descriptor == null) {
			return null;
		}
		if (descriptor.isInJarFile()) {
			ZipFile zip = null;
			try {
				zip = JavaModelManager.getJavaModelManager().getZipFile(new Path(new String(descriptor.workspacePath)));
				char[] entryNameCharArray = CharArrayUtils.concat(
						JavaNames.fieldDescriptorToBinaryName(descriptor.fieldDescriptor), SuffixConstants.SUFFIX_class);
				String entryName = new String(entryNameCharArray);
				ZipEntry ze = zip.getEntry(entryName);
				if (ze != null) {
					byte contents[];
					try {
						contents = org.eclipse.jdt.internal.compiler.util.Util.getZipEntryByteContent(ze, zip);
					} catch (IOException ioe) {
						throw new JavaModelException(ioe, IJavaModelStatusConstants.IO_EXCEPTION);
					}
					ClassFileReader reader;
					try {
						reader = new ClassFileReader(contents, descriptor.indexPath, fullyInitialize);
					} catch (ClassFormatException e) {
						if (JavaCore.getPlugin().isDebugging()) {
							e.printStackTrace(System.err);
						}
						return null;
					}
					return reader;
				}
			} catch (CoreException e) {
				throw new JavaModelException(e);
			} finally {
				JavaModelManager.getJavaModelManager().closeZipFile(zip);
			}
		} else {
			IFile file = ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(new String(descriptor.workspacePath)));
			byte[] contents = Util.getResourceContentsAsByteArray(file);
			try {
				return new ClassFileReader(contents, file.getFullPath().toString().toCharArray(), fullyInitialize);
			} catch (ClassFormatException cfe) {
				//the structure remains unknown
				return null;
			}
		}
		return null;
	}

