		/**
		 * Search for anomalies in the log and produce a reduced report
		 * 
		 * @return a log containing the most interesting results
		 */
		public MemoryAccessLog reduce(int maxWrites) {
			boolean includeAllMallocs = hasInconsistentMemoryAllocation();
			int numWrites = 0;

			List<MemoryOperation> result = new ArrayList<>();
			for (MemoryOperation next : this.operations) {
				boolean keepGoing = true;
				switch (next.getOperationType()) {
					case MALLOC_OPERATION: {
						result.add(next);
						keepGoing = includeAllMallocs;
						break;
					}
					case FREE_OPERATION: {
						result.add(next);
						break;
					}
					case WRITE_OPERATION: {
						if (numWrites < maxWrites) {
							result.add(next);
						}
						numWrites++;
					}
				}
				if (!keepGoing) {
					break;
				}
			}

			return new MemoryAccessLog(result);
		}

