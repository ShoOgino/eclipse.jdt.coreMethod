	/**
	 * Enables or disables the "rescanAll" method. When set to false, rescanAll does nothing
	 * and indexing will only be triggered when invoking {@link #waitForIndex}.
	 * <p>
	 * Normally the indexer runs automatically and asynchronously when resource changes occur.
	 * However, if this variable is set to false the indexer only runs when someone invokes
	 * {@link #waitForIndex(IProgressMonitor)}. This can be used to eliminate race conditions
	 * when running the unit tests, since indexing will not occur unless it is triggered
	 * explicitly.
	 * <p>
	 * Synchronize on {@link #automaticIndexingMutex} before accessing. 
	 */
	public void enableAutomaticIndexing(boolean enabled) {
		boolean runRescan = false;
		synchronized (this.automaticIndexingMutex) {
			if (this.enableAutomaticIndexing == enabled) {
				return;
			}
			this.enableAutomaticIndexing = enabled;
			if (enabled && this.indexerDirtiedWhileDisabled) {
				runRescan = true;
			}
		}

		if (runRescan) {
			// Force a rescan when re-enabling automatic indexing since we may have missed an update
			this.rescanJob.schedule();
		}

		if (!enabled) {
			// Wait for any existing indexing operations to finish when disabling automatic indexing since
			// we only want explicitly-triggered indexing operations to run after the method returns
			try {
				this.rescanJob.join(0, null);
			} catch (OperationCanceledException | InterruptedException e) {
				// Don't care
			}
		}
	}

