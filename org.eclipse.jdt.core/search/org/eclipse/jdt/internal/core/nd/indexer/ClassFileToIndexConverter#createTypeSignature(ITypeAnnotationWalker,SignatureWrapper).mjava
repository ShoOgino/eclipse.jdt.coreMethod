	/**
	 * Reads a type signature from the given {@link SignatureWrapper}, starting at the character pointed to by
	 * wrapper.start. On return, wrapper.start will point to the first character following the type signature. Returns
	 * null if given an empty signature or the signature for the void type.
	 *
	 * @param annotations
	 *            the type annotations for this type
	 * @param wrapper
	 *            the generic signature to parse
	 * @throws CoreException
	 */
	private NdTypeSignature createTypeSignature(ITypeAnnotationWalker annotations, SignatureWrapper wrapper)
			throws CoreException {
		char[] genericSignature = wrapper.signature;

		if (genericSignature == null || genericSignature.length == 0) {
			return null;
		}

		char firstChar = genericSignature[wrapper.start];
		switch (firstChar) {
			case 'T': {
				// Skip the 'T' prefix
				wrapper.start++;
				NdComplexTypeSignature typeSignature = new NdComplexTypeSignature(getNd());
				typeSignature.setVariableIdentifier(wrapper.nextWord());
				attachAnnotations(typeSignature, annotations);
				// Skip the trailing semicolon
				wrapper.start++;
				return typeSignature;
			}
			case '[': {
				// Skip the '[' prefix
				wrapper.start++;
				// Determine the array argument type
				NdTypeSignature elementType = createTypeSignature(annotations.toNextArrayDimension(), wrapper);
				char[] fieldDescriptor = CharArrayUtils.concat(ARRAY_FIELD_DESCRIPTOR_PREFIX,
						elementType.getRawType().getFieldDescriptor().getChars());
				NdTypeId rawType = createTypeIdFromFieldDescriptor(fieldDescriptor);
				// We encode signatures as though they were a one-argument generic type whose element
				// type is the generic argument.
				NdComplexTypeSignature typeSignature = new NdComplexTypeSignature(getNd());
				typeSignature.setRawType(rawType);
				NdTypeArgument typeArgument = new NdTypeArgument(getNd(), typeSignature);
				typeArgument.setType(elementType);
				attachAnnotations(typeSignature, annotations);
				return typeSignature;
			}
			case 'V':
				wrapper.start++;
				return null;
			case 'B':
			case 'C':
			case 'D':
			case 'F':
			case 'I':
			case 'J':
			case 'S':
			case 'Z':
				wrapper.start++;
				return createTypeIdFromFieldDescriptor(new char[] { firstChar });
			case 'L':
				return parseClassTypeSignature(null, annotations, wrapper);
			case '+':
			case '-':
			case '*':
				throw new CoreException(Package.createStatus("Unexpected wildcard in top-level of generic signature: " //$NON-NLS-1$
						+ wrapper.toString()));
			default:
				throw new CoreException(Package.createStatus("Generic signature starts with unknown character: " //$NON-NLS-1$
						+ wrapper.toString()));
		}
	}

