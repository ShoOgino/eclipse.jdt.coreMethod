	private static <T> boolean isEqual(T o1, T o2) {
		if (o1 == o2) {
			return true;
		}

		if (o1 == null || o2 == null) {
			return false;
		}

		if (o1 instanceof char[]) {
			char[] c1 = (char[]) o1;
			char[] c2 = (char[]) o2;

			return CharArrayUtils.equals(c1, c2);
		}

		if (o1 instanceof char[][]) {
			char[][] c1 = (char[][]) o1;
			char[][] c2 = (char[][]) o2;

			return CharArrayUtils.equals(c1, c2);
		}

		if (o1 instanceof char[][][]) {
			char[][][] c1 = (char[][][]) o1;
			char[][][] c2 = (char[][][]) o2;

			if (c1.length != c2.length) {
				return false;
			}

			for (int i = 0; i < c1.length; i++) {
				if (!isEqual(c1[i], c2[i])) {
					return false;
				}
			}
			return true;
		}

		if (o1 instanceof IBinaryMethod[]) {
			IBinaryMethod[] a1 = (IBinaryMethod[]) o1;
			IBinaryMethod[] a2 = (IBinaryMethod[]) o2;

			if (a1.length != a2.length) {
				return false;
			}

			for (int i = 0; i < a1.length; i++) {
				IBinaryMethod m1 = a1[i];
				IBinaryMethod m2 = a2[i];

				compareMethods(m1, m2);
			}
		}

		return Objects.equals(o1, o2);
	}

