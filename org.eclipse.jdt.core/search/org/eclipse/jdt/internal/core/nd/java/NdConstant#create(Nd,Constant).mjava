	public static NdConstant create(Nd pdom, Constant constant) {
		if (constant == Constant.NotAConstant) {
			return null;
		}

		switch (constant.typeID()) {
			case TypeIds.T_boolean:
				return NdConstantBoolean.create(pdom, constant.booleanValue());
			case TypeIds.T_byte:
				return NdConstantByte.create(pdom, constant.byteValue());
			case TypeIds.T_char:
				return NdConstantChar.create(pdom, constant.charValue());
			case TypeIds.T_double:
				return NdConstantDouble.create(pdom, constant.doubleValue());
			case TypeIds.T_float:
				return NdConstantFloat.create(pdom, constant.floatValue());
			case TypeIds.T_int:
				return NdConstantInt.create(pdom, constant.intValue());
			case TypeIds.T_long:
				return NdConstantLong.create(pdom, constant.longValue());
			case TypeIds.T_short:
				return NdConstantShort.create(pdom, constant.shortValue());
			case TypeIds.T_JavaLangString:
				return NdConstantString.create(pdom, constant.stringValue());
			default:
				throw new IllegalArgumentException("Unknown typeID() " + constant.typeID()); //$NON-NLS-1$
		}
	}

