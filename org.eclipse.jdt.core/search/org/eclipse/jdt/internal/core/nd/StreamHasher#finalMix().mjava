	/**
	 * Final mixing of 3 32-bit values a, b, c into c
     *
	 * Pairs of a, b, c values differing in only a few bits will usually
	 * produce values of c that look totally different.  This was tested for
	 * * pairs that differed by one bit, by two bits, in any combination
	 *   of top bits of a, b, c, or in any combination of bottom bits of
	 *   a, b, c.
	 * * "differ" is defined as +, -, ^, or ~^.  For + and -, I transformed
	 *   the output delta to a Gray code (a ^ (a >> 1)) so a string of 1's (as
	 *   is commonly produced by subtraction) look like a single 1-bit
	 *   difference.
	 * * the base values were pseudo-random, all zero but one bit set, or
	 *   all zero plus a counter that starts at zero.
	 *
	 * These constants passed:
	 *  14 11 25 16 4 14 24
	 *  12 14 25 16 4 14 24
	 * and these came close:
	 *   4  8 15 26 3 22 24
	 *  10  8 15 26 3 22 24
	 *  11  8 15 26 3 22 24
	 */
	private void finalMix() {
		this.c ^= this.b; this.c -= Integer.rotateLeft(this.b, 14);
		this.a ^= this.c; this.a -= Integer.rotateLeft(this.c, 11);
		this.b ^= this.a; this.b -= Integer.rotateLeft(this.a, 25);
		this.c ^= this.b; this.c -= Integer.rotateLeft(this.b, 16);
		this.a ^= this.c; this.a -= Integer.rotateLeft(this.c, 4);
		this.b ^= this.a; this.b -= Integer.rotateLeft(this.a, 14);
		this.c ^= this.b; this.c -= Integer.rotateLeft(this.b, 24);
	}

