	public void setBufferSize(int megs) {
		int oldBufferLength = getBufferEntries();
		int newBufferLength = getBufferEntriesFor(megs);

		if (oldBufferLength == newBufferLength) {
			return;
		}

		long[] oldBuffer0 = this.buffer0;
		int[] oldBuffer1 = this.buffer1;
		byte[] oldOperation = this.operation;

		allocateBuffers(megs);

		if (this.buffer0 == null) {
			this.currentEntries = 0;
			this.insertionPosition = 0;
			this.operationStack.clear();
			return;
		}
		int newBufferSize = Math.min(this.buffer0.length, this.currentEntries);
		if (oldBufferLength > 0) {
			int readStart = (this.insertionPosition + oldBufferLength - newBufferSize) % oldBufferLength;
			if (readStart >= this.insertionPosition) {
				int entriesFromEnd = oldBufferLength - readStart;
				System.arraycopy(oldBuffer0, readStart, this.buffer0, 0, entriesFromEnd);
				System.arraycopy(oldBuffer1, readStart, this.buffer1, 0, entriesFromEnd);
				System.arraycopy(oldOperation, readStart, this.operation, 0, entriesFromEnd);

				System.arraycopy(oldBuffer0, 0, this.buffer0, entriesFromEnd, this.insertionPosition);
				System.arraycopy(oldBuffer1, 0, this.buffer1, entriesFromEnd, this.insertionPosition);
				System.arraycopy(oldOperation, 0, this.operation, entriesFromEnd, this.insertionPosition);
			} else {
				int entriesToCopy = this.insertionPosition - readStart;
				System.arraycopy(oldBuffer0, readStart, this.buffer0, 0, entriesToCopy);
				System.arraycopy(oldBuffer1, readStart, this.buffer1, 0, entriesToCopy);
				System.arraycopy(oldOperation, readStart, this.operation, 0, entriesToCopy);
			}
		}

		this.currentEntries = newBufferSize;
		this.insertionPosition = newBufferSize % this.buffer0.length;
	}

