	public static <T> ITypeFactory<NdLinkedList<T>> getFactoryFor(
			final ITypeFactory<T> elementFactory, final int recordsInFirstBlock, final int recordsInSubsequentBlocks,
			final int metadataBitsPerElement) {

		return new AbstractTypeFactory<NdLinkedList<T>>() {
			@Override
			public NdLinkedList<T> create(Nd dom, long address) {
				return new NdLinkedList<T>(dom, address, elementFactory, recordsInFirstBlock, recordsInSubsequentBlocks, metadataBitsPerElement);
			}

			@Override
			public int getRecordSize() {
				return NdRawLinkedList.recordSize(elementFactory.getRecordSize(), recordsInFirstBlock,
						metadataBitsPerElement);
			}

			@Override
			public Class<?> getElementClass() {
				return NdLinkedList.class;
			}

			@Override
			public boolean hasDestructor() {
				return true;
			}

			@Override
			public void destructFields(Nd dom, long address) {
				create(dom, address).destruct();
			}

			@Override
			public void destruct(Nd dom, long address) {
				destructFields(dom, address);
			}
		};
	}

