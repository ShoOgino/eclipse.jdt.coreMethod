	/**
	 * Adds an archive to the index, under the given NdResourceFile.
	 */
	private int addElement(NdResourceFile resourceFile, IJavaElement element, IProgressMonitor monitor)
			throws JavaModelException {
		SubMonitor subMonitor = SubMonitor.convert(monitor, 100);
		List<IJavaElement> bindableElements = getBindableElements(element, subMonitor.split(10));
		List<IClassFile> classFiles = getClassFiles(bindableElements);

		if (DEBUG && classFiles.isEmpty()) {
			Package.logInfo("The path " + element.getPath() + " contained no class files"); //$NON-NLS-1$ //$NON-NLS-2$
		}

		subMonitor.setWorkRemaining(classFiles.size());

		int classesIndexed = 0;
		ClassFileToIndexConverter converter = new ClassFileToIndexConverter(resourceFile);
		for (IClassFile next : classFiles) {
			SubMonitor iterationMonitor = subMonitor.split(1).setWorkRemaining(100);

			try {
				BinaryTypeDescriptor descriptor = BinaryTypeFactory.createDescriptor(next);
				ClassFileReader binaryType = BinaryTypeFactory.rawReadType(descriptor, true);

				this.nd.acquireWriteLock(iterationMonitor.split(5));
				try {
					if (!resourceFile.isInIndex()) {
						return classesIndexed;
					}

					if (DEBUG_INSERTIONS) {
						Package.logInfo("Inserting " + new String(descriptor.fieldDescriptor) + " into " + new String(descriptor.location) + " " + resourceFile.address); //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$
					}
					converter.addType(binaryType, descriptor.fieldDescriptor, iterationMonitor.split(45));
					classesIndexed++;
				} finally {
					this.nd.releaseWriteLock();
				}
			} catch (CoreException | ClassFormatException e) {
				Package.log("Unable to index " + next.toString(), e); //$NON-NLS-1$
			}

//			if (ENABLE_SELF_TEST) {
//				IndexTester.testType(binaryType, new IndexBinaryType(ReferenceUtil.createTypeRef(type)));
//			}
		}

		return classesIndexed;
	}

