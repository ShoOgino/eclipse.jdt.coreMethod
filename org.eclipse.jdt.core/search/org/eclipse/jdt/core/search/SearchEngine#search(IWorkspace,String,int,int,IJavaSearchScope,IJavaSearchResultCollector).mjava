	/**
	 * Searches for the Java element determined by the given signature. The signature
	 * can be incomplete. For example, a call like 
	 * <code>search(ws, "run()", METHOD,REFERENCES, col)</code>
	 * searches for all references to the method <code>run</code>.
	 *
	 * Note that by default the pattern will be case insensitive. For specifying case s
	 * sensitive search, use <code>search(workspace, createSearchPattern(patternString, searchFor, limitTo, true), scope, resultCollector);</code>
	 * 
	 * @param workspace the workspace
	 * @param patternString the pattern to be searched for
	 * @param searchFor a hint what kind of Java element the string pattern represents.
	 *  Look into <code>IJavaSearchConstants</code> for valid values
	 * @param limitTo one of the following values:
	 *	<ul>
	 *	  <li><code>IJavaSearchConstants.DECLARATIONS</code>: search 
	 *		  for declarations only </li>
	 *	  <li><code>IJavaSearchConstants.REFERENCES</code>: search 
	 *		  for all references </li>
	 *	  <li><code>IJavaSearchConstants.ALL_OCCURENCES</code>: search 
	 *		  for both declarations and all references </li>
	 *	  <li><code>IJavaSearchConstants.IMPLEMENTORS</code>: search for
	 *		  all implementors of an interface; the value is only valid if
	 *		  the Java element represents an interface</li>
	 * 	</ul>
	 * @param scope the search result has to be limited to the given scope
	 * @param resultCollector a callback object to which each match is reported	 
	 * @exception JavaModelException if the search failed. Reasons include:
	 *	<ul>
	 *		<li>the classpath is incorrectly set</li>
	 *	</ul>
	 */
	public void search(IWorkspace workspace, String patternString, int searchFor, int limitTo, IJavaSearchScope scope, IJavaSearchResultCollector resultCollector) throws JavaModelException {
		search(workspace, createSearchPattern(patternString, searchFor, limitTo, true), scope, resultCollector);
	}

