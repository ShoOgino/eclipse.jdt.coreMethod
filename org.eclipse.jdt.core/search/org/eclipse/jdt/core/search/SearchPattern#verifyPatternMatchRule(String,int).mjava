	/**
	 * Verify string pattern and match rule bits validity.
	 * Optimize some combinations typically as {@link #R_PATTERN_MATCH} without anu '*' or '?' in string pattern.
	 *
	 * @param stringPattern
	 * @param matchRule
	 * @return Optimized match rule if possible and -1 if something wrong was detected.
	 */
	private static int verifyPatternMatchRule(String stringPattern, int matchRule) {
	
		// Verify Regexp match rule
		if ((matchRule & R_REGEXP_MATCH) != 0) {
			if ((matchRule & R_PATTERN_MATCH) != 0 || (matchRule & R_PREFIX_MATCH) != 0 || (matchRule & R_CAMELCASE_MATCH) != 0) {
				return -1;
			}
		}
	
		// Verify Pattern match rule
		if ((matchRule & R_PATTERN_MATCH) != 0) {
			if ((matchRule & R_REGEXP_MATCH) != 0 || (matchRule & R_PREFIX_MATCH) != 0) {
				return -1;
			}
			int starIndex = stringPattern.indexOf('*');
			int questionIndex = stringPattern.indexOf('?');
			if (starIndex < 0 && questionIndex < 0) {
				// No need to have pattern match
				matchRule &= ~R_PATTERN_MATCH;
			} else {
				// Remove Camel Case match when there's '*' or '?' characters
				if ((matchRule & R_CAMELCASE_MATCH) != 0) {
					matchRule &= ~R_CAMELCASE_MATCH;
				}
			}
		}
	
		// Verify Camel Case match rule
		if ((matchRule & R_CAMELCASE_MATCH) != 0) {
			// Verify sting pattern compatibility
			int length = stringPattern.length();
			if (length > 1) {
				int idx = 0;
				char ch = stringPattern.charAt(idx++);
				if (Character.isJavaIdentifierStart(ch)) {
					ch = stringPattern.charAt(idx++);
					if (Character.isUpperCase(ch)) {
						while (idx<length && Character.isUpperCase(stringPattern.charAt(idx))) {
							idx++;
						}
						while (idx<length && (!Character.isUpperCase(ch=stringPattern.charAt(idx)) && Character.isJavaIdentifierPart(ch))) {
							idx++;
						}
						if (idx != length) {
							matchRule &= ~R_CAMELCASE_MATCH;
							matchRule |= R_PREFIX_MATCH;
						}
					}
				}
			}
			// Verify bits compatibility
			if ((matchRule & R_CAMELCASE_MATCH) != 0) {
				if (matchRule == R_CAMELCASE_MATCH) {
					matchRule |= R_CASE_SENSITIVE;
				} else if ((matchRule & R_PREFIX_MATCH) != 0) {
					if ((matchRule & R_CASE_SENSITIVE) != 0) {
						// This is equivalent to Camel Case match rule
						matchRule &= ~R_PREFIX_MATCH;
						matchRule &= ~R_CASE_SENSITIVE;
					}
				}
			}
		}
		return matchRule;
	}

