/**
 * Searches for all declarations of the methods invoked in the given element.
 * The element can be a compilation unit, a type, or a method.
 * Reports the method declarations using the given collector.
 * <p>
 * Consider the following code:
 * <code>
 * <pre>
 *		class A {
 *			void foo() {};
 *			void bar() {};
 *		}
 *		class B extends A {
 *			void foo() {};
 *		}
 *		class X {
 *			void test() {
 *				A a = new B();
 *				a.foo();
 *				B b = (B)a;
 *				b.bar();
 *			};
 *		}
 * </pre>
 * </code>
 * then searching for declarations of sent messages in method 
 * <code>X.test()</code> would collect the methods
 * <code>A.foo()</code>, <code>B.foo()</code>, and <code>A.bar()</code>.
 * </p>
 *
 * @param workspace the workspace
 * @param enclosingElement the method, type, or compilation unit to be searched in
 * @param resultCollector a callback object to which each match is reported
 * @exception JavaModelException if the search failed. Reasons include:
 *	<ul>
 *		<li>the element doesn't exist
 *		<li>the classpath is incorrectly set
 *	</ul>
 */	
public void searchDeclarationsOfSentMessages(IWorkspace workspace, IJavaElement enclosingElement, IJavaSearchResultCollector resultCollector) throws JavaModelException {
	SearchPattern pattern = 
		new DeclarationOfReferencedMethodsPattern(
			null, 
			IJavaSearchConstants.PATTERN_MATCH, 
			false, 
			null, 
			null, 
			null, 
			null,
			null,  
			null);
	IJavaSearchScope scope = createJavaSearchScope(new IJavaElement[] {enclosingElement});
	IResource resource = enclosingElement.getUnderlyingResource();
	if (resource instanceof IFile) {
		MatchLocator locator = new MatchLocator(
			pattern,
			IInfoConstants.DeclarationInfo,
			resultCollector,
			scope);
		locator.locateMatches(
			new String[] {resource.getFullPath().toString()}, 
			workspace);
	} else {
		search(workspace, pattern, scope, resultCollector);
	}
}

