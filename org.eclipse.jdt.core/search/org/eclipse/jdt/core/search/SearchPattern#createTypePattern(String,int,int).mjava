	/**
	 * Type pattern are formed by [qualification.]type.
	 * e.g. java.lang.Object
	 *		Runnable
	 *
	 * @since 3.1
	 *		Type arguments can be specified to search references to parameterized types.
	 * 	Then patterns will look as follow:
	 * 		[qualification.] type [ '<' [ [ '?' {'extends'|'super'} ] type ( ',' [ '?' {'extends'|'super'} ] type )* ] '>' ]
	 * 	Please note that:
	 * 		- '*' is not valid inside type arguments definition <>
	 * 		- '?' is treated as a wildcard when it is inside <> (ie. it must be put on first position of the type argument)
	 * 		- nested <> are not allowed; List<List<Object>> will be treated as pattern List<List>
	 * 		- only one type arguments definition is allowed; Gen<Exception>.Member<Object>
	 *				will be treated as pattern Gen<Exception>.Member
	 */
	private static SearchPattern createTypePattern(String patternString, int limitTo, int matchRule) {
		
		Scanner scanner = new Scanner(false /*comment*/, true /*whitespace*/, false /*nls*/, ClassFileConstants.JDK1_3/*sourceLevel*/, null /*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/); 
		scanner.setSource(patternString.toCharArray());
		String type = null;
		int token;
		try {
			token = scanner.getNextToken();
		} catch (InvalidInputException e) {
			return null;
		}
		boolean storeType = true, storeParam = true;
		int parameterized = 0;
		int paramPtr = -1;
		char[] paramName = null;
		char[][] paramNames = null;
		int[] wildcards = null;
		while (token != TerminalTokens.TokenNameEOF) {
			if (token != TerminalTokens.TokenNameWHITESPACE) {
				if (storeParam) {
					switch (token) {
						case TerminalTokens.TokenNameMULTIPLY:
							if (parameterized > 0) {
								// TODO (frederic) Should warn user that syntax is not valid
							}
							break;
						case TerminalTokens.TokenNameQUESTION:
							if (parameterized > 0) {
								if (wildcards[paramPtr] == -1) {
									wildcards[paramPtr] = Wildcard.UNBOUND;
								} else {
									// TODO (frederic) Should warn user that syntax is not valid
								}
							}
							break;
						case TerminalTokens.TokenNameextends:
							if (parameterized > 0) {
								if (wildcards[paramPtr] == Wildcard.UNBOUND) {
									wildcards[paramPtr] = Wildcard.EXTENDS;
								} else {
									// TODO (frederic) Should warn user that syntax is not valid
								}
							}
							break;
						case TerminalTokens.TokenNamesuper:
							if (parameterized > 0) {
								if (wildcards[paramPtr] == Wildcard.UNBOUND) {
									wildcards[paramPtr] = Wildcard.SUPER;
								} else {
									// TODO (frederic) Should warn user that syntax is not valid
								}
							}
							break;
						case TerminalTokens.TokenNameCOMMA:
							if (parameterized == 1 && storeParam) {
								if (paramPtr < paramNames.length) {
									paramNames[paramPtr++] = paramName;
									paramName = null;
								}
								wildcards[paramPtr] = -1;
							}
							break;
						case TerminalTokens.TokenNameGREATER:
							if (parameterized == 1) {
								if (storeParam) {
									storeParam = false;
									if (paramPtr < paramNames.length) {
										paramNames[paramPtr] = paramName;
										paramName = null;
									}
								}
							}
							parameterized--;
							break;
						case TerminalTokens.TokenNameLESS:
							if (parameterized == 0) {
								paramNames = new char[10][]; // 10 parameters max
								paramPtr++;
								wildcards = new int[10]; // 10 parameters max
								wildcards[paramPtr] = -1;
								storeType = false;
							}
							parameterized++;
							break;
						case TerminalTokens.TokenNameIdentifier:
							if (parameterized == 1 && storeParam) {
								if (paramName == null) {
									// never store id at this index
									paramName = scanner.getCurrentIdentifierSource();
								} else {
									paramName = CharOperation.concat(paramName, scanner.getCurrentIdentifierSource());
								}
							}
							break;
						case TerminalTokens.TokenNameDOT:
							if (parameterized == 1 && storeParam && paramName != null) {
								paramName = CharOperation.append(paramName, '.');
							}
							break;
					}
				}
				if (storeType) { // store type if not in type arguments declaration
					if (type == null)
						type = new String(scanner.getCurrentTokenSource());
					else
						type += new String(scanner.getCurrentTokenSource());
				}
				storeType = parameterized == 0;
			}
			try {
				token = scanner.getNextToken();
			} catch (InvalidInputException e) {
				return null;
			}
		}
		if (type == null) return null;
		// Resize param names array if necessary
		if (paramPtr >= 0) {
			System.arraycopy(paramNames, 0, paramNames = new char[paramPtr+1][], 0, paramPtr+1);
			System.arraycopy(wildcards, 0, wildcards = new int[paramPtr+1], 0, paramPtr+1);
		}
	
		char[] qualificationChars = null, typeChars = null;
	
		// extract declaring type infos
		if (type != null) {
			char[] typePart = type.toCharArray();
			int lastDotPosition = CharOperation.lastIndexOf('.', typePart);
			if (lastDotPosition >= 0) {
				qualificationChars = CharOperation.subarray(typePart, 0, lastDotPosition);
				if (qualificationChars.length == 1 && qualificationChars[0] == '*')
					qualificationChars = null;
				typeChars = CharOperation.subarray(typePart, lastDotPosition+1, typePart.length);
			} else {
				qualificationChars = null;
				typeChars = typePart;
			}
			if (typeChars.length == 1 && typeChars[0] == '*')
				typeChars = null;
		}
		switch (limitTo) {
			case IJavaSearchConstants.DECLARATIONS : // cannot search for explicit member types
				return new QualifiedTypeDeclarationPattern(qualificationChars, typeChars, IIndexConstants.TYPE_SUFFIX, matchRule);
			case IJavaSearchConstants.REFERENCES :
				return new TypeReferencePattern(qualificationChars, typeChars, paramNames, false /* not generic */, wildcards, matchRule);
			case IJavaSearchConstants.IMPLEMENTORS : 
				return new SuperTypeReferencePattern(qualificationChars, typeChars, true, matchRule);
			case IJavaSearchConstants.ALL_OCCURRENCES :
				return new OrPattern(
					new QualifiedTypeDeclarationPattern(qualificationChars, typeChars, IIndexConstants.TYPE_SUFFIX, matchRule),// cannot search for explicit member types
					new TypeReferencePattern(qualificationChars, typeChars, matchRule));
		}
		return null;
	}

