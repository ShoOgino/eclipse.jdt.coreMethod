/**
 * Searches for all declarations of the fields accessed in the given element.
 * The element can be a compilation unit, a type, or a method.
 * Reports the field declarations using the given collector.
 * <p>
 * Consider the following code:
 * <code>
 * <pre>
 *		class A {
 *			int field1;
 *		}
 *		class B extends A {
 *			String value;
 *		}
 *		class X {
 *			void test() {
 *				B b = new B();
 *				System.out.println(b.value + b.field1);
 *			};
 *		}
 * </pre>
 * </code>
 * then searching for declarations of accessed fields in method 
 * <code>X.test()</code> would collect the fields
 * <code>B.value</code> and <code>A.field1</code>.
 * </p>
 *
 * @param workspace the workspace
 * @param enclosingElement the method, type, or compilation unit to be searched in
 * @param resultCollector a callback object to which each match is reported
 * @exception JavaModelException if the search failed. Reasons include:
 *	<ul>
 *		<li>the element doesn't exist
 *		<li>the classpath is incorrectly set
 *	</ul>
 */	
public void searchDeclarationsOfAccessedFields(IWorkspace workspace, IJavaElement enclosingElement, IJavaSearchResultCollector resultCollector) throws JavaModelException {
	MatchLocator locator = new MatchLocator(
		(SearchPattern)createSearchPattern("*", IJavaSearchConstants.FIELD, IJavaSearchConstants.REFERENCES, true),
		IInfoConstants.DeclarationInfo,
		resultCollector,
		new JavaWorkspaceScope());
	// TBD: limit search to type or method by passing start and end of enclosing element
	locator.locateMatches(
		new String[] {enclosingElement.getUnderlyingResource().getFullPath().toString()}, 
		workspace);
}

