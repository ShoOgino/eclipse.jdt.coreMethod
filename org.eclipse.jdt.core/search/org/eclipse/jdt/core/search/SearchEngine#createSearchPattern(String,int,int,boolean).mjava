/**
 * Returns a search pattern based on a given string pattern. The string patterns support '*' wild-cards.
 * The remaining parameters are used to narrow down the type of expected results.
 *
 * <p>
 *	Examples:
 *	<ul>
 * 		<li>search for case insensitive references to <code>Object</code>:
 *			<code>createSearchPattern("Object", TYPE, REFERENCES, false);</code>
 *  	<li>search for case sensitive references to exact <code>Object()</code> constructor:
 *			<code>createSearchPattern("java.lang.Object()", CONSTRUCTOR, REFERENCES, true);</code>
 *  	<li>search for implementers of <code>java.lang.Runnable</code>:
 *			<code>createSearchPattern("java.lang.Runnable", TYPE, IMPLEMENTORS, true);</code>
 * @param searchFor determines the nature of the searched elements
 *	<ul>
 * 		<li><code>IJavaSearchConstants.CLASS</code>: only look for classes
 *		<li><code>IJavaSearchConstants.INTERFACE</code>: only look for interfaces
 * 		<li><code>IJavaSearchConstants.TYPE</code>: look for both classes and interfaces
 *		<li><code>IJavaSearchConstants.FIELD</code>: look for fields
 *		<li><code>IJavaSearchConstants.METHOD</code>: look for methods
 *		<li><code>IJavaSearchConstants.CONSTRUCTOR</code>: look for constructors
 *		<li><code>IJavaSearchConstants.PACKAGE</code>: look for packages
 *	</ul>
 * @param limitTo determines the nature of the expected matches
 *	<ul>
 * 		<li><code>IJavaSearchConstants.DECLARATIONS</code>: will search declarations matching with the corresponding
 * 			element. In case the element is a method, declarations of matching methods in subtypes will also
 *  		be found, allowing to find declarations of abstract methods, etc.
 *
 *		 <li><code>IJavaSearchConstants.REFERENCES</code>: will search references to the given element.
 *
 *		 <li><code>IJavaSearchConstants.ALL_OCCURRENCES</code>: will search for either declarations or references as specified
 *  		above.
 *
 *		 <li><code>IJavaSearchConstants.IMPLEMENTORS</code>: for interface, will find all types which implements a given interface.
 *	</ul>
 *
 * @param isCaseSensitive indicates whether the search is case sensitive or not.
 * @return a search pattern on the given string pattern, or <code>null</code> if the string pattern is ill-formed.
 */
public static ISearchPattern createSearchPattern(String stringPattern, int searchFor, int limitTo, boolean isCaseSensitive) {

	return SearchPattern.createPattern(stringPattern, searchFor, limitTo, IJavaSearchConstants.PATTERN_MATCH, isCaseSensitive);
}

