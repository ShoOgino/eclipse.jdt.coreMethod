	/**
	 * Returns a search pattern that combines the given two patterns into a "and" pattern.
	 * The search result will match both the left pattern and the right pattern.
	 *
	 * @param leftPattern the left pattern
	 * @param rightPattern the right pattern
	 * @return a "and" pattern
     * @since 3.0
	 */
	public static SearchPattern createAndSearchPattern(final SearchPattern leftPattern, final SearchPattern rightPattern) {
		return new AndPattern(0/*no kind*/, 0/*no rule*/){
			SearchPattern current = leftPattern;
			public void decodeIndexKey(char[] key) {
				current.decodeIndexKey(key);

			}
			public char[] encodeIndexKey() {
				return current.encodeIndexKey();
			}
			public SearchPattern getIndexRecord() {
				return current.getIndexRecord();
			}
			public char[][] getMatchCategories() {
				return current.getMatchCategories();
			}
			public int getMatchRule() {
				return current.getMatchRule();
			}
			protected boolean hasNextQuery() {
				if (current == leftPattern) {
					current = rightPattern;
					return true;
				}
				return false; 
			}
			public boolean isMatchingIndexRecord() {
				return current.isMatchingIndexRecord();
			}
			protected void resetQuery() {
				current = leftPattern;
			}
		};
	}

