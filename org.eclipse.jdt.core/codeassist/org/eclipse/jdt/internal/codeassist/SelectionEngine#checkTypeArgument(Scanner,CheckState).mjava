	private boolean checkTypeArgument(Scanner scanner, CheckState state) throws InvalidInputException {
		boolean expectingIdentifier = true;
		
		int token;
		do {
			token = scanner.getNextToken();
	
			switch(token) {
				case TerminalTokens.TokenNameDOT :
					if (expectingIdentifier)
						return false;
					expectingIdentifier = true;
					break;
				case TerminalTokens.TokenNameIdentifier :
					if (!expectingIdentifier)
						return false;
					expectingIdentifier = false;
					break;
				case TerminalTokens.TokenNameCOMMA :
					if (expectingIdentifier)
						return false;
					expectingIdentifier = true;
					break;
				case TerminalTokens.TokenNameLESS :
					int oldDepth = state.depth;
					state.depth++;
					if(checkTypeArgument(scanner, state)) {
						if(state.depth < oldDepth) {
							return true;
						}
					} else {
						return false;
					}
					break;
				case TerminalTokens.TokenNameGREATER :
					state.depth--;
					return state.depth >= 0;
				case TerminalTokens.TokenNameRIGHT_SHIFT :
					state.depth-=2;
					return state.depth >= 0;
				case TerminalTokens.TokenNameUNSIGNED_RIGHT_SHIFT :
					state.depth-=3;
					return state.depth >= 0;
				case TerminalTokens.TokenNameQUESTION :	
					token = scanner.getNextToken();
					if(token != TerminalTokens.TokenNameextends &&
							token != TerminalTokens.TokenNamesuper) {
						return false;
					}
					
					token = scanner.getNextToken();
					if(token != TerminalTokens.TokenNameIdentifier)
						return false;
					
					expectingIdentifier = false;
					break;
				default:
					return false;
			}
		} while (token != TerminalTokens.TokenNameEOF);
		
		return false;
	}

