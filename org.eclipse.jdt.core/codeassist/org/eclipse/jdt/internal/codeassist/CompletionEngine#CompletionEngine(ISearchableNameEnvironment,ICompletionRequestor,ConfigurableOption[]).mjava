/**
 * The CompletionEngine is responsible for computing source completions.
 *
 * It requires a searchable name environment, which supports some
 * specific search APIs, and a requestor to feed back the results to a UI.
 *
 *  @param environment com.ibm.codeassist.java.api.ISearchableNameEnvironment
 *      used to resolve type/package references and search for types/packages
 *      based on partial names.
 *
 *  @param requestor com.ibm.codeassist.java.api.ICompletionRequestor
 *      since the engine might produce answers of various forms, the engine 
 *      is associated with a requestor able to accept all possible completions.
 *
 *  @param options com.ibm.compiler.java.api.ConfigurableOptions
 *		set of options used to configure the code assist engine.
 */

public CompletionEngine(
	ISearchableNameEnvironment nameEnvironment, ICompletionRequestor requestor, ConfigurableOption[] settings) {

	this.requestor = requestor;
	this.nameEnvironment = nameEnvironment;

	CompilerOptions options = new CompilerOptions(settings);
	ProblemReporter problemReporter =
		new ProblemReporter(
			DefaultErrorHandlingPolicies.proceedWithAllProblems(),
			options,
			new DefaultProblemFactory(Locale.getDefault())) {
				public void record(IProblem problem, CompilationResult unitResult) {
					if (problem.getID() != ProblemIrritants.UnmatchedBracket) {
						unitResult.record(problem);
						CompletionEngine.this.requestor.acceptError(problem);
					}
				}
			};

	this.parser = new CompletionParser(problemReporter);
	this.lookupEnvironment = new LookupEnvironment(this, options, problemReporter, nameEnvironment);
}

