	private boolean checkSelection(
		char[] source,
		int selectionStart,
		int selectionEnd) {

		Scanner scanner = new Scanner();
		scanner.setSourceBuffer(source);
		scanner.resetTo(selectionStart, selectionEnd);

		int lastIdentifierStart = -1;
		int lastIdentifierEnd = -1;
		int token, identCount = 0;
		char[] lastIdentifier = null;
		boolean expectingIdentifier = true;
		StringBuffer entireSelection =
			new StringBuffer(selectionEnd - selectionStart + 1);
		do {
			try {
				token = scanner.getNextToken();
			} catch (InvalidInputException e) {
				return false;
			}
			switch (token) {
				case TerminalSymbols.TokenNamethis :
				case TerminalSymbols.TokenNamesuper :
				case TerminalSymbols.TokenNameIdentifier :
					if (!expectingIdentifier)
						return false;
					lastIdentifier = scanner.getCurrentTokenSource();
					lastIdentifierStart = scanner.startPosition;
					lastIdentifierEnd = scanner.currentPosition - 1;
					if(lastIdentifierEnd > selectionEnd) {
						lastIdentifierEnd = selectionEnd;
						lastIdentifier = CharOperation.subarray(lastIdentifier, 0,lastIdentifierEnd - lastIdentifierStart + 1);
					}
					entireSelection.append(lastIdentifier);
						
					identCount++;
					expectingIdentifier = false;
					break;
				case TerminalSymbols.TokenNameDOT :
					if (expectingIdentifier)
						return false;
					entireSelection.append('.');
					expectingIdentifier = true;
					break;
				case TerminalSymbols.TokenNameEOF :
					if (expectingIdentifier)
						return false;
					break;
				default :
					return false;
			}
		} while (token != TerminalSymbols.TokenNameEOF);
		if (lastIdentifierStart > 0) {
			actualSelectionStart = lastIdentifierStart;
			actualSelectionEnd = lastIdentifierEnd;
			selectedIdentifier = lastIdentifier;
			if (identCount > 1)
				qualifiedSelection = entireSelection.toString().toCharArray();
			return true;
		}
		return false;
	}

