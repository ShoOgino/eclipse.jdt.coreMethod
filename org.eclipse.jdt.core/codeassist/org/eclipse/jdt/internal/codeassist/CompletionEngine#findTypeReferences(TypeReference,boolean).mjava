	private void findTypeReferences(TypeReference reference, boolean findMembers) {
		char[][] tokens = reference.getTypeName();

		char[] typeName = CharOperation.concatWithAll(tokens, '.');

		if (typeName.length == 0) {
			this.completionToken = new char[] {'*'};
		} else if (reference instanceof CompletionOnUsesQualifiedTypeReference ||
				reference instanceof CompletionOnProvidesInterfacesQualifiedTypeReference ||
				reference instanceof CompletionOnProvidesImplementationsQualifiedTypeReference) {
			CompletionOnQualifiedTypeReference qReference = (CompletionOnQualifiedTypeReference) reference;
			if (qReference.completionIdentifier != null) {
				this.completionToken = CharOperation.concatAll(typeName, qReference.completionIdentifier, '.');
			}
		 } else {
			 char[] lastToken = tokens[tokens.length - 1];
			 if(lastToken != null && lastToken.length == 0)
				 typeName = CharOperation.concat(typeName, new char[]{'.'});
			 this.completionToken =  lastToken;
		 }
		setSourceRange(reference.sourceStart, reference.sourceEnd);
		findTypesAndPackages(this.completionToken, this.unitScope, true, true, new ObjectVector());
	}

