	private void findFields(
		char[] fieldName,
		FieldBinding[] fields,
		Scope scope,
		ObjectVector fieldsFound,
		ObjectVector localsFound,
		boolean onlyStaticFields,
		ReferenceBinding receiverType,
		InvocationSite invocationSite,
		Scope invocationScope) {

		// Inherited fields which are hidden by subclasses are filtered out
		// No visibility checks can be performed without the scope & invocationSite

		int fieldLength = fieldName.length;
		next : for (int f = fields.length; --f >= 0;) {
			FieldBinding field = fields[f];
			if (onlyStaticFields && !field.isStatic())
				continue next;
			if (fieldLength > field.name.length)
				continue next;
			if (!CharOperation.prefixEquals(fieldName, field.name, false /* ignore case */
				))
				continue next;

			if (options.checkVisibilitySensitive()
				&& !field.canBeSeenBy(receiverType, invocationSite, scope))
				continue next;

			for (int i = fieldsFound.size; --i >= 0;) {
				FieldBinding otherField = (FieldBinding) fieldsFound.elementAt(i);
				if (field == otherField)
					continue next;
				if (CharOperation.equals(field.name, otherField.name, true)) {
					if (field.declaringClass.isSuperclassOf(otherField.declaringClass))
						continue next;
					if (otherField.declaringClass.isInterface())
						if (field.declaringClass.implementsInterface(otherField.declaringClass, true))
							continue next;
				}
			}

			fieldsFound.add(field);

			for (int l = localsFound.size; --l >= 0;) {
				LocalVariableBinding local = (LocalVariableBinding) localsFound.elementAt(l);
				if (CharOperation.equals(field.name, local.name, true)) {
					char[] completion = field.name;
					SourceTypeBinding enclosing = scope.enclosingSourceType();
					if (field.isStatic()) {
						char[] name = enclosing.compoundName[enclosing.compoundName.length-1];
						completion = CharOperation.concat(name ,completion,'.');
					} else {;
						if(enclosing == invocationScope.enclosingSourceType()){
							completion = CharOperation.concat(THIS,completion,'.');
						} else {
							char[] name = enclosing.compoundName[enclosing.compoundName.length-1];
							if(!enclosing.isNestedType()){
								completion = CharOperation.concat(THIS,completion,'.');
								completion = CharOperation.concat(name,completion,'.');
							} else if (!enclosing.isAnonymousType()){
								completion = CharOperation.concat(THIS,completion,'.');
								int index = CharOperation.lastIndexOf('$',name);
								char[] shortName = CharOperation.subarray(name,index+1,name.length);
								completion = CharOperation.concat(shortName,completion,'.');
							}
						}
					}
					requestor
						.acceptField(
							field.declaringClass.qualifiedPackageName(),
							field.declaringClass.qualifiedSourceName(),
							field.name,
							field.type.qualifiedPackageName(),
							field.type.qualifiedSourceName(),
							completion,
					// may include some qualification to resolve ambiguities
					field.modifiers, startPosition, endPosition);
					continue next;
				}
			}

			requestor
				.acceptField(
					field.declaringClass.qualifiedPackageName(),
					field.declaringClass.qualifiedSourceName(),
					field.name,
					field.type.qualifiedPackageName(),
					field.type.qualifiedSourceName(),
					field.name,
			// may include some qualification to resolve ambiguities
			field.modifiers, startPosition, endPosition);
		}
	}

