/**
 * One result of the search consists of a new type.
 *
 * NOTE - All package and type names are presented in their readable form:
 *    Package names are in the form "a.b.c".
 *    Nested type names are in the qualified form "A.M".
 *    The default package is represented by an empty array.
 */
public void acceptType(char[] packageName, char[] typeName) {
	char[] completionName = CharOperation.concat(packageName, typeName, '.');
	if (resolvingImports) {
		completionName = CharOperation.concat(completionName, new char[] {';'});
	} else if (!insideQualifiedReference) {
		if (mustQualifyType(CharOperation.splitOn('.', packageName), completionName)) {
	 		if (packageName == null || packageName.length == 0)
				if (unitScope != null && unitScope.fPackage.compoundName != NoCharChar)
					return; // ignore types from the default package from outside it
		} else {
			completionName = typeName;
		}
	}

	requestor.acceptType(
		packageName,
		typeName,
		completionName,
		startPosition,
		endPosition);
}

