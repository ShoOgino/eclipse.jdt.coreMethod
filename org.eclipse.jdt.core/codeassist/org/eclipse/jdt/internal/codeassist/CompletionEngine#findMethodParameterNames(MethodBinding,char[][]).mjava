	private char[][] findMethodParameterNames(MethodBinding method, char[][] parameterTypeNames){
		ReferenceBinding bindingType = method.declaringClass;

		char[][] parameterNames = null;
		
		int length = parameterTypeNames.length;

		if (length == 0){
			return CharOperation.NO_CHAR_CHAR;
		}
		// look into the corresponding unit if it is available
		if (bindingType instanceof SourceTypeBinding){
			SourceTypeBinding sourceType = (SourceTypeBinding) bindingType;

			if (sourceType.scope != null){
				TypeDeclaration parsedType;

				if ((parsedType = sourceType.scope.referenceContext) != null){
					AbstractMethodDeclaration methodDecl = parsedType.declarationOf(method.original());

					if (methodDecl != null){
						Argument[] arguments = methodDecl.arguments;
						parameterNames = new char[length][];

						for(int i = 0 ; i < length ; i++){
							parameterNames[i] = arguments[i].name;
						}
					}
				}
			}
		}
		// look into the model		
		if(parameterNames == null){
			char[] compoundName = CharOperation.concatWith(bindingType.compoundName, '.');
			Object type = typeCache.get(compoundName);
			
			ISourceType sourceType = null;
			if(type != null) {
				if(type instanceof ISourceType) {
					sourceType = (ISourceType) type;
				}
			} else {
				NameEnvironmentAnswer answer = nameEnvironment.findType(bindingType.compoundName);
				if(answer != null && answer.isSourceType()) {
					sourceType = answer.getSourceTypes()[0];
					typeCache.put(compoundName, sourceType);
				}
			}
			
			if(sourceType != null) {
				ISourceMethod[] sourceMethods = sourceType.getMethods();
				int len = sourceMethods == null ? 0 : sourceMethods.length;
				for(int i = 0; i < len ; i++){
					ISourceMethod sourceMethod = sourceMethods[i];
					char[][] argTypeNames = sourceMethod.getArgumentTypeNames();

					if(argTypeNames != null &&
						CharOperation.equals(method.selector,sourceMethod.getSelector()) &&
						CharOperation.equals(argTypeNames,parameterTypeNames)){
						parameterNames = sourceMethod.getArgumentNames();
						break;
					}
				}
			}
		}
		return parameterNames;
	}

