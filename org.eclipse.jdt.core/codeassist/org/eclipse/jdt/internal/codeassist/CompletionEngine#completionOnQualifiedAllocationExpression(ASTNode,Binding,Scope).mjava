	private void completionOnQualifiedAllocationExpression(ASTNode astNode, Binding qualifiedBinding, Scope scope) {
		setSourceAndTokenRange(astNode.sourceStart, astNode.sourceEnd, false);

		CompletionOnQualifiedAllocationExpression allocExpression =
			(CompletionOnQualifiedAllocationExpression) astNode;
		TypeBinding[] argTypes = computeTypes(allocExpression.arguments);

		ReferenceBinding ref = (ReferenceBinding) qualifiedBinding;
		if (!this.requestor.isIgnored(CompletionProposal.METHOD_REF)
				&& ref.isClass()
				&& !ref.isAbstract()) {
				findConstructors(
					ref,
					argTypes,
					scope,
					allocExpression,
					false);
		}
		
		checkCancel();
		
		if (!this.requestor.isIgnored(CompletionProposal.ANONYMOUS_CLASS_DECLARATION)
				&& !ref.isFinal()
				&& !ref.isEnum()){
			findAnonymousType(
				ref,
				argTypes,
				scope,
				allocExpression);
		}
	}

