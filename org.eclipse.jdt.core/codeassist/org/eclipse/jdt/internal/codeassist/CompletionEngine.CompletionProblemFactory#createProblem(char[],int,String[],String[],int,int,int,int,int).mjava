		public CategorizedProblem createProblem(
			char[] originatingFileName,
			int problemId,
			String[] problemArguments,
			String[] messageArguments,
			int severity,
			int start,
			int end,
			int lineNumber,
			int columnNumber) {
			
			CategorizedProblem pb = super.createProblem(
				originatingFileName,
				problemId,
				problemArguments,
				messageArguments,
				severity,
				start,
				end,
				lineNumber,
				columnNumber);
			int id = pb.getID();
			if (CompletionEngine.this.actualCompletionPosition > start
				&& this.lastErrorStart < start
				&& pb.isError()
				&& (id & IProblem.Syntax) == 0
				&& (CompletionEngine.this.fileName == null || CharOperation.equals(CompletionEngine.this.fileName, originatingFileName))) {
					
				CompletionEngine.this.problem = pb;
				this.lastErrorStart = start;
			}
			if (this.checkProblems && !this.hasProblems) {
				if (id == IProblem.UsingDeprecatedType) {
					this.hasProblems =
						CompletionEngine.this.options.checkDeprecation;
				} else if (id == IProblem.NotVisibleType) {
					this.hasProblems =
						CompletionEngine.this.options.checkVisibility;
				} else if (id == IProblem.ForbiddenReference) {
					this.hasProblems =
						CompletionEngine.this.options.checkForbiddenReference;
				} else if (id == IProblem.DiscouragedReference) {
					this.hasProblems =
						CompletionEngine.this.options.checkDiscouragedReference;
				} else {
					this.hasProblems = true;
				}
			}
			
			return pb;
		}

