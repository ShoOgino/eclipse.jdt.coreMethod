	public TypeBinding resolveType(BlockScope scope) {
		super.resolveType(scope);
	
		if (binding == null) {
			throw new SelectionNodeFound();
		}
		
		// tolerate some error cases
		if (!binding.isValidBinding()) {
			switch (binding.problemId()) {
				case ProblemReasons.NotVisible:
					// visibility is ignored
					break;
				case ProblemReasons.NotFound:
					if (resolvedType != null && resolvedType.isValidBinding()) {
						throw new SelectionNodeFound(resolvedType);
					}
					throw new SelectionNodeFound();
				default:
					throw new SelectionNodeFound();
			}
		}
		
		if (anonymousType == null)
			throw new SelectionNodeFound(binding);
	
		// if selecting a type for an anonymous type creation, we have to
		// find its target super constructor (if extending a class) or its target 
		// super interface (if extending an interface)
		if (anonymousType.binding != null) {
			LocalTypeBinding localType = (LocalTypeBinding) anonymousType.binding;
			if (localType.superInterfaces == Binding.NO_SUPERINTERFACES) {
				// find the constructor binding inside the super constructor call
				ConstructorDeclaration constructor = (ConstructorDeclaration) anonymousType.declarationOf(binding.original());
				if (constructor != null) {
					throw new SelectionNodeFound(constructor.constructorCall.binding);
				}
				throw new SelectionNodeFound(binding);
			}
			// open on the only super interface
			throw new SelectionNodeFound(localType.superInterfaces[0]);
		} else {
			if (this.resolvedType.isInterface()) {
				throw new SelectionNodeFound(resolvedType);
			}
			throw new SelectionNodeFound(binding);
		}
	}

