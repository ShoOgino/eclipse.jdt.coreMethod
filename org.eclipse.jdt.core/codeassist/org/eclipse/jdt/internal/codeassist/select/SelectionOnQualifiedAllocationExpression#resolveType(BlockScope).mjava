	public TypeBinding resolveType(BlockScope scope) {
		super.resolveType(scope);

		if (this.binding == null) {
			throw new SelectionNodeFound();
		}

		// tolerate some error cases
		if (!this.binding.isValidBinding()) {
			switch (this.binding.problemId()) {
				case ProblemReasons.NotVisible:
					// visibility is ignored
					break;
				case ProblemReasons.NotFound:
					if (this.resolvedType != null && this.resolvedType.isValidBinding()) {
						throw new SelectionNodeFound(this.resolvedType);
					}
					throw new SelectionNodeFound();
				default:
					throw new SelectionNodeFound();
			}
		}

		if (this.anonymousType == null)
			throw new SelectionNodeFound(this.binding);

		// if selecting a type for an anonymous type creation, we have to
		// find its target super constructor (if extending a class) or its target
		// super interface (if extending an interface)
		if (this.anonymousType.binding != null) {
			LocalTypeBinding localType = (LocalTypeBinding) this.anonymousType.binding;
			if (localType.superInterfaces == Binding.NO_SUPERINTERFACES) {
				// find the constructor binding inside the super constructor call
				ConstructorDeclaration constructor = (ConstructorDeclaration) this.anonymousType.declarationOf(this.binding.original());
				if (constructor != null) {
					throw new SelectionNodeFound(constructor.constructorCall.binding);
				}
				throw new SelectionNodeFound(this.binding);
			}
			// open on the only super interface
			throw new SelectionNodeFound(localType.superInterfaces[0]);
		} else {
			if (this.resolvedType.isInterface()) {
				throw new SelectionNodeFound(this.resolvedType);
			}
			throw new SelectionNodeFound(this.binding);
		}
	}

