	private void findTypesAndPackages(char[] token, Scope scope) {

		if (token == null)
			return;

		if (scope.enclosingSourceType() != null)
			findNestedTypes(token, scope.enclosingSourceType(), scope);

		if (unitScope != null) {
			int typeLength = token.length;
			SourceTypeBinding[] types = unitScope.topLevelTypes;

			for (int i = 0, length = types.length; i < length; i++) {
				SourceTypeBinding sourceType = types[i];

				if (typeLength > sourceType.sourceName.length)
					continue;

				if (!CharOperation.prefixEquals(token, sourceType.sourceName, false
					/* ignore case */
					))
					continue;

				requestor.acceptType(
					sourceType.qualifiedPackageName(),
					sourceType.sourceName(),
					sourceType.sourceName(),
					startPosition,
					endPosition);
			}
		}

		if (token.length == 0)
			return;

		findKeywords(token, baseTypes, scope);
		nameEnvironment.findTypes(token, this);
		nameEnvironment.findPackages(token, this);
	}

