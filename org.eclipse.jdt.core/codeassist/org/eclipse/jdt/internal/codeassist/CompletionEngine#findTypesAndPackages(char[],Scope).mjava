	private void findTypesAndPackages(char[] token, Scope scope) {

		if (token == null)
			return;

		if (scope.enclosingSourceType() != null)
			findNestedTypes(token, scope.enclosingSourceType(), scope);

		if (unitScope != null) {
			int typeLength = token.length;
			SourceTypeBinding[] types = unitScope.topLevelTypes;

			for (int i = 0, length = types.length; i < length; i++) {
				SourceTypeBinding sourceType = types[i]; 

				if (typeLength > sourceType.sourceName.length)	continue;
				
				if (!CharOperation.prefixEquals(token, sourceType.sourceName, false))	continue;

				int relevance = R_DEFAULT;
				relevance += computeRelevanceForCaseMatching(token, sourceType.sourceName);
				relevance += computeRelevanceForExpectingType(sourceType);

				if (sourceType.isClass()){
					relevance += computeRelevanceForClass();
					requestor.acceptClass(
						sourceType.qualifiedPackageName(),
						sourceType.sourceName(),
						sourceType.sourceName(),
						sourceType.modifiers,
						startPosition - offset, 
						endPosition - offset,
						relevance);
				} else {
					relevance += computeRelevanceForInterface();
					requestor.acceptInterface(
						sourceType.qualifiedPackageName(),
						sourceType.sourceName(),
						sourceType.sourceName(),
						sourceType.modifiers,
						startPosition - offset,
						endPosition - offset,
						relevance);
				}
			}
		}
		
		if (token.length == 0) {
			if(expectedTypesPtr > -1) {
				for (int i = 0; i <= expectedTypesPtr; i++) {
					if(expectedTypes[i] instanceof ReferenceBinding) {
						ReferenceBinding refBinding = (ReferenceBinding)expectedTypes[i];
						boolean inSameUnit = unitScope.isDefinedInSameUnit(refBinding);
						
						// top level types of the current unit are already proposed.
						if(!inSameUnit || (inSameUnit && refBinding.isMemberType())) {
							int relevance = R_DEFAULT + R_CASE + R_EXPECTED_TYPE;
							if(refBinding.isClass()) {
								relevance += computeRelevanceForClass();
								requestor.acceptClass(
									refBinding.qualifiedPackageName(),
									refBinding.sourceName(),
									refBinding.sourceName(),
									refBinding.modifiers,
									startPosition - offset, 
									endPosition - offset,
									relevance);
							} else if (refBinding.isInterface()) {
								relevance += computeRelevanceForInterface();
								requestor.acceptInterface(
									refBinding.qualifiedPackageName(),
									refBinding.sourceName(),
									refBinding.sourceName(),
									refBinding.modifiers,
									startPosition - offset, 
									endPosition - offset,
									relevance);
							}
						}
					}
				}
			} 
		} else {
			findKeywords(token, baseTypes, scope);
			nameEnvironment.findTypes(token, this);
			nameEnvironment.findPackages(token, this);
		}
	}

