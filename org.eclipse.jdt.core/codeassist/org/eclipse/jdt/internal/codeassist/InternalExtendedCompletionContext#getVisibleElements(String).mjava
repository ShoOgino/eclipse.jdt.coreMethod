	public IJavaElement[] getVisibleElements(String typeSignature) {
		if (this.assistScope == null) return new IJavaElement[0];
		
		if (!this.hasComputedVisibleElementBindings) {
			this.computeVisibleElementBindings();
		}
		
		TypeBinding assignableTypeBinding = null;
		if (typeSignature != null) {
			assignableTypeBinding = this.getTypeFromSignature(typeSignature, this.assistScope);
			if (assignableTypeBinding == null) return new IJavaElement[0];
		}
		 
		int length = visibleLocalVariables.size() + visibleFields.size() + visibleMethods.size();
		if (length == 0) return new IJavaElement[0];
		
		IJavaElement[] result = new IJavaElement[length];
		
		int elementCount = 0;
		
		int size = visibleLocalVariables.size();
		if (size > 0) {
			next : for (int i = 0; i < size; i++) {
				LocalVariableBinding binding = (LocalVariableBinding) visibleLocalVariables.elementAt(i);
				if (assignableTypeBinding != null && !binding.type.isCompatibleWith(assignableTypeBinding)) continue next;
				JavaElement localVariable = getJavaElement(binding);
				if (localVariable != null) result[elementCount++] = localVariable;
			}
		
		}
		size = visibleFields.size();
		if (size > 0) {
			next : for (int i = 0; i < size; i++) {
				FieldBinding binding = (FieldBinding) visibleFields.elementAt(i);
				if (assignableTypeBinding != null && !binding.type.isCompatibleWith(assignableTypeBinding)) continue next;
				if (this.assistScope.isDefinedInSameUnit(binding.declaringClass)) {
					JavaElement field = getJavaElementOfCompilationUnit(binding);
					if (field != null) result[elementCount++] = field;
				} else {
					JavaElement field = Util.getUnresolvedJavaElement(binding, owner, EmptyNodeMap);
					if (field != null) result[elementCount++] = field.resolved(binding);
				}
			}
		
		}
		size = visibleMethods.size();
		if (size > 0) {
			next : for (int i = 0; i < size; i++) {
				MethodBinding binding = (MethodBinding) visibleMethods.elementAt(i);
				if (assignableTypeBinding != null && !binding.returnType.isCompatibleWith(assignableTypeBinding)) continue next;
				if (this.assistScope.isDefinedInSameUnit(binding.declaringClass)) {
					JavaElement method = getJavaElementOfCompilationUnit(binding);
					if (method != null) result[elementCount++] = method;
				} else {
					JavaElement method = Util.getUnresolvedJavaElement(binding, owner, EmptyNodeMap);
					if (method != null) result[elementCount++] = method.resolved(binding);
				}
				
			}
		}
		
		if (elementCount != result.length) {
			System.arraycopy(result, 0, result = new IJavaElement[elementCount], 0, elementCount);
		}

		return result;
	}

