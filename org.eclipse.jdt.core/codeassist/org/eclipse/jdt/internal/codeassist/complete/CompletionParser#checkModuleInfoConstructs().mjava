private boolean checkModuleInfoConstructs() {
	
	if (!(this.currentElement instanceof RecoveredUnit)) return false;

	int index = -1;
	RecoveredUnit unit = (RecoveredUnit) this.currentElement;
	if ((index = this.indexOfAssistIdentifier()) > -1) {
		int length = this.identifierLengthStack[this.identifierLengthPtr];
		int ptr = this.identifierPtr - length + index + 1;
		
		char[] ident = this.identifierStack[ptr];
		long pos = this.identifierPositionStack[ptr];
		
		char[][] keywords = new char[Keywords.COUNT][];
		
		int count = 0;
		if (this.bracketDepth <= 0 && this.compilationUnit.moduleDeclaration == null) {
			keywords[count++] = Keywords.MODULE;
			System.arraycopy(keywords, 0, keywords = new char[count][], 0, count); //Need not do this copy; but for the sake of generality
			ModuleDeclaration moduleDecl = new CompletionOnKeywordModuleDeclaration(ident, pos, keywords);
			unit.add(moduleDecl, 0);
			return true;
		} else if (unit.module != null) { //inside the module-info declaration itself
			RecoveredModule module = unit.module;
			this.currentElement = module;
			switch (this.moduleStatementId) {
				case SINGLE_EXPORTS:
					module.add(new CompletionOnExportReference(ident, pos), 0);
					return true;
				case SINGLE_EXPORTS_TARGET:
					if (module.exportCount > 0) {
						module.exports[module.exportCount - 1].add(new CompletionOnModuleReference(ident, pos), 0);
						return true;
					}
					break;
				case REQUIRES_STATEMENT:
//					module.add(new CompletionOnModuleReference(ident, pos), 0);
//					return true;
					break;
				case USES_STATEMENT:
					formCompletionOnUsesTypeRef(index, length, module);
					return true;
				case PROVIDES_STATEMENT:
					formCompletionOnProvidesInterfacesTypeRef(index, length, module);
					return true;
				case PROVIDES_STATEMENT_WITH:
					formCompletionOnProvidesImplementationsTypeRef(index, length, module);
					return true;
				case DEFAULT_MI_STATEMENT:
					keywords[count++] = Keywords.EXPORTS;
					keywords[count++] = Keywords.REQUIRES;
					keywords[count++] = Keywords.PROVIDES;
					keywords[count++] = Keywords.USES;
					System.arraycopy(keywords, 0, keywords = new char[count][], 0, count);
					module.add(new CompletionOnKeywordModuleInfo(ident, pos, keywords), 0);
					return true;
				default:
					break;
			}
		}
	}
	return false;
}

