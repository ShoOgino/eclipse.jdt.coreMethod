	/*
	 * Get possible tags for a given prefix.
	 */
	private char[][][] possibleTags(char[] prefix, boolean lnStarted) {
		char[][][] possibleTags = new char[2][][];
		if (lnStarted) {
			possibleTags[BLOCK_IDX] = new char[0][];
		} else {
			System.arraycopy(this.levelTags[BLOCK_IDX], 0, possibleTags[BLOCK_IDX] = new char[this.levelTagsLength[BLOCK_IDX]][], 0, this.levelTagsLength[BLOCK_IDX]);
		}
		System.arraycopy(this.levelTags[INLINE_IDX], 0, possibleTags[INLINE_IDX] = new char[this.levelTagsLength[INLINE_IDX]][], 0, this.levelTagsLength[INLINE_IDX]);
		if (prefix == null) return possibleTags;
		if (possibleTags != null) {
			int kinds = levelTags.length;
			for (int k=0; k<kinds; k++) {
				int length = possibleTags[k].length, size = 0;
				int indexes[] = new int[length];
				for (int i=0; i<length; i++) {
					if (CharOperation.prefixEquals(prefix, possibleTags[k][i])) {
						indexes[size++] = i;
					}
				}
				char[][] tags = new char[size][];
				for (int i=0; i<size; i++) {
					tags[i] = possibleTags[k][indexes[i]];
				}
				possibleTags[k] = tags;
			}
			return possibleTags;
		}
		return null;
	}

