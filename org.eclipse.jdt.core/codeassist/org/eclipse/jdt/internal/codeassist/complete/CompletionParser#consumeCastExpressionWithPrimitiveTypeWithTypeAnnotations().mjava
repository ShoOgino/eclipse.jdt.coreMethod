protected void consumeCastExpressionWithPrimitiveTypeWithTypeAnnotations() {
	popElement(K_CAST_STATEMENT);

	Expression expression = this.expressionStack[this.expressionPtr--];
	this.expressionLengthPtr--;
	TypeReference typeReference = (TypeReference) this.expressionStack[this.expressionPtr--];
	this.expressionLengthPtr--;
	int length;
	if ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {
		System.arraycopy(
				this.expressionStack,
				(this.expressionPtr -= length) + 1,
				typeReference.annotations = new Annotation[length],
				0,
				length);
		int typeReferenceSourceStart = typeReference.annotations[0].sourceStart;
		if (this.modifiersSourceStart < typeReferenceSourceStart) {
			typeReferenceSourceStart = this.modifiersSourceStart;
		}
		typeReference.sourceStart = typeReferenceSourceStart;
	}

	Expression cast;
	pushOnExpressionStack(cast = new CastExpression(expression, typeReference));
	cast.sourceStart = typeReference.sourceStart - 1;
	cast.sourceEnd = expression.sourceEnd;
}

