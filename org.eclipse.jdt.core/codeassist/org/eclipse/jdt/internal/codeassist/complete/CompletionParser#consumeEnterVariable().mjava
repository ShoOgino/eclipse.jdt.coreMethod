protected void consumeEnterVariable() {
	identifierPtr--;
	identifierLengthPtr--;

	boolean isLocalDeclaration = nestedMethod[nestedType] != 0;
	int variableIndex = variablesCounter[nestedType];
	int extendedDimension = intStack[intPtr + 1];
	
	if(isLocalDeclaration || indexOfAssistIdentifier() < 0 || variableIndex != 0 || extendedDimension != 0) {
		identifierPtr++;
		identifierLengthPtr++;
		super.consumeEnterVariable();
	} else {
		restartRecovery = true;
		
//		private boolean checkKeyword() {
//			if (currentElement instanceof RecoveredUnit) {
//				RecoveredUnit unit = (RecoveredUnit) currentElement;
//				int index = -1;
//				if ((index = this.indexOfAssistIdentifier()) > -1) {
//					if(unit.typeCount == 0
//						&& CharOperation.prefixEquals(identifierStack[index], Keywords.IMPORT)) {
//						CompletionOnKeyword2 completionOnImportKeyword = new CompletionOnKeyword2(Keywords.IMPORT, identifierPositionStack[index]);
//						this.assistNode = completionOnImportKeyword;
//						this.lastCheckPoint = completionOnImportKeyword.sourceEnd + 1;
//						this.isOrphanCompletionNode = true;
//						return true;
//					} else if(unit.typeCount == 0
//						&& unit.importCount == 0
//						&& CharOperation.prefixEquals(identifierStack[index], Keywords.PACKAGE)) {
//						CompletionOnKeyword2 completionOnImportKeyword = new CompletionOnKeyword2(Keywords.PACKAGE, identifierPositionStack[index]);
//						this.assistNode = completionOnImportKeyword;
//						this.lastCheckPoint = completionOnImportKeyword.sourceEnd + 1;
//						this.isOrphanCompletionNode = true;
//						return true;
//					}
//				}
//			}
//			return false;
//		}
		
		// recovery
		if (currentElement != null) {
			if(!checkKeyword() && !(currentElement instanceof RecoveredUnit && ((RecoveredUnit)currentElement).typeCount == 0)) {
				int nameSourceStart = (int)(identifierPositionStack[identifierPtr] >>> 32);
				intPtr--;
				
				TypeReference type = getTypeReference(intStack[intPtr--]);
				intPtr--;
				
				if (!(currentElement instanceof RecoveredType)
					&& (currentToken == TokenNameDOT
						|| (scanner.getLineNumber(type.sourceStart)
								!= scanner.getLineNumber(nameSourceStart)))){
					lastCheckPoint = nameSourceStart;
					restartRecovery = true;
					return;
				}
				
				FieldDeclaration completionFieldDecl = new CompletionOnFieldType(type, false);
				completionFieldDecl.modifiers = intStack[intPtr--];
				assistNode = completionFieldDecl;
				lastCheckPoint = type.sourceEnd + 1;
				currentElement = currentElement.add(completionFieldDecl, 0);
				lastIgnoredToken = -1;
			}
		}
	}
}

