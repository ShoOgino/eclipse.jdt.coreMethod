	/*
	 * Look for missing type parameters @param tags
	 */
	private char[][] missingTypeParameterTags(Binding paramNameRefBinding, Scope scope) {
		int paramTypeParamLength = this.paramTypeParameters == null ? 0 : this.paramTypeParameters.length;

		// Verify if there's any type parameter to tag
		TypeDeclaration typeDeclaration = null;
		AbstractMethodDeclaration methodDeclaration = null;
		TypeVariableBinding[] typeVariables = null;
		switch (scope.kind) {
			case Scope.METHOD_SCOPE:
				methodDeclaration = ((MethodScope)scope).referenceMethod();
				if (methodDeclaration == null) return null;
				typeVariables = methodDeclaration.binding.typeVariables;
				break;
			case Scope.CLASS_SCOPE:
				typeDeclaration = ((ClassScope) scope).referenceContext;
				typeVariables = typeDeclaration.binding.typeVariables;
				break;
		}
		if (typeVariables == null || typeVariables.length == 0) return null;
		
		// Store all type parameters if there's no @param in javadoc
		TypeParameter[] parameters = typeDeclaration==null ? methodDeclaration.typeParameters() : typeDeclaration.typeParameters;
		int typeParametersLength = parameters == null ? 0 : parameters.length;
		if (paramTypeParamLength == 0) {
			char[][] missingParams = new char[typeParametersLength][];
			for (int i = 0; i < typeParametersLength; i++) {
				missingParams[i] = parameters[i].name;
			}
			return missingParams;
		}

		// Look for missing type parameter
		char[][] missingParams = new char[typeParametersLength][];
		int size = 0;
		for (int i = 0; i < typeParametersLength; i++) {
			TypeParameter parameter = parameters[i];
			boolean found = false;
			int paramNameRefCount = 0;
			for (int j = 0; j < paramTypeParamLength && !found; j++) {
				if (parameter.binding == this.paramTypeParameters[j].resolvedType) {
					if (parameter.binding == paramNameRefBinding) { // do not count first occurence of param nmae reference
						paramNameRefCount++;
						found = paramNameRefCount > 1;
					} else {
						found = true;
					}
				}
			}
			if (!found) {
				missingParams[size++] = parameter.name;
			}
		}
		if (size > 0) {
			if (size != typeParametersLength) {
				System.arraycopy(missingParams, 0, missingParams = new char[size][], 0, size);
			}
			return missingParams;
		}
		return null;
	}

