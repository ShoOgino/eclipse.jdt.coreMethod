private Statement buildMoreCompletionEnclosingContext(Statement statement) {

	int blockIndex = lastIndexOfElement(K_BLOCK_DELIMITER);
	int controlIndex = lastIndexOfElement(K_CONTROL_STATEMENT_DELIMITER);
	int index;
	if (controlIndex != -1) {
		index = blockIndex != -1 && controlIndex < blockIndex ? blockIndex : controlIndex;
	} else {
		// To handle the case when the completion is requested before enclosing R_PAREN
		// and an instanceof expression is also present
		// https://bugs.eclipse.org/bugs/show_bug.cgi?id=261534
		int instanceOfIndex = lastIndexOfElement(K_BETWEEN_INSTANCEOF_AND_RPAREN);
		index = blockIndex != -1 && instanceOfIndex < blockIndex ? blockIndex : instanceOfIndex;
	}
	if (index != -1 && this.elementInfoStack[index] == IF && this.elementObjectInfoStack[index] != null) {
		Expression condition = (Expression)this.elementObjectInfoStack[index];

		// If currentElement is a RecoveredLocalVariable then it can be contained in the if statement
		if (this.currentElement instanceof RecoveredLocalVariable &&
				this.currentElement.parent instanceof RecoveredBlock) {
			RecoveredLocalVariable recoveredLocalVariable = (RecoveredLocalVariable) this.currentElement;
			if (recoveredLocalVariable.localDeclaration.initialization == null &&
					statement instanceof Expression &&
					condition.sourceStart < recoveredLocalVariable.localDeclaration.sourceStart) {
				this.currentElement.add(statement, 0);

				statement = recoveredLocalVariable.updatedStatement(0, new HashSet());

				// RecoveredLocalVariable must be removed from its parent because the IfStatement will be added instead
				RecoveredBlock recoveredBlock =  (RecoveredBlock) recoveredLocalVariable.parent;
				recoveredBlock.statements[--recoveredBlock.statementCount] = null;

				this.currentElement = recoveredBlock;

			}
		}
		if (statement instanceof AND_AND_Expression && this.assistNode instanceof Statement) {
			statement = (Statement) this.assistNode;
		}
		IfStatement ifStatement =
			new IfStatement(
					condition,
					statement,
					condition.sourceStart,
					statement.sourceEnd);
		this.enclosingNode = ifStatement;
		return ifStatement;
	}

	return statement;
}

