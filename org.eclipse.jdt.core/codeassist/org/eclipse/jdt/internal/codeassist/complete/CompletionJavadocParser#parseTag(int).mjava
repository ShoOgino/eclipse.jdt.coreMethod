	/*(non-Javadoc)
	 * @see org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#parseTag(int)
	 */
	protected boolean parseTag(int previousPosition) throws InvalidInputException {
		char current = peekChar();
		int startPosition = this.inlineTagStarted ? this.inlineTagStart : previousPosition;
		switch (current) {
			case '*' :
			case '\u000c' :
			case ' ' :
			case '\t' :
			case '\r' :
			case '\n' :
				int end = this.index - 1;
				if (startPosition <= this.cursorLocation && this.cursorLocation <= end) {
					// completion on empty '@' => all tags
					long position = (((long)end)<<32) + end;
					char[][][] tags = possibleTags(null, this.lineStarted);
					if (tags != null) {
						this.completionNode = new CompletionOnJavadocTag(null, position, startPosition, end, tags);
					}
				}
				break;
			default:
				boolean ls = this.lineStarted;
				readTokenSafely();
				end = this.index - 1;
				if (startPosition <= this.cursorLocation && this.cursorLocation <= end) {
					if (this.inlineTagStarted && this.scanner.currentCharacter == '}') {
						end = this.scanner.currentPosition;
					}
					long position = (((long)this.scanner.getCurrentTokenStartPosition())<<32) + end;
					char[] prefix = this.scanner.getCurrentIdentifierSource();
					char[][][] tags = possibleTags(prefix, ls);
					if (tags != null) {
						this.completionNode = new CompletionOnJavadocTag(prefix, position, startPosition, end, tags);
					}
				}
				break;
		}
		return super.parseTag(previousPosition);
	}

