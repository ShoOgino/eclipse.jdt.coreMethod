/**
 * Return whether the given ast node contains the completion node.
 */
private boolean containsCompletionNode(AstNode ast) {
	if (this.assistNode == null || ast instanceof Literal) {
		return false;
	}
	if (this.assistNode == ast) {
		return true;
	}
	if (ast instanceof Reference || ast instanceof TypeReference) {
		return ast == this.assistNode;
	}
	if (ast instanceof Assignment) {
		Assignment assign = (Assignment)ast;
		return containsCompletionNode(assign.lhs) || containsCompletionNode(assign.expression);
	}
	if (ast instanceof UnaryExpression) {
		UnaryExpression unary = (UnaryExpression)ast;
		return containsCompletionNode(unary.expression);
	}
	if (ast instanceof BinaryExpression) {
		BinaryExpression binary = (BinaryExpression)ast;
		return containsCompletionNode(binary.left) || containsCompletionNode(binary.right);
	}
	if (ast instanceof InstanceOfExpression) {
		InstanceOfExpression instanceOfExpr = (InstanceOfExpression)ast;
		return containsCompletionNode(instanceOfExpr.expression) || containsCompletionNode(instanceOfExpr.type);
	}
	if (ast instanceof ConditionalExpression) {
		ConditionalExpression conditional = (ConditionalExpression)ast;
		return containsCompletionNode(conditional.condition) || containsCompletionNode(conditional.valueIfTrue) || containsCompletionNode(conditional.valueIfFalse);
	}
	if (ast instanceof AllocationExpression) {
		AllocationExpression alloc = (AllocationExpression)ast;
		return containsCompletionNode(alloc.type);
	}
	if (ast instanceof CastExpression) {
		CastExpression cast = (CastExpression)ast;
		return containsCompletionNode(cast.expression) || containsCompletionNode(cast.type);
	}
	if (ast instanceof ExplicitConstructorCall) {
		ExplicitConstructorCall call = (ExplicitConstructorCall)ast;
		Expression[] arguments = call.arguments;
		if (arguments != null) {
			for (int i = 0; i < arguments.length; i++) {
				if (containsCompletionNode(arguments[i])) {
					return true;
				}
			}
			return false;
		}
	}
	return false;
}

