/* 
 * Check whether about to shift beyond the completion token.
 * If so, depending on the context, a special node might need to be created
 * and attached to the existing recovered structure so as to be remember in the
 * resulting parsed structure.
 */
public void completionIdentifierCheck(){
	//if (assistNode != null) return; 

	if (checkKeyword()) return;
	if (checkRecoveredType()) return;
	if (checkRecoveredMethod()) return;

	// if not in a method in non diet mode and if not inside a field initializer, only record references attached to types
	if (!(isInsideMethod() && !this.diet)
		&& !isIndirectlyInsideFieldInitialization()) return; 

	/*
	 	In some cases, the completion identifier may not have yet been consumed,
	 	e.g.  int.[cursor]
	 	This is because the grammar does not allow any (empty) identifier to follow
	 	a base type. We thus have to manually force the identifier to be consumed
	 	(that is, pushed).
	 */
	if (assistIdentifier() == null && this.currentToken == TokenNameIdentifier) { // Test below copied from CompletionScanner.getCurrentIdentifierSource()
		if (cursorLocation < this.scanner.startPosition && this.scanner.currentPosition == this.scanner.startPosition){ // fake empty identifier got issued
			this.pushIdentifier();					
		} else if (cursorLocation+1 >= this.scanner.startPosition && cursorLocation < this.scanner.currentPosition){
			this.pushIdentifier();
		}
	}

	// check for different scenarii
	try {
		// no need to go further if we found a non empty completion node
		// (we still need to store labels though)
		if (this.assistNode != null) {
			// however inside an invocation, the completion identifier may already have been consumed into an empty name 
			// completion, so this check should be before we check that we are at the cursor location
			if (!isEmptyNameCompletion() || checkInvocation()) return;
		}

		// no need to check further if we are not at the cursor location
		if (this.indexOfAssistIdentifier() < 0) return;

		if (checkClassInstanceCreation()) return;
		if (checkCatchClause()) return;
		if (checkMemberAccess()) return;
		if (checkClassLiteralAccess()) return;
		if (checkInstanceofKeyword()) return;
		
		// if the completion was not on an empty name, it can still be inside an invocation (eg. this.fred("abc"[cursor])
		// (NB: Put this check before checkNameCompletion() because the selector of the invocation can be on the identifier stack)
		if (checkInvocation()) return;

		if (checkNameCompletion()) return;
	} finally {
	}
}

