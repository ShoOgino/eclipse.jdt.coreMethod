private boolean checkKeyword() {
	if (currentElement instanceof RecoveredUnit) {
		RecoveredUnit unit = (RecoveredUnit) currentElement;
		int index = -1;
		if ((index = this.indexOfAssistIdentifier()) > -1) {
			char[] ident = identifierStack[index];
			long pos = identifierPositionStack[index];
			
			char[][] keywords = new char[Keywords.COUNT][];
			int count = 0;
			if(unit.typeCount == 0
				&& lastModifiers == AccDefault
				&& CharOperation.prefixEquals(identifierStack[index], Keywords.IMPORT)) {
				keywords[count++] = Keywords.IMPORT;
			}
			if(unit.typeCount == 0
				&& unit.importCount == 0
				&& lastModifiers == AccDefault
				&& compilationUnit.currentPackage == null
				&& CharOperation.prefixEquals(identifierStack[index], Keywords.PACKAGE)) {
				keywords[count++] = Keywords.PACKAGE;
			}
			if((lastModifiers & AccPublic) == 0
				&& CharOperation.prefixEquals(identifierStack[index], Keywords.PUBLIC)) {
				boolean hasNoPublicType = true;
				for (int i = 0; i < unit.typeCount; i++) {
					if((unit.types[i].typeDeclaration.modifiers & AccPublic) != 0) {
						hasNoPublicType = false;
					}
				}
				if(hasNoPublicType) {
					keywords[count++] = Keywords.PUBLIC;
				}
			}
			if((lastModifiers & AccAbstract) == 0
				&& (lastModifiers & AccFinal) == 0
				&& CharOperation.prefixEquals(identifierStack[index], Keywords.ABSTARCT)) {
				keywords[count++] = Keywords.ABSTARCT;
			}
			if((lastModifiers & AccAbstract) == 0
				&& (lastModifiers & AccFinal) == 0
				&& CharOperation.prefixEquals(identifierStack[index], Keywords.FINAL)) {
				keywords[count++] = Keywords.FINAL;
			}
			if(CharOperation.prefixEquals(identifierStack[index], Keywords.CLASS)) {
				keywords[count++] = Keywords.CLASS;
			}
			if((lastModifiers & AccFinal) == 0
				&& CharOperation.prefixEquals(identifierStack[index], Keywords.INTERFACE)) {
				keywords[count++] = Keywords.INTERFACE;
			}
			if(count != 0) {
				System.arraycopy(keywords, 0, keywords = new char[count][], 0, count);
				
				this.assistNode = new CompletionOnKeyword2(ident, pos, keywords);
				this.lastCheckPoint = assistNode.sourceEnd + 1;
				this.isOrphanCompletionNode = true;
				return true;
			}
		}
	}
	return false;
}

