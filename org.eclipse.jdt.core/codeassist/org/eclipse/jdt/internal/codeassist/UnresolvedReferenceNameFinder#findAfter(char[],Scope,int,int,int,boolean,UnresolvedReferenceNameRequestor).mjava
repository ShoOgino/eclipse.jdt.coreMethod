	private MethodDeclaration findAfter(
			char[] startWith,
			Scope s,
			int from,
			int to,
			int maxLineCount,
			boolean outsideEnclosingBlock,
			UnresolvedReferenceNameRequestor nameRequestor) {
		this.requestor = nameRequestor;
		
		// reinitialize completion scanner to be usable as a normal scanner
		this.completionScanner.cursorLocation = 0;
		
		// reinitialize completionIdentifier
		this.completionScanner.prefix = startWith;
		
		if (!outsideEnclosingBlock) {
			// compute location of the end of the current block
			this.completionScanner.resetTo(from + 1, to);
			this.completionScanner.jumpOverBlock();
			
			to = this.completionScanner.startPosition - 1;
		}
		
		int maxEnd =
			this.completionScanner.getLineEnd(
					this.completionScanner.getLineNumber(from) + maxLineCount);
		
		int end;
		if (maxEnd < 0) {
			end = to;
		} else {
			end = maxEnd < to ? maxEnd : to;
		}
		
		this.completionScanner.startRecordingIdentifiers();
		
		MethodDeclaration fakeMethod = this.parser.parseSomeStatements(
				from,
				end,
				outsideEnclosingBlock ? FAKE_BLOCKS_COUNT : 0,
				s.compilationUnitScope().referenceContext);
		
		this.completionScanner.stopRecordingIdentifiers();
		
		if(!this.initPotentialNamesTables()) return null;
		
		this.parentsPtr = -1;
		this.parents = new ASTNode[10];
		
		return fakeMethod;
	}

