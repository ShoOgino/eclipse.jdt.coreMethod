protected void consumeToken(int token) {
	super.consumeToken(token);
	// register message send selector only if inside a method or if looking at a field initializer 
	// and if the current token is an open parenthesis
	if ((this.inMethodStack[this.inMethodPtr] || this.inFieldInitializationStack[this.inFieldInitializationPtr]) && token == TokenNameLPAREN) {
		switch (this.previousToken) {
			case TokenNameIdentifier:
				this.pushOnSelectorStack(this.identifierPtr);
				break;
			case TokenNamethis: // explicit constructor invocation, eg. this(1, 2)
				this.pushOnSelectorStack(THIS_CONSTRUCTOR);
				break;
			case TokenNamesuper: // explicit constructor invocation, eg. super(1, 2)
				this.pushOnSelectorStack(SUPER_CONSTRUCTOR);
				break;
		}
	}
	this.previousToken = token;
	if (token == TokenNameIdentifier) {
		this.previousIdentifierPtr = this.identifierPtr;
	}
}

