	private void parseMethod(
		TypeDeclaration type,
		CompilationUnitDeclaration unit,
		int position) {
		//members
		TypeDeclaration[] memberTypes = type.memberTypes;
		if (memberTypes != null) {
			for (int i = memberTypes.length; --i >= 0;) {
				TypeDeclaration memberType = memberTypes[i];
				if (memberType.bodyStart > position)
					continue;
				if (memberType.declarationSourceEnd >= position) {
					parseMethod(memberType, unit, position);
					return;
				}
			}
		}
		//methods
		AbstractMethodDeclaration[] methods = type.methods;
		if (methods != null) {
			for (int i = methods.length; --i >= 0;) {
				AbstractMethodDeclaration method = methods[i];
				if (method.bodyStart > position)
					continue;
				if (method.declarationSourceEnd >= position) {
					getParser().parseBlockStatements(method, unit);
					return;
				}
			}
		}
		//initializers
		FieldDeclaration[] fields = type.fields;
		if (fields != null) {
			for (int i = fields.length; --i >= 0;) {
				if (!(fields[i] instanceof Initializer))
					continue;
				Initializer initializer = (Initializer) fields[i];
				if (initializer.bodyStart > position)
					continue;
				if (initializer.declarationSourceEnd >= position) {
					getParser().parseBlockStatements(initializer, type, unit);
					return;
				}
			}
		}
	}

