protected void consumeSingleTargetModuleName() {
	int index;
	/* no need to take action if not inside assist identifiers */
	if ((index = indexOfAssistIdentifier()) < 0) {
		super.consumeSingleTargetModuleName();
		return;
	}

	/* build specific assist node on targetted exports statement */
	ModuleReference reference = createAssistModuleReference(index);
	this.assistNode = reference;
	this.lastCheckPoint = reference.sourceEnd + 1;
	pushOnAstStack(reference);

//	reference.declarationSourceEnd = reference.sourceEnd;
//	reference.declarationEnd = reference.declarationSourceEnd;
//	reference.declarationSourceStart = reference.sourceStart;
//	if (this.currentToken == TokenNameSEMICOLON){
//		impt.declarationSourceEnd = this.scanner.currentPosition - 1;
//	} else {
//	}
//	//this.endPosition is just before the ;
//	impt.declarationSourceStart = this.intStack[this.intPtr--];
	// recovery - TBD
	if (this.currentElement != null){
		// TODO
//		this.lastCheckPoint = reference.declarationSourceEnd+1;
//		this.currentElement = this.currentElement.add(reference, 0);
		this.lastIgnoredToken = -1;
		this.restartRecovery = true; // used to avoid branching back into the regular automaton
	}

}

