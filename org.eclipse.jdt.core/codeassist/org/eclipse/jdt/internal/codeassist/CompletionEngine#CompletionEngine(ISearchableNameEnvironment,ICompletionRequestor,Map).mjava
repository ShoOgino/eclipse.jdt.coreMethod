	/**
	 * The CompletionEngine is responsible for computing source completions.
	 *
	 * It requires a searchable name environment, which supports some
	 * specific search APIs, and a requestor to feed back the results to a UI.
	 *
	 *  @param environment com.ibm.codeassist.java.api.ISearchableNameEnvironment
	 *      used to resolve type/package references and search for types/packages
	 *      based on partial names.
	 *
	 *  @param requestor com.ibm.codeassist.java.api.ICompletionRequestor
	 *      since the engine might produce answers of various forms, the engine 
	 *      is associated with a requestor able to accept all possible completions.
	 *
	 *  @param options com.ibm.compiler.java.api.ConfigurableOptions
	 *		set of options used to configure the code assist engine.
	 */
	public CompletionEngine(
		ISearchableNameEnvironment nameEnvironment,
		ICompletionRequestor requestor,
		Map settings) {

		this.requestor = requestor;
		this.nameEnvironment = nameEnvironment;

		options = new AssistOptions(settings);
		CompilerOptions compilerOptions = new CompilerOptions(settings);
		ProblemReporter problemReporter =
			new ProblemReporter(
				DefaultErrorHandlingPolicies.proceedWithAllProblems(),
				compilerOptions,
				new DefaultProblemFactory(Locale.getDefault())) {
			public void record(IProblem problem, CompilationResult unitResult) {
				if (problem.getID() != ProblemIrritants.UnmatchedBracket) {
					unitResult.record(problem);
					
					if (true) return; // work-around PR 1GD9RLP: ITPJCORE:WIN2000 - Code assist is slow
					if (problem.isWarning()) return;
					try {
						IMarker marker = ResourcesPlugin.getWorkspace().getRoot().createMarker(IJavaModelMarker.TRANSIENT_PROBLEM);
						marker.setAttribute(IJavaModelMarker.ID, problem.getID());
						marker.setAttribute(IMarker.CHAR_START, problem.getSourceStart());
						marker.setAttribute(IMarker.CHAR_END, problem.getSourceEnd() + 1);
						marker.setAttribute(IMarker.LINE_NUMBER, problem.getSourceLineNumber());
						//marker.setAttribute(IMarker.LOCATION, "#" + error.getSourceLineNumber());
						marker.setAttribute(IMarker.MESSAGE, problem.getMessage());
						marker.setAttribute(IMarker.SEVERITY, IMarker.SEVERITY_ERROR);
				
						CompletionEngine.this.requestor.acceptError(marker);
				
					} catch(CoreException e){
					}
				}
			}
		};
		this.parser =
			new CompletionParser(problemReporter, compilerOptions.assertMode);
		this.lookupEnvironment =
			new LookupEnvironment(this, compilerOptions, problemReporter, nameEnvironment);
		this.identifierScanner =
			new Scanner(false, false, false, compilerOptions.assertMode);
	}

