	private void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration) {
		if(binding instanceof TypeVariableBinding) {
			TypeVariableBinding typeVariableBinding = (TypeVariableBinding) binding;
			Binding enclosingElement = typeVariableBinding.declaringElement;
			this.noProposal = false;
			
			if(enclosingElement instanceof SourceTypeBinding) {
				SourceTypeBinding enclosingType = (SourceTypeBinding) enclosingElement;
				this.requestor.acceptTypeParameter(
					enclosingType.qualifiedPackageName(),
					enclosingType.qualifiedSourceName(),
					typeVariableBinding.sourceName(),
					false,
					this.actualSelectionStart,
					this.actualSelectionEnd);
			} else if(enclosingElement instanceof MethodBinding) {
				MethodBinding enclosingMethod = (MethodBinding) enclosingElement;
				
				this.requestor.acceptMethodTypeParameter(
					enclosingMethod.declaringClass.qualifiedPackageName(),
					enclosingMethod.declaringClass.qualifiedSourceName(),
					enclosingMethod.selector,
					enclosingMethod.sourceStart(),
					enclosingMethod.sourceEnd(),
					typeVariableBinding.sourceName(),
					false,
					this.actualSelectionStart,
					this.actualSelectionEnd);
			}
			this.acceptedAnswer = true;
		} else if (binding instanceof ReferenceBinding) {
			ReferenceBinding typeBinding = (ReferenceBinding) binding;
			if (this.qualifiedSelection != null
				&& !CharOperation.equals(this.qualifiedSelection, typeBinding.readableName())) {
				return;
			}
			if (typeBinding.isInterface()) {
				this.noProposal = false;
				if (isLocal(typeBinding) && this.requestor instanceof SelectionRequestor) {
					((SelectionRequestor)this.requestor).acceptLocalType(
						(SourceTypeBinding)typeBinding,
						parsedUnit);
				} else {
					this.requestor.acceptInterface(
						typeBinding.qualifiedPackageName(),
						typeBinding.qualifiedSourceName(),
						false,
						false,
						this.actualSelectionStart,
						this.actualSelectionEnd);
				}
			} else if(typeBinding instanceof ProblemReferenceBinding){
				ReferenceBinding original = ((ProblemReferenceBinding) typeBinding).original;
				if(original == null) return;
				this.noProposal = false;
				if (isLocal(original) && this.requestor instanceof SelectionRequestor) {
					((SelectionRequestor)this.requestor).acceptLocalType(
						(SourceTypeBinding)original,
						parsedUnit);
				} else {
					this.requestor.acceptClass(
						original.qualifiedPackageName(),
						original.qualifiedSourceName(),
						false,
						false,
						this.actualSelectionStart,
						this.actualSelectionEnd);
				}
			} else {
				this.noProposal = false;
				if (isLocal(typeBinding) && this.requestor instanceof SelectionRequestor) {
					((SelectionRequestor)this.requestor).acceptLocalType(
						(SourceTypeBinding)typeBinding,
						parsedUnit);
				} else {
					this.requestor.acceptClass(
						typeBinding.qualifiedPackageName(),
						typeBinding.qualifiedSourceName(),
						false,
						false,
						this.actualSelectionStart,
						this.actualSelectionEnd);
				}
			}
			this.acceptedAnswer = true;
		} else
			if (binding instanceof MethodBinding) {
				MethodBinding methodBinding = (MethodBinding) binding;
				TypeBinding[] parameterTypes = methodBinding.original().parameters;
				int length = parameterTypes.length;
				char[][] parameterPackageNames = new char[length][];
				char[][] parameterTypeNames = new char[length][];
				String[] parameterSignatures = new String[length];
				for (int i = 0; i < length; i++) {
					parameterPackageNames[i] = parameterTypes[i].qualifiedPackageName();
					parameterTypeNames[i] = parameterTypes[i].qualifiedSourceName();
					parameterSignatures[i] = getSignature(parameterTypes[i]).replace('/', '.');
				}
				this.noProposal = false;
				ReferenceBinding declaringClass = methodBinding.declaringClass;
				if (isLocal(declaringClass) && this.requestor instanceof SelectionRequestor) {
					((SelectionRequestor)this.requestor).acceptLocalMethod(
						(SourceTypeBinding)declaringClass,
						methodBinding.isConstructor()
							? declaringClass.sourceName()
							: methodBinding.selector,
						parameterPackageNames,
						parameterTypeNames,
						parameterSignatures,
						methodBinding.isConstructor(),
						parsedUnit,
						isDeclaration,
						this.actualSelectionStart,
						this.actualSelectionEnd);
				} else {
					this.requestor.acceptMethod(
						declaringClass.qualifiedPackageName(),
						declaringClass.qualifiedSourceName(),
						declaringClass.enclosingType() == null ? null : getSignature(declaringClass.enclosingType()),
						methodBinding.isConstructor()
							? declaringClass.sourceName()
							: methodBinding.selector,
						parameterPackageNames,
						parameterTypeNames,
						parameterSignatures,
						methodBinding.isConstructor(), 
						isDeclaration,
						this.actualSelectionStart,
						this.actualSelectionEnd);
				}
				this.acceptedAnswer = true;
			} else
				if (binding instanceof FieldBinding) {
					FieldBinding fieldBinding = (FieldBinding) binding;
					ReferenceBinding declaringClass = fieldBinding.declaringClass;
					if (declaringClass != null) { // arraylength
						this.noProposal = false;
						if (isLocal(declaringClass) && this.requestor instanceof SelectionRequestor) {
							((SelectionRequestor)this.requestor).acceptLocalField(
								(SourceTypeBinding)declaringClass,
								fieldBinding.name,
								parsedUnit);
						} else {
							this.requestor.acceptField(
								declaringClass.qualifiedPackageName(),
								declaringClass.qualifiedSourceName(),
								fieldBinding.name,
								false,
								this.actualSelectionStart,
								this.actualSelectionEnd);
						}
						this.acceptedAnswer = true;
					}
				} else
					if (binding instanceof LocalVariableBinding) {
						if (this.requestor instanceof SelectionRequestor) {
							((SelectionRequestor)this.requestor).acceptLocalVariable(
								(LocalVariableBinding)binding,
								parsedUnit);
							this.acceptedAnswer = true;
						} else {
							// open on the type of the variable
							selectFrom(((LocalVariableBinding) binding).type, parsedUnit, false);
						}
					} else
						if (binding instanceof ArrayBinding) {
							selectFrom(((ArrayBinding) binding).leafComponentType, parsedUnit, false);
							// open on the type of the array
						} else
							if (binding instanceof PackageBinding) {
								PackageBinding packageBinding = (PackageBinding) binding;
								this.noProposal = false;
								this.requestor.acceptPackage(packageBinding.readableName());
								this.acceptedAnswer = true;
							} else
								if(binding instanceof BaseTypeBinding) {
									this.acceptedAnswer = true;
								}
	}

