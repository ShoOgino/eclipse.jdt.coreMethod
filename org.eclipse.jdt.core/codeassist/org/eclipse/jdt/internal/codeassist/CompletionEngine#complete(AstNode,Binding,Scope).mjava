	private void complete(AstNode astNode, Binding qualifiedBinding, Scope scope) {

		setSourceRange(astNode.sourceStart, astNode.sourceEnd);

		// defaults... some nodes will change these
		if (astNode instanceof CompletionOnFieldType) {

			CompletionOnFieldType field = (CompletionOnFieldType) astNode;
			CompletionOnSingleTypeReference type = (CompletionOnSingleTypeReference) field.type;
			char[] token = type.token;
			setSourceRange(type.sourceStart, type.sourceEnd);
			//		findKeywords(token, modifiers, scope); // could be the start of a field, method or member type
			findTypesAndPackages(token, scope);
			
			if(field.modifiers == CompilerModifiers.AccDefault) {
				findMethods(token,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false);
			}
		} else {

			if (astNode instanceof CompletionOnSingleNameReference) {

				char[] token = ((CompletionOnSingleNameReference) astNode).token;
				findVariablesAndMethods(
					token,
					scope,
					(CompletionOnSingleNameReference) astNode,
					scope);
				// can be the start of a qualified type name
				findTypesAndPackages(token, scope);

			} else {

				if (astNode instanceof CompletionOnSingleTypeReference) {

					char[] token = ((CompletionOnSingleTypeReference) astNode).token;

					// can be the start of a qualified type name
					if (qualifiedBinding == null) {
						findTypesAndPackages(token, scope);
						} else {
							findMemberTypes(
							token,
							(ReferenceBinding) qualifiedBinding,
							scope,
							scope.enclosingSourceType());
					}
				} else {
					
					if (astNode instanceof CompletionOnQualifiedNameReference) {

						insideQualifiedReference = true;
						CompletionOnQualifiedNameReference ref =
							(CompletionOnQualifiedNameReference) astNode;
						char[] token = ref.completionIdentifier;
						long completionPosition = ref.sourcePositions[ref.sourcePositions.length - 1];

						if (qualifiedBinding instanceof VariableBinding) {

							setSourceRange((int) (completionPosition >>> 32), (int) completionPosition);
							TypeBinding receiverType = ((VariableBinding) qualifiedBinding).type;
							if (receiverType != null) {
								findFieldsAndMethods(token, receiverType, scope, ref, scope,false);
							}

						} else {

							if (qualifiedBinding instanceof ReferenceBinding) {

								ReferenceBinding receiverType = (ReferenceBinding) qualifiedBinding;
								setSourceRange((int) (completionPosition >>> 32), (int) completionPosition);

								findMemberTypes(token, receiverType, scope, scope.enclosingSourceType());

								findClassField(token, (TypeBinding) qualifiedBinding);

								findFields(
									token,
									receiverType,
									scope,
									new ObjectVector(),
									new ObjectVector(),
									true,
									ref,
									scope,
									false);

								findMethods(
									token,
									null,
									receiverType,
									scope,
									new ObjectVector(),
									true,
									false,
									false,
									ref,
									scope,
									false);

							} else {

								if (qualifiedBinding instanceof PackageBinding) {

									setSourceRange(astNode.sourceStart, (int) completionPosition);
									// replace to the end of the completion identifier
									findTypesAndSubpackages(token, (PackageBinding) qualifiedBinding);
								}
							}
						}

					} else {

							if (astNode instanceof CompletionOnQualifiedTypeReference) {

							insideQualifiedReference = true;
							CompletionOnQualifiedTypeReference ref =
								(CompletionOnQualifiedTypeReference) astNode;
							char[] token = ref.completionIdentifier;
							long completionPosition = ref.sourcePositions[ref.tokens.length];

							// get the source positions of the completion identifier
							if (qualifiedBinding instanceof ReferenceBinding) {

								setSourceRange((int) (completionPosition >>> 32), (int) completionPosition);
								findMemberTypes(
									token,
									(ReferenceBinding) qualifiedBinding,
									scope,
									scope.enclosingSourceType());

							} else {

								if (qualifiedBinding instanceof PackageBinding) {

									setSourceRange(astNode.sourceStart, (int) completionPosition);
									// replace to the end of the completion identifier
									findTypesAndSubpackages(token, (PackageBinding) qualifiedBinding);
								}
							}

						} else {

							if (astNode instanceof CompletionOnMemberAccess) {

								CompletionOnMemberAccess access = (CompletionOnMemberAccess) astNode;
								long completionPosition = access.nameSourcePosition;
								setSourceRange((int) (completionPosition >>> 32), (int) completionPosition);

								findFieldsAndMethods(
									access.token,
									(TypeBinding) qualifiedBinding,
									scope,
									access,
									scope,
									false);

							} else {

								if (astNode instanceof CompletionOnMessageSend) {

									CompletionOnMessageSend messageSend = (CompletionOnMessageSend) astNode;
									TypeBinding[] argTypes =
										computeTypes(messageSend.arguments, (BlockScope) scope);
									if (qualifiedBinding == null) {

										findImplicitMessageSends(messageSend.selector, argTypes, scope, messageSend, scope);
									} else {

										findMethods(
											messageSend.selector,
											argTypes,
											(ReferenceBinding) qualifiedBinding,
											scope,
											new ObjectVector(),
											false,
											true,
											false,
											messageSend,
											scope,
											false);
									}

								} else {

									if (astNode instanceof CompletionOnExplicitConstructorCall) {

										CompletionOnExplicitConstructorCall constructorCall =
											(CompletionOnExplicitConstructorCall) astNode;
										TypeBinding[] argTypes =
											computeTypes(constructorCall.arguments, (BlockScope) scope);
										findConstructors(
											(ReferenceBinding) qualifiedBinding,
											argTypes,
											scope,
											constructorCall);

									} else {

										if (astNode instanceof CompletionOnQualifiedAllocationExpression) {

											CompletionOnQualifiedAllocationExpression allocExpression =
												(CompletionOnQualifiedAllocationExpression) astNode;
											TypeBinding[] argTypes =
												computeTypes(allocExpression.arguments, (BlockScope) scope);
											findConstructors(
												(ReferenceBinding) qualifiedBinding,
												argTypes,
												scope,
												allocExpression);

										} else {

											if (astNode instanceof CompletionOnClassLiteralAccess) {

												char[] token = ((CompletionOnClassLiteralAccess) astNode).completionIdentifier;
												findClassField(token, (TypeBinding) qualifiedBinding);
											} else {
												if(astNode instanceof CompletionOnMethodName) {
													CompletionOnMethodName method = (CompletionOnMethodName) astNode;
														
													setSourceRange(method.sourceStart, method.selectorEnd);
														
													FieldBinding[] fields = scope.enclosingSourceType().fields();
													char[][] excludeNames = new char[fields.length][];
													for(int i = 0 ; i < fields.length ; i++){
														excludeNames[i] = fields[i].name;
													}
														
													findVariableNames(method.selector, method.returnType, excludeNames);
												} else {
													if (astNode instanceof CompletionOnFieldName) {
														CompletionOnFieldName field = (CompletionOnFieldName) astNode;
														
														FieldBinding[] fields = scope.enclosingSourceType().fields();
														char[][] excludeNames = new char[fields.length][];
														for(int i = 0 ; i < fields.length ; i++){
															excludeNames[i] = fields[i].name;
														}
														
														findVariableNames(field.name, field.type, excludeNames);
													} else {
														if (astNode instanceof CompletionOnLocalName ||
															astNode instanceof CompletionOnArgumentName){
															LocalDeclaration variable = (LocalDeclaration) astNode;
															
															LocalVariableBinding[] locals = ((BlockScope)scope).locals;
															char[][] excludeNames = new char[locals.length][];
															int localCount = 0;
															for(int i = 0 ; i < locals.length ; i++){
																if(locals[i] != null) {
																	excludeNames[localCount++] = locals[i].name;
																}
															}
															System.arraycopy(excludeNames, 0, excludeNames = new char[localCount][], 0, localCount);
															
															findVariableNames(variable.name, variable.type, excludeNames);
														} 
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

