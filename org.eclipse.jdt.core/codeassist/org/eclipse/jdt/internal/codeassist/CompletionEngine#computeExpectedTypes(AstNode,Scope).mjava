	private void computeExpectedTypes(AstNode parent, Scope scope){
		
		// default filter
		expectedTypesFilter = SUBTYPE;
		
		// find types from parent
		if(parent instanceof AbstractVariableDeclaration) {
			AbstractVariableDeclaration variable = (AbstractVariableDeclaration)parent;
			TypeBinding binding = variable.type.resolvedType;
			if(binding != null) {
				if(!(variable.initialization instanceof ArrayInitializer)) {
					addExpectedType(binding);
				}
			}
		} else if(parent instanceof Assignment) {
			TypeBinding binding = ((Assignment)parent).resolvedType;
			if(binding != null) {
				addExpectedType(binding);
			}
		} else if(parent instanceof ReturnStatement) {
			MethodBinding methodBinding = ((AbstractMethodDeclaration) scope.methodScope().referenceContext).binding;
			TypeBinding binding = methodBinding  == null ? null : methodBinding.returnType;
			if(binding != null) {
				addExpectedType(binding);
			}
		} else if(parent instanceof CastExpression) {
			Expression e = ((CastExpression)parent).type;
			TypeBinding binding = e.resolvedType;
			if(binding != null){
				addExpectedType(binding);
				expectedTypesFilter = SUBTYPE | SUPERTYPE;
			}
		} else if(parent instanceof MessageSend) {
			MessageSend messageSend = (MessageSend) parent;
			
			ReferenceBinding binding = (ReferenceBinding)messageSend.receiverType;
			boolean isStatic = messageSend.receiver.isTypeReference();
			
			while(binding != null) {	
				computeExpectedTypesForMessageSend(
					binding,
					messageSend.selector,
					messageSend.arguments,
					(ReferenceBinding)messageSend.receiverType,
					scope,
					messageSend,
					isStatic);
				computeExpectedTypesForMessageSendForInterface(
					binding,
					messageSend.selector,
					messageSend.arguments,
					(ReferenceBinding)messageSend.receiverType,
					scope,
					messageSend,
					isStatic);
				binding = binding.superclass();
			}
		} else if(parent instanceof AllocationExpression) {
			AllocationExpression allocationExpression = (AllocationExpression) parent;
			
			ReferenceBinding binding = (ReferenceBinding)allocationExpression.type.resolvedType;

			if(binding != null) {	
				computeExpectedTypesForAllocationExpression(
					binding,
					allocationExpression.arguments,
					scope,
					allocationExpression);
			}
		}
		
		if(expectedTypesCount + 1 != expectedTypes.length) {
			System.arraycopy(expectedTypes, 0, expectedTypes = new TypeBinding[expectedTypesCount + 1], 0, expectedTypesCount + 1);
		}
	}

