// Bug 398734 - [1.8][compiler] Lambda expression type or return type should be checked against the target functional interface method's result type
public void test018() {
	this.runNegativeTest(
			new String[] {
					"X.java",
					"interface I {\n" +
					"  I foo();\n" +
					"}\n" +
					"class P implements I {\n" +
					"   public I foo() { return null; }\n" +
					"}\n" +
					"public class X {\n" +
					"  public static void main(String[] args) {\n" +
					"    I i1 = () -> 42;\n" +
					"    I i2 = () -> \"Hello\";\n" +
					"    I i3 = () -> { return 42; };\n" +
					"    I i4 = () -> { return \"Hello\"; };\n" +
					"    I i5 = () -> { return new P(); };\n" +
					"  }\n" +
					"}\n",
				},
				"----------\n" +
				"1. ERROR in X.java (at line 9)\n" +
				"	I i1 = () -> 42;\n" +
				"	             ^^\n" +
				"Type mismatch: cannot convert from int to I\n" +
				"----------\n" +
				"2. ERROR in X.java (at line 10)\n" +
				"	I i2 = () -> \"Hello\";\n" +
				"	             ^^^^^^^\n" +
				"Type mismatch: cannot convert from String to I\n" +
				"----------\n" +
				"3. ERROR in X.java (at line 11)\n" +
				"	I i3 = () -> { return 42; };\n" +
				"	                      ^^\n" +
				"Type mismatch: cannot convert from int to I\n" +
				"----------\n" +
				"4. ERROR in X.java (at line 12)\n" +
				"	I i4 = () -> { return \"Hello\"; };\n" +
				"	                      ^^^^^^^\n" +
				"Type mismatch: cannot convert from String to I\n" +
				"----------\n");
}

