// https://bugs.eclipse.org/bugs/show_bug.cgi?id=399778, [1.8][compiler] Conditional operator expressions should propagate target types
public void test021() {
	this.runNegativeTest(
			new String[] {
				"X.java",
				"interface I {\n" +
				"	void doit();\n" +
				"}\n" +
				"class X {\n" +
				"	I foo() {\n" +
				"       return \"Hello\" + () -> {};\n" +
			    "   }\n" +
			    "	I goo() {\n" +
				"       return \"Hello\" + (I)(() -> {});\n" +
			    "   }\n" +
			    "	I zoo() {\n" +
				"       return 10 + (() -> {});\n" +
			    "   }\n" +
			    "	I boo() {\n" +
				"       return 10 + (I) (() -> {});\n" +
			    "   }\n" +
				"}\n",
			},
			"----------\n" + 
			"1. ERROR in X.java (at line 6)\n" + 
			"	return \"Hello\" + () -> {};\n" + 
			"	                 ^^^^^\n" +
			"The target type of this expression must be a functional interface\n" + 
			"----------\n" + 
			"2. ERROR in X.java (at line 9)\n" + 
			"	return \"Hello\" + (I)(() -> {});\n" + 
			"	       ^^^^^^^^^^^^^^^^^^^^^^^\n" + 
			"Type mismatch: cannot convert from String to I\n" + 
			"----------\n" + 
			"3. ERROR in X.java (at line 12)\n" + 
			"	return 10 + (() -> {});\n" + 
			"	            ^^^^^^\n" +
			"The target type of this expression must be a functional interface\n" + 
			"----------\n" + 
			"4. ERROR in X.java (at line 15)\n" + 
			"	return 10 + (I) (() -> {});\n" + 
			"	       ^^^^^^^^^^^^^^^^^^^\n" + 
			"The operator + is undefined for the argument type(s) int, I\n" + 
			"----------\n");
}

