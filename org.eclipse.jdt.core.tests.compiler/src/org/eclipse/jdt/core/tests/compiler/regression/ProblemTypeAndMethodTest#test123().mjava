// https://bugs.eclipse.org/bugs/show_bug.cgi?id=318682
// If method returns type parameter not declared by it, it cannot be static
public void test123() {
	if (this.complianceLevel < ClassFileConstants.JDK1_5)
		return;
	new Runner() {{
	  this.customOptions = getCompilerOptions();
	  this.customOptions.put(CompilerOptions.OPTION_ReportMethodCanBeStatic, CompilerOptions.ERROR);
	  this.customOptions.put(CompilerOptions.OPTION_ReportMethodCanBePotentiallyStatic, CompilerOptions.ERROR);
	  this.customOptions.put(CompilerOptions.OPTION_ReportNonStaticAccessToStatic, CompilerOptions.IGNORE);
	  this.testFiles =
		new String[] {
				"X.java", 
				"public class X<T> {\n" +
				"	<E,Y> T method1() {\n" + 	// don't warn
				"		return null;\n" +
				"	}\n" + 
				"	<E,Y> E method2() {\n" + 	// warn
				"		return null;\n" +
				"	}\n" + 
				"}"
		};
	  this.expectedCompilerLog =
		"----------\n" + 
		"1. ERROR in X.java (at line 5)\n" + 
		"	<E,Y> E method2() {\n" + 
		"	        ^^^^^^^^^\n" + 
		"The method method2() from the type X<T> can potentially be declared as static\n" + 
		"----------\n";
	  this.javacTestOptions =
		JavacTestOptions.Excuse.EclipseWarningConfiguredAsError;
	}}.runNegativeTest();
}

