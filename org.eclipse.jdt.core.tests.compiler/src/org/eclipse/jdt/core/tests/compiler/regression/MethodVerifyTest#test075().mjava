	//https://bugs.eclipse.org/bugs/show_bug.cgi?id=107105
	public void test075() {
		String expectedOutput = new CompilerOptions(getCompilerOptions()).sourceLevel < ClassFileConstants.JDK1_6
			?	"----------\n" + 
				"1. ERROR in A.java (at line 2)\n" + 
				"	class B extends A { @Override <T1, S1 extends J & I<S1>> void foo() { } }\n" + 
				"	                                                              ^^^^^\n" + 
				"Name clash: The method foo() of type B has the same erasure as foo() of type A but does not override it\n" + 
				"----------\n" + 
				"2. ERROR in A.java (at line 2)\n" + 
				"	class B extends A { @Override <T1, S1 extends J & I<S1>> void foo() { } }\n" + 
				"	                                                              ^^^^^\n" + 
				"The method foo() of type B must override a superclass method\n" + 
				"----------\n" + 
				"3. WARNING in A.java (at line 3)\n" + 
				"	class C extends A { @Override <T2, S2 extends J & I> void foo() { } }\n" + 
				"	                                                  ^\n" + 
				"I is a raw type. References to generic type I<TT> should be parameterized\n" + 
				"----------\n" + 
				"4. ERROR in A.java (at line 3)\n" + 
				"	class C extends A { @Override <T2, S2 extends J & I> void foo() { } }\n" + 
				"	                                                          ^^^^^\n" + 
				"Name clash: The method foo() of type C has the same erasure as foo() of type A but does not override it\n" + 
				"----------\n" + 
				"5. ERROR in A.java (at line 3)\n" + 
				"	class C extends A { @Override <T2, S2 extends J & I> void foo() { } }\n" + 
				"	                                                          ^^^^^\n" + 
				"The method foo() of type C must override a superclass method\n" + 
				"----------\n"
			:	"----------\n" + 
				"1. ERROR in A.java (at line 2)\n" + 
				"	class B extends A { @Override <T1, S1 extends J & I<S1>> void foo() { } }\n" + 
				"	                                                              ^^^^^\n" + 
				"Name clash: The method foo() of type B has the same erasure as foo() of type A but does not override it\n" + 
				"----------\n" + 
				"2. ERROR in A.java (at line 2)\n" + 
				"	class B extends A { @Override <T1, S1 extends J & I<S1>> void foo() { } }\n" + 
				"	                                                              ^^^^^\n" + 
				"The method foo() of type B must override or implement a supertype method\n" + 
				"----------\n" + 
				"3. WARNING in A.java (at line 3)\n" + 
				"	class C extends A { @Override <T2, S2 extends J & I> void foo() { } }\n" + 
				"	                                                  ^\n" + 
				"I is a raw type. References to generic type I<TT> should be parameterized\n" + 
				"----------\n" + 
				"4. ERROR in A.java (at line 3)\n" + 
				"	class C extends A { @Override <T2, S2 extends J & I> void foo() { } }\n" + 
				"	                                                          ^^^^^\n" + 
				"Name clash: The method foo() of type C has the same erasure as foo() of type A but does not override it\n" + 
				"----------\n" + 
				"5. ERROR in A.java (at line 3)\n" + 
				"	class C extends A { @Override <T2, S2 extends J & I> void foo() { } }\n" + 
				"	                                                          ^^^^^\n" + 
				"The method foo() of type C must override or implement a supertype method\n" + 
				"----------\n";		
		this.runNegativeTest(
			new String[] {
				"A.java",
				"class A { <T, S extends J & I<T>> void foo() { } }\n" +
				"class B extends A { @Override <T1, S1 extends J & I<S1>> void foo() { } }\n" + // fails, name clash only shows up when Override is removed
				"class C extends A { @Override <T2, S2 extends J & I> void foo() { } }\n" + // fails, name clash only shows up when Override is removed
				"class D extends A { @Override <T3, S3 extends J & I<T3>> void foo() { } }\n" +
				"class E extends A { @Override <T4, S4 extends I<T4> & J> void foo() { } }\n" +
				"interface I<TT> {}\n" +
				"interface J {}"
			},
			expectedOutput
			// A.java:2: method does not override a method from its superclass
			// A.java:3: method does not override a method from its superclass
		);
	}

