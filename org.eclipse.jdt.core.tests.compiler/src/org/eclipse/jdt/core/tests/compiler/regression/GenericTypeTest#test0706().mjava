//https://bugs.eclipse.org/bugs/show_bug.cgi?id=97219
public void test0706() {
	String outputExpectedBelow17 = (this.complianceLevel == ClassFileConstants.JDK1_6)?
			"----------\n" +
			"1. WARNING in X.java (at line 9)\n" +
			"	class BB extends AA<CC> { <U> BB test() {return null;} }\n" +
			"	                                 ^^^^^^\n" +
			"Name clash: The method test() of type BB has the same erasure as test() of type AA<T> but does not override it\n" +
			"----------\n":
				"----------\n" +
				"1. ERROR in X.java (at line 9)\n" +
				"	class BB extends AA<CC> { <U> BB test() {return null;} }\n" +
				"	                                 ^^^^^^\n" +
				"Name clash: The method test() of type BB has the same erasure as test() of type AA<T> but does not override it\n" +
				"----------\n";
	this.runNegativeTest(
		new String[] {
			"X.java",
			"public class X {\n" +
			"	void foo() {\n" +
			"		BB bb = new BB();\n" +
			"		bb.<Object>test();\n" +
			"		((AA<CC>) bb).test();\n" +
			"	}\n" +
			"}\n" +
			"class AA<T> { AA<Object> test() {return null;} }\n" +
			"class BB extends AA<CC> { <U> BB test() {return null;} }\n" +
			"class CC {}\n",
		},
		(this.complianceLevel < ClassFileConstants.JDK1_7)
		? outputExpectedBelow17
		: "----------\n" +
		"1. ERROR in X.java (at line 4)\n" +
		"	bb.<Object>test();\n" +
		"	           ^^^^\n" +
		"The method test() is ambiguous for the type BB\n" +
		"----------\n" +
		"2. ERROR in X.java (at line 9)\n" +
		"	class BB extends AA<CC> { <U> BB test() {return null;} }\n" +
		"	                                 ^^^^^^\n" +
		"Name clash: The method test() of type BB has the same erasure as test() of type AA<T> but does not override it\n" +
		"----------\n"
	);
/*
X.java:4: reference to test is ambiguous, both method test() in AA and method <U>test() in BB match
                bb.<Object>test();
                  ^
  where U is a type-variable:
    U extends Object declared in method <U>test()
X.java:9: name clash: <U>test() in BB and test() in AA have the same erasure, yet neither overrides the other
class BB extends AA<CC> { <U> BB test() {return null;} }
                                 ^
  where U is a type-variable:
    U extends Object declared in method <U>test()
2 errors
 */
}

