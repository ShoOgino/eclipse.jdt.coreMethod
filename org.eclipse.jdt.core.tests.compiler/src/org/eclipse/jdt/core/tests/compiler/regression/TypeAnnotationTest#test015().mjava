//	// method parameter
//	public void test013() throws Exception {
//		this.runConformTest(
//			new String[] {
//				"B.java",
//				"import java.lang.annotation.Target;\n" + 
//				"import static java.lang.annotation.ElementType.*;\n" + 
//				"import java.lang.annotation.Retention;\n" + 
//				"import static java.lang.annotation.RetentionPolicy.*;\n" + 
//				"@Target(TYPE_USE)\n" + 
//				"@Retention(CLASS)\n" + 
//				"@interface B {\n" + 
//				"	int value() default -1;\n" + 
//				"}",
//				"X.java",
//				"public class X {\n" + 
//				"	int foo(@B(3) String s) {\n" +
//				"		return s.length();\n" +
//				"	}\n" + 
//				"}",
//		},
//		"");
//		String expectedOutput =
//			"    RuntimeInvisibleTypeAnnotations: \n" + 
//			"      #25 @B(\n" + 
//			"        #26 value=(int) 3 (constant type)\n" + 
//			"        target type = 0xc METHOD_PARAMETER\n" + 
//			"        method parameter index = 0\n" + 
//			"      )\n";
//		checkDisassembledClassFile(OUTPUT_DIR + File.separator + "X.class", "X", expectedOutput, ClassFileBytesDisassembler.SYSTEM);
//	}
//	// method parameter generic or array
//	public void test014() throws Exception {
//		this.runConformTest(
//			new String[] {
//				"A.java",
//				"import java.lang.annotation.Target;\n" + 
//				"import static java.lang.annotation.ElementType.*;\n" + 
//				"import java.lang.annotation.Retention;\n" + 
//				"import static java.lang.annotation.RetentionPolicy.*;\n" + 
//				"@Target(TYPE_USE)\n" + 
//				"@Retention(RUNTIME)\n" + 
//				"@interface A {\n" + 
//				"	String value() default \"default\";\n" + 
//				"}\n",
//				"B.java",
//				"import java.lang.annotation.Target;\n" + 
//				"import static java.lang.annotation.ElementType.*;\n" + 
//				"import java.lang.annotation.Retention;\n" + 
//				"import static java.lang.annotation.RetentionPolicy.*;\n" + 
//				"@Target(TYPE_USE)\n" + 
//				"@Retention(CLASS)\n" + 
//				"@interface B {\n" + 
//				"	int value() default -1;\n" + 
//				"}",
//				"X.java",
//				"public class X {\n" + 
//				"	int foo(String @A [] @B(3) [] s) {\n" +
//				"		return s.length;\n" +
//				"	}\n" + 
//				"}",
//		},
//		"");
//		String expectedOutput =
//			"    RuntimeVisibleTypeAnnotations: \n" + 
//			"      #23 @A(\n" + 
//			"        target type = 0xc METHOD_PARAMETER\n" + 
//			"        method parameter index = 0\n" + 
//			"      )\n" + 
//			"    RuntimeInvisibleTypeAnnotations: \n" + 
//			"      #19 @B(\n" + 
//			"        #20 value=(int) 3 (constant type)\n" + 
//			"        target type = 0xd METHOD_PARAMETER_GENERIC_OR_ARRAY\n" + 
//			"        method parameter index = 0\n" + 
//			"        locations = {0}\n" + 
//			"      )\n";
//		checkDisassembledClassFile(OUTPUT_DIR + File.separator + "X.class", "X", expectedOutput, ClassFileBytesDisassembler.SYSTEM);
//	}
	// field type generic or array
	public void test015() throws Exception {
		this.runConformTest(
			new String[] {
				"A.java",
				"import java.lang.annotation.Target;\n" + 
				"import static java.lang.annotation.ElementType.*;\n" + 
				"import java.lang.annotation.Retention;\n" + 
				"import static java.lang.annotation.RetentionPolicy.*;\n" + 
				"@Target(TYPE_USE)\n" + 
				"@Retention(RUNTIME)\n" + 
				"@interface A {\n" + 
				"	String value() default \"default\";\n" + 
				"}\n",
				"B.java",
				"import java.lang.annotation.Target;\n" + 
				"import static java.lang.annotation.ElementType.*;\n" + 
				"import java.lang.annotation.Retention;\n" + 
				"import static java.lang.annotation.RetentionPolicy.*;\n" + 
				"@Target(TYPE_USE)\n" + 
				"@Retention(CLASS)\n" + 
				"@interface B {\n" + 
				"	int value() default -1;\n" + 
				"}",
				"X.java",
				"public class X {\n" + 
				"	@A int [] @B(3) [] field;\n" +
				"}",
		},
		"");
		String expectedOutput =
			"    RuntimeVisibleTypeAnnotations: \n" + 
			"      #12 @A(\n" + 
			"        target type = 0xf FIELD_GENERIC_OR_ARRAY\n" + 
			"        locations = {1}\n" + 
			"      )\n" + 
			"    RuntimeInvisibleTypeAnnotations: \n" + 
			"      #8 @B(\n" + 
			"        #9 value=(int) 3 (constant type)\n" + 
			"        target type = 0xf FIELD_GENERIC_OR_ARRAY\n" + 
			"        locations = {0}\n" + 
			"      )\n";
		checkDisassembledClassFile(OUTPUT_DIR + File.separator + "X.class", "X", expectedOutput, ClassFileBytesDisassembler.SYSTEM);
	}

