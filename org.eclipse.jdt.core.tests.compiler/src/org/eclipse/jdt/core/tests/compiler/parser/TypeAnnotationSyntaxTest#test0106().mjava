// To test Parser.consumeCastExpressionWithPrimitiveType() with Type Annotations
public void test0106() throws IOException {
	String source =
		"class X{\n" +
		"	private float x, y, z;\n" +
		"	float magnitude () {\n" +
		"		return (@Marker @Positive float) Math.sqrt((x*x) + (y*y) + (z*z));\n" +
		"	}\n" +
		"}\n";
	String expectedUnitToString =
		"class X {\n" +
		"  private float x;\n" +
		"  private float y;\n" +
		"  private float z;\n" +
		"  X() {\n" +
		"    super();\n" +
		"  }\n" +
		"  float magnitude() {\n" +
		"    return (@Marker @Positive float) Math.sqrt((((x * x) + (y * y)) + (z * z)));\n" +
		"  }\n" +
		"}\n";
	checkParse(CHECK_ALL & ~CHECK_INDEXING_PARSER, source.toCharArray(), null, "test0106", expectedUnitToString );
}

