	/*
	 * Run Sun compilation using javac.
	 * Use JRE directory to retrieve javac bin directory and current classpath for
	 * compilation.
	 * Launch compilation in a thread and verify that it does not take more than 5s
	 * to perform it. Otherwise abort the process and log in console.
	 */
	protected void runJavac(String[] testFiles, final String expectedProblemLog, final String expectedSuccessOutputString, boolean shouldFlushOutputDirectory) {
		try {
			if (shouldFlushOutputDirectory)
				cleanupDirectory(new File(JAVAC_OUTPUT_DIR));

			// Write files in dir
			IPath dirFilePath = writeFiles(testFiles);

			String testName = testName();
			Process compileProcess = null;
			Process execProcess = null;
			try {
				// Compute classpath
				String[] classpath = Util.concatWithClassLibs(JAVAC_OUTPUT_DIR, false);
				StringBuffer cp = new StringBuffer();
				cp.append(" -classpath .;"); // start with the current directory which contains the source files
				int length = classpath.length;
				for (int i = 0; i < length; i++) {
					if (classpath[i].indexOf(" ") != -1) {
						cp.append("\"" + classpath[i] + "\"");
					} else {
						cp.append(classpath[i]);
					}
					if (i<(length-1)) cp.append(";");
				}
				// Compute command line
				IPath jdkDir = (new Path(Util.getJREDirectory())).removeLastSegments(1);
				IPath javacPath = jdkDir.append("bin").append("javac.exe");
				StringBuffer cmdLine = new StringBuffer(javacPath.toString());
				cmdLine.append(cp);
				cmdLine.append(" -d ");
				cmdLine.append(JAVAC_OUTPUT_DIR.indexOf(" ") != -1 ? "\"" + JAVAC_OUTPUT_DIR + "\"" : JAVAC_OUTPUT_DIR);
				cmdLine.append(" -source 1.5 -deprecation -Xlint:unchecked "); // enable recommended warnings
				if (this.dirPath.equals(dirFilePath)) {
					cmdLine.append("*.java");
				} else {
					IPath subDirPath = dirFilePath.append("*.java").removeFirstSegments(this.dirPath.segmentCount());
					String subDirName = subDirPath.toString().substring(subDirPath.getDevice().length());
					cmdLine.append(subDirName);
				}
//				System.out.println(testName+": "+cmdLine.toString());
//				System.out.println(GenericTypeTest.this.dirPath.toFile().getAbsolutePath());
				// Launch process
				compileProcess = Runtime.getRuntime().exec(cmdLine.toString(), null, this.dirPath.toFile());
	            // Log errors
	            Logger errorLogger = new Logger(compileProcess.getErrorStream(), "ERROR");            

	            // Log output
	            Logger outputLogger = new Logger(compileProcess.getInputStream(), "OUTPUT");

	            // start the threads to run outputs (standard/error)
	            errorLogger.start();
	            outputLogger.start();

	            // Wait for end of process
				int exitValue = compileProcess.waitFor();

				// Compare compilation results
				if (expectedProblemLog == null) {
					if (exitValue != 0) {
						System.out.println("----------------------------------------");
						System.out.println(testName+" - Javac has found error(s) but Eclipse expects conform result:\n");
						System.out.println(errorLogger.buffer.toString());
						printFiles(testFiles);
						DIFF_COUNTERS[0]++;
					} else if (errorLogger.buffer.length() > 0) {
						System.out.println("----------------------------------------");
						System.out.println(testName+" - Javac has found warning(s) but Eclipse expects conform result:\n");
						System.out.println(errorLogger.buffer.toString());
						printFiles(testFiles);
						DIFF_COUNTERS[0]++;
					} else if (expectedSuccessOutputString != null) {
						// Compute command line
						IPath javaPath = jdkDir.append("bin").append("java.exe");
						StringBuffer javaCmdLine = new StringBuffer(javaPath.toString());
						javaCmdLine.append(cp);
						// assume executable class is name of first test file
						javaCmdLine.append(' ').append(testFiles[0].substring(0, testFiles[0].indexOf('.')));
						execProcess = Runtime.getRuntime().exec(javaCmdLine.toString(), null, this.dirPath.toFile());
						Logger logger = new Logger(execProcess.getInputStream(), "OUTPUT");
						logger.start();

						exitValue = execProcess.waitFor();
						String javaOutput = logger.buffer.toString().trim();
						if (!expectedSuccessOutputString.equals(javaOutput)) {
							System.out.println("----------------------------------------");
							System.out.println(testName+" - Javac and Eclipse runtime output is not the same:");
							System.out.println(expectedSuccessOutputString);
							System.out.println(javaOutput);
							System.out.println("\n");
							printFiles(testFiles);
							DIFF_COUNTERS[2]++;
						}
					}
				} else if (exitValue == 0) {
					if (errorLogger.buffer.length() == 0 && expectedProblemLog.length() > 0) {
						System.out.println("----------------------------------------");
						System.out.println(testName+" - Eclipse has found error(s)/warning(s) but Javac did not find any:");
						System.out.println(expectedProblemLog);
						printFiles(testFiles);
						DIFF_COUNTERS[1]++;
					} else if (expectedProblemLog.indexOf("ERROR") >0 ){
						System.out.println("----------------------------------------");
						System.out.println(testName+" - Eclipse has found error(s) but Javac only found warning(s):");
						System.out.println("javac:");
						System.out.println(errorLogger.buffer.toString());
						System.out.println("eclipse:");
						System.out.println(expectedProblemLog);
						printFiles(testFiles);
						DIFF_COUNTERS[1]++;
					} else {
						// TODO (frederic) compare warnings in each result and verify they are similar...
//						System.out.println(testName+": javac has found warnings :");
//						System.out.print(errorLogger.buffer.toString());
//						System.out.println(testName+": we're expecting warning results:");
//						System.out.println(expectedProblemLog);
					}
				} else if (errorLogger.buffer.length() == 0) {
					System.out.println("----------------------------------------");
					System.out.println(testName+" - Eclipse has found error(s)/warning(s) but Javac did not find any:");
					System.out.println(expectedProblemLog);
					printFiles(testFiles);
					DIFF_COUNTERS[1]++;
				}
			} catch (IOException ioe) {
				System.out.println(testName+": Not possible to launch Sun javac compilation!");
			} catch (InterruptedException e1) {
				if (compileProcess != null) compileProcess.destroy();
				if (execProcess != null) execProcess.destroy();
				System.out.println(testName+": Sun javac compilation was aborted!");
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			// Clean up written file(s)
			IPath testDir =  new Path(Util.getOutputDirectory()).append(testName());
			cleanupDirectory(testDir.toFile());
		}
	}

