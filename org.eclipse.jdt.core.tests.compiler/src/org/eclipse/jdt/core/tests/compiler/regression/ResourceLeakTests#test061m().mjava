// Bug 358903 - Filter practically unimportant resource leak warnings
// a closeable is passed to another method in a return statement
// example constructed after org.eclipse.equinox.internal.p2.artifact.repository.simple.SimpleArtifactRepository#getArtifact(..)
public void test061m() throws IOException {
	Map options = getCompilerOptions();
	options.put(CompilerOptions.OPTION_ReportUnclosedCloseable, CompilerOptions.ERROR);
	options.put(CompilerOptions.OPTION_ReportPotentiallyUnclosedCloseable, CompilerOptions.ERROR);
	this.runNegativeTest(
		new String[] {
			"X.java",
			"import java.io.File;\n" +
			"import java.io.FileInputStream;\n" +
			"import java.io.BufferedInputStream;\n" +
			"import java.io.InputStream;\n" +
			"import java.io.IOException;\n" +
			"public class X {\n" +
			"    BufferedInputStream stream;\n" +
			"    BufferedInputStream foo(File file) throws IOException {\n" +
			"        FileInputStream s = new FileInputStream(file);\n" +
			"        return check(new BufferedInputStream(s));\n" +
			"    }\n" +
			"    BufferedInputStream foo2(FileInputStream s, File file) throws IOException {\n" +
			"        s = new FileInputStream(file);\n" +
			"        return check(s);\n" +
			"    }\n" +
			"    BufferedInputStream foo3(InputStream s) throws IOException {\n" +
			"        s = check(s);\n" +
			"        return check(s);\n" +
			"    }\n" +
			"    BufferedInputStream check(InputStream s) { return null; }\n" +
			"}\n"
		},
		// TODO: also these warnings *might* be avoidable by detecting check(s) as a wrapper creation??
		"----------\n" +
		"1. ERROR in X.java (at line 10)\n" +
		"	return check(new BufferedInputStream(s));\n" +
		"	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" +
		"Potential resource leak: \'<unassigned Closeable value>\' may not be closed at this location\n" +
		"----------\n" +
		"2. ERROR in X.java (at line 14)\n" +
		"	return check(s);\n" +
		"	^^^^^^^^^^^^^^^^\n" +
		"Potential resource leak: \'s\' may not be closed at this location\n" +
		"----------\n" +
		"3. ERROR in X.java (at line 18)\n" +
		"	return check(s);\n" +
		"	^^^^^^^^^^^^^^^^\n" +
		"Potential resource leak: \'s\' may not be closed at this location\n" +
		"----------\n",
		null,
		true,
		options);
}

