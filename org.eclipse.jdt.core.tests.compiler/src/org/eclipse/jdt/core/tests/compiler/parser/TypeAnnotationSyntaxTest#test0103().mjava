// To test Parser.consumeCastExpressionWithGenericsArray() with Type Annotations
public void test0103() throws IOException {
	String source =
		"import java.lang.reflect.Array;\n" +
		"@Marker class X<@Readonly T> {\n" +
		"	T @SingleMember(0) [] theArray;\n" +
		"	public X(Class<T> clazz) {\n" +
		"		theArray = (@Marker @SingleMember(0) T @Normal(value = 10) []) Array.newInstance(clazz, 10); // Compiler warning\n" +
		"	}\n" +
		"}";
	String expectedUnitToString =
		"import java.lang.reflect.Array;\n" +
		"@Marker class X<@Readonly T> {\n" +
		"  T @SingleMember(0) [] theArray;\n" +
		"  public X(Class<T> clazz) {\n" +
		"    super();\n" +
		"    theArray = (@Marker @SingleMember(0) T @Normal(value = 10) []) Array.newInstance(clazz, 10);\n" +
		"  }\n" +
		"}\n";
	checkParse(CHECK_ALL & ~CHECK_INDEXING_PARSER, source.toCharArray(), null, "test0103", expectedUnitToString );
}

