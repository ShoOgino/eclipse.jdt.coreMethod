// AST implementation - visiting binary expressions
// https://bugs.eclipse.org/bugs/show_bug.cgi?id=102728
// Adding combined binary expressions - cutting the traversal half-way down
public void test0006_combined_binary_expression() {
	CombinedBinaryExpression.defaultArityMaxStartingValue = 1;
	runConformTest(
		"X.java", 
		"public class X {\n" + 
		"  void foo() {\n" + 
		"    String s1 = \"s1\";\n" + 
		"    String s2 = \"s2\";\n" + 
		"    String s3 = \"s3\";\n" + 
		"    String s4 = \"s4\";\n" + 
		"    System.out.println(s1 + \"l1\" + s2 + \"l2\" +\n" +
		"      s3 + s1 + s4);\n" + 
		"  }\n" + 
		"}\n",
		defaultParser,
		new ASTBinaryExpressionCollector() {
			public boolean visit(BinaryExpression binaryExpression, BlockScope scope) {
				super.visit(binaryExpression, scope);
				if (binaryExpression.right instanceof StringLiteral) {
					return false;
				}
				return true;
			}
		},
		"[v SL \"s1\"]\n" + 
		"[ev SL \"s1\"]\n" + 
		"[v SL \"s2\"]\n" + 
		"[ev SL \"s2\"]\n" + 
		"[v SL \"s3\"]\n" + 
		"[ev SL \"s3\"]\n" + 
		"[v SL \"s4\"]\n" + 
		"[ev SL \"s4\"]\n" + 
		"[v BE ((((((s1 + \"l1\") + s...) + s4)]\n" + 
		"[v BE (((((s1 + \"l1\") + s2...) + s1)]\n" + 
		"[v BE ((((s1 + \"l1\") + s2)...) + s3)]\n" + 
		"[v BE (((s1 + \"l1\") + s2) + \"l2\")]\n" + 
		"[ev BE (((s1 + \"l1\") + s2) + \"l2\")]\n" + 
		"[v SNR s3]\n" + 
		"[ev SNR s3]\n" + 
		"[ev BE ((((s1 + \"l1\") + s2)...) + s3)]\n" + 
		"[v SNR s1]\n" + 
		"[ev SNR s1]\n" + 
		"[ev BE (((((s1 + \"l1\") + s2...) + s1)]\n" + 
		"[v SNR s4]\n" + 
		"[ev SNR s4]\n" + 
		"[ev BE ((((((s1 + \"l1\") + s...) + s4)]\n");
	CombinedBinaryExpression.defaultArityMaxStartingValue = 
		CombinedBinaryExpression.ARITY_MAX_MIN;
}

