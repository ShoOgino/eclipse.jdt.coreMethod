//https://bugs.eclipse.org/bugs/show_bug.cgi?id=159021 - variation
public void test1038() {
	Map options = getCompilerOptions();
	options.put(CompilerOptions.OPTION_PreserveUnusedLocal, CompilerOptions.OPTIMIZE_OUT);
	this.runConformTest(
		new String[] {
			"X.java",
			"interface I<T> {\n" + 
			"    int CONST = A.foo();\n" + 
			"}\n" + 
			"\n" + 
			"class A<U> {\n" + 
			"        static int foo() {\n" + 
			"        System.out.println(\"SUCCESS\");\n" + 
			"        return 0;\n" + 
			"    }\n" + 
			"}\n" + 
			"class B<V> implements I<V> {\n" + 
			"	static int LOCAL_STATIC;\n" + 
			"	int local_field;\n" + 
			"    B(int param) {\n" + 
			"        int i = CONST; // keep for possible <clinit>\n" + 
			"        int j = param; // may optimize out\n" + 
			"        int k = LOCAL_STATIC; // may optimize out\n" + 
			"        int l = local_field; // may optimize out\n" + 
			"    }\n" + 
			"}\n" + 
			"public class X {\n" + 
			"    public static void main(String[] args) {\n" + 
			"        new B<String>(12);\n" + 
			"    }\n" + 
			"}", // =================
		}, 
		"SUCCESS",
		null,
		false,
		null,
		options,
		null);
	// check the reference to I.CONST still got generated (for <clinit> invocation side-effect)
	String expectedOutput = 
		"  // Method descriptor #10 (I)V\n" + 
		"  // Stack: 1, Locals: 2\n" + 
		"  B(int param);\n" + 
		"    0  aload_0 [this]\n" + 
		"    1  invokespecial java.lang.Object() [12]\n" + 
		"    4  getstatic B.CONST : int [15]\n" + 
		"    7  pop\n" + 
		"    8  return\n" + 
		"      Line numbers:\n" + 
		"        [pc: 0, line: 14]\n" + 
		"        [pc: 4, line: 15]\n" + 
		"        [pc: 8, line: 19]\n" + 
		"      Local variable table:\n" + 
		"        [pc: 0, pc: 9] local: this index: 0 type: B\n" + 
		"        [pc: 0, pc: 9] local: param index: 1 type: int\n";

	try {
		File f = new File(OUTPUT_DIR + File.separator + "B.class");
		byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
		ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
		String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
		int index = result.indexOf(expectedOutput);
		if (index == -1 || expectedOutput.length() == 0) {
			System.out.println(Util.displayString(result, 3));
		}
		if (index == -1) {
			assertEquals("Wrong contents", expectedOutput, result);
		}
	} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
		assertTrue(false);
	} catch (IOException e) {
		assertTrue(false);
	}			
}

