//https://bugs.eclipse.org/bugs/show_bug.cgi?id=117120 - variation
public void test030() {
	this.runConformTest(
		new String[] {
			"X.java",
			"public class X {\n" + 
			"  public static float f0;\n" + 
			"  \n" + 
			"  public static void main(String[] args)\n" + 
			"  {\n" + 
			"    long l11 = -26;\n" + 
			"    \n" + 
			"    System.out.println(\n" + 
			"        (((l11 < f0++) || true) == ((foo() || bar()) || true)));\n" + 
			"  }\n" + 
			"  static boolean foo() {\n" + 
			"	  System.out.print(\"foo\");\n" + 
			"	  return false;\n" + 
			"  }\n" + 
			"  static boolean bar() {\n" + 
			"	  System.out.print(\"bar\");\n" + 
			"	  return true;\n" + 
			"  }\n" + 
			"}\n",
		},
		"foobartrue");
	// 	ensure optimized boolean codegen sequence
	String expectedOutput =
		"  // Method descriptor #17 ([Ljava/lang/String;)V\n" + 
		"  // Stack: 3, Locals: 3\n" + 
		"  public static void main(java.lang.String[] args);\n" + 
		"     0  ldc2_w <Long -26> [18]\n" + 
		"     3  lstore_1 [l11]\n" + 
		"     4  getstatic java.lang.System.out : java.io.PrintStream [20]\n" + 
		"     7  getstatic X.f0 : float [26]\n" + 
		"    10  fconst_1\n" + 
		"    11  fadd\n" + 
		"    12  putstatic X.f0 : float [26]\n" + 
		"    15  invokestatic X.foo() : boolean [28]\n" + 
		"    18  ifne 25\n" + 
		"    21  invokestatic X.bar() : boolean [32]\n" + 
		"    24  pop\n" + 
		"    25  iconst_1\n" + 
		"    26  invokevirtual java.io.PrintStream.println(boolean) : void [35]\n" + 
		"    29  return\n" + 
		"      Line numbers:\n" + 
		"        [pc: 0, line: 6]\n" + 
		"        [pc: 4, line: 8]\n" + 
		"        [pc: 7, line: 9]\n" + 
		"        [pc: 26, line: 8]\n" + 
		"        [pc: 29, line: 10]\n" + 
		"      Local variable table:\n" + 
		"        [pc: 0, pc: 30] local: args index: 0 type: java.lang.String[]\n" + 
		"        [pc: 4, pc: 30] local: l11 index: 1 type: long\n";
	
	try {
		File f = new File(OUTPUT_DIR + File.separator + "X.class");
		byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
		ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
		String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
		int index = result.indexOf(expectedOutput);
		if (index == -1 || expectedOutput.length() == 0) {
			System.out.println(Util.displayString(result, 3));
		}
		if (index == -1) {
			assertEquals("Wrong contents", expectedOutput, result);
		}
	} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
		assertTrue(false);
	} catch (IOException e) {
		assertTrue(false);
	}		
}

