// To test Parser.consumeAdditionalBound() with Type annotations
public void test0085() throws IOException {
	String source =
		"import java.io.Serializable;\n" +
		"\n" +
		"@SingleMember(10) class X<T extends @Marker Serializable & @Normal(value = 10) Runnable, V extends @Marker T> {\n" +
		"	@Negative T t;\n" +
		"	@Marker X(@Readonly T t) {\n" +
		"		this.t = t;\n" +
		"	}\n" +
		"	void foo(@Marker X this) {\n" +
		"		(this == null ? t : t).run();\n" +
		"		((@Marker V) t).run();\n" +
		"	}\n" +
		"	public static void main(@Readonly String @Marker [] args) {\n" +
		"		new @Marker  X<@Marker A, @Negative A>(new @Marker A()).foo();\n" +
		"	}\n" +
		"}\n" +
		"@Marker class A implements @Marker Serializable, @SingleMember(1) Runnable {\n" +
		"	public void run() {\n" +
		"		System.out.print(\"AA\");\n" +
		"	}\n" +
		"}\n";
	String expectedUnitToString =
		"import java.io.Serializable;\n" +
		"@SingleMember(10) class X<T extends @Marker Serializable & @Normal(value = 10) Runnable, V extends @Marker T> {\n" +
		"  @Negative T t;\n" +
		"  @Marker X(@Readonly T t) {\n" +
		"    super();\n" +
		"    this.t = t;\n" +
		"  }\n" +
		"  void foo(@Marker X this) {\n" +
		"    ((this == null) ? t : t).run();\n" +
		"    (@Marker V) t.run();\n" +
		"  }\n" +
		"  public static void main(@Readonly String @Marker [] args) {\n" +
		"    new @Marker X<@Marker A, @Negative A>(new @Marker A()).foo();\n" +
		"  }\n" +
		"}\n" +
		"@Marker class A implements @Marker Serializable, @SingleMember(1) Runnable {\n" +
		"  A() {\n" +
		"    super();\n" +
		"  }\n" +
		"  public void run() {\n" +
		"    System.out.print(\"AA\");\n" +
		"  }\n" +
		"}\n";
	checkParse(source.toCharArray(), null, "test0085", expectedUnitToString );
}

