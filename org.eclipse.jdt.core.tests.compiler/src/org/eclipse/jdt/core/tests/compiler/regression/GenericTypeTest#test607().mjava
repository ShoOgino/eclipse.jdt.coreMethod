	public void test607() {
	    this.runNegativeTest(
            new String[] {
                "X.java",
				"import java.util.*;\n" + 
				"\n" + 
				"public class X {\n" + 
				"\n" + 
				"	void test1() {\n" + 
				"		List<Comparable<Object>> lObj = new ArrayList<Comparable<Object>> ();\n" + 
				"		Collections.sort (lObj);	\n" + 
				"	}\n" + 
				"	void test2() {\n" + 
				"		List<Comparable> lComp = new ArrayList<Comparable> ();\n" + 
				"		Collections.sort (lComp);		\n" + 
				"	}\n" + 
				"	void test3() {\n" + 
				"		List<Comparable<String>> lStr = new ArrayList<Comparable<String>> ();\n" + 
				"		Collections.sort (lStr);\n" + 
				"	}\n" + 
				" }\n",
            },
            "----------\n" + 
    		"1. WARNING in X.java (at line 10)\n" + 
    		"	List<Comparable> lComp = new ArrayList<Comparable> ();\n" + 
    		"	     ^^^^^^^^^^\n" + 
    		"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\n" + 
    		"----------\n" + 
    		"2. WARNING in X.java (at line 10)\n" + 
    		"	List<Comparable> lComp = new ArrayList<Comparable> ();\n" + 
    		"	                                       ^^^^^^^^^^\n" + 
    		"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\n" + 
    		"----------\n" + 
    		"3. WARNING in X.java (at line 11)\n" + 
    		"	Collections.sort (lComp);		\n" + 
    		"	^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
    		"Type safety: Unchecked invocation sort(List<Comparable>) of the generic method sort(List<T>) of type Collections\n" + 
    		"----------\n" + 
    		"4. ERROR in X.java (at line 15)\n" + 
    		"	Collections.sort (lStr);\n" + 
    		"	            ^^^^\n" + 
    		"Bound mismatch: The generic method sort(List<T>) of type Collections is not applicable for the arguments (List<Comparable<String>>). The inferred type Comparable<String> is not a valid substitute for the bounded parameter <T extends Comparable<? super T>>\n" + 
    		"----------\n");
	}	

