	public void test006() throws Exception {
		this.runConformTest(
				new String[] {
					"X.java",
					"public class X {\n" + 
					"	void foo (int n) {\n" + 
					"   	synchronized (this) {\n" + 
					"       	switch (n) {\n" + 
					"       		case 1:\n" + 
					"       		throw new NullPointerException();\n" + 
					"			}\n" + 
					"		}\n" + 
					"	}\n" + 
					"    public static void main(String args[]) {\n" + 
					"    	try {\n" + 
					"	    	new X().foo(1);\n" + 
					"    	} catch(Exception e) {\n" + 
					"	        System.out.println(\"SUCCESS\"); \n" + 
					"    	}\n" + 
					"    } \n" + 
					"}",
				},
				"SUCCESS");
				
			ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
			byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +"X.class"));
			String actualOutput =
				disassembler.disassemble(
					classFileBytes,
					"\n",
					ClassFileBytesDisassembler.DETAILED); 
			
			String expectedOutput = 
				"  // Method descriptor #15 (I)V\n" + 
				"  // Stack: 2, Locals: 3\n" + 
				"  void foo(int n);\n" + 
				"     0  aload_0 [this]\n" + 
				"     1  dup\n" + 
				"     2  astore_2\n" + 
				"     3  monitorenter\n" + 
				"     4  iload_1 [n]\n" + 
				"     5  tableswitch default: 32\n" + 
				"          case 1: 24\n" + 
				"    24  new java.lang.NullPointerException [16]\n" + 
				"    27  dup\n" + 
				"    28  invokespecial java.lang.NullPointerException() [18]\n" + 
				"    31  athrow\n" + 
				"    32  aload_2\n" + 
				"    33  monitorexit\n" + 
				"    34  goto 40\n" + 
				"    37  aload_2\n" + 
				"    38  monitorexit\n" + 
				"    39  athrow\n" + 
				"    40  return\n" + 
				"      Exception Table:\n" + 
				"        [pc: 4, pc: 34] -> 37 when : any\n" + 
				"        [pc: 37, pc: 39] -> 37 when : any\n" + 
				"      Line numbers:\n" + 
				"        [pc: 0, line: 3]\n" + 
				"        [pc: 4, line: 4]\n" + 
				"        [pc: 24, line: 6]\n" + 
				"        [pc: 32, line: 3]\n" + 
				"        [pc: 40, line: 9]\n" + 
				"      Local variable table:\n" + 
				"        [pc: 0, pc: 41] local: this index: 0 type: X\n" + 
				"        [pc: 0, pc: 41] local: n index: 1 type: int\n" + 
				"      Stack map table: number of frames 4\n" + 
				"        [pc: 24, append: {X}]\n" + 
				"        [pc: 32, same]\n" + 
				"        [pc: 37, same_locals_1_stack_item, stack: {java.lang.Throwable}]\n" + 
				"        [pc: 40, chop 1 local(s)]\n";
			
			int index = actualOutput.indexOf(expectedOutput);
			if (index == -1 || expectedOutput.length() == 0) {
				System.out.println(Util.displayString(actualOutput, 2));
			}
			if (index == -1) {
				assertEquals("Wrong contents", expectedOutput, actualOutput);
			}
	}

