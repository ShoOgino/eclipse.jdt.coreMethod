	// https://bugs.eclipse.org/412203
	public void testBug412203_a() throws Exception {
		if (this.complianceLevel < ClassFileConstants.JDK1_7) return; // using <>
		Map options = getCompilerOptions();
		options.put(JavaCore.COMPILER_ANNOTATION_NULL_ANALYSIS, JavaCore.ENABLED);
		options.put(JavaCore.COMPILER_PB_NULL_REFERENCE, JavaCore.ERROR);
		options.put(JavaCore.COMPILER_PB_NULL_SPECIFICATION_VIOLATION, JavaCore.ERROR);
		options.put(JavaCore.COMPILER_PB_POTENTIAL_NULL_REFERENCE, JavaCore.WARNING);
		options.put(JavaCore.COMPILER_PB_SUPPRESS_OPTIONAL_ERRORS, JavaCore.ENABLED);
		this.runConformTest(
				new String[] {
					"X2.java",
					"import java.util.*;\n" +
					"\n" +
					"import org.eclipse.jdt.annotation.NonNullByDefault;\n" +
					"\n" +
					"class Y {\n" +
					"	public Y() { }\n" +
					"}\n" +
					"\n" +
					"@NonNullByDefault\n" +
					"abstract class X1 {\n" +
					"\n" +
					"	private Object a;\n" +
					"	private Object b;\n" +
					"	private Object c;\n" +
					"	private Object d;\n" +
					"	private Object e;\n" +
					"	private Object f;\n" +
					"\n" +
					"	protected Object name;\n" +
					"\n" +
					"	@SuppressWarnings(\"null\")\n" +
					"	protected X1() {\n" +
					"		super ();\n" +
					"	}\n" +
					"\n" +
					"}\n" +
					"public class X2 extends X1 {\n" +
					"\n" +
					"\n" +
					"	public static final int ID = 4711;\n" +
					"\n" +
					"	private Object x;\n" +
					"	private Object y;\n" +
					"	private Object z;\n" +
					"\n" +
					"	private Runnable runable = new Runnable () {\n" +
					"		@Override\n" +
					"		public void run () {\n" +
					"			// whatever\n" +
					"		}\n" +
					"	};\n" +
					"\n" +
					"	private void init () {\n" +
					"		final Object selector = new Object ();\n" +
					"		this.name = new Object ();\n" +
					"		LinkedList<Character> invalidCharactersList = new LinkedList<> ();\n" +
					"		char[] invalidCharacters = new char[invalidCharactersList.size ()];\n" +
					"		for (int i = 0; i < invalidCharacters.length; i++) {\n" +
					"			invalidCharacters[i] = invalidCharactersList.get (i).charValue ();\n" +
					"		}\n" +
					"		Y inputVerifier = new Y();\n" +
					"	}\n" +
					"\n" +
					"}\n",
				},
				"",
				getLibsWithNullAnnotations(ClassFileConstants.JDK1_7),
				true/*flush*/,
				null/*vmArgs*/,
				options,
				null/*requestor*/,
				true/*skipJavac*/);

			ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
			byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +"X2.class"));
			String actualOutput =
				disassembler.disassemble(
					classFileBytes,
					"\n",
					ClassFileBytesDisassembler.DETAILED);

			String expectedOutput =
					"  // Method descriptor #16 ()V\n" +
					"  // Stack: 4, Locals: 5\n" +
					"  private void init();\n" +
					"     0  new java.lang.Object [32]\n" +
					"     3  dup\n" +
					"     4  invokespecial java.lang.Object() [34]\n" +
					"     7  astore_1 [selector]\n" +
					"     8  aload_0 [this]\n" +
					"     9  new java.lang.Object [32]\n" +
					"    12  dup\n" +
					"    13  invokespecial java.lang.Object() [34]\n" +
					"    16  putfield X2.name : java.lang.Object [35]\n" +
					"    19  new java.util.LinkedList [38]\n" +
					"    22  dup\n" +
					"    23  invokespecial java.util.LinkedList() [40]\n" +
					"    26  astore_2 [invalidCharactersList]\n" +
					"    27  aload_2 [invalidCharactersList]\n" +
					"    28  invokevirtual java.util.LinkedList.size() : int [41]\n" +
					"    31  newarray char [5]\n" +
					"    33  astore_3 [invalidCharacters]\n" +
					"    34  iconst_0\n" +
					"    35  istore 4 [i]\n" +
					"    37  goto 59\n" +
					"    40  aload_3 [invalidCharacters]\n" +
					"    41  iload 4 [i]\n" +
					"    43  aload_2 [invalidCharactersList]\n" +
					"    44  iload 4 [i]\n" +
					"    46  invokevirtual java.util.LinkedList.get(int) : java.lang.Object [45]\n" +
					"    49  checkcast java.lang.Character [49]\n" +
					"    52  invokevirtual java.lang.Character.charValue() : char [51]\n" +
					"    55  castore\n" +
					"    56  iinc 4 1 [i]\n" +
					"    59  iload 4 [i]\n" +
					"    61  aload_3 [invalidCharacters]\n" +
					"    62  arraylength\n" +
					"    63  if_icmplt 40\n" +
					"    66  new Y [55]\n" +
					"    69  dup\n" +
					"    70  invokespecial Y() [57]\n" +
					"    73  astore 4 [inputVerifier]\n" +
					"    75  return\n" +
					"      Line numbers:\n" +
					"        [pc: 0, line: 44]\n" +
					"        [pc: 8, line: 45]\n" +
					"        [pc: 19, line: 46]\n" +
					"        [pc: 27, line: 47]\n" +
					"        [pc: 34, line: 48]\n" +
					"        [pc: 40, line: 49]\n" +
					"        [pc: 56, line: 48]\n" +
					"        [pc: 66, line: 51]\n" +
					"        [pc: 75, line: 52]\n" +
					"      Local variable table:\n" +
					"        [pc: 0, pc: 76] local: this index: 0 type: X2\n" +
					"        [pc: 8, pc: 76] local: selector index: 1 type: java.lang.Object\n" +
					"        [pc: 27, pc: 76] local: invalidCharactersList index: 2 type: java.util.LinkedList\n" +
					"        [pc: 34, pc: 76] local: invalidCharacters index: 3 type: char[]\n" +
					"        [pc: 37, pc: 66] local: i index: 4 type: int\n" +
					"        [pc: 75, pc: 76] local: inputVerifier index: 4 type: Y\n" +
					"      Local variable type table:\n" +
					"        [pc: 27, pc: 76] local: invalidCharactersList index: 2 type: java.util.LinkedList<java.lang.Character>\n" +
					"      Stack map table: number of frames 2\n" +
					"        [pc: 40, full, stack: {}, locals: {X2, java.lang.Object, java.util.LinkedList, char[], int}]\n" +
					"        [pc: 59, same]\n";

			int index = actualOutput.indexOf(expectedOutput);
			if (index == -1 || expectedOutput.length() == 0) {
				System.out.println(Util.displayString(actualOutput, 2));
			}
			if (index == -1) {
				assertEquals("Wrong contents", expectedOutput, actualOutput);
			}
	}

