	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=337795 (make sure there is a warning if vararg parameter is not reifiable)
	public void test068b() throws Exception {
		if (this.complianceLevel < ClassFileConstants.JDK1_7) return;
		Map options = getCompilerOptions();
		options.put(JavaCore.COMPILER_PB_UNCHECKED_TYPE_OPERATION, JavaCore.ERROR);
		this.runNegativeTest(
			new String[] {
				"X.java",
				"import java.util.List;\n" +
				"public class X {\n" +
				"	public <T> X(T ... a) {\n" +
				"	}\n" +
				"	public <T> X(int i, T ... a) {\n" +
				"	}\n" +
				"   public <T> List<T> asList(T ... a) {\n" +
				"       return null;\n" +
				"   }\n" +
				"   public <T> List<T> asList(T t, T ... a) {\n" +
				"       return null;\n" +
				"   }\n" +
				"}\n"
			},
			"----------\n" +
			"1. WARNING in X.java (at line 3)\n" +
			"	public <T> X(T ... a) {\n" +
			"	                   ^\n" +
			"Type safety: Potential heap pollution via varargs parameter a\n" +
			"----------\n" +
			"2. WARNING in X.java (at line 5)\n" +
			"	public <T> X(int i, T ... a) {\n" +
			"	                          ^\n" +
			"Type safety: Potential heap pollution via varargs parameter a\n" +
			"----------\n" +
			"3. WARNING in X.java (at line 7)\n" +
			"	public <T> List<T> asList(T ... a) {\n" +
			"	                                ^\n" +
			"Type safety: Potential heap pollution via varargs parameter a\n" +
			"----------\n" +
			"4. WARNING in X.java (at line 10)\n" +
			"	public <T> List<T> asList(T t, T ... a) {\n" +
			"	                                     ^\n" +
			"Type safety: Potential heap pollution via varargs parameter a\n" +
			"----------\n");
	}

