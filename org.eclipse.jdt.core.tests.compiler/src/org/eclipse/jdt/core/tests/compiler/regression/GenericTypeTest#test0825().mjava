public void test0825() {
	this.runConformTest(
		new String[] {
			"X.java",
			"import java.io.Serializable;\n" + 
			"\n" + 
			"public class X<T extends Serializable & Runnable, V extends T> {\n" + 
			"	void foo(T t) {\n" + 
			"		Runnable r1 = t;\n" + 
			"		Runnable r2 = (this == null ? t : t);\n" + 
			"		Runnable r3 = ((V) t);\n" + 
			"		\n" + 
			"		bar(t);\n" + 
			"		bar(this == null ? t : t);\n" + 
			"		bar((V)t);\n" + 
			"	}\n" + 
			"	void bar(Runnable r) {}	\n" + 
			"	public static void main(String[] args) {\n" + 
			"		new X<A, A>().foo(new A());\n" + 
			"	}\n" + 
			"}\n" + 
			"class A implements Serializable, Runnable {\n" + 
			"	public void run() {\n" + 
			"		System.out.println(\"AA\");\n" + 
			"	}\n" + 
			"}\n",
		},
		"");
	// 	ensure proper declaring class for #run() invocation
	String expectedOutput =
		"  // Method descriptor #17 (Ljava/io/Serializable;)V\n" + 
		"  // Signature: (TT;)V\n" + 
		"  // Stack: 2, Locals: 5\n" + 
		"  void foo(java.io.Serializable t);\n" + 
		"     0  aload_1 [t]\n" + 
		"     1  astore_2 [r1]\n" + 
		"     2  aload_0 [this]\n" + 
		"     3  ifnonnull 10\n" + 
		"     6  aload_1 [t]\n" + 
		"     7  goto 11\n" + 
		"    10  aload_1 [t]\n" + 
		"    11  astore_3 [r2]\n" + 
		"    12  aload_1 [t]\n" + 
		"    13  astore 4 [r3]\n" + 
		"    15  aload_0 [this]\n" + 
		"    16  aload_1 [t]\n" + 
		"    17  invokevirtual X.bar(java.lang.Runnable) : void [20]\n" + 
		"    20  aload_0 [this]\n" + 
		"    21  aload_0 [this]\n" + 
		"    22  ifnonnull 29\n" + 
		"    25  aload_1 [t]\n" + 
		"    26  goto 30\n" + 
		"    29  aload_1 [t]\n" + 
		"    30  invokevirtual X.bar(java.lang.Runnable) : void [20]\n" + 
		"    33  aload_0 [this]\n" + 
		"    34  aload_1 [t]\n" + 
		"    35  invokevirtual X.bar(java.lang.Runnable) : void [20]\n" + 
		"    38  return\n" + 
		"      Line numbers:\n" + 
		"        [pc: 0, line: 5]\n" + 
		"        [pc: 2, line: 6]\n" + 
		"        [pc: 12, line: 7]\n" + 
		"        [pc: 15, line: 9]\n" + 
		"        [pc: 20, line: 10]\n" + 
		"        [pc: 33, line: 11]\n" + 
		"        [pc: 38, line: 12]\n" + 
		"      Local variable table:\n" + 
		"        [pc: 0, pc: 39] local: this index: 0 type: X\n" + 
		"        [pc: 0, pc: 39] local: t index: 1 type: java.io.Serializable\n" + 
		"        [pc: 2, pc: 39] local: r1 index: 2 type: java.lang.Runnable\n" + 
		"        [pc: 12, pc: 39] local: r2 index: 3 type: java.lang.Runnable\n" + 
		"        [pc: 15, pc: 39] local: r3 index: 4 type: java.lang.Runnable\n" + 
		"      Local variable type table:\n" + 
		"        [pc: 0, pc: 39] local: this index: 0 type: X<T,V>\n" + 
		"        [pc: 0, pc: 39] local: t index: 1 type: T\n";
	
	try {
		File f = new File(OUTPUT_DIR + File.separator + "X.class");
		byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
		ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
		String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
		int index = result.indexOf(expectedOutput);
		if (index == -1 || expectedOutput.length() == 0) {
			System.out.println(Util.displayString(result, 3));
		}
		if (index == -1) {
			assertEquals("Wrong contents", expectedOutput, result);
		}
	} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
		assertTrue(false);
	} catch (IOException e) {
		assertTrue(false);
	}		
}

