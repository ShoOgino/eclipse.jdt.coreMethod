	public void test014() {
		this.runConformTest(
            new String[] {
            		"X.java",
            		"public class X {\n" + 
            		"    X() {\n" + 
            		"		final int i;\n" + 
            		"		synchronized (this) {\n" + 
            		"		    i = 8;\n" + 
            		"		}\n" + 
            		"    }  \n" + 
            		"  public static void main(String[] args) {}\n" + 
            		"}",
            },
			"");

		ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
		String actualOutput = null;
		try {
			byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +"X.class"));
			actualOutput =
				disassembler.disassemble(
                     classFileBytes,
                     "\n",
                     ClassFileBytesDisassembler.DETAILED); 
		} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
			assertTrue("ClassFormatException", false);
		} catch (IOException e) {
			assertTrue("IOException", false);
		}

		String expectedOutput = 
			"  // Method descriptor #6 ()V\n" + 
			"  // Stack: 2, Locals: 3\n" + 
			"  X();\n" + 
			"     0  aload_0 [this]\n" + 
			"     1  invokespecial java.lang.Object() [8]\n" + 
			"     4  aload_0 [this]\n" + 
			"     5  dup\n" + 
			"     6  astore_2\n" + 
			"     7  monitorenter\n" + 
			"     8  bipush 8\n" + 
			"    10  istore_1 [i]\n" + 
			"    11  aload_2\n" + 
			"    12  monitorexit\n" + 
			"    13  goto 19\n" + 
			"    16  aload_2\n" + 
			"    17  monitorexit\n" + 
			"    18  athrow\n" + 
			"    19  return\n" + 
			"      Exception Table:\n" + 
			"        [pc: 8, pc: 13] -> 16 when : any\n" + 
			"        [pc: 16, pc: 18] -> 16 when : any\n" + 
			"      Line numbers:\n" + 
			"        [pc: 0, line: 2]\n" + 
			"        [pc: 4, line: 4]\n" + 
			"        [pc: 8, line: 5]\n" + 
			"        [pc: 11, line: 4]\n" + 
			"        [pc: 19, line: 7]\n" + 
			"      Local variable table:\n" + 
			"        [pc: 0, pc: 20] local: this index: 0 type: X\n" + 
			"        [pc: 11, pc: 16] local: i index: 1 type: int\n" + 
			"        [pc: 19, pc: 20] local: i index: 1 type: int\n" + 
			"      Stack map table: number of frames 2\n" + 
			"        [pc: 16, full, stack: {java.lang.Throwable}, locals: {X, _, X}]\n" + 
			"        [pc: 19, full, stack: {}, locals: {X, int}]\n";

		int index = actualOutput.indexOf(expectedOutput);
		if (index == -1 || expectedOutput.length() == 0) {
			System.out.println(Util.displayString(actualOutput, 2));
		}
		if (index == -1) {
			assertEquals("Wrong contents", expectedOutput, actualOutput);
		}
	}

