// Bug 349326 - [1.7] new warning for missing try-with-resources
// scope-related pbs reported in https://bugs.eclipse.org/349326#c70 and https://bugs.eclipse.org/349326#c82
public void test056v() {
	Map options = getCompilerOptions();
	options.put(JavaCore.COMPILER_PB_UNCLOSED_CLOSEABLE, CompilerOptions.ERROR);
	options.put(JavaCore.COMPILER_PB_POTENTIALLY_UNCLOSED_CLOSEABLE, CompilerOptions.WARNING);
	options.put(JavaCore.COMPILER_PB_EXPLICITLY_CLOSED_AUTOCLOSEABLE, CompilerOptions.WARNING);
	options.put(JavaCore.COMPILER_PB_DEAD_CODE, CompilerOptions.ERROR);
	String expectedProblems = this.complianceLevel >= ClassFileConstants.JDK1_7 ?
				"----------\n" +
				"1. ERROR in X.java (at line 4)\n" +
				"	FileReader reader = new FileReader(\"file\");\n" +
				"	           ^^^^^^\n" +
				"Resource leak: 'reader' is never closed\n" +
				"----------\n" +
				"2. WARNING in X.java (at line 19)\n" +
				"	FileReader reader111 = new FileReader(\"file2\");\n" +
				"	           ^^^^^^^^^\n" +
				"Resource 'reader111' should be managed by try-with-resource\n" +
				"----------\n" +
				"3. ERROR in X.java (at line 42)\n" +
				"	return;\n" +
				"	^^^^^^^\n" +
				"Resource leak: 'reader2' is not closed at this location\n" +
				"----------\n"
			:
				"----------\n" +
				"1. ERROR in X.java (at line 4)\n" +
				"	FileReader reader = new FileReader(\"file\");\n" +
				"	           ^^^^^^\n" +
				"Resource leak: 'reader' is never closed\n" +
				"----------\n" +
				"2. ERROR in X.java (at line 42)\n" +
				"	return;\n" +
				"	^^^^^^^\n" +
				"Resource leak: 'reader2' is not closed at this location\n" +
				"----------\n";
	this.runNegativeTest(
		new String[] {
			"X.java",
			"import java.io.FileReader;\n" +
			"public class X {\n" +
			"    boolean foo1() throws Exception {\n" +
			"        FileReader reader = new FileReader(\"file\");\n" +
			"        try {\n" +
			"            int ch;\n" +
			"            while ((ch = reader.read()) != -1) {\n" +
			"                System.out.println(ch);\n" +
			"                reader.read();\n" +
			"            }\n" +
			"            if (ch > 10) {\n" +
			"                return true;\n" +
			"            }\n" +
			"            return false;\n" + // return while resource from enclosing scope remains unclosed
			"        } finally {\n" +
			"        }\n" +
			"    }\n" +
			"    void foo111() throws Exception {\n" +
			"        FileReader reader111 = new FileReader(\"file2\");\n" +
			"        try {\n" +
			"            int ch;\n" +
			"            while ((ch = reader111.read()) != -1) {\n" +
			"                System.out.println(ch);\n" +
			"                reader111.read();\n" +
			"            }\n" +
			"            return;\n" + // this shouldn't spoil the warning "should be managed with t-w-r"
			"        } finally {\n" +
			"            if (reader111 != null) {\n" +
			"                reader111.close();\n" +
			"            }\n" +
			"        }\n" +
			"    }\n" +
			"    void foo2() throws Exception {\n" +
			"        FileReader reader2 = new FileReader(\"file\");\n" +
			"        try {\n" +
			"            int ch;\n" +
			"            while ((ch = reader2.read()) != -1) {\n" +
			"                System.out.println(ch);\n" +
			"                reader2.read();\n" +
			"            }\n" +
			"            if (ch > 10) {\n" +
			"                return;\n" + // potential leak
			"            }\n" +
			"        } finally {\n" +
			"        }\n" +
			"        reader2.close();\n" + // due to this close we don't say "never closed"
			"    }\n" +
			"}\n"
		},
		expectedProblems,
		null,
		true,
		options);
}

