// null analysis -- case for static final field initialized inside static block with different values
// check if the resetting works properly i.e. null status for constant fields should not be 
// reset on method calls. This test is for more than 64 fields to check for extra bits.
public void testBug247564b_8() {
	Map compilerOptions = getCompilerOptions();
	compilerOptions.put(CompilerOptions.OPTION_ReportNonStaticAccessToStatic, CompilerOptions.IGNORE);
	this.runNegativeTest(
		false,
		new String[] {
			"X.java",
			"public class X {\n" +
			"Object field0, \n" +
			"field1, field2, field3, field4, \n" +
			"field5, field6, field7, field8, \n" +
			"field9, field10, field11, field12, \n" +
			"field13, field14, field15, field16, \n" +
			"field17, field18, field19, field20, \n" +
			"field21, field22, field23, field24, \n" +
			"field25, field26, field27, field28, \n" +
			"field29, field30, field31, field32, \n" +
			"field33, field34, field35, field36, \n" +
			"field37, field38, field39, field40, \n" +
			"field41, field42, field43, field44, \n" +
			"field45, field46, field47, field48, \n" +
			"field49, field50, field51, field52, \n" +
			"field53, field54, field55, field56, \n" +
			"field57, field58, field59, field60, \n" +
			"field61, field62, field63, field64, \n" +
			"field65, field66, field67, field68, \n" +
			"field69, field70, field71, field72, \n" +
			"field73, field74, field75, field76, \n" +
			"field77, field78, field79, field80, \n" +
			"field81, field82, field83, field84, \n" +
			"field85, field86, field87, field88, \n" +
			"field89, field90, field91, field92, \n" +
			"field93, field94, field95, field96, \n" +
			"field97, field98, field99;\n" +
			"static final Object o1 = null;\n" +
			"static final Object o2 = new Object();\n" +
			"  void foo1() {\n" +
			"	 final Object local = null;\n" +
			"	 if (local == null) {\n" +
			"		local.toString();\n" +
			"	 }\n" +
			"	 local.toString();\n" +
			"	 if (o1 == null) {\n" +	// report redundant null check
			"		o1.toString();\n" + // report NPE
			"	 }\n" +
			"    local.toString();\n" + // try to diffuse status for o1 / o2
			"	 o1.toString();\n" +	// already reported NPE above. So silent. Same behaviour as 'local'
			"	 if (o2 == null) {\n" + // report always false null check
			"		o2.toString();\n" + // dead code
			"	 }\n" +
			"	 o2.toString();" +
			"  }\n" +
			"}\n"},
		null,
		compilerOptions,
		"----------\n" + 
		"1. ERROR in X.java (at line 32)\n" + 
		"	if (local == null) {\n" + 
		"	    ^^^^^\n" + 
		"Redundant null check: The variable local can only be null at this location\n" + 
		"----------\n" + 
		"2. ERROR in X.java (at line 33)\n" + 
		"	local.toString();\n" + 
		"	^^^^^\n" + 
		"Null pointer access: The variable local can only be null at this location\n" + 
		"----------\n" + 
		"3. ERROR in X.java (at line 36)\n" + 
		"	if (o1 == null) {\n" + 
		"	    ^^\n" + 
		"Redundant null check: The field o1 can only be null at this location\n" + 
		"----------\n" + 
		"4. ERROR in X.java (at line 37)\n" + 
		"	o1.toString();\n" + 
		"	^^\n" + 
		"Null pointer access: The field o1 can only be null at this location\n" + 
		"----------\n" + 
		"5. ERROR in X.java (at line 41)\n" + 
		"	if (o2 == null) {\n" + 
		"	    ^^\n" + 
		"Null comparison always yields false: The field o2 cannot be null at this location\n" + 
		"----------\n" + 
		"6. WARNING in X.java (at line 41)\n" + 
		"	if (o2 == null) {\n" + 
		"		o2.toString();\n" + 
		"	 }\n" + 
		"	                ^^^^^^^^^^^^^^^^^^^^^^\n" + 
		"Dead code\n" + 
		"----------\n",
		JavacTestOptions.Excuse.EclipseWarningConfiguredAsError);
}

