//https://bugs.eclipse.org/bugs/show_bug.cgi?id=150074
public void test042() { 
	Map options = this.getCompilerOptions();
	options.put(CompilerOptions.OPTION_PreserveUnusedLocal, CompilerOptions.PRESERVE);
	
	this.runConformTest(
		new String[] {
			"X.java",
			"public class X {\n" + 
			"        public static void main(String[] args) {\n" + 
			"                for (int i : initForEach()) {\n" + 
			"                }\n" + 
			"        }\n" + 
			"        static int[] initForEach() {\n" + 
			"                System.out.println(\"initForEach\");\n" + 
			"                return new int[] {1, 2, 3, 4};\n" + 
			"        }\n" + 
			"}",
		},
		"initForEach",
		null,
		true,
		null,
		options,
		null);

	String expectedOutput =
		"  // Method descriptor #15 ([Ljava/lang/String;)V\n" + 
		"  // Stack: 2, Locals: 5\n" + 
		"  public static void main(java.lang.String[] args);\n" + 
		"     0  invokestatic X.initForEach() : int[] [16]\n" + 
		"     3  astore 4\n" + 
		"     5  iconst_0\n" + 
		"     6  istore_2\n" + 
		"     7  aload 4\n" + 
		"     9  arraylength\n" + 
		"    10  istore_3\n" + 
		"    11  goto 22\n" + 
		"    14  aload 4\n" + 
		"    16  iload_2\n" + 
		"    17  iaload\n" + 
		"    18  istore_1 [i]\n" + 
		"    19  iinc 2 1\n" + 
		"    22  iload_2\n" + 
		"    23  iload_3\n" + 
		"    24  if_icmplt 14\n" + 
		"    27  return\n" + 
		"      Line numbers:\n" + 
		"        [pc: 0, line: 3]\n" + 
		"        [pc: 27, line: 5]\n" + 
		"      Local variable table:\n" + 
		"        [pc: 0, pc: 28] local: args index: 0 type: java.lang.String[]\n" + 
		"        [pc: 19, pc: 27] local: i index: 1 type: int\n";
	
	try {
		File f = new File(OUTPUT_DIR + File.separator + "X.class");
		byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
		ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
		String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
		int index = result.indexOf(expectedOutput);
		if (index == -1 || expectedOutput.length() == 0) {
			System.out.println(Util.displayString(result, 3));
		}
		if (index == -1) {
			assertEquals("Wrong contents", expectedOutput, result);
		}
	} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
		assertTrue(false);
	} catch (IOException e) {
		assertTrue(false);
	}
}

