//Test that union type checks are done for a precise throw too
public void test010() {
	this.runNegativeTest(
		new String[] {
			"X.java",

			"public class X {\n" +
			"	public static void main(String[] args) {\n" + 
			"		try {\n" + 
			"			throw new DaughterOfFoo();\n"+
			"		} catch(SonOfFoo | DaughterOfFoo e) {\n" +
			"			e.printStackTrace();\n" +
			"		}\n" + 
			"	}\n" + 
			"}\n" +
			"class Foo extends Exception {}\n"+
			"class SonOfFoo extends Foo {}\n"+
			"class DaughterOfFoo extends Foo {}\n"
		},
		"----------\n" + 
		"1. ERROR in X.java (at line 5)\n" + 
		"	} catch(SonOfFoo | DaughterOfFoo e) {\n" + 
		"	        ^^^^^^^^\n" + 
		"Unreachable catch block for SonOfFoo. This exception is never thrown from the try statement body\n" + 
		"----------\n" + 
		"2. WARNING in X.java (at line 10)\n" + 
		"	class Foo extends Exception {}\n" + 
		"	      ^^^\n" + 
		"The serializable class Foo does not declare a static final serialVersionUID field of type long\n" + 
		"----------\n" + 
		"3. WARNING in X.java (at line 11)\n" + 
		"	class SonOfFoo extends Foo {}\n" + 
		"	      ^^^^^^^^\n" + 
		"The serializable class SonOfFoo does not declare a static final serialVersionUID field of type long\n" + 
		"----------\n" + 
		"4. WARNING in X.java (at line 12)\n" + 
		"	class DaughterOfFoo extends Foo {}\n" + 
		"	      ^^^^^^^^^^^^^\n" + 
		"The serializable class DaughterOfFoo does not declare a static final serialVersionUID field of type long\n" + 
		"----------\n");
}

