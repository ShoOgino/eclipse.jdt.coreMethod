// https://bugs.eclipse.org/bugs/show_bug.cgi?id=280054
// SHOULD FAIL AT 1.8 (18.2.3): The method get(Class<V>, Class<S>) in the type X.L is not applicable for the arguments (Class<V>, Class<X.B>)
public void test280054() {
	this.runNegativeTest(
		new String[] {
	    "X.java",
	    "public class X {\n" +
	    "static class A<V> {\n" +
	    "L l;\n" +
	    "public Class<V> vtype() {\n" +
	    "   return null;\n" +
	    "}\n" +
	    "public A<V> method1() {\n" +
	    "   return l.get(vtype(), B.class);\n" +
	    "}\n" +
	    "}\n" +
	    "static class L {\n" +
	    "public <V,S extends A<V>> S get(Class<V> vtype, Class<S> stype) {\n" +
	    "   return null;\n" +
	    "}\n" +
	    "}\n" +
	    "static class B<V> extends A<V> {\n" +
	    "public B<V> method2() {\n" +
	    "   return l.get(vtype(), B.class);\n" +
	    "}\n" +
	    "}\n" +
	    "}\n"
		},
		"----------\n" +
		"1. WARNING in X.java (at line 8)\n" +
		"	return l.get(vtype(), B.class);\n" +
		"	       ^^^^^^^^^^^^^^^^^^^^^^^\n" +
		"Type safety: Unchecked invocation get(Class<V>, Class<X.B>) of the generic method get(Class<V>, Class<S>) of type X.L\n" +
		"----------\n" +
		"2. WARNING in X.java (at line 8)\n" +
		"	return l.get(vtype(), B.class);\n" +
		"	       ^^^^^^^^^^^^^^^^^^^^^^^\n" +
		"Type safety: The expression of type X.B needs unchecked conversion to conform to X.A<V>\n" +
		"----------\n" +
		"3. WARNING in X.java (at line 18)\n" +
		"	return l.get(vtype(), B.class);\n" +
		"	       ^^^^^^^^^^^^^^^^^^^^^^^\n" +
		"Type safety: Unchecked invocation get(Class<V>, Class<X.B>) of the generic method get(Class<V>, Class<S>) of type X.L\n" +
		"----------\n" +
		"4. WARNING in X.java (at line 18)\n" +
		"	return l.get(vtype(), B.class);\n" +
		"	       ^^^^^^^^^^^^^^^^^^^^^^^\n" +
		"Type safety: The expression of type X.B needs unchecked conversion to conform to X.B<V>\n" +
		"----------\n");
}

