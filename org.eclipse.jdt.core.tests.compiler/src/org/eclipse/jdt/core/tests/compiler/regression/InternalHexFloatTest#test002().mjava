	/**
	 */
	public void test002() {
		List x = new ArrayList();
		// various forms of zero
		x.add(new FloatTest("0x0p0f", 0x0));
		x.add(new FloatTest("0x0p0F", 0x0));
		x.add(new FloatTest("0x0.0p0F", 0x0));
		x.add(new FloatTest("0x.0p0F", 0x0));
		x.add(new FloatTest("0x0.p0F", 0x0));
		x.add(new FloatTest("0x00000.00000000000p0F", 0x0));
		x.add(new FloatTest("0x0p99F", 0x0));
		x.add(new FloatTest("0x0p-99F", 0x0));
		x.add(new FloatTest("0x0p9999999F", 0x0));
		x.add(new FloatTest("0x0p-9999999F", 0x0));

		// small floats
		x.add(new FloatTest("0x0.8p0F", 0x3f000000));
		x.add(new FloatTest("0x0.4p0F", 0x3e800000));
		x.add(new FloatTest("0x0.2p0F", 0x3e000000));
		x.add(new FloatTest("0x0.1p0F", 0x3d800000));
		x.add(new FloatTest("0x0.08p0F", 0x3d000000));
		x.add(new FloatTest("0x0.04p0F", 0x3c800000));
		x.add(new FloatTest("0x0.02p0F", 0x3c000000));
		x.add(new FloatTest("0x0.01p0F", 0x3b800000));
		x.add(new FloatTest("0x0.010p0F", 0x3b800000));
		x.add(new FloatTest("0x1p0F", 0x3f800000));
		x.add(new FloatTest("0x2p0F", 0x40000000));
		x.add(new FloatTest("0x4p0F", 0x40800000));
		x.add(new FloatTest("0x8p0F", 0x41000000));
		x.add(new FloatTest("0x10p0F", 0x41800000));
		x.add(new FloatTest("0x20p0F", 0x42000000));
		x.add(new FloatTest("0x40p0F", 0x42800000));
		x.add(new FloatTest("0x80p0F", 0x43000000));
		x.add(new FloatTest("0x80.p0F", 0x43000000));
		x.add(new FloatTest("0x80.8p0F", 0x43008000));
		x.add(new FloatTest("0x80.80p0F", 0x43008000));
		x.add(new FloatTest("0x123456789p0F", 0x4f91a2b4));
		x.add(new FloatTest("0xabcedfp0F", 0x4b2bcedf));
		x.add(new FloatTest("0xABCDEFp0F", 0x4b2bcdef));

		x.add(new FloatTest("0x0.000000000000000000000000000001p0f", 0x3800000));
		x.add(new FloatTest("0x10000000000000000000000000000000p0f", 0x7d800000));

		// rounding to 24 bits
		x.add(new FloatTest("0x823456p0f",   0x4b023456));
		x.add(new FloatTest("0xFFFFFF80p0f", 0x4f800000));
		x.add(new FloatTest("0xFFFFFF40p0f", 0x4f7fffff));
		x.add(new FloatTest("0xFFFFFF20p0f", 0x4f7fffff));
		x.add(new FloatTest("0x123456p0f",   0x4991a2b0));
		x.add(new FloatTest("0x7890abp0f",   0x4af12156));
		x.add(new FloatTest("0xcdefABp0f",   0x4b4defab));
		x.add(new FloatTest("0xCDEFdep0f",   0x4b4defde));
		x.add(new FloatTest("0x123456p0f",   0x4991a2b0));
		x.add(new FloatTest("0x7FFFFF8p0f",  0x4cffffff));
		x.add(new FloatTest("0x3FFFFFCp0f",  0x4c7fffff));
		x.add(new FloatTest("0x1FFFFFEp0f",  0x4bffffff));

		// rounding to overflow at +128; denormalized at -126; underflow at -150
		x.add(new FloatTest("0x1p5000F",     0x7f800000));
		x.add(new FloatTest("0x1p-5000F",    0x7fc00000));
		x.add(new FloatTest("0x1.0p126f",    0x7e800000));
		x.add(new FloatTest("0x1.0p127f",    0x7f000000));
		x.add(new FloatTest("0x1.0p128f",    0x7f800000));
		x.add(new FloatTest("0x1.0p129f",    0x7f800000));
		x.add(new FloatTest("0x1.0p-127f",   0x00400000));
		x.add(new FloatTest("0x1.0p-128f",   0x00200000));
		x.add(new FloatTest("0x1.0p-129f",   0x00100000));
		x.add(new FloatTest("0x1.0p-149f",   0x00000001));
		x.add(new FloatTest("0x1.0p-150f",   0x7fc00000));
		x.add(new FloatTest("0x1.0p-151f",   0x7fc00000));
		x.add(new FloatTest("0x0.8p127f",    0x7e800000));
		x.add(new FloatTest("0x0.8p128f",    0x7f000000));
		x.add(new FloatTest("0x0.8p129f",    0x7f800000));
		x.add(new FloatTest("0x0.8p-125f",   0x00800000));
		x.add(new FloatTest("0x0.8p-126f",   0x00400000));
		x.add(new FloatTest("0x0.8p-127f",   0x00200000));
		x.add(new FloatTest("0x0.8p-128f",   0x00100000));
		x.add(new FloatTest("0x0.8p-148f",   0x00000001));
		x.add(new FloatTest("0x0.8p-149f",   0x7fc00000));
		x.add(new FloatTest("0x0.8p-150f",   0x7fc00000));
		x.add(new FloatTest("0x0.4p-124f",   0x00800000));
		x.add(new FloatTest("0x0.4p-125f",   0x00400000));
		x.add(new FloatTest("0x0.4p-126f",   0x00200000));
		x.add(new FloatTest("0x0.4p-147f",   0x00000001));
		x.add(new FloatTest("0x0.4p-148f",   0x7fc00000));
		x.add(new FloatTest("0x0.4p-149f",   0x7fc00000));
		x.add(new FloatTest("0x0.4p-150f",   0x7fc00000));
		x.add(new FloatTest("0x0.2p-123f",   0x00800000));
		x.add(new FloatTest("0x0.2p-124f",   0x00400000));
		x.add(new FloatTest("0x0.2p-125f",   0x00200000));
		x.add(new FloatTest("0x0.2p-126f",   0x00100000));
		x.add(new FloatTest("0x0.2p-146f",   0x00000001));
		x.add(new FloatTest("0x0.2p-147f",   0x7fc00000));
		x.add(new FloatTest("0x0.2p-148f",   0x7fc00000));
		x.add(new FloatTest("0x0.2p-149f",   0x7fc00000));
		x.add(new FloatTest("0x0.1p-122f",   0x00800000));
		x.add(new FloatTest("0x0.1p-123f",   0x00400000));
		x.add(new FloatTest("0x0.1p-124f",   0x00200000));
		x.add(new FloatTest("0x0.1p-145f",   0x00000001));
		x.add(new FloatTest("0x0.1p-146f",   0x7fc00000));
		x.add(new FloatTest("0x0.1p-147f",   0x7fc00000));
		x.add(new FloatTest("0x0.1p-148f",   0x7fc00000));

		for (Iterator it = x.iterator(); it.hasNext();) {
			FloatTest t = (FloatTest) it.next();
			String s = t.input;
			int expectedBits = t.output;
			float libExpected = 0.0f;
			boolean isJ2SE5;
			try {
				// note that next line only works with a 1.5 J2SE
				libExpected = Float.parseFloat(s);
				isJ2SE5 = true;
			} catch(NumberFormatException e) {
				isJ2SE5 = false;
			}
			float dActual = FloatUtil.valueOfHexFloatLiteral(s.toCharArray());
			long actualBits = Float.floatToIntBits(dActual);
			if (isJ2SE5) {
				// cross-check bits computed by J2SE 1.5 library
				int libExpectedBits = Float.floatToRawIntBits(libExpected);
				if (expectedBits != libExpectedBits) {
					if (Float.isNaN(Float.intBitsToFloat(expectedBits)) && libExpected == 0.0f) {
						// this is ok - we return NaN where lib quietly underflows to 0
					} else {
						assertEquals("Test has wrong table value for " + s, libExpectedBits, expectedBits);
					}
				}
			}
			assertEquals("Wrong float value for " + s, expectedBits, actualBits);
		}
	}

