	// if an interface methods is explicitly "abstract" it cannot have a (default) body
	public void testModifiers4() {
		runNegativeTest(
		new String[] {
			"I.java",
			"import java.lang.annotation.*;\n" +
			"public interface I {\n" +
			"    abstract void foo1();\n" + // OK
			"    public abstract default void foo2() {}\n" +
			"    default abstract void foo3() {}\n" +
			"    void foo4() { }\n" + // implicit "abstract" without "default" doesn't allow a body, either
			"    abstract static default void foo5() {}\n" + // double fault
			"}\n"},
			"----------\n" + 
			"1. ERROR in I.java (at line 4)\n" + 
			"	public abstract default void foo2() {}\n" + 
			"	                             ^^^^^^\n" + 
			"Illegal modifier for the interface method foo2; only public, abstract and strictfp are permitted\n" + 
			"----------\n" + 
			"2. ERROR in I.java (at line 5)\n" + 
			"	default abstract void foo3() {}\n" + 
			"	                      ^^^^^^\n" + 
			"Illegal modifier for the interface method foo3; only public, abstract and strictfp are permitted\n" + 
			"----------\n" + 
			"3. ERROR in I.java (at line 6)\n" + 
			"	void foo4() { }\n" + 
			"	     ^^^^^^\n" + 
			"Abstract methods do not specify a body\n" + 
			"----------\n" + 
			"4. ERROR in I.java (at line 7)\n" + 
			"	abstract static default void foo5() {}\n" + 
			"	                             ^^^^^^\n" + 
			"Illegal modifier for the interface method foo5; only public, abstract and strictfp are permitted\n" + 
			"----------\n");
	}

