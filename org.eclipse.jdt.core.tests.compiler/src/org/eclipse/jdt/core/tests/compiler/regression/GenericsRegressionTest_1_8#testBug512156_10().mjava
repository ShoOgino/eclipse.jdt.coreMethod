	public void testBug512156_10() {
		runConformTest(
			new String[] {
				"Test10.java",
				"import java.util.Objects;\n" + 
				"import java.util.stream.Stream;\n" + 
				"import java.util.stream.StreamSupport;\n" + 
				"\n" + 
				"/**\n" + 
				" * For comprehension for 10 iterables. Adapted from the http://javaslang.io library to help finding JDT performance bottlenecks.\n" + 
				" *\n" + 
				" */\n" + 
				"public class Test10 {\n" + 
				"\n" + 
				"    public interface Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R> {\n" + 
				"        R apply(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7, T8 t8, T9 t9, T10 t10);\n" + 
				"    }    \n" + 
				"    \n" + 
				"    public static class For10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> {\n" + 
				"\n" + 
				"        private final Iterable<T1> ts1;\n" + 
				"        private final Iterable<T2> ts2;\n" + 
				"        private final Iterable<T3> ts3;\n" + 
				"        private final Iterable<T4> ts4;\n" + 
				"        private final Iterable<T5> ts5;\n" + 
				"        private final Iterable<T6> ts6;\n" + 
				"        private final Iterable<T7> ts7;\n" + 
				"        private final Iterable<T8> ts8;\n" + 
				"        private final Iterable<T9> ts9;\n" + 
				"        private final Iterable<T10> ts10;\n" + 
				"\n" + 
				"        private For10(Iterable<T1> ts1, Iterable<T2> ts2, Iterable<T3> ts3, Iterable<T4> ts4, Iterable<T5> ts5, Iterable<T6> ts6,\n" + 
				"                Iterable<T7> ts7, Iterable<T8> ts8, Iterable<T9> ts9, Iterable<T10> ts10) {\n" + 
				"            this.ts1 = ts1;\n" + 
				"            this.ts2 = ts2;\n" + 
				"            this.ts3 = ts3;\n" + 
				"            this.ts4 = ts4;\n" + 
				"            this.ts5 = ts5;\n" + 
				"            this.ts6 = ts6;\n" + 
				"            this.ts7 = ts7;\n" + 
				"            this.ts8 = ts8;\n" + 
				"            this.ts9 = ts9;\n" + 
				"            this.ts10 = ts10;\n" + 
				"        }\n" + 
				"\n" + 
				"        /**\n" + 
				"         * Yields a result for elements of the cross product of the underlying Iterables.\n" + 
				"         *\n" + 
				"         * @param f\n" + 
				"         *            a function that maps an element of the cross product to a result\n" + 
				"         * @param <R>\n" + 
				"         *            type of the resulting {@code Iterator} elements\n" + 
				"         * @return an {@code Iterator} of mapped results\n" + 
				"         */\n" + 
				"        public <R> Stream<R> yield(\n" + 
				"                Function10<? super T1, ? super T2, ? super T3, ? super T4, ? super T5, ? super T6, ? super T7, ? super T8, ? super T9, ? super T10, ? extends R> f) {\n" + 
				"            Objects.requireNonNull(f, \"f is null\");\n" + 
				"            return this.stream(ts1)\n" + 
				"                .flatMap(t1 ->\n" + 
				"                    stream(ts2).flatMap(t2 -> \n" + 
				"                        stream(ts3).flatMap(t3 -> \n" + 
				"                            stream(ts4).flatMap(t4 -> \n" + 
				"                                stream(ts5).flatMap(t5 -> \n" + 
				"                                    stream(ts6).flatMap(t6 -> \n" + 
				"                                        stream(ts7).flatMap(t7 -> \n" + 
				"                                            stream(ts8).flatMap(t8 ->\n" + 
				"                                            	stream(ts9).flatMap(t9 ->\n" + 
				"                                            		stream(ts10).map(t10 -> /**/\n" + 
				"                                                		f.apply(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10)\n" + 
				"                                                	)\n" + 
				"                                                )\n" + 
				"                                            )\n" + 
				"                                        )\n" + 
				"                                    )\n" + 
				"                                )\n" + 
				"                            )\n" + 
				"                        )\n" + 
				"                    )\n" + 
				"                );\n" + 
				"        }\n" + 
				"\n" + 
				"        private <T> Stream<T> stream(Iterable<T> iterable) {\n" + 
				"            return StreamSupport.stream(iterable.spliterator(), false);\n" + 
				"        }\n" + 
				"\n" + 
				"    }\n" + 
				"}\n"
			});
	}

