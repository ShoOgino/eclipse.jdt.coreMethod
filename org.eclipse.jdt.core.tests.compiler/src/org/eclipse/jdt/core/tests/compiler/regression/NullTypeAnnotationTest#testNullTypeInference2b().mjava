	// functional interface with nullness inferred from target type with explicit nullness
	public void testNullTypeInference2b() {
		runNegativeTestWithLibs(
			new String[] {
				"PolyNull.java",
				"import org.eclipse.jdt.annotation.*;\n" +
				"\n" +
				"interface Func<T>  {\n" +
				"	T a(T i);\n" +
				"}\n" +
				"public class PolyNull {\n" +
				"	@NonNull String extract(Func<@NonNull String> f, @NonNull String s) { return f.a(s); }\n" +
				"	@NonNull String testOK() {\n" +
				"		return extract(i -> i, \"hallo\");\n" +
				"	}\n" +
				"	@NonNull String testERR() {\n" +
				"		return extract(i -> null, \"hallo\"); // err\n" +
				"	}\n" +
				"}\n"
			},
			getCompilerOptions(),
			"----------\n" +
			"1. ERROR in PolyNull.java (at line 12)\n" +
			"	return extract(i -> null, \"hallo\"); // err\n" +
			"	                    ^^^^\n" +
			"Null type mismatch: required \'@NonNull String\' but the provided value is null\n" +
			"----------\n");
	}

