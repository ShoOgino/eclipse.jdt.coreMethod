	public void test055f_codeblocks_exceptionParameterComplex() throws Exception {
		this.runConformTest(
			new String[] {
				"X.java",
				"import java.lang.annotation.Target;\n" + 
				"import java.lang.annotation.Retention;\n" + 
				"import static java.lang.annotation.ElementType.*;\n" + 
				"import static java.lang.annotation.RetentionPolicy.*;\n" + 
				"class Exc1 extends RuntimeException {" +				
				"    private static final long serialVersionUID = 1L;\n" +
				"}\n"+
				"class Exc2 extends RuntimeException {" +				
				"    private static final long serialVersionUID = 1L;\n" +
				"}\n"+
				"class Exc3 extends RuntimeException {" +				
				"    private static final long serialVersionUID = 1L;\n" +
				"}\n"+
				"public class X {\n" + 
				"	public static void main(String[] args) {\n" + 
				"		try {\n" + 
				"			System.out.println(42);\n" +
				"		} catch(@B(1) Exc1 | Exc2 | @B(2) Exc3 t) {\n" + 
				"			t.printStackTrace();\n" + 
				"		}\n" + 
				"		try {\n" + 
				"			System.out.println(43);\n" +
				"		} catch(@B(1) Exc1 t) {\n" + 
				"			t.printStackTrace();\n" + 
				"		}\n" + 
				"		try {\n" + 
				"			System.out.println(44);\n" +
				"		} catch(@B(1) Exc1 | @B(2) Exc2 t) {\n" + 
				"			t.printStackTrace();\n" + 
				"		}\n" + 
				"	}\n" + 
				"}",
				"B.java",
				"import java.lang.annotation.Target;\n" + 
				"import static java.lang.annotation.ElementType.*;\n" + 
				"import java.lang.annotation.Retention;\n" + 
				"import static java.lang.annotation.RetentionPolicy.*;\n" + 
				"@Target(TYPE_USE)\n" + 
				"@Retention(RUNTIME)\n" + 
				"@interface B {\n" + 
				"	int value() default 99;\n" + 
				"}\n",
		},
		"42\n43\n44");
		String expectedOutput =
			"    RuntimeVisibleTypeAnnotations: \n" + 
			"      #47 @B(\n" + 
			"        #48 value=(int) 1 (constant type)\n" + 
			"        target type = 0x42 EXCEPTION_PARAMETER\n" + 
			"        exception table index = 0\n" + 
			"      )\n" + 
			"      #47 @B(\n" + 
			"        #48 value=(int) 2 (constant type)\n" + 
			"        target type = 0x42 EXCEPTION_PARAMETER\n" + 
			"        exception table index = 2\n" + 
			"      )\n" + 
			"      #47 @B(\n" + 
			"        #48 value=(int) 1 (constant type)\n" + 
			"        target type = 0x42 EXCEPTION_PARAMETER\n" + 
			"        exception table index = 3\n" + 
			"      )\n" + 
			"      #47 @B(\n" + 
			"        #48 value=(int) 1 (constant type)\n" + 
			"        target type = 0x42 EXCEPTION_PARAMETER\n" + 
			"        exception table index = 4\n" + 
			"      )\n" + 
			"      #47 @B(\n" + 
			"        #48 value=(int) 2 (constant type)\n" + 
			"        target type = 0x42 EXCEPTION_PARAMETER\n" + 
			"        exception table index = 5\n" + 
			"      )\n";
		checkDisassembledClassFile(OUTPUT_DIR + File.separator + "X.class", "X", expectedOutput, ClassFileBytesDisassembler.SYSTEM);
	}	

