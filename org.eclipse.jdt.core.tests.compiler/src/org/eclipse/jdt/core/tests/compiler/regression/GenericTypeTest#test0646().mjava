	public void test0646() {
	    this.runNegativeTest(
            new String[] {
                "X.java",
				"public class X {\n" + 
				"	public static void main(String[] args) {\n" + 
				"		Outer.Inner inner = new Outer().new Inner();\n" + 
				"		X x = inner.setOuterT(new X());\n" + 
				"		\n" + 
				"		Outer<String>.Inner innerS = inner;\n" + 
				"	}\n" + 
				"}\n" + 
				"\n" + 
				"class Outer<T> {\n" + 
				"	T t;\n" + 
				"	class Inner {\n" + 
				"		T setOuterT(T t1) {\n" + 
				"			t = t1;\n" + 
				"			return t;\n" + 
				"		}\n" + 
				"	}\n" + 
				"}\n",
	        },
	        "----------\n" + 
			"1. WARNING in X.java (at line 3)\n" + 
			"	Outer.Inner inner = new Outer().new Inner();\n" + 
			"	^^^^^^^^^^^\n" + 
			"Outer.Inner is a raw type. References to generic type Outer<T>.Inner should be parameterized\n" + 
			"----------\n" + 
			"2. WARNING in X.java (at line 3)\n" + 
			"	Outer.Inner inner = new Outer().new Inner();\n" + 
			"	                        ^^^^^\n" + 
			"Outer is a raw type. References to generic type Outer<T> should be parameterized\n" + 
			"----------\n" + 
			"3. WARNING in X.java (at line 3)\n" + 
			"	Outer.Inner inner = new Outer().new Inner();\n" + 
			"	                                    ^^^^^\n" + 
			"Outer.Inner is a raw type. References to generic type Outer<T>.Inner should be parameterized\n" + 
			"----------\n" + 
			"4. WARNING in X.java (at line 4)\n" + 
			"	X x = inner.setOuterT(new X());\n" + 
			"	      ^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
			"Type safety: The method setOuterT(Object) belongs to the raw type Outer.Inner. References to generic type Outer<T>.Inner should be parameterized\n" + 
			"----------\n" + 
			"5. ERROR in X.java (at line 4)\n" + 
			"	X x = inner.setOuterT(new X());\n" + 
			"	      ^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
			"Type mismatch: cannot convert from Object to X\n" + 
			"----------\n" + 
			"6. WARNING in X.java (at line 6)\n" + 
			"	Outer<String>.Inner innerS = inner;\n" + 
			"	                             ^^^^^\n" + 
			"Type safety: The expression of type Outer.Inner needs unchecked conversion to conform to Outer<String>.Inner\n" + 
			"----------\n");
	}				

