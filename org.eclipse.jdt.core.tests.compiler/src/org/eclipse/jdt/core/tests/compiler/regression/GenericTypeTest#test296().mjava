	// static method #start() gets its type does not get substituted when accessed through raw type
	public void test296() {
		this.runNegativeTest(
			new String[] {
				"C.java", //---------------------------
				"public class C<U> {\n" + 
				"\n" + 
				"	void bar() {\n" + 
				"		new B().start().get(new B().start()).get(new B().start());\n" + 
				"	}\n" + 
				"}\n",
				"B.java", //---------------------------
				"public class B<X>{\n" + 
				"	X get(B<X> bx) { return null; }\n" + 
				"	static B<B<D>> start() { return null; }\n" + 
				"}",
				"D.java", //---------------------------
				"public class D<Y>{}\n",
			},
		"----------\n" + 
		"1. WARNING in C.java (at line 4)\n" + 
		"	new B().start().get(new B().start()).get(new B().start());\n" + 
		"	^^^^^^^^^^^^^^^\n" + 
		"The static method start() from the type B should be accessed in a static way\n" + 
		"----------\n" + 
		"2. WARNING in C.java (at line 4)\n" + 
		"	new B().start().get(new B().start()).get(new B().start());\n" + 
		"	                    ^^^^^^^^^^^^^^^\n" + 
		"The static method start() from the type B should be accessed in a static way\n" + 
		"----------\n" + 
		"3. ERROR in C.java (at line 4)\n" + 
		"	new B().start().get(new B().start()).get(new B().start());\n" + 
		"	                                     ^^^\n" + 
		"The method get(B<D>) in the type B<D> is not applicable for the arguments (B<B<D>>)\n" + 
		"----------\n" + 
		"4. WARNING in C.java (at line 4)\n" + 
		"	new B().start().get(new B().start()).get(new B().start());\n" + 
		"	                                         ^^^^^^^^^^^^^^^\n" + 
		"The static method start() from the type B should be accessed in a static way\n" + 
		"----------\n");
	}			

