	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=94754
	public void test050a() {
		String expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?
				"----------\n" +
				"1. WARNING in X.java (at line 2)\n" +
				"	public static <S extends A> void foo() { System.out.print(\"A\"); }\n" +
				"	                                 ^^^^^\n" +
				"Duplicate method foo() in type X\n" +
				"----------\n" +
				"2. WARNING in X.java (at line 3)\n" +
				"	public static <N extends B> N foo() { System.out.print(\"B\"); return null; }\n" +
				"	                              ^^^^^\n" +
				"Duplicate method foo() in type X\n" +
				"----------\n" +
				"3. ERROR in X.java (at line 5)\n" +
				"	X.foo();\n" +
				"	  ^^^\n" +
				"The method foo() is ambiguous for the type X\n" +
				"----------\n" +
				"4. ERROR in X.java (at line 6)\n" +
				"	foo();\n" +
				"	^^^\n" +
				"The method foo() is ambiguous for the type X\n" +
				"----------\n":
					"----------\n" +
					"1. ERROR in X.java (at line 2)\n" +
					"	public static <S extends A> void foo() { System.out.print(\"A\"); }\n" +
					"	                                 ^^^^^\n" +
					"Duplicate method foo() in type X\n" +
					"----------\n" +
					"2. ERROR in X.java (at line 3)\n" +
					"	public static <N extends B> N foo() { System.out.print(\"B\"); return null; }\n" +
					"	                              ^^^^^\n" +
					"Duplicate method foo() in type X\n" +
					"----------\n";
		this.runNegativeTest(
			new String[] {
				"X.java",
				"public class X {\n" +
				"	public static <S extends A> void foo() { System.out.print(\"A\"); }\n" +
				"	public static <N extends B> N foo() { System.out.print(\"B\"); return null; }\n" +
				"	static void test () {\n" +
				"		X.foo();\n" +
				"		foo();\n" +
				"	}\n" +
				"}\n" +
				"class A {}\n" +
				"class B {}"
			},
			expectedCompilerLog
		);
/* javac 7
X.java:3: name clash: <N>foo() and <S>foo() have the same erasure
        public static <N extends B> N foo() { System.out.print("B"); return null; }
                                      ^
  where N,S are type-variables:
    N extends B declared in method <N>foo()
    S extends A declared in method <S>foo()
1 error
 */
	}

