// command line - help
// amended for https://bugs.eclipse.org/bugs/show_bug.cgi?id=141512 (checking
// width)
public void test012(){
	final String expectedOutput =
        "{0} {1}\n" + 
        "{2}\n" + 
        " \n" + 
        " Usage: <options> <source files | directories>\n" + 
        " If directories are specified, then their source contents are compiled.\n" + 
        " Possible options are listed below. Options enabled by default are prefixed\n" + 
        " with ''+''.\n" + 
        " \n" + 
        " Classpath options:\n" + 
        "    -cp -classpath <directories and zip/jar files separated by " + File.pathSeparator + ">\n" + 
        "                       specify location for application classes and sources.\n" + 
        "                       Each directory or file can specify access rules for\n" + 
        "                       types between ''['' and '']'' (e.g. [-X] to forbid\n" + 
        "                       access to type X, [~X] to discourage access to type X,\n" + 
        "                       [+p/X:-p/*] to forbid access to all types in package p\n" + 
        "                       but allow access to p/X)\n" + 
        "    -bootclasspath <directories and zip/jar files separated by " + File.pathSeparator + ">\n" + 
        "                       specify location for system classes. Each directory or\n" + 
        "                       file can specify access rules for types between ''[''\n" + 
        "                       and '']''\n" + 
        "    -sourcepath <directories and zip/jar files separated by " + File.pathSeparator + ">\n" + 
        "                       specify location for application sources. Each directory\n" + 
        "                       or file can specify access rules for types between ''[''\n" + 
        "                       and '']''. Each directory can further specify a specific\n" + 
        "                       destination directory using a ''-d'' option between ''[''\n" +
        "                       and '']''; this overrides the general ''-d'' option.\n" +
        "                       .class files created from source files contained in a\n" + 
        "                       jar file are put in the user.dir folder in case no\n" + 
        "                       general ''-d'' option is specified. zip/jar files cannot\n" +
        "                       override the general ''-d'' option\n" + 
        "    -extdirs <directories separated by " + File.pathSeparator + ">\n" + 
        "                       specify location for extension zip/jar files\n" + 
        "    -endorseddirs <directories separated by " + File.pathSeparator + ">\n" + 
        "                       specify location for endorsed zip/jar files\n" + 
        "    -d <dir>           destination directory (if omitted, no directory is\n" + 
        "                       created); this option can be overridden per source\n" + 
		"                       directory\n" +
		"    -d none            generate no .class files\n" + 
        "    -encoding <enc>    specify custom encoding for all sources. Each\n" + 
        "                       file/directory can override it when suffixed with\n" + 
        "                       ''[''<enc>'']'' (e.g. X.java[utf8])\n" + 
        " \n" + 
        " Compliance options:\n" + 
        "    -1.3               use 1.3 compliance (-source 1.3 -target 1.1)\n" + 
        "    -1.4             + use 1.4 compliance (-source 1.3 -target 1.2)\n" + 
        "    -1.5 -5 -5.0       use 1.5 compliance (-source 1.5 -target 1.5)\n" + 
        "    -1.6 -6 -6.0       use 1.6 compliance (-source 1.6 -target 1.6)\n" + 
        "    -1.7 -7 -7.0       use 1.7 compliance (-source 1.7 -target 1.7)\n" + 
        "    -source <version>  set source level: 1.3 to 1.7 (or 5, 5.0, etc)\n" + 
        "    -target <version>  set classfile target: 1.1 to 1.7 (or 5, 5.0, etc)\n" + 
        " \n" + 
        " Warning options:\n" + 
        "    -deprecation     + deprecation outside deprecated code\n" + 
        "    -nowarn -warn:none disable all warnings\n" + 
        "    -?:warn -help:warn display advanced warning options\n" + 
        " \n" + 
        " Debug options:\n" + 
        "    -g[:lines,vars,source] custom debug info\n" + 
        "    -g:lines,source  + both lines table and source debug info\n" + 
        "    -g                 all debug info\n" + 
        "    -g:none            no debug info\n" + 
        "    -preserveAllLocals preserve unused local vars for debug purpose\n" + 
        " \n" + 
        " Ignored options:\n" + 
        "    -J<option>         pass option to virtual machine (ignored)\n" + 
        "    -X<option>         specify non-standard option (ignored)\n" + 
        "    -X                 print non-standard options and exit (ignored)\n" + 
        "    -O                 optimize for execution time (ignored)\n" + 
        " \n" + 
        " Advanced options:\n" + 
        "    @<file>            read command line arguments from file\n" + 
        "    -maxProblems <n>   max number of problems per compilation unit (100 by\n" + 
        "                       default)\n" + 
        "    -log <file>        log to a file. If the file extension is ''.xml'', then\n" + 
        "                       the log will be a xml file.\n" + 
        "    -proceedOnError    do not stop at first error, dumping class files with\n" + 
        "                       problem methods\n" + 
        "    -verbose           enable verbose output\n" + 
        "    -referenceInfo     compute reference info\n" + 
        "    -progress          show progress (only in -log mode)\n" + 
        "    -time              display speed information \n" + 
        "    -noExit            do not call System.exit(n) at end of compilation (n==0\n" + 
        "                       if no error)\n" + 
        "    -repeat <n>        repeat compilation process <n> times for perf analysis\n" + 
        "    -inlineJSR         inline JSR bytecode (implicit if target >= 1.5)\n" + 
        "    -enableJavadoc     consider references in javadoc\n" + 
        "    -Xemacs            used to enable emacs-style output\n" + 
        " \n" + 
        "    -? -help           print this help message\n" + 
        "    -v -version        print compiler version\n" + 
        "    -showversion       print compiler version and continue\n" + 
        "\n";
	String expandedExpectedOutput = 
		MessageFormat.format(expectedOutput, new String[] {
				MAIN.bind("compiler.name"),
				MAIN.bind("compiler.version"),
				MAIN.bind("compiler.copyright")
		// because misc.version is mono-line - reconsider if this changes
//		MessageFormat.format(expectedOutput, new String[] {
//				Main.bind("misc.version", new String[] {
//					Main.bind("compiler.name"),
//					Main.bind("compiler.version"),
//					Main.bind("compiler.copyright")
//				}),
				// File.pathSeparator
			});
		this.runConformTest(
		new String[0],
        " -help -referenceInfo",
        expandedExpectedOutput,
        "", true);
	checkWidth(expandedExpectedOutput, 80);
}

