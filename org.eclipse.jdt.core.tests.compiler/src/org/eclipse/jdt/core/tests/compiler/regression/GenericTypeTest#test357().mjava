	public void test357() {
		this.runNegativeTest(
			new String[] {
				"X.java",
				"public class X extends Y {\n" + 
				"	<T> T foo(Class<T> c) { return null; }\n" +
				"}\n" + 
				"class Y {\n" + 
				"	<T, S> T foo(Class<T> c) { return null; }\n" +
				"}"
			},
			"----------\n" + 
			"1. ERROR in X.java (at line 2)\r\n" + 
			"	<T> T foo(Class<T> c) { return null; }\r\n" + 
			"	      ^^^^^^^^^^^^^^^\n" + 
			"Name clash : The method foo(Class<T>) of type X has the same erasure as foo(Class<T>) of type Y but does not override it\n" + 
			"----------\n");
	}
	// 76720
//	public void test358() {
//		this.runConformTest(
//			new String[] {
//				"MyClass.java",
//				"public class MyClass {}\n",
//				"A.java",
//				"public interface A<M extends MyClass> {}\n",
//				"B.java",
//				"public interface B<M extends MyClass> extends A<M> {}\n",
//				"C.java",
//				"public class C implements B<MyClass>\n",
//			},
//			"");
//	}	
//		this.runConformTest(
//			new String[] {
//				"MyClass.java",
//				"public class MyClass {}\n",
//				"A.java",
//				"public interface A<M extends MyClass> {}\n",
//				"B.java",
//				"public interface B<M extends MyClass> extends A<M> {}\n",
//				"C.java",
//				"public class C implements B<MyClass>\n",
//			},
//			"",
//			);
//	}	

