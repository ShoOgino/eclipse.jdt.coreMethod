// ensure no raw type ref complaint inside instanceof / cast
public void test830() {
	this.runNegativeTest(
		new String[] {
			"X.java",
			"import java.util.*;\n" +
			"public class X<T> {\n" + 
			"	void foo(Object o) {\n" + 
			"		boolean b = o instanceof X;\n" + 
			"		X x = (X) o;\n" + 
			"		X<String> xs = (X<String>)o;\n" + 
			"		Zork z;\n" + 
			"	}\n" + 
			"	void bar(ArrayList<String> al) {\n" + 
			"		List l = (List) al;\n" +
			"	}\n" + 			
			"}\n",
		},
		"----------\n" + 
		"1. WARNING in X.java (at line 5)\r\n" + 
		"	X x = (X) o;\r\n" + 
		"	^\n" + 
		"X is a raw type. References to generic type X<T> should be parameterized\n" + 
		"----------\n" + 
		"2. WARNING in X.java (at line 6)\r\n" + 
		"	X<String> xs = (X<String>)o;\r\n" + 
		"	               ^^^^^^^^^^^^\n" + 
		"Type safety: The cast from Object to X<String> is actually checking against the erased type X\n" + 
		"----------\n" + 
		"3. ERROR in X.java (at line 7)\r\n" + 
		"	Zork z;\r\n" + 
		"	^^^^\n" + 
		"Zork cannot be resolved to a type\n" + 
		"----------\n" + 
		"4. WARNING in X.java (at line 10)\r\n" + 
		"	List l = (List) al;\r\n" + 
		"	^^^^\n" + 
		"List is a raw type. References to generic type List<E> should be parameterized\n" + 
		"----------\n" + 
		"5. WARNING in X.java (at line 10)\r\n" + 
		"	List l = (List) al;\r\n" + 
		"	         ^^^^^^^^^\n" + 
		"Unnecessary cast from ArrayList<String> to List\n" + 
		"----------\n");
}

