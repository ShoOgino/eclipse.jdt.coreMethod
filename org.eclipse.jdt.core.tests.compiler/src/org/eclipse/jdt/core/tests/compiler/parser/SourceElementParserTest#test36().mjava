public void test36() {

	String s =
		"package a;							\n"	+
		"import java.lang.*;				\n"	+
		"import java.util.*;				\n"	+
		"									\n"	+
		"public class X {					\n"	+
		"	void foo() {					\n"	+
		"		System.out.println();		\n"	+
		"									\n"	+
		"		class L extends {			\n"	+
		"			public int l;			\n"	+
		"			void baz(){}			\n"	+
		"		}							\n"	+
		"									\n"	+
		"		int h;						\n"	+
		"									\n"	+
		"	void bar(){						\n"	+
		"	void truc(){					\n"	+
		"}									\n";

	String expectedUnitToString =
		"package a;\n"
		+ "import java.lang.*;\n"
		+ "import java.util.*;\n"
		+ "public class X {\n"
		+ "\tvoid foo() {}\n"
		+ "\tvoid bar() {}\n"
		+ "\tvoid truc() {}\n"
		+ "}";

	String testName = "test36: diet parse";
	dietParse(s,testName);

	assertEquals(
		"Invalid class declarationSourceStart ",
		76,
		this.currentType.getDeclarationSourceStart());

	assertEquals(
		"Invalid class declarationSourceEnd ",
		309,
		this.currentType.getDeclarationSourceEnd());

	assertTrue("doesn't contain superinterfaces " , this.currentType.getInterfaceNames() == null);

	SourceField[] fields = this.currentType.getFields();
	assertTrue(" invalid fields ", fields == null);

	SourceMethod[] methods = this.currentType.getMethods();
	assertTrue(" invalid methods ", methods != null);
	assertEquals(" contains 3 methods ", 3, methods.length);

	assertEquals("Invalid declaration source start for method foo", 99, methods[0].getDeclarationSourceStart());
	assertEquals("Invalid declaration source end for method foo", 260, methods[0].getDeclarationSourceEnd());

	assertEquals("Invalid declaration source start for method bar", 262, methods[1].getDeclarationSourceStart());
	assertEquals("Invalid declaration source end for method bar", 279, methods[1].getDeclarationSourceEnd());

	assertEquals("Invalid declaration source start for method truc", 281, methods[2].getDeclarationSourceStart());
	assertEquals("Invalid declaration source end for method truc", 299, methods[2].getDeclarationSourceEnd());

	assertEquals(" Invalid actual name for method foo", "foo", methods[0].getActualName());

	assertEquals(" Invalid actual name for method bar", "bar", methods[1].getActualName());

	assertEquals(" Invalid actual name for method truc", "truc", methods[2].getActualName());

	SourceType[] members = this.currentType.getMemberTypes();
	assertTrue(" invalid members ", members == null);

	assertEquals(
		"Invalid source " + testName,
		expectedUnitToString,
		this.currentType.toString());
}

