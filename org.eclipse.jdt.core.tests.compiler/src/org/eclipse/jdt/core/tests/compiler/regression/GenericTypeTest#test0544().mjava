	public void test0544() {
		this.runNegativeTest(
			new String[] {
				"X.java",
				"import java.util.Vector;\n" + 
				"\n" + 
				"public class X {\n" + 
				"	public static void main(String[] args) {\n" + 
				"		Vector<Integer> a = new Vector<Integer>();\n" + 
				"		Vector b = new Vector();\n" + 
				"		b.add(new Object());\n" + 
				"		a = b;\n" + 
				"		Zork z;\n" + 
				"	}\n" + 
				"}\n",
			},
			"----------\n" + 
			"1. WARNING in X.java (at line 6)\n" + 
			"	Vector b = new Vector();\n" + 
			"	^^^^^^\n" + 
			"Vector is a raw type. References to generic type Vector<E> should be parameterized\n" + 
			"----------\n" + 
			"2. WARNING in X.java (at line 6)\n" + 
			"	Vector b = new Vector();\n" + 
			"	               ^^^^^^\n" + 
			"Vector is a raw type. References to generic type Vector<E> should be parameterized\n" + 
			"----------\n" + 
			"3. WARNING in X.java (at line 7)\n" + 
			"	b.add(new Object());\n" + 
			"	^^^^^^^^^^^^^^^^^^^\n" + 
			"Type safety: The method add(Object) belongs to the raw type Vector. References to generic type Vector<E> should be parameterized\n" + 
			"----------\n" + 
			"4. WARNING in X.java (at line 8)\n" + 
			"	a = b;\n" + 
			"	    ^\n" + 
			"Type safety: The expression of type Vector needs unchecked conversion to conform to Vector<Integer>\n" + 
			"----------\n" + 
			"5. ERROR in X.java (at line 9)\n" + 
			"	Zork z;\n" + 
			"	^^^^\n" + 
			"Zork cannot be resolved to a type\n" + 
			"----------\n");
	}		

