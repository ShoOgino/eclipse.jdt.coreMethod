// Bug 368709 - Endless loop in FakedTrackingVariable.markPassedToOutside
// original test case from jgit
public void testBug368709a() {
	if (this.complianceLevel < ClassFileConstants.JDK1_5) return;
	Map options = getCompilerOptions();
	options.put(CompilerOptions.OPTION_ReportUnclosedCloseable, CompilerOptions.ERROR);
	options.put(CompilerOptions.OPTION_ReportPotentiallyUnclosedCloseable, CompilerOptions.ERROR);
	this.runNegativeTest(
		new String[] {
			"X.java",
			"import java.io.*;\n" +
			"import java.util.zip.*;\n" +
			"public class X {\n" +
			"  Object db, pack;\n" + // mock
			"  int objectOffset, headerLength, type, size;\n" +
			"  public ObjectStream openStream() throws MissingObjectException, IOException {\n" + 
			"    WindowCursor wc = new WindowCursor(db);\n" + 
			"    InputStream in;\n" + 
			"    try\n" + 
			"      {\n" + 
			"        in = new PackInputStream(pack, (objectOffset + headerLength), wc);\n" + 
			"      }\n" + 
			"    catch (IOException packGone)\n" + 
			"      {\n" + 
			"        return wc.open(getObjectId(), type).openStream();\n" + 
			"      }\n" + 
			"    in = new BufferedInputStream(new InflaterInputStream(in, wc.inflater(), 8192), 8192);\n" + 
			"    return new ObjectStream.Filter(type, size, in);\n" + 
			"  }\n" +
			"  String getObjectId() { return \"\"; }\n" + // mock
			"}\n" +
			// mock:
			"class WindowCursor {\n" +
			"    WindowCursor(Object db) {}\n" +
			"    ObjectStream open(String id, int type) { return null; }\n" +
			"    Inflater inflater() { return null; }\n" +
			"}\n" +
			"class MissingObjectException extends Exception {\n" +
			"    public static final long serialVersionUID = 13L;\n" +
			"    MissingObjectException() { super();}\n" +
			"}\n" +
			"class PackInputStream extends InputStream {\n" +
			"    PackInputStream(Object pack, int offset, WindowCursor wc) throws IOException {}\n" +
			"    public int read() { return 0; }\n" +
			"}\n" +
			"class ObjectStream extends InputStream {\n" +
			"    static class Filter extends ObjectStream {\n" +
			"        Filter(int type, int size, InputStream in) { }\n" +
			"    }\n" +
			"    ObjectStream openStream() { return this; }\n" +
			"    public int read() { return 0; }\n" +
			"}\n"
		},
		"----------\n" + 
		"1. ERROR in X.java (at line 15)\n" + 
		"	return wc.open(getObjectId(), type).openStream();\n" + 
		"	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
		"Resource leak: \'in\' is not closed at this location\n" + 
		"----------\n" + 
		"2. ERROR in X.java (at line 18)\n" + 
		"	return new ObjectStream.Filter(type, size, in);\n" + 
		"	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
		"Potential resource leak: \'in\' may not be closed at this location\n" + 
		"----------\n",
		null,
		true,
		options);
}

