/**
 * From JLS 12 16.2.9, The following rules apply only if the switch block of the switch statement consists of switch labeled rules:
 * V is [un]assigned after a switch statement iff for every switch labeled rule one of the following is true:
 * 		It is a switch labeled expression e and either V is [un]assigned after e or after the selector expression.
 * 		It is a switch labeled block b and either V is [un]assigned after e or V is [un]assigned before every
 * 		break statement contained in b that may exit the switch statement.
 * 		It is a switch labeled throw statement.
 */
public void testBug542707_029() {
	if (this.complianceLevel != ClassFileConstants.JDK12)
		return;
	Map<String, String> defaultOptions = super.getCompilerOptions();
	defaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_12);
	defaultOptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_12);
	defaultOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_12);
	defaultOptions.put(CompilerOptions.OPTION_EnablePreviews, CompilerOptions.ENABLED);
	String expectedProblemLog =
			"----------\n" + 
			"2. ERROR in X.java (at line 24)\n" + 
			"	Zork();\n" + 
			"	^^^^\n" + 
			"The method Zork() is undefined for the type X\n" + 
			"----------\n";
	String[] testFiles = new String[] {
			"X.java", // =================
			"import java.io.IOException;\n" +
			"\n" +
			"public class X {\n" +
			"	public static int foo(int i) throws IOException {\n" +
			"		int v ;\n" +
			"		switch (i) {\n" +
			"		case 0 -> {\n" +
			"			v = 0;\n" +
			"		}\n" +
			"		case 2 -> {\n" +
			"			if (i > 1) {\n" +
			"				v =  2;\n" +
			"				break;\n" +
			"			}\n" +
			"			v = 3;\n" +
			"			break;\n" +
			"		}\n" +
			"		default -> throw new IOException();\n" +
			"		};\n" +
			"		return v;\n" +
			"	}\n" +
			"	\n" +
			"	public boolean bar() {\n" +
			"		Zork();\n" +
			"		return true;\n" +
			"	}\n" +
			"	public static void main(String[] args) {\n" +
			"		try {\n" +
			"			System.out.println(foo(3));\n" +
			"		} catch (IOException e) {\n" +
			"			// TODO Auto-generated catch block\n" +
			"			e.printStackTrace();\n" +
			"		}\n" +
			"	}\n" +
			"}\n",
	};
	this.runNegativeTest(
			testFiles,
			expectedProblemLog,
			null,
			true,
			defaultOptions);
}

