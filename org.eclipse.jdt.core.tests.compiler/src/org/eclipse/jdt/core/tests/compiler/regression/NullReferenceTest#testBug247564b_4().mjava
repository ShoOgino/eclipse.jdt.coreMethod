// null analysis -- case for static final field initialized inside static block with different values
// checked before use
public void testBug247564b_4() {
	this.runNegativeTest(
		new String[] {
			"X.java",
			"public class X {\n" +
			"  static final Object o;\n" +
			"  static final Object o1 = new Object();\n" +
			"  static {\n" +
			"		if (o1.hashCode() == 2){\n" +
			"			o = new Object();\n" +
			"		} else {\n" +
			"			o = null;\n" +
			"		}\n" +
			"  }\n" +
			"  void foo1() {\n" +
			"    if (o == null) {\n" +
			"        o.toString(); // danger\n" +
			"        return;\n" +
			"    }\n" +
			"	 o.toString(); // safe\n" +
			"  }\n" +
			"  void foo2() {\n" +
			"    if (o != null) {\n" +
			"         o.toString(); // safe (2)\n" +
			"    }\n" +
			"	 o.toString(); // uncertain\n" +
			"  }\n" +
			"}\n"},
			"----------\n" + 
			"1. ERROR in X.java (at line 13)\n" + 
			"	o.toString(); // danger\n" + 
			"	^\n" + 
			"Null pointer access: The field o can only be null at this location\n" + 
			"----------\n" + 
			"2. ERROR in X.java (at line 22)\n" + 
			"	o.toString(); // uncertain\n" + 
			"	^\n" + 
			"Potential null pointer access: The field o may be null at this location\n" + 
			"----------\n"
	);
}

