// null analysis -- checked and unchecked exceptions
public void testBug247564m() {
	this.runNegativeTest(
		new String[] {
			"X.java",
			"class MyException extends Exception{}" +
			"public class X {\n" +
			"  private Object f;\n" +
			"	 void gooCalls() throws MyException{}\n" +
			"	 void goo(){\n" +
			"		try {\n" +
			"			if (f == null)  return;\n" +
			"			gooCalls();\n" +
			"		} catch(MyException e) {\n" +	// checked Exception	
			"			f.toString();\n" +			// silent - at gooCalls() in 'try', f is not going to be null
			"		} catch(NumberFormatException e) {\n" +	// unchecked Exception	
			"			f.toString();\n" +			// could have come from anywhere, f can be null as doubted in 'try'
			"		}\n" +
			"  }\n" +
			"}\n"},
		"----------\n" + 
		"1. WARNING in X.java (at line 1)\n" + 
		"	class MyException extends Exception{}public class X {\n" + 
		"	      ^^^^^^^^^^^\n" + 
		"The serializable class MyException does not declare a static final serialVersionUID field of type long\n" + 
		"----------\n" + 
		"2. ERROR in X.java (at line 11)\n" + 
		"	f.toString();\n" + 
		"	^\n" + 
		"Potential null pointer access: The field f may be null at this location\n" + 
		"----------\n"
	);
}

