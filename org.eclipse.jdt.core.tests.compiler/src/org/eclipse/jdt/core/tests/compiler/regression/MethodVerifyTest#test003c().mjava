	public void test003c() {
		this.runConformTest(
			new String[] {
				"A.java",
				"class A {}\n",
				"B.java",
				"class B {}\n",
				"X.java",
				"class X<U> { public void foo(U u) {} }\n",
				"I.java",
				"interface I<U> { public void foo(U u); }\n",
			},
			""
		);
		this.runNegativeTest(
			new String[] {
				"JJ.java",
				"public class JJ<T> implements I { public void foo(T t) {} }\n"
			},
			"----------\n" + 
			"1. ERROR in JJ.java (at line 1)\n" + 
			"	public class JJ<T> implements I { public void foo(T t) {} }\n" + 
			"	             ^^\n" + 
			"The type JJ<T> must implement the inherited abstract method I.foo(Object)\n" + 
			"----------\n" + 
			"2. WARNING in JJ.java (at line 1)\n" + 
			"	public class JJ<T> implements I { public void foo(T t) {} }\n" + 
			"	                              ^\n" + 
			"I is a raw type. References to generic type I<U> should be parameterized\n" + 
			"----------\n" + 
			"3. ERROR in JJ.java (at line 1)\n" + 
			"	public class JJ<T> implements I { public void foo(T t) {} }\n" + 
			"	                                              ^^^^^^^^\n" + 
			"Name clash: The method foo(T) of type JJ<T> has the same erasure as foo(Object) of type I but does not override it\n" + 
			"----------\n",
			// JJ is not abstract and does not override abstract method foo(java.lang.Object) in I
			null,
			false,
			null
		);
	}

