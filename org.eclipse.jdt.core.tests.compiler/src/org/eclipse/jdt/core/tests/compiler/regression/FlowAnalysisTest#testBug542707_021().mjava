/**
 * From JLS 12 16.1.8, Suppose that the switch expression has result expressions e1, â€¦, en, not all of
 * which are boolean-valued.
 * The following rules apply only if the switch block of a switch expression (15.28) consists of switch
 * labeled statement groups:
 * V is [un]assigned before the selector expression iff V is [un]assigned before the switch statement.
 */
public void testBug542707_021() {
	if (this.complianceLevel != ClassFileConstants.JDK12)
		return;
	Map<String, String> defaultOptions = super.getCompilerOptions();
	defaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_12);
	defaultOptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_12);
	defaultOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_12);
	defaultOptions.put(CompilerOptions.OPTION_EnablePreviews, CompilerOptions.ENABLED);
	String expectedProblemLog =
			"----------\n" + 
			"1. ERROR in X.java (at line 4)\n" + 
			"	int t = switch (v) {\n" + 
			"	                ^\n" + 
			"The local variable v may not have been initialized\n" + 
			"----------\n" + 
			"2. ERROR in X.java (at line 19)\n" + 
			"	Zork();\n" + 
			"	^^^^\n" + 
			"The method Zork() is undefined for the type X\n" + 
			"----------\n";
	String[] testFiles = new String[] {
			"X.java", // =================
			"public class X {\n" +
			"	public static int foo(int i) {\n" +
			"		int v;\n" +
			"		int t = switch (v) {\n" +
			"		case 0 : {\n" +
			"			break 1;\n" +
			"		}\n" +
			"		case 2 : {\n" +
			"			break 2;\n" +
			"		}\n" +
			"		default : {\n" +
			"			break 3;\n" +
			"		}\n" +
			"		};\n" +
			"		return t;\n" +
			"	}\n" +
			"	\n" +
			"	public boolean bar() {\n" +
			"		Zork();\n" +
			"		return true;\n" +
			"	}\n" +
			"	public static void main(String[] args) {\n" +
			"		System.out.println(foo(3));\n" +
			"	}\n" +
			"}\n",
	};
	this.runNegativeTest(
			testFiles,
			expectedProblemLog,
			null,
			true,
			defaultOptions);
}

