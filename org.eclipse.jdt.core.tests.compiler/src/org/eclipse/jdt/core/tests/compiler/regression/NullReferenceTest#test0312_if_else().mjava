// null analysis - if/else
// PMT: exactly the case we talked about; what happens is that the first
// if shade doubts upon o; what we could do is to avoid marking in case
// of error? not sure this is appropriate though, because of inner code
// into the if itself; I believe I somewhat did that on purpose: the latest
// wins; completed with o.toString()...
// basically, the choice is about what we should do in case of error:
// neglect the effect of the error, or propagate this effect; the second
//  tends to produce less repeated errors (I believe) than the first...
// PREMATURE could refine adding a null-dependent reachable mark... not urgent
public void test0312_if_else() {
	this.runNegativeTest(
		new String[] {
			"X.java",
			"public class X {\n" + 
			"\n" + 
			"  void foo() {\n" + 
			"    Object o = new Object();\n" + 
			"    if (o == null) { /* */ }\n" + // complain 
			"    if (o != null) { /* */ }\n" + // quiet
			"    o.toString();\n" + // complain
			"  }\n" + 
			"}\n"},
		"----------\n" + 
		"1. ERROR in X.java (at line 5)\n" + 
		"	if (o == null) { /* */ }\n" + 
		"	    ^\n" + 
		"The variable o cannot be null; it was either set to a non-null value or assumed to be non-null when last used\n" + 
		"----------\n" + 
		"2. ERROR in X.java (at line 7)\n" + 
		"	o.toString();\n" + 
		"	^\n" + 
		"The variable o may be null\n" + 
		"----------\n");
}

