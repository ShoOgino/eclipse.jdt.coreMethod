	private void runErrorsTest(String[] testFiles, int visibility, boolean isMethod) {
		String[] errors = isMethod
			? errorsForInvalidTagsMethodOrConstructor(visibility)
			: errorsForInvalidTagsClassOrField(visibility);
		int length = errors.length;
		StringBuffer expectedProblemLog = new StringBuffer("----------\n");
		for (int i=0; i<length; i++) {
			expectedProblemLog.append(errors[i]);
		}
		try {
			runNegativeTest(testFiles, expectedProblemLog.toString());
		}
		catch (ComparisonFailure failure) {
			System.out.println("-------------------------------------------------------------");
			System.out.println("Following static variable should be updated as follow:");
			System.out.print("	private static String[] ");
			if (isMethod) {
				System.out.print("METHODS_ERRORS");
			} else {
				System.out.print("CLASSES_ERRORS");
			}
			System.out.print(" = {\n");
			for (int i=0; i<length; i++) {
				int idx = errors[i].indexOf('\n');
				System.out.println(Util.displayString(errors[i].substring(0, idx+1), INDENT, SHIFT));
				System.out.print(Util.displayString(errors[i].substring(idx+1), INDENT+1, SHIFT));
				if (i == (length-1)) {
				    for (int k = 0; k < INDENT-1; k++) System.out.print('\t');
					System.out.println('}');
				} else {
					System.out.println(',');
				}
			}
			throw failure;
		}
    }

