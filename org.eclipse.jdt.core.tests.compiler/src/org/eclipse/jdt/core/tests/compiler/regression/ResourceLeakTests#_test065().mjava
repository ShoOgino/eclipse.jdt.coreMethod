// Bug 368546 - [compiler][resource] Avoid remaining false positives found when compiling the Eclipse SDK
// example from comment 10
// disabled, because basic null-analysis machinery doesn't support this pattern
// see also Bug 370424 - [compiler][null] throw-catch analysis for null flow could be more precise
public void _test065() {
	Map options = getCompilerOptions();
	options.put(CompilerOptions.OPTION_ReportUnclosedCloseable, CompilerOptions.ERROR);
	options.put(CompilerOptions.OPTION_ReportPotentiallyUnclosedCloseable, CompilerOptions.ERROR);
	options.put(CompilerOptions.OPTION_ReportMissingSerialVersion, CompilerOptions.IGNORE);
	this.runConformTest(new String[] {
		"Test065.java",
		"import java.io.*;\n" +
		"class MyException extends Exception{}\n" + 
		"public class Test065 {\n" +
		"	void foo(String fileName) throws IOException, MyException {\n" + 
		"		FileReader       fileRead   = new FileReader(fileName);\n" + 
		"		BufferedReader   bufRead    = new BufferedReader(fileRead);\n" + 
		"		LineNumberReader lineReader = new LineNumberReader(bufRead);\n" + 
		"		try {\n" + 
		"		while (lineReader.readLine() != null) {\n" + 
		"			bufRead.close();\n" + 
		"			callSome();  // only this can throw MyException\n" + 
		"		}\n" + 
		"		} catch (MyException e) {\n" + 
		"			throw e;  // Pot. leak reported here\n" + 
		"		}\n" + 
		"		bufRead.close(); \n" + 
		"	}\n" + 
		"	private void callSome() throws MyException\n" + 
		"	{\n" + 
		"		\n" + 
		"	}\n" + 
		"}\n"
	},
	"",
	null,
	true,
	null,
	options,
	null);
}

