// https://bugs.eclipse.org/bugs/show_bug.cgi?id=127575
// Test to verify that asserts are exempted from redundant null check warnings,
// but this doesn't affect the downstream info.
public void testBug127575i() {
	Runner runner = new Runner();
	runner.testFiles =
			new String[] {
				"X.java",
				"public class X {\n" +
				"  void m() {\n" +
				"	 X bar = null;\n" +
				"    X foo = getX();\n" +
				"    if (foo == null) {\n" +
				"	 	foo = new X();\n" +
				"	 }\n" +
				"	 org.eclipse.core.runtime.Assert.isTrue (foo != null && bar == null);\n" +	// don't warn but do the null analysis
				"	 if (foo != null) {}\n" +		// warn
				"	 if (bar == null) {}\n" +		// warn
				"  }\n" +
				"  public X getX() { return new X();}\n" +
				"}\n"};
	runner.expectedCompilerLog =
		"----------\n" +
		"1. ERROR in X.java (at line 9)\n" +
		"	if (foo != null) {}\n" +
		"	    ^^^\n" +
		"Redundant null check: The variable foo cannot be null at this location\n" +
		"----------\n" +
		"2. ERROR in X.java (at line 10)\n" +
		"	if (bar == null) {}\n" +
		"	    ^^^\n" +
		"Redundant null check: The variable bar can only be null at this location\n" +
		"----------\n";
	runner.classLibraries =
	    this.assertLib;
	runner.javacTestOptions = JavacTestOptions.Excuse.EclipseWarningConfiguredAsError;
	runner.runNegativeTest();
}

