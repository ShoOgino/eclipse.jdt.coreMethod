// To test Parser.consumeInstanceOfExpression() with Type Annotations
public void test0117() throws IOException {
	String source =
		"import java.util.*;\n" +
		"class X <@NonNull T>{\n" +
		" 	public void test1(Object obj) {\n" +
		"   	if(obj instanceof @Marker @NonNull X) {\n" +
		"		 	X newX;\n" +
		"		 	newX = (@NonNull X) obj;\n" +
		"	 }\n" +
		"   }\n" +
		"	@NonNull T foo(@NonNull T t) {\n" +
		"       if (t instanceof @NonNull @Marker List<?> @Normal(value = 10) []) {\n" +
		"           List<?> @SingleMember (10) [] es;\n" +
		"			es = (@Marker List<?> @SingleMember(10) []) t;\n" +
		"       }\n" +
		"		if (t instanceof @Marker @Normal(value = 5) X<?>) {\n" +
		"			return t;\n" +
		"		}\n" +
		"		return t;\n" +
		"	}\n" +
		"}";
	String expectedUnitToString =
		"import java.util.*;\n" +
		"class X<@NonNull T> {\n" +
		"  X() {\n" +
		"    super();\n" +
		"  }\n" +
		"  public void test1(Object obj) {\n" +
		"    if ((obj instanceof @Marker @NonNull X))\n" +
		"        {\n" +
		"          X newX;\n" +
		"          newX = (@NonNull X) obj;\n" +
		"        }\n" +
		"  }\n" +
		"  @NonNull T foo(@NonNull T t) {\n" +
		"    if ((t instanceof @NonNull @Marker List<?> @Normal(value = 10) []))\n" +
		"        {\n" +
		"          List<?> @SingleMember(10) [] es;\n" +
		"          es = (@Marker List<?> @SingleMember(10) []) t;\n" +
		"        }\n" +
		"    if ((t instanceof @Marker @Normal(value = 5) X<?>))\n" +
		"        {\n" +
		"          return t;\n" +
		"        }\n" +
		"    return t;\n" +
		"  }\n" +
		"}\n";
	checkParse(CHECK_ALL & ~CHECK_INDEXING_PARSER , source.toCharArray(), null, "test0117", expectedUnitToString );
}

