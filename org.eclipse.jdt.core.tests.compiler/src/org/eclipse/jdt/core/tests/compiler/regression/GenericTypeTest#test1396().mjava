public void test1396()  throws Exception {
	this.runConformTest(
		new String[] {
			"X.java",
			"public class X<T extends SubX2<T>> {\n" + 
			"	T sx1;\n" + 
			"	void foo(T t) {\n" + 
			"		t.sx2.t.getClass();\n" + 
			"	}\n" + 
			"}\n" + 
			"interface X1<T extends X2<T>> {\n" + 
			"}\n" + 
			"abstract class SubX1<T extends X2<T>> implements X1<T> {\n" + 
			"	T sx2;\n" + 
			"}\n" + 
			"interface X2<T extends X2<T>> extends X1<T>{\n" + 
			"}\n" + 
			"abstract class SubX2<T extends X2<T>> extends SubX1<T> implements X2<T> {\n" + 
			"	T t;\n" + 
			"}\n",
		},
		"");
	String expectedOutput =
		"  // Method descriptor #21 (LSubX2;)V\n" + 
		"  // Signature: (TT;)V\n" + 
		"  // Stack: 1, Locals: 2\n" + 
		"  void foo(SubX2 t);\n" + 
		"     0  aload_1 [t]\n" + 
		"     1  getfield SubX2.sx2 : X2 [23]\n" + 
		"     4  checkcast SubX2 [24]\n" + 
		"     7  getfield SubX2.t : X2 [29]\n" + 
		"    10  checkcast SubX2 [24]\n" + 
		"    13  invokevirtual java.lang.Object.getClass() : java.lang.Class [32]\n" + 
		"    16  pop\n" + 
		"    17  return\n" + 
		"      Line numbers:\n" + 
		"        [pc: 0, line: 4]\n" + 
		"        [pc: 17, line: 5]\n" + 
		"      Local variable table:\n" + 
		"        [pc: 0, pc: 18] local: this index: 0 type: X\n" + 
		"        [pc: 0, pc: 18] local: t index: 1 type: SubX2\n";

	File f = new File(OUTPUT_DIR + File.separator + "X.class");
	byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
	ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
	String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
	int index = result.indexOf(expectedOutput);
	if (index == -1 || expectedOutput.length() == 0) {
		System.out.println(Util.displayString(result, 3));
	}
	if (index == -1) {
		assertEquals("Wrong contents", expectedOutput, result);
	}
}

