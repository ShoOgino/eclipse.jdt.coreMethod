// null analysis -- case for static final field initialized inside static block with different values
// Check pot. NPE case for constant fields
// Once dereferenced, treat as non null. Just like locals.
public void testBug247564b_3() {
	this.runNegativeTest(
		new String[] {
			"X.java",
			"public class X {\n" +
			"  static final Object o;\n" +
			"  static final Object o1 = new Object();\n" +
			"  static {\n" +
			"		if (o1.hashCode() == 2){\n" +
			"			o = new Object();\n" +
			"		} else {\n" +
			"			o = null;\n" +
			"		}\n" +
			"  }\n" +
			"  void foo() {\n" +
			"    if (o.toString() == \"\") {}\n" +
			"    if (o == null) {}\n" +
			"	 if (o != null) {}\n" +
			"  }\n" +
			"}\n"},
			"----------\n" + 
			"1. ERROR in X.java (at line 12)\n" + 
			"	if (o.toString() == \"\") {}\n" + 
			"	    ^\n" + 
			"Potential null pointer access: The field o may be null at this location\n" + 
			"----------\n" + 
			"2. ERROR in X.java (at line 13)\n" + 
			"	if (o == null) {}\n" + 
			"	    ^\n" + 
			"Null comparison always yields false: The field o cannot be null at this location\n" + 
			"----------\n" + 
			"3. WARNING in X.java (at line 13)\n" + 
			"	if (o == null) {}\n" + 
			"	               ^^\n" + 
			"Dead code\n" + 
			"----------\n" + 
			"4. ERROR in X.java (at line 14)\n" + 
			"	if (o != null) {}\n" + 
			"	    ^\n" + 
			"Redundant null check: The field o cannot be null at this location\n" + 
			"----------\n"
	);
}

