//https://bugs.eclipse.org/bugs/show_bug.cgi?id=128705 - variation
public void test041() throws Exception {
	this.runConformTest(
			new String[] {
				"X.java",
				"public class X {\n" + 
				"	public void foo(boolean b) {\n" + 
				"		try { \n" + 
				"			int i = 0;\n" + 
				"			return;\n" + 
				"		} catch(Exception e) {\n" + 
				"			return;\n" + 
				"		} finally {\n" + 
				"			System.out.println(\"done\");\n" + 
				"		}\n" + 
				"	}\n" + 
				"	public static void main(String[] args) {\n" + 
				"		new X().foo(true);\n" + 
				"	}\n" + 
				"}\n",
			},
			"done");
	
	CompilerOptions compilerOptions = new CompilerOptions(this.getCompilerOptions());
	String expectedOutput = !compilerOptions.inlineJsrBytecode
		?	"  // Method descriptor #15 (Z)V\n" + 
			"  // Stack: 2, Locals: 5\n" + 
			"  public void foo(boolean b);\n" + 
			"     0  iconst_0\n" + 
			"     1  istore_2 [i]\n" + 
			"     2  jsr 18\n" + 
			"     5  return\n" + 
			"     6  astore_2 [e]\n" + 
			"     7  goto 2\n" + 
			"    10  astore 4\n" + 
			"    12  jsr 18\n" + 
			"    15  aload 4\n" + 
			"    17  athrow\n" + 
			"    18  astore_3\n" + 
			"    19  getstatic java.lang.System.out : java.io.PrintStream [16]\n" + 
			"    22  ldc <String \"done\"> [22]\n" + 
			"    24  invokevirtual java.io.PrintStream.println(java.lang.String) : void [24]\n" + 
			"    27  ret 3\n" + 
			"      Exception Table:\n" + 
			"        [pc: 0, pc: 5] -> 6 when : java.lang.Exception\n" + 
			"        [pc: 0, pc: 5] -> 10 when : any\n" + 
			"        [pc: 6, pc: 10] -> 10 when : any\n" + 
			"      Line numbers:\n" + 
			"        [pc: 0, line: 4]\n" + 
			"        [pc: 2, line: 5]\n" + 
			"        [pc: 6, line: 6]\n" + 
			"        [pc: 7, line: 7]\n" + 
			"        [pc: 10, line: 8]\n" + 
			"        [pc: 15, line: 10]\n" + 
			"        [pc: 18, line: 8]\n" + 
			"        [pc: 19, line: 9]\n" + 
			"        [pc: 27, line: 10]\n" + 
			"      Local variable table:\n" + 
			"        [pc: 0, pc: 29] local: this index: 0 type: X\n" + 
			"        [pc: 0, pc: 29] local: b index: 1 type: boolean\n" + 
			"        [pc: 2, pc: 6] local: i index: 2 type: int\n" + 
			"        [pc: 7, pc: 10] local: e index: 2 type: java.lang.Exception\n"
		: null;
	if (expectedOutput == null) {
		if (compilerOptions.targetJDK == ClassFileConstants.JDK1_5) {
			expectedOutput = "  // Method descriptor #15 (Z)V\n" + 
			"  // Stack: 2, Locals: 4\n" + 
			"  public void foo(boolean b);\n" + 
			"     0  iconst_0\n" + 
			"     1  istore_2 [i]\n" + 
			"     2  getstatic java.lang.System.out : java.io.PrintStream [16]\n" + 
			"     5  ldc <String \"done\"> [22]\n" + 
			"     7  invokevirtual java.io.PrintStream.println(java.lang.String) : void [24]\n" + 
			"    10  return\n" + 
			"    11  astore_2 [e]\n" + 
			"    12  goto 2\n" + 
			"    15  astore_3\n" + 
			"    16  getstatic java.lang.System.out : java.io.PrintStream [16]\n" + 
			"    19  ldc <String \"done\"> [22]\n" + 
			"    21  invokevirtual java.io.PrintStream.println(java.lang.String) : void [24]\n" + 
			"    24  aload_3\n" + 
			"    25  athrow\n" + 
			"      Exception Table:\n" + 
			"        [pc: 0, pc: 2] -> 11 when : java.lang.Exception\n" + 
			"        [pc: 0, pc: 2] -> 15 when : any\n" + 
			"        [pc: 11, pc: 15] -> 15 when : any\n" + 
			"      Line numbers:\n" + 
			"        [pc: 0, line: 4]\n" + 
			"        [pc: 2, line: 9]\n" + 
			"        [pc: 10, line: 5]\n" + 
			"        [pc: 11, line: 6]\n" + 
			"        [pc: 12, line: 7]\n" + 
			"        [pc: 15, line: 8]\n" + 
			"        [pc: 16, line: 9]\n" + 
			"        [pc: 24, line: 10]\n" + 
			"      Local variable table:\n" + 
			"        [pc: 0, pc: 26] local: this index: 0 type: X\n" + 
			"        [pc: 0, pc: 26] local: b index: 1 type: boolean\n" + 
			"        [pc: 2, pc: 11] local: i index: 2 type: int\n" + 
			"        [pc: 12, pc: 15] local: e index: 2 type: java.lang.Exception\n";
		} else {
			expectedOutput = "  // Method descriptor #15 (Z)V\n" + 
			"  // Stack: 2, Locals: 4\n" + 
			"  public void foo(boolean b);\n" + 
			"     0  iconst_0\n" + 
			"     1  istore_2 [i]\n" + 
			"     2  getstatic java.lang.System.out : java.io.PrintStream [16]\n" + 
			"     5  ldc <String \"done\"> [22]\n" + 
			"     7  invokevirtual java.io.PrintStream.println(java.lang.String) : void [24]\n" + 
			"    10  return\n" + 
			"    11  astore_2 [e]\n" + 
			"    12  getstatic java.lang.System.out : java.io.PrintStream [16]\n" + 
			"    15  ldc <String \"done\"> [22]\n" + 
			"    17  invokevirtual java.io.PrintStream.println(java.lang.String) : void [24]\n" + 
			"    20  return\n" + 
			"    21  astore_3\n" + 
			"    22  getstatic java.lang.System.out : java.io.PrintStream [16]\n" + 
			"    25  ldc <String \"done\"> [22]\n" + 
			"    27  invokevirtual java.io.PrintStream.println(java.lang.String) : void [24]\n" + 
			"    30  aload_3\n" + 
			"    31  athrow\n" + 
			"      Exception Table:\n" + 
			"        [pc: 0, pc: 2] -> 11 when : java.lang.Exception\n" + 
			"        [pc: 0, pc: 2] -> 21 when : any\n" + 
			"        [pc: 11, pc: 12] -> 21 when : any\n" + 
			"      Line numbers:\n" + 
			"        [pc: 0, line: 4]\n" + 
			"        [pc: 2, line: 9]\n" + 
			"        [pc: 10, line: 5]\n" + 
			"        [pc: 11, line: 6]\n" + 
			"        [pc: 12, line: 9]\n" + 
			"        [pc: 20, line: 7]\n" + 
			"        [pc: 21, line: 8]\n" + 
			"        [pc: 22, line: 9]\n" + 
			"        [pc: 30, line: 10]\n" + 
			"      Local variable table:\n" + 
			"        [pc: 0, pc: 32] local: this index: 0 type: X\n" + 
			"        [pc: 0, pc: 32] local: b index: 1 type: boolean\n" + 
			"        [pc: 2, pc: 11] local: i index: 2 type: int\n" + 
			"        [pc: 12, pc: 21] local: e index: 2 type: java.lang.Exception\n" + 
			"      Stack map table: number of frames 2\n" + 
			"        [pc: 11, same_locals_1_stack_item, stack: {java.lang.Exception}]\n" + 
			"        [pc: 21, same_locals_1_stack_item, stack: {java.lang.Throwable}]\n";
		}
	}

	File f = new File(OUTPUT_DIR + File.separator + "X.class");
	byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
	ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
	String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
	int index = result.indexOf(expectedOutput);
	if (index == -1 || expectedOutput.length() == 0) {
		System.out.println(Util.displayString(result, 3));
	}
	if (index == -1) {
		assertEquals("Wrong contents", expectedOutput, result);
	}
}

