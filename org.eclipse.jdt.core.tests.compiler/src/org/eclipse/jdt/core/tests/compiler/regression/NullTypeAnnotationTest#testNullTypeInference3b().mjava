	// conflicting annotations from type variable application and type variable substitution -> exclude null annotations from inference
	public void testNullTypeInference3b() {
		runNegativeTestWithLibs(
			new String[] {
				"Generics.java",
				"import org.eclipse.jdt.annotation.*;\n" +
				"\n" +
				"public class Generics {\n" +
				"	<X> @Nullable X m1(@Nullable X a) { return null; }\n" +
				"	<X> @Nullable X m2(X a) { return null; }\n" +
				"	void test(@NonNull String in) {\n" +
				"		@NonNull String s1 = m1(in);\n" +
				"		@NonNull String s2 = m2(in);\n" +
				"	}\n" +
				"	public static void main(String[] args) {\n" +
				"		new Generics().test(\"hallo\");\n" +
				"	}\n" +
				"}\n"
			},
			getCompilerOptions(),
			"----------\n" +
			"1. ERROR in Generics.java (at line 7)\n" +
			"	@NonNull String s1 = m1(in);\n" +
			"	                     ^^^^^^\n" +
			"Null type mismatch (type annotations): required \'@NonNull String\' but this expression has type \'@Nullable String\'\n" +
			"----------\n" +
			"2. ERROR in Generics.java (at line 8)\n" +
			"	@NonNull String s2 = m2(in);\n" +
			"	                     ^^^^^^\n" +
			"Null type mismatch (type annotations): required \'@NonNull String\' but this expression has type \'@Nullable String\'\n" +
			"----------\n");
	}

