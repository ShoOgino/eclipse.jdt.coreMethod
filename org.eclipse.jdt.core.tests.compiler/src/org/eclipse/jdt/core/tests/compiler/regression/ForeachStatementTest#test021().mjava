public void test021() { 
	this.runConformTest(
		new String[] {
			"X.java",
			"public class X {\n" +
			"	public static void main(String[] args) {\n" +
			"		int[] tab = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n" +
			"		int sum = 0;\n" +
			"		int i = 0;\n" +
			"		loop1: while(true) {\n" +
			"			i++;\n" +
			"			loop: for (final int e : tab) {\n" +
			"				sum += e;\n" +
			"				if (i == 3) {\n" +
			"					break loop1;\n" +
			"				} else if (e == 5) {\n" +
			"					break loop;\n" +
			"				} else {\n" +
			"					continue;\n" +
			"				}\n" +
			"			}\n" +
			"		}\n" +
			"		System.out.println(sum);\n" +
			"	}\n" +
			"}",
		},
		"31");
		
	String expectedOutput =
		"  // Method descriptor #15 ([Ljava/lang/String;)V\n" + 
		"  // Stack: 4, Locals: 8\n" + 
		"  public static void main(java.lang.String[] args);\n" + 
		"      0  bipush 9\n" + 
		"      2  newarray int [10]\n" + 
		"      4  dup\n" + 
		"      5  iconst_0\n" + 
		"      6  iconst_1\n" + 
		"      7  iastore\n" + 
		"      8  dup\n" + 
		"      9  iconst_1\n" + 
		"     10  iconst_2\n" + 
		"     11  iastore\n" + 
		"     12  dup\n" + 
		"     13  iconst_2\n" + 
		"     14  iconst_3\n" + 
		"     15  iastore\n" + 
		"     16  dup\n" + 
		"     17  iconst_3\n" + 
		"     18  iconst_4\n" + 
		"     19  iastore\n" + 
		"     20  dup\n" + 
		"     21  iconst_4\n" + 
		"     22  iconst_5\n" + 
		"     23  iastore\n" + 
		"     24  dup\n" + 
		"     25  iconst_5\n" + 
		"     26  bipush 6\n" + 
		"     28  iastore\n" + 
		"     29  dup\n" + 
		"     30  bipush 6\n" + 
		"     32  bipush 7\n" + 
		"     34  iastore\n" + 
		"     35  dup\n" + 
		"     36  bipush 7\n" + 
		"     38  bipush 8\n" + 
		"     40  iastore\n" + 
		"     41  dup\n" + 
		"     42  bipush 8\n" + 
		"     44  bipush 9\n" + 
		"     46  iastore\n" + 
		"     47  astore_1 [tab]\n" + 
		"     48  iconst_0\n" + 
		"     49  istore_2 [sum]\n" + 
		"     50  iconst_0\n" + 
		"     51  istore_3 [i]\n" + 
		"     52  iinc 3 1 [i]\n" + 
		"     55  aload_1 [tab]\n" + 
		"     56  dup\n" + 
		"     57  astore 7\n" + 
		"     59  arraylength\n" + 
		"     60  istore 6\n" + 
		"     62  iconst_0\n" + 
		"     63  istore 5\n" + 
		"     65  goto 100\n" + 
		"     68  aload 7\n" + 
		"     70  iload 5\n" + 
		"     72  iaload\n" + 
		"     73  istore 4 [e]\n" + 
		"     75  iload_2 [sum]\n" + 
		"     76  iload 4 [e]\n" + 
		"     78  iadd\n" + 
		"     79  istore_2 [sum]\n" + 
		"     80  iload_3 [i]\n" + 
		"     81  iconst_3\n" + 
		"     82  if_icmpne 88\n" + 
		"     85  goto 110\n" + 
		"     88  iload 4 [e]\n" + 
		"     90  iconst_5\n" + 
		"     91  if_icmpne 97\n" + 
		"     94  goto 52\n" + 
		"     97  iinc 5 1\n" + 
		"    100  iload 5\n" + 
		"    102  iload 6\n" + 
		"    104  if_icmplt 68\n" + 
		"    107  goto 52\n" + 
		"    110  getstatic java.lang.System.out : java.io.PrintStream [16]\n" + 
		"    113  iload_2 [sum]\n" + 
		"    114  invokevirtual java.io.PrintStream.println(int) : void [22]\n" + 
		"    117  return\n" + 
		"      Line numbers:\n" + 
		"        [pc: 0, line: 3]\n" + 
		"        [pc: 48, line: 4]\n" + 
		"        [pc: 50, line: 5]\n" + 
		"        [pc: 52, line: 7]\n" + 
		"        [pc: 55, line: 8]\n" + 
		"        [pc: 75, line: 9]\n" + 
		"        [pc: 80, line: 10]\n" + 
		"        [pc: 85, line: 11]\n" + 
		"        [pc: 88, line: 12]\n" + 
		"        [pc: 94, line: 13]\n" + 
		"        [pc: 97, line: 8]\n" + 
		"        [pc: 107, line: 6]\n" + 
		"        [pc: 110, line: 19]\n" + 
		"        [pc: 117, line: 20]\n" + 
		"      Local variable table:\n" + 
		"        [pc: 0, pc: 118] local: args index: 0 type: java.lang.String[]\n" + 
		"        [pc: 48, pc: 118] local: tab index: 1 type: int[]\n" + 
		"        [pc: 50, pc: 118] local: sum index: 2 type: int\n" + 
		"        [pc: 52, pc: 118] local: i index: 3 type: int\n" + 
		"        [pc: 75, pc: 97] local: e index: 4 type: int\n";
	
	try {
		File f = new File(OUTPUT_DIR + File.separator + "X.class");
		byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
		ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
		String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
		int index = result.indexOf(expectedOutput);
		if (index == -1 || expectedOutput.length() == 0) {
			System.out.println(Util.displayString(result, 3));
		}
		if (index == -1) {
			assertEquals("Wrong contents", expectedOutput, result);
		}
	} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
		assertTrue(false);
	} catch (IOException e) {
		assertTrue(false);
	}
}

