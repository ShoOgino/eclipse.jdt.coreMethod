/*
 * DietParse with completionNode check
 */
public void checkDietParse(
	char[] source, 
	int cursorLocation, 
	String expectedCompletion, 
	String expectedUnitToString, 
	String expectedCompletionIdentifier,
	String expectedReplacedSource,
	String testName) {

	CompilerOptions options = new CompilerOptions();
	CompletionParser parser = 
		new CompletionParser(
			new ProblemReporter(
				DefaultErrorHandlingPolicies.proceedWithAllProblems(), 
				options, 
				new DefaultProblemFactory(Locale.getDefault())),
			options.assertMode);

	ICompilationUnit sourceUnit = new CompilationUnit(source, testName, null);
	CompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0, 0);	

	CompilationUnitDeclaration unit = parser.dietParse(sourceUnit, compilationResult, cursorLocation);

	String computedCompletion = parser.assistNode == null 
									? NONE
									: parser.assistNode.toString(0);
	String computedUnitToString = unit.toString();
	//System.out.println(computedUnitToString);
	//System.out.println(Util.displayString(computedUnitToString));
	//System.out.println(expectedUnitToString);
	
	assertEquals(
		"invalid completion node-" + testName,
		expectedCompletion,
		computedCompletion);

	assertEquals(
		"invalid completion tree-" + testName,
		expectedUnitToString,
		computedUnitToString);
	
	if (expectedCompletionIdentifier != null){
		char[] chars = ((CompletionScanner)parser.scanner).completionIdentifier;
		String computedCompletionIdentifier = chars == null ? NONE : new String(chars);
		assertEquals(
			"invalid completion identifier-" + testName,
			expectedCompletionIdentifier,
			computedCompletionIdentifier);
	}
	if (expectedReplacedSource != null){
		char[] chars = null;
		if (parser.assistNode != null){
			chars = CharOperation.subarray(
				parser.scanner.source, 
				parser.assistNode.sourceStart, 
				parser.assistNode.sourceEnd + 1);
		} else {
			if (parser.assistIdentifier() != null){
				if (((CompletionScanner)parser.scanner).completedIdentifierEnd 
					>= ((CompletionScanner)parser.scanner).completedIdentifierStart){
					chars = CharOperation.subarray(
						parser.scanner.source, 
						((CompletionScanner)parser.scanner).completedIdentifierStart, 
						((CompletionScanner)parser.scanner).completedIdentifierEnd + 1);
				}
			}
		}
		String computedReplacedSource  = chars == null ? NONE : new String(chars);
		assertEquals(
			"invalid replaced source-" + testName,
			expectedReplacedSource,
			computedReplacedSource);
	}
}

