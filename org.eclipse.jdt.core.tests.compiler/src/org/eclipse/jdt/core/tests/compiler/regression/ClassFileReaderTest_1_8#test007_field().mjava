	public void test007_field() throws Exception {
		String source =
			"import java.lang.annotation.*;\n" +
			"import java.util.Map;\n" +
			"public class X{\n" +
			"	@Foo Map<@Bar(1) String, @Bar(2) String @Bar(3)[] @Bar(4)[] @Bar(5)[]> field3;\n" +
			"}\n" +
			"class Y<T> {}\n" +
			"class Z {}\n" +
			"@Retention(RetentionPolicy.CLASS)\n" +
			"@Target(ElementType.TYPE_USE)\n" +
			"@interface Foo {\n" +
			"}\n" +
			"@Retention(RetentionPolicy.CLASS)\n" +
			"@Target(ElementType.TYPE_USE)\n" +
			"@interface Bar {\n" +
			"        int value() default -1;\n" +
			"}";

		org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader cfr = getInternalClassFile("", "X", "X", source);

		IBinaryField field = getField(cfr,"field3");
		assertNotNull(field);
		IBinaryTypeAnnotation[] typeAnnotations = field.getTypeAnnotations();
		assertNotNull(typeAnnotations);
		assertEquals(6,typeAnnotations.length);
		assertEquals("@LFoo; FIELD",printTypeAnnotation(typeAnnotations[0]));
		assertEquals("@LBar;(value=(int)1) FIELD, location=[TYPE_ARGUMENT(0)]", printTypeAnnotation(typeAnnotations[1]));
		assertEquals("@LBar;(value=(int)2) FIELD, location=[TYPE_ARGUMENT(1), ARRAY, ARRAY, ARRAY]", printTypeAnnotation(typeAnnotations[2]));
		assertEquals("@LBar;(value=(int)3) FIELD, location=[TYPE_ARGUMENT(1)]", printTypeAnnotation(typeAnnotations[3]));
		assertEquals("@LBar;(value=(int)4) FIELD, location=[TYPE_ARGUMENT(1), ARRAY]", printTypeAnnotation(typeAnnotations[4]));
		assertEquals("@LBar;(value=(int)5) FIELD, location=[TYPE_ARGUMENT(1), ARRAY, ARRAY]", printTypeAnnotation(typeAnnotations[5]));
	}

