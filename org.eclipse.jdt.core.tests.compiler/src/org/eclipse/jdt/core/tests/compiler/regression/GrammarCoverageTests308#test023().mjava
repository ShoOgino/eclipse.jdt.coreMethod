	// TypeParameter ::= TypeParameterHeader 'extends' ReferenceType AdditionalBoundList
	// AdditionalBound ::= '&' ReferenceType
	// TypeParameter1 ::= TypeParameterHeader 'extends' ReferenceType AdditionalBoundList1
	public void test023() throws Exception {
		this.runNegativeTest(
				new String[] {
					"I.java",
					"public interface I<U extends J<? extends I<U>>> {\n" +
					"}\n" +
					"interface J<T extends I<? extends J<T>>> {\n" +
					"}\n" +
					"class CI<U extends CJ<T, U> & @Marker J<@Marker T>,\n" +
					"			T extends CI<U, T> & @Marker I<U>>\n" +
					"	implements I<U> {\n" +
					"}\n" +
					"class CJ<T extends CI<U, T> & @Marker I<@Marker U>,\n" +
					"			U extends CJ<T, U> & J<T>>\n" +
					"	implements J<T> {\n" +
					"}\n"
				},
				"----------\n" +
				"1. ERROR in I.java (at line 5)\n" +
				"	class CI<U extends CJ<T, U> & @Marker J<@Marker T>,\n" +
				"	                               ^^^^^^\n" +
				"Marker cannot be resolved to a type\n" +
				"----------\n" +
				"2. ERROR in I.java (at line 5)\n" +
				"	class CI<U extends CJ<T, U> & @Marker J<@Marker T>,\n" +
				"	                                         ^^^^^^\n" +
				"Marker cannot be resolved to a type\n" +
				"----------\n" +
				"3. ERROR in I.java (at line 6)\n" +
				"	T extends CI<U, T> & @Marker I<U>>\n" +
				"	                      ^^^^^^\n" +
				"Marker cannot be resolved to a type\n" +
				"----------\n" +
				"4. ERROR in I.java (at line 9)\n" +
				"	class CJ<T extends CI<U, T> & @Marker I<@Marker U>,\n" +
				"	                               ^^^^^^\n" +
				"Marker cannot be resolved to a type\n" +
				"----------\n" +
				"5. ERROR in I.java (at line 9)\n" +
				"	class CJ<T extends CI<U, T> & @Marker I<@Marker U>,\n" +
				"	                                         ^^^^^^\n" +
				"Marker cannot be resolved to a type\n" +
				"----------\n");
	}

