	// check capture for conditional operator
	public void test0628() {
	    this.runNegativeTest(
            new String[] {
                "X.java",
				"import java.util.List;\n" +
				"\n" +
				"public class X {\n" +
				"\n" +
				"	<T> List<? extends T> foo(List<? extends T> l1, List<? extends T> l2) {\n" +
				"		return l1;\n" +
				"	}\n" +
				"	void bar(List<Float> l1, List<Integer> l2) {\n" +
				"		List<?> l3 = null;\n" +
				"		String s = l1 != null ? foo(l1, l2) : l3;\n" +
				"	}\n" +
				"}\n",
            },
            this.complianceLevel < ClassFileConstants.JDK1_8 ? 
	    		"----------\n" +
	    		"1. ERROR in X.java (at line 10)\n" +
	    		"	String s = l1 != null ? foo(l1, l2) : l3;\n" +
	    		"	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" +
	    		"Type mismatch: cannot convert from List<capture#4-of ? extends Object> to String\n" +
	    		"----------\n" : 
	    			"----------\n" + 
	    			"1. ERROR in X.java (at line 10)\n" + 
	    			"	String s = l1 != null ? foo(l1, l2) : l3;\n" + 
	    			"	                        ^^^^^^^^^^^\n" + 
	    			"Type mismatch: cannot convert from List<capture#2-of ? extends Number&Comparable<?>> to String\n" + 
	    			"----------\n" + 
	    			"2. ERROR in X.java (at line 10)\n" + 
	    			"	String s = l1 != null ? foo(l1, l2) : l3;\n" + 
	    			"	                                      ^^\n" + 
	    			"Type mismatch: cannot convert from List<capture#3-of ?> to String\n" + 
	    			"----------\n");
	}

