	// WildcardBounds ::= 'extends' ReferenceType
	// WildcardBounds ::= 'super' ReferenceType
	public void test021() throws Exception {
		this.runNegativeTest(
				new String[] {
					"X.java",
					"public class X {\n" +
					"	void foo(Map<@Marker ? super @Marker Object, @Marker ? extends @Marker String> m){}\n" +
					"   void goo(Map<@Marker ? extends @Marker Object, @Marker ? super @Marker String> m){}\n" +
					"}\n"
				},
				"----------\n" +
				"1. ERROR in X.java (at line 2)\n" +
				"	void foo(Map<@Marker ? super @Marker Object, @Marker ? extends @Marker String> m){}\n" +
				"	         ^^^\n" +
				"Map cannot be resolved to a type\n" +
				"----------\n" +
				"2. ERROR in X.java (at line 2)\n" +
				"	void foo(Map<@Marker ? super @Marker Object, @Marker ? extends @Marker String> m){}\n" +
				"	              ^^^^^^\n" +
				"Marker cannot be resolved to a type\n" +
				"----------\n" +
				"3. ERROR in X.java (at line 2)\n" +
				"	void foo(Map<@Marker ? super @Marker Object, @Marker ? extends @Marker String> m){}\n" +
				"	                              ^^^^^^\n" +
				"Marker cannot be resolved to a type\n" +
				"----------\n" +
				"4. ERROR in X.java (at line 2)\n" +
				"	void foo(Map<@Marker ? super @Marker Object, @Marker ? extends @Marker String> m){}\n" +
				"	                                              ^^^^^^\n" +
				"Marker cannot be resolved to a type\n" +
				"----------\n" +
				"5. ERROR in X.java (at line 2)\n" +
				"	void foo(Map<@Marker ? super @Marker Object, @Marker ? extends @Marker String> m){}\n" +
				"	                                                                ^^^^^^\n" +
				"Marker cannot be resolved to a type\n" +
				"----------\n" +
				"6. ERROR in X.java (at line 3)\n" +
				"	void goo(Map<@Marker ? extends @Marker Object, @Marker ? super @Marker String> m){}\n" +
				"	         ^^^\n" +
				"Map cannot be resolved to a type\n" +
				"----------\n" +
				"7. ERROR in X.java (at line 3)\n" +
				"	void goo(Map<@Marker ? extends @Marker Object, @Marker ? super @Marker String> m){}\n" +
				"	              ^^^^^^\n" +
				"Marker cannot be resolved to a type\n" +
				"----------\n" +
				"8. ERROR in X.java (at line 3)\n" +
				"	void goo(Map<@Marker ? extends @Marker Object, @Marker ? super @Marker String> m){}\n" +
				"	                                ^^^^^^\n" +
				"Marker cannot be resolved to a type\n" +
				"----------\n" +
				"9. ERROR in X.java (at line 3)\n" +
				"	void goo(Map<@Marker ? extends @Marker Object, @Marker ? super @Marker String> m){}\n" +
				"	                                                ^^^^^^\n" +
				"Marker cannot be resolved to a type\n" +
				"----------\n" +
				"10. ERROR in X.java (at line 3)\n" +
				"	void goo(Map<@Marker ? extends @Marker Object, @Marker ? super @Marker String> m){}\n" +
				"	                                                                ^^^^^^\n" +
				"Marker cannot be resolved to a type\n" +
				"----------\n");
	}

