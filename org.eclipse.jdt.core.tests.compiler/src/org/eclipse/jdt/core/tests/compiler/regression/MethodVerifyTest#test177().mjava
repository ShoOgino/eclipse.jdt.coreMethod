//https://bugs.eclipse.org/bugs/show_bug.cgi?id=251091
// Srikanth, Aug 10th 2010. This test does not elicit any name clash error from javac 5 or javac6
// javac7 reports "X.java:7: name clash: foo(Collection<?>) in X and foo(Collection) in A have the
// same erasure, yet neither overrides the other"
// After the fix for https://bugs.eclipse.org/bugs/show_bug.cgi?id=322001, we match
// JDK7 (7b100) behavior. (earlier we would issue an extra name clash)
public void test177() {
	if (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_6) { // see test187()
		String expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?
				"----------\n" + 
				"1. WARNING in X.java (at line 3)\n" + 
				"	class A extends LinkedHashMap {\n" + 
				"	      ^\n" + 
				"The serializable class A does not declare a static final serialVersionUID field of type long\n" + 
				"----------\n" + 
				"2. WARNING in X.java (at line 3)\n" + 
				"	class A extends LinkedHashMap {\n" + 
				"	                ^^^^^^^^^^^^^\n" + 
				"LinkedHashMap is a raw type. References to generic type LinkedHashMap<K,V> should be parameterized\n" + 
				"----------\n" + 
				"3. WARNING in X.java (at line 4)\n" + 
				"	public A foo(Collection c) { return this; }\n" + 
				"	             ^^^^^^^^^^\n" + 
				"Collection is a raw type. References to generic type Collection<E> should be parameterized\n" + 
				"----------\n" + 
				"4. WARNING in X.java (at line 6)\n" + 
				"	class X extends A implements I {\n" + 
				"	      ^\n" + 
				"The serializable class X does not declare a static final serialVersionUID field of type long\n" + 
				"----------\n" + 
				"5. WARNING in X.java (at line 7)\n" + 
				"	@Override public X foo(Collection<?> c) { return this; }\n" + 
				"	                   ^^^^^^^^^^^^^^^^^^^^\n" + 
				"Name clash: The method foo(Collection<?>) of type X has the same erasure as foo(Collection) of type A but does not override it\n" + 
				"----------\n":
					"----------\n" + 
					"1. WARNING in X.java (at line 3)\n" + 
					"	class A extends LinkedHashMap {\n" + 
					"	      ^\n" + 
					"The serializable class A does not declare a static final serialVersionUID field of type long\n" + 
					"----------\n" + 
					"2. WARNING in X.java (at line 3)\n" + 
					"	class A extends LinkedHashMap {\n" + 
					"	                ^^^^^^^^^^^^^\n" + 
					"LinkedHashMap is a raw type. References to generic type LinkedHashMap<K,V> should be parameterized\n" + 
					"----------\n" + 
					"3. WARNING in X.java (at line 4)\n" + 
					"	public A foo(Collection c) { return this; }\n" + 
					"	             ^^^^^^^^^^\n" + 
					"Collection is a raw type. References to generic type Collection<E> should be parameterized\n" + 
					"----------\n" + 
					"4. WARNING in X.java (at line 6)\n" + 
					"	class X extends A implements I {\n" + 
					"	      ^\n" + 
					"The serializable class X does not declare a static final serialVersionUID field of type long\n" + 
					"----------\n" + 
					"5. ERROR in X.java (at line 7)\n" + 
					"	@Override public X foo(Collection<?> c) { return this; }\n" + 
					"	                   ^^^^^^^^^^^^^^^^^^^^\n" + 
					"Name clash: The method foo(Collection<?>) of type X has the same erasure as foo(Collection) of type A but does not override it\n" + 
					"----------\n";
		this.runNegativeTest(
			new String[] {
				"X.java",
				"import java.util.*;\n" +
				"interface I { I foo(Collection<?> c); }\n" +
				"class A extends LinkedHashMap {\n" +
				"	public A foo(Collection c) { return this; }\n" +
				"}\n" +
				"class X extends A implements I {\n" +
				"	@Override public X foo(Collection<?> c) { return this; }\n" +
				"}"
			},
			expectedCompilerLog
		);
	} else {
		this.runNegativeTest(
			new String[] {
				"X.java",
				"import java.util.*;\n" +
				"interface I { I foo(Collection<?> c); }\n" +
				"class A extends LinkedHashMap {\n" +
				"	public A foo(Collection c) { return this; }\n" +
				"}\n" +
				"class X extends A implements I {\n" +
				"	@Override public X foo(Collection<?> c) { return this; }\n" +
				"}"
			},
			"----------\n" + 
			"1. WARNING in X.java (at line 3)\n" + 
			"	class A extends LinkedHashMap {\n" + 
			"	      ^\n" + 
			"The serializable class A does not declare a static final serialVersionUID field of type long\n" + 
			"----------\n" + 
			"2. WARNING in X.java (at line 3)\n" + 
			"	class A extends LinkedHashMap {\n" + 
			"	                ^^^^^^^^^^^^^\n" + 
			"LinkedHashMap is a raw type. References to generic type LinkedHashMap<K,V> should be parameterized\n" + 
			"----------\n" + 
			"3. WARNING in X.java (at line 4)\n" + 
			"	public A foo(Collection c) { return this; }\n" + 
			"	             ^^^^^^^^^^\n" + 
			"Collection is a raw type. References to generic type Collection<E> should be parameterized\n" + 
			"----------\n" + 
			"4. WARNING in X.java (at line 6)\n" + 
			"	class X extends A implements I {\n" + 
			"	      ^\n" + 
			"The serializable class X does not declare a static final serialVersionUID field of type long\n" + 
			"----------\n" + 
			"5. ERROR in X.java (at line 7)\n" + 
			"	@Override public X foo(Collection<?> c) { return this; }\n" + 
			"	                   ^^^^^^^^^^^^^^^^^^^^\n" + 
			"Name clash: The method foo(Collection<?>) of type X has the same erasure as foo(Collection) of type A but does not override it\n" + 
			"----------\n" +
			"6. ERROR in X.java (at line 7)\n" + 
			"	@Override public X foo(Collection<?> c) { return this; }\n" + 
			"	                   ^^^^^^^^^^^^^^^^^^^^\n" + 
			"The method foo(Collection<?>) of type X must override a superclass method\n" + 
			"----------\n"
		);
	}
}

