	// ClassInstanceCreationExpression ::= Primary '.' 'new' OnlyTypeArguments ClassType EnterInstanceCreationArgumentList '(' ArgumentListopt ')' QualifiedClassBodyopt
	// ClassInstanceCreationExpression ::= Primary '.' 'new' ClassType EnterInstanceCreationArgumentList '(' ArgumentListopt ')' QualifiedClassBodyopt
	public void test033() throws Exception {
		this.runNegativeTest(
				new String[] {
					"X.java",
					"public class X {\n" +
					"    class Y {\n" +
					"    }\n" +
					"    Y y1 = new @Marker X().new @Marker Y();\n" +
					"    Y y2 = new @Marker X().new <String> @Marker Y();\n" +
					"}\n"
				},
				"----------\n" + 
				"1. ERROR in X.java (at line 4)\n" + 
				"	Y y1 = new @Marker X().new @Marker Y();\n" + 
				"	            ^^^^^^\n" + 
				"Marker cannot be resolved to a type\n" + 
				"----------\n" + 
				"2. ERROR in X.java (at line 4)\n" + 
				"	Y y1 = new @Marker X().new @Marker Y();\n" + 
				"	                            ^^^^^^\n" + 
				"Marker cannot be resolved to a type\n" + 
				"----------\n" + 
				"3. ERROR in X.java (at line 5)\n" + 
				"	Y y2 = new @Marker X().new <String> @Marker Y();\n" + 
				"	            ^^^^^^\n" + 
				"Marker cannot be resolved to a type\n" + 
				"----------\n" + 
				"4. WARNING in X.java (at line 5)\n" + 
				"	Y y2 = new @Marker X().new <String> @Marker Y();\n" + 
				"	                            ^^^^^^\n" + 
				"Unused type arguments for the non generic constructor X.Y() of type X.Y; it should not be parameterized with arguments <String>\n" + 
				"----------\n" + 
				"5. ERROR in X.java (at line 5)\n" + 
				"	Y y2 = new @Marker X().new <String> @Marker Y();\n" + 
				"	                                     ^^^^^^\n" + 
				"Marker cannot be resolved to a type\n" + 
				"----------\n");
	}

