	// from https://bugs.eclipse.org/bugs/show_bug.cgi?id=385593#c1
	public void test385593_1() throws Exception {
		this.runConformTest(
			new String[] {
					"stackmap/StackMapTableFormatError.java",
					"package stackmap;\n" + 
					"\n" + 
					"import java.util.Collection;\n" + 
					"import java.util.Collections;\n" + 
					"\n" + 
					"/**\n" + 
					" * If compiled with Eclipse (compiler target >= 1.6) this snippet causes the\n" + 
					" * error \"java.lang.ClassFormatError: StackMapTable format error: bad\n" + 
					" * verification type\" when executed with JaCoCo code coverage. JaCoCo seems to\n" + 
					" * get confused by unexpected stackmap frames generated by ECJ.\n" + 
					" */\n" + 
					"public class StackMapTableFormatError {\n" + 
					"\n" + 
					"	public static Object exec(Collection<Object> set, Object a,\n" + 
					"			boolean b) {\n" + 
					"		for (Object e : set) {\n" + 
					"			if (a != null && (e == null || b)) {\n" + 
					"				continue;\n" + 
					"			}\n" + 
					"			return null;\n" + 
					"		}\n" + 
					"		return null;\n" + 
					"	}\n" + 
					"	\n" + 
					"	public static void main(String[] args) {\n" + 
					"		exec(Collections.emptySet(), null, false);\n" + 
					"	}\n" + 
					"\n" + 
					"}\n"
			});

		ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
		byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR+File.separator+"stackmap"+File.separator+"StackMapTableFormatError.class"));
		String actualOutput =
			disassembler.disassemble(
				classFileBytes,
				"\n",
				ClassFileBytesDisassembler.DETAILED);

		String expectedOutput =
				"  // Method descriptor #15 (Ljava/util/Collection;Ljava/lang/Object;Z)Ljava/lang/Object;\n" + 
				"  // Signature: (Ljava/util/Collection<Ljava/lang/Object;>;Ljava/lang/Object;Z)Ljava/lang/Object;\n" + 
				"  // Stack: 1, Locals: 5\n" + 
				"  public static java.lang.Object exec(java.util.Collection set, java.lang.Object a, boolean b);\n" + 
				"     0  aload_0 [set]\n" + 
				"     1  invokeinterface java.util.Collection.iterator() : java.util.Iterator [18] [nargs: 1]\n" + 
				"     6  astore 4\n" + 
				"     8  goto 36\n" + 
				"    11  aload 4\n" + 
				"    13  invokeinterface java.util.Iterator.next() : java.lang.Object [24] [nargs: 1]\n" + 
				"    18  astore_3 [e]\n" + 
				"    19  aload_1 [a]\n" + 
				"    20  ifnull 34\n" + 
				"    23  aload_3 [e]\n" + 
				"    24  ifnull 36\n" + 
				"    27  iload_2 [b]\n" + 
				"    28  ifeq 34\n" + 
				"    31  goto 36\n" + 
				"    34  aconst_null\n" + 
				"    35  areturn\n" + 
				"    36  aload 4\n" + 
				"    38  invokeinterface java.util.Iterator.hasNext() : boolean [30] [nargs: 1]\n" + 
				"    43  ifne 11\n" + 
				"    46  aconst_null\n" + 
				"    47  areturn\n" + 
				"      Line numbers:\n" + 
				"        [pc: 0, line: 16]\n" + 
				"        [pc: 19, line: 17]\n" + 
				"        [pc: 31, line: 18]\n" + 
				"        [pc: 34, line: 20]\n" + 
				"        [pc: 36, line: 16]\n" + 
				"        [pc: 46, line: 22]\n" + 
				"      Local variable table:\n" + 
				"        [pc: 0, pc: 48] local: set index: 0 type: java.util.Collection\n" + 
				"        [pc: 0, pc: 48] local: a index: 1 type: java.lang.Object\n" + 
				"        [pc: 0, pc: 48] local: b index: 2 type: boolean\n" + 
				"        [pc: 19, pc: 36] local: e index: 3 type: java.lang.Object\n" + 
				"      Local variable type table:\n" + 
				"        [pc: 0, pc: 48] local: set index: 0 type: java.util.Collection<java.lang.Object>\n" + 
				"      Stack map table: number of frames 3\n" + 
				"        [pc: 11, full, stack: {}, locals: {java.util.Collection, java.lang.Object, int, _, java.util.Iterator}]\n" + 
				"        [pc: 34, full, stack: {}, locals: {java.util.Collection, java.lang.Object, int, java.lang.Object, java.util.Iterator}]\n" + 
				"        [pc: 36, full, stack: {}, locals: {java.util.Collection, java.lang.Object, int, _, java.util.Iterator}]"; 
		int index = actualOutput.indexOf(expectedOutput);
		if (index == -1 || expectedOutput.length() == 0) {
			System.out.println(Util.displayString(actualOutput, 2));
		}
		if (index == -1) {
			assertEquals("Wrong contents", expectedOutput, actualOutput);
		}
	}

