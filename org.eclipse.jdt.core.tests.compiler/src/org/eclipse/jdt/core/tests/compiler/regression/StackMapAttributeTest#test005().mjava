	public void test005() {
		this.runConformTest(
				new String[] {
					"X.java",
					"public class X {\n" + 
					"  public static void main(String args[]) {\n" + 
					"    int i = 0, j, k, l;\n" + 
					"    boolean b;\n" + 
					"    if (i == 0 && (j = ++i) > 0)\n" + 
					"      i += j;\n" + 
					"    while (true) {\n" + 
					"      k = 3;\n" + 
					"      break;\n" + 
					"    } \n" + 
					"    i -= k;\n" + 
					"    b = false && (i = l) > 0;\n" + 
					"    if (i > 0)\n" + 
					"      l = i;\n" + 
					"    else\n" + 
					"      l = k;\n" + 
					"    j = l;\n" + 
					"    if (i != -1 || j != 3 || k != 3 || l != 3)\n" + 
					"      System.out.println(\"FAILED\");\n" + 
					"    System.out.println(\"SUCCESS\");\n" + 
					"  }\n" + 
					"}",
				},
				"SUCCESS");
				
			ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
			String actualOutput = null;
			try {
				byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +"X.class"));
				actualOutput =
					disassembler.disassemble(
						classFileBytes,
						"\n",
						ClassFileBytesDisassembler.DETAILED); 
			} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
				assertTrue("ClassFormatException", false);
			} catch (IOException e) {
				assertTrue("IOException", false);
			}
			
			String expectedOutput = 
				"  // Method descriptor #15 ([Ljava/lang/String;)V\n" + 
				"  // Stack: 2, Locals: 6\n" + 
				"  public static void main(java.lang.String[] args);\n" + 
				"     0  iconst_0\n" + 
				"     1  istore_1 [i]\n" + 
				"     2  iload_1 [i]\n" + 
				"     3  ifne 19\n" + 
				"     6  iinc 1 1 [i]\n" + 
				"     9  iload_1 [i]\n" + 
				"    10  dup\n" + 
				"    11  istore_2 [j]\n" + 
				"    12  ifle 19\n" + 
				"    15  iload_1 [i]\n" + 
				"    16  iload_2 [j]\n" + 
				"    17  iadd\n" + 
				"    18  istore_1 [i]\n" + 
				"    19  iconst_3\n" + 
				"    20  istore_3 [k]\n" + 
				"    21  iload_1 [i]\n" + 
				"    22  iload_3 [k]\n" + 
				"    23  isub\n" + 
				"    24  istore_1 [i]\n" + 
				"    25  iconst_0\n" + 
				"    26  istore 5 [b]\n" + 
				"    28  iload_1 [i]\n" + 
				"    29  ifle 38\n" + 
				"    32  iload_1 [i]\n" + 
				"    33  istore 4 [l]\n" + 
				"    35  goto 41\n" + 
				"    38  iload_3 [k]\n" + 
				"    39  istore 4 [l]\n" + 
				"    41  iload 4 [l]\n" + 
				"    43  istore_2 [j]\n" + 
				"    44  iload_1 [i]\n" + 
				"    45  iconst_m1\n" + 
				"    46  if_icmpne 65\n" + 
				"    49  iload_2 [j]\n" + 
				"    50  iconst_3\n" + 
				"    51  if_icmpne 65\n" + 
				"    54  iload_3 [k]\n" + 
				"    55  iconst_3\n" + 
				"    56  if_icmpne 65\n" + 
				"    59  iload 4 [l]\n" + 
				"    61  iconst_3\n" + 
				"    62  if_icmpeq 73\n" + 
				"    65  getstatic java.lang.System.out : java.io.PrintStream [16]\n" + 
				"    68  ldc <String \"FAILED\"> [22]\n" + 
				"    70  invokevirtual java.io.PrintStream.println(java.lang.String) : void [24]\n" + 
				"    73  getstatic java.lang.System.out : java.io.PrintStream [16]\n" + 
				"    76  ldc <String \"SUCCESS\"> [30]\n" + 
				"    78  invokevirtual java.io.PrintStream.println(java.lang.String) : void [24]\n" + 
				"    81  return\n" + 
				"      Line numbers:\n" + 
				"        [pc: 0, line: 3]\n" + 
				"        [pc: 2, line: 5]\n" + 
				"        [pc: 15, line: 6]\n" + 
				"        [pc: 19, line: 8]\n" + 
				"        [pc: 21, line: 9]\n" + 
				"        [pc: 22, line: 11]\n" + 
				"        [pc: 25, line: 12]\n" + 
				"        [pc: 28, line: 13]\n" + 
				"        [pc: 32, line: 14]\n" + 
				"        [pc: 38, line: 16]\n" + 
				"        [pc: 41, line: 17]\n" + 
				"        [pc: 44, line: 18]\n" + 
				"        [pc: 65, line: 19]\n" + 
				"        [pc: 73, line: 20]\n" + 
				"        [pc: 81, line: 21]\n" + 
				"      Local variable table:\n" + 
				"        [pc: 0, pc: 82] local: args index: 0 type: java.lang.String[]\n" + 
				"        [pc: 2, pc: 82] local: i index: 1 type: int\n" + 
				"        [pc: 12, pc: 19] local: j index: 2 type: int\n" + 
				"        [pc: 44, pc: 82] local: j index: 2 type: int\n" + 
				"        [pc: 21, pc: 82] local: k index: 3 type: int\n" + 
				"        [pc: 35, pc: 38] local: l index: 4 type: int\n" + 
				"        [pc: 41, pc: 82] local: l index: 4 type: int\n" + 
				"        [pc: 28, pc: 82] local: b index: 5 type: boolean\n" + 
				"      Stack map table: number of frames 5\n" + 
				"        [pc: 19, append: {int}]\n" + 
				"        [pc: 38, full, stack: {}, locals: {java.lang.String[], int, _, int, _, int}]\n" + 
				"        [pc: 41, full, stack: {}, locals: {java.lang.String[], int, _, int, int, int}]\n" + 
				"        [pc: 65, full, stack: {}, locals: {java.lang.String[], int, int, int, int, int}]\n" + 
				"        [pc: 73, same]\n";
			
			int index = actualOutput.indexOf(expectedOutput);
			if (index == -1 || expectedOutput.length() == 0) {
				System.out.println(Util.displayString(actualOutput, 2));
			}
			if (index == -1) {
				assertEquals("Wrong contents", expectedOutput, actualOutput);
			}
	}

