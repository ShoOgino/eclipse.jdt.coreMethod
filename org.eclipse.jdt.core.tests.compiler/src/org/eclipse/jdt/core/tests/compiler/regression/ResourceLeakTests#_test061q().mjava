// Bug 358903 - Filter practically unimportant resource leak warnings
// a t-w-r potentially wraps an existing resource
// DISABLED, fails because we currently don't include t-w-r managed resources in the analysis
public void _test061q() {
	if (this.complianceLevel < ClassFileConstants.JDK1_7) return;
	Map options = getCompilerOptions();
	options.put(CompilerOptions.OPTION_ReportUnclosedCloseable, CompilerOptions.ERROR);
	options.put(CompilerOptions.OPTION_ReportPotentiallyUnclosedCloseable, CompilerOptions.ERROR);
	runLeakTest(
		new String[] {
			"X.java",
			"import java.io.PrintWriter;\n" +
			"import java.io.BufferedWriter;\n" +
			"import java.io.IOException;\n" +
			"public class X {\n" +
			"    void foo(boolean b) throws IOException {\n" +
			"        PrintWriter writer = new PrintWriter(\"filename\");\n" +
			"        if (b)\n" +
			"            try (BufferedWriter bw = new BufferedWriter(writer)) {\n" +
			"                bw.write(1);\n" +
			"            }\n" +
			"    }\n" +
			"}\n"
		},
		"----------\n" +
		"1. ERROR in X.java (at line 6)\n" +
		"	PrintWriter writer = new PrintWriter(\\\"filename\\\");\n" +
		"	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" +
		"Potential resource leak: \'writer\' may not be closed\n" +
		"----------\n",
		options);
}

