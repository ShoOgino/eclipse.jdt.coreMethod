	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=169017
	public void test027() {
		this.runConformTest(
			new String[] {
				"X.java",
				"import java.io.IOException;\n" + 
				"import java.io.InputStream;\n" + 
				"public class X {\n" + 
				"	private static final int BUF_SIZE = 8192;\n" + 
				"	public static void main(String[] args) {\n" + 
				"		System.out.println(\"SUCCESS\");\n" + 
				"	}\n" + 
				"	BundleActivator activator;\n" + 
				"	BundleHost bundle;\n" + 
				"	public byte[] getBytes() throws IOException {\n" + 
				"		InputStream in = getInputStream();\n" + 
				"		int length = (int) getSize();\n" + 
				"		byte[] classbytes;\n" + 
				"		int bytesread = 0;\n" + 
				"		int readcount;\n" + 
				"		if (Debug.DEBUG && Debug.DEBUG_LOADER)\n" + 
				"			Debug.println(\"  about to read \" + length + \" bytes from \" + getName()); //$NON-NLS-1$ //$NON-NLS-2$\n" + 
				"		try {\n" + 
				"			if (length > 0) {\n" + 
				"				classbytes = new byte[length];\n" + 
				"				for (; bytesread < length; bytesread += readcount) {\n" + 
				"					readcount = in.read(classbytes, bytesread, length - bytesread);\n" + 
				"					if (readcount <= 0)\n" + 
				"						break;\n" + 
				"				}\n" + 
				"			} else {\n" + 
				"				length = BUF_SIZE;\n" + 
				"				classbytes = new byte[length];\n" + 
				"				readloop: while (true) {\n" + 
				"					for (; bytesread < length; bytesread += readcount) {\n" + 
				"						readcount = in.read(classbytes, bytesread, length - bytesread);\n" + 
				"						if (readcount <= 0)\n" + 
				"							break readloop;\n" + 
				"					}\n" + 
				"					byte[] oldbytes = classbytes;\n" + 
				"					length += BUF_SIZE;\n" + 
				"					classbytes = new byte[length];\n" + 
				"					System.arraycopy(oldbytes, 0, classbytes, 0, bytesread);\n" + 
				"				}\n" + 
				"			}\n" + 
				"			if (classbytes.length > bytesread) {\n" + 
				"				byte[] oldbytes = classbytes;\n" + 
				"				classbytes = new byte[bytesread];\n" + 
				"				System.arraycopy(oldbytes, 0, classbytes, 0, bytesread);\n" + 
				"			}\n" + 
				"		} finally {\n" + 
				"			try {\n" + 
				"				in.close();\n" + 
				"			} catch (IOException ee) {\n" + 
				"				// ignore\n" + 
				"			}\n" + 
				"		}\n" + 
				"		return classbytes;\n" + 
				"	}\n" + 
				"	protected void stop(Throwable t) throws BundleException {\n" + 
				"			String clazz = \"\";//(activator == null) ? \"\" : activator.getClass().getName(); //$NON-NLS-1$\n" + 
				"			throw new BundleException(NLS.bind(Msg.BUNDLE_ACTIVATOR_EXCEPTION, new Object[] {clazz, \"stop\", bundle.getSymbolicName() == null ? \"\" + bundle.getBundleId() : bundle.getSymbolicName()}), t); //$NON-NLS-1$ //$NON-NLS-2$ \n" + 
				"	}\n" + 
				"	private String getName() {\n" + 
				"		// TODO Auto-generated method stub\n" + 
				"		return null;\n" + 
				"	}\n" + 
				"	private int getSize() {\n" + 
				"		// TODO Auto-generated method stub\n" + 
				"		return 0;\n" + 
				"	}\n" + 
				"	private InputStream getInputStream() {\n" + 
				"		// TODO Auto-generated method stub\n" + 
				"		return null;\n" + 
				"	}\n" + 
				"}",
				"Debug.java",
				"class Debug {\n" + 
				"	public static final boolean DEBUG = false;\n" + 
				"	public static final boolean DEBUG_LOADER = false;\n" + 
				"	public static final boolean DEBUG_GENERAL = false;\n" + 
				"	public static void println(String string) {\n" + 
				"		// TODO Auto-generated method stub\n" + 
				"		\n" + 
				"	}\n" + 
				"	public static void printStackTrace(Throwable t) {\n" + 
				"		// TODO Auto-generated method stub\n" + 
				"		\n" + 
				"	}\n" + 
				"}",
				"AccessController.java",
				"class AccessController {\n" + 
				"	static void doPrivileged(Object o) {\n" + 
				"	}\n" + 
				"}",
				"BundleException",
				"class BundleException extends Exception {\n" + 
				"	private static final long serialVersionUID = 5758882959559471648L;\n" + 
				"\n" + 
				"	public BundleException(String bind, Throwable t) {\n" + 
				"		// TODO Auto-generated constructor stub\n" + 
				"	}\n" + 
				"}",
				"PrivilegedExceptionAction.java",
				"class PrivilegedExceptionAction {\n" + 
				"}",
				"BundleActivator.java",
				"class BundleActivator {\n" + 
				"	public void stop(X x) {\n" + 
				"		// TODO Auto-generated method stub\n" + 
				"		\n" + 
				"	}\n" + 
				"}",
				"BundleHost.java",
				"class BundleHost {\n" + 
				"	public Object getSymbolicName() {\n" + 
				"		// TODO Auto-generated method stub\n" + 
				"		return null;\n" + 
				"	}\n" + 
				"	public String getBundleId() {\n" + 
				"		// TODO Auto-generated method stub\n" + 
				"		return null;\n" + 
				"	}\n" + 
				"}",
				"NLS.java",
				"class NLS {\n" + 
				"	public static String bind(String bundleActivatorException, Object[] objects) {\n" + 
				"		// TODO Auto-generated method stub\n" + 
				"		return null;\n" + 
				"	}\n" + 
				"}",
				"PrivilegedActionException.java",
				"class PrivilegedActionException extends Exception {\n" + 
				"	private static final long serialVersionUID = 3919969055057660822L;\n" + 
				"	public Throwable getException() {\n" + 
				"		// TODO Auto-generated method stub\n" + 
				"		return null;\n" + 
				"	}\n" +
				"}",
				"Msg.java",
				"class Msg {\n" + 
				"	public static final String BUNDLE_ACTIVATOR_EXCEPTION = \"\";\n" + 
				"}"
    	},
		"SUCCESS");
	}

