// To test Parser.consumeArrayCreationExpressionWithInitializer() with Type Annotations
public void test0091() throws IOException {
	String source =
		"class X <@Marker T extends @Readonly String> {\n" +
		"    public static void main(String[] args) {\n" +
		"		int [] x1;\n" +
		"		x1 = new int @Marker @SingleMember(2) [] {-1, -2};\n" +
		"       Integer [][] x2;\n" +
		"		x2 = new @Positive Integer @Marker @SingleMember(3) [] @SingleMember(3) [] {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n" +
		"    }\n" +
		"}\n";
	String expectedUnitToString =
		"class X<@Marker T extends @Readonly String> {\n" +
		"  X() {\n" +
		"    super();\n" +
		"  }\n" +
		"  public static void main(String[] args) {\n" +
		"    int[] x1;\n" +
		"    x1 = new int @Marker @SingleMember(2) []{(- 1), (- 2)};\n" +
		"    Integer[][] x2;\n" +
		"    x2 = new @Positive Integer @Marker @SingleMember(3) [] @SingleMember(3) []{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n" +
		"  }\n" +
		"}\n";
	checkParse(CHECK_ALL & ~CHECK_INDEXING_PARSER, source.toCharArray(), null, "test0091", expectedUnitToString );
}

