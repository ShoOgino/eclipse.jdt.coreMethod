// -warn option - regression tests
public void test175_warn_options() {
	// same source as 174, skip check defaults
	this.runConformTest(
		new String[] {
			"X.java",
			"public class X {\n" + 
			"  int i;\n" + 
			"  class XX {\n" + 
			"    int i;\n" + 
			"  }\n" + 
			"  void foo(int i) {\n" + 
			"    class XX {\n" + 
			"    }\n" + 
			"    if (i > 0) {\n" + 
			"      try {\n" + 
			"        bar();\n" + 
			"      } catch (E2 e2) {\n" + 
			"      } catch (E1 e1) {\n" + 
			"      }\n" + 
			"    }\n" + 
			"  }\n" + 
			"  void bar() throws E2 {\n" + 
			"    throw new E2();\n" + 
			"  }\n" + 
			"}\n" + 
			"class E1 extends Exception {\n" + 
			"  private static final long serialVersionUID = 1L;\n" + 
			"}\n" + 
			"class E2 extends E1 {\n" + 
			"  private static final long serialVersionUID = 1L;\n" + 
			"}"
		},
		"\"" + OUTPUT_DIR +  File.separator + "X.java\""
		+ " -warn:hiding -proc:none -d \"" + OUTPUT_DIR + "\"",
		"",
		"----------\n" + 
		"1. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 4)\n" + 
		"	int i;\n" + 
		"	    ^\n" + 
		"The field X.XX.i is hiding a field from type X\n" + 
		"----------\n" + 
		"2. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 6)\n" + 
		"	void foo(int i) {\n" + 
		"	             ^\n" + 
		"The parameter i is hiding a field from type X\n" + 
		"----------\n" + 
		"3. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 7)\n" + 
		"	class XX {\n" + 
		"	      ^^\n" + 
		"The type XX is hiding the type X.XX\n" + 
		"----------\n" + 
		"4. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 13)\n" + 
		"	} catch (E1 e1) {\n" + 
		"	         ^^\n" + 
		"Unreachable catch block for E1. Only more specific exceptions are thrown and handled by previous catch block(s).\n" + 
		"----------\n" + 
		"4 problems (4 warnings)",
		false);
}

