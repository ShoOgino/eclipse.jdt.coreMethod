//https://bugs.eclipse.org/bugs/show_bug.cgi?id=155423 - variation
public void test030() {
	this.runConformTest(
		new String[] {
			"X.java",
			"class Y {\n" + 
			"	Y(Object o) {\n" + 
			"		System.out.print(o);\n" + 
			"	}\n" + 
			"}\n" + 
			"\n" + 
			"public class X extends Y {\n" + 
			"	{\n" + 
			"		if (true)\n" + 
			"			throw new NullPointerException();\n" + 
			"	}\n" + 
			"\n" + 
			"	X() {\n" + 
			"		super(new Object() {\n" + 
			"			public String toString() {\n" + 
			"				return \"SUCCESS:\";\n" + 
			"			}\n" + 
			"		});\n" + 
			"		System.out.println();\n" + 
			"	}\n" + 
			"	public static void main(String[] args) {\n" + 
			"		try {\n" + 
			"			new X();\n" + 
			"		} catch(NullPointerException e) {\n" + 
			"			System.out.println(\"caught:NPE\");\n" + 
			"		}\n" + 
			"	}\n" + 
			"}\n", // =================
		},
		"SUCCESS:caught:NPE");
	// check no default return opcode is appended
	String expectedOutput =
		"  // Method descriptor #6 ()V\n" + 
		"  // Stack: 3, Locals: 1\n" + 
		"  X();\n" + 
		"     0  aload_0 [this]\n" + 
		"     1  new X$1 [8]\n" + 
		"     4  dup\n" + 
		"     5  invokespecial X$1() [10]\n" + 
		"     8  invokespecial Y(java.lang.Object) [12]\n" + 
		"    11  new java.lang.NullPointerException [15]\n" + 
		"    14  dup\n" + 
		"    15  invokespecial java.lang.NullPointerException() [17]\n" + 
		"    18  athrow\n" + 
		"      Line numbers:\n" + 
		"        [pc: 0, line: 14]\n" + 
		"        [pc: 11, line: 10]\n" + 
		"      Local variable table:\n" + 
		"        [pc: 0, pc: 19] local: this index: 0 type: X\n";
	
	try {
		File f = new File(OUTPUT_DIR + File.separator + "X.class");
		byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
		ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
		String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
		int index = result.indexOf(expectedOutput);
		if (index == -1 || expectedOutput.length() == 0) {
			System.out.println(Util.displayString(result, 3));
		}
		if (index == -1) {
			assertEquals("Wrong contents", expectedOutput, result);
		}
	} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
		assertTrue(false);
	} catch (IOException e) {
		assertTrue(false);
	}	
}

