	//https://bugs.eclipse.org/bugs/show_bug.cgi?id=85303 - variation
	public void test0504() throws Exception {
		this.runConformTest(
				new String[] {
					"X.java",
					"class XA {}\n" +
					"interface XB {\n" +
					"	XB CONST = new XB(){ public String toString() { return \"SUCCESS\"; }};\n" +
					"}\n" +
					"class XAB extends XA implements XB {}\n" +
					"\n" +
					"public class X <E extends XA&XB> {\n" +
					"  E e() { return null; }\n" +
					"  public static void main(String[] args) {\n" +
					"	  System.out.print(new X<XAB>().e().CONST);\n" +
					"	  new X<XAB>().foo();\n" +
					"  }\n" +
					"  public void foo() {\n" +
					"    System.out.print(this.e().CONST);\n" +
					"  }\n" +
					"}\n",
				},
				"SUCCESSSUCCESS");
			String expectedOutput =
				"// Signature: <E:LXA;:LXB;>Ljava/lang/Object;\n" +
				"public class X {\n" +
				"  \n" +
				"  // Method descriptor #6 ()V\n" +
				"  // Stack: 1, Locals: 1\n" +
				"  public X();\n" +
				"    0  aload_0 [this]\n" +
				"    1  invokespecial java.lang.Object() [8]\n" +
				"    4  return\n" +
				"      Line numbers:\n" +
				"        [pc: 0, line: 7]\n" +
				"      Local variable table:\n" +
				"        [pc: 0, pc: 5] local: this index: 0 type: X\n" +
				"      Local variable type table:\n" +
				"        [pc: 0, pc: 5] local: this index: 0 type: X<E>\n" +
				"  \n" +
				"  // Method descriptor #17 ()LXA;\n" +
				"  // Signature: ()TE;\n" +
				"  // Stack: 1, Locals: 1\n" +
				"  XA e();\n" +
				"    0  aconst_null\n" +
				"    1  areturn\n" +
				"      Line numbers:\n" +
				"        [pc: 0, line: 8]\n" +
				"      Local variable table:\n" +
				"        [pc: 0, pc: 2] local: this index: 0 type: X\n" +
				"      Local variable type table:\n" +
				"        [pc: 0, pc: 2] local: this index: 0 type: X<E>\n" +
				"  \n" +
				"  // Method descriptor #21 ([Ljava/lang/String;)V\n" +
				"  // Stack: 3, Locals: 1\n" +
				"  public static void main(java.lang.String[] args);\n" +
				"     0  getstatic java.lang.System.out : java.io.PrintStream [22]\n" +
				"     3  new X [1]\n" +
				"     6  dup\n" +
				"     7  invokespecial X() [28]\n" +
				"    10  invokevirtual X.e() : XA [29]\n" +
				"    13  checkcast XAB [31]\n" +
				"    16  pop\n" +
				"    17  getstatic XAB.CONST : XB [33]\n" +
				"    20  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [37]\n" +
				"    23  new X [1]\n" +
				"    26  dup\n" +
				"    27  invokespecial X() [28]\n" +
				"    30  invokevirtual X.foo() : void [43]\n" +
				"    33  return\n" +
				"      Line numbers:\n" +
				"        [pc: 0, line: 10]\n" +
				"        [pc: 23, line: 11]\n" +
				"        [pc: 33, line: 12]\n" +
				"      Local variable table:\n" +
				"        [pc: 0, pc: 34] local: args index: 0 type: java.lang.String[]\n" +
				"  \n" +
				"  // Method descriptor #6 ()V\n" +
				"  // Stack: 2, Locals: 1\n" +
				"  public void foo();\n" +
				"     0  getstatic java.lang.System.out : java.io.PrintStream [22]\n" +
				"     3  aload_0 [this]\n" +
				"     4  invokevirtual X.e() : XA [29]\n" +
				"     7  checkcast XB [48]\n" +
				"    10  pop\n" +
				"    11  getstatic XB.CONST : XB [50]\n" +
				"    14  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [37]\n" +
				"    17  return\n" +
				"      Line numbers:\n" +
				"        [pc: 0, line: 14]\n" +
				"        [pc: 17, line: 15]\n" +
				"      Local variable table:\n" +
				"        [pc: 0, pc: 18] local: this index: 0 type: X\n" +
				"      Local variable type table:\n" +
				"        [pc: 0, pc: 18] local: this index: 0 type: X<E>\n";

			File f = new File(OUTPUT_DIR + File.separator + "X.class");
			byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
			ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
			String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
			int index = result.indexOf(expectedOutput);
			if (index == -1 || expectedOutput.length() == 0) {
				System.out.println(Util.displayString(result, 3));
			}
			if (index == -1) {
				assertEquals("Wrong contents", expectedOutput, result);
			}
		}

