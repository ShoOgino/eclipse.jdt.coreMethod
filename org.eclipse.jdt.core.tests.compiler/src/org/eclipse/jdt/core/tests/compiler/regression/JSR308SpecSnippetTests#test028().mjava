	public void test028() throws Exception {
		this.runConformTest(
			new String[] {
				"X.java",
				"import java.lang.annotation.*;\n" +
				"import java.util.List;\n" +
				"import static java.lang.annotation.ElementType.*; \n" +
				"@Target(TYPE_USE)\n" +
				"@interface NonNull {}\n" +
				"class X<@NonNull T> {\n" +
				"	<@NonNull K> void foo() {}\n" +
				"	List<@NonNull ?> l;\n" +
				"}\n",
		},
		"");
		// javac b100
		// On the type declaration:
		//  RuntimeInvisibleTypeAnnotations:
		//   0: #9(): CLASS_TYPE_PARAMETER, param_index=0
		// On the method:
	    //  RuntimeInvisibleTypeAnnotations:
	    //   0: #9(): METHOD_TYPE_PARAMETER, param_index=0
		// On the field:
		//  RuntimeInvisibleTypeAnnotations:
		//   0: #9(): FIELD, location=[TYPE_ARGUMENT(0)]
		String expectedOutput =
				"// Compiled from X.java (version 1.8 : 52.0, super bit)\n" +
				"// Signature: <T:Ljava/lang/Object;>Ljava/lang/Object;\n" +
				"class X {\n" +
				"  Constant pool:\n" +
				"    constant #1 class: #2 X\n" +
				"    constant #2 utf8: \"X\"\n" +
				"    constant #3 class: #4 java/lang/Object\n" +
				"    constant #4 utf8: \"java/lang/Object\"\n" +
				"    constant #5 utf8: \"l\"\n" +
				"    constant #6 utf8: \"Ljava/util/List;\"\n" +
				"    constant #7 utf8: \"Signature\"\n" +
				"    constant #8 utf8: \"Ljava/util/List<*>;\"\n" +
				"    constant #9 utf8: \"RuntimeInvisibleTypeAnnotations\"\n" +
				"    constant #10 utf8: \"LNonNull;\"\n" +
				"    constant #11 utf8: \"<init>\"\n" +
				"    constant #12 utf8: \"()V\"\n" +
				"    constant #13 utf8: \"Code\"\n" +
				"    constant #14 method_ref: #3.#15 java/lang/Object.<init> ()V\n" +
				"    constant #15 name_and_type: #11.#12 <init> ()V\n" +
				"    constant #16 utf8: \"LineNumberTable\"\n" +
				"    constant #17 utf8: \"LocalVariableTable\"\n" +
				"    constant #18 utf8: \"this\"\n" +
				"    constant #19 utf8: \"LX;\"\n" +
				"    constant #20 utf8: \"LocalVariableTypeTable\"\n" +
				"    constant #21 utf8: \"LX<TT;>;\"\n" +
				"    constant #22 utf8: \"foo\"\n" +
				"    constant #23 utf8: \"<K:Ljava/lang/Object;>()V\"\n" +
				"    constant #24 utf8: \"SourceFile\"\n" +
				"    constant #25 utf8: \"X.java\"\n" +
				"    constant #26 utf8: \"<T:Ljava/lang/Object;>Ljava/lang/Object;\"\n" +
				"  \n" +
				"  // Field descriptor #6 Ljava/util/List;\n" +
				"  // Signature: Ljava/util/List<*>;\n" +
				"  java.util.List l;\n" +
				"    RuntimeInvisibleTypeAnnotations: \n" +
				"      #10 @NonNull(\n" +
				"        target type = 0x13 FIELD\n" +
				"        location = [TYPE_ARGUMENT(0)]\n" +
				"      )\n" +
				"  \n" +
				"  // Method descriptor #12 ()V\n" +
				"  // Stack: 1, Locals: 1\n" +
				"  X();\n" +
				"    0  aload_0 [this]\n" +
				"    1  invokespecial java.lang.Object() [14]\n" +
				"    4  return\n" +
				"      Line numbers:\n" +
				"        [pc: 0, line: 6]\n" +
				"      Local variable table:\n" +
				"        [pc: 0, pc: 5] local: this index: 0 type: X\n" +
				"      Local variable type table:\n" +
				"        [pc: 0, pc: 5] local: this index: 0 type: X<T>\n" +
				"  \n" +
				"  // Method descriptor #12 ()V\n" +
				"  // Signature: <K:Ljava/lang/Object;>()V\n" +
				"  // Stack: 0, Locals: 1\n" +
				"  void foo();\n" +
				"    0  return\n" +
				"      Line numbers:\n" +
				"        [pc: 0, line: 7]\n" +
				"      Local variable table:\n" +
				"        [pc: 0, pc: 1] local: this index: 0 type: X\n" +
				"      Local variable type table:\n" +
				"        [pc: 0, pc: 1] local: this index: 0 type: X<T>\n" +
				"    RuntimeInvisibleTypeAnnotations: \n" +
				"      #10 @NonNull(\n" +
				"        target type = 0x1 METHOD_TYPE_PARAMETER\n" +
				"        type parameter index = 0\n" +
				"      )\n" +
				"\n" +
				"  RuntimeInvisibleTypeAnnotations: \n" +
				"    #10 @NonNull(\n" +
				"      target type = 0x0 CLASS_TYPE_PARAMETER\n" +
				"      type parameter index = 0\n" +
				"    )\n" +
				"}";
		checkDisassembledClassFile(OUTPUT_DIR + File.separator + "X.class", "X", expectedOutput, ClassFileBytesDisassembler.SYSTEM);
	}

