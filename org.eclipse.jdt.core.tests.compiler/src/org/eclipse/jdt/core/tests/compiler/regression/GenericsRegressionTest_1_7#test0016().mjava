// To verify that <> cannot be used with explicit type arguments to generic constructor.
public void test0016() {
	this.runNegativeTest(
		new String[] {
			"X.java",
			"public class X<T> {\n" +
			"	<E> X(){\n" +
			"		System.out.println(\"const.1\");\n" +
			"	}\n" +
			"	<K,J> X (Integer i) {\n" +
			"		System.out.println(\"const.2\");\n" +
			"	}\n" +
			"	public static void main(String[] args) {\n" +
			"		X<String> x = new <String>X<>();\n" +
			"		X<String> x2 = new <String, Integer>X<>(1);\n" +
			"	}\n" +
			"}",
		},
		"----------\n" +
		"1. ERROR in X.java (at line 9)\n" +
		"	X<String> x = new <String>X<>();\n" +
		"	                   ^^^^^^\n" +
		"Explicit type arguments cannot be used with \'<>\' in an allocation expression\n" +
		"----------\n" +
		"2. ERROR in X.java (at line 10)\n" +
		"	X<String> x2 = new <String, Integer>X<>(1);\n" +
		"	                    ^^^^^^^^^^^^^^^\n" +
		"Explicit type arguments cannot be used with \'<>\' in an allocation expression\n" +
		"----------\n");
}

