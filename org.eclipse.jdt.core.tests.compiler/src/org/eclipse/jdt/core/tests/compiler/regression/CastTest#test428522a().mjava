// https://bugs.eclipse.org/bugs/show_bug.cgi?id=428522,  [1.8] VerifyError when a non primitive type cast to primitive type
public void test428522a() throws Exception {
	if (this.complianceLevel < ClassFileConstants.JDK1_7)
		return;
	Map customOptions = getCompilerOptions();
	customOptions.put(CompilerOptions.OPTION_PreserveUnusedLocal, CompilerOptions.PRESERVE);
	this.runConformTest(
		new String[] {
			"X.java",
			"public class X {\n" +
			"    public static void main(String args[]) {\n" +
			"    	long l = (long) ((Object) 100L);\n" +
			"    	System.out.println(\"OK\");\n" +
			"    }\n" +
			"}\n",
		},
		"OK", customOptions);
	ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
	byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +"X.class"));
	String actualOutput =
		disassembler.disassemble(
			classFileBytes,
			"\n",
			ClassFileBytesDisassembler.DETAILED);

	String expectedOutput =
			"  // Method descriptor #15 ([Ljava/lang/String;)V\n" +
			"  // Stack: 2, Locals: 3\n" +
			"  public static void main(java.lang.String[] args);\n" +
			"     0  ldc2_w <Long 100> [16]\n" +
			"     3  invokestatic java.lang.Long.valueOf(long) : java.lang.Long [18]\n" +
			"     6  checkcast java.lang.Long [19]\n" +
			"     9  invokevirtual java.lang.Long.longValue() : long [24]\n" +
			"    12  lstore_1 [l]\n" +
			"    13  getstatic java.lang.System.out : java.io.PrintStream [28]\n" +
			"    16  ldc <String \"OK\"> [34]\n" +
			"    18  invokevirtual java.io.PrintStream.println(java.lang.String) : void [36]\n" +
			"    21  return\n" +
			"      Line numbers:\n" +
			"        [pc: 0, line: 3]\n" +
			"        [pc: 13, line: 4]\n" +
			"        [pc: 21, line: 5]\n" +
			"      Local variable table:\n" +
			"        [pc: 0, pc: 22] local: args index: 0 type: java.lang.String[]\n" +
			"        [pc: 13, pc: 22] local: l index: 1 type: long\n" +
			"}";
	int index = actualOutput.indexOf(expectedOutput);
	if (index == -1 || expectedOutput.length() == 0) {
		System.out.println(Util.displayString(actualOutput, 2));
	}
	if (index == -1) {
		assertEquals("Wrong contents", expectedOutput, actualOutput);
	}
}

