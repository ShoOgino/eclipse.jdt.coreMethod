	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=83162
	public void test036d() { // 2 interface cases
		// in these cases, bridge methods are needed once abstract/concrete methods are defiined (either in the abstract class or a concrete subclass)
		if (this.complianceLevel < ClassFileConstants.JDK1_7) {
			this.runConformTest(
					new String[] {
							"Y.java",
							"abstract class Y implements Equivalent<String>, EqualityComparable<Integer> {\n" +
									"	public abstract boolean equalTo(Number other);\n" +
									"}\n" +
									"interface Equivalent<T> { boolean equalTo(T other); }\n" +
									"interface EqualityComparable<T> { boolean equalTo(T other); }\n"
					},
					""
					// no bridge methods are created here since Y does not define an equalTo(?) method which equals an inherited equalTo method
					);
		} else {
			this.runNegativeTest(
					new String[] {
							"Y.java",
							"abstract class Y implements Equivalent<String>, EqualityComparable<Integer> {\n" +
									"	public abstract boolean equalTo(Number other);\n" +
									"}\n" +
									"interface Equivalent<T> { boolean equalTo(T other); }\n" +
									"interface EqualityComparable<T> { boolean equalTo(T other); }\n"
					},
					"----------\n" + 
					"1. ERROR in Y.java (at line 1)\n" + 
					"	abstract class Y implements Equivalent<String>, EqualityComparable<Integer> {\n" + 
					"	               ^\n" + 
					"Name clash: The method equalTo(T) of type Equivalent<T> has the same erasure as equalTo(T) of type EqualityComparable<T> but does not override it\n" + 
					"----------\n");
		}
	}

