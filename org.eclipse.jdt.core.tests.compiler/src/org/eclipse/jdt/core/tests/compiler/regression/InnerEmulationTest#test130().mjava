//https://bugs.eclipse.org/bugs/show_bug.cgi?id=164497
public void test130() {
	CompilerOptions options = new CompilerOptions(getCompilerOptions());
	if (options.sourceLevel <= ClassFileConstants.JDK1_3) {
    	runConformTest(
   			true /* flush output directory */,
    		new String[] { /* test files */
    			"X.java", //========================
    			"public class X {\n" +
    			"    public static void main(String[] args) {\n" +
    			"    	new M().foo2();\n" +
    			"    }\n" +
    			"}\n"+
    			"class M  {\n" +
    			"	String name;\n" +
    			"	\n" +
    			"	M() {\n" +
    			"		this.name = \"SUCCESS\";\n" +
    			"	}\n" +
    			"\n" +
    			"	private class Y extends N {\n" +
    			"		private Y() {\n" +
    			"			super();\n" +
    			"		}\n" +
    			"		protected void foo(Z z) {\n" +
    			"			z.bar(new A());\n" +
    			"		}\n" +
    			"	}\n" +
    			"	\n" +
    			"    public class A implements I {\n" +
    			"    	public void configure() {\n" +
    			"    		new B().foo();\n" +
    			"    	}\n" +
    			"    	public class B {\n" +
    			"            public void foo() {\n" +
    			"				try {\n" +
    			"                System.out.println(M.this.name);\n" +
    			"				} catch(NullPointerException e) {\n" +
    			"					System.err.println(\"NPE THROWN\");\n" +
    			"				}\n" +
    			"            }\n" +
    			"        }\n" +
    			"    }\n" +
    			"    \n" +
    			"    public void foo2() {\n" +
    			"    	new Y();\n" +
    			"    }\n" +
    			"}\n" +
    			"class Z {\n" +
    			"	void bar(I i) {\n" +
    			"		i.configure();\n" +
    			"	}\n" +
    			"}\n" +
    			"\n" +
    			"interface I {\n" +
    			"	void configure();\n" +
    			"}\n" +
    			"\n" +
    			"class N {\n" +
    			"	protected void foo(Z z) {\n" +
    			"	}\n" +
    			"	N() {\n" +
    			"		this.foo(new Z());\n" +
    			"	}\n" +
    			"}\n"
    		},
			null /* do not check compiler log */,
			"" /* expected output string */,
			"NPE THROWN" /* expected error string */,
			JavacTestOptions.DEFAULT /* default javac test options */);
    	return;
	}
	this.runConformTest(
    		new String[] {
    			"X.java", //========================
    			"public class X {\n" +
    			"    public static void main(String[] args) {\n" +
    			"    	new M().foo2();\n" +
    			"    }\n" +
    			"}\n"+
    			"class M  {\n" +
    			"	String name;\n" +
    			"	\n" +
    			"	M() {\n" +
    			"		this.name = \"SUCCESS\";\n" +
    			"	}\n" +
    			"\n" +
    			"	private class Y extends N {\n" +
    			"		private Y() {\n" +
    			"			super();\n" +
    			"		}\n" +
    			"		protected void foo(Z z) {\n" +
    			"			z.bar(new A());\n" +
    			"		}\n" +
    			"	}\n" +
    			"	\n" +
    			"    public class A implements I {\n" +
    			"    	public void configure() {\n" +
    			"    		new B().foo();\n" +
    			"    	}\n" +
    			"    	public class B {\n" +
    			"            public void foo() {\n" +
    			"                System.out.println(M.this.name);\n" +
    			"            }\n" +
    			"        }\n" +
    			"    }\n" +
    			"    \n" +
    			"    public void foo2() {\n" +
    			"    	new Y();\n" +
    			"    }\n" +
    			"}\n" +
    			"class Z {\n" +
    			"	void bar(I i) {\n" +
    			"		i.configure();\n" +
    			"	}\n" +
    			"}\n" +
    			"\n" +
    			"interface I {\n" +
    			"	void configure();\n" +
    			"}\n" +
    			"\n" +
    			"class N {\n" +
    			"	protected void foo(Z z) {\n" +
    			"	}\n" +
    			"	N() {\n" +
    			"		this.foo(new Z());\n" +
    			"	}\n" +
    			"}\n"
    		},
    		"SUCCESS");
}

