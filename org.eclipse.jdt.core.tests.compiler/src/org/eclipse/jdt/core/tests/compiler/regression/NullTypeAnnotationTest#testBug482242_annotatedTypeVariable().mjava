public void testBug482242_annotatedTypeVariable() {
	Map options = getCompilerOptions();
	options.put(JavaCore.COMPILER_PB_ANNOTATED_TYPE_ARGUMENT_TO_UNANNOTATED, JavaCore.ERROR);
	runNegativeTestWithLibs(
		new String[] {
			"Test.java",
			"import org.eclipse.jdt.annotation.*;\n" + 
			"\n" +
			"interface List<T extends @NonNull Object> {\n" +
			"	void add(T elem);" +
			"}\n" + 
			"public class Test {\n" + 
			"    public static void test(List<@NonNull String> list) {\n" + 
			"        collect(list, null);\n" + 
			"    }\n" + 
			"    static void collect(List<@NonNull String> list, String string) {\n" + 
			"        insert(list, string);\n" + 
			"    }\n" + 
			"    static void insert(List<? super String> l, String s) {\n" + // type error at declaration site, no need to signal at the call site
			"        l.add(s);\n" + 
			"    }\n" + 
			"}\n"
		},
		options,
		"----------\n" + 
		"1. ERROR in Test.java (at line 12)\n" + 
		"	static void insert(List<? super String> l, String s) {\n" + 
		"	                        ^^^^^^^^^^^^^^\n" + 
		"Null constraint mismatch: The type \'? super String\' is not a valid substitute for the type parameter \'T extends @NonNull Object\'\n" + 
		"----------\n" + 
		"2. WARNING in Test.java (at line 13)\n" + 
		"	l.add(s);\n" + 
		"	      ^\n" + 
		"Null type safety (type annotations): The expression of type \'String\' needs unchecked conversion to conform to \'capture#of ? super String\'\n" + 
		"----------\n");
}

