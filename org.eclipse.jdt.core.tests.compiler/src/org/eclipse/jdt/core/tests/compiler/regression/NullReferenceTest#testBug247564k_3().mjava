// null analysis -- simple case for constant field in try-catch-finally
// presence or absence of method call in finally should not affect the behaviour
public void testBug247564k_3() {
	this.runNegativeTest(
		new String[] {
			"X.java",
			"public class X {\n" +
			"  private static final Object f = null;\n" +
			"	 void gooCalls() throws NumberFormatException{}\n" +
			"	 void goo(Object var) throws Exception{\n" +
			"		try {\n" +
			"			gooCalls();\n" +
			"		} catch(NumberFormatException e) {\n" +
			"			if (f.hashCode() == 0){}\n" +
			"		} finally {\n" +
			"			gooCalls();\n" +
			"			if (f.hashCode() == 0){}\n" +
			"		}\n" +
			"  }\n" +
			"}\n"},
		"----------\n" + 
		"1. ERROR in X.java (at line 8)\n" + 
		"	if (f.hashCode() == 0){}\n" + 
		"	    ^\n" + 
		"Null pointer access: The field f can only be null at this location\n" + 
		"----------\n" + 
		"2. ERROR in X.java (at line 11)\n" + 
		"	if (f.hashCode() == 0){}\n" + 
		"	    ^\n" + 
		"Null pointer access: The field f can only be null at this location\n" + 
		"----------\n"
	);
}

