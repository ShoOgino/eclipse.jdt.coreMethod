// Lambda with declared args inherits / modifies contract of super
public void testLambda_03() {
	Map customOptions = getCompilerOptions();
	runNegativeTestWithLibs(
		new String[] {
			"ISAM.java",
			"import org.eclipse.jdt.annotation.*;\n" +
			"public interface ISAM {\n" +
			"	void process(@NonNull Object nn, @Nullable Object n, Object u);\n" +
			"}\n",
			"X.java",
			"import org.eclipse.jdt.annotation.*;\n" +
			"public class X {\n" +
			"	void test() {\n" +
					// fill-in all from super:
			"		ISAM printer1 = (Object 		  o1, 			Object o2, 			 Object o3) \n" +
			"							-> System.out.println(o1.toString()+o2.toString()+o3.toString());\n" +
					// legal overrides: (however, @NonNull -> @Nullable is probably nonsense)
			"		ISAM printer3 = (@Nullable Object o1, @Nullable Object o2, @Nullable Object o3) \n" +
			"							-> System.out.println(o1.toString()+o2.toString()+o3.toString());\n" +
			"	}\n" +
			"}\n"
		},
		customOptions,
		"----------\n" +
		"1. ERROR in X.java (at line 5)\n" +
		"	-> System.out.println(o1.toString()+o2.toString()+o3.toString());\n" +
		"	                                    ^^\n" +
		"Potential null pointer access: The variable o2 may be null at this location\n" +
		"----------\n" +
		"2. ERROR in X.java (at line 7)\n" +
		"	-> System.out.println(o1.toString()+o2.toString()+o3.toString());\n" +
		"	                      ^^\n" +
		"Potential null pointer access: this expression has a '@Nullable' type\n" +
		"----------\n" +
		"3. ERROR in X.java (at line 7)\n" +
		"	-> System.out.println(o1.toString()+o2.toString()+o3.toString());\n" +
		"	                                    ^^\n" +
		"Potential null pointer access: this expression has a '@Nullable' type\n" +
		"----------\n" +
		"4. ERROR in X.java (at line 7)\n" +
		"	-> System.out.println(o1.toString()+o2.toString()+o3.toString());\n" +
		"	                                                  ^^\n" +
		"Potential null pointer access: this expression has a '@Nullable' type\n" +
		"----------\n");
}

