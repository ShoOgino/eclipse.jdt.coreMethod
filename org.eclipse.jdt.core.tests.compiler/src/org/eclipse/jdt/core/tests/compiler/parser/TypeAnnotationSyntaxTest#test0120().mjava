// To test Parser.consumeTypeArgument() with Type Annotations
public void test0120() throws IOException {
	String source =
		"class X<A1, A2, A3, A4, A5, A6, A7, A8> {\n" +
		"}\n" +
		"class Y {\n" +
		"	@Marker X<int @Marker [], short @SingleMember(1) [] @Marker [], long[] @NonNull [][], float[] @Marker [] @Normal(value = 5) [][], double[][]@Marker [] @SingleMember(10) [][], boolean[][][][][][], char[] @Marker [][][][][][], Object[][]@Marker [] @SingleMember(10) [] @Normal(value = 5) [][][][][]> x;\n" +
		"}\n";
	String expectedUnitToString =
		"class X<A1, A2, A3, A4, A5, A6, A7, A8> {\n" +
		"  X() {\n" +
		"    super();\n" +
		"  }\n" +
		"}\n" +
		"class Y {\n" +
		"  @Marker X<int @Marker [], short @SingleMember(1) [] @Marker [], long[] @NonNull [][], float[] @Marker [] @Normal(value = 5) [][], double[][] @Marker [] @SingleMember(10) [][], boolean[][][][][][], char[] @Marker [][][][][][], Object[][] @Marker [] @SingleMember(10) [] @Normal(value = 5) [][][][][]> x;\n" +
		"  Y() {\n" +
		"    super();\n" +
		"  }\n" +
		"}\n";
	checkParse(source.toCharArray(), null, "test0120", expectedUnitToString );
}

