// Bug 361073 - Avoid resource leak warning when the top level resource is closed explicitly
// test case from comment 7
// Duplicate of Bug 385415 - Incorrect resource leak detection
public void testBug361073c7() {
	Map options = getCompilerOptions();
	options.put(CompilerOptions.OPTION_ReportPotentiallyUnclosedCloseable, CompilerOptions.ERROR);
	runConformTest(
		new String[] {
			"X.java",
			"import java.io.*;\n" +
			"public class X {\n" +
			"  public void test() {\n" + 
			"    BufferedReader br = null;\n" + 
			"    try {\n" + 
			"        br = new BufferedReader(new FileReader(\"blah\"));\n" + 
			"        String line = null;\n" + 
			"        while ( (line = br.readLine()) != null ) {\n" + 
			"            if ( line.startsWith(\"error\") )\n" + 
			"                throw new Exception(\"error\"); //Resource leak: 'br' is not closed at this location\n" + 
			"        }\n" + 
			"    } catch (Throwable t) {\n" + 
			"        t.printStackTrace();\n" + 
			"    } finally {\n" + 
			"        if ( br != null ) {\n" + 
			"            try { br.close(); }\n" + 
			"            catch (Throwable e) { br = null; }\n" + 
			"        }\n" + 
			"    }\n" + 
			"  }\n" + 
			"}"
		},
		"",
		null,
		true,
		null,
		options,
		null);
}

