	// Serializable reference expressions that share the same name
	public void testbug479119b() {
		this.runConformTest(
			new String[]{
				"X.java",
				"import java.io.ByteArrayInputStream;\n" + 
				"import java.io.ByteArrayOutputStream;\n" + 
				"import java.io.IOException;\n" + 
				"import java.io.ObjectInputStream;\n" + 
				"import java.io.ObjectOutputStream;\n" + 
				"import java.io.Serializable;\n" + 
				"public class X {\n" + 
				"    public static interface Consumer<T> extends Serializable {\n" + 
				"        void accept(T t);\n" + 
				"    }\n" + 
				"    public static class Foo {\n" + 
				"    	public void method () {\n" + 
				"        	System.out.println(\"Foo\");\n" + 
				"        }\n" + 
				"    }\n" + 
				"    public static class Bar {\n" + 
				"    	public void method () {\n" + 
				"        	System.out.println(\"Bar\");\n" + 
				"        }\n" + 
				"    }\n" + 
				"    public static void main (String[] args) throws IOException, ClassNotFoundException {\n" + 
				"        Consumer<Foo> foo = Foo::method;\n" + 
				"        Consumer<Bar> bar = Bar::method;\n" + 
				"        Consumer<Foo> baz = (b) -> {b.method();};\n" + 
				"        ByteArrayOutputStream debug=new ByteArrayOutputStream();\n" + 
				"		try(ObjectOutputStream oo=new ObjectOutputStream(debug)) {\n" + 
				"			oo.writeObject(bar);\n" + 
				"		}\n" + 
				"		try(ObjectInputStream oi=new ObjectInputStream(new ByteArrayInputStream(debug.toByteArray()))) {\n" + 
				"			Consumer<Bar> x = (Consumer)oi.readObject();\n" + 
				"			x.accept(new Bar());\n" + 
				"		}\n" + 
				"		debug.reset();\n" + 
				"		try(ObjectOutputStream oo=new ObjectOutputStream(debug)) {\n" + 
				"			oo.writeObject(foo);\n" + 
				"		}\n" + 
				"		try(ObjectInputStream oi=new ObjectInputStream(new ByteArrayInputStream(debug.toByteArray()))) {\n" + 
				"			Consumer<Foo> x = (Consumer)oi.readObject();\n" + 
				"			x.accept(new Foo());\n" + 
				"		}\n" + 
				"    }\n" + 
				"}\n"
		},
		"Bar\n" +
		"Foo",
		null,true,
		new String[]{"-Ddummy"});
	}

