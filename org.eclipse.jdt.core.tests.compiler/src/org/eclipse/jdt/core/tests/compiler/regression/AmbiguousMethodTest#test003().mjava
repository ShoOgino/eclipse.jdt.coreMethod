	public void test003() {
		this.runNegativeTest(
			new String[] {
				"X.java",
				"public class X { void foo() { new BB().test(); } }\n" + 
				"class AA<T> { void test() {} }\n" + 
				"class BB extends AA<CC> { <U> void test() {} }\n" + 
				"class CC {}\n",
			},
			"----------\n" + 
			"1. ERROR in X.java (at line 1)\n" + 
			"	public class X { void foo() { new BB().test(); } }\n" + 
			"	                                       ^^^^\n" + 
			"The method test() is ambiguous for the type BB\n" + 
			"----------\n" + 
			"2. ERROR in X.java (at line 3)\n" + 
			"	class BB extends AA<CC> { <U> void test() {} }\n" + 
			"	                                   ^^^^^^\n" + 
			"Name clash: The method test() of type BB has the same erasure as test() of type AA<T> but does not override it\n" + 
			"----------\n"
		);
		this.runConformTest(
			new String[] {
				"X.java",
				"public class X {\n" +
				"	void singleMatch() { System.out.print(new BB().test(new N(), new Integer(1))); }\n" +
				"	void betterMatch() { System.out.print(new CC().test(new N(), new Integer(1))); }\n" +
				"	void worseMatch() { System.out.print(new DD().test(new N(), new Integer(1))); }\n" +
				"	public static void main(String[] s) {\n" +
				"		new X().singleMatch();\n" +
				"		new X().betterMatch();\n" +
				"		new X().worseMatch();\n" +
				"	}\n" +
				"}\n" + 
				"class AA<T> { int test(T t, Number num) { return 1; } }\n" + 
				"class BB extends AA<N> { @Override int test(N n, Number num) { return 2; } }\n" + 
				"class CC extends AA<M> { <U extends Number> int test(N n, U u) { return 3; } }\n" + 
				"class DD extends AA<N> { <U extends Number> int test(M m, U u) { return 4; } }\n" + 
				"class M {}\n" +
				"class N extends M {}",
			},
			"231"
		);
		this.runNegativeTest(
			new String[] {
				"X.java",
				"public class X {\n" +
				"	void ambiguous() { new BB().test(new N()); }\n" +
				"	void exactMatch() { new CC().test(new N()); }\n" +
				"}\n" + 
				"class AA<T> { void test(T t) {} }\n" + 
				"class BB extends AA<N> { <U> void test(N n) {} }\n" + 
				"class CC extends AA<N> { @Override void test(N n) {} }\n" + 
				"class M {}\n" +
				"class N extends M {}",
			},
			"----------\n" + 
			"1. ERROR in X.java (at line 2)\r\n" + 
			"	void ambiguous() { new BB().test(new N()); }\r\n" + 
			"	                            ^^^^\n" + 
			"The method test(N) is ambiguous for the type BB\n" + 
			"----------\n"
		);
		this.runNegativeTest(
			new String[] {
				"X.java",
				"public class X {\n" +
				"	void ambiguous() { new BB().test(new N(), new Integer(1)); }\n" +
				"}\n" + 
				"class AA<T> { void test(T t, Integer i) {} }\n" + 
				"class BB extends AA<M> { <U extends Number> void test(N n, U u) {} }\n" + 
				"class M {}\n" +
				"class N extends M {}",
			},
			"----------\n" + 
			"1. ERROR in X.java (at line 2)\n" + 
			"	void ambiguous() { new BB().test(new N(), new Integer(1)); }\n" + 
			"	                            ^^^^\n" + 
			"The method test(N, Integer) is ambiguous for the type BB\n" + 
			"----------\n"
		);
	}

