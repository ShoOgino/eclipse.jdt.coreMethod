// closeable, but Stream, but produced by Files.m, but only potentially closed:
public void testStream3() {
	if (this.complianceLevel < ClassFileConstants.JDK1_8)
		return; // uses JRE 8 API
	Map options = getCompilerOptions();
	options.put(CompilerOptions.OPTION_ReportPotentiallyUnclosedCloseable, CompilerOptions.ERROR);
	options.put(CompilerOptions.OPTION_ReportUnclosedCloseable, CompilerOptions.ERROR);
	runNegativeTest(
		new String[] {
			"A.java",
			"import java.util.stream.Stream;\n" + 
			"import java.nio.file.*;\n" + 
			"class A {\n" + 
			"  void test(Path file) throws java.io.IOException {\n" + 
			"    Stream<String> lines = Files.lines(file);\n" +
			"    if (lines.count() > 0)" + 
			"    	lines.close();\n" + 
			"  }\n" + 
			"}"
		},
		"----------\n" + 
		"1. ERROR in A.java (at line 5)\n" + 
		"	Stream<String> lines = Files.lines(file);\n" + 
		"	               ^^^^^\n" + 
		"Potential resource leak: \'lines\' may not be closed\n" + 
		"----------\n",
		null,
		true,
		options
		);
}

