	// 412149: [1.8][compiler] Emit repeated annotations into the designated container
	// Test that repeated annotations show up on fields, methods, and parameters
	public void test040() {
		this.runConformTest(
			new String[] {
				"X.java",
				"import java.lang.reflect.Field;\n" + 
				"import java.lang.reflect.Method;\n" + 
				"import java.lang.reflect.Parameter;\n" + 
				"import java.lang.annotation.Repeatable;\n" +
				"import java.lang.annotation.Retention;\n" +
				"import static java.lang.annotation.RetentionPolicy.*;\n" +
				"\n" +
				"@Retention(RUNTIME)\n" +
				"@interface AttrContainer {\n" +
				"  public Attr[] value();\n" +
				"}\n" +
				"@Retention(RUNTIME)\n" +
				"@Repeatable(AttrContainer.class)\n" + 
				"@interface Attr {\n" +
				"  public int value() default -1;\n" +
				"}\n" +
				"\n" +
				"public class X {\n" +
				"   @Attr(1) @Attr(2) public int field;\n" + 
				"\n" + 
				"   @Attr(3) @Attr(4)\n" + 
				"   public static void main(@Attr(5) @Attr(6) String args[]) throws Exception {\n" + 
				"    Field fieldField = X.class.getField(\"field\");\n" + 
				"    dump(fieldField.getAnnotationsByType(Attr.class));\n" + 
				"    Method mainMethod = X.class.getMethod(\"main\", (new String[0]).getClass());\n" + 
				"    dump(mainMethod.getAnnotationsByType(Attr.class));\n" + 
				"    Parameter argvParameter = mainMethod.getParameters()[0];\n" + 
				"    dump(argvParameter.getAnnotationsByType(Attr.class));\n" + 
				"   }\n" + 
				"   static void dump(Attr[] attrs) {\n" + 
				"    for (int i=0; i<attrs.length;++i) System.out.print(attrs[i] + \" \");\n" + 
				"   }\n" +
				"}"
			},
			"@Attr(value=1) @Attr(value=2) @Attr(value=3) @Attr(value=4) @Attr(value=5) @Attr(value=6)");
	}

