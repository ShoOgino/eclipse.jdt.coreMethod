// https://bugs.eclipse.org/bugs/show_bug.cgi?id=399773, [1.8][compiler] Cast expression should allow for additional bounds to form intersection types
public void test008() {
	this.runNegativeTest(
			new String[] {
				"X.java",
				"interface I {\n" +
				"	void doit();\n" +
				"	default void doitalso () {}\n" +
				"}\n" +
				"interface J {\n" +
				"	void doit();\n" +
				"	default void doitalso () {}\n" +
				"}\n" +
				"public class X {\n" +
				"	Object p = (@Marker java.lang. @Readonly String & I & J) () -> {};\n" +
				"}\n" ,
			},
			"----------\n" +
			"1. ERROR in X.java (at line 10)\n" +
			"	Object p = (@Marker java.lang. @Readonly String & I & J) () -> {};\n" +
			"	            ^^^^^^^\n" +
			"Illegally placed annotation: type annotations must directly precede the simple name of the type they are meant to affect (or the [] for arrays)\n" +
			"----------\n" +
			"2. ERROR in X.java (at line 10)\n" +
			"	Object p = (@Marker java.lang. @Readonly String & I & J) () -> {};\n" +
			"	             ^^^^^^\n" +
			"Marker cannot be resolved to a type\n" +
			"----------\n" +
			"3. ERROR in X.java (at line 10)\n" +
			"	Object p = (@Marker java.lang. @Readonly String & I & J) () -> {};\n" +
			"	                                ^^^^^^^^\n" +
			"Readonly cannot be resolved to a type\n" +
			"----------\n" +
			"4. ERROR in X.java (at line 10)\n" +
			"	Object p = (@Marker java.lang. @Readonly String & I & J) () -> {};\n" +
			"	                                                         ^^^^^\n" +
			"The target type of this expression must be a functional interface\n" +
			"----------\n");
}

