// https://bugs.eclipse.org/bugs/show_bug.cgi?id=472648
// [compiler][1.8] Lambda expression referencing method with generic type has incorrect compile errors
public void testBug472648() {
	runNegativeTest(
		false,
		JavacHasABug.JavacBugFixed_901,
		new String [] {
		"Test.java",
		"import java.util.ArrayList;\n" + 
		"import java.util.List;\n" + 
		"import java.util.function.Consumer;\n" + 
		"public class Test {\n" + 
		"	public static void main(String argv[]) {\n" + 
		"		new Test();\n" + 
		"	}\n" + 
		"	public Test() {\n" + 
		"		List<Number> numList = new ArrayList<>();\n" + 
		"		numList.add(1);\n" + 
		"		numList.add(1.5);\n" + 
		"		numList.add(2);\n" + 
		"		numList.add(2.5);\n" + 
		"		forEachValueOfType(numList, Integer.class, (Integer i) -> (System.out.println(Integer.toString(i))));\n" + 
		"	}\n" + 
		"	private <T> void forEachValueOfType(List<?> list, Class<T> type, Consumer<T> action) {\n" + 
		"		\n" + 
		"		for (Object o : list) {\n" + 
		"			if (type.isAssignableFrom(o.getClass())) {\n" + 
		"				@SuppressWarnings(\"unchecked\")\n" + 
		"				T convertedObject = (T) o;\n" + 
		"				action.accept(convertedObject);\n" + 
		"			}\n" + 
		"		}\n" + 
		"	}\n" + 
		"}"
	},
	"----------\n" + 
	"1. ERROR in Test.java (at line 14)\n" + 
	"	forEachValueOfType(numList, Integer.class, (Integer i) -> (System.out.println(Integer.toString(i))));\n" + 
	"	^^^^^^^^^^^^^^^^^^\n" + 
	"The method forEachValueOfType(List<?>, Class<T>, Consumer<T>) in the type Test is not applicable for the arguments (List<Number>, Class<Integer>, (Integer i) -> {})\n" +
	"----------\n" + 
	"2. ERROR in Test.java (at line 14)\n" + 
	"	forEachValueOfType(numList, Integer.class, (Integer i) -> (System.out.println(Integer.toString(i))));\n" + 
	"	                                            ^^^^^^^\n" + 
	"Incompatible type specified for lambda expression's parameter i\n" + 
	"----------\n" + 
	"3. ERROR in Test.java (at line 14)\n" + 
	"	forEachValueOfType(numList, Integer.class, (Integer i) -> (System.out.println(Integer.toString(i))));\n" + 
	"	                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
	"Invalid expression as statement\n" + 
	"----------\n");
}

