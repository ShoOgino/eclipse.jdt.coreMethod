	/**
	 * Produce a nicely formatted type annotation for testing. Exercises the API for type annotations.
	 * Output examples:<br>
	 * <tt>@Foo(id=34) CLASS_EXTENDS, type_index=-1, location=[ARRAY, INNER_TYPE, TYPE_ARGUMENT(0)]</tt><br>
	 */
	private String printTypeAnnotation(IBinaryTypeAnnotation typeAnnotation) {
		StringBuffer sb = new StringBuffer();
		// The annotation:
		IBinaryAnnotation annotation = typeAnnotation.getAnnotation();
		sb.append('@').append(annotation.getTypeName());
		IBinaryElementValuePair[] pairs = annotation.getElementValuePairs();
		if (pairs.length != 0) {
			sb.append('(');
			for (int i = 0; i < pairs.length; i++) {
				if (i > 0) {
					sb.append(',');
				}
				sb.append(pairs[i].getName()).append('=').append(pairs[i].getValue());
			}
			sb.append(')');
		}
		sb.append(' ');
		
		// target type
		int targetType = typeAnnotation.getTargetType();
		switch (targetType) {
			case AnnotationTargetTypeConstants.CLASS_TYPE_PARAMETER:
				sb.append("CLASS_TYPE_PARAMETER(type_parameter_index=").append(typeAnnotation.getTypeParameterIndex()).append(')');
				break;
			case AnnotationTargetTypeConstants.METHOD_TYPE_PARAMETER:
				sb.append("METHOD_TYPE_PARAMETER(type_parameter_index=").append(typeAnnotation.getTypeParameterIndex()).append(')');
				break;
			case AnnotationTargetTypeConstants.CLASS_EXTENDS:
				sb.append("CLASS_EXTENDS(type_index=").append((short)typeAnnotation.getSupertypeIndex()).append(')');
				break;
			case AnnotationTargetTypeConstants.CLASS_TYPE_PARAMETER_BOUND:
				sb.append("CLASS_TYPE_PARAMETER_BOUND(type_parameter_index=").
					append(typeAnnotation.getTypeParameterIndex()).
					append(", bound_index=").append(typeAnnotation.getBoundIndex()).
					append(')');
				break;
			case AnnotationTargetTypeConstants.METHOD_TYPE_PARAMETER_BOUND:
				sb.append("METHOD_TYPE_PARAMETER_BOUND(type_parameter_index=").
					append(typeAnnotation.getTypeParameterIndex()).
					append(", bound_index=").append(typeAnnotation.getBoundIndex()).
					append(')');
				break;
			case AnnotationTargetTypeConstants.FIELD:
				sb.append("FIELD");
				break;
			case AnnotationTargetTypeConstants.METHOD_RETURN:
				sb.append("METHOD_RETURN");
				break;
			case AnnotationTargetTypeConstants.METHOD_RECEIVER:
				sb.append("METHOD_RECEIVER");
				break;
			case AnnotationTargetTypeConstants.METHOD_FORMAL_PARAMETER :
				sb.append("METHOD_FORMAL_PARAMETER(method_formal_parameter_index=").
					append(typeAnnotation.getMethodFormalParameterIndex()).append(')');
				break;
			case AnnotationTargetTypeConstants.THROWS :
				sb.append("THROWS(throws_type_index=").
					append(typeAnnotation.getThrowsTypeIndex()).append(')');
				break;
			default: throw new IllegalStateException("nyi "+targetType);
		}
		
		// location
		int[] typepath = typeAnnotation.getTypePath();
		
		if (typepath != IBinaryTypeAnnotation.NO_TYPE_PATH) {
			sb.append(", location=["); //$NON-NLS-1$
			for (int i = 0, max = typepath.length; i < max; i += 2) {
				if (i > 0) {
					sb.append(", "); //$NON-NLS-1$
				}
				switch (typepath[i]) {
					case 0:
						sb.append("ARRAY"); //$NON-NLS-1$
						break;
					case 1:
						sb.append("INNER_TYPE"); //$NON-NLS-1$
						break;
					case 2:
						sb.append("WILDCARD"); //$NON-NLS-1$
						break;
					case 3:
						sb.append("TYPE_ARGUMENT(").append(typepath[i+1]).append(')'); //$NON-NLS-1$
						break;
				}
			}
			sb.append(']');
		}
		return sb.toString();
	}

