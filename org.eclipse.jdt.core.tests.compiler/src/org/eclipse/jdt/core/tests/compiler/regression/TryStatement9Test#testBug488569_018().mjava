// negative tests: non-final fields
public void testBug488569_018() {
	this.runNegativeTest(
		new String[] {
			"X.java",
			"import java.io.IOException;\n" +
			"\n" +
			"class Z {\n" +
			"	 Y yz = new Y();\n" +
			"}\n" +
			"public class X extends Z {\n" +
			"	 Y y2 = new Y();\n" +
			"	\n" +
			"	public void foo() {\n" +
			"		try (this.y2; super.yz;y2)  {  \n" +
			"			System.out.println(\"In Try\");\n" +
			"		} catch (IOException e) {			  \n" +
			"		}\n" +
			"	}\n" +
			"	public static void main(String[] args) {\n" +
			"		new X().foo();\n" +
			"	}\n" +
			"}\n" +
			"class Y implements AutoCloseable {\n" +
			"	@Override\n" +
			"	public void close() throws IOException {\n" +
			"		System.out.println(\"Closed\");\n" +
			"	} \n" +
			"}",
		},
		"----------\n" +
		"1. ERROR in X.java (at line 10)\n" +
		"	try (this.y2; super.yz;y2)  {  \n" +
		"	          ^^\n" +
		"Field y2 must be final\n" +
		"----------\n" +
		"2. ERROR in X.java (at line 10)\n" +
		"	try (this.y2; super.yz;y2)  {  \n" +
		"	                    ^^\n" +
		"Field yz must be final\n" +
		"----------\n" +
		"3. ERROR in X.java (at line 10)\n" +
		"	try (this.y2; super.yz;y2)  {  \n" +
		"	                       ^^\n" +
		"Local variable y2 defined in an enclosing scope must be final or effectively final\n" +
		"----------\n");
}

