public void test065() {
	this.runNegativeTest(
		new String[] {
			"X.java",
			"public class X {	\n"+
			"	public static void main(String[] arguments) {	\n"+
			"		new X().new Y().new Z().bar();	\n"+
			"	}	\n"+
			"	String foo() { return \"X-foo\"; }	\n"+
			"	class Y extends X {	\n"+
			"		String foo() { return \"Y-foo\"; }	\n"+
			"		class Z extends Y {	\n"+
			"			Z(){	\n"+
			"				//X.this.super();	\n"+
			"			}	\n"+
			"			String foo() { return \"Z-foo\"; }	\n"+
			"			void bar () {	\n"+
			"				System.out.println(X.this.foo());	\n"+
			"			}	\n"+
			"		}	\n"+
			"	}	\n"+
			"}	\n"
		},
			"----------\n" +
			"1. WARNING in X.java (at line 7)\n" +
			"	String foo() { return \"Y-foo\"; }	\n" +
			"	       ^^^^^\n" +
			"The method foo() of type X.Y should be tagged with @Override since it actually overrides a superclass method\n" +
			"----------\n" +
			"2. ERROR in X.java (at line 9)\n" +
			"	Z(){	\n" +
			"	^^^\n" +
			"No enclosing instance of type X is available due to some intermediate constructor invocation\n" +
			"----------\n" +
			"3. WARNING in X.java (at line 12)\n" +
			"	String foo() { return \"Z-foo\"; }	\n" +
			"	       ^^^^^\n" +
			"The method foo() of type X.Y.Z should be tagged with @Override since it actually overrides a superclass method\n" +
			"----------\n");
}

