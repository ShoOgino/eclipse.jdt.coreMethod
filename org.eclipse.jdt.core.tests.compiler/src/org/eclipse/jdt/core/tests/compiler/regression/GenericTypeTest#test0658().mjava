public void test0658() {
	this.runNegativeTest(
		new String[] {
			"X.java",
			"public class X{\n" + 
			"	\n" + 
			"	private static class GenericWrapper<Elem>  {\n" + 
			"		Zork z;\n" +
			"		private Elem theObject;\n" + 
			"		public GenericWrapper(Elem arg) {\n" + 
			"			theObject = arg;\n" + 
			"		}\n" + 
			"		public <T extends Elem> GenericWrapper (GenericWrapper<T> other) {\n" + 
			"			this.theObject = other.theObject;\n" + 
			"		}\n" + 
			"		public String toString() {\n" + 
			"			return theObject.toString();\n" + 
			"		}\n" + 
			"	}\n" + 
			"	private static GenericWrapper<String> method (Object wrappedString) {\n" + 
			"		return (GenericWrapper<String>) wrappedString;\n" + 
			"	}\n" + 
			"\n" + 
			"	public static void main(String[] args) {\n" + 
			"		System.out.print(method(new GenericWrapper<String>(\"abc\")));\n" + 
			"		System.out.println(method(new GenericWrapper<Exception>(new Exception())));\n" + 
			"	}\n" + 
			"}\n",
		},
		"----------\n" + 
		"1. ERROR in X.java (at line 4)\n" + 
		"	Zork z;\n" + 
		"	^^^^\n" + 
		"Zork cannot be resolved to a type\n" + 
		"----------\n" + 
		"2. WARNING in X.java (at line 12)\n" + 
		"	public String toString() {\n" + 
		"	              ^^^^^^^^^^\n" + 
		"The method toString() of type X.GenericWrapper<Elem> should be tagged with @Override since it actually overrides a superclass method\n" + 
		"----------\n" + 
		"3. WARNING in X.java (at line 17)\n" + 
		"	return (GenericWrapper<String>) wrappedString;\n" + 
		"	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
		"Type safety: Unchecked cast from Object to X.GenericWrapper<String>\n" + 
		"----------\n");
}	

