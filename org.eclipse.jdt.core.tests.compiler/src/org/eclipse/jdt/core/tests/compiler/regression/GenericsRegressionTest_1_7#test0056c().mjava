// https://bugs.eclipse.org/bugs/show_bug.cgi?id=340747
// qualified allocation
public void test0056c() {
	Map customOptions = getCompilerOptions();
	customOptions.put(CompilerOptions.OPTION_ReportRedundantSpecificationOfTypeArguments, CompilerOptions.ERROR);	
	customOptions.put(CompilerOptions.OPTION_ReportRawTypeReference, CompilerOptions.IGNORE);	
	this.runNegativeTest(
		new String[] {
			"X.java",
			"public class X <T> {\n" +
			"	X(T t){}\n" +
			"	class X1<Z> {\n" +
			"		X1(Z z){}\n" +
			"	}\n" +
			"	X<Integer>.X1<Number> x1 = new X<Integer>(1).new X1<Number>(1);\n" +
			"}\n"
		},
		(this.complianceLevel < ClassFileConstants.JDK1_8 ?
			"----------\n" + 
			"1. ERROR in X.java (at line 6)\n" + 
			"	X<Integer>.X1<Number> x1 = new X<Integer>(1).new X1<Number>(1);\n" + 
			"	                               ^\n" + 
			"Redundant specification of type arguments <Integer>\n" + 
			"----------\n"
		: // additional error (2.) at inner allocation due to better inference:
			"----------\n" + 
			"1. ERROR in X.java (at line 6)\n" + 
			"	X<Integer>.X1<Number> x1 = new X<Integer>(1).new X1<Number>(1);\n" + 
			"	                               ^\n" + 
			"Redundant specification of type arguments <Integer>\n" + 
			"----------\n" +
			"2. ERROR in X.java (at line 6)\n" + 
			"	X<Integer>.X1<Number> x1 = new X<Integer>(1).new X1<Number>(1);\n" + 
			"	                                                 ^^\n" + 
			"Redundant specification of type arguments <Number>\n" + 
			"----------\n"
		),
		null,
		false,
		customOptions);
}

