// https://bugs.eclipse.org/bugs/show_bug.cgi?id=399224 - [1.8][compiler][internal] Implement TypeBinding.getSingleAbstractMethod
public void test043() {
	Map options = getCompilerOptions();
	options.put(CompilerOptions.OPTION_ReportUnusedWarningToken, CompilerOptions.ERROR);
	options.put(CompilerOptions.OPTION_ReportUncheckedTypeOperation, CompilerOptions.IGNORE);
	options.put(CompilerOptions.OPTION_ReportRawTypeReference, CompilerOptions.IGNORE);
	options.put(CompilerOptions.OPTION_ReportTypeParameterHiding, CompilerOptions.IGNORE);

	this.runNegativeTest(
			new String[] {
			"X.java",
            "import java.util.List;\n" +
			"interface A { void foo(); }\n" +  // yes
			"interface B { boolean equals(Object obj); }\n" + // no
			"interface C extends B { void foo(); }\n" + // yes
			"interface D<T> { boolean equals(Object obj); void foo(); }\n" + // yes
			"interface E { void foo(); Object clone(); }\n" + // no
			"interface F { void foo(List<String> p); }\n" + // yes
            "interface G { void foo(List<String> p); }\n" + // yes
            "interface H extends F, G {}\n" + // yes
            "interface I { List foo(List<String> p); }\n" + // yes
            "interface J { List<String> foo(List arg); }\n" + // yes
            "interface K extends I, J {}\n" + // yes
            "interface L { void foo(List<Integer> p); }\n" +  // yes
            "interface M extends I, L {}\n" + // no
            "interface N { void foo(List<String> p, Class q); }\n" + // yes
            "interface O { void foo(List p, Class<?> q); }\n" + // yes
            "interface P extends N, O {}\n" + // no
            "interface Q { long foo(); }\n" + // yes
            "interface R { int foo(); }\n" + // yes
            "interface S extends Q, R {}\n" + // no
            "interface T<P> { void foo(P p); }\n" + // yes
            "interface U<P> { void foo(P p); }\n" + // yes
            "interface V<P, Q> extends T<P>, U<Q> {}\n" + // no
            "interface W<T, N extends Number> { void m(T arg); void m(N arg); }\n" + // no
            "interface X extends W<String, Integer> {}\n" + // no
            "interface Y extends W<Integer, Integer> {}\n" + // yes

            "class Z {\n" +
            "    A a              =    () -> {};\n" +
            "    B b              =    () -> {};\n" +
            "    C c              =    () -> {};\n" +
            "    D<?> d           =    () -> {};\n" +
            "    E e              =    () -> {};\n" +
            "    F f              =    (p0) -> {};\n" +
            "    G g              =    (p0) -> {};\n" +
            "    H h              =    (p0) -> {};\n" +
            "    I i              =    (p0) -> { return null; };\n" +
            "    J j              =    (p0) -> { return null; };\n" +
            "    K k              =    (p0) -> { return null; };\n" +
            "    L l              =    (p0) -> {};\n" +
            "    M m              =    (p0) -> {};\n" +
            "    N n              =    (p0, q0) -> {};\n" +
            "    O o              =    (p0, q0) -> {};\n" +
            "    P p              =    (p0, q0) -> {};\n" +
            "    Q q              =    () -> { return 0;};\n" +
            "    R r              =    () -> { return 0;};\n" +
            "    S s              =    () -> {};\n" +
            "    T<?> t           =    (p0) -> {};\n" +
            "    U<?> u           =    (p0) -> {};\n" +
            "    V<?,?> v         =    (p0) -> {};\n" +
            "    W<?,?> w         =    (p0) -> {};\n" +
            "    X x              =    (p0) -> {};\n" +
            "    Y y              =    (p0) -> {};\n" +
			"}\n"
			},
			"----------\n" +
			"1. ERROR in X.java (at line 17)\n" +
			"	interface P extends N, O {}\n" +
			"	          ^\n" +
			"Name clash: The method foo(List, Class<?>) of type O has the same erasure as foo(List<String>, Class) of type N but does not override it\n" +
			"----------\n" +
			"2. ERROR in X.java (at line 20)\n" +
			"	interface S extends Q, R {}\n" +
			"	          ^\n" +
			"The return types are incompatible for the inherited methods Q.foo(), R.foo()\n" +
			"----------\n" +
			"3. ERROR in X.java (at line 23)\n" +
			"	interface V<P, Q> extends T<P>, U<Q> {}\n" +
			"	          ^\n" +
			"Name clash: The method foo(P) of type U<P> has the same erasure as foo(P) of type T<P> but does not override it\n" +
			"----------\n" +
			"4. ERROR in X.java (at line 29)\n" +
			"	B b              =    () -> {};\n" +
			"	                      ^^^^^\n" +
			"The target type of this expression must be a functional interface\n" +
			"----------\n" +
			"5. ERROR in X.java (at line 32)\n" +
			"	E e              =    () -> {};\n" +
			"	                      ^^^^^\n" +
			"The target type of this expression must be a functional interface\n" +
			"----------\n" +
			"6. ERROR in X.java (at line 40)\n" +
			"	M m              =    (p0) -> {};\n" +
			"	                      ^^^^^^^\n" +
			"The target type of this expression must be a functional interface\n" +
			"----------\n" +
			"7. ERROR in X.java (at line 43)\n" +
			"	P p              =    (p0, q0) -> {};\n" +
			"	                      ^^^^^^^^^^^\n" +
			"The target type of this expression must be a functional interface\n" +
			"----------\n" +
			"8. ERROR in X.java (at line 46)\n" +
			"	S s              =    () -> {};\n" +
			"	                      ^^^^^\n" +
			"The target type of this expression must be a functional interface\n" +
			"----------\n" +
			"9. ERROR in X.java (at line 49)\n" +
			"	V<?,?> v         =    (p0) -> {};\n" +
			"	                      ^^^^^^^\n" +
			"The target type of this expression must be a functional interface\n" +
			"----------\n" +
			"10. ERROR in X.java (at line 50)\n" +
			"	W<?,?> w         =    (p0) -> {};\n" +
			"	                      ^^^^^^^\n" +
			"The target type of this expression must be a functional interface\n" +
			"----------\n" +
			"11. ERROR in X.java (at line 51)\n" +
			"	X x              =    (p0) -> {};\n" +
			"	                      ^^^^^^^\n" +
			"The target type of this expression must be a functional interface\n" +
			"----------\n",
			null,
			false,
			options);
}

