	public void test004() {
		this.runConformTest(
				new String[] {
					"X.java",
					"public class X {\n" + 
					"	public static void foo(boolean b) {\n" + 
					"		C c;\n" + 
					"		if (b) {\n" + 
					"			c = new C1();\n" + 
					"		} else {\n" + 
					"			c = new C2();\n" + 
					"		}\n" + 
					"		System.out.println();\n" + 
					"	}\n" + 
					"	public static void main(String[] args) {\n" + 
					"		foo(true);\n" + 
					"		System.out.println(\"SUCCESS\");\n" + 
					"	}\n" + 
					"}\n" +
					"class C {\n" + 
					"	void foo() {}\n" + 
					"}\n" + 
					"class C1 extends C {\n" + 
					"}\n" + 
					"class C2 extends C {\n" + 
					"}",
				},
				"SUCCESS");
				
			ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
			String actualOutput = null;
			try {
				byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +"X.class"));
				actualOutput =
					disassembler.disassemble(
						classFileBytes,
						"\n",
						ClassFileBytesDisassembler.DETAILED); 
			} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
				assertTrue("ClassFormatException", false);
			} catch (IOException e) {
				assertTrue("IOException", false);
			}
			
			String expectedOutput = 
				"  // Method descriptor #15 (Z)V\n" + 
				"  // Stack: 2, Locals: 2\n" + 
				"  public static void foo(boolean b);\n" + 
				"     0  iload_0 [b]\n" + 
				"     1  ifeq 15\n" + 
				"     4  new C1 [16]\n" + 
				"     7  dup\n" + 
				"     8  invokespecial C1() [18]\n" + 
				"    11  astore_1 [c]\n" + 
				"    12  goto 23\n" + 
				"    15  new C2 [19]\n" + 
				"    18  dup\n" + 
				"    19  invokespecial C2() [21]\n" + 
				"    22  astore_1 [c]\n" + 
				"    23  getstatic java.lang.System.out : java.io.PrintStream [22]\n" + 
				"    26  invokevirtual java.io.PrintStream.println() : void [28]\n" + 
				"    29  return\n" + 
				"      Line numbers:\n" + 
				"        [pc: 0, line: 4]\n" + 
				"        [pc: 4, line: 5]\n" + 
				"        [pc: 15, line: 7]\n" + 
				"        [pc: 23, line: 9]\n" + 
				"        [pc: 29, line: 10]\n" + 
				"      Local variable table:\n" + 
				"        [pc: 0, pc: 30] local: b index: 0 type: boolean\n" + 
				"        [pc: 12, pc: 15] local: c index: 1 type: C\n" + 
				"        [pc: 23, pc: 30] local: c index: 1 type: C\n" + 
				"      Stack map table: number of frames 2\n" + 
				"        [pc: 15, same]\n" + 
				"        [pc: 23, append: {C}]\n";
			
			int index = actualOutput.indexOf(expectedOutput);
			if (index == -1 || expectedOutput.length() == 0) {
				System.out.println(Util.displayString(actualOutput, 2));
			}
			if (index == -1) {
				assertEquals("Wrong contents", expectedOutput, actualOutput);
			}
	}

