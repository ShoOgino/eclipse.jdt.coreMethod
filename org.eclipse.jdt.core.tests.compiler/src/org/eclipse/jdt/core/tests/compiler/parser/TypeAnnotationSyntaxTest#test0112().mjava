// To test Parser.consumeEnhancedForStatementHeaderInit() with Type Annotations
public void test0112() throws IOException {
	String source =
		"import java.util.*;\n" +
		"class X {\n" +
		"   List list() { return null; }\n" +
		"   void m2() { for (@SingleMember(10) Iterator<@Marker X> i = list().iterator(); i.hasNext();); }\n" +
		"	void m3() {\n" +
		"		Integer [] array;\n" +
		"		array = new Integer [] {1, 2, 3};\n" +
		"		List<List<X>> xList;\n" +
		"		xList = null;\n" +
		"		for(@Positive @SingleMember(10) Integer i: array) {}\n" +
		"		for(@Marker @Normal(value = 5) List<@Readonly X> x: xList) {}\n" +
		"	}" +
		"}\n";
	String expectedUnitToString =
		"import java.util.*;\n" +
		"class X {\n" +
		"  X() {\n" +
		"    super();\n" +
		"  }\n" +
		"  List list() {\n" +
		"    return null;\n" +
		"  }\n" +
		"  void m2() {\n" +
		"    for (@SingleMember(10) Iterator<@Marker X> i = list().iterator();; i.hasNext(); ) \n" +
		"      ;\n" +
		"  }\n" +
		"  void m3() {\n" +
		"    Integer[] array;\n" +
		"    array = new Integer[]{1, 2, 3};\n" +
		"    List<List<X>> xList;\n" +
		"    xList = null;\n" +
		"    for (@Positive @SingleMember(10) Integer i : array) \n" +
		"      {\n" +
		"      }\n" +
		"    for (@Marker @Normal(value = 5) List<@Readonly X> x : xList) \n" +
		"      {\n" +
		"      }\n" +
		"  }\n" +
		"}\n";
	checkParse(CHECK_ALL & ~CHECK_COMPLETION_PARSER & ~CHECK_SELECTION_PARSER & ~CHECK_INDEXING_PARSER, source.toCharArray(), null, "test0112", expectedUnitToString );
	expectedUnitToString =
		"import java.util.*;\n" +
		"class X {\n" +
		"  X() {\n" +
		"    super();\n" +
		"  }\n" +
		"  List list() {\n" +
		"    return null;\n" +
		"  }\n" +
		"  void m2() {\n" +
		"    for (@SingleMember(10) Iterator<@Marker X> i;; i.hasNext(); ) \n" +
		"      ;\n" +
		"  }\n" +
		"  void m3() {\n" +
		"    Integer[] array;\n" +
		"    array = new Integer[]{1, 2, 3};\n" +
		"    List<List<X>> xList;\n" +
		"    xList = null;\n" +
		"    for (@Positive @SingleMember(10) Integer i : array) \n" +
		"      {\n" +
		"      }\n" +
		"    for (@Marker @Normal(value = 5) List<@Readonly X> x : xList) \n" +
		"      {\n" +
		"      }\n" +
		"  }\n" +
		"}\n";
	checkParse(CHECK_COMPLETION_PARSER & CHECK_SELECTION_PARSER, source.toCharArray(), null, "test0112", expectedUnitToString );
}

