/**
 * This test targets the optimization for parameterized dependencies in {@code BoundSet.combineSameSameWithProperType(...)}.
 */
public void testBug543480BasedOnTest2FromComment4ToSameSameOptimization() {
	if (this.complianceLevel >= ClassFileConstants.JDK1_8) {
		final List<Duration> durationsFor2TypeParameters = compileTimesAfterWarmup(() -> runConformTest(
			new String[] {
				"Test2_2.java",
				"public class Test2_2 {\n" +
				"	void test() {\n" +
				"		m(s(\n" +
				"			f(1),\n" +
				"			f(2)\n" +
				"		));\n" +
				"	}\n" +
				"\n" +
				"	static <R> R m(S<R> s) { return null; }\n" +
				"    static <T> F<T> f(T t) { return null; }\n" +
				"	static <T1> S<R1<T1>> s(F<T1> t1) { return null; }\n" +
				"	static <T1, T2> S<R2<T1, T2>> s(F<T1> t1, F<T2> t2) { return null; }\n" +
				"}\n" +
				"interface F<T> {}\n" +
				"interface S<R> {}\n" +
				"interface R1<T1> {}\n" +
				"interface R2<T1, T2> {}\n"
			}));
		final List<Duration> durationsFor11TypeParameters = compileTimesAfterWarmup(() -> runConformTest(
				new String[] {
					"Test2_11.java",
					"public class Test2_11 {\n" +
					"	void test() {\n" +
					"		m(s(\n" +
					"			f(1),\n" +
					"			f(2),\n" +
					"			f(3),\n" +
					"			f(4),\n" +
					"			f(5),\n" +
					"			f(6),\n" +
					"			f(7),\n" +
					"			f(8),\n" +
					"			f(9),\n" +
					"			f(10),\n" +
					"			f(11)\n" +
					"		));\n" +
					"	}\n" +
					"\n" +
					"	static <R> R m(S<R> s) { return null; }\n" +
					"   static <T> F<T> f(T t) { return null; }\n" +
					"	static <T1> S<R1<T1>> s(F<T1> t1) { return null; }\n" +
					"	static <T1, T2> S<R2<T1, T2>> s(F<T1> t1, F<T2> t2) { return null; }\n" +
					"	static <T1, T2, T3> S<R3<T1, T2, T3>> s(F<T1> t1, F<T2> t2, F<T3> t3) { return null; }\n" +
					"	static <T1, T2, T3, T4> S<R4<T1, T2, T3, T4>> s(F<T1> t1, F<T2> t2, F<T3> t3, F<T4> t4) { return null; }\n" +
					"	static <T1, T2, T3, T4, T5> S<R5<T1, T2, T3, T4, T5>> s(F<T1> t1, F<T2> t2, F<T3> t3, F<T4> t4, F<T5> t5) { return null; }\n" +
					"	static <T1, T2, T3, T4, T5, T6> S<R6<T1, T2, T3, T4, T5, T6>> s(F<T1> t1, F<T2> t2, F<T3> t3, F<T4> t4, F<T5> t5, F<T6> t6) { return null; }\n" +
					"	static <T1, T2, T3, T4, T5, T6, T7> S<R7<T1, T2, T3, T4, T5, T6, T7>> s(F<T1> t1, F<T2> t2, F<T3> t3, F<T4> t4, F<T5> t5, F<T6> t6, F<T7> t7) { return null; }\n" +
					"	static <T1, T2, T3, T4, T5, T6, T7, T8> S<R8<T1, T2, T3, T4, T5, T6, T7, T8>> s(F<T1> t1, F<T2> t2, F<T3> t3, F<T4> t4, F<T5> t5, F<T6> t6, F<T7> t7, F<T8> t8) { return null; }\n" +
					"	static <T1, T2, T3, T4, T5, T6, T7, T8, T9> S<R9<T1, T2, T3, T4, T5, T6, T7, T8, T9>> s(F<T1> t1, F<T2> t2, F<T3> t3, F<T4> t4, F<T5> t5, F<T6> t6, F<T7> t7, F<T8> t8, F<T9> t9) { return null; }\n" +
					"   static <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> S<R10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> s(F<T1> t1, F<T2> t2, F<T3> t3, F<T4> t4, F<T5> t5, F<T6> t6, F<T7> t7, F<T8> t8, F<T9> t9, F<T10> t10) { return null; }\n" +
					"   static <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> S<R11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> s(F<T1> t1, F<T2> t2, F<T3> t3, F<T4> t4, F<T5> t5, F<T6> t6, F<T7> t7, F<T8> t8, F<T9> t9, F<T10> t10, F<T11> t11) { return null; }\n" +
					"}\n" +
					"interface F<T> {}\n" +
					"interface S<R> {}\n" +
					"interface R1<T1> {}\n" +
					"interface R2<T1, T2> {}\n" +
					"interface R3<T1, T2, T3> {}\n" +
					"interface R4<T1, T2, T3, T4> {}\n" +
					"interface R5<T1, T2, T3, T4, T5> {}\n" +
					"interface R6<T1, T2, T3, T4, T5, T6> {}\n" +
					"interface R7<T1, T2, T3, T4, T5, T6, T7> {}\n" +
					"interface R8<T1, T2, T3, T4, T5, T6, T7, T8> {}\n" +
					"interface R9<T1, T2, T3, T4, T5, T6, T7, T8, T9> {}\n" +
					"interface R10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> {}\n" +
					"interface R11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> {}\n"
				}));
		// Time complexity should grow roughly linearly, not O(2^n)
		// To make the test robust, it tests for the same order of magnitude only, i.e. factor 10.
		assertCompileTimes(durationsFor2TypeParameters, 10, durationsFor11TypeParameters);
	}
}

