/**
 * Complex multi-threaded test involving inner classes
 */
public void test017() {
	this.runConformTest(
		new String[] {
			/* MultiComplex.java */
			"MultiComplex.java",
			"public class MultiComplex {\n" +
			"	// should just be an interface, once supported...\n" +
			"	abstract class AbstractTask implements Runnable {\n" +
			"		public void run() {\n" +
			"			MultiComplex.this.notifyCompletion(this,0); \n" +
			"		}\n" +
			"		abstract public String taskName();		\n" +
			"	}\n" +
			"	public static void main(String argv[]){\n" +
			"		try {\n" +
			"			new MultiComplex().performTasks(3);\n" +
			"		}\n" +
			"		catch(InterruptedException e){};\n" +
			"	}  \n" +
			"	void notifyCompleted(AbstractTask task) {\n" +
			"	}\n" +
			"	void notifyCompletion(AbstractTask task, int percentage) {\n" +
			"	}\n" +
			"	void notifyExecutionEnd() {\n" +
			"		System.out.println(\"EXECUTION FINISHED\");\n" +
			"	}\n" +
			"	void notifyExecutionStart() {\n" +
			"		System.out.println(\"EXECUTION STARTING\");\n" +
			"	}\n" +
			"	void performTasks(final int maxTasks) throws InterruptedException {\n" +
			"		Thread workers[] = new Thread[maxTasks];\n" +
			"		AbstractTask tasks[] = new AbstractTask[maxTasks];\n" +
			"		final int maxIteration = 5;\n" +
			" \n" +
			"		// Local Task \n" +
			"		class Task extends AbstractTask { \n" +
			"				String taskName; \n" +
			"				Task(String aName) {\n" +
			"					taskName = aName;\n" +
			"				}\n" +
			"				public String taskName() { \n" +
			"					return taskName; \n" +
			"				}\n" +
			"	\n" +
			"				public void run() {\n" +
			"					super.run();\n" +
			"					for(int j = 0; j < maxIteration; j++)\n" +
			"						MultiComplex.this.notifyCompletion(this,  (int)((float) (j + 1) / maxIteration * 100));\n" +
			"				}\n" +
			"		};\n" +
			"		notifyExecutionStart();\n" +
			"		\n" +
			"		// Creating and launching the tasks\n" +
			"		for (int ii = 0; ii < maxTasks; ii++) {\n" +
			"			final int i = ii;\n" +
			"			tasks[i] = new Task(String.valueOf(i + 1)) {			\n" +
			"				public String taskName() { \n" +
			"					return super.taskName() +  \" of \" + maxTasks; }\n" +
			"				public void run() {\n" +
			"					super.run();\n" +
			"					MultiComplex.this.notifyCompleted(this);\n" +
			"				}		\n" +
			"			};\n" +
			"			workers[i] = new Thread(tasks[i],tasks[i].taskName());\n" +
			"			workers[i].start();\n" +
			"		}\n" +
			"		// Waiting for *all* tasks to be ended\n" +
			"		for (int i = 0; i < tasks.length; i++)\n" +
			"			workers[i].join();\n" +
			"		notifyExecutionEnd();\n" +
			"	}\n" +
			"}\n"
		},
		"EXECUTION STARTING\n" +
		"EXECUTION FINISHED"
	);
}

