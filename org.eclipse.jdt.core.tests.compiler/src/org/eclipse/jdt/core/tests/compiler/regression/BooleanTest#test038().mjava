public void test038() {
	this.runConformTest(
		new String[] {
			"X.java",
			" public class X {\n" + 
			"	static boolean foo() { System.out.print(\"[foo]\"); return false; }\n" + 
			"	static boolean bar() { System.out.print(\"[bar]\"); return true; }\n" + 
			"	public static void main(String[] args) {\n" + 
			"		if ((foo() || bar()) && false) {\n" + 
			"			return;\n" + 
			"		}\n" + 
			"		System.out.println(\"[done]\");\n" + 
			"	}\n" + 
			"}", // =================
		},
		"[foo][bar][done]");
	// 	ensure optimized boolean codegen sequence
	String expectedOutput =
		"  // Method descriptor #34 ([Ljava/lang/String;)V\n" + 
		"  // Stack: 2, Locals: 1\n" + 
		"  public static void main(java.lang.String[] args);\n" + 
		"     0  invokestatic X.foo() : boolean [35]\n" + 
		"     3  ifne 10\n" + 
		"     6  invokestatic X.bar() : boolean [37]\n" + 
		"     9  pop\n" + 
		"    10  getstatic java.lang.System.out : java.io.PrintStream [16]\n" + 
		"    13  ldc <String \"[done]\"> [39]\n" + 
		"    15  invokevirtual java.io.PrintStream.println(java.lang.String) : void [41]\n" + 
		"    18  return\n";
	
	try {
		File f = new File(OUTPUT_DIR + File.separator + "X.class");
		byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
		ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
		String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
		int index = result.indexOf(expectedOutput);
		if (index == -1 || expectedOutput.length() == 0) {
			System.out.println(Util.displayString(result, 3));
		}
		if (index == -1) {
			assertEquals("Wrong contents", expectedOutput, result);
		}
	} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
		assertTrue(false);
	} catch (IOException e) {
		assertTrue(false);
	}		
}

