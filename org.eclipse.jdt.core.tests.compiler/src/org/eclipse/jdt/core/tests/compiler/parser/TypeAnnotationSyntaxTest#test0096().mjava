// To test Parser.consumeArrayCreationExpressionWithoutInitializer() with Type Annotations
public void test0096() throws IOException {
	String source =
		"class X <@Marker T extends @Readonly String> {\n" +
		"    public static void main(String[] args) {\n" +
		"		int [] x1;\n" +
		"		x1 = new int @Marker @SingleMember(10) [10];\n" +
		"       Integer [][] x2;\n" +
		"		x2 = new @Positive Integer @Marker [10] @Normal(value = 10) [10];\n" +
		"		char[][] tokens;\n" +
		"		tokens = new char @SingleMember(0) [0] @Normal(value = 10) @Marker [];\n" +
		"    }\n" +
		"}\n";
	String expectedUnitToString =
		"class X<@Marker T extends @Readonly String> {\n" +
		"  X() {\n" +
		"    super();\n" +
		"  }\n" +
		"  public static void main(String[] args) {\n" +
		"    int[] x1;\n" +
		"    x1 = new int @Marker @SingleMember(10) [10];\n" +
		"    Integer[][] x2;\n" +
		"    x2 = new @Positive Integer @Marker [10] @Normal(value = 10) [10];\n" +
		"    char[][] tokens;\n" +
		"    tokens = new char @SingleMember(0) [0] @Normal(value = 10) @Marker [];\n" +
		"  }\n" +
		"}\n";
	checkParse(CHECK_ALL & ~CHECK_INDEXING_PARSER, source.toCharArray(), null, "test0096", expectedUnitToString );
}

