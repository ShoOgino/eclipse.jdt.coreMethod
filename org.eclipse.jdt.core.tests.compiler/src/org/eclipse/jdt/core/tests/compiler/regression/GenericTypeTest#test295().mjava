	// non-static method #start() gets its type substituted when accessed through raw type
	public void test295() {
		this.runNegativeTest(
			new String[] {
				"C.java", //---------------------------
				"public class C<U> {\n" + 
				"\n" + 
				"	void bar() {\n" + 
				"		new B().start().get(new B().start()).get(new B().start());\n" + 
				"	}\n" + 
				"}\n",
				"B.java", //---------------------------
				"public class B<X>{\n" + 
				"	X get(B<X> bx) { return null; }\n" + 
				"	B<B<D>> start() { return null; }\n" + 
				"}",
				"D.java", //---------------------------
				"public class D<Y>{}\n",
			},
		"----------\n" + 
		"1. WARNING in C.java (at line 4)\n" + 
		"	new B().start().get(new B().start()).get(new B().start());\n" + 
		"	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
		"Unsafe type operation: Should not invoke the method get(B<X>) of raw type B. References to generic type B<X> should be parameterized\n" + 
		"----------\n" + 
		"2. ERROR in C.java (at line 4)\n" + 
		"	new B().start().get(new B().start()).get(new B().start());\n" + 
		"	                                     ^^^\n" + 
		"The method get(B) is undefined for the type Object\n" + 
		"----------\n");
	}

