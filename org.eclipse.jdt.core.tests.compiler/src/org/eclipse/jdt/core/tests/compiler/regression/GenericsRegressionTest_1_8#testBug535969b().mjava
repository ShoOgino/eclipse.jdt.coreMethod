	public void testBug535969b() {
		runConformTest(
			new String[] {
				"B.java",
				"\n" + 
				"import java.util.Optional;\n" + 
				"import java.util.function.Supplier;\n" +
				"import java.io.Serializable;\n" + 
				"\n" + 
				"public class B {\n" + 
				"    public static void main(String[] args) {\n" + 
				"\n" + 
				"        // This works fine:\n" + 
				"        System.out.println(new Object() {\n" + 
				"            int j = 5;\n" + 
				"        }.j);\n" + 
				"\n" + 
				"        // This also\n" + 
				"        System.out.println(trace(new Object() {\n" + 
				"            int j = 5;\n" + 
				"        }).j);\n" + 
				"\n" + 
				"        // Also no problem\n" + 
				"        System.out.println(unwrapAndTrace(Optional.of(new Object() {\n" + 
				"            int j = 5;\n" + 
				"        })).j);\n" + 
				"\n" + 
				"        // Lambdas work:\n" + 
				"        System.out.println(((Supplier & Serializable) () -> new Object()).get()); \n" + 
				"\n" + 
				"        // This doesn't work.\n" + 
				"        System.out.println(invokeAndTrace(() -> new Object() {\n" + 
				"            int j = 5;\n" + 
				"        }).j);\n" + 
				"    }\n" + 
				"\n" + 
				"    public static <T> T trace(T obj) {\n" + 
				"        System.out.println(obj);\n" + 
				"        return obj;\n" + 
				"    }\n" + 
				"\n" + 
				"    public static <T> T invokeAndTrace(Supplier<T> supplier) {\n" + 
				"        T result = supplier.get();\n" + 
				"        System.out.println(result);\n" + 
				"        return result;\n" + 
				"    }\n" + 
				"\n" + 
				"    public static <T> T unwrapAndTrace(Optional<T> optional) {\n" + 
				"        T result = optional.get();\n" + 
				"        System.out.println(result);\n" + 
				"        return result;\n" + 
				"    }\n" +
				"}\n"
			});
	}

