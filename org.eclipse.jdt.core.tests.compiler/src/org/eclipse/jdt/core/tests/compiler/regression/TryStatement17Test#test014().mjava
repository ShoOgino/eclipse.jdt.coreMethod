// Test that if the rethrow argument is modified in a different flow (not effectively final), then also precise throw
// should not be computed
public void test014() {
	this.runNegativeTest(
		new String[] {
			"X.java",
			"public class X {\n" +
			"	public static void main(String[] args) {\n" + 
			"		try {\n" + 
			"			throw new DaughterOfFoo();\n"+
			"		} catch(Foo e) {\n" + 
			"			try {\n" +
			"				boolean DEBUG = true;\n" +
			"				if (DEBUG) {\n" +
			"					throw e;\n"+
			"				}" +
			"				e = new Foo();\n" +
			"				e.printStackTrace();\n"+
			"			} catch (SonOfFoo e1) {\n" +
			"			 	e1.printStackTrace();\n" +
			"			} catch (Foo e1) {}\n"+
			"		}\n" + 
			"	}\n" + 
			"}\n"+
			"class Foo extends Exception {}\n"+
			"class SonOfFoo extends Foo {}\n"+
			"class DaughterOfFoo extends Foo {}\n"
		},
		"----------\n" +
		"1. WARNING in X.java (at line 18)\n" + 
		"	class Foo extends Exception {}\n" + 
		"	      ^^^\n" + 
		"The serializable class Foo does not declare a static final serialVersionUID field of type long\n" + 
		"----------\n" + 
		"2. WARNING in X.java (at line 19)\n" + 
		"	class SonOfFoo extends Foo {}\n" + 
		"	      ^^^^^^^^\n" + 
		"The serializable class SonOfFoo does not declare a static final serialVersionUID field of type long\n" + 
		"----------\n" + 
		"3. WARNING in X.java (at line 20)\n" + 
		"	class DaughterOfFoo extends Foo {}\n" + 
		"	      ^^^^^^^^^^^^^\n" + 
		"The serializable class DaughterOfFoo does not declare a static final serialVersionUID field of type long\n" + 
		"----------\n");
}

