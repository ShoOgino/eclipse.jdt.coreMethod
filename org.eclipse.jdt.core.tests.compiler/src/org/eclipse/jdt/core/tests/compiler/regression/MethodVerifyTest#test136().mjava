// https://bugs.eclipse.org/bugs/show_bug.cgi?id=162073
// https://bugs.eclipse.org/bugs/show_bug.cgi?id=184293
public void test136() {
	this.runNegativeTest(
		new String[] {
			"X.java",
			"public abstract class X extends E {}\n" + 
			"class X2 extends E {\n" + 
			"  @Override public A foo(Number n) { return null; }\n" +
			"}\n" + 
			"abstract class Y extends X {}\n" + 
			"abstract class D {\n" + 
			"  abstract <T extends Exception & Cloneable> T foo(Number n);\n" + 
			"}\n" + 
			"abstract class E extends D {\n" + 
			"  @Override abstract A foo(Number n);\n" +  // warning: overrides <T>foo(java.lang.Number) in I; return type requires unchecked conversion
			"}\n" + 
			"abstract class A extends Exception implements Cloneable {}"
		},
		"----------\n" + 
		"1. WARNING in X.java (at line 10)\n" + 
		"	@Override abstract A foo(Number n);\n" + 
		"	                   ^\n" + 
		"Type safety: The return type A for foo(Number) from the type E needs unchecked conversion to conform to T from the type D\n" + 
		"----------\n"
		// javac reports warnings against X AND Y about E.foo(), as well as reporting the warning on E.foo() twice
	);
}

