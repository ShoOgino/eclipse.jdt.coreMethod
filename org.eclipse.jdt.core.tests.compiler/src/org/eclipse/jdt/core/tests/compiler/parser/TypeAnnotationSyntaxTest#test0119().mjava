// To test Parser.consumeTypeArgument() with Type Annotations
public void test0119() throws IOException {
	String source =
		"class X<@SingleMember(1) Xp1 extends @Readonly String, @NonNull Xp2 extends @NonNull Comparable>  extends @Marker XS<@SingleMember(10) Xp2> {\n" +
		"\n" +
		"    public static void main(String @Marker [] args) {\n" +
		"        Integer w;\n" +
		"        w = new @Marker X<@Readonly @SingleMember(10) String,@Positive Integer>().get(new @Positive Integer(12));\n" +
		"        System.out.println(\"SUCCESS\");\n" +
		"	 }\n" +
		"    Xp2 get(@Marker X this, Xp2 t) {\n" +
		"        System.out.print(\"{X::get}\");\n" +
		"        return super.get(t);\n" +
		"    }\n" +
		"}\n" +
		"@Marker class XS <@NonNull XSp1> {\n" +
		"    XSp1 get(XSp1 t) {\n" +
		"		 @NonNull @SingleMember(10) Y.M mObject;\n" +
		"		 mObject = new @SingleMember(10) @NonNull Y.M();\n" +
		"        System.out.print(\"{XS::get}\");\n" +
		"        return t;\n" +
		"    }\n" +
		"}\n" +
		"class X2<T,E>{}\n" +
		"@Marker class Y extends @Marker X2<@NonNull Y.M, @NonNull @SingleMember(1) Y.N> {\n" +
		"	static class M{}\n" +
		"	static class N extends M{}\n" +
		"}\n";
	String expectedUnitToString =
		"class X<@SingleMember(1) Xp1 extends @Readonly String, @NonNull Xp2 extends @NonNull Comparable> extends @Marker XS<@SingleMember(10) Xp2> {\n" +
		"  X() {\n" +
		"    super();\n" +
		"  }\n" +
		"  public static void main(String @Marker [] args) {\n" +
		"    Integer w;\n" +
		"    w = new @Marker X<@Readonly @SingleMember(10) String, @Positive Integer>().get(new @Positive Integer(12));\n" +
		"    System.out.println(\"SUCCESS\");\n" +
		"  }\n" +
		"  Xp2 get(@Marker X this, Xp2 t) {\n" +
		"    System.out.print(\"{X::get}\");\n" +
		"    return super.get(t);\n" +
		"  }\n" +
		"}\n" +
		"@Marker class XS<@NonNull XSp1> {\n" +
		"  XS() {\n" +
		"    super();\n" +
		"  }\n" +
		"  XSp1 get(XSp1 t) {\n" +
		"    @NonNull @SingleMember(10) Y.M mObject;\n" +
		"    mObject = new @SingleMember(10) @NonNull Y.M();\n" +
		"    System.out.print(\"{XS::get}\");\n" +
		"    return t;\n" +
		"  }\n" +
		"}\n" +
		"class X2<T, E> {\n" +
		"  X2() {\n" +
		"    super();\n" +
		"  }\n" +
		"}\n" +
		"@Marker class Y extends @Marker X2<@NonNull Y.M, @NonNull @SingleMember(1) Y.N> {\n" +
		"  static class M {\n" +
		"    M() {\n" +
		"      super();\n" +
		"    }\n" +
		"  }\n" +
		"  static class N extends M {\n" +
		"    N() {\n" +
		"      super();\n" +
		"    }\n" +
		"  }\n" +
		"  Y() {\n" +
		"    super();\n" +
		"  }\n" +
		"}\n";
	checkParse(CHECK_ALL & ~CHECK_INDEXING_PARSER, source.toCharArray(), null, "test0119", expectedUnitToString );
}

