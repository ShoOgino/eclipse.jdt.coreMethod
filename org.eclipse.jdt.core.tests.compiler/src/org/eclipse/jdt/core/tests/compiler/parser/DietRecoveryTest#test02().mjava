/*
 * Should filter out local type altogether
 */
public void test02() {

	String s = 
		"package a;											\n"
			+ "import java.lang.*;							\n"
			+ "import java.util.*;							\n"
			+ "												\n"
			+ "public class X {								\n"
			+ "	void foo() {								\n"
			+ "		System.out.println();					\n"
			+ "												\n"
			+ "		class L {								\n"
			+ "			void baz(){}						\n"
			+ "		}										\n"
			+ "												\n"
			+ "	public int h;								\n"
			+ "	public int[] i = { 0, 1 };					\n"
			+ "												\n"
			+ "	void bar(){									\n"
			+ "	void truc(){								\n"
			+ "}											\n"; 

	String expectedDietUnitToString = 
		"package a;\n" + 
		"import java.lang.*;\n" + 
		"import java.util.*;\n" + 
		"public class X {\n" + 
		"  public int h;\n" + 
		"  public int[] i = {0,1,};\n" + 
		"  public X() {\n" + 
		"  }\n" + 
		"  void foo() {\n" + 
		"  }\n" + 
		"  void bar() {\n" + 
		"  }\n" + 
		"  void truc() {\n" + 
		"  }\n" + 
		"}\n";
	
	String expectedDietPlusBodyUnitToString = 
		"package a;\n" + 
		"import java.lang.*;\n" + 
		"import java.util.*;\n" + 
		"public class X {\n" + 
		"  public int h;\n" + 
		"  public int[] i = {0,1,};\n" + 
		"  public X() {\n" + 
		"    super();\n" +
		"  }\n" + 
		"  void foo() {\n" + 
		"  }\n" + 
		"  void bar() {\n" + 
		"  }\n" + 
		"  void truc() {\n" + 
		"  }\n" + 
		"}\n";	

	String expectedFullUnitToString = expectedDietUnitToString;
	
	String expectedCompletionDietUnitToString = 
		"package a;\n" + 
		"import java.lang.*;\n" + 
		"import java.util.*;\n" + 
		"public class X {\n" + 
		"  public int h;\n" + 
		"  public int[] i;\n" + 
		"  public X() {\n" + 
		"  }\n" + 
		"  void foo() {\n" + 
		"  }\n" + 
		"  void bar() {\n" + 
		"  }\n" + 
		"  void truc() {\n" + 
		"  }\n" + 
		"}\n";
	
	String testName = "<filter out local type>";
	checkParse(
		s.toCharArray(),
		expectedDietUnitToString,
		expectedDietPlusBodyUnitToString,
		expectedFullUnitToString,
		expectedCompletionDietUnitToString,	
		testName);
}
/*
 * Should still be finding last method (#baz)
 */

