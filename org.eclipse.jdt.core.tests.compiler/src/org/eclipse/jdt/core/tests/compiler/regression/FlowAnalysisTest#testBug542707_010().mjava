/**
 * From JLS 12 16.1.7 , Suppose that the switch expression has result expressions e1, â€¦, en, all of
 * which are boolean-valued. 
 * V is [un]assigned before the first statement of the first switch labeled statement group in the switch block
 * iff V is [un]assigned after the selector expression.
 */
public void testBug542707_010() {
	if (this.complianceLevel != ClassFileConstants.JDK12)
		return;
	Map<String, String> defaultOptions = super.getCompilerOptions();
	defaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_12);
	defaultOptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_12);
	defaultOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_12);
	defaultOptions.put(CompilerOptions.OPTION_EnablePreviews, CompilerOptions.ENABLED);
	defaultOptions.put(CompilerOptions.OPTION_ReportPreviewFeatures, CompilerOptions.IGNORE);
	String expectedProblemLog =
			"----------\n" + 
			"1. ERROR in X.java (at line 22)\n" + 
			"	Zork();\n" + 
			"	^^^^\n" + 
			"The method Zork() is undefined for the type X\n" + 
			"----------\n";
	String[] testFiles = new String[] {
			"X.java", // =================
			"public class X {\n" +
			"	public static int foo(int i) {\n" +
			"		int v;\n" +
			"		boolean b = switch (i + (v =1)) {\n" +
			"		case 1 :\n" +
			"			v += 1;\n" +
			"			break true;\n" +
			"		case 2 : {\n" +
			"			v = 2;\n" +
			"			break true;\n" +
			"		}\n" +
			"		default : {\n" +
			"			v = 3;\n" +
			"			break false;\n" +
			"		}\n" +
			"		};\n" +
			"		int d = b == true ? 0 : 1; \n" +
			"		return v + d;\n" +
			"	}\n" +
			"\n" +
			"	public boolean bar() {\n" +
			"		Zork();\n" +
			"		return true;\n" +
			"	}\n" +
			"	public static void main(String[] args) {\n" +
			"		System.out.println(foo(3));\n" +
			"	}\n" +
			"}\n",
	};
	this.runNegativeTest(
			testFiles,
			expectedProblemLog,
			null,
			true,
			defaultOptions);
}

