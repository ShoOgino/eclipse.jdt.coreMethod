public void testBug463320_comment8() {
	if (this.complianceLevel < ClassFileConstants.JDK1_5) return; // required version of java.nio.file.*
	Map options = getCompilerOptions();
	options.put(CompilerOptions.OPTION_ReportUnclosedCloseable, CompilerOptions.ERROR);
	options.put(CompilerOptions.OPTION_ReportPotentiallyUnclosedCloseable, CompilerOptions.ERROR);
	runLeakTest(
		new String[] {
			"Try17.java",
			"import java.io.*;\n" +
			"import java.nio.file.*;\n" +
			"import java.net.*;\n" +
			"public class Try17 {\n" + 
			"   public InputStream openInputStream(URI uri) {\n" + 
			"		try {\n" + 
			"			System.out.println(FileSystems.getFileSystem(uri));\n" + 
			"			return Files.newInputStream(Paths.get(uri));\n" + 
			"		} catch (FileSystemNotFoundException e) {\n" + 
			"			throw new IllegalArgumentException(e);\n" + 
			"		} catch (IOException e) {\n" + 
			"			throw new IllegalStateException(e);\n" + 
			"		}\n" + 
			"	}\n" + 
			"	public InputStream delegateGet(URI uri) {\n" +
			"		return openInputStream(uri);\n" + // no problem here!
			"	}\n" + 
			"}"
		},
		"----------\n" + 
		"1. ERROR in Try17.java (at line 7)\n" + 
		"	System.out.println(FileSystems.getFileSystem(uri));\n" + 
		"	                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
		"Potential resource leak: \'<unassigned Closeable value from line 7>\' may not be closed\n" + 
		"----------\n",
		options);
}

