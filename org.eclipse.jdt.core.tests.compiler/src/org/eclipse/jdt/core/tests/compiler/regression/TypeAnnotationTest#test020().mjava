//	// class type parameter bound
//	public void test018() throws Exception {
//		this.runConformTest(
//			new String[] {
//				"A.java",
//				"import java.lang.annotation.Target;\n" + 
//				"import static java.lang.annotation.ElementType.*;\n" + 
//				"import java.lang.annotation.Retention;\n" + 
//				"import static java.lang.annotation.RetentionPolicy.*;\n" + 
//				"@Target(TYPE_USE)\n" + 
//				"@Retention(RUNTIME)\n" + 
//				"@interface A {\n" + 
//				"	String value() default \"default\";\n" + 
//				"}\n",
//				"B.java",
//				"import java.lang.annotation.Target;\n" + 
//				"import static java.lang.annotation.ElementType.*;\n" + 
//				"import java.lang.annotation.Retention;\n" + 
//				"import static java.lang.annotation.RetentionPolicy.*;\n" + 
//				"@Target(TYPE_USE)\n" + 
//				"@Retention(CLASS)\n" + 
//				"@interface B {\n" + 
//				"	int value() default -1;\n" + 
//				"}",
//				"X.java",
//				"public class X<T extends @A String & @B(3) Cloneable> {}",
//		},
//		"");
//		String expectedOutput =
//			"  RuntimeVisibleTypeAnnotations: \n" + 
//			"    #25 @A(\n" + 
//			"      target type = 0x10 CLASS_TYPE_PARAMETER_BOUND\n" + 
//			"      type parameter index = 0 type parameter bound index = 0\n" + 
//			"    )\n" + 
//			"  RuntimeInvisibleTypeAnnotations: \n" + 
//			"    #21 @B(\n" + 
//			"      #22 value=(int) 3 (constant type)\n" + 
//			"      target type = 0x10 CLASS_TYPE_PARAMETER_BOUND\n" + 
//			"      type parameter index = 0 type parameter bound index = 1\n" + 
//			"    )\n" ;
//		checkDisassembledClassFile(OUTPUT_DIR + File.separator + "X.class", "X", expectedOutput, ClassFileBytesDisassembler.SYSTEM);
//	}
//	// class type parameter bound generic or array
//	public void test019() throws Exception {
//		this.runConformTest(
//			new String[] {
//				"A.java",
//				"import java.lang.annotation.Target;\n" + 
//				"import static java.lang.annotation.ElementType.*;\n" + 
//				"import java.lang.annotation.Retention;\n" + 
//				"import static java.lang.annotation.RetentionPolicy.*;\n" + 
//				"@Target(TYPE_USE)\n" + 
//				"@Retention(RUNTIME)\n" + 
//				"@interface A {\n" + 
//				"	String value() default \"default\";\n" + 
//				"}\n",
//				"B.java",
//				"import java.lang.annotation.Target;\n" + 
//				"import static java.lang.annotation.ElementType.*;\n" + 
//				"import java.lang.annotation.Retention;\n" + 
//				"import static java.lang.annotation.RetentionPolicy.*;\n" + 
//				"@Target(TYPE_USE)\n" + 
//				"@Retention(CLASS)\n" + 
//				"@interface B {\n" + 
//				"	int value() default -1;\n" + 
//				"}",
//				"C.java",
//				"import java.lang.annotation.Target;\n" + 
//				"import static java.lang.annotation.ElementType.*;\n" + 
//				"import java.lang.annotation.Retention;\n" + 
//				"import static java.lang.annotation.RetentionPolicy.*;\n" + 
//				"@Target(TYPE_USE)\n" + 
//				"@Retention(RUNTIME)\n" + 
//				"@interface C {\n" + 
//				"	char value() default '-';\n" + 
//				"}\n",
//				"Y.java",
//				"public class Y<T> {}",
//				"X.java",
//				"public class X<U, T extends Y<@A String @C[][]@B[]> & @B(3) Cloneable> {}",
//		},
//		"");
//		String expectedOutput =
//			"  RuntimeVisibleTypeAnnotations: \n" + 
//			"    #25 @A(\n" + 
//			"      target type = 0x11 CLASS_TYPE_PARAMETER_BOUND_GENERIC_OR_ARRAY\n" + 
//			"      type parameter index = 1 type parameter bound index = 0\n" + 
//			"      locations = {0,2}\n" + 
//			"    )\n" + 
//			"    #26 @C(\n" + 
//			"      target type = 0x11 CLASS_TYPE_PARAMETER_BOUND_GENERIC_OR_ARRAY\n" + 
//			"      type parameter index = 1 type parameter bound index = 0\n" + 
//			"      locations = {0}\n" + 
//			"    )\n" + 
//			"  RuntimeInvisibleTypeAnnotations: \n" + 
//			"    #21 @B(\n" + 
//			"      target type = 0x11 CLASS_TYPE_PARAMETER_BOUND_GENERIC_OR_ARRAY\n" + 
//			"      type parameter index = 1 type parameter bound index = 0\n" + 
//			"      locations = {0,1}\n" + 
//			"    )\n" + 
//			"    #21 @B(\n" + 
//			"      #22 value=(int) 3 (constant type)\n" + 
//			"      target type = 0x10 CLASS_TYPE_PARAMETER_BOUND\n" + 
//			"      type parameter index = 1 type parameter bound index = 1\n" + 
//			"    )\n";
//		checkDisassembledClassFile(OUTPUT_DIR + File.separator + "X.class", "X", expectedOutput, ClassFileBytesDisassembler.SYSTEM);
//	}
	// method type parameter bound
	public void test020() throws Exception {
		this.runConformTest(
			new String[] {
				"A.java",
				"import java.lang.annotation.Target;\n" + 
				"import static java.lang.annotation.ElementType.*;\n" + 
				"import java.lang.annotation.Retention;\n" + 
				"import static java.lang.annotation.RetentionPolicy.*;\n" + 
				"@Target(TYPE_USE)\n" + 
				"@Retention(RUNTIME)\n" + 
				"@interface A {\n" + 
				"	String value() default \"default\";\n" + 
				"}\n",
				"B.java",
				"import java.lang.annotation.Target;\n" + 
				"import static java.lang.annotation.ElementType.*;\n" + 
				"import java.lang.annotation.Retention;\n" + 
				"import static java.lang.annotation.RetentionPolicy.*;\n" + 
				"@Target(TYPE_USE)\n" + 
				"@Retention(CLASS)\n" + 
				"@interface B {\n" + 
				"	int value() default -1;\n" + 
				"}",
				"Z.java",
				"public class Z {}",
				"X.java",
				"public class X {\n" +
				"	<T extends @A Z & @B(3) Cloneable> void foo(T t) {}\n" +
				"}",
		},
		"");
		String expectedOutput =
			"    RuntimeVisibleTypeAnnotations: \n" + 
			"      #27 @A(\n" + 
			"        target type = 0x12 METHOD_TYPE_PARAMETER_BOUND\n" + 
			"        type parameter index = 0 type parameter bound index = 0\n" + 
			"      )\n" + 
			"    RuntimeInvisibleTypeAnnotations: \n" + 
			"      #23 @B(\n" + 
			"        #24 value=(int) 3 (constant type)\n" + 
			"        target type = 0x12 METHOD_TYPE_PARAMETER_BOUND\n" + 
			"        type parameter index = 0 type parameter bound index = 1\n" + 
			"      )\n";
		checkDisassembledClassFile(OUTPUT_DIR + File.separator + "X.class", "X", expectedOutput, ClassFileBytesDisassembler.SYSTEM);
	}

