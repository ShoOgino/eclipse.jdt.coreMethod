public void testBug456584() {
	Map compilerOptions = getCompilerOptions();
	compilerOptions.put(JavaCore.COMPILER_PB_PESSIMISTIC_NULL_ANALYSIS_FOR_FREE_TYPE_VARIABLES, JavaCore.WARNING);
	runWarningTestWithLibs(
		true/*flush*/,
		new String[] {
			"Test.java",
			"import java.util.*;\n" +
			"import java.util.function.*;\n" +
			"import org.eclipse.jdt.annotation.*;\n" +
			"\n" +
			"@NonNullByDefault\n" +
			"public class Test {\n" +
			"\n" +
			"  public static final <T,R> @NonNull R applyRequired(final T input, final Function<? super T,? extends R> function) { // Warning on '@NonNull R': \"The nullness annotation is redundant with a default that applies to this location\"\n" +
			"    return Objects.requireNonNull(function.apply(input));\n" +
			"  }\n" +
			"\n" +
			"}\n"
		},
		compilerOptions,
		"----------\n" +
		"1. INFO in Test.java (at line 9)\n" +
		"	return Objects.requireNonNull(function.apply(input));\n" +
		"	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" +
		"Unsafe interpretation of method return type as \'@NonNull\' based on substitution \'T=@NonNull capture#of ? extends R\'. Declaring type \'Objects\' doesn\'t seem to be designed with null type annotations in mind\n" +
		"----------\n" +
		"2. WARNING in Test.java (at line 9)\n" +
		"	return Objects.requireNonNull(function.apply(input));\n" +
		"	                              ^^^^^^^^^^^^^^^^^^^^^\n" +
		"Null type safety: required \'@NonNull\' but this expression has type \'capture#2-of ? extends R\', a free type variable that may represent a \'@Nullable\' type\n" +
		"----------\n");
}

