	public void test012() {
		this.runConformTest(
				new String[] {
					"X.java",
					"public class X {\n" + 
					"	public static void main(String[] args) {\n" + 
					"		X x;\n" + 
					"		Object o;\n" + 
					"		for (int i = 0; i < 10; i++) {\n" + 
					"			if (i < 90) {\n" + 
					"				x = new X();\n" + 
					"				if (i > 4) {\n" + 
					"					o = new Object();\n" + 
					"				} else {\n" + 
					"					o = null;\n" + 
					"				}\n" + 
					"				switch (i) {\n" + 
					"					case 0:\n" + 
					"						if (o instanceof String) {\n" + 
					"							System.out.print(\"1\");\n" + 
					"							return;\n" + 
					"						} else {\n" + 
					"							break;\n" + 
					"						}\n" + 
					"					default: {\n" + 
					"						Object diff = o;\n" + 
					"						if (diff != null) {\n" + 
					"							System.out.print(\"2\");\n" + 
					"						}\n" + 
					"						break;\n" + 
					"					}\n" + 
					"				}\n" + 
					"				System.out.print(\"3\");\n" + 
					"			}\n" + 
					"		}\n" + 
					"	}\n" + 
					"}",
				},
				"333332323232323");
				
			ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
			String actualOutput = null;
			try {
				byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +"X.class"));
				actualOutput =
					disassembler.disassemble(
						classFileBytes,
						"\n",
						ClassFileBytesDisassembler.DETAILED); 
			} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
				assertTrue("ClassFormatException", false);
			} catch (IOException e) {
				assertTrue("IOException", false);
			}
			
			String expectedOutput = 
				"  // Method descriptor #15 ([Ljava/lang/String;)V\n" + 
				"  // Stack: 2, Locals: 5\n" + 
				"  public static void main(java.lang.String[] args);\n" + 
				"      0  iconst_0\n" + 
				"      1  istore_3 [i]\n" + 
				"      2  goto 99\n" + 
				"      5  iload_3 [i]\n" + 
				"      6  bipush 90\n" + 
				"      8  if_icmpge 96\n" + 
				"     11  new X [1]\n" + 
				"     14  dup\n" + 
				"     15  invokespecial X() [16]\n" + 
				"     18  astore_1 [x]\n" + 
				"     19  iload_3 [i]\n" + 
				"     20  iconst_4\n" + 
				"     21  if_icmple 35\n" + 
				"     24  new java.lang.Object [3]\n" + 
				"     27  dup\n" + 
				"     28  invokespecial java.lang.Object() [8]\n" + 
				"     31  astore_2 [o]\n" + 
				"     32  goto 37\n" + 
				"     35  aconst_null\n" + 
				"     36  astore_2 [o]\n" + 
				"     37  iload_3 [i]\n" + 
				"     38  tableswitch default: 72\n" + 
				"          case 0: 56\n" + 
				"     56  aload_2 [o]\n" + 
				"     57  instanceof java.lang.String [17]\n" + 
				"     60  ifeq 88\n" + 
				"     63  getstatic java.lang.System.out : java.io.PrintStream [19]\n" + 
				"     66  ldc <String \"1\"> [25]\n" + 
				"     68  invokevirtual java.io.PrintStream.print(java.lang.String) : void [27]\n" + 
				"     71  return\n" + 
				"     72  aload_2 [o]\n" + 
				"     73  astore 4 [diff]\n" + 
				"     75  aload 4 [diff]\n" + 
				"     77  ifnull 88\n" + 
				"     80  getstatic java.lang.System.out : java.io.PrintStream [19]\n" + 
				"     83  ldc <String \"2\"> [33]\n" + 
				"     85  invokevirtual java.io.PrintStream.print(java.lang.String) : void [27]\n" + 
				"     88  getstatic java.lang.System.out : java.io.PrintStream [19]\n" + 
				"     91  ldc <String \"3\"> [35]\n" + 
				"     93  invokevirtual java.io.PrintStream.print(java.lang.String) : void [27]\n" + 
				"     96  iinc 3 1 [i]\n" + 
				"     99  iload_3 [i]\n" + 
				"    100  bipush 10\n" + 
				"    102  if_icmplt 5\n" + 
				"    105  return\n" + 
				"      Line numbers:\n" + 
				"        [pc: 0, line: 5]\n" + 
				"        [pc: 5, line: 6]\n" + 
				"        [pc: 11, line: 7]\n" + 
				"        [pc: 19, line: 8]\n" + 
				"        [pc: 24, line: 9]\n" + 
				"        [pc: 35, line: 11]\n" + 
				"        [pc: 37, line: 13]\n" + 
				"        [pc: 56, line: 15]\n" + 
				"        [pc: 63, line: 16]\n" + 
				"        [pc: 71, line: 17]\n" + 
				"        [pc: 72, line: 22]\n" + 
				"        [pc: 75, line: 23]\n" + 
				"        [pc: 80, line: 24]\n" + 
				"        [pc: 88, line: 29]\n" + 
				"        [pc: 96, line: 5]\n" + 
				"        [pc: 105, line: 32]\n" + 
				"      Local variable table:\n" + 
				"        [pc: 0, pc: 106] local: args index: 0 type: java.lang.String[]\n" + 
				"        [pc: 19, pc: 96] local: x index: 1 type: X\n" + 
				"        [pc: 32, pc: 35] local: o index: 2 type: java.lang.Object\n" + 
				"        [pc: 37, pc: 96] local: o index: 2 type: java.lang.Object\n" + 
				"        [pc: 2, pc: 105] local: i index: 3 type: int\n" + 
				"        [pc: 75, pc: 88] local: diff index: 4 type: java.lang.Object\n" + 
				"      Stack map table: number of frames 8\n" + 
				"        [pc: 5, full, stack: {}, locals: {java.lang.String[], _, _, int}]\n" + 
				"        [pc: 35, full, stack: {}, locals: {java.lang.String[], X, _, int}]\n" + 
				"        [pc: 37, full, stack: {}, locals: {java.lang.String[], X, java.lang.Object, int}]\n" + 
				"        [pc: 56, same]\n" + 
				"        [pc: 72, same]\n" + 
				"        [pc: 88, same]\n" + 
				"        [pc: 96, full, stack: {}, locals: {java.lang.String[], _, _, int}]\n" + 
				"        [pc: 99, same]\n";
			
			int index = actualOutput.indexOf(expectedOutput);
			if (index == -1 || expectedOutput.length() == 0) {
				System.out.println(Util.displayString(actualOutput, 2));
			}
			if (index == -1) {
				assertEquals("Wrong contents", expectedOutput, actualOutput);
			}
	}

