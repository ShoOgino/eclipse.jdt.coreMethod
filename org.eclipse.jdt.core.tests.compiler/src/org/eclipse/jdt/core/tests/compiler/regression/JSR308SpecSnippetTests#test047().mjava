	// More type path tests
	public void test047() throws Exception {
		this.runConformTest(
			new String[] {
				"X.java",
				"import java.lang.annotation.*;\n" +
				"@Target(ElementType.TYPE_USE)\n" +
				"@interface A {\n" +
				"	String value() default \"default\";\n" +
				"}\n" +
				"@Target(ElementType.TYPE_USE)\n" +
				"@interface B {\n" +
				"	String value() default \"default\";\n" +
				"}\n" +
				"@Target(ElementType.TYPE_USE)\n" +
				"@interface C {\n" +
				"	String value() default \"default\";\n" +
				"}\n" +
				"@Target(ElementType.TYPE_USE)\n" +
				"@interface D {\n" +
				"	String value() default \"default\";\n" +
				"}\n" +
				"@Target(ElementType.TYPE_USE)\n" +
				"@interface E {\n" +
				"	String value() default \"default\";\n" +
				"}\n" +
				"@Target(ElementType.TYPE_USE)\n" +
				"@interface F {\n" +
				"	String value() default \"default\";\n" +
				"}\n" +
				"@Target(ElementType.TYPE_USE)\n" +
				"@interface G {\n" +
				"	String value() default \"default\";\n" +
				"}\n" +
				"@Target(ElementType.TYPE_USE)\n" +
				"@interface H {\n" +
				"	String value() default \"default\";\n" +
				"}\n" +
				"class O1 {\n" +
				"	class O2<S, T> {\n" +
				"		class O3 {\n" +
				"			class Nested<K, V> {\n" +
				"			}\n" +
				"		}\n" +
				"	}\n" +
				"}\n" +
				"	class S {}\n" +
				"	class T {}\n" +
				"	class U {}\n" +
				"	class V {}\n" +
				"class X {\n" +
				"	@H O1.@E O2<@F S, @G T>.@D O3.@A Nested<@B U, @C V> f;\n" +
				"}\n",
		},
		"");

		String expectedOutput =
			"  // Field descriptor #6 LO1$O2$O3$Nested;\n" + 
			"  // Signature: LO1$O2<LS;LT;>.O3.Nested<LU;LV;>;\n" + 
			"  O1$O2$O3$Nested f;\n" + 
			"    RuntimeInvisibleTypeAnnotations: \n" + 
			"      #10 @H(\n" + 
			"        target type = 0x13 FIELD\n" + 
			"      )\n" + 
			"      #11 @E(\n" + 
			"        target type = 0x13 FIELD\n" + 
			"        location = [INNER_TYPE]\n" + 
			"      )\n" + 
			"      #12 @D(\n" + 
			"        target type = 0x13 FIELD\n" + 
			"        location = [INNER_TYPE, INNER_TYPE]\n" + 
			"      )\n" + 
			"      #13 @A(\n" + 
			"        target type = 0x13 FIELD\n" + 
			"        location = [INNER_TYPE, INNER_TYPE, INNER_TYPE]\n" + 
			"      )\n" + 
			"      #14 @F(\n" + 
			"        target type = 0x13 FIELD\n" + 
			"        location = [INNER_TYPE, TYPE_ARGUMENT(0)]\n" + 
			"      )\n" + 
			"      #15 @G(\n" + 
			"        target type = 0x13 FIELD\n" + 
			"        location = [INNER_TYPE, TYPE_ARGUMENT(1)]\n" + 
			"      )\n" + 
			"      #16 @B(\n" + 
			"        target type = 0x13 FIELD\n" + 
			"        location = [INNER_TYPE, INNER_TYPE, INNER_TYPE, TYPE_ARGUMENT(0)]\n" + 
			"      )\n" + 
			"      #17 @C(\n" + 
			"        target type = 0x13 FIELD\n" + 
			"        location = [INNER_TYPE, INNER_TYPE, INNER_TYPE, TYPE_ARGUMENT(1)]\n" + 
			"      )\n" + 
			"  \n";
		checkDisassembledClassFile(OUTPUT_DIR + File.separator + "X.class", "Z", expectedOutput, ClassFileBytesDisassembler.SYSTEM);
	}

