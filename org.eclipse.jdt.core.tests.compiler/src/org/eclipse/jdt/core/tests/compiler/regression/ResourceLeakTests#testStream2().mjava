// Functions java.nio.file.Files.x() returning *Stream* do produce a resource needing closing
public void testStream2() {
	if (this.complianceLevel < ClassFileConstants.JDK1_8)
		return; // uses JRE 8 API
	Map options = getCompilerOptions();
	options.put(CompilerOptions.OPTION_ReportPotentiallyUnclosedCloseable, CompilerOptions.ERROR);
	options.put(CompilerOptions.OPTION_ReportUnclosedCloseable, CompilerOptions.ERROR);
	runLeakTest(
		new String[] {
			"A.java",
			"import java.util.stream.Stream;\n" + 
			"import java.nio.file.*;\n" + 
			"class A {\n" + 
			"  long test(Path start, FileVisitOption... options) throws java.io.IOException {\n" + 
			"    Stream<Path> stream = Files.walk(start, options);\n" + 
			"    return stream.count();\n" + 
			"  }\n" + 
			"}"
		},
		"----------\n" + 
		"1. ERROR in A.java (at line 5)\n" + 
		"	Stream<Path> stream = Files.walk(start, options);\n" + 
		"	             ^^^^^^\n" + 
		"Resource leak: \'stream\' is never closed\n" + 
		"----------\n",
		options
		);
}

