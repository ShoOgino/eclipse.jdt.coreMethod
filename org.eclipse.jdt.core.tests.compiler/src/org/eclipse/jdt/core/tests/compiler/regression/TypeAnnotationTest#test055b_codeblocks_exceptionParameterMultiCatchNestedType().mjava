	public void test055b_codeblocks_exceptionParameterMultiCatchNestedType() throws Exception {
 		this.runConformTest(
 			new String[] {
 				"X.java",
 				"public class X {\n" +
				"	public static void main(String[] args) {\n" +
				"		try {\n" +
				"         foo();\n" +
				"		} catch(@B(1) Outer.@B(2) MyException | @B(3) Outer2.@B(4) MyException2 e) {\n" +
				"			e.printStackTrace();\n" +
				"		}\n" +
 				"	}\n" +
				"   static void foo() throws Outer.MyException, Outer2.MyException2 {}\n" +
				"}\n" +
				"class Outer {\n" +
				"	class MyException extends Exception {\n" +
				"		private static final long serialVersionUID = 1L;\n" +
				"	}\n" +
				"}\n" +
				"class Outer2 {\n" +
				"	class MyException2 extends Exception {\n" +
				"		private static final long serialVersionUID = 1L;\n" +
				"	}\n" +
 				"}",
 				"B.java",
 				"import java.lang.annotation.*;\n" +
 				"@Target(ElementType.TYPE_USE)\n" +
 				"@Retention(RetentionPolicy.RUNTIME)\n" +
 				"@interface B {\n" +
				"	int value() default 0;\n" +
				"}\n",
 		},
 		"");
 		String expectedOutput =
 			"    RuntimeVisibleTypeAnnotations: \n" +
			"      #34 @B(\n" +
			"        #35 value=(int) 1 (constant type)\n" +
			"        target type = 0x42 EXCEPTION_PARAMETER\n" +
			"        exception table index = 0\n" +
			"      )\n" +
			"      #34 @B(\n" +
			"        #35 value=(int) 2 (constant type)\n" +
			"        target type = 0x42 EXCEPTION_PARAMETER\n" +
			"        exception table index = 0\n" +
			"        location = [INNER_TYPE]\n" +
			"      )\n" +
			"      #34 @B(\n" +
			"        #35 value=(int) 3 (constant type)\n" +
			"        target type = 0x42 EXCEPTION_PARAMETER\n" +
			"        exception table index = 1\n" +
			"      )\n" +
			"      #34 @B(\n" +
			"        #35 value=(int) 4 (constant type)\n" +
			"        target type = 0x42 EXCEPTION_PARAMETER\n" +
			"        exception table index = 1\n" +
			"        location = [INNER_TYPE]\n" +
 			"      )\n";
 		checkDisassembledClassFile(OUTPUT_DIR + File.separator + "X.class", "X", expectedOutput, ClassFileBytesDisassembler.SYSTEM);
 	}

