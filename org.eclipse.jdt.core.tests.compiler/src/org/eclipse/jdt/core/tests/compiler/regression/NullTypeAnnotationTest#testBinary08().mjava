	// storing and decoding null-type-annotations to/from classfile: details
	public void testBinary08() {
		Map customOptions = getCompilerOptions();
		customOptions.put(JavaCore.COMPILER_PB_POTENTIAL_NULL_REFERENCE, JavaCore.ERROR);
		customOptions.put(JavaCore.COMPILER_PB_MISSING_SERIAL_VERSION, JavaCore.IGNORE);
		runConformTestWithLibs(
				new String[] {
					"p/X1.java",
					"package p;\n" +
					"import java.util.*;\n" +
					"import org.eclipse.jdt.annotation.*;\n" +
					"public abstract class X1 {\n" +
					"    public class Inner {}\n" +
					"    public Object []@NonNull[] arrays(Object @NonNull[][] oa1) { return null; }\n" +
					"    public void nesting(@NonNull Inner i1, X1.@Nullable Inner i2) { }\n" +
					"    public void wildcard1(List<@Nullable ? extends @NonNull X1> l) { }\n" + // contradiction
					"    public void wildcard2(List<? super @NonNull X1> l) { }\n" +
					"}\n"
				},
				customOptions,
				"");
// FIXME(stephan): add desired error messages:
		runNegativeTestWithLibs(
				new String[] {
					"Y1.java",
					"import p.X1;\n" +
					"import org.eclipse.jdt.annotation.*;\n" +
//					"import java.util.*;\n" +
					"public class Y1 {\n" +
					"	void test(X1 x) {\n" +
					"		Object @NonNull[][] a = new Object[0][];\n" + // unsafe
					"		x.arrays(a)[0] = null;\n" + // illegal
					"		x.nesting(null, null);\n" + // 1st null is illegal
//					"		x.wildcard2(new ArrayList<@NonNull Object>());\n" +
					"	}\n" +
					"}\n"
				}, 
				customOptions,
				"----------\n" + 
//				"1. ERROR in Y1.java (at line 5)\n" + 
//				"	X1<@Nullable String> maybeStrings;\n" + 
//				"	   ^^^^^^^^^^^^^^^^\n" + 
//				"Incompatible type argument ...\n" + 
//				"----------\n" + 
				"1. WARNING in Y1.java (at line 5)\n" + 
				"	Object @NonNull[][] a = new Object[0][];\n" + 
				"	                        ^^^^^^^^^^^^^^^\n" + 
				"Null type safety (type annotations): The expression of type \'Object[][]\' needs unchecked conversion to conform to \'Object @NonNull[] []\'\n" + 
				"----------\n" + 
				"2. ERROR in Y1.java (at line 6)\n" + 
				"	x.arrays(a)[0] = null;\n" + 
				"	^^^^^^^^^^^^^^\n" + 
				"Null type mismatch: required \'Object @NonNull[]\' but the provided value is null\n" +
				"----------\n" + 
				"3. ERROR in Y1.java (at line 7)\n" + 
				"	x.nesting(null, null);\n" + 
				"	          ^^^^\n" + 
				"Null type mismatch: required \'X1.@NonNull Inner\' but the provided value is null\n" + 
				"----------\n");
	}

