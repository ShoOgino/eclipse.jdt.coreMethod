// assorted tests with lower-bounded wildcards with null annotations
public void testTypeBounds2() {
	runNegativeTestWithLibs(
		new String[] {
			"C.java",
			"import java.util.List;\n" +
			"\n" +
			"import org.eclipse.jdt.annotation.NonNull;\n" +
			"import org.eclipse.jdt.annotation.Nullable;\n" +
			"\n" +
			"class A { }\n" +
			"class B extends A {}\n" +
			"public class C {\n" +
			"	\n" +
			"	@NonNull Object testSuper(List<@Nullable A> la1, List<@NonNull A> la2, boolean f) {\n" +
			"		List<? super @NonNull B> lb1 = la1; // OK\n" +
			"		lb1.add(null); // ERR1\n" +
			"		if (lb1.size() > 0)\n" +
			"			return lb1.get(0); // ERR2\n" +
			"		lb1 = la2; // OK\n" +
			"		List<? super @Nullable B> lb2 = la1;\n" +
			"		lb2.add(null);\n" +
			"		if (lb2.size() > 0)\n" +
			"			return lb2.get(0); // ERR3\n" +
			"		lb2 = la2; // ERR4\n" +
			"		if (f)\n" +
			"			return mSuper1(la1); // ERR5\n" +
			"		return mSuper2(la1); // ERR6 on arg\n" +
			"	}\n" +
			"	<T extends @Nullable A> T mSuper1(List<T> t) { return null; /*ERR7*/ }\n" +
			"	<T extends @NonNull A> T mSuper2(List<T> t) { return null; /*ERR8*/ }\n" +
			"}\n"
		},
		getCompilerOptions(),
		"----------\n" +
		"1. ERROR in C.java (at line 12)\n" +
		"	lb1.add(null); // ERR1\n" +
		"	        ^^^^\n" +
		"Null type mismatch: required \'? super @NonNull B\' but the provided value is null\n" +
		"----------\n" +
		"2. ERROR in C.java (at line 14)\n" +
		"	return lb1.get(0); // ERR2\n" +
		"	       ^^^^^^^^^^\n" +
		"Null type mismatch (type annotations): required \'@NonNull Object\' but this expression has type \'capture#of ? super @NonNull B\'\n" +
		"----------\n" +
		"3. ERROR in C.java (at line 19)\n" +
		"	return lb2.get(0); // ERR3\n" +
		"	       ^^^^^^^^^^\n" +
		"Null type mismatch (type annotations): required \'@NonNull Object\' but this expression has type \'capture#of ? super @Nullable B\'\n" +
		"----------\n" +
		"4. ERROR in C.java (at line 20)\n" +
		"	lb2 = la2; // ERR4\n" +
		"	      ^^^\n" +
		"Null type mismatch (type annotations): required \'List<? super @Nullable B>\' but this expression has type \'List<@NonNull A>\'\n" +
		"----------\n" +
		"5. ERROR in C.java (at line 22)\n" +
		"	return mSuper1(la1); // ERR5\n" +
		"	       ^^^^^^^^^^^^\n" +
		"Null type mismatch (type annotations): required \'@NonNull Object\' but this expression has type \'@Nullable A\'\n" +
		"----------\n" +
		"6. ERROR in C.java (at line 23)\n" +
		"	return mSuper2(la1); // ERR6 on arg\n" +
		"	               ^^^\n" +
		"Null type mismatch (type annotations): required \'List<@NonNull A>\' but this expression has type \'List<@Nullable A>\'\n" +
		"----------\n" +
		"7. ERROR in C.java (at line 25)\n" +
		"	<T extends @Nullable A> T mSuper1(List<T> t) { return null; /*ERR7*/ }\n" +
		"	                                                      ^^^^\n" +
		"Null type mismatch: required \'T extends @Nullable A\' but the provided value is null\n" +
		"----------\n" +
		"8. ERROR in C.java (at line 26)\n" +
		"	<T extends @NonNull A> T mSuper2(List<T> t) { return null; /*ERR8*/ }\n" +
		"	                                                     ^^^^\n" +
		"Null type mismatch: required \'T extends @NonNull A\' but the provided value is null\n" +
		"----------\n"
	);
}

