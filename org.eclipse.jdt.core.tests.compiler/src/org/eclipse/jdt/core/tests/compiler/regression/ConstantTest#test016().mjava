//https://bugs.eclipse.org/bugs/show_bug.cgi?id=110182 - variation
public void test016() {
	if(this.complianceLevel.compareTo(COMPLIANCE_1_5) > 0) return;
	this.runConformTest(
		new String[] {
			"X.java",
			"public class X {\n" + 
			"	X fx;\n" + 
			"	final static boolean DBG = false;\n" + 
			"	void foo1(X x) {\n" + 
			"		boolean b;\n" + 
			"		if (false ? false : x.DBG) {\n" + 
			"			boolean bb = x.DBG;\n" + 
			"		}\n" + 
			"	}\n" + 
			"	void foo2(X x) {\n" + 
			"		boolean b;\n" + 
			"		while (x == null ? x.DBG : x.DBG) {\n" + 
			"			boolean bb = x.DBG;\n" + 
			"		}\n" + 
			"	}\n" + 
			"	void foo3(X x) {\n" + 
			"		boolean b;\n" + 
			"		for (;x == null ? x.DBG : x.DBG;) {\n" + 
			"			boolean bb = x.DBG;\n" + 
			"		}\n" + 
			"	}\n" + 
			"	void foo4(X x) {\n" + 
			"		boolean bb = (x == null ? x.DBG :  x.DBG) ? x == null : x.DBG;\n" + 
			"	}\n" + 
			"}\n",
		},
		"");
	// ensure boolean codegen got optimized (optimizedBooleanConstant)
	String expectedOutput =
		"  // Method descriptor #20 (LX;)V\n" + 
		"  // Stack: 0, Locals: 2\n" + 
		"  void foo1(X x);\n" + 
		"    0  return\n" + 
		"      Line numbers:\n" + 
		"        [pc: 0, line: 9]\n" + 
		"      Local variable table:\n" + 
		"        [pc: 0, pc: 1] local: this index: 0 type: X\n" + 
		"        [pc: 0, pc: 1] local: x index: 1 type: X\n" + 
		"  \n" + 
		"  // Method descriptor #20 (LX;)V\n" + 
		"  // Stack: 1, Locals: 2\n" + 
		"  void foo2(X x);\n" + 
		"    0  aload_1 [x]\n" + 
		"    1  ifnonnull 4\n" + 
		"    4  return\n" + 
		"      Line numbers:\n" + 
		"        [pc: 0, line: 12]\n" + 
		"        [pc: 4, line: 15]\n" + 
		"      Local variable table:\n" + 
		"        [pc: 0, pc: 5] local: this index: 0 type: X\n" + 
		"        [pc: 0, pc: 5] local: x index: 1 type: X\n" + 
		"  \n" + 
		"  // Method descriptor #20 (LX;)V\n" + 
		"  // Stack: 1, Locals: 2\n" + 
		"  void foo3(X x);\n" + 
		"    0  aload_1 [x]\n" + 
		"    1  ifnonnull 4\n" + 
		"    4  return\n" + 
		"      Line numbers:\n" + 
		"        [pc: 0, line: 18]\n" + 
		"        [pc: 4, line: 21]\n" + 
		"      Local variable table:\n" + 
		"        [pc: 0, pc: 5] local: this index: 0 type: X\n" + 
		"        [pc: 0, pc: 5] local: x index: 1 type: X\n" + 
		"  \n" + 
		"  // Method descriptor #20 (LX;)V\n" + 
		"  // Stack: 1, Locals: 3\n" + 
		"  void foo4(X x);\n" + 
		"    0  aload_1 [x]\n" + 
		"    1  ifnonnull 4\n" + 
		"    4  iconst_0\n" + 
		"    5  istore_2 [bb]\n" + 
		"    6  return\n" + 
		"      Line numbers:\n" + 
		"        [pc: 0, line: 23]\n" + 
		"        [pc: 6, line: 24]\n" + 
		"      Local variable table:\n" + 
		"        [pc: 0, pc: 7] local: this index: 0 type: X\n" + 
		"        [pc: 0, pc: 7] local: x index: 1 type: X\n" + 
		"        [pc: 6, pc: 7] local: bb index: 2 type: boolean\n";
	
	try {
		File f = new File(OUTPUT_DIR + File.separator + "X.class");
		byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
		ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
		String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
		int index = result.indexOf(expectedOutput);
		if (index == -1 || expectedOutput.length() == 0) {
			System.out.println(Util.displayString(result, 3));
		}
		if (index == -1) {
			assertEquals("Wrong contents", expectedOutput, result);
		}
	} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
		assertTrue(false);
	} catch (IOException e) {
		assertTrue(false);
	}		
}

