public void testBug425142_minimal() {
	runNegativeTest(
		new String[] {
			"SomethingBreaks.java",
			"import java.io.IOException;\n" +
			"import java.nio.file.Files;\n" +
			"import java.nio.file.Paths;\n" +
			"import java.util.function.Consumer;\n" +
			"\n" +
			"@FunctionalInterface interface Use<T, E extends Throwable> {   void accept(T t) throws E; }\n" +
			"\n" +
			"@SuppressWarnings(\"unused\") public class SomethingBreaks<T, E extends Throwable> {\n" +
			"  protected static SomethingBreaks<String, IOException> stream() {     return null;  }\n" +
			"\n" +
			"  public void forEach(Consumer<T> use) throws E {}\n" +
			"\n" +
			"  public <E2 extends E> void forEach(Use<T, E2> use) throws E, E2 {}\n" +
			"\n" +
			"  private static void methodReference(String s) throws IOException {\n" +
			"    System.out.println(Files.size(Paths.get(s)));\n" +
			"  }\n" +
			"  \n" +
			"  public static void useCase9() throws IOException {\n" +
			"    stream().forEach((String s) -> System.out.println(Files.size(Paths.get(s))));\n" +
			"  }\n" +
			"}\n"
		},
		"----------\n" +
		"1. ERROR in SomethingBreaks.java (at line 20)\n" +
		"	stream().forEach((String s) -> System.out.println(Files.size(Paths.get(s))));\n" +
		"	         ^^^^^^^\n" +
		"The method forEach(Consumer<String>) is ambiguous for the type SomethingBreaks<String,IOException>\n" +
		"----------\n");
}

