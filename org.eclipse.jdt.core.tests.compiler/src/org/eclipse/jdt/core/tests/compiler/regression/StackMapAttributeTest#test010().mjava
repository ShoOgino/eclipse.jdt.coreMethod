	public void test010() throws Exception {
		this.runConformTest(
				new String[] {
					"X.java",
					"public class X {\n" + 
					"	public static void main(String[] args) {\n" + 
					"		int[] tab = new int[0];\n" + 
					"		Object o = tab;\n" + 
					"		Object o1 = null;\n" + 
					"		if (tab.length == 0) {\n" + 
					"			System.out.println(tab.getClass());\n" + 
					"		}\n" + 
					"		o1 = tab.clone();\n" + 
					"	}\n" + 
					"}",
				},
				"class [I");
				
			ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
			byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +"X.class"));
			String actualOutput =
				disassembler.disassemble(
					classFileBytes,
					"\n",
					ClassFileBytesDisassembler.DETAILED); 
			
			String expectedOutput = 
				"  // Method descriptor #15 ([Ljava/lang/String;)V\n" + 
				"  // Stack: 2, Locals: 4\n" + 
				"  public static void main(java.lang.String[] args);\n" + 
				"     0  iconst_0\n" + 
				"     1  newarray int [10]\n" + 
				"     3  astore_1 [tab]\n" + 
				"     4  aload_1 [tab]\n" + 
				"     5  astore_2 [o]\n" + 
				"     6  aconst_null\n" + 
				"     7  astore_3 [o1]\n" + 
				"     8  aload_1 [tab]\n" + 
				"     9  arraylength\n" + 
				"    10  ifne 23\n" + 
				"    13  getstatic java.lang.System.out : java.io.PrintStream [16]\n" + 
				"    16  aload_1 [tab]\n" + 
				"    17  invokevirtual java.lang.Object.getClass() : java.lang.Class [22]\n" + 
				"    20  invokevirtual java.io.PrintStream.println(java.lang.Object) : void [26]\n" + 
				"    23  aload_1 [tab]\n" + 
				"    24  invokevirtual int[].clone() : java.lang.Object [32]\n" + 
				"    27  astore_3 [o1]\n" + 
				"    28  return\n" + 
				"      Line numbers:\n" + 
				"        [pc: 0, line: 3]\n" + 
				"        [pc: 4, line: 4]\n" + 
				"        [pc: 6, line: 5]\n" + 
				"        [pc: 8, line: 6]\n" + 
				"        [pc: 13, line: 7]\n" + 
				"        [pc: 23, line: 9]\n" + 
				"        [pc: 28, line: 10]\n" + 
				"      Local variable table:\n" + 
				"        [pc: 0, pc: 29] local: args index: 0 type: java.lang.String[]\n" + 
				"        [pc: 4, pc: 29] local: tab index: 1 type: int[]\n" + 
				"        [pc: 6, pc: 29] local: o index: 2 type: java.lang.Object\n" + 
				"        [pc: 8, pc: 29] local: o1 index: 3 type: java.lang.Object\n" + 
				"      Stack map table: number of frames 1\n" + 
				"        [pc: 23, append: {int[], java.lang.Object, java.lang.Object}]\n";
			
			int index = actualOutput.indexOf(expectedOutput);
			if (index == -1 || expectedOutput.length() == 0) {
				System.out.println(Util.displayString(actualOutput, 2));
			}
			if (index == -1) {
				assertEquals("Wrong contents", expectedOutput, actualOutput);
			}
	}

