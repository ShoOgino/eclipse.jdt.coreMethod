public void testBug542707_1() {
	if (!checkPreviewAllowed()) return; // switch expression
	// switch expression has a functional type with interesting type inference and various null issues:
	Runner runner = new Runner();
	runner.customOptions = getCompilerOptions();
	runner.customOptions.put(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);
	runner.customOptions.put(JavaCore.COMPILER_PB_REPORT_PREVIEW_FEATURES, JavaCore.IGNORE);
	runner.classLibraries = this.LIBS;
	runner.testFiles = new String[] {
		"X.java",
		"import org.eclipse.jdt.annotation.*;\n" +
		"import java.util.function.*;\n" +
		"interface IN0 {}\n" + 
		"interface IN1 extends IN0 {}\n" + 
		"interface IN2 extends IN0 {}\n" +
		"public class X {\n" +
		"	@NonNull IN1 n1() { return new IN1() {}; }\n" + 
		"	IN2 n2() { return null; }\n" + 
		"	<M> void m(@NonNull Supplier<@NonNull M> m2) { }\n" + 
		"	void testSw(int i) {\n" + 
		"		m(switch(i) {\n" + 
		"			case 1 -> this::n1;\n" + 
		"			case 2 -> () -> n1();\n" + 
		"			case 3 -> null;\n" + 
		"			case 4 -> () -> n2();\n" + 
		"			default -> this::n2; });\n" + 
		"	}\n" +
		"}\n"
	};
	runner.expectedCompilerLog =
			"----------\n" + 
			"1. ERROR in X.java (at line 14)\n" + 
			"	case 3 -> null;\n" + 
			"	          ^^^^\n" + 
			"Null type mismatch: required \'@NonNull Supplier<@NonNull IN0>\' but the provided value is null\n" + 
			"----------\n" + 
			"2. WARNING in X.java (at line 15)\n" + 
			"	case 4 -> () -> n2();\n" + 
			"	                ^^^^\n" + 
			"Null type safety (type annotations): The expression of type \'IN2\' needs unchecked conversion to conform to \'@NonNull IN0\'\n" + 
			"----------\n" + 
			"3. WARNING in X.java (at line 16)\n" + 
			"	default -> this::n2; });\n" + 
			"	           ^^^^^^^^\n" + 
			"Null type safety at method return type: Method descriptor Supplier<IN0>.get() promises \'@NonNull IN0\' but referenced method provides \'IN2\'\n" + 
			"----------\n";
	runner.runNegativeTest();
}

