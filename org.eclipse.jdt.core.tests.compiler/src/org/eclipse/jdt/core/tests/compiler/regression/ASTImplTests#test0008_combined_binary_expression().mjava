// AST implementation - visiting binary expressions
// https://bugs.eclipse.org/bugs/show_bug.cgi?id=102728
// Adding combined binary expressions - case of one-deep expression
public void test0008_combined_binary_expression() {
	runConformTest(
		"X.java", 
		"public class X {\n" + 
		"  void foo() {\n" + 
		"    String s1 = \"s1\";\n" + 
		"    String s2 = \"s2\";\n" + 
		"    System.out.println(s1 + \"l1\" + s2 + \"l2\");\n" + 
		"    System.out.println(s1 + s2);\n" + 
		"  }\n" + 
		"}\n",
		defaultParser,		
		new ASTBinaryExpressionCollector() {
			public void endVisit(BinaryExpression binaryExpression, BlockScope scope) {
				if (binaryExpression instanceof CombinedBinaryExpression) {
					this.collector.append("[ev CBE " + 
						cut(binaryExpression.toString()) + "]\n");
				} else {
					super.endVisit(binaryExpression, scope);
				}
			}
		},
		"[v SL \"s1\"]\n" + 
		"[ev SL \"s1\"]\n" + 
		"[v SL \"s2\"]\n" + 
		"[ev SL \"s2\"]\n" + 
		"[v BE (((s1 + \"l1\") + s2) + \"l2\")]\n" + 
		"[v BE ((s1 + \"l1\") + s2)]\n" + 
		"[v BE (s1 + \"l1\")]\n" + 
		"[v SNR s1]\n" + 
		"[ev SNR s1]\n" + 
		"[v SL \"l1\"]\n" + 
		"[ev SL \"l1\"]\n" + 
		"[ev BE (s1 + \"l1\")]\n" + 
		"[v SNR s2]\n" + 
		"[ev SNR s2]\n" + 
		"[ev BE ((s1 + \"l1\") + s2)]\n" + 
		"[v SL \"l2\"]\n" + 
		"[ev SL \"l2\"]\n" + 
		"[ev CBE (((s1 + \"l1\") + s2) + \"l2\")]\n" + 
		"[v BE (s1 + s2)]\n" + 
		"[v SNR s1]\n" + 
		"[ev SNR s1]\n" + 
		"[v SNR s2]\n" + 
		"[ev SNR s2]\n" + 
		"[ev BE (s1 + s2)]\n");
}

