	public void test014() {
		this.runConformTest(
			new String[] {
				"X.java",
				"public class X {\n" + 
				"	void a(G x) { System.out.print(1); }\n" + 
				"	void b(F x) { System.out.print(2); }\n" + 
				"	public static void main(String[] args) {\n" + 
				"		H<C> h = null;\n" +
				"		G<C> g = null;\n" +
				"		new X().a(h);\n" +
				"		new X().a(g);\n" +
				"		new X().b(h);\n" +
				"		new X().b(g);\n" +
				"	}\n" + 
				"}\n" +
				"class A {}\n" + 
				"class B extends A {}\n" +
				"class C extends B {}\n" +
				"class F<T1> {} \n" + 
				"class G<T2> extends F<T2> {}\n" +
				"class H<T3> extends G<T3> {}"
			},
			"1122"
		);
		this.runConformTest(
			new String[] {
				"X.java",
				"public class X {\n" + 
				"	void a(G<C> x) { System.out.print(1); }\n" + 
				"	void b(F<C> x) { System.out.print(2); }\n" + 
				"	public static void main(String[] args) {\n" + 
				"		H h = null;\n" +
				"		G g = null;\n" +
				"		new X().a(h);\n" +
				"		new X().a(g);\n" +
				"		new X().b(h);\n" +
				"		new X().b(g);\n" +
				"	}\n" + 
				"}\n" +
				"class A {}\n" + 
				"class B extends A {}\n" +
				"class C extends B {}\n" +
				"class F<T1> {} \n" + 
				"class G<T2> extends F<T2> {}\n" +
				"class H<T3> extends G<T3> {}"
			},
			"1122"
		);
		this.runConformTest(
			new String[] {
				"X0.java",
				"public class X0 {\n" + 
				"	void two(G x) { System.out.print(1); }\n" + 
				"	void two(F<A> x) { System.out.print(2); }\n" + 
				"	void three(G x) { System.out.print(3); }\n" + 
				"	void three(F<B> x) { System.out.print(4); }\n" + 
				"	public static void main(String[] args) {\n" + 
				"		H<C> h = null;\n" +
				"		new X0().two(h);\n" +
				"		new X0().three(h);\n" +
				"	}\n" + 
				"}\n" +
				"class A {}\n" + 
				"class B extends A {}\n" +
				"class C extends B {}\n" +
				"class F<T1> {} \n" + 
				"class G<T2> extends F<T2> {}\n" +
				"class H<T3> extends G<T3> {}"
			},
			"13"
		);
		this.runNegativeTest(
			new String[] {
				"X.java",
				"public class X {\n" + 
				"	void a(G x) {}\n" + 
				"	void a(F<C> x) {}\n" + 
				"	void b(G<C> x) {}\n" + 
				"	void b(F x) {}\n" + 
				"	public static void main(String[] args) {\n" + 
				"		H<C> h = null;\n" +
				"		new X().a(h);\n" +
				"		new X().b(h);\n" +
				"	}\n" + 
				"}\n" +
				"class A {}\n" + 
				"class B extends A {}\n" +
				"class C extends B {}\n" +
				"class F<T1> {} \n" + 
				"class G<T2> extends F<T2> {}\n" +
				"class H<T3> extends G<T3> {}"
			},
			"----------\n" + 
			"1. WARNING in X.java (at line 2)\r\n" + 
			"	void a(G x) {}\r\n" + 
			"	       ^\n" + 
			"G is a raw type. References to generic type G<T2> should be parameterized\n" + 
			"----------\n" + 
			"2. WARNING in X.java (at line 5)\r\n" + 
			"	void b(F x) {}\r\n" + 
			"	       ^\n" + 
			"F is a raw type. References to generic type F<T1> should be parameterized\n" + 
			"----------\n" + 
			"3. ERROR in X.java (at line 8)\r\n" + 
			"	new X().a(h);\r\n" + 
			"	        ^\n" + 
			"The method a(G) is ambiguous for the type X\n" + 
			"----------\n"
			// reference to a is ambiguous, both method a(G) in X and method a(F<C>) in X match
		);
		this.runNegativeTest(
			new String[] {
				"X.java",
				"public class X {\n" + 
				"	void one(G<B> x) {}\n" + 
				"	void one(F<B> x) {}\n" + 
				"	public static void main(String[] args) {\n" + 
				"		H<C> h = null;\n" +
				"		new X().one(h);\n" + // no match
				"	}\n" + 
				"}\n" +
				"class A {}\n" + 
				"class B extends A {}\n" +
				"class C extends B {}\n" +
				"class F<T1> {} \n" + 
				"class G<T2> extends F<T2> {}\n" +
				"class H<T3> extends G<T3> {}"
			},
			"----------\n" + 
			"1. ERROR in X.java (at line 6)\r\n" + 
			"	new X().one(h);\r\n" + 
			"	        ^^^\n" + 
			"The method one(G<B>) in the type X is not applicable for the arguments (H<C>)\n" + 
			"----------\n"
		);
		this.runConformTest(
			new String[] {
				"X1.java",
				"public class X1 {\n" + 
				"	void two(G<C> x) { System.out.print(1); }\n" + 
				"	void two(F<B> x) { System.out.print(2); }\n" + 
				"	void three(G<B> x) { System.out.print(3); }\n" + 
				"	void three(F<C> x) { System.out.print(4); }\n" + 
				"	void four(G<C> x) { System.out.print(5); }\n" + 
				"	void four(F<C> x) { System.out.print(6); }\n" + 
				"	public static void main(String[] args) {\n" + 
				"		H<C> h = null;\n" +
				"		new X1().two(h);\n" +
				"		new X1().three(h);\n" +
				"		new X1().four(h);\n" +
				"	}\n" + 
				"}\n" +
				"class A {}\n" + 
				"class B extends A {}\n" +
				"class C extends B {}\n" +
				"class F<T1> {} \n" + 
				"class G<T2> extends F<T2> {}\n" +
				"class H<T3> extends G<T3> {}"
			},
			"145"
		);
		this.runNegativeTest(
			new String[] {
				"X.java",
				"public class X {\n" + 
				"	<E1, E2 extends B> void three(G<E2> x) {}\n" + 
				"	<E3 extends C> void three(F<E3> x) {}\n" + 
				"	public static void main(String[] args) {\n" + 
				"		H<C> h = null;\n" +
				"		new X().three(h);\n" +
				"	}\n" + 
				"}\n" +
				"class A {}\n" + 
				"class B extends A {}\n" +
				"class C extends B {}\n" +
				"class F<T1> {} \n" + 
				"class G<T2> extends F<T2> {}\n" +
				"class H<T3> extends G<T3> {}"
			},
			"----------\n" + 
			"1. ERROR in X.java (at line 6)\r\n" + 
			"	new X().three(h);\r\n" + 
			"	        ^^^^^\n" + 
			"The method three(G<C>) is ambiguous for the type X\n" + 
			"----------\n"
		);
		this.runConformTest(
			new String[] {
				"X3.java",
				"public class X3 {\n" + 
				"	<E1, E2 extends B> void one(G<E2> x) { System.out.print(1); }\n" + 
				"	<E3 extends B> void one(F<E3> x) { System.out.print(2); }\n" + 
				"	<E1, E2 extends C> void two(G<E2> x) { System.out.print(3); }\n" + 
				"	<E3 extends B> void two(F<E3> x) { System.out.print(4); }\n" + 
				"	<E1, E2 extends C> void four(G<E2> x) { System.out.print(5); }\n" + 
				"	<E3 extends C> void four(F<E3> x) { System.out.print(6); }\n" + 
				"	public static void main(String[] args) {\n" + 
				"		H<C> h = null;\n" +
				"		new X3().one(h);\n" +
				"		new X3().two(h);\n" +
				"		new X3().four(h);\n" +
				"	}\n" + 
				"}\n" +
				"class A {}\n" + 
				"class B extends A {}\n" +
				"class C extends B {}\n" +
				"class F<T1> {} \n" + 
				"class G<T2> extends F<T2> {}\n" +
				"class H<T3> extends G<T3> {}"
			},
			"135"
		);
	}

