	/**
	 * Test fix for bug 83127: [1.5][javadoc][dom] Wrong / strange bindings for references in javadoc to methods with type variables as parameter types
	 * @see "http://bugs.eclipse.org/bugs/show_bug.cgi?id=83127"
	 */
	public void testBug83127a() {
		reportMissingJavadocTags = CompilerOptions.IGNORE;
		runNegativeTest(
			new String[] {
				"Test.java",
				"/** \n" + 
				" * @see Test#add(T) \n" + 
				" * @see #add(T)\n" + 
				" * @see Test#Test(T)\n" + 
				" * @see #Test(T)\n" + 
				" *   - warning = \"The method add(Object) in the type Test is not applicable for\n" + 
				" *                the arguments (T)\"\n" + 
				" *   - method binding = Test.add(Object)\n" + 
				" *   - parameter binding = T of A\n" + 
				" */\n" + 
				"public class Test<T> {\n" + 
				"	Test(T t) {}\n" + 
				"    public boolean add(T t) {\n" + 
				"        return true;\n" + 
				"    }\n" + 
				"}\n" + 
				"\n" + 
				"class Sub<E extends Number> extends Test<E> {\n" + 
				"	Sub (E e) {super(null);}\n" + 
				"    public boolean add(E e) {\n" + 
				"        if (e.doubleValue() > 0)\n" + 
				"            return false;\n" + 
				"        return super.add(e);\n" + 
				"    }\n" + 
				"}\n"
			},
			"----------\n" + 
			"1. ERROR in Test.java (at line 2)\n" + 
			"	* @see Test#add(T) \n" + 
			"	                ^\n" + 
			"Javadoc: T cannot be resolved to a type\n" + 
			"----------\n" + 
			"2. ERROR in Test.java (at line 3)\n" + 
			"	* @see #add(T)\n" + 
			"	            ^\n" + 
			"Javadoc: T cannot be resolved to a type\n" + 
			"----------\n" + 
			"3. ERROR in Test.java (at line 4)\n" + 
			"	* @see Test#Test(T)\n" + 
			"	                 ^\n" + 
			"Javadoc: T cannot be resolved to a type\n" + 
			"----------\n" + 
			"4. ERROR in Test.java (at line 5)\n" + 
			"	* @see #Test(T)\n" + 
			"	             ^\n" + 
			"Javadoc: T cannot be resolved to a type\n" + 
			"----------\n" + 
			"5. ERROR in Test.java (at line 11)\n" + 
			"	public class Test<T> {\n" + 
			"	                  ^\n" + 
			"Syntax error, type parameters are only available if source level is 1.5\n" + 
			"----------\n" + 
			"6. ERROR in Test.java (at line 12)\n" + 
			"	Test(T t) {}\n" + 
			"	     ^\n" + 
			"T cannot be resolved to a type\n" + 
			"----------\n" + 
			"7. ERROR in Test.java (at line 13)\n" + 
			"	public boolean add(T t) {\n" + 
			"	                   ^\n" + 
			"T cannot be resolved to a type\n" + 
			"----------\n" + 
			"8. ERROR in Test.java (at line 18)\n" + 
			"	class Sub<E extends Number> extends Test<E> {\n" + 
			"	          ^^^^^^^^^^^^^^^^\n" + 
			"Syntax error, type parameters are only available if source level is 1.5\n" + 
			"----------\n" + 
			"9. ERROR in Test.java (at line 18)\n" + 
			"	class Sub<E extends Number> extends Test<E> {\n" + 
			"	                                         ^\n" + 
			"Syntax error, parameterized types are only available if source level is 1.5\n" + 
			"----------\n" + 
			"10. ERROR in Test.java (at line 18)\n" + 
			"	class Sub<E extends Number> extends Test<E> {\n" + 
			"	                                         ^\n" + 
			"E cannot be resolved to a type\n" + 
			"----------\n" + 
			"11. ERROR in Test.java (at line 19)\n" + 
			"	Sub (E e) {super(null);}\n" + 
			"	     ^\n" + 
			"E cannot be resolved to a type\n" + 
			"----------\n" + 
			"12. ERROR in Test.java (at line 19)\n" + 
			"	Sub (E e) {super(null);}\n" + 
			"	           ^^^^^^^^^^^^\n" + 
			"The constructor Test(T) refers to the missing type T\n" + 
			"----------\n" + 
			"13. ERROR in Test.java (at line 20)\n" + 
			"	public boolean add(E e) {\n" + 
			"	                   ^\n" + 
			"E cannot be resolved to a type\n" + 
			"----------\n");
	}

