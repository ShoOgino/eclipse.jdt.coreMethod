	public void test001() throws Exception {
		this.runConformTest(
				new String[] {
					"X.java",
					"public class X {\n" + 
					"	X() {}\n" + 
					"	X(double i) {\n" + 
					"		this(i > 0 ? null : new Object());\n" + 
					"		try {\n" + 
					"			foo(6, false);\n" + 
					"		} catch(Exception e) {\n" + 
					"			e.printStackTrace();\n" + 
					"		}\n" + 
					"	}\n" + 
					"	X(Object o) {}\n" + 
					"	int foo(int i, boolean b) {\n" + 
					"		try {\n" + 
					"			if (b) {\n" + 
					"				return i;\n" + 
					"			}\n" + 
					"			return i + 1;\n" + 
					"		} catch(Exception e) {\n" + 
					"			return 5;\n" + 
					"		}\n" + 
					"	}\n" + 
					"	public static void main(String[] args) {\n" + 
					"		new X().foo(2, false);\n" + 
					"		System.out.println(\"SUCCESS\");\n" + 
					"	}\n" + 
					"}",
				},
				"SUCCESS");
				
			ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
			byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +"X.class"));
			String actualOutput =
				disassembler.disassemble(
					classFileBytes,
					"\n",
					ClassFileBytesDisassembler.DETAILED); 
			
			String expectedOutput = 
				"  // Method descriptor #14 (D)V\n" + 
				"  // Stack: 5, Locals: 4\n" + 
				"  X(double i);\n" + 
				"     0  aload_0 [this]\n" + 
				"     1  dload_1 [i]\n" + 
				"     2  dconst_0\n" + 
				"     3  dcmpl\n" + 
				"     4  ifle 11\n" + 
				"     7  aconst_null\n" + 
				"     8  goto 18\n" + 
				"    11  new java.lang.Object [3]\n" + 
				"    14  dup\n" + 
				"    15  invokespecial java.lang.Object() [8]\n" + 
				"    18  invokespecial X(java.lang.Object) [15]\n" + 
				"    21  aload_0 [this]\n" + 
				"    22  bipush 6\n" + 
				"    24  iconst_0\n" + 
				"    25  invokevirtual X.foo(int, boolean) : int [18]\n" + 
				"    28  pop\n" + 
				"    29  goto 37\n" + 
				"    32  astore_3 [e]\n" + 
				"    33  aload_3 [e]\n" + 
				"    34  invokevirtual java.lang.Exception.printStackTrace() : void [22]\n" + 
				"    37  return\n" + 
				"      Exception Table:\n" + 
				"        [pc: 21, pc: 29] -> 32 when : java.lang.Exception\n" + 
				"      Line numbers:\n" + 
				"        [pc: 0, line: 4]\n" + 
				"        [pc: 21, line: 6]\n" + 
				"        [pc: 32, line: 7]\n" + 
				"        [pc: 33, line: 8]\n" + 
				"        [pc: 37, line: 10]\n" + 
				"      Local variable table:\n" + 
				"        [pc: 0, pc: 38] local: this index: 0 type: X\n" + 
				"        [pc: 0, pc: 38] local: i index: 1 type: double\n" + 
				"        [pc: 33, pc: 37] local: e index: 3 type: java.lang.Exception\n" + 
				"      Stack map table: number of frames 4\n" + 
				"        [pc: 11, same_locals_1_stack_item, stack: {uninitialized_this}]\n" + 
				"        [pc: 18, full, stack: {uninitialized_this, java.lang.Object}, locals: {uninitialized_this, double}]\n" + 
				"        [pc: 32, full, stack: {java.lang.Exception}, locals: {X, double}]\n" + 
				"        [pc: 37, same]\n" + 
				"  \n" + 
				"  // Method descriptor #17 (Ljava/lang/Object;)V\n" + 
				"  // Stack: 1, Locals: 2\n" + 
				"  X(java.lang.Object o);\n" + 
				"    0  aload_0 [this]\n" + 
				"    1  invokespecial java.lang.Object() [8]\n" + 
				"    4  return\n" + 
				"      Line numbers:\n" + 
				"        [pc: 0, line: 11]\n" + 
				"      Local variable table:\n" + 
				"        [pc: 0, pc: 5] local: this index: 0 type: X\n" + 
				"        [pc: 0, pc: 5] local: o index: 1 type: java.lang.Object\n" + 
				"  \n" + 
				"  // Method descriptor #21 (IZ)I\n" + 
				"  // Stack: 2, Locals: 4\n" + 
				"  int foo(int i, boolean b);\n" + 
				"     0  iload_2 [b]\n" + 
				"     1  ifeq 6\n" + 
				"     4  iload_1 [i]\n" + 
				"     5  ireturn\n" + 
				"     6  iload_1 [i]\n" + 
				"     7  iconst_1\n" + 
				"     8  iadd\n" + 
				"     9  ireturn\n" + 
				"    10  astore_3 [e]\n" + 
				"    11  iconst_5\n" + 
				"    12  ireturn\n" + 
				"      Exception Table:\n" + 
				"        [pc: 0, pc: 5] -> 10 when : java.lang.Exception\n" + 
				"        [pc: 6, pc: 9] -> 10 when : java.lang.Exception\n" + 
				"      Line numbers:\n" + 
				"        [pc: 0, line: 14]\n" + 
				"        [pc: 4, line: 15]\n" + 
				"        [pc: 6, line: 17]\n" + 
				"        [pc: 10, line: 18]\n" + 
				"        [pc: 11, line: 19]\n" + 
				"      Local variable table:\n" + 
				"        [pc: 0, pc: 13] local: this index: 0 type: X\n" + 
				"        [pc: 0, pc: 13] local: i index: 1 type: int\n" + 
				"        [pc: 0, pc: 13] local: b index: 2 type: boolean\n" + 
				"        [pc: 11, pc: 13] local: e index: 3 type: java.lang.Exception\n" + 
				"      Stack map table: number of frames 2\n" + 
				"        [pc: 6, same]\n" + 
				"        [pc: 10, same_locals_1_stack_item, stack: {java.lang.Exception}]\n";
			
			int index = actualOutput.indexOf(expectedOutput);
			if (index == -1 || expectedOutput.length() == 0) {
				System.out.println(Util.displayString(actualOutput, 2));
			}
			if (index == -1) {
				assertEquals("Wrong contents", expectedOutput, actualOutput);
			}
	}

