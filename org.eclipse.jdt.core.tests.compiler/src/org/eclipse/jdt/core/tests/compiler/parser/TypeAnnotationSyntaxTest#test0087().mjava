// To test Parser.classInstanceCreation() with type annotations
public void test0087() throws IOException {
	String source =
		"class X {\n" +
		"	@Marker X() {\n" +
		"		System.out.print(\"new X created\");\n" +
		"	}\n" +
		"	@Marker class Inner {\n" +
		"		@Normal(value = 10) Inner(){\n" +
		"			System.out.print(\"X.Inner created\");\n" +
		"		}\n" +
		"	}\n" +
		"	public String getString(){\n" +
		"		return \"hello\";\n" +
		"	}\n" +
		"  	void f(@Marker X this) {\n" +
		"       String testString;\n" +
		"		testString = new @Readonly @Negative X().getString();\n" +
		"		X.Inner testInner;\n" +
		"		testInner = new @Readonly X.Inner();\n" +
		"		int i;\n" +
		"		for(i = 0; i < 10; i++)\n" +
		"			System.out.print(\"test\");\n" +
		"   }\n" +
		"}";
	String expectedUnitToString =
		"class X {\n" +
		"  @Marker class Inner {\n" +
		"    @Normal(value = 10) Inner() {\n" +
		"      super();\n" +
		"      System.out.print(\"X.Inner created\");\n" +
		"    }\n" +
		"  }\n" +
		"  @Marker X() {\n" +
		"    super();\n" +
		"    System.out.print(\"new X created\");\n" +
		"  }\n" +
		"  public String getString() {\n" +
		"    return \"hello\";\n" +
		"  }\n" +
		"  void f(@Marker X this) {\n" +
		"    String testString;\n" +
		"    testString = new @Readonly @Negative X().getString();\n" +
		"    X.Inner testInner;\n" +
		"    testInner = new @Readonly X.Inner();\n" +
		"    int i;\n" +
		"    for (i = 0; (i < 10); i ++) \n" +
		"      System.out.print(\"test\");\n" +
		"  }\n" +
		"}\n";
	checkParse(CHECK_ALL & ~CHECK_INDEXING_PARSER, source.toCharArray(), null, "test0087", expectedUnitToString );
}

