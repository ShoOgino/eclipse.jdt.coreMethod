// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401850, [1.8][compiler] Compiler fails to type poly allocation expressions in method invocation contexts
// FAIL: we no longer see that both methods are applicable...
// inference starts with X#RAW, finds the second method, then infers the diamond to Object and sees that foo is not ambiguous
public void _test032() {
	this.runNegativeTest(
			new String[] {
				"X.java",
				"public class X<T> {\n" +
				"    void foo(X<String> s, Object o) {\n" +
				"        System.out.println(\"foo(X<String>)\");\n" +
				"    }\n" +
				"    void foo(X xs, String s) {\n" +
				"        System.out.println(\"foo(X<String>)\");\n" +
				"    }\n" +
				"    public static void main(String[] args) {\n" +
				"        new X<String>().foo(new X<>(), \"Hello\");\n" +
				"    }\n" +
				"}\n",
			},
			"----------\n" +
			"1. WARNING in X.java (at line 5)\n" +
			"	void foo(X xs, String s) {\n" +
			"	         ^\n" +
			"X is a raw type. References to generic type X<T> should be parameterized\n" +
			"----------\n" +
			"2. ERROR in X.java (at line 9)\n" +
			"	new X<String>().foo(new X<>(), \"Hello\");\n" +
			"	                ^^^\n" +
			"The method foo(X<String>, Object) is ambiguous for the type X<String>\n" +
			"----------\n");
}

