	// ReferenceType3 ::= ReferenceType '>>>'
	public void test020() throws Exception {
		this.runNegativeTest(
				new String[] {
					"X.java",
					"public class X<A extends X<X<X<@Marker String>>>> {}\n" +
					"class Y<T> {\n" +
				    "    Zork z;\n" +
					"}\n"
 				},
 				"----------\n" +
				"1. ERROR in X.java (at line 1)\n" +
				"	public class X<A extends X<X<X<@Marker String>>>> {}\n" +
				"	                           ^\n" +
				"Bound mismatch: The type X<X<String>> is not a valid substitute for the bounded parameter <A extends X<X<X<String>>>> of the type X<A>\n" +
				"----------\n" +
				"2. ERROR in X.java (at line 1)\n" +
				"	public class X<A extends X<X<X<@Marker String>>>> {}\n" +
				"	                             ^\n" +
				"Bound mismatch: The type X<String> is not a valid substitute for the bounded parameter <A extends X<X<X<String>>>> of the type X<A>\n" +
				"----------\n" +
				"3. ERROR in X.java (at line 1)\n" +
				"	public class X<A extends X<X<X<@Marker String>>>> {}\n" +
				"	                               ^^^^^^^^^^^^^^\n" +
				"Bound mismatch: The type String is not a valid substitute for the bounded parameter <A extends X<X<X<String>>>> of the type X<A>\n" +
				"----------\n" +
				"4. ERROR in X.java (at line 1)\n" +
				"	public class X<A extends X<X<X<@Marker String>>>> {}\n" +
				"	                                ^^^^^^\n" +
				"Marker cannot be resolved to a type\n" +
				"----------\n" +
				"5. ERROR in X.java (at line 3)\n" +
				"	Zork z;\n" +
				"	^^^^\n" +
				"Zork cannot be resolved to a type\n" +
				"----------\n");
	}

