// https://bugs.eclipse.org/bugs/show_bug.cgi?id=449063, [1.8][compiler] Bring back generic signatures for Lambda Expressions
public void test449063f() {
	Map customOptions = getCompilerOptions();
	customOptions.put(CompilerOptions.OPTION_LambdaGenericSignature, CompilerOptions.GENERATE);
	this.runConformTest(
		new String[] {
			"Test.java",
			"import java.io.Serializable;\n" +
			"import java.lang.reflect.Method;\n" +
			"import java.lang.reflect.Type;\n" +
			"public class Test implements Serializable{\n" +
			"    public static interface Map<IN, OUT> {\n" +
			"        public OUT map(IN in);\n" +
			"    }\n" +
			"    public static Tuple<Integer, String> noop(Tuple<String, Double> t){return null;}\n" +
			"    public static class Tuple<T1, T2> {\n" +
			"        private T1 field1;\n" +
			"        private T2 field2;\n" +
			"    }\n" +
			"    public static void main(String[] strings) throws Exception {\n" +
			"        Map<Tuple<String, Double>, Tuple<Integer, String>> map = Test::noop;\n" +
			"        for(Method m : Test.class.getDeclaredMethods()) {\n" +
			"        // Use the type information stored in signature\n" +
			"            if (m.getName().contains(\"lambda\")) {\n" +
			"              System.out.println(m.getGenericReturnType());\n" +
			"              for (Type t : m.getGenericParameterTypes()) {\n" +
			"                  System.out.println(t);\n" +
			"              }\n" +
			"            }\n" +
			"        }\n" +
			"    }\n" +
			"}"
			},
			"",
			customOptions);
}

