// https://bugs.eclipse.org/bugs/show_bug.cgi?id=428388, [1.8][compiler] Casting to primitives is over tolerant - probable regression since bug 428274
public void test428388i() throws Exception {
	if (this.complianceLevel < ClassFileConstants.JDK1_7)
		return;
	this.runConformTest(
		new String[] {
			"X.java",
			"import java.io.Serializable;\n" +
			"public class X implements Serializable {\n" +
			"	static int test(Serializable v) {\n" +
			"       try {\n" +
			"		    return (int)v;\n" +
			"       } catch (ClassCastException c) {\n" +
			"           System.out.println(\"CCE\");\n" +
			"       }\n" +
			"       return -1;\n" +
			"	}\n" +
			"	public static void main(String[] args) {\n" +
			"		int i = test(new Integer(1234));\n" +
			"		System.out.println(i);\n" +
			"	}\n" +
			"}\n",
		},
		"1234");
	ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
	byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +"X.class"));
	String actualOutput =
		disassembler.disassemble(
			classFileBytes,
			"\n",
			ClassFileBytesDisassembler.DETAILED);

	String expectedOutput =
			"  // Method descriptor #17 (Ljava/io/Serializable;)I\n" +
			"  // Stack: 2, Locals: 2\n" +
			"  static int test(java.io.Serializable v);\n" +
			"     0  aload_0 [v]\n" +
			"     1  checkcast java.lang.Integer [18]\n" +
			"     4  invokevirtual java.lang.Integer.intValue() : int [20]\n" +
			"     7  ireturn\n" +
			"     8  astore_1 [c]\n" +
			"     9  getstatic java.lang.System.out : java.io.PrintStream [24]\n" +
			"    12  ldc <String \"CCE\"> [30]\n" +
			"    14  invokevirtual java.io.PrintStream.println(java.lang.String) : void [32]\n" +
			"    17  iconst_m1\n" +
			"    18  ireturn\n";

	int index = actualOutput.indexOf(expectedOutput);
	if (index == -1 || expectedOutput.length() == 0) {
		System.out.println(Util.displayString(actualOutput, 2));
	}
	if (index == -1) {
		assertEquals("Wrong contents", expectedOutput, actualOutput);
	}
}

