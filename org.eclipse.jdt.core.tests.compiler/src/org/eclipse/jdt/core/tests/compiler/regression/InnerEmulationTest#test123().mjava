//https://bugs.eclipse.org/bugs/show_bug.cgi?id=110182 - variation
public void test123() throws Exception {
	this.runConformTest(
		new String[] {
			"X.java",
			"class Y {\n" +
			"	public static final boolean b = false;\n" +
			"}\n" +
			"public class X {\n" +
			"    private static Y y = new Y(); \n" +
			"    private static Object o = new Object(); \n" +
			"\n" +
			"	static class Z {\n" +
			"		Z() {\n" +
			"	    	if (y.b) {\n" +
			"	    		System.out.println(\"dead code\");\n" +
			"	    	}\n" +
			"		}\n" +
			"		public int bar() {\n" +
			"	    	if (y.b) {\n" +
			"	    		System.out.println(\"dead code\");\n" +
			"	    	}\n" +
			"    		System.out.println(\"bar\");\n" +
			"			return 0;\n" +
			"		}\n" +
			"	}\n" +
			"    static int foo() {\n" +
			"    	synchronized(o) { \n" +
			"	    	Z z = new Z();\n" +
			"    		return z.bar();\n" +
			"    	}\n" +
			"    }\n" +
			"    \n" +
			"    public static void main(String[] args) {\n" +
			"    	foo();\n" +
			"    }\n" +
			"}\n",
		},
		"bar");
	String nestHost = "";
	CompilerOptions options = new CompilerOptions(getCompilerOptions());
	if (options.complianceLevel >= ClassFileConstants.JDK11) {
		nestHost = "\n" +
						  "Nest Host: #32 X\n";
	}
	// ensure synthetic access method got generated for enclosing field
	String expectedOutput =
		"  // Method descriptor #6 ()V\n" +
			"  // Stack: 1, Locals: 1\n" +
			"  X$Z();\n" +
			"    0  aload_0 [this]\n" +
			"    1  invokespecial java.lang.Object() [8]\n" +
			"    4  return\n" +
			"      Line numbers:\n" +
			"        [pc: 0, line: 9]\n" +
			"        [pc: 4, line: 13]\n" +
			"      Local variable table:\n" +
			"        [pc: 0, pc: 5] local: this index: 0 type: X.Z\n" +
			"  \n" +
			"  // Method descriptor #15 ()I\n" +
			"  // Stack: 2, Locals: 1\n" +
			"  public int bar();\n" +
			"     0  getstatic java.lang.System.out : java.io.PrintStream [16]\n" +
			"     3  ldc <String \"bar\"> [22]\n" +
			"     5  invokevirtual java.io.PrintStream.println(java.lang.String) : void [23]\n" +
			"     8  iconst_0\n" +
			"     9  ireturn\n" +
			"      Line numbers:\n" +
			"        [pc: 0, line: 18]\n" +
			"        [pc: 8, line: 19]\n" +
			"      Local variable table:\n" +
			"        [pc: 0, pc: 10] local: this index: 0 type: X.Z\n" +
			"\n" +
			"  Inner classes:\n" +
			"    [inner class info: #1 X$Z, outer class info: #32 X\n" +
			"     inner name: #34 Z, accessflags: 8 static]\n" +
			nestHost +
			"}";

	File f = new File(OUTPUT_DIR + File.separator + "X$Z.class");
	byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
	ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
	String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
	int index = result.indexOf(expectedOutput);
	if (index == -1 || expectedOutput.length() == 0) {
		System.out.println(Util.displayString(result, 3));
	}
	if (index == -1) {
		assertEquals("Wrong contents", expectedOutput, result);
	}
}

