public void test013() throws Exception {
	this.runConformTest(new String[] {
		"X.java",
		"public class X {\n" + 
		"\n" + 
		"	public static void main(String[] args) {\n" + 
		"		X x;\n" + 
		"		Object o = null;\n" + 
		"		for (int i = 0; i < 10; i++) {\n" + 
		"			if (i < 90) {\n" + 
		"				x = new X();\n" + 
		"				if (i > 4) {\n" + 
		"					o = new Object();\n" + 
		"				} else {\n" + 
		"					o = null;\n" + 
		"				}\n" + 
		"				switch (2) {\n" + 
		"					case 0:\n" + 
		"						if (o instanceof String) {\n" + 
		"							System.out.print(\"1\");\n" + 
		"							return;\n" + 
		"						} else {\n" + 
		"							break;\n" + 
		"						}\n" + 
		"					default: {\n" + 
		"						Object diff = o;\n" + 
		"						if (diff != null) {\n" + 
		"							System.out.print(\"2\");\n" + 
		"						}\n" + 
		"						break;\n" + 
		"					}\n" + 
		"				}\n" + 
		"				System.out.print(\"3\");				\n" + 
		"			}\n" + 
		"		}\n" + 
		"	}\n" + 
		"}\n",
	},
	"333332323232323");

	String expectedOutput = new CompilerOptions(this.getCompilerOptions()).complianceLevel < ClassFileConstants.JDK1_6
		?	"  // Method descriptor #15 ([Ljava/lang/String;)V\n" + 
			"  // Stack: 2, Locals: 5\n" + 
			"  public static void main(java.lang.String[] args);\n" + 
			"      0  aconst_null\n" + 
			"      1  astore_2 [o]\n" + 
			"      2  iconst_0\n" + 
			"      3  istore_3 [i]\n" + 
			"      4  goto 103\n" + 
			"      7  iload_3 [i]\n" + 
			"      8  bipush 90\n" + 
			"     10  if_icmpge 100\n" + 
			"     13  new X [1]\n" + 
			"     16  dup\n" + 
			"     17  invokespecial X() [16]\n" + 
			"     20  astore_1 [x]\n" + 
			"     21  iload_3 [i]\n" + 
			"     22  iconst_4\n" + 
			"     23  if_icmple 37\n" + 
			"     26  new java.lang.Object [3]\n" + 
			"     29  dup\n" + 
			"     30  invokespecial java.lang.Object() [8]\n" + 
			"     33  astore_2 [o]\n" + 
			"     34  goto 39\n" + 
			"     37  aconst_null\n" + 
			"     38  astore_2 [o]\n" + 
			"     39  iconst_2\n" + 
			"     40  tableswitch default: 76\n" + 
			"          case 0: 60\n" + 
			"     60  aload_2 [o]\n" + 
			"     61  instanceof java.lang.String [17]\n" + 
			"     64  ifeq 92\n" + 
			"     67  getstatic java.lang.System.out : java.io.PrintStream [19]\n" + 
			"     70  ldc <String \"1\"> [25]\n" + 
			"     72  invokevirtual java.io.PrintStream.print(java.lang.String) : void [27]\n" + 
			"     75  return\n" + 
			"     76  aload_2 [o]\n" + 
			"     77  astore 4 [diff]\n" + 
			"     79  aload 4 [diff]\n" + 
			"     81  ifnull 92\n" + 
			"     84  getstatic java.lang.System.out : java.io.PrintStream [19]\n" + 
			"     87  ldc <String \"2\"> [33]\n" + 
			"     89  invokevirtual java.io.PrintStream.print(java.lang.String) : void [27]\n" + 
			"     92  getstatic java.lang.System.out : java.io.PrintStream [19]\n" + 
			"     95  ldc <String \"3\"> [35]\n" + 
			"     97  invokevirtual java.io.PrintStream.print(java.lang.String) : void [27]\n" + 
			"    100  iinc 3 1 [i]\n" + 
			"    103  iload_3 [i]\n" + 
			"    104  bipush 10\n" + 
			"    106  if_icmplt 7\n" + 
			"    109  return\n" + 
			"      Line numbers:\n" + 
			"        [pc: 0, line: 5]\n" + 
			"        [pc: 2, line: 6]\n" + 
			"        [pc: 7, line: 7]\n" + 
			"        [pc: 13, line: 8]\n" + 
			"        [pc: 21, line: 9]\n" + 
			"        [pc: 26, line: 10]\n" + 
			"        [pc: 37, line: 12]\n" + 
			"        [pc: 39, line: 14]\n" + 
			"        [pc: 60, line: 16]\n" + 
			"        [pc: 67, line: 17]\n" + 
			"        [pc: 75, line: 18]\n" + 
			"        [pc: 76, line: 23]\n" + 
			"        [pc: 79, line: 24]\n" + 
			"        [pc: 84, line: 25]\n" + 
			"        [pc: 92, line: 30]\n" + 
			"        [pc: 100, line: 6]\n" + 
			"        [pc: 109, line: 33]\n" + 
			"      Local variable table:\n" + 
			"        [pc: 0, pc: 110] local: args index: 0 type: java.lang.String[]\n" + 
			"        [pc: 21, pc: 100] local: x index: 1 type: X\n" + 
			"        [pc: 2, pc: 110] local: o index: 2 type: java.lang.Object\n" + 
			"        [pc: 4, pc: 109] local: i index: 3 type: int\n" + 
			"        [pc: 79, pc: 92] local: diff index: 4 type: java.lang.Object\n"
		:
			"  // Method descriptor #15 ([Ljava/lang/String;)V\n" + 
			"  // Stack: 2, Locals: 5\n" + 
			"  public static void main(java.lang.String[] args);\n" + 
			"      0  aconst_null\n" + 
			"      1  astore_2 [o]\n" + 
			"      2  iconst_0\n" + 
			"      3  istore_3 [i]\n" + 
			"      4  goto 103\n" + 
			"      7  iload_3 [i]\n" + 
			"      8  bipush 90\n" + 
			"     10  if_icmpge 100\n" + 
			"     13  new X [1]\n" + 
			"     16  dup\n" + 
			"     17  invokespecial X() [16]\n" + 
			"     20  astore_1 [x]\n" + 
			"     21  iload_3 [i]\n" + 
			"     22  iconst_4\n" + 
			"     23  if_icmple 37\n" + 
			"     26  new java.lang.Object [3]\n" + 
			"     29  dup\n" + 
			"     30  invokespecial java.lang.Object() [8]\n" + 
			"     33  astore_2 [o]\n" + 
			"     34  goto 39\n" + 
			"     37  aconst_null\n" + 
			"     38  astore_2 [o]\n" + 
			"     39  iconst_2\n" + 
			"     40  tableswitch default: 76\n" + 
			"          case 0: 60\n" + 
			"     60  aload_2 [o]\n" + 
			"     61  instanceof java.lang.String [17]\n" + 
			"     64  ifeq 92\n" + 
			"     67  getstatic java.lang.System.out : java.io.PrintStream [19]\n" + 
			"     70  ldc <String \"1\"> [25]\n" + 
			"     72  invokevirtual java.io.PrintStream.print(java.lang.String) : void [27]\n" + 
			"     75  return\n" + 
			"     76  aload_2 [o]\n" + 
			"     77  astore 4 [diff]\n" + 
			"     79  aload 4 [diff]\n" + 
			"     81  ifnull 92\n" + 
			"     84  getstatic java.lang.System.out : java.io.PrintStream [19]\n" + 
			"     87  ldc <String \"2\"> [33]\n" + 
			"     89  invokevirtual java.io.PrintStream.print(java.lang.String) : void [27]\n" + 
			"     92  getstatic java.lang.System.out : java.io.PrintStream [19]\n" + 
			"     95  ldc <String \"3\"> [35]\n" + 
			"     97  invokevirtual java.io.PrintStream.print(java.lang.String) : void [27]\n" + 
			"    100  iinc 3 1 [i]\n" + 
			"    103  iload_3 [i]\n" + 
			"    104  bipush 10\n" + 
			"    106  if_icmplt 7\n" + 
			"    109  return\n" + 
			"      Line numbers:\n" + 
			"        [pc: 0, line: 5]\n" + 
			"        [pc: 2, line: 6]\n" + 
			"        [pc: 7, line: 7]\n" + 
			"        [pc: 13, line: 8]\n" + 
			"        [pc: 21, line: 9]\n" + 
			"        [pc: 26, line: 10]\n" + 
			"        [pc: 37, line: 12]\n" + 
			"        [pc: 39, line: 14]\n" + 
			"        [pc: 60, line: 16]\n" + 
			"        [pc: 67, line: 17]\n" + 
			"        [pc: 75, line: 18]\n" + 
			"        [pc: 76, line: 23]\n" + 
			"        [pc: 79, line: 24]\n" + 
			"        [pc: 84, line: 25]\n" + 
			"        [pc: 92, line: 30]\n" + 
			"        [pc: 100, line: 6]\n" + 
			"        [pc: 109, line: 33]\n" + 
			"      Local variable table:\n" + 
			"        [pc: 0, pc: 110] local: args index: 0 type: java.lang.String[]\n" + 
			"        [pc: 21, pc: 100] local: x index: 1 type: X\n" + 
			"        [pc: 2, pc: 110] local: o index: 2 type: java.lang.Object\n" + 
			"        [pc: 4, pc: 109] local: i index: 3 type: int\n" + 
			"        [pc: 79, pc: 92] local: diff index: 4 type: java.lang.Object\n" + 
			"      Stack map table: number of frames 8\n" + 
			"        [pc: 7, full, stack: {}, locals: {java.lang.String[], _, java.lang.Object, int}]\n" + 
			"        [pc: 37, full, stack: {}, locals: {java.lang.String[], X, java.lang.Object, int}]\n" + 
			"        [pc: 39, same]\n" + 
			"        [pc: 60, same]\n" + 
			"        [pc: 76, same]\n" + 
			"        [pc: 92, same]\n" + 
			"        [pc: 100, full, stack: {}, locals: {java.lang.String[], _, java.lang.Object, int}]\n" + 
			"        [pc: 103, same]\n";
	
	File f = new File(OUTPUT_DIR + File.separator + "X.class");
	byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
	ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
	String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
	int index = result.indexOf(expectedOutput);
	if (index == -1 || expectedOutput.length() == 0) {
		System.out.println(Util.displayString(result, 3));
	}
	if (index == -1) {
		assertEquals("Wrong contents", expectedOutput, result);
	}
}

