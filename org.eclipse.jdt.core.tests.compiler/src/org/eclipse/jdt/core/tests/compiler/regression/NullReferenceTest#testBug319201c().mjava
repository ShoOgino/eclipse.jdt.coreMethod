// https://bugs.eclipse.org/bugs/show_bug.cgi?id=319201
// unboxing raises an NPE
// Node types covered (in this order):
//   ExplicitConstructorCall
//   AllocationExpression
//   AND_AND_Expression
//   OR_OR_Expression
//   ArrayAllocationExpression
//   ForStatement
//   DoStatement
//   IfStatement
//   QualifiedAllocationExpression
//   SwitchStatement
//   WhileStatement
//   CastExpression
//   AssertStatement
//   ReturnStatement
public void testBug319201c() {
	if (this.complianceLevel < ClassFileConstants.JDK1_5)
		return;
	runNegativeTest(
			new String[] {
              "X.java",
              "class Y { public Y(boolean b1, boolean b2) {} }\n" +
              "public class X extends Y {\n" +
              "  public X(boolean b, Boolean b2) {\n" +
              "      super(b2 == null, b2);\n" +
              "  }\n" +
              "  class Z {\n" +
              "      public Z(boolean b) {}\n" +
              "  }\n" +
              "  boolean fB = (Boolean)null;\n" +
              "  public boolean foo(boolean inB) {\n" +
              "      Boolean b1 = null;\n" +
              "      X x = new X(b1, null);\n" +
              "      Boolean b2 = null;\n" +
              "      boolean dontcare = b2 && inB;\n" +
              "      Boolean b3 = null;\n" +
              "      dontcare = inB || b3;\n" +
              "      Integer dims = null;\n" +
              "      char[] cs = new char[dims];\n" +
              "      Boolean b5 = null;\n" +
              "      do {\n" +
              "          Boolean b4 = null;\n" +
              "          for (int i=0;b4; i++);\n" +
              "      } while (b5);\n" +
              "      Boolean b6 = null;\n" +
              "      if (b6) { }\n" +
              "      Boolean b7 = null;\n" +
              "      Z z = this.new Z(b7);\n" +
              "      Integer sel = null;\n" +
              "      switch(sel) {\n" +
              "          case 1: break;\n" +
              "          default: break;\n" +
              "      }\n" +
              "      Boolean b8 = null;\n" +
              "      while (b8) {}\n" +
              "      Boolean b9 = null;\n" +
              "      dontcare = (boolean)b9;\n" +
              "      Boolean b10 = null;\n" +
              "      assert b10 : \"shouldn't happen, but will\";\n" +
              "      Boolean b11 = null;\n" +
              "      return b11;\n" +
              "  }\n" +
				"}"},
			"----------\n" +
			"1. ERROR in X.java (at line 4)\n" +
			"	super(b2 == null, b2);\n" +
			"	                  ^^\n" +
			"Potential null pointer access: This expression of type Boolean may be null but requires auto-unboxing\n" +
			"----------\n" +
			"2. ERROR in X.java (at line 9)\n" +
			"	boolean fB = (Boolean)null;\n" +
			"	             ^^^^^^^^^^^^^\n" +
			"Null pointer access: This expression of type Boolean is null but requires auto-unboxing\n" +
			"----------\n" +
			"3. ERROR in X.java (at line 12)\n" +
			"	X x = new X(b1, null);\n" +
			"	            ^^\n" +
			"Null pointer access: This expression of type Boolean is null but requires auto-unboxing\n" +
			"----------\n" +
			"4. ERROR in X.java (at line 14)\n" +
			"	boolean dontcare = b2 && inB;\n" +
			"	                   ^^\n" +
			"Null pointer access: This expression of type Boolean is null but requires auto-unboxing\n" +
			"----------\n" +
			"5. ERROR in X.java (at line 16)\n" +
			"	dontcare = inB || b3;\n" +
			"	                  ^^\n" +
			"Null pointer access: This expression of type Boolean is null but requires auto-unboxing\n" +
			"----------\n" +
			"6. ERROR in X.java (at line 18)\n" +
			"	char[] cs = new char[dims];\n" +
			"	                     ^^^^\n" +
			"Null pointer access: This expression of type Integer is null but requires auto-unboxing\n" +
			"----------\n" +
			"7. ERROR in X.java (at line 22)\n" +
			"	for (int i=0;b4; i++);\n" +
			"	             ^^\n" +
			"Null pointer access: This expression of type Boolean is null but requires auto-unboxing\n" +
			"----------\n" +
			"8. ERROR in X.java (at line 23)\n" +
			"	} while (b5);\n" +
			"	         ^^\n" +
			"Null pointer access: This expression of type Boolean is null but requires auto-unboxing\n" +
			"----------\n" +
			"9. ERROR in X.java (at line 25)\n" +
			"	if (b6) { }\n" +
			"	    ^^\n" +
			"Null pointer access: This expression of type Boolean is null but requires auto-unboxing\n" +
			"----------\n" +
			"10. ERROR in X.java (at line 27)\n" +
			"	Z z = this.new Z(b7);\n" +
			"	                 ^^\n" +
			"Null pointer access: This expression of type Boolean is null but requires auto-unboxing\n" +
			"----------\n" +
			"11. ERROR in X.java (at line 29)\n" +
			"	switch(sel) {\n" +
			"	       ^^^\n" +
			"Null pointer access: This expression of type Integer is null but requires auto-unboxing\n" +
			"----------\n" +
			"12. ERROR in X.java (at line 34)\n" +
			"	while (b8) {}\n" +
			"	       ^^\n" +
			"Null pointer access: This expression of type Boolean is null but requires auto-unboxing\n" +
			"----------\n" +
			"13. ERROR in X.java (at line 36)\n" +
			"	dontcare = (boolean)b9;\n" +
			"	                    ^^\n" +
			"Null pointer access: This expression of type Boolean is null but requires auto-unboxing\n" +
			"----------\n" +
			"14. ERROR in X.java (at line 38)\n" +
			"	assert b10 : \"shouldn\'t happen, but will\";\n" +
			"	       ^^^\n" +
			"Null pointer access: This expression of type Boolean is null but requires auto-unboxing\n" +
			"----------\n" +
			"15. ERROR in X.java (at line 40)\n" +
			"	return b11;\n" +
			"	       ^^^\n" +
			"Null pointer access: This expression of type Boolean is null but requires auto-unboxing\n" +
			"----------\n",
		    JavacTestOptions.Excuse.EclipseWarningConfiguredAsError);
}

