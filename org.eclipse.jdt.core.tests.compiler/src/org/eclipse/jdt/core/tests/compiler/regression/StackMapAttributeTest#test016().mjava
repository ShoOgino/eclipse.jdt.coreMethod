	public void test016() {
		this.runConformTest(
            new String[] {
            		"X.java",
            		"public enum X {\n" + 
            		"    a1(1), a2(5), a3(11);\n" + 
            		"    int value;\n" + 
            		"    X(int a) {\n" + 
            		"        value = a;\n" + 
            		"    }\n" + 
            		"    int value () {\n" + 
            		"    	return value;\n" + 
            		"    }\n" + 
            		"    public static void main(String argv[]) {\n" + 
            		"    }\n" + 
            		"    public static int foo() {\n" + 
            		"        int val;\n" + 
            		"        int res = 0;\n" + 
            		"        int n = 0;\n" + 
            		"        for (X e : X.values()) {\n" + 
            		"            if ( n == 1) {\n" + 
            		"                continue;\n" + 
            		"            }\n" + 
            		"            val = e.value();\n" + 
            		"			 System.out.println(val);\n" +
            		"        }\n" + 
            		"        return res;\n" + 
            		"    }\n" + 
            		"}",
            },
			"");

		ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
		String actualOutput = null;
		try {
			byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +"X.class"));
			actualOutput =
				disassembler.disassemble(
                     classFileBytes,
                     "\n",
                     ClassFileBytesDisassembler.DETAILED); 
		} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
			assertTrue("ClassFormatException", false);
		} catch (IOException e) {
			assertTrue("IOException", false);
		}

		String expectedOutput = 
			"  // Method descriptor #40 ()I\n" + 
			"  // Stack: 2, Locals: 7\n" + 
			"  public static int foo();\n" + 
			"     0  iconst_0\n" + 
			"     1  istore_1 [res]\n" + 
			"     2  iconst_0\n" + 
			"     3  istore_2 [n]\n" + 
			"     4  invokestatic X.values() : X[] [46]\n" + 
			"     7  dup\n" + 
			"     8  astore 6\n" + 
			"    10  arraylength\n" + 
			"    11  istore 5\n" + 
			"    13  iconst_0\n" + 
			"    14  istore 4\n" + 
			"    16  goto 48\n" + 
			"    19  aload 6\n" + 
			"    21  iload 4\n" + 
			"    23  aaload\n" + 
			"    24  astore_3 [e]\n" + 
			"    25  iload_2 [n]\n" + 
			"    26  iconst_1\n" + 
			"    27  if_icmpne 33\n" + 
			"    30  goto 45\n" + 
			"    33  aload_3 [e]\n" + 
			"    34  invokevirtual X.value() : int [50]\n" + 
			"    37  istore_0 [val]\n" + 
			"    38  getstatic java.lang.System.out : java.io.PrintStream [52]\n" + 
			"    41  iload_0 [val]\n" + 
			"    42  invokevirtual java.io.PrintStream.println(int) : void [58]\n" + 
			"    45  iinc 4 1\n" + 
			"    48  iload 4\n" + 
			"    50  iload 5\n" + 
			"    52  if_icmplt 19\n" + 
			"    55  iload_1 [res]\n" + 
			"    56  ireturn\n" + 
			"      Line numbers:\n" + 
			"        [pc: 0, line: 14]\n" + 
			"        [pc: 2, line: 15]\n" + 
			"        [pc: 4, line: 16]\n" + 
			"        [pc: 25, line: 17]\n" + 
			"        [pc: 30, line: 18]\n" + 
			"        [pc: 33, line: 20]\n" + 
			"        [pc: 38, line: 21]\n" + 
			"        [pc: 45, line: 16]\n" + 
			"        [pc: 55, line: 23]\n" + 
			"      Local variable table:\n" + 
			"        [pc: 38, pc: 45] local: val index: 0 type: int\n" + 
			"        [pc: 2, pc: 57] local: res index: 1 type: int\n" + 
			"        [pc: 4, pc: 57] local: n index: 2 type: int\n" + 
			"        [pc: 25, pc: 45] local: e index: 3 type: X\n" + 
			"      Stack map table: number of frames 4\n" + 
			"        [pc: 19, full, stack: {}, locals: {_, int, int, _, int, int, X[]}]\n" + 
			"        [pc: 33, full, stack: {}, locals: {_, int, int, X, int, int, X[]}]\n" + 
			"        [pc: 45, full, stack: {}, locals: {_, int, int, _, int, int, X[]}]\n" + 
			"        [pc: 48, same]\n";

		int index = actualOutput.indexOf(expectedOutput);
		if (index == -1 || expectedOutput.length() == 0) {
			System.out.println(Util.displayString(actualOutput, 2));
		}
		if (index == -1) {
			assertEquals("Wrong contents", expectedOutput, actualOutput);
		}
	}

