//https://bugs.eclipse.org/bugs/show_bug.cgi?id=99428 and https://bugs.eclipse.org/bugs/show_bug.cgi?id=99655
public void test114() {
    this.runConformTest(
        new String[] {
            "EnumTest.java",
			"import java.lang.reflect.*;\n" + 
			"import java.lang.annotation.*;\n" + 
			"@ExpectedModifiers(Modifier.FINAL)\n" + 
			"public enum EnumTest {\n" + 
			"	X(255);\n" + 
			"	EnumTest(int r) {}\n" + 
			"	public static void main(String argv[]) throws Exception {\n" + 
			"		test(\"EnumTest\");\n" + 
			"		test(\"EnumTest$EnumA\");\n" + 
			"		test(\"EnumTest$EnumB\");\n" + 
			"		test(\"EnumTest$EnumB2\");\n" + 
			"		test(\"EnumTest$EnumB3\");\n" + 
			// TODO (kent) need verifier to detect when an Enum should be tagged as abstract
			//"		test(\"EnumTest$EnumC\");\n" + 
			//"		test(\"EnumTest$EnumC2\");\n" + 
			"		test(\"EnumTest$EnumC3\");\n" + 
			"		test(\"EnumTest$EnumD\");\n" + 
			"	}\n" + 
			"	static void test(String className) throws Exception {\n" + 
			"		Class c = Class.forName(className);\n" + 
			"		ExpectedModifiers em = (ExpectedModifiers) c.getAnnotation(ExpectedModifiers.class);\n" + 
			"		if (em != null) {\n" + 
			"			int classModifiers = c.getModifiers();\n" + 
			"			int expected = em.value();\n" + 
			"			if (expected != (classModifiers & (Modifier.ABSTRACT|Modifier.FINAL|Modifier.STATIC))) {\n" + 
			"				if ((expected & Modifier.ABSTRACT) != (classModifiers & Modifier.ABSTRACT))\n" + 
			"					System.out.println(\"FAILED ABSTRACT: \" + className);\n" + 
			"				if ((expected & Modifier.FINAL) != (classModifiers & Modifier.FINAL))\n" + 
			"					System.out.println(\"FAILED FINAL: \" + className);\n" + 
			"				if ((expected & Modifier.STATIC) != (classModifiers & Modifier.STATIC))\n" + 
			"					System.out.println(\"FAILED STATIC: \" + className);\n" + 
			"			}\n" + 
			"		}\n" + 
			"	}\n" + 
			"	@ExpectedModifiers(Modifier.FINAL|Modifier.STATIC)\n" + 
			"	enum EnumA {\n" + 
			"		A;\n" + 
			"	}\n" + 
			"	@ExpectedModifiers(Modifier.STATIC)\n" + 
			"	enum EnumB {\n" + 
			"		B {\n" + 
			"			int value() { return 1; }\n" + 
			"		};\n" + 
			"		int value(){ return 0; }\n" + 
			"	}\n" + 
			"	@ExpectedModifiers(Modifier.STATIC)\n" + 
			"	enum EnumB2 {\n" + 
			"		B2 {};\n" + 
			"		int value(){ return 0; }\n" + 
			"	}\n" + 
			"	@ExpectedModifiers(Modifier.FINAL|Modifier.STATIC)\n" + 
			"	enum EnumB3 {\n" + 
			"		B3;\n" + 
			"		int value(){ return 0; }\n" + 
			"	}\n" + 
			"	@ExpectedModifiers(Modifier.STATIC)\n" + 
			"	enum EnumC implements I {\n" + 
			"		C {\n" + 
			"			int value() { return 1; }\n" + 
			"		};\n" + 
			"		int value(){ return 0; }\n" + 
			"		public void foo(){}\n" + 
			"	}\n" + 
			"	@ExpectedModifiers(Modifier.STATIC)\n" + 
			"	enum EnumC2 implements I {\n" + 
			"		C2 {};\n" + 
			"		int value(){ return 0; }\n" + 
			"		public void foo(){}\n" + 
			"	}\n" + 
			"	@ExpectedModifiers(Modifier.FINAL|Modifier.STATIC)\n" + 
			"	enum EnumC3 implements I {\n" + 
			"		C3;\n" + 
			"		int value(){ return 0; }\n" + 
			"		public void foo(){}\n" + 
			"	}\n" + 
			"	@ExpectedModifiers(Modifier.ABSTRACT|Modifier.STATIC)\n" + 
			"	enum EnumD {\n" + 
			"		D {\n" + 
			"			int value() { return 1; }\n" + 
			"		};\n" + 
			"		abstract int value();\n" + 
			"	}\n" + 
			"}\n" +
			"interface I {\n" +
			"	void foo();\n" + 
			"}\n" + 
			"@Retention(RetentionPolicy.RUNTIME)\n" + 
			"@interface ExpectedModifiers {\n" + 
			"	int value();\n" + 
			"}"
		},
		"");
}

