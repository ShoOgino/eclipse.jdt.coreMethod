// To test Parser.consumeCastExpressionWithQualifiedGenericsArray() with Type Annotations
// Javac version b76 crashes on type annotations on type arguments to parameterized classes
// in a qualified generic reference
public void test0107() throws IOException {
	String source =
		"class C1<T> {\n" +
		"	class C11 {	}\n" +
		"	@Marker class C12 {\n" +
		"		T t;\n" +
		"		C1<@Readonly T>.C11 m() {\n" +
		"			C1<@Readonly T>.C11[] ts;\n" +
		"			ts = (@Marker C1<@Readonly T>.C11[]) new @Marker C1<?>.C11 @Normal(value = 5) [5];\n" +
		"			return ts;\n" +
		"		}\n" +
		"	}\n" +
		"}\n";
	String expectedUnitToString =
		"class C1<T> {\n" +
		"  class C11 {\n" +
		"    C11() {\n" +
		"      super();\n" +
		"    }\n" +
		"  }\n" +
		"  @Marker class C12 {\n" +
		"    T t;\n" +
		"    C12() {\n" +
		"      super();\n" +
		"    }\n" +
		"    C1<@Readonly T>.C11 m() {\n" +
		"      C1<@Readonly T>.C11[] ts;\n" +
		"      ts = (@Marker C1<@Readonly T>.C11[]) new @Marker C1<?>.C11 @Normal(value = 5) [5];\n" +
		"      return ts;\n" +
		"    }\n" +
		"  }\n" +
		"  C1() {\n" +
		"    super();\n" +
		"  }\n" +
		"}\n";
	checkParse(CHECK_ALL & ~CHECK_JAVAC_PARSER, source.toCharArray(), null, "test0107", expectedUnitToString );
}

