	public void testBug90302b() {
		this.reportMissingJavadocTags = CompilerOptions.ERROR;
		runNegativeTest(
			new String[] {
				"X.java",
				"/** */\n" + 
				"public class X {\n" + 
				"}\n",
				"Y.java",
				"/**\n" + 
				" * @see #foo(String)\n" + 
				" */\n" + 
				"public class Y extends X { \n" + 
				"	/**\n" + 
				"	 * Simple method: does not override super\n" + 
				"	 * {@inheritDoc}\n" + 
				"	 */\n" + 
				"	static int foo(String str) throws NumberFormatException{\n" + 
				"		return Integer.parseInt(str);\n" + 
				"	}\n" + 
				"}\n"
			},
			"----------\n" + 
			"1. ERROR in Y.java (at line 7)\n" + 
			"	* {@inheritDoc}\n" + 
			"	    ^^^^^^^^^^\n" + 
			"Javadoc: Unexpected tag\n" + 
			"----------\n" + 
			"2. ERROR in Y.java (at line 9)\n" + 
			"	static int foo(String str) throws NumberFormatException{\n" + 
			"	       ^^^\n" + 
			"Javadoc: Missing tag for return type\n" + 
			"----------\n" + 
			"3. ERROR in Y.java (at line 9)\n" + 
			"	static int foo(String str) throws NumberFormatException{\n" + 
			"	                      ^^^\n" + 
			"Javadoc: Missing tag for parameter str\n" + 
			"----------\n" + 
			"4. ERROR in Y.java (at line 9)\n" + 
			"	static int foo(String str) throws NumberFormatException{\n" + 
			"	                                  ^^^^^^^^^^^^^^^^^^^^^\n" + 
			"Javadoc: Missing tag for declared exception NumberFormatException\n" + 
			"----------\n",
			JavacTestOptions.Excuse.EclipseWarningConfiguredAsError
		);
	}

