public void test004() {
	this.runNegativeTest(
			new String[] {
				"X.java",
				"interface J {\n" +
				"	int foo();\n" +
				"}\n" +
				"public class X {\n" +
				"   static boolean f = true;\n" +
				"	static void goo(J j) {\n" +
				"		System.out.println(\"goo(J)\");\n" +
				"	}\n" +
				"	public static void main(String[] args) {\n" +
				"		boolean x = true;\n" +
				"		goo(()-> { \n" +
				"			boolean y = true;\n" +
				"			while (y); \n" +
				"			});\n" +
				"		goo(()-> { \n" +
				"			while (x); \n" +
				"			});\n" +
				"		goo(()-> { \n" +
				"			while (f); \n" +
				"			});\n" +
				"	}\n" +
				"}\n",
			},
			// none of the lambdas is compatible because none is value-compatible, whereas foo() needs to return int.
			"----------\n" +
			"1. ERROR in X.java (at line 11)\n" +
			"	goo(()-> { \n" +
			"	^^^\n" +
			"The method goo(J) in the type X is not applicable for the arguments (() -> {})\n" +
			"----------\n2. ERROR in X.java (at line 15)\n" +
			"	goo(()-> { \n" +
			"	^^^\n" +
			"The method goo(J) in the type X is not applicable for the arguments (() -> {})\n" +
			"----------\n" +
			"3. ERROR in X.java (at line 18)\n" +
			"	goo(()-> { \n" +
			"	^^^\n" +
			"The method goo(J) in the type X is not applicable for the arguments (() -> {})\n" +
			"----------\n");
}

