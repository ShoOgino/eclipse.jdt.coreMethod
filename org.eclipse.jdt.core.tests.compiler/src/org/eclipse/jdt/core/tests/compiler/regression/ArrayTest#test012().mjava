//https://bugs.eclipse.org/bugs/show_bug.cgi?id=148807 - variation
public void test012() {
	if (new CompilerOptions(getCompilerOptions()).complianceLevel < ClassFileConstants.JDK1_5) {
		// there is a bug on 1.4 VMs which make them fail verification (see 148807)
		return;
	}
	this.runConformTest(
		new String[] {
			"X.java",
			"import java.util.Map;\n" + 
			"\n" + 
			"public class X {\n" + 
			"	Map fValueMap;\n" + 
			"\n" + 
			"	public static void main(String[] args) {\n" + 
			"		System.out.println(\"SUCCESS\");\n" + 
			"	}\n" + 
			"	public Object[][] getAllChoices() {\n" + 
			"		Object[][] all = new String[this.fValueMap.size()][];\n" + 
			"		return all;\n" + 
			"	}\n" + 
			"}", // =================,
		},
		"SUCCESS");
	String expectedOutput =
	"  // Method descriptor #35 ()[[Ljava/lang/Object;\n" + 
	"  // Stack: 1, Locals: 2\n" + 
	"  public java.lang.Object[][] getAllChoices();\n" + 
	"     0  aload_0 [this]\n" + 
	"     1  getfield X.fValueMap : java.util.Map [36]\n" + 
	"     4  invokeinterface java.util.Map.size() : int [38] [nargs: 1]\n" + 
	"     9  anewarray java.lang.String[] [44]\n" + 
	"    12  astore_1 [all]\n" + 
	"    13  aload_1 [all]\n" + 
	"    14  areturn\n" + 
	"      Line numbers:\n" + 
	"        [pc: 0, line: 10]\n" + 
	"        [pc: 13, line: 11]\n" + 
	"      Local variable table:\n" + 
	"        [pc: 0, pc: 15] local: this index: 0 type: X\n" + 
	"        [pc: 13, pc: 15] local: all index: 1 type: java.lang.Object[][]\n";

try {
	File f = new File(OUTPUT_DIR + File.separator + "X.class");
	byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
	ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
	String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
	int index = result.indexOf(expectedOutput);
	if (index == -1 || expectedOutput.length() == 0) {
		System.out.println(Util.displayString(result, 3));
	}
	if (index == -1) {
		assertEquals("Wrong contents", expectedOutput, result);
	}
} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
	assertTrue(false);
} catch (IOException e) {
	assertTrue(false);
}		
}

