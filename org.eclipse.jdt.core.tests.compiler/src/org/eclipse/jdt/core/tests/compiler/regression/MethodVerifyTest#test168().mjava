//https://bugs.eclipse.org/bugs/show_bug.cgi?id=236096
public void test168() {
	this.runNegativeTest(
		new String[] {
			"X.java",
			"class X<T> extends Y {\n" +
			"	@Override <V> void foo(M m) { }\n" +
			"	@Override <V> M bar() { return null; }\n" +
			"}\n" +
			"class Y<T> {\n" +
			"	class M<V> {}\n" +
			"	<V> void foo(M<V> m) {}\n" +
			"	<V> M<V> bar() { return null; }\n" +
			"}"
		},
		"----------\n" +
		"1. WARNING in X.java (at line 1)\n" +
		"	class X<T> extends Y {\n" +
		"	                   ^\n" +
		"Y is a raw type. References to generic type Y<T> should be parameterized\n" +
		"----------\n" +
		"2. ERROR in X.java (at line 2)\n" +
		"	@Override <V> void foo(M m) { }\n" +
		"	                   ^^^^^^^^\n" +
		"Name clash: The method foo(Y.M) of type X<T> has the same erasure as foo(Y.M) of type Y but does not override it\n" +
		"----------\n" +
		"3. ERROR in X.java (at line 2)\n" +
		"	@Override <V> void foo(M m) { }\n" +
		"	                   ^^^^^^^^\n" +
		mustOverrideMessage("foo(Y.M)", "X<T>") +
		"----------\n" +
		"4. WARNING in X.java (at line 2)\n" +
		"	@Override <V> void foo(M m) { }\n" +
		"	                       ^\n" +
		"Y.M is a raw type. References to generic type Y<T>.M<V> should be parameterized\n" +
		"----------\n" +
		"5. WARNING in X.java (at line 3)\n" +
		"	@Override <V> M bar() { return null; }\n" +
		"	              ^\n" +
		"Y.M is a raw type. References to generic type Y<T>.M<V> should be parameterized\n" +
		"----------\n" +
		"6. ERROR in X.java (at line 3)\n" +
		"	@Override <V> M bar() { return null; }\n" +
		"	                ^^^^^\n" +
		"Name clash: The method bar() of type X<T> has the same erasure as bar() of type Y but does not override it\n" +
		"----------\n" +
		"7. ERROR in X.java (at line 3)\n" +
		"	@Override <V> M bar() { return null; }\n" +
		"	                ^^^^^\n" +
		mustOverrideMessage("bar()", "X<T>") +
		"----------\n"
	);
}

