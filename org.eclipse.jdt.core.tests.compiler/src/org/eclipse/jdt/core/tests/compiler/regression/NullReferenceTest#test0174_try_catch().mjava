	// null analysis - try/catch
	// REVIEW the following series of try catch tests all relate to the finer
	//        analysis of possible exception paths; such analysis
	//        calls for a supplementary context for each condition
	//        (so as to sort out certain paths from hypothetical
	//        ones), which is due to be expensive.
	public void test0174_try_catch() {
		this.runNegativeTest(
			new String[] {
				"X.java",
				"public class X {\n" + 
				"	 boolean dummy;\n" + 
				"	 void foo(Object o) throws Exception {\n" + 
				"		 try {\n" + 
				"		   o = null;\n" + 
				"		   throwLocalException();\n" + 
				"		   throw new Exception();\n" + 
				"		 }\n" + 
				"		 catch (LocalException e) {\n" + 
				"		 }\n" + 
				"		 if (o != null) {\n" +
				 	// complain: only way to get out of try and get there is to go
					// through throwLocalException, after the assignment 
				"		 }\n" + 
				"	 }\n" + 
				"	 class LocalException extends Exception {\n" + 
				"		 private static final long serialVersionUID = 1L;\n" + 
				"	 }\n" + 
				"	 void throwLocalException() throws LocalException {\n" + 
				"		 throw new LocalException();\n" + 
				"	 }\n" + 
				"}\n"},
			"WARN"
		);
	}

