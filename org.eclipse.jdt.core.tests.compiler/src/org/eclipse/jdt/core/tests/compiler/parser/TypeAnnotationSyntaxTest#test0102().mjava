// To test Parser.consumeCastExpressionWithGenericsArray() with Type Annotations
// To test Parser.consumeClassHeaderExtends() with Type Annotations
public void test0102() throws IOException {
	String source =
		"class X<E> {\n" +
		"    X<@Readonly String> bar() {\n" +
		"    	return (@Marker AX<@Readonly String>) new X<@Readonly String>();\n" +
		"    }\n" +
		"    X<@Readonly String> bar(Object o) {\n" +
		"    	return (@Marker AX<@Readonly String>) o;\n" +
		"    }\n" +
		"    X<@Negative E> foo(Object o) {\n" +
		"    	return (@Marker @Normal(value = 10) AX<@Negative E>) o;\n" +
		"    }    \n" +
		"    X<E> baz(Object o) {\n" +
		"    	return (@Marker AX<E>) null;\n" +
		"    }\n" +
		"    X<String> baz2(BX bx) {\n" +
		"    	return (@Marker @SingleMember(10) X<String>) bx;\n" +
		"    }\n" +
		"}\n" +
		"@Normal(value = 1) class AX<@Marker F> extends @Marker X<@SingleMember(10)F> {}\n" +
		"@Normal(value = 2) class BX extends @Marker @SingleMember(1) AX<@Readonly String> {}\n";
	String expectedUnitToString =
		"class X<E> {\n" +
		"  X() {\n" +
		"    super();\n" +
		"  }\n" +
		"  X<@Readonly String> bar() {\n" +
		"    return (@Marker AX<@Readonly String>) new X<@Readonly String>();\n" +
		"  }\n" +
		"  X<@Readonly String> bar(Object o) {\n" +
		"    return (@Marker AX<@Readonly String>) o;\n" +
		"  }\n" +
		"  X<@Negative E> foo(Object o) {\n" +
		"    return (@Marker @Normal(value = 10) AX<@Negative E>) o;\n" +
		"  }\n" +
		"  X<E> baz(Object o) {\n" +
		"    return (@Marker AX<E>) null;\n" +
		"  }\n" +
		"  X<String> baz2(BX bx) {\n" +
		"    return (@Marker @SingleMember(10) X<String>) bx;\n" +
		"  }\n" +
		"}\n" +
		"@Normal(value = 1) class AX<@Marker F> extends @Marker X<@SingleMember(10) F> {\n" +
		"  AX() {\n" +
		"    super();\n" +
		"  }\n" +
		"}\n" +
		"@Normal(value = 2) class BX extends @Marker @SingleMember(1) AX<@Readonly String> {\n" +
		"  BX() {\n" +
		"    super();\n" +
		"  }\n" +
		"}\n";
	checkParse(CHECK_ALL & ~CHECK_INDEXING_PARSER, source.toCharArray(), null, "test0102", expectedUnitToString );
}

