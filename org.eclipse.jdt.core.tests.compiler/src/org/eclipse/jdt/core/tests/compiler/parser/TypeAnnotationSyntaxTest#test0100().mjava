// To test Parser.consumeArrayCreationExpressionWithoutInitializer() with Type Annotations
public void test0100() throws IOException {
	String source =
		"import java.util.*;\n" +
		"class X {\n" +
		"    public Integer[] getTypes() {\n" +
		"        List<@Positive Integer> list;\n" +
		"		 list = new ArrayList<@Positive Integer>();\n" +
		"        return list == null \n" +
		"            ? new @Positive Integer @SingleMember(0) [0] \n" +
		"            : list.toArray(new @Positive Integer @Marker [list.size()]);\n" +
		"    }\n" +
		"}";
	String expectedUnitToString =
		"import java.util.*;\n" +
		"class X {\n" +
		"  X() {\n" +
		"    super();\n" +
		"  }\n" +
		"  public Integer[] getTypes() {\n" +
		"    List<@Positive Integer> list;\n" +
		"    list = new ArrayList<@Positive Integer>();\n" +
		"    return ((list == null) ? new @Positive Integer @SingleMember(0) [0] : list.toArray(new @Positive Integer @Marker [list.size()]));\n" +
		"  }\n" +
		"}\n";
	checkParse(source.toCharArray(), null, "test0100", expectedUnitToString );
}

