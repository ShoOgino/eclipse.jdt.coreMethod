// https://bugs.eclipse.org/bugs/show_bug.cgi?id=426633, [1.8][compiler] Compiler generates code that invokes inapplicable method.
public void test426633() {
	runNegativeTest(
		new String[] {
			"X.java",
			"interface I {\n" +
			"	<T> void foo (T... p);\n" +
			"}\n" +
			"abstract class A implements I {\n" +
			"	public void foo(Object [] p) {}\n" +
			"}\n" +
			"public class X extends A {\n" +
			"	public static void main(String[] args) {\n" +
			"		A a = new X();\n" +
			"		a.foo(\"hello\", \"world\");\n" +
			"	}\n" +
			"}\n"

		},
		this.complianceLevel >= ClassFileConstants.JDK1_8 ?
			"----------\n" +
			"1. WARNING in X.java (at line 2)\n" +
			"	<T> void foo (T... p);\n" +
			"	                   ^\n" +
			"Type safety: Potential heap pollution via varargs parameter p\n" +
			"----------\n" +
			"2. WARNING in X.java (at line 5)\n" +
			"	public void foo(Object [] p) {}\n" +
			"	            ^^^^^^^^^^^^^^^^\n" +
			"Varargs methods should only override or be overridden by other varargs methods unlike A.foo(Object[]) and I.foo(Object...)\n" +
			"----------\n" +
			"3. ERROR in X.java (at line 10)\n" +
			"	a.foo(\"hello\", \"world\");\n" +
			"	  ^^^\n" +
			"The method foo(Object[]) in the type A is not applicable for the arguments (String, String)\n" +
			"----------\n" :
				this.complianceLevel >= ClassFileConstants.JDK1_7 ?
					"----------\n" +
					"1. WARNING in X.java (at line 2)\n" +
					"	<T> void foo (T... p);\n" +
					"	                   ^\n" +
					"Type safety: Potential heap pollution via varargs parameter p\n" +
					"----------\n" +
					"2. WARNING in X.java (at line 5)\n" +
					"	public void foo(Object [] p) {}\n" +
					"	            ^^^^^^^^^^^^^^^^\n" +
					"Varargs methods should only override or be overridden by other varargs methods unlike A.foo(Object[]) and I.foo(Object...)\n" +
					"----------\n" :
						"----------\n" +
						"1. WARNING in X.java (at line 5)\n" +
						"	public void foo(Object [] p) {}\n" +
						"	            ^^^^^^^^^^^^^^^^\n" +
						"Varargs methods should only override or be overridden by other varargs methods unlike A.foo(Object[]) and I.foo(Object...)\n" +
						"----------\n");
}

