/*
 * Check that indirect member type allocation is denied access to compatible enclosing instance available as constructor argument
 */
public void test104() {
	this.runNegativeTest(
		new String[] {
			"X.java",
			"public class X {\n" +
			"	X(Object o) {\n" +
			"	}\n" +
			"	public static void main(String[] args) {\n" +
			"		new X(null).new M(null);\n" +
			"		System.out.println(\"SUCCESS\");\n" +
			"	}\n" +
			"	class N extends X {\n" +
			"		N() {\n" +
			"			super(null); //1\n" +
			"		}\n" +
			"		N(Object o) {\n" +
			"			super(new M());//2\n" +
			"		}\n" +
			"	}\n" +
			" 	class M extends X {\n" +
			"		M() {\n" +
			"			super(null); //3\n" +
			"		}\n" +
			"		M(Object o) {\n" +
			"			super(new M());//4\n" +
			"		}\n" +
			"	}\n" +
			"}\n"
		},
		"----------\n" +
		"1. ERROR in X.java (at line 13)\n" +
		"	super(new M());//2\n" +
		"	      ^^^^^^^\n" +
		"No enclosing instance of type X is available due to some intermediate constructor invocation\n" +
		"----------\n" +
		"2. ERROR in X.java (at line 21)\n" +
		"	super(new M());//4\n" +
		"	      ^^^^^^^\n" +
		"No enclosing instance of type X is available due to some intermediate constructor invocation\n" +
		"----------\n");
}

