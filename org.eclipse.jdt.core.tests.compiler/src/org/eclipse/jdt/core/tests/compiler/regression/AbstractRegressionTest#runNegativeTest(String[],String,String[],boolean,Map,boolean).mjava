/**
 * Log contains all problems (warnings+errors)
 */
protected void runNegativeTest(String[] testFiles, String expectedProblemLog, String[] classLib, boolean shouldFlushOutputDirectory, Map customOptions, boolean generateOutput) {

	if (shouldFlushOutputDirectory) Util.flushDirectoryContent(new File(OUTPUT_DIR));

	IProblemFactory problemFactory = getProblemFactory();
	Requestor requestor = new Requestor(problemFactory, OUTPUT_DIR.endsWith(File.separator) ? OUTPUT_DIR : OUTPUT_DIR + File.separator, generateOutput);
	Map options = getCompilerOptions();
	if (customOptions != null){
		options.putAll(customOptions);
	}
	Compiler batchCompiler =
		new Compiler(
			getNameEnvironment(new String[] {}, classLib),
			getErrorHandlingPolicy(),
			options,
			requestor,
			problemFactory);
	batchCompiler.compile(compilationUnits(testFiles)); // compile all files together
	String computedProblemLog = requestor.problemLog.toString();
	if (!expectedProblemLog.equals(computedProblemLog)){
		System.out.println(this.getClass().getName() + '#' + this.getName());
	 	System.out.println(Util.displayString(computedProblemLog, 2));
	 	for (int i = 0; i < testFiles.length; i+=2) {
	 		System.out.print(testFiles[i]);
	 		System.out.println(" ["); //$NON-NLS-1$
	 		System.out.println(testFiles[i+1]);
	 		System.out.println("]"); //$NON-NLS-1$
	 	}
	}
	assertEquals(
		"Invalid problem log ",
		expectedProblemLog,
		computedProblemLog);
}

