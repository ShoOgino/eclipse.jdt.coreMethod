// test ground target type with wildcards left in non parameter positions.
public void testGroundTargetTypeWithWithWildcards() {
	this.runNegativeTest(
		new String[] {
			"X.java",
			"class A {}\n" +
			"class B {}\n" +
			"class C {}\n" +
			"class Y extends C {}\n" +
			"interface I<R, S, T> {\n" +
			"    T m(R r, S s);\n" +
			"}\n" +
			"public class X extends A {\n" +
			"    Object m(I<? extends A, ? extends B, ? extends C> i) {\n" +
			"    	return m((X x1, X x2) -> { return new Y(); });\n" +
			"    }\n" +
			"}\n",
		}, 
		"----------\n" + 
		"1. ERROR in X.java (at line 10)\n" + 
		"	return m((X x1, X x2) -> { return new Y(); });\n" + 
		"	       ^\n" + 
		"The method m(I<? extends A,? extends B,? extends C>) in the type X is not applicable for the arguments ((X x1, X x2) -> {})\n" + 
		"----------\n" + 
		"2. ERROR in X.java (at line 10)\n" + 
		"	return m((X x1, X x2) -> { return new Y(); });\n" + 
		"	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
		"Type mismatch: cannot convert from I<X,X,? extends C> to I<? extends A,? extends B,? extends C>\n" + 
		"----------\n");
}

