	public void test055e_codeblocks_exceptionParameterMultiCatch() throws Exception {
		this.runConformTest(
			new String[] {
				"X.java",
				"import java.lang.annotation.Target;\n" +
				"import java.lang.annotation.Retention;\n" +
				"import static java.lang.annotation.ElementType.*;\n" +
				"import static java.lang.annotation.RetentionPolicy.*;\n" +
				"class Exc1 extends RuntimeException {" +
				"    private static final long serialVersionUID = 1L;\n" +
				"}\n"+
				"class Exc2 extends RuntimeException {" +
				"    private static final long serialVersionUID = 1L;\n" +
				"}\n"+
				"class Exc3 extends RuntimeException {" +
				"    private static final long serialVersionUID = 1L;\n" +
				"}\n"+
				"public class X {\n" +
				"	public static void main(String[] args) {\n" +
				"		try {\n" +
				"			System.out.println(42);\n" +
				"		} catch(@A(1) @B(2) Exc1 | Exc2 | @A(3) @B(4) Exc3 t) {\n" +
				"			t.printStackTrace();\n" +
				"		}\n" +
				"	}\n" +
				"}",

				"A.java",
				"import java.lang.annotation.Target;\n" +
				"import static java.lang.annotation.ElementType.*;\n" +
				"import java.lang.annotation.Retention;\n" +
				"import static java.lang.annotation.RetentionPolicy.*;\n" +
				"@Target(TYPE_USE)\n" +
				"@Retention(RUNTIME)\n" +
				"@interface A {\n" +
				"	int value() default 99;\n" +
				"}\n",

				"B.java",
				"import java.lang.annotation.Target;\n" +
				"import static java.lang.annotation.ElementType.*;\n" +
				"import java.lang.annotation.Retention;\n" +
				"import static java.lang.annotation.RetentionPolicy.*;\n" +
				"@Target(TYPE_USE)\n" +
				"@Retention(RUNTIME)\n" +
				"@interface B {\n" +
				"	int value() default 99;\n" +
				"}\n",
		},
		"42");
		String expectedOutput =
			"    RuntimeVisibleTypeAnnotations: \n" +
			"      #45 @A(\n" +
			"        #46 value=(int) 1 (constant type)\n" +
			"        target type = 0x42 EXCEPTION_PARAMETER\n" +
			"        exception table index = 0\n" +
			"      )\n" +
			"      #48 @B(\n" +
			"        #46 value=(int) 2 (constant type)\n" +
			"        target type = 0x42 EXCEPTION_PARAMETER\n" +
			"        exception table index = 0\n" +
			"      )\n" +
			"      #45 @A(\n" +
			"        #46 value=(int) 3 (constant type)\n" +
			"        target type = 0x42 EXCEPTION_PARAMETER\n" +
			"        exception table index = 2\n" +
			"      )\n" +
			"      #48 @B(\n" +
			"        #46 value=(int) 4 (constant type)\n" +
			"        target type = 0x42 EXCEPTION_PARAMETER\n" +
			"        exception table index = 2\n" +
			"      )\n";
		checkDisassembledClassFile(OUTPUT_DIR + File.separator + "X.class", "X", expectedOutput, ClassFileBytesDisassembler.SYSTEM);
	}

