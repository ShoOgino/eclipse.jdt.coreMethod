	// an outer and inner class both have a type parameter,
	// client instantiates with nullable/nonnull actual type arguments
	public void test_nestedType_01() {
		runNegativeTestWithLibs(
			new String[] {
				"A.java",
				  "import org.eclipse.jdt.annotation.*;\n" +
				  "public class A<X> {\n" +
				  "    public class I<Y> {\n" +
				  "        X anX;\n" +
				  "        public X foo(Y l) {\n" +
				  "            return anX;\n" +
				  "        }\n" +
				  "        public I(X x) {\n" +
				  "            anX = x;\n" +
				  "        }\n" +
				  "    }\n" +
				  "    void bar(A<@Nullable Object>.I<@NonNull Object> i) {\n" + // legal instantiation
				  "        @NonNull Object o = i.foo(null); // problems: argument and assignment violate null contracts\n" +
				  "    }\n" +
				  "}\n"},
			"----------\n" +
			"1. ERROR in A.java (at line 13)\n" +
			"	@NonNull Object o = i.foo(null); // problems: argument and assignment violate null contracts\n" +
			"	                    ^^^^^^^^^^^\n" +
			"Null type mismatch (type annotations): required '@NonNull Object' but this expression has type '@Nullable Object'\n" +
			"----------\n" +
			"2. ERROR in A.java (at line 13)\n" +
			"	@NonNull Object o = i.foo(null); // problems: argument and assignment violate null contracts\n" +
			"	                          ^^^^\n" +
			"Null type mismatch: required \'@NonNull Object\' but the provided value is null\n" +
			"----------\n");
	}

