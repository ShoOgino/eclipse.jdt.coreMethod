	public void test048() {
		try {
			String sourceA =
				"public class A {\n" +
				"\n" +
				"	static int foo(boolean bool) {\n" +
				"	  int j;\n" +
				"	  try {\n" +
				"	    if (bool) return 1;\n" +
				"	    j = 2;\n" +
				"	  } finally {\n" +
				"	    j = 3;\n" +
				"	  }\n" +
				"	  return j;\n" +
				"	}\n" +
				"\n" +
				"	public static void main(String[] args) {\n" +
				"		foo(false);\n" +
				"	}\n" +
				"}";
			compileAndDeploy(sourceA, "A");
			IClassFileReader classFileReader = ToolFactory.createDefaultClassFileReader(EVAL_DIRECTORY + File.separator + "A.class", IClassFileReader.ALL);
			IMethodInfo[] methods = classFileReader.getMethodInfos();
			assertEquals("wrong size", 3, methods.length);
			IMethodInfo methodInfo = methods[1];
			assertEquals("wrong name", "foo", new String(methodInfo.getName()));
			ICodeAttribute codeAttribute = methodInfo.getCodeAttribute();
			assertEquals("Wrong size", 3, codeAttribute.getExceptionTableLength());
			IExceptionTableEntry[] entries = codeAttribute.getExceptionTable();
			// any exception handler
			assertEquals("Wrong index", 0, entries[0].getCatchTypeIndex());
			assertEquals("Wrong index", 0, entries[1].getCatchTypeIndex());
			assertEquals("Wrong index", 0, entries[2].getCatchTypeIndex());
			
			assertEquals("Wrong startpc", 0, entries[0].getStartPC());
			assertEquals("Wrong endpc", 7, entries[0].getEndPC());

			assertEquals("Wrong startpc", 9, entries[1].getStartPC());
			assertEquals("Wrong endpc", 14, entries[1].getEndPC());

			assertEquals("Wrong startpc", 25, entries[2].getStartPC());
			assertEquals("Wrong endpc", 28, entries[2].getEndPC());
			
			ILineNumberAttribute lineNumberAttribute = codeAttribute.getLineNumberAttribute();
			if (lineNumberAttribute != null) {
				int[][] lineEntries = lineNumberAttribute.getLineNumberTable();
				assertNotNull("No entries", lineEntries);
				assertEquals("wrong size", 7, lineEntries.length);
				lineEntries[0][0] = 0;
				lineEntries[0][1] = 6;
				lineEntries[1][0] = 9;
				lineEntries[1][1] = 7;
				lineEntries[2][0] = 14;
				lineEntries[2][1] = 8;
				lineEntries[3][0] = 21;
				lineEntries[3][1] = 9;
				lineEntries[4][0] = 23;
				lineEntries[4][1] = 10;
				lineEntries[5][0] = 25;
				lineEntries[5][1] = 8;
				lineEntries[6][0] = 28;
				lineEntries[6][1] = 11;
			}
		} finally {
			removeTempClass("A");
		}
	}			

