public void test01() {

	String s = 
		"public class X {\n" +
		"public String getTexts(int i) [] {\n" +
		"		 String[] texts = new String[1];\n" +
		"		 return texts; \n" +
		"}\n" +
		"}";

	String testName = "test01";

	char[] source = s.toCharArray();
	reset();
	DocumentElementParser parser = 
		new DocumentElementParser(new IDocumentElementRequestor() {
			public void acceptImport(int declarationStart, int declarationEnd, int[] javaDocPositions, char[] name, int nameStartPosition, boolean onDemand, int modifiers) {
			}
			public void acceptInitializer(int declarationStart, int declarationEnd, int[] javaDocPositions, int modifiers, int modifiersStart, int bodyStart, int bodyEnd) {
			}
			public void acceptLineSeparatorPositions(int[] positions) {
			}
			public void acceptPackage(int declarationStart, int declarationEnd, int[] javaDocPositions, char[] name, int nameStartPosition) {
			}
			public void acceptProblem(IProblem problem) {
			}
			public void enterClass(int declarationStart, int[] javaDocPositions, int modifiers, int modifiersStart, int classStart, char[] name, int nameStart, int nameEnd, char[] superclass, int superclassStart, int superclassEnd, char[][] superinterfaces, int[] superinterfaceStarts, int[] superinterfaceEnds, int bodyStart) {
			}
			public void enterCompilationUnit() {
			}
			public void enterConstructor(int declarationStart, int[] javaDocPositions, int modifiers, int modifiersStart, char[] name, int nameStart, int nameEnd, char[][] parameterTypes, int[] parameterTypeStarts, int[] parameterTypeEnds, char[][] parameterNames, int[] parameterNameStarts, int[] parameterNameEnds, int parametersEnd, char[][] exceptionTypes, int[] exceptionTypeStarts, int[] exceptionTypeEnds, int bodyStart) {
			}
			public void enterField(int declarationStart, int[] javaDocPositions, int modifiers, int modifiersStart, char[] type, int typeStart, int typeEnd, int typeDimensionCount, char[] name, int nameStart, int nameEnd, int extendedTypeDimensionCount, int extendedTypeDimensionEnd) {
			}
			public void enterInterface(int declarationStart, int[] javaDocPositions, int modifiers, int modifiersStart, int interfaceStart, char[] name, int nameStart, int nameEnd, char[][] superinterfaces, int[] superinterfaceStarts, int[] superinterfaceEnds, int bodyStart) {
			}
			public void exitClass(int bodyEnd, int declarationEnd) {
			}
			public void exitCompilationUnit(int declarationEnd) {
			}
			public void exitConstructor(int bodyEnd, int declarationEnd) {
			}
			public void exitField(int bodyEnd, int declarationEnd) {
			}
			public void exitInterface(int bodyEnd, int declarationEnd) {
			}
			public void exitMethod(int bodyEnd, int declarationEnd) {
			}
			public void enterMethod(int declarationStart,int[] javaDocPositions,int modifiers,int modifiersStart,char[] returnType,int returnTypeStart,int returnTypeEnd,int returnTypeDimensionCount,char[] name,int nameStart,int nameEnd,char[][] parameterTypes,int[] parameterTypeStarts,int[] parameterTypeEnds,char[][] parameterNames,int[] parameterNameStarts,int[] parameterNameEnds,int parametersEnd,int extendedReturnTypeDimensionCount,int extendedReturnTypeDimensionEnd,char[][] exceptionTypes,int[] exceptionTypeStarts,int[] exceptionTypeEnds,int bodyStart) {
				if (CharOperation.equals(name, "getTexts".toCharArray())) {
					assertEquals("Wrong return type", "String[]", new String(returnType));
				}
			}
		}, new DefaultProblemFactory(Locale.getDefault()), new CompilerOptions(getCompilerOptions())); 

	ICompilationUnit sourceUnit = new CompilationUnit(source, testName, null);

	parser.parseCompilationUnit(sourceUnit);
}

