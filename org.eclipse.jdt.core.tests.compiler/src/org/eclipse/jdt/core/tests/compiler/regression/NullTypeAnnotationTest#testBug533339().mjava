public void testBug533339() {
	Runner runner = new Runner();
	runner.testFiles =
		new String[] {
			"Test.java",
			"import org.eclipse.jdt.annotation.NonNull;\n" + 
			"import org.eclipse.jdt.annotation.Nullable;\n" + 
			"\n" + 
			"public class Test {\n" + 
			"\n" + 
			"	interface Foo {\n" + 
			"\n" + 
			"		@Nullable\n" + 
			"		String getString();\n" + 
			"	}\n" + 
			"\n" + 
			"	class Bar {\n" + 
			"\n" + 
			"		Bar(@NonNull String s) {\n" + 
			"		}\n" + 
			"	}\n" + 
			"\n" + 
			"	Bar hasWarning(Foo foo) {\n" + 
			"		@NonNull String s = checkNotNull(foo.getString());\n" + 
			"		return new Bar(s);// Null type mismatch: required '@NonNull String' but the provided value is inferred as @Nullable\n" + 
			"	}\n" + 
			"\n" + 
			"	Bar hasNoWarning(Foo foo) {\n" + 
			"		return new Bar(checkNotNull(foo.getString()));// no warning when s is inlined\n" + 
			"	}\n" +
			"	static <T> T checkNotNull(T reference) {\n" +
			"		if (reference == null) throw new NullPointerException();\n" +
			"		return reference;\n" +
			"	}\n" + 
			"}\n"
		};
	runner.classLibraries = this.LIBS;
	runner.expectedCompilerLog =
		"----------\n" + 
		"1. WARNING in Test.java (at line 19)\n" + 
		"	@NonNull String s = checkNotNull(foo.getString());\n" + 
		"	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
		"Null type safety (type annotations): The expression of type \'String\' needs unchecked conversion to conform to \'@NonNull String\'\n" + 
		"----------\n" + 
		"2. WARNING in Test.java (at line 24)\n" + 
		"	return new Bar(checkNotNull(foo.getString()));// no warning when s is inlined\n" + 
		"	               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
		"Null type safety (type annotations): The expression of type \'String\' needs unchecked conversion to conform to \'@NonNull String\'\n" + 
		"----------\n";
	runner.javacTestOptions = JavacTestOptions.Excuse.EclipseHasSomeMoreWarnings;
	runner.runWarningTest();
}

