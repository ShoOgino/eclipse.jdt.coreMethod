public void test1395()  throws Exception {
	this.runConformTest(
		new String[] {
			"X.java",
			"public class X<T extends SubX2<T>> {\n" +
			"	T sx1(){return null;}\n" +
			"	void foo() {\n" +
			"		this.sx1().sx2().t().getClass();\n" +
			"	}\n" +
			"}\n" +
			"interface X1<T extends X2<T>> {\n" +
			"}\n" +
			"abstract class SubX1<T extends X2<T>> implements X1<T> {\n" +
			"	T sx2(){return null;}\n" +
			"}\n" +
			"interface X2<T extends X2<T>> extends X1<T>{\n" +
			"}\n" +
			"abstract class SubX2<T extends X2<T>> extends SubX1<T> implements X2<T> {\n" +
			"	T t(){return null;}\n" +
			"}\n",
		},
		"");
	String expectedOutput =
		"  // Method descriptor #6 ()V\n" +
		"  // Stack: 1, Locals: 1\n" +
		"  void foo();\n" +
		"     0  aload_0 [this]\n" +
		"     1  invokevirtual X.sx1() : SubX2 [21]\n" +
		"     4  invokevirtual SubX2.sx2() : X2 [23]\n" +
		"     7  checkcast SubX2 [24]\n" +
		"    10  invokevirtual SubX2.t() : X2 [29]\n" +
		"    13  checkcast SubX2 [24]\n" +
		"    16  invokevirtual java.lang.Object.getClass() : java.lang.Class [32]\n" +
		"    19  pop\n" +
		"    20  return\n" +
		"      Line numbers:\n" +
		"        [pc: 0, line: 4]\n" +
		"        [pc: 20, line: 5]\n" +
		"      Local variable table:\n" +
		"        [pc: 0, pc: 21] local: this index: 0 type: X\n" +
		"      Local variable type table:\n" +
		"        [pc: 0, pc: 21] local: this index: 0 type: X<T>\n";

	File f = new File(OUTPUT_DIR + File.separator + "X.class");
	byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
	ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
	String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
	int index = result.indexOf(expectedOutput);
	if (index == -1 || expectedOutput.length() == 0) {
		System.out.println(Util.displayString(result, 3));
	}
	if (index == -1) {
		assertEquals("Wrong contents", expectedOutput, result);
	}
}

