// null analysis -- case for static final field initialized inside static block with different values
// check if the resetting works properly i.e. null status for constant fields should not be 
// reset on method calls. 
// Boundary condition: constant field <boundary> local
public void testBug247564b_11() {
	Map compilerOptions = getCompilerOptions();
	compilerOptions.put(CompilerOptions.OPTION_ReportNonStaticAccessToStatic, CompilerOptions.IGNORE);
	this.runNegativeTest(
		false,
		new String[] {
			"X.java",
			"public class X {\n" +
			"Object field0, \n" +
			"field1, field2, field3, field4, \n" +
			"field5, field6, field7, field8, \n" +
			"field9, field10, field11, field12, \n" +
			"field13, field14, field15, field16, \n" +
			"field17, field18, field19, field20, \n" +
			"field21, field22, field23, field24, \n" +
			"field25, field26, field27, field28, \n" +
			"field29, field30, field31, field32, \n" +
			"field33, field34, field35, field36, \n" +
			"field37, field38, field39, field40, \n" +
			"field41, field42, field43, field44, \n" +
			"field45, field46, field47, field48, \n" +
			"field49, field50, field51, field52, \n" +
			"field53, field54, field55, field56, \n" +
			"field57, field58, field59, field60, \n" +
			"field61;\n" +
			"static final Object static62 = null;\n" +
			"Object field63;" +
			"  void foo1(Object local64) {\n" +
			"	 if (static62 == null) { // redundant\n" +
			"		static62.toString(); // report NPE\n" +
			"	 }\n" +
			"	 if (field63 == null) {\n" +
			"		field63.toString(); // report NPE\n" +
			"	 }\n" +
			"	 if (local64 == null) {\n" +
			"		local64.toString(); // report NPE\n" +
			"	 }\n" +
			"	 if (static62 == null) { // always false\n" + // because we're past static64.toString()
			"       this.toString(); // dead\n" +
			"		static62.toString();\n" +
			"	 }\n" +
			"	 if (field63 == null) {\n" +
			"       this.toString(); //\n" +
			"		field63.toString();\n" + // wiped by method call
			"	 }\n" +
			"	 if (local64 == null) { // alwayws false\n" + // because we're past local64.toString()
			"       this.toString(); // dead\n" +
			"		local64.toString();\n" +
			"	 }\n" +
			"  }\n" +
			"}\n"},
		null,
		compilerOptions,
		"----------\n" + 
		"1. ERROR in X.java (at line 21)\n" + 
		"	if (static62 == null) { // redundant\n" + 
		"	    ^^^^^^^^\n" + 
		"Redundant null check: The field static62 can only be null at this location\n" + 
		"----------\n" + 
		"2. ERROR in X.java (at line 22)\n" + 
		"	static62.toString(); // report NPE\n" + 
		"	^^^^^^^^\n" + 
		"Null pointer access: The field static62 can only be null at this location\n" + 
		"----------\n" + 
		"3. ERROR in X.java (at line 25)\n" + 
		"	field63.toString(); // report NPE\n" + 
		"	^^^^^^^\n" + 
		"Potential null pointer access: The field field63 may be null at this location\n" + 
		"----------\n" + 
		"4. ERROR in X.java (at line 28)\n" + 
		"	local64.toString(); // report NPE\n" + 
		"	^^^^^^^\n" + 
		"Null pointer access: The variable local64 can only be null at this location\n" + 
		"----------\n" + 
		"5. ERROR in X.java (at line 30)\n" + 
		"	if (static62 == null) { // always false\n" + 
		"	    ^^^^^^^^\n" + 
		"Null comparison always yields false: The field static62 cannot be null at this location\n" + 
		"----------\n" + 
		"6. WARNING in X.java (at line 30)\n" + 
		"	if (static62 == null) { // always false\n" + 
		"       this.toString(); // dead\n" + 
		"		static62.toString();\n" + 
		"	 }\n" + 
		"	                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
		"Dead code\n" + 
		"----------\n" + 
		"7. ERROR in X.java (at line 38)\n" + 
		"	if (local64 == null) { // alwayws false\n" + 
		"	    ^^^^^^^\n" + 
		"Null comparison always yields false: The variable local64 cannot be null at this location\n" + 
		"----------\n" + 
		"8. WARNING in X.java (at line 38)\n" + 
		"	if (local64 == null) { // alwayws false\n" + 
		"       this.toString(); // dead\n" + 
		"		local64.toString();\n" + 
		"	 }\n" + 
		"	                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
		"Dead code\n" + 
		"----------\n",
		JavacTestOptions.Excuse.EclipseWarningConfiguredAsError);
}

