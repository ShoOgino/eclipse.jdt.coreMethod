	public void test071_codeblocks_constructorInvocationTypeArgument() throws Exception {
		this.runConformTest(
			new String[] {
				"A.java",
				"import java.lang.annotation.Target;\n" +
				"import static java.lang.annotation.ElementType.*;\n" +
				"import java.lang.annotation.Retention;\n" +
				"import static java.lang.annotation.RetentionPolicy.*;\n" +
				"@Target(TYPE_USE)\n" +
				"@Retention(RUNTIME)\n" +
				"@interface A {\n" +
				"	String value() default \"default\";\n" +
				"}\n",
				"B.java",
				"import java.lang.annotation.Target;\n" +
				"import static java.lang.annotation.ElementType.*;\n" +
				"import java.lang.annotation.Retention;\n" +
				"import static java.lang.annotation.RetentionPolicy.*;\n" +
				"@Target(TYPE_USE)\n" +
				"@Retention(CLASS)\n" +
				"@interface B {\n" +
				"	int value() default -1;\n" +
				"}",
				"X.java",
				"public class X {\n" +
				"	<T> X(T t) {\n" +
				"	}\n" +
				"	public Object foo() {\n" +
				"		X x = new <@A @B(1) String>X(null);\n" +
				"		return x;\n" +
				"	}\n" +
				"}",
		},
		"");
		String expectedOutput =
			"    RuntimeInvisibleTypeAnnotations: \n" +
			"      #27 @B(\n" +
			"        #28 value=(int) 1 (constant type)\n" +
			"        target type = 0x48 CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT\n" +
			"        offset = 5\n" +
			"        type argument index = 0\n" +
			"      )\n" +
			"    RuntimeVisibleTypeAnnotations: \n" +
			"      #31 @A(\n" +
			"        target type = 0x48 CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT\n" +
			"        offset = 5\n" +
			"        type argument index = 0\n" +
			"      )\n";
		checkDisassembledClassFile(OUTPUT_DIR + File.separator + "X.class", "X", expectedOutput, ClassFileBytesDisassembler.SYSTEM);
	}

