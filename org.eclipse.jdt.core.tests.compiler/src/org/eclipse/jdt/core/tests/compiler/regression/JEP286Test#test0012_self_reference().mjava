public void test0012_self_reference() throws IOException {
	
	// BTW: This will give a VerifyError: int a = ((java.util.concurrent.Callable<Integer>)(() -> true ? 1 : a)).call();
	// The cases are tested. a is a simple case, with plain usage in the same scope. b is used in a nested scope.
	// c and d are shadowed by the nested definitions.
	this.runNegativeTest(
			new String[] {
				"X.java",
				"public class X {\n" + 
				"	public void main(String [] args) {\n" +
				"		var a = 42 + a;\n" +
				"		var b = ((java.util.concurrent.Callable<Integer>)(() -> true ? 1 : b)).call();\n" +
				"       var c = new java.util.concurrent.Callable<Integer>() {\n" + 
				"           public Integer call() {\n" + 
				"               int c = 42; return c;\n" + 
				"           }\n" + 
				"       }.call();" +
				"       var d = new java.util.concurrent.Callable<Integer>() {\n" +
				"           int d = 42;\n" +
				"           public Integer call() {\n" + 
				"               return d;\n" + 
				"           }\n" + 
				"       }.call();" +
				"	}\n" + 
				"}\n"
			},
			"----------\n" +
			"1. ERROR in X.java (at line 3)\n" +
			"	var a = 42 + a;\n" +
			"	    ^\n" +
			"Declaration using 'var' may not contain references to itself\n" +
			"----------\n" +
			"2. ERROR in X.java (at line 4)\n" +
			"	var b = ((java.util.concurrent.Callable<Integer>)(() -> true ? 1 : b)).call();\n" +
			"	    ^\n" +
			"Declaration using 'var' may not contain references to itself\n" +
			"----------\n" +
			"3. WARNING in X.java (at line 7)\n" +
			"	int c = 42; return c;\n" +
			"	    ^\n" +
		    "The local variable c is hiding another local variable defined in an enclosing scope\n" +
		    	"----------\n"+
			"3. WARNING in X.java (at line 10)\n" +
			"	int d = 42;\n" +
			"	    ^\n" +
		    "The field new Callable<Integer>(){}.d is hiding another local variable defined in an enclosing scope\n" +
		    	"----------\n");
}

