	public void test070d_codeblocks_castDoubleIntersectionCastInExpression() throws Exception {
		this.runConformTest(
			new String[] {
				"X.java",
			"import java.io.*;\n" +
				"public class X {\n" + 
				"   public void foo(Object o) {\n" +
				"     System.out.println(123);\n" +
				"	  I i = (@B(1) I & J)(K & @B(2) L) o;\n" +
			    "   }\n" +
				"}\n" +
				"interface I {}\n" +
				"interface J {}\n" +
				"interface K {}\n" +
				"interface L {}\n",
				
				"B.java",
				"import java.lang.annotation.*;\n" + 
				"@Target(ElementType.TYPE_USE)\n" + 
				"@Retention(RetentionPolicy.RUNTIME)\n" + 
				"@interface B {\n" + 
				"	int value() default 1;\n" + 
				"}\n",
		},
		"");
		String expectedOutput =
				"  public void foo(java.lang.Object o);\n" + 
				"     0  getstatic java.lang.System.out : java.io.PrintStream [16]\n" + 
				"     3  bipush 123\n" + 
				"     5  invokevirtual java.io.PrintStream.println(int) : void [22]\n" + 
				"     8  aload_1 [o]\n" + 
				"     9  checkcast L [28]\n" + 
				"    12  checkcast K [30]\n" + 
				"    15  checkcast J [32]\n" + 
				"    18  checkcast I [34]\n" + 
				"    21  astore_2 [i]\n" + 
				"    22  return\n" + 
				"      Line numbers:\n" + 
				"        [pc: 0, line: 4]\n" + 
				"        [pc: 8, line: 5]\n" + 
				"        [pc: 22, line: 6]\n" + 
				"      Local variable table:\n" + 
				"        [pc: 0, pc: 23] local: this index: 0 type: X\n" + 
				"        [pc: 0, pc: 23] local: o index: 1 type: java.lang.Object\n" + 
				"        [pc: 22, pc: 23] local: i index: 2 type: I\n" + 
				"    RuntimeVisibleTypeAnnotations: \n" + 
				"      #41 @B(\n" + 
				"        #42 value=(int) 2 (constant type)\n" + 
				"        target type = 0x47 CAST\n" + 
				"        offset = 9\n" + 
				"        type argument index = 1\n" + 
				"      )\n" + 
				"      #41 @B(\n" + 
				"        #42 value=(int) 1 (constant type)\n" + 
				"        target type = 0x47 CAST\n" + 
				"        offset = 18\n" + 
				"        type argument index = 0\n" + 
				"      )\n";
		checkDisassembledClassFile(OUTPUT_DIR + File.separator + "X.class", "X", expectedOutput, ClassFileBytesDisassembler.SYSTEM);
	}

