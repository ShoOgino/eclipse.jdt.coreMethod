public void test2055_addInitializationsFrom() {
	long [][][] testData = {
		{{0,0,0,0},{0,0,0,0},{0,0,0,0}},
		{{0,0,0,0},{0,0,0,1},{0,0,0,1}},
		{{0,0,0,0},{0,0,1,0},{0,0,1,0}},
		{{0,0,0,0},{0,0,1,1},{0,0,1,1}},
		{{0,0,0,0},{0,1,0,0},{0,1,0,0}},
		{{0,0,0,0},{0,1,1,0},{0,1,1,0}},
		{{0,0,0,0},{1,0,0,1},{1,0,0,1}},
		{{0,0,0,0},{1,0,1,0},{1,0,1,0}},
		{{0,0,0,0},{1,0,1,1},{1,0,1,1}},
		{{0,0,0,0},{1,1,0,0},{1,1,0,0}},
		{{0,0,0,0},{1,1,0,1},{1,1,0,1}},
		{{0,0,0,1},{0,0,0,0},{0,0,0,1}},
		{{0,0,0,1},{0,0,0,1},{0,0,0,1}},
		{{0,0,0,1},{0,0,1,0},{0,0,1,1}},
		{{0,0,0,1},{0,0,1,1},{0,0,1,1}},
		{{0,0,0,1},{0,1,0,0},{0,1,0,0}},
		{{0,0,0,1},{0,1,1,0},{0,1,0,0}},
		{{0,0,0,1},{1,0,0,1},{1,0,0,1}},
		{{0,0,0,1},{1,0,1,0},{1,0,1,0}},
		{{0,0,0,1},{1,0,1,1},{1,0,1,1}},
		{{0,0,0,1},{1,1,0,0},{1,1,0,1}},
		{{0,0,0,1},{1,1,0,1},{1,1,0,1}},
		{{0,0,1,0},{0,0,0,0},{0,0,1,0}},
		{{0,0,1,0},{0,0,0,1},{0,0,1,1}},
		{{0,0,1,0},{0,0,1,0},{0,0,1,0}},
		{{0,0,1,0},{0,0,1,1},{0,0,1,1}},
		{{0,0,1,0},{0,1,0,0},{0,1,1,0}},
		{{0,0,1,0},{0,1,1,0},{0,1,1,0}},
		{{0,0,1,0},{1,0,0,1},{1,0,0,1}},
		{{0,0,1,0},{1,0,1,0},{1,0,1,0}},
		{{0,0,1,0},{1,0,1,1},{1,0,1,1}},
		{{0,0,1,0},{1,1,0,0},{1,1,0,0}},
		{{0,0,1,0},{1,1,0,1},{1,1,0,1}},
		{{0,0,1,1},{0,0,0,0},{0,0,1,1}},
		{{0,0,1,1},{0,0,0,1},{0,0,1,1}},
		{{0,0,1,1},{0,0,1,0},{0,0,1,1}},
		{{0,0,1,1},{0,0,1,1},{0,0,1,1}},
		{{0,0,1,1},{0,1,0,0},{0,1,1,0}},
		{{0,0,1,1},{0,1,1,0},{0,1,1,0}},
		{{0,0,1,1},{1,0,0,1},{1,0,0,1}},
		{{0,0,1,1},{1,0,1,0},{1,0,1,0}},
		{{0,0,1,1},{1,0,1,1},{1,0,1,1}},
		{{0,0,1,1},{1,1,0,0},{1,1,0,1}},
		{{0,0,1,1},{1,1,0,1},{1,1,0,1}},
		{{0,1,0,0},{0,0,0,0},{0,1,0,0}},
		{{0,1,0,0},{0,0,0,1},{0,0,0,1}},
		{{0,1,0,0},{0,0,1,0},{0,1,1,0}},
		{{0,1,0,0},{0,0,1,1},{0,0,1,1}},
		{{0,1,0,0},{0,1,0,0},{0,1,0,0}},
		{{0,1,0,0},{0,1,1,0},{0,1,1,0}},
		{{0,1,0,0},{1,0,0,1},{1,0,0,1}},
		{{0,1,0,0},{1,0,1,0},{1,0,1,0}},
		{{0,1,0,0},{1,0,1,1},{1,0,1,1}},
		{{0,1,0,0},{1,1,0,0},{1,1,0,0}},
		{{0,1,0,0},{1,1,0,1},{1,1,0,1}},
		{{0,1,1,0},{0,0,0,0},{0,1,1,0}},
		{{0,1,1,0},{0,0,0,1},{0,0,1,1}},
		{{0,1,1,0},{0,0,1,0},{0,1,1,0}},
		{{0,1,1,0},{0,0,1,1},{0,0,1,1}},
		{{0,1,1,0},{0,1,0,0},{0,1,1,0}},
		{{0,1,1,0},{0,1,1,0},{0,1,1,0}},
		{{0,1,1,0},{1,0,0,1},{1,0,0,1}},
		{{0,1,1,0},{1,0,1,0},{1,0,1,0}},
		{{0,1,1,0},{1,0,1,1},{1,0,1,1}},
		{{0,1,1,0},{1,1,0,0},{1,1,0,0}},
		{{0,1,1,0},{1,1,0,1},{1,1,0,1}},
		{{1,0,0,1},{0,0,0,0},{1,0,0,1}},
		{{1,0,0,1},{0,0,0,1},{1,0,0,1}},
		{{1,0,0,1},{0,0,1,0},{0,0,1,1}},
		{{1,0,0,1},{0,0,1,1},{0,0,1,1}},
		{{1,0,0,1},{0,1,0,0},{0,1,0,0}},
		{{1,0,0,1},{0,1,1,0},{0,1,1,0}},
		{{1,0,0,1},{1,0,0,1},{1,0,0,1}},
		{{1,0,0,1},{1,0,1,0},{1,0,1,0}},
		{{1,0,0,1},{1,0,1,1},{1,0,1,1}},
		{{1,0,0,1},{1,1,0,0},{1,1,0,1}},
		{{1,0,0,1},{1,1,0,1},{1,1,0,1}},
		{{1,0,1,0},{0,0,0,0},{1,0,1,0}},
		{{1,0,1,0},{0,0,0,1},{0,0,1,1}},
		{{1,0,1,0},{0,0,1,0},{1,0,1,0}},
		{{1,0,1,0},{0,0,1,1},{0,0,1,1}},
		{{1,0,1,0},{0,1,0,0},{1,0,1,0}},
		{{1,0,1,0},{0,1,1,0},{1,0,1,0}},
		{{1,0,1,0},{1,0,0,1},{1,0,0,1}},
		{{1,0,1,0},{1,0,1,0},{1,0,1,0}},
		{{1,0,1,0},{1,0,1,1},{1,0,1,1}},
		{{1,0,1,0},{1,1,0,0},{1,1,0,0}},
		{{1,0,1,0},{1,1,0,1},{1,1,0,1}},
		{{1,0,1,1},{0,0,0,0},{1,0,1,1}},
		{{1,0,1,1},{0,0,0,1},{1,0,1,1}},
		{{1,0,1,1},{0,0,1,0},{0,0,1,1}},
		{{1,0,1,1},{0,0,1,1},{0,0,1,1}},
		{{1,0,1,1},{0,1,0,0},{0,1,0,0}},
		{{1,0,1,1},{0,1,1,0},{0,1,1,0}},
		{{1,0,1,1},{1,0,0,1},{1,0,0,1}},
		{{1,0,1,1},{1,0,1,0},{1,0,1,0}},
		{{1,0,1,1},{1,0,1,1},{1,0,1,1}},
		{{1,0,1,1},{1,1,0,0},{1,1,0,1}},
		{{1,0,1,1},{1,1,0,1},{1,1,0,1}},
		{{1,1,0,0},{0,0,0,0},{1,1,0,0}},
		{{1,1,0,0},{0,0,0,1},{1,1,0,1}},
		{{1,1,0,0},{0,0,1,0},{0,0,1,0}},
		{{1,1,0,0},{0,0,1,1},{0,0,1,1}},
		{{1,1,0,0},{0,1,0,0},{0,1,0,0}},
		{{1,1,0,0},{0,1,1,0},{0,1,1,0}},
		{{1,1,0,0},{1,0,0,1},{1,0,0,1}},
		{{1,1,0,0},{1,0,1,0},{1,0,1,0}},
		{{1,1,0,0},{1,0,1,1},{1,0,1,1}},
		{{1,1,0,0},{1,1,0,0},{1,1,0,0}},
		{{1,1,0,0},{1,1,0,1},{1,1,0,1}},
		{{1,1,0,1},{0,0,0,0},{1,1,0,1}},
		{{1,1,0,1},{0,0,0,1},{0,0,0,1}},
		{{1,1,0,1},{0,0,1,0},{0,0,1,1}},
		{{1,1,0,1},{0,0,1,1},{0,0,1,1}},
		{{1,1,0,1},{0,1,0,0},{0,1,0,0}},
		{{1,1,0,1},{0,1,1,0},{0,1,1,0}},
		{{1,1,0,1},{1,0,0,1},{1,0,0,1}},
		{{1,1,0,1},{1,0,1,0},{1,0,1,0}},
		{{1,1,0,1},{1,0,1,1},{1,0,1,1}},
		{{1,1,0,1},{1,1,0,0},{1,1,0,1}},
		{{1,1,0,1},{1,1,0,1},{1,1,0,1}},
	};
	int failures = 0;
	long start;
	if (combinationTestsloopsNb > 1) {
		start = System.currentTimeMillis();
	}
	String header = "addInitializationsFrom failures: "; //$NON-NLS-1$
	for (int l = 0; l < combinationTestsloopsNb ; l++) {
		for (int i = 0; i < testData.length; i++) {
			UnconditionalFlowInfoTestHarness result;
			if (!(result = (UnconditionalFlowInfoTestHarness)(
					UnconditionalFlowInfoTestHarness.
						testUnconditionalFlowInfo(testData[i][0])).
						addInitializationsFrom(
								UnconditionalFlowInfoTestHarness.
								testUnconditionalFlowInfo(testData[i][1]))).
					testEquals(UnconditionalFlowInfoTestHarness.
								testUnconditionalFlowInfo(testData[i][2]))) {
				if (failures == 0) {
					System.out.println(header);
				}
				failures++;
				System.out.println("\t\t{" + testStringValueOf(testData[i][0]) + 
					',' + testStringValueOf(testData[i][1]) +
					',' + result.testString() + 
					"}, // instead of: " + testStringValueOf(testData[i][2]));
			}
		}
	}
	if (combinationTestsloopsNb > 1) {
		System.out.println("addInitial...\t\t" + combinationTestsloopsNb + "\t" + 
				(System.currentTimeMillis() - start));
	}
	// PREMATURE optimize test (extraneous allocations and copies)
	// PREMATURE optimize test (extraneous iterations - undup)
	UnconditionalFlowInfoTestHarness 
		zero = UnconditionalFlowInfoTestHarness.
				testUnconditionalFlowInfo(new long[] {0,0,0,0}),
		left0, left1, right1, left2, right2, 
		expected0, expected1, expected2, result;
	for (int i = 0; i < testData.length; i++) {
			left0 = UnconditionalFlowInfoTestHarness.
					testUnconditionalFlowInfo(testData[i][0]);
			left1 = UnconditionalFlowInfoTestHarness.
					testUnconditionalFlowInfo(testData[i][0], 64);
			left2 = UnconditionalFlowInfoTestHarness.
				testUnconditionalFlowInfo(testData[i][0], 128);
			right1 = UnconditionalFlowInfoTestHarness.
					testUnconditionalFlowInfo(testData[i][1], 64);
			right2 = UnconditionalFlowInfoTestHarness.
					testUnconditionalFlowInfo(testData[i][1], 128);
			expected0 = UnconditionalFlowInfoTestHarness.
					testUnconditionalFlowInfo(testData[i][2]);
			expected1 = UnconditionalFlowInfoTestHarness.
					testUnconditionalFlowInfo(testData[i][2], 64);
			expected2 = UnconditionalFlowInfoTestHarness.
				testUnconditionalFlowInfo(testData[i][2], 128);
		if (!(result = (UnconditionalFlowInfoTestHarness) 
				left1.copy().addInitializationsFrom(right1)).
					testEquals(expected1)) {
			if (failures == 0) {
				System.out.println(header);
			}
			failures++;
			System.out.println("\t\t{" + testStringValueOf(testData[i][0]) + 
				',' + testStringValueOf(testData[i][1]) +
				',' + result.testString() + 
				"}, // (64, 64) - instead of: " + testStringValueOf(testData[i][2]));
		}
		if ((testData[i][0][0] | testData[i][0][1] | 
				testData[i][0][2] | testData[i][0][3]) == 0) {
			if (!(result = (UnconditionalFlowInfoTestHarness) 
					zero.copy().addInitializationsFrom(right1)).
						testEquals(expected1)) {
				if (failures == 0) {
					System.out.println(header);
				}
				failures++;
				System.out.println("\t\t{" + testStringValueOf(testData[i][0]) + 
					',' + testStringValueOf(testData[i][1]) +
					',' + result.testString() + 
					"}, // (zero, 64) - instead of: " + testStringValueOf(testData[i][2]));
			}
			if (!(result = (UnconditionalFlowInfoTestHarness) right2.copy().
					addInitializationsFrom(right1)).
						testEquals(expected1, 64)) {
				if (failures == 0) {
					System.out.println(header);
				}
				failures++;
				System.out.println("\t\t{" + testStringValueOf(testData[i][0]) + 
					',' + testStringValueOf(testData[i][1]) +
					',' + result.testString() + 
					"}, // (zero 128, 64) - instead of: " + testStringValueOf(testData[i][2]));
			}
			if (!(result = (UnconditionalFlowInfoTestHarness) 
					 zero.copy().addInitializationsFrom(right2)).
						testEquals(expected2, 128)) {
				if (failures == 0) {
					System.out.println(header);
				}
				failures++;
				System.out.println("\t\t{" + testStringValueOf(testData[i][0]) + 
					',' + testStringValueOf(testData[i][1]) +
					',' + result.testString(128) + 
					"}, // (zero, 128) - instead of: " + testStringValueOf(testData[i][2]));
			}
			if (!(result = (UnconditionalFlowInfoTestHarness) 
					 right1.copy().addInitializationsFrom(right2)).
						testEquals(expected2, 128)) {
				if (failures == 0) {
					System.out.println(header);
				}
				failures++;
				System.out.println("\t\t{" + testStringValueOf(testData[i][0]) + 
					',' + testStringValueOf(testData[i][1]) +
					',' + result.testString(128) + 
					"}, // (zero 64, 128) - instead of: " + testStringValueOf(testData[i][2]));
			}
		}
		if ((testData[i][1][0] | testData[i][1][1] | 
				testData[i][1][2] | testData[i][1][3]) == 0) {
			if (!(result = (UnconditionalFlowInfoTestHarness) 
					left0.copy().addInitializationsFrom(left2)).
						testEquals(expected0, 0)) {
				if (failures == 0) {
					System.out.println(header);
				}
				failures++;
				System.out.println("\t\t{" + testStringValueOf(testData[i][0]) + 
					',' + testStringValueOf(testData[i][1]) +
					',' + result.testString() + 
					"}, // (1, zero 128) - instead of: " + testStringValueOf(testData[i][2]));
			}
			if (!(result = (UnconditionalFlowInfoTestHarness) 
					left1.copy().addInitializationsFrom(zero)).
						testEquals(expected1)) {
				if (failures == 0) {
					System.out.println(header);
				}
				failures++;
				System.out.println("\t\t{" + testStringValueOf(testData[i][0]) + 
					',' + testStringValueOf(testData[i][1]) +
					',' + result.testString() + 
					"}, // (64, zero) - instead of: " + testStringValueOf(testData[i][2]));
			}
			if (!(result = (UnconditionalFlowInfoTestHarness) 
					left1.copy().addInitializationsFrom(left2)).
						testEquals(expected1, 64)) {
				if (failures == 0) {
					System.out.println(header);
				}
				failures++;
				System.out.println("\t\t{" + testStringValueOf(testData[i][0]) + 
					',' + testStringValueOf(testData[i][1]) +
					',' + result.testString() + 
					"}, // (64, zero 128) - instead of: " + testStringValueOf(testData[i][2]));
			}
			if (!(result = (UnconditionalFlowInfoTestHarness) 
					left2.copy().addInitializationsFrom(zero)).
						testEquals(expected2, 128)) {
				if (failures == 0) {
					System.out.println(header);
				}
				failures++;
				System.out.println("\t\t{" + testStringValueOf(testData[i][0]) + 
					',' + testStringValueOf(testData[i][1]) +
					',' + result.testString() + 
					"}, // (128, zero) - instead of: " + testStringValueOf(testData[i][2]));
			}
			if (!(result = (UnconditionalFlowInfoTestHarness) 
					left2.addInitializationsFrom(left1)).
						testEquals(expected2, 128)) {
				if (failures == 0) {
					System.out.println(header);
				}
				failures++;
				System.out.println("\t\t{" + testStringValueOf(testData[i][0]) + 
					',' + testStringValueOf(testData[i][1]) +
					',' + result.testString() + 
					"}, // (128, zero 64) - instead of: " + testStringValueOf(testData[i][2]));
			}
		}
	}
	if (printTablesAsNames) {
		System.out.println("RECAP TABLE FOR ADD");
		for (int i = 0; i < testData.length; i++) {
			System.out.println(testSymbolicValueOf(testData[i][0]) + " + " +
				testSymbolicValueOf(testData[i][1]) + " -> " +
				testSymbolicValueOf(testData[i][2]));
		}	
	}
	if (printTablesAsCodes) {
		System.out.println("RECAP TABLE FOR ADD");
		for (int i = 0; i < testData.length; i++) {
			System.out.println(testCodedValueOf(testData[i][0]) + " " +
				testCodedValueOf(testData[i][1]) + " " +
				testCodedValueOf(testData[i][2]));
		}
	}
	if (printTruthMaps) {
		for (int i = 0; i < 4; i++) {
			System.out.println("======================================================");
			System.out.println("Truth map for addInitializationsFrom null bit " + (i + 1));
			System.out.println();
			printTruthMap(testData, i);
		}
	}	
	assertTrue("nb of failures: " + failures, failures == 0);
}

