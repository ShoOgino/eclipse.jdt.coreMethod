public void test005() {
	Map customOptions = getCompilerOptions();
	customOptions.put(CompilerOptions.OPTION_ReportUnnecessaryTypeCheck, CompilerOptions.ERROR);
	runNegativeTest(
		// test directory preparation
		true /* flush output directory */, 
		new String[] { /* test files */
			"X.java",
			"public class X {\n" + 
			"	public static void main(String[] args) {\n" + 
			"		// qualified allocations\n" + 
			"		new X().new XM3((Object) \"hello\");	//   necessary\n" + 
			"		new X().new XM3((String) \"hello\");	// UNnecessary\n" + 
			"		new X().new XM3((Object) null);		//   necessary\n" + 
			"		new X().new XM3((String) null);		// UNnecessary but keep as useful documentation\n" + 
			"		new X().new XM3((Object) \"hello\"){};	//   necessary\n" + 
			"		new X().new XM3((String) \"hello\"){};	// UNnecessary\n" + 
			"		new X().new XM3((Object) null){};		//   necessary\n" + 
			"		new X().new XM3((String) null){};		// UNnecessary but keep as useful documentation\n" + 
			"	}\n" + 
			"	X(){}\n" + 
			"	static class XM1 extends X {}\n" + 
			"	static class XM2 extends X {}\n" + 
			"	class XM3 {\n" + 
			"		XM3(String s){\n" + 
			"			System.out.println(\"new XM3(String):\"+s);\n" + 
			"		}\n" + 
			"		XM3(Object o){\n" + 
			"			System.out.println(\"new XM3(Object):\"+o);\n" + 
			"		}\n" + 
			"	}	\n" + 
			"}\n"
		},
		// compiler options
		null /* no class libraries */,
		customOptions /* custom options */,
		// compiler results
			"----------\n" + /* expected compiler log */
		"1. ERROR in X.java (at line 5)\n" + 
		"	new X().new XM3((String) \"hello\");	// UNnecessary\n" + 
		"	                ^^^^^^^^^^^^^^^^\n" + 
		"Unnecessary cast from String to String\n" + 
		"----------\n" + 
		"2. ERROR in X.java (at line 9)\n" + 
		"	new X().new XM3((String) \"hello\"){};	// UNnecessary\n" + 
		"	                ^^^^^^^^^^^^^^^^\n" + 
		"Unnecessary cast from String to String\n" + 
		"----------\n",
		// javac options
		JavacTestOptions.Excuse.EclipseWarningConfiguredAsError /* javac test options */);
}

