// Bug 388281 - [compiler][null] inheritance of null annotations as an option
// -warn option - regression tests to check option inheritNullAnnot
public void test320_warn_options() {
	this.runNegativeTest(
		new String[] {
				"p/Super.java",
				"package p;\n" +
				"import org.eclipse.jdt.annotation.*;\n" +
				"public class Super {\n" +
				"    void foo(@NonNull String s) {}\n" +
				"}\n",
				"p/Sub.java",
				"package p;\n" +
				"public class Sub extends Super {\n" +
				"    void foo(String s) {\n" +
				"        s= null;\n" + // illegal since s inherits @NonNull
				"        super.foo(s);\n" + // legal
				"    }\n" +
				"}\n",
				"org/eclipse/jdt/annotation/NonNull.java",
				NONNULL_ANNOTATION_CONTENT,
				"org/eclipse/jdt/annotation/Nullable.java",
				NULLABLE_ANNOTATION_CONTENT,
				"org/eclipse/jdt/annotation/NonNullByDefault.java",				
				NONNULL_BY_DEFAULT_ANNOTATION_CONTENT
		},
		"\"" + OUTPUT_DIR +  File.separator + "p" + File.separator + "Sub.java\""
		+ " -sourcepath \"" + OUTPUT_DIR + "\""
		+ " -1.5"
		+ " -err:+nullAnnot,+null,+inheritNullAnnot -proc:none -d \"" + OUTPUT_DIR + "\"",
		"",
		"----------\n" + 
		"1. ERROR in ---OUTPUT_DIR_PLACEHOLDER---/p/Sub.java (at line 4)\n" + 
		"	s= null;\n" + 
		"	   ^^^^\n" + 
		"Null type mismatch: required '@NonNull String' but the provided value is null\n" + 
		"----------\n" + 
		"1 problem (1 error)\n",
		true);
}

