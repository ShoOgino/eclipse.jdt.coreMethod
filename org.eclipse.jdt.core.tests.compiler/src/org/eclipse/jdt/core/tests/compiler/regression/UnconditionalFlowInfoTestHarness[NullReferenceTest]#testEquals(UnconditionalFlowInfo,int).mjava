/**
 * Return true iff this flow info can be considered as equal to the one passed
 * in parameter in respect with a single local variable which id would be
 * position in a class with no field.
 * @param other the flow info to compare to
 * @param position the position of the local to consider
 * @return true iff this flow info compares equal to other for a given local
 */
public boolean testEquals(UnconditionalFlowInfo other, int position) {
	int vectorIndex = position / BitCacheSize - 1;
	if ((this.tagBits & other.tagBits & NULL_FLAG_MASK) == 0) {
		return true;
	}
	long mask;
	if (vectorIndex < 0) {
		return ((this.nullAssignmentStatusBit1 & (mask = (1L << position))) ^
				(other.nullAssignmentStatusBit1 & mask)) == 0 &&
				((this.nullAssignmentStatusBit2 & mask) ^
				(other.nullAssignmentStatusBit2 & mask)) == 0 &&
				((this.nullAssignmentValueBit1 & mask) ^
				(other.nullAssignmentValueBit1 & mask)) == 0 &&
				((this.nullAssignmentValueBit2 & mask) ^
				(other.nullAssignmentValueBit2 & mask)) == 0;
	}
	else {
		int left = this.extra == null ?
				0 :
				this.extra[0].length;
		int right = other.extra == null ?
				0 :
				other.extra[0].length;
		int both = left < right ? left : right;
		if (vectorIndex < both) {
			return ((this.extra[2][vectorIndex] & 
					(mask = (1L << (position % BitCacheSize)))) ^
				(other.extra[2][vectorIndex] & mask)) == 0 &&
				((this.extra[3][vectorIndex] & mask) ^
				(other.extra[3][vectorIndex] & mask)) == 0 &&
				((this.extra[4][vectorIndex] & mask) ^
				(other.extra[4][vectorIndex] & mask)) == 0 &&
				((this.extra[5][vectorIndex] & mask) ^
				(other.extra[5][vectorIndex] & mask)) == 0;
		}
		if (vectorIndex < left) {
			return ((this.extra[2][vectorIndex] |
					this.extra[3][vectorIndex] |
					this.extra[4][vectorIndex] |
					this.extra[5][vectorIndex]) &
					(1L << (position % BitCacheSize))) == 0;
		}
		return ((other.extra[2][vectorIndex] |
				other.extra[3][vectorIndex] |
				other.extra[4][vectorIndex] |
				other.extra[5][vectorIndex]) &
				(1L << (position % BitCacheSize))) == 0;
	}
}

