// Bug 349326 - [1.7] new warning for missing try-with-resources
// various non-problems
public void test056l() {
	Map options = getCompilerOptions();
	options.put(CompilerOptions.OPTION_ReportUnclosedCloseable, CompilerOptions.ERROR);
	options.put(CompilerOptions.OPTION_ReportPotentiallyUnclosedCloseable, CompilerOptions.ERROR);
	options.put(CompilerOptions.OPTION_ReportExplicitlyClosedAutoCloseable, CompilerOptions.ERROR);
	String expectedProblems = this.complianceLevel >= ClassFileConstants.JDK1_7 ?
				"----------\n" +
				"1. ERROR in X.java (at line 8)\n" +
				"	FileReader fileReader = getReader();\n" +
				"	           ^^^^^^^^^^\n" +
				"Resource 'fileReader' should be managed by try-with-resource\n" +
				"----------\n" +
				"2. ERROR in X.java (at line 11)\n" +
				"	FileReader r3 = getReader();\n" +
				"	           ^^\n" +
				"Resource 'r3' should be managed by try-with-resource\n" +
				"----------\n" +
				"3. ERROR in X.java (at line 24)\n" +
				"	FileReader r2 = new FileReader(new File(\"inexist\")); // only potential problem: ctor X below might close r2\n" +
				"	           ^^\n" +
				"Potential resource leak: 'r2' may not be closed\n" +
				"----------\n" +
				"4. ERROR in X.java (at line 25)\n" +
				"	new X(r2).foo(new FileReader(new File(\"notthere\"))); // potential problem: foo may/may not close the new FileReader\n" +
				"	              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" +
				"Potential resource leak: \'<unassigned Closeable value>\' may not be closed\n" +
				"----------\n"
			:
				"----------\n" +
				"1. ERROR in X.java (at line 24)\n" +
				"	FileReader r2 = new FileReader(new File(\"inexist\")); // only potential problem: ctor X below might close r2\n" +
				"	           ^^\n" +
				"Potential resource leak: 'r2' may not be closed\n" +
				"----------\n" +
				"2. ERROR in X.java (at line 25)\n" +
				"	new X(r2).foo(new FileReader(new File(\"notthere\"))); // potential problem: foo may/may not close the new FileReader\n" +
				"	              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" +
				"Potential resource leak: \'<unassigned Closeable value>\' may not be closed\n" +
				"----------\n";
	this.runNegativeTest(
		new String[] {
			"X.java",
			"import java.io.File;\n" +
			"import java.io.FileReader;\n" +
			"import java.io.IOException;\n" +
			"public class X {\n" +
			"    X(FileReader r0) {}\n" + // don't complain against argument
			"    FileReader getReader() { return null; }\n" +
			"    void foo(FileReader r1) throws IOException {\n" +
			"        FileReader fileReader = getReader();\n" +
			"        if (fileReader == null)\n" +
			"            return;\n" + // don't complain, resource is actually null
			"        FileReader r3 = getReader();\n" +
			"        if (r3 == null)\n" +
			"            r3 = new FileReader(new File(\"absent\"));\n" + // don't complain, previous resource is actually null
			"        try {\n" +
			"            char[] in = new char[50];\n" +
			"            fileReader.read(in);\n" +
			"            r1.read(in);\n" +
			"        } finally {\n" +
			"            fileReader.close();\n" +
			"            r3.close();\n" +  // the effect of this close() call might be spoiled by exception in fileReader.close() above, but we ignore exception exits in the analysis
			"        }\n" +
			"    }\n" +
			"    public static void main(String[] args) throws IOException {\n" +
			"        FileReader r2 = new FileReader(new File(\"inexist\")); // only potential problem: ctor X below might close r2\n" +
			"        new X(r2).foo(new FileReader(new File(\"notthere\"))); // potential problem: foo may/may not close the new FileReader\n" +
			"    }\n" +
			"}\n"
		},
		expectedProblems,
		null,
		true,
		options);
}

