	public void test0645() {
	    this.runNegativeTest(
            new String[] {
                "X.java",
				"import java.lang.annotation.Annotation;\n" + 
				"\n" + 
				"@interface MyAnnotation {\n" + 
				"}\n" + 
				"\n" + 
				"class X {\n" + 
				"	void bar(XClass<String> arg) {\n" + 
				"		XClass xc = new XClass();\n" + 
				"		String str = xc.getConstructor().getAnnotation(arg);\n" + 
				"	}\n" + 
				"}\n" + 
				"\n" + 
				"class XClass<U> {\n" + 
				"	XConstructor<U> getConstructor() {\n" + 
				"		return null;\n" + 
				"	}\n" + 
				"}\n" + 
				"class XConstructor<V> {\n" + 
				"	<W extends Annotation> W getAnnotation(XClass<W> cl) {\n" + 
				"		return null;\n" + 
				"	}\n" + 
				"}\n",
	        },
			"----------\n" + 
			"1. WARNING in X.java (at line 8)\n" + 
			"	XClass xc = new XClass();\n" + 
			"	^^^^^^\n" + 
			"XClass is a raw type. References to generic type XClass<U> should be parameterized\n" + 
			"----------\n" + 
			"2. WARNING in X.java (at line 8)\n" + 
			"	XClass xc = new XClass();\n" + 
			"	                ^^^^^^\n" + 
			"XClass is a raw type. References to generic type XClass<U> should be parameterized\n" + 
			"----------\n" + 
			"3. WARNING in X.java (at line 9)\n" + 
			"	String str = xc.getConstructor().getAnnotation(arg);\n" + 
			"	             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
			"Type safety: The method getAnnotation(XClass) belongs to the raw type XConstructor. References to generic type XConstructor<V> should be parameterized\n" + 
			"----------\n" + 
			"4. ERROR in X.java (at line 9)\n" + 
			"	String str = xc.getConstructor().getAnnotation(arg);\n" + 
			"	             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
			"Type mismatch: cannot convert from Annotation to String\n" + 
			"----------\n");
	}			

