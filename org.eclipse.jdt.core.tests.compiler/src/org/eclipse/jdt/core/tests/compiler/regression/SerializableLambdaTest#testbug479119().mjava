	public void testbug479119() {
		this.runConformTest(
			new String[]{
				"Testbed.java",
				"import java.io.ObjectStreamClass;\n" + 
				"import java.io.Serializable;\n" + 
				"import java.lang.invoke.SerializedLambda;\n" + 
				"import java.lang.reflect.Method;\n" + 
				"import java.util.function.IntFunction;\n" + 
				"import java.util.stream.Stream;\n" + 
				"public class Testbed {\n" + 
				"	public static void main(String[] args) {\n" + 
				"		System.out.println(getMethod(Testbed::foo).equals(getMethod(Testbed::foo)));\n" + 
				"	}\n" + 
				"	private static void foo() { }\n" + 
				"	static interface MethodRef extends Runnable, Serializable { }\n" + 
				"	private static Method getMethod(MethodRef methodRef) {\n" + 
				"		try {\n" + 
				"			final Method invokeWriteReplaceMethod = ObjectStreamClass.class.getDeclaredMethod(\"invokeWriteReplace\", Object.class);\n" + 
				"			invokeWriteReplaceMethod.setAccessible(true);\n" + 
				"			final SerializedLambda l = (SerializedLambda)invokeWriteReplaceMethod.invoke(\n" + 
				"					ObjectStreamClass.lookupAny(methodRef.getClass()),\n" + 
				"					methodRef\n" + 
				"				);\n" + 
				"			System.out.println(\"Looking for \" + l.getImplClass() + \".\" + l.getImplMethodName());\n" + 
				"			final Method[] methods = Stream.of(Class.forName(l.getImplClass()).getDeclaredMethods()).\n" + 
				"				filter(m -> m.getName().equals(l.getImplMethodName())).\n" + 
				"				toArray(Method[]::new);\n" + 
				"			if(methods.length != 1) throw new AssertionError(\"TODO: check signature\");\n" + 
				"			return methods[0];\n" + 
				"		} catch(Exception e) {\n" + 
				"			throw new RuntimeException(e);\n" + 
				"		}\n" + 
				"	}\n" + 
				"}\n"
		},
		"Looking for Testbed.foo\n" +
		"Looking for Testbed.foo\n" +
		"true",
		null,true,
		(isJRE9 
		? new String[] { "--add-opens", "java.base/java.io=ALL-UNNAMED" } 
		: new String [] { "-Ddummy" })
		);

		
		String bootstrapEntries = printBootstrapMethodsAttribute(OUTPUT_DIR + File.separator + "Testbed.class");
		String expectedOutput = 
				"0: invokestatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n"+
				"  Method arguments:\n"+
				"    ()V\n"+
				"    invokestatic Testbed.foo:()V\n"+
				"    ()V\n"+
				"    1\n"+
				"1: invokestatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n"+
				"  Method arguments:\n"+
				"    (Ljava/lang/Object;)Z\n"+
				"    invokestatic Testbed.lambda$2:(Ljava/lang/invoke/SerializedLambda;Ljava/lang/reflect/Method;)Z\n"+
				"    (Ljava/lang/reflect/Method;)Z\n"+
				"2: invokestatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n"+
				"  Method arguments:\n"+
				"    (I)Ljava/lang/Object;\n"+
				"    invokestatic Testbed.lambda$3:(I)[Ljava/lang/reflect/Method;\n"+
				"    (I)[Ljava/lang/reflect/Method;\n";

		checkExpected(expectedOutput, bootstrapEntries);
	}

