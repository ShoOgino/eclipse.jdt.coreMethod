	public void test066_codeblocks_methodReference() throws Exception {
		Runner runner = new Runner();
		runner.testFiles =
			new String[] {
				"X.java",
				"interface I {\n" +
				"    Object copy(int [] ia);\n" +
				"}\n" +
				"public class X  {\n" +
				"    public static void main(String [] args) {\n" +
				"        I i = @B(1) int @B(2)[]::<String>clone;\n" +
				"        i.copy(new int[10]); \n" +
				"    }\n" +
				"}\n",

				"B.java",
				"import java.lang.annotation.*;\n" +
				"@Target(ElementType.TYPE_USE)\n" +
				"@Retention(RetentionPolicy.RUNTIME)\n" +
				"@interface B {\n" +
				"	int value() default -1;\n" +
				"}\n",
			};
		if (this.complianceLevel < ClassFileConstants.JDK9) { // luckily introduction of ecj warning and javac crash coincide
			runner.runConformTest();
		} else {
			runner.expectedCompilerLog =
				"----------\n" +
				"1. WARNING in X.java (at line 6)\n" +
				"	I i = @B(1) int @B(2)[]::<String>clone;\n" +
				"	                          ^^^^^^\n" +
				"Unused type arguments for the non generic method clone() of type Object; it should not be parameterized with arguments <String>\n" +
				"----------\n";
			runner.javacTestOptions = JavacHasABug.JavacThrowsAnExceptionForJava_since9_EclipseWarns;
			runner.runWarningTest();
		}

		String expectedOutput =
			"    RuntimeVisibleTypeAnnotations: \n" +
			"      #30 @B(\n" +
			"        #31 value=(int) 1 (constant type)\n" +
			"        target type = 0x46 METHOD_REFERENCE\n" +
			"        offset = 0\n" +
			"        location = [ARRAY]\n" +
			"      )\n" +
			"      #30 @B(\n" +
			"        #31 value=(int) 2 (constant type)\n" +
			"        target type = 0x46 METHOD_REFERENCE\n" +
			"        offset = 0\n" +
			"      )\n";
		checkDisassembledClassFile(OUTPUT_DIR + File.separator + "X.class", "X", expectedOutput, ClassFileBytesDisassembler.SYSTEM);
	}

