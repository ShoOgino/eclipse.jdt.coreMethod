// Bug 358903 - Filter practically unimportant resource leak warnings
// Bug 361073 - Avoid resource leak warning when the top level resource is closed explicitly
// a resource wrapper is closed closing also the underlying resource - from a real-world example
public void test061f2() throws IOException {
	Map options = getCompilerOptions();
	options.put(CompilerOptions.OPTION_ReportUnclosedCloseable, CompilerOptions.ERROR);
	options.put(CompilerOptions.OPTION_ReportPotentiallyUnclosedCloseable, CompilerOptions.ERROR);
	this.runConformTest(
		new String[] {
			"X.java",
			"import java.io.OutputStream;\n" +
			"import java.io.FileOutputStream;\n" +
			"import java.io.BufferedOutputStream;\n" +
			"import java.io.IOException;\n" +
			"public class X {\n" +
			"    void zork() throws IOException {\n" +
			"		try {\n" +
			"			OutputStream os = null;\n" +
			"			try {\n" +
			"				os = new BufferedOutputStream(new FileOutputStream(\"somefile\"));\n" +
			"				String externalForm = \"externalPath\";\n" +
			"			} finally {\n" +
			"				if (os != null)\n" +
			"					os.close();\n" +
			"			}\n" +
			"		} catch (IOException e) {\n" +
			"			e.printStackTrace();\n" +
			"		}\n" +
			"    }\n" +
			"}\n"
		},
		"",
		null,
		true,
		null,
		options,
		null);
}

