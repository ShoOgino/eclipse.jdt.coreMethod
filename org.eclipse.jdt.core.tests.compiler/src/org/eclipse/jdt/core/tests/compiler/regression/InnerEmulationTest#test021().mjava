/**
 * Complex multi-threaded test involving inner classes
 */
public void test021() {
	this.runConformTest(
		new String[] {
			/* MultiLocal2.java */
			"MultiLocal2.java",
			"public class MultiLocal2 {\n" +
			"	public static void main(String argv[]){\n" +
			"		final int maxTasks = 3;\n" +
			"		class Task implements Runnable {\n" +
			"			private String taskName;\n" +
			"			private int maxIteration;\n" +
			"			public Task(String name, int value) {\n" +
			"				taskName = name; \n" +
			"				maxIteration = value;\n" +
			"			}\n" +
			"	\n" +
			"			public String toString() { return taskName + \" of \" + String.valueOf(maxTasks); }\n" +
			"			public void run() {\n" +
			"				for(int i = 0; i < maxIteration; i++)\n" +
			"					notifyCompletion( (int)((float) (i + 1) / maxIteration * 100));\n" +
			"			}		\n" +
			"			\n" +
			"			void notifyCompletion(int percentage) {\n" +
			"			}\n" +
			"		};\n" +
			"		MultiLocal2 multi = new MultiLocal2();\n" +
			"		Task tasks[] = new Task[maxTasks];\n" +
			"		for (int i = 0; i < maxTasks; i++) \n" +
			"			tasks[i] = new Task(String.valueOf(i+1),5);\n" +
			"		try {\n" +
			"			multi.performTasks(tasks);\n" +
			"		}\n" +
			"		catch(InterruptedException e){};\n" +
			"	}\n" +
			"	void notifyExecutionEnd() {\n" +
			"		System.out.println(\"EXECUTION FINISHED\");\n" +
			"	}\n" +
			"	void notifyExecutionStart() {\n" +
			"		System.out.println(\"EXECUTION STARTING\");\n" +
			"	}\n" +
			"	void performTasks(Runnable tasks[]) throws java.lang.InterruptedException {\n" +
			"		Thread workers[] = new Thread[tasks.length];\n" +
			"		notifyExecutionStart();\n" +
			"		\n" +
			"		// Launching the tasks\n" +
			"		for (int i = 0; i < tasks.length; i++) {\n" +
			"			workers[i] = new Thread(tasks[i],\"Running task(\"+(tasks[i].toString())+\")\");\n" +
			"			workers[i].start();\n" +
			"		}\n" +
			"		// Waiting for *all* tasks to be ended\n" +
			"		for (int i = 0; i < tasks.length; i++)\n" +
			"			workers[i].join();\n" +
			"		notifyExecutionEnd();\n" +
			"	}\n" +
			"}\n"
		},
		"EXECUTION STARTING\n" +
		"EXECUTION FINISHED"
	);
}

