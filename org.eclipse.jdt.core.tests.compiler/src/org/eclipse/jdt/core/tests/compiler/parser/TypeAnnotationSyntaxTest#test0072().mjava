//check locations
public void test0072() throws IOException {
	String source = 
		"public class X {\n" + 
		"	@A Map<@B String, @C List<@H String @E[][] @G[]>>[] @I[] @J[] field;\n" + 
		"}";
	String expectedUnitToString = 
		"public class X {\n" + 
		"  @A Map<@B String, @C List<@H String @E [][] @G []>>[] @I [] @J [] field;\n" + 
		"  public X() {\n" + 
		"    super();\n" + 
		"  }\n" + 
		"}\n";
	LocationPrinterVisitor visitor = new LocationPrinterVisitor();
	checkParse(CHECK_ALL & ~CHECK_JAVAC_PARSER, source.toCharArray(), null, "test0072", expectedUnitToString, visitor);
	Map locations = visitor.getLocations();
	assertEquals("Wrong size", 8, locations.size());
	assertEquals("Wrong location", "[ARRAY]", locations.get("@I"));
	assertEquals("Wrong location", "[ARRAY, ARRAY]", locations.get("@J"));
	assertEquals("Wrong location", "[ARRAY, ARRAY, ARRAY]", locations.get("@A"));
	assertEquals("Wrong location", "[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(0)]", locations.get("@B"));
	assertEquals("Wrong location", "[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(1)]", locations.get("@C"));
	assertEquals("Wrong location", "[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(1), TYPE_ARGUMENT(0), ARRAY, ARRAY, ARRAY]", locations.get("@H"));
	assertEquals("Wrong location", "[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(1), TYPE_ARGUMENT(0)]", locations.get("@E"));
	assertEquals("Wrong location", "[ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(1), TYPE_ARGUMENT(0), ARRAY, ARRAY]", locations.get("@G"));
}

