public void testBug542707_004() {
	if (this.complianceLevel != ClassFileConstants.JDK12)
		return;
	Map<String, String> defaultOptions = super.getCompilerOptions();
	defaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_12); 
	defaultOptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_12);
	defaultOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_12);
	defaultOptions.put(CompilerOptions.OPTION_EnablePreviews, CompilerOptions.ENABLED);
	defaultOptions.put(CompilerOptions.OPTION_ReportPreviewFeatures, CompilerOptions.IGNORE);
	String expectedProblemLog =
			"----------\n" + 
			"1. ERROR in X.java (at line 7)\n" + 
			"	k = 1;\n" + 
			"	^\n" + 
			"The final local variable k cannot be assigned. It must be blank and not using a compound assignment\n" + 
			"----------\n" + 
			"2. ERROR in X.java (at line 11)\n" + 
			"	k = 2;\n" + 
			"	^\n" + 
			"The final local variable k cannot be assigned. It must be blank and not using a compound assignment\n" + 
			"----------\n" + 
			"3. ERROR in X.java (at line 15)\n" + 
			"	k = 3;\n" + 
			"	^\n" + 
			"The final local variable k cannot be assigned. It must be blank and not using a compound assignment\n" + 
			"----------\n" + 
			"4. ERROR in X.java (at line 23)\n" + 
			"	Zork();\n" + 
			"	^^^^\n" + 
			"The method Zork() is undefined for the type X\n" + 
			"----------\n";
	String[] testFiles = new String[] {
			"X.java", // =================
			"public class X {\n" +
			"	public static int foo(int i) {\n" +
			"		final int k = 1;\n" +
			"\n" +
			"		int it = switch (i) { \n" +
			"		case 1  ->   {\n" +
			"			k = 1;\n" +
			"			break k ;\n" +
			"		}\n" +
			"		case 2  ->   {\n" +
			"			k = 2;\n" +
			"			break k ;\n" +
			"		}\n" +
			"		default -> {\n" +
			"			k = 3;\n" +
			"			break k;\n" +
			"		}\n" +
			"		};\n" +
			"		return k;\n" +
			"	}\n" +
			"\n" +
			"	public boolean bar() {\n" +
			"		Zork();\n" +
			"		return true;\n" +
			"	}\n" +
			"	public static void main(String[] args) {\n" +
			"		System.out.println(foo(3));\n" +
			"	}\n" +
			"}\n",
	};
	this.runNegativeTest(
			testFiles,
			expectedProblemLog,
			null,
			true,
			defaultOptions);
}

