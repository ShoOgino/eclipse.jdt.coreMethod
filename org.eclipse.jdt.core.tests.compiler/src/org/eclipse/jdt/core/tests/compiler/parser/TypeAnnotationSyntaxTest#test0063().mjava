// assorted unclassified
public void test0063() throws IOException {
	String source = "import java.util.HashMap;\n" +
					"import java.util.Map; \n" +
					"\n" +
					"public class Clazz <@A M extends @B String, @C N extends @D Comparable> extends\n" +
					"								@E Object implements @F Comparable <@G Object> {\n" +
					"	\n" +
					"  Clazz(char[] ...args) { \n" +
					"   }\n" +
					"   \n" +
					"  int @I[] f @J[], g, h[], i@K[];\n" +
					"  int @L[][]@M[] f2; \n" +
					"   \n" +
					"  Clazz (int @N[] @O... a) {}\n" +
					" int @R[]@S[] aa() {}\n" +
					" \n" +
					" int @T[]@U[]@V[] a () @W[]@X[]@Y[] { return null; }\n" +
					"   \n" +
					"  public void main(String @A[] @B ... args) throws @D Exception {\n" +
					"  	\n" +
					"       HashMap<@E String, @F String> b1;\n" +
					"      \n" +
					"     int b; b = (@G int) 10;\n" +
					"      \n" +
					"     char @H[]@I[] ch; ch = (@K char @L[]@M[])(@N char @O[]@P[]) null;\n" +
					"      \n" +
					"      int[] i; i = new @Q int @R[10];\n" +
					"       \n" +
					"      \n" +
					"   Integer w; w = new X<@S String, @T Integer>().get(new @U Integer(12));\n" +
					"    throw new @V Exception(\"test\");\n" +
					"    boolean c; c  = null instanceof @W String;\n" +
					"	} \n" +
					" public <@X X, @Y Y> void foo(X x, Y @Z... y) {  \n" +
					"	\n" +
					"}\n" +
					" \n" +
					" void foo(Map<? super @A Object, ? extends @B String> m){}\n" +
					" public int compareTo(Object arg0) {\n" +
					"     return 0;\n" +
					" }\n" +
					"\n" +
					"}\n" +
					"class X<@C K, @D T extends @E Object & @F Comparable<? super @G T>> {\n" +
					"	\n" +
					"  public Integer get(Integer integer) {\n" +
					"       return null;\n" +
					"   }\n" +
					"}\n";


	String expectedUnitToString = "import java.util.HashMap;\n" +
								  "import java.util.Map;\n" +
								  "public class Clazz<@A M extends @B String, @C N extends @D Comparable> extends @E Object implements @F Comparable<@G Object> {\n" +
								  "  int @I [] @J [] f;\n" +
								  "  int @I [] g;\n" +
								  "  int @I [][] h;\n" +
								  "  int @I [] @K [] i;\n" +
								  "  int @L [][] @M [] f2;\n" +
								  "  Clazz(char[]... args) {\n" +
								  "    super();\n" +
								  "  }\n" +
								  "  Clazz(int @N [] @O ... a) {\n" +
								  "    super();\n" +
								  "  }\n" +
								  "  int @R [] @S [] aa() {\n" +
								  "  }\n" +
								  "  int @T [] @U [] @V [] @W [] @X [] @Y [] a() {\n" +
								  "    return null;\n" +
								  "  }\n" +
								  "  public void main(String @A [] @B ... args) throws @D Exception {\n" +
								  "    HashMap<@E String, @F String> b1;\n" +
								  "    int b;\n" +
								  "    b = (@G int) 10;\n" +
								  "    char @H [] @I [] ch;\n" +
								  "    ch = (@K char @L [] @M []) (@N char @O [] @P []) null;\n" +
								  "    int[] i;\n" +
								  "    i = new @Q int @R [10];\n" +
								  "    Integer w;\n" +
								  "    w = new X<@S String, @T Integer>().get(new @U Integer(12));\n" +
								  "    throw new @V Exception(\"test\");\n" +
								  "    boolean c;\n" +
								  "    c = (null instanceof @W String);\n" +
								  "  }\n" +
								  "  public <@X X, @Y Y>void foo(X x, Y @Z ... y) {\n" +
								  "  }\n" +
								  "  void foo(Map<? super @A Object, ? extends @B String> m) {\n" +
								  "  }\n" +
								  "  public int compareTo(Object arg0) {\n" +
								  "    return 0;\n" +
								  "  }\n" +
								  "}\n" +
								  "class X<@C K, @D T extends @E Object & @F Comparable<? super @G T>> {\n" +
								  "  X() {\n" +
								  "    super();\n" +
								  "  }\n" +
								  "  public Integer get(Integer integer) {\n" +
								  "    return null;\n" +
								  "  }\n" +
								  "}\n";
	// indexing parser avoids creating lots of nodes, so parse tree comes out incorrectly.
	// this is not bug, but intended behavior - see IndexingParser.newSingleNameReference(char[], long)
	checkParse(CHECK_ALL & ~CHECK_INDEXING_PARSER & ~CHECK_JAVAC_PARSER, source.toCharArray(), null, "test0063", expectedUnitToString);
}

