	public void test076() {
		this.runConformTest(
			new String[] {
				"A.java",
				"class A {\n" +
				"	<T, S extends J & I<S>> void foo(S s) { }\n" +
				"	<T, S extends I<T> & J > void foo(S s) { }\n" +
				"}\n" +
				"interface I<TT> {}\n" +
				"interface J {}\n"
			},
			""
		);
		this.runNegativeTest(
			new String[] {
				"A.java",
				"class A {\n" +
				"	<T, S extends J & I<T>> void foo() { }\n" +
				"	<T, S extends I<T> & J> void foo() { }\n" +
				"}\n" +
				"interface I<TT> {}\n" +
				"interface J {}\n"
			},
			"----------\n" + 
			"1. ERROR in A.java (at line 2)\r\n" + 
			"	<T, S extends J & I<T>> void foo() { }\r\n" + 
			"	                             ^^^^^\n" + 
			"Duplicate method foo() in type A\n" + 
			"----------\n" + 
			"2. ERROR in A.java (at line 3)\r\n" + 
			"	<T, S extends I<T> & J> void foo() { }\r\n" + 
			"	                             ^^^^^\n" + 
			"Duplicate method foo() in type A\n" + 
			"----------\n"
			// <T,S>foo() is already defined in A
		);
		this.runNegativeTest(
			new String[] {
				"A.java",
				"class A {\n" +
				"	<T, S extends J & I<T>> void foo() { }\n" +
				"	<T, S extends I<T> & K> void foo() { }\n" +
				"}\n" +
				"interface I<TT> {}\n" +
				"interface J {}\n" +
				"interface K extends J {}"
			},
			"----------\n" + 
			"1. ERROR in A.java (at line 2)\r\n" + 
			"	<T, S extends J & I<T>> void foo() { }\r\n" + 
			"	                             ^^^^^\n" + 
			"Duplicate method foo() in type A\n" + 
			"----------\n" + 
			"2. ERROR in A.java (at line 3)\r\n" + 
			"	<T, S extends I<T> & K> void foo() { }\r\n" + 
			"	                             ^^^^^\n" + 
			"Duplicate method foo() in type A\n" + 
			"----------\n"
			// name clash: <T,S>foo() and <T,S>foo() have the same erasure
		);
	}

