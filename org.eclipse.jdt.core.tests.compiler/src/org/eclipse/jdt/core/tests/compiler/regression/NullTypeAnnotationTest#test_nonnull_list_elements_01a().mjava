	// a list with nullable elements is used, custom annotations
	public void test_nonnull_list_elements_01a() {
		Map customOptions = getCompilerOptions();
		customOptions.put(JavaCore.COMPILER_NULLABLE_ANNOTATION_NAME, "org.foo.Nullable");
		customOptions.put(JavaCore.COMPILER_NONNULL_ANNOTATION_NAME, "org.foo.NonNull");
		runNegativeTest(
			false /* skipJavac */,
			JavacTestOptions.Excuse.EclipseWarningConfiguredAsError,
			new String[] {
				CUSTOM_NULLABLE_NAME,
				CUSTOM_NULLABLE_CONTENT_JSR308,
				CUSTOM_NONNULL_NAME,
				CUSTOM_NONNULL_CONTENT_JSR308,
				"X.java",
				  "import org.foo.*;\n" +
				  "import java.util.List;\n" +
				  "public class X {\n" +
				  "    void foo(List<@Nullable Object> l) {\n" +
				  "        System.out.print(l.get(0).toString()); // problem: retrieved element can be null\n" +
				  "        l.add(null);\n" +
				  "    }\n" +
				  "    void bar(java.util.List<@Nullable Object> l) {\n" +
				  "        System.out.print(l.get(1).toString()); // problem: retrieved element can be null\n" +
				  "        l.add(null);\n" +
				  "    }\n" +
				  "}\n"},
			"----------\n" +
			"1. ERROR in X.java (at line 5)\n" +
			"	System.out.print(l.get(0).toString()); // problem: retrieved element can be null\n" +
			"	                 ^^^^^^^^\n" +
			"Potential null pointer access: The method get(int) may return null\n" +
			"----------\n" +
			"2. ERROR in X.java (at line 9)\n" +
			"	System.out.print(l.get(1).toString()); // problem: retrieved element can be null\n" +
			"	                 ^^^^^^^^\n" +
			"Potential null pointer access: The method get(int) may return null\n" +
			"----------\n",
			null,
			true, /* shouldFlush*/
			customOptions);
	}

