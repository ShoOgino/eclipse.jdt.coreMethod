//https://bugs.eclipse.org/bugs/show_bug.cgi?id=148807 - variation
public void test011() {
	if (new CompilerOptions(getCompilerOptions()).complianceLevel < ClassFileConstants.JDK1_5) {
		// there is a bug on 1.4 VMs which make them fail verification (see 148807)
		return;
	}
	this.runConformTest(
			new String[] {
				"X.java",
				"public class X {\n" + 
				"	public static void main(String[] args) {\n" + 
				"		try {\n" + 
				"			Object[][] all = new String[1][];\n" + 
				"			all[0] = new Object[0];\n" + 
				"		} catch (ArrayStoreException e) {\n" + 
				"			System.out.println(\"SUCCESS\");\n" + 
				"		}\n" + 
				"	}\n" + 
				"}", // =================
			},
			"SUCCESS");
		String expectedOutput =
			"  // Method descriptor #15 ([Ljava/lang/String;)V\n" + 
			"  // Stack: 3, Locals: 2\n" + 
			"  public static void main(java.lang.String[] args);\n" + 
			"     0  iconst_1\n" + 
			"     1  anewarray java.lang.String[] [16]\n" + 
			"     4  astore_1 [all]\n" + 
			"     5  aload_1 [all]\n" + 
			"     6  iconst_0\n" + 
			"     7  iconst_0\n" + 
			"     8  anewarray java.lang.Object [3]\n" + 
			"    11  aastore\n" + 
			"    12  goto 24\n" + 
			"    15  astore_1 [e]\n" + 
			"    16  getstatic java.lang.System.out : java.io.PrintStream [18]\n" + 
			"    19  ldc <String \"SUCCESS\"> [24]\n" + 
			"    21  invokevirtual java.io.PrintStream.println(java.lang.String) : void [26]\n" + 
			"    24  return\n" + 
			"      Exception Table:\n" + 
			"        [pc: 0, pc: 15] -> 15 when : java.lang.ArrayStoreException\n" + 
			"      Line numbers:\n" + 
			"        [pc: 0, line: 4]\n" + 
			"        [pc: 5, line: 5]\n" + 
			"        [pc: 15, line: 6]\n" + 
			"        [pc: 16, line: 7]\n" + 
			"        [pc: 24, line: 9]\n" + 
			"      Local variable table:\n" + 
			"        [pc: 0, pc: 25] local: args index: 0 type: java.lang.String[]\n" + 
			"        [pc: 5, pc: 15] local: all index: 1 type: java.lang.Object[][]\n" + 
			"        [pc: 16, pc: 24] local: e index: 1 type: java.lang.ArrayStoreException\n";

	try {
		File f = new File(OUTPUT_DIR + File.separator + "X.class");
		byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
		ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
		String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
		int index = result.indexOf(expectedOutput);
		if (index == -1 || expectedOutput.length() == 0) {
			System.out.println(Util.displayString(result, 3));
		}
		if (index == -1) {
			assertEquals("Wrong contents", expectedOutput, result);
		}
	} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
		assertTrue(false);
	} catch (IOException e) {
		assertTrue(false);
	}		
}

