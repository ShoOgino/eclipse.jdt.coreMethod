//https://bugs.eclipse.org/bugs/show_bug.cgi?id=114894 - variation
public void test051() {
	this.runConformTest(
			new String[] {
				"X.java",
				"public class X {\n" + 
				"	public static void main(String argv[]) {\n" + 
				"		System.out.println(\"[count=\" + count() + \"]\");\n" + 
				"	}\n" + 
				"	static int count() {\n" + 
				"		int count = 0;\n" + 
				"		try {\n" + 
				"			for (int i = 0;;) {\n" + 
				"				count++;\n" + 
				"				if (i++ > 10) \n" + 
				"					break; \n" + 
				"			}\n" + 
				"		} catch(Exception e) {\n" + 
				"		}\n" + 
				"		return count;\n" + 
				"	}\n" + 
				"}\n",
			},
			"[count=12]");
	
	String expectedOutput = new CompilerOptions(this.getCompilerOptions()).complianceLevel < ClassFileConstants.JDK1_6
		?	"  // Method descriptor #32 ()I\n" + 
			"  // Stack: 2, Locals: 2\n" + 
			"  static int count();\n" + 
			"     0  iconst_0\n" + 
			"     1  istore_0 [count]\n" + 
			"     2  iconst_0\n" + 
			"     3  istore_1 [i]\n" + 
			"     4  iinc 0 1 [count]\n" + 
			"     7  iload_1 [i]\n" + 
			"     8  iinc 1 1 [i]\n" + 
			"    11  bipush 10\n" + 
			"    13  if_icmple 4\n" + 
			"    16  goto 20\n" + 
			"    19  astore_1\n" + 
			"    20  iload_0 [count]\n" + 
			"    21  ireturn\n" + 
			"      Exception Table:\n" + 
			"        [pc: 2, pc: 19] -> 19 when : java.lang.Exception\n" + 
			"      Line numbers:\n" + 
			"        [pc: 0, line: 6]\n" + 
			"        [pc: 2, line: 8]\n" + 
			"        [pc: 4, line: 9]\n" + 
			"        [pc: 7, line: 10]\n" + 
			"        [pc: 19, line: 13]\n" + 
			"        [pc: 20, line: 15]\n" + 
			"      Local variable table:\n" + 
			"        [pc: 2, pc: 22] local: count index: 0 type: int\n" + 
			"        [pc: 4, pc: 16] local: i index: 1 type: int\n"
		:	
			"  // Method descriptor #32 ()I\n" + 
			"  // Stack: 2, Locals: 2\n" + 
			"  static int count();\n" + 
			"     0  iconst_0\n" + 
			"     1  istore_0 [count]\n" + 
			"     2  iconst_0\n" + 
			"     3  istore_1 [i]\n" + 
			"     4  iinc 0 1 [count]\n" + 
			"     7  iload_1 [i]\n" + 
			"     8  iinc 1 1 [i]\n" + 
			"    11  bipush 10\n" + 
			"    13  if_icmple 4\n" + 
			"    16  goto 20\n" + 
			"    19  astore_1\n" + 
			"    20  iload_0 [count]\n" + 
			"    21  ireturn\n" + 
			"      Exception Table:\n" + 
			"        [pc: 2, pc: 19] -> 19 when : java.lang.Exception\n" + 
			"      Line numbers:\n" + 
			"        [pc: 0, line: 6]\n" + 
			"        [pc: 2, line: 8]\n" + 
			"        [pc: 4, line: 9]\n" + 
			"        [pc: 7, line: 10]\n" + 
			"        [pc: 19, line: 13]\n" + 
			"        [pc: 20, line: 15]\n" + 
			"      Local variable table:\n" + 
			"        [pc: 2, pc: 22] local: count index: 0 type: int\n" + 
			"        [pc: 4, pc: 16] local: i index: 1 type: int\n" + 
			"      Stack map table: number of frames 3\n" + 
			"        [pc: 4, append: {int, int}]\n" + 
			"        [pc: 19, full, stack: {java.lang.Exception}, locals: {int}]\n" + 
			"        [pc: 20, same]\n";
	
	try {
		File f = new File(OUTPUT_DIR + File.separator + "X.class");
		byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
		ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
		String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
		int index = result.indexOf(expectedOutput);
		if (index == -1 || expectedOutput.length() == 0) {
			System.out.println(Util.displayString(result, 3));
		}
		if (index == -1) {
			assertEquals("Wrong contents", expectedOutput, result);
		}
	} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
		assertTrue(false);
	} catch (IOException e) {
		assertTrue(false);
	}	
}

