public void test0824() throws Exception {
	runConformTest(
		true,
		new String[] {
			"X.java",
			"import java.io.Serializable;\n" + 
			"\n" + 
			"public class X<T extends Serializable & Runnable, V extends T> {\n" + 
			"	void foo(T t) {\n" + 
			"		(this == null ? t : t).run();\n" + 
			"		((V) t).run();\n" + 
			"	}\n" + 
			"	public static void main(String[] args) {\n" + 
			"		new X<A, A>().foo(new A());\n" + 
			"	}\n" + 
			"}\n" + 
			"class A implements Serializable, Runnable {\n" + 
			"	public void run() {\n" + 
			"		System.out.print(\"AA\");\n" + 
			"	}\n" + 
			"}\n",
		},
		null,
		"AAAA",
		null,
		JavacTestOptions.JavacHasABug.JavacBug6531075);
	// 	ensure proper declaring class for #run() invocation
	String expectedOutput =
		"  // Method descriptor #17 (Ljava/io/Serializable;)V\n" + 
		"  // Signature: (TT;)V\n" + 
		"  // Stack: 1, Locals: 2\n" + 
		"  void foo(java.io.Serializable t);\n" + 
		"     0  aload_0 [this]\n" + 
		"     1  ifnonnull 8\n" + 
		"     4  aload_1 [t]\n" + 
		"     5  goto 9\n" + 
		"     8  aload_1 [t]\n" + 
		"     9  checkcast java.lang.Runnable [20]\n" + 
		"    12  invokeinterface java.lang.Runnable.run() : void [22] [nargs: 1]\n" + 
		"    17  aload_1 [t]\n" + 
		"    18  checkcast java.lang.Runnable [20]\n" + 
		"    21  invokeinterface java.lang.Runnable.run() : void [22] [nargs: 1]\n" + 
		"    26  return\n" + 
		"      Line numbers:\n" + 
		"        [pc: 0, line: 5]\n" + 
		"        [pc: 17, line: 6]\n" + 
		"        [pc: 26, line: 7]\n" + 
		"      Local variable table:\n" + 
		"        [pc: 0, pc: 27] local: this index: 0 type: X\n" + 
		"        [pc: 0, pc: 27] local: t index: 1 type: java.io.Serializable\n" + 
		"      Local variable type table:\n" + 
		"        [pc: 0, pc: 27] local: this index: 0 type: X<T,V>\n" + 
		"        [pc: 0, pc: 27] local: t index: 1 type: T\n";
	
	File f = new File(OUTPUT_DIR + File.separator + "X.class");
	byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
	ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
	String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
	int index = result.indexOf(expectedOutput);
	if (index == -1 || expectedOutput.length() == 0) {
		System.out.println(Util.displayString(result, 3));
	}
	if (index == -1) {
		assertEquals("Wrong contents", expectedOutput, result);
	}
}

