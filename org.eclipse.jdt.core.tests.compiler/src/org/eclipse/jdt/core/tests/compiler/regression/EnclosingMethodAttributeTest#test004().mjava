	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=288920
	public void test004() throws Exception {
		this.runConformTest(
			new String[] {
				"X.java",
				"import java.lang.reflect.*;\n" +
				"interface I<E> {\n" +
				"	public String run();\n" +
				"}\n" +
				"public class X {\n" +
				"	public Object test(String s, int i) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {\n" +
				"		return (new I<String>() {" +
				"			public String run() {\n" +
				"				return \"SUCCESS\";\n" +
				"			}\n" +
				"		}).run();\n" +
				"	}\n" +
				"	public static void main(String args[]) {\n" +
				"		X t = new X();\n" +
				"		try {\n" +
				"			System.out.println(t.test(\"\", 0));\n" +
				"		} catch (Exception e) {\n" +
				"			e.printStackTrace();\n" +
				"		}\n" +
				"	}\n" +
				"}"
			},
			"SUCCESS");

		Requestor requestor =
					new Requestor(
						true,
						null,
						false, /* show category */
						false /* show warning token*/);
		requestor.outputPath = OUTPUT_DIR.endsWith(File.separator) ? OUTPUT_DIR : OUTPUT_DIR + File.separator;
				// WORK should not have to test a constant?

		Map<String, String> options = getCompilerOptions();
		CompilerOptions compilerOptions = new CompilerOptions(options);
		compilerOptions.performMethodsFullRecovery = true;
		compilerOptions.performStatementsRecovery = true;
		INameEnvironment nameEnvironment = getNameEnvironment(new String[]{}, null);
		Compiler batchCompiler =
			new Compiler(
				nameEnvironment,
				getErrorHandlingPolicy(),
				compilerOptions,
				requestor,
				getProblemFactory());
		ReferenceBinding binaryType = batchCompiler.lookupEnvironment.askForType(new char[][] {new char[0], "X$1".toCharArray()});
		assertNotNull("Should not be null", binaryType);
	}

