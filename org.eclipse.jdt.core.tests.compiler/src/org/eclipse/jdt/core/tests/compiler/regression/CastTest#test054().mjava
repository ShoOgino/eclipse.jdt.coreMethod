// https://bugs.eclipse.org/bugs/show_bug.cgi?id=353085
// Also confirm that a check cast and unboxing conversion are generated.
public void test054() throws Exception {
	CompilerOptions options = new CompilerOptions(getCompilerOptions());
	String source =
			"public class X {\n" + 
			"	public static void main(String[] args) {\n" + 
			"		Object x = foo();\n" + 
			"		int y = (int) x;\n" + 
			"		System.out.println(y);\n" + 
			"	}\n" + 
			"	public static Object foo() {\n" + 
			"		return new Integer(1);\n" + 
			"	}\n" + 
			"}";
	if (options.sourceLevel < ClassFileConstants.JDK1_7) {
		this.runNegativeTest(
				new String[] {
					"X.java",
					source
				},
				"----------\n" + 
				"1. ERROR in X.java (at line 4)\n" + 
				"	int y = (int) x;\n" + 
				"	        ^^^^^^^\n" + 
				"Cannot cast from Object to int\n" + 
				"----------\n"
			);
	} else {
		this.runConformTest(
				new String[] {
					"X.java",
					source
				},
				"1"
			);
		String expectedOutput = 
				"  // Method descriptor #15 ([Ljava/lang/String;)V\n" + 
				"  // Stack: 2, Locals: 3\n" + 
				"  public static void main(java.lang.String[] args);\n" + 
				"     0  invokestatic X.foo() : java.lang.Object [16]\n" + 
				"     3  astore_1 [x]\n" + 
				"     4  aload_1 [x]\n" + 
				"     5  checkcast java.lang.Integer [20]\n" + 
				"     8  invokevirtual java.lang.Integer.intValue() : int [22]\n" + 
				"    11  istore_2 [y]\n" + 
				"    12  getstatic java.lang.System.out : java.io.PrintStream [26]\n" + 
				"    15  iload_2 [y]\n" + 
				"    16  invokevirtual java.io.PrintStream.println(int) : void [32]\n" + 
				"    19  return\n" + 
				"      Line numbers:\n" + 
				"        [pc: 0, line: 3]\n" + 
				"        [pc: 4, line: 4]\n" + 
				"        [pc: 12, line: 5]\n" + 
				"        [pc: 19, line: 6]\n" + 
				"      Local variable table:\n" + 
				"        [pc: 0, pc: 20] local: args index: 0 type: java.lang.String[]\n" + 
				"        [pc: 4, pc: 20] local: x index: 1 type: java.lang.Object\n" + 
				"        [pc: 12, pc: 20] local: y index: 2 type: int\n" + 
				"  \n";
		File f = new File(OUTPUT_DIR + File.separator + "X.class");
		byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
		ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
		String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
		int index = result.indexOf(expectedOutput);
		if (index == -1 || expectedOutput.length() == 0) {
			System.out.println(Util.displayString(result, 3));
		}
		if (index == -1) {
			assertEquals("Wrong contents", expectedOutput, result);
		}
	}
}

