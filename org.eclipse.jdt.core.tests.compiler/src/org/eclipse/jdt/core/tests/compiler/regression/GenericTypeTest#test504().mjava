	//https://bugs.eclipse.org/bugs/show_bug.cgi?id=85303 - variation
	public void test504() {
		this.runConformTest(
			new String[] {
				"X.java",
				"class XA {}\n" + 
				"interface XB {\n" + 
				"	XB CONST = new XB(){ public String toString() { return \"SUCCESS\"; }};\n" + 
				"}\n" + 
				"class XAB extends XA implements XB {}\n" + 
				"\n" + 
				"public class X <E extends XA&XB> {\n" + 
				"  E e() { return null; }\n" + 
				"  public static void main(String[] args) {\n" + 
				"	  System.out.print(new X<XAB>().e().CONST);\n" + 
				"	  new X<XAB>().foo();\n" + 
				"  }\n" + 
				"  public void foo() {\n" + 
				"    System.out.print(this.e().CONST);\n" + 
				"  }\n" + 
				"}\n",
			},
			"SUCCESSSUCCESS");		
		String expectedOutput =
			"// Compiled from X.java (version 1.5 : 49.0, super bit)\n" + 
			"// Signature: <E:LXA;:LXB;>Ljava/lang/Object;\n" + 
			"public class X extends java.lang.Object {\n" + 
			"  \n" + 
			"  // Method descriptor #6 ()V\n" + 
			"  // Stack: 1, Locals: 1\n" + 
			"  public X();\n" + 
			"    0  aload_0 [this]\n" + 
			"    1  invokespecial java.lang.Object() [9]\n" + 
			"    4  return\n" + 
			"      Line numbers:\n" + 
			"        [pc: 0, line: 7]\n" + 
			"      Local variable table:\n" + 
			"        [pc: 0, pc: 5] local: this index: 0 type: X\n" + 
			"      Local variable type table:\n" + 
			"        [pc: 0, pc: 5] local: this index: 0 type: X<E>\n" + 
			"  \n" + 
			"  // Method descriptor #17 ()LXA;\n" + 
			"  // Signature: ()TE;\n" + 
			"  // Stack: 1, Locals: 1\n" + 
			"  XA e();\n" + 
			"    0  aconst_null\n" + 
			"    1  areturn\n" + 
			"      Line numbers:\n" + 
			"        [pc: 0, line: 8]\n" + 
			"      Local variable table:\n" + 
			"        [pc: 0, pc: 2] local: this index: 0 type: X\n" + 
			"      Local variable type table:\n" + 
			"        [pc: 0, pc: 2] local: this index: 0 type: X<E>\n" + 
			"  \n" + 
			"  // Method descriptor #21 ([Ljava/lang/String;)V\n" + 
			"  // Stack: 3, Locals: 1\n" + 
			"  public static void main(String[] args);\n" + 
			"     0  getstatic java.lang.System.out : java.io.PrintStream [27]\n" + 
			"     3  new X [2]\n" + 
			"     6  dup\n" + 
			"     7  invokespecial X() [28]\n" + 
			"    10  invokevirtual X.e() : XA  [30]\n" + 
			"    13  pop\n" + 
			"    14  getstatic XAB.CONST : XB [36]\n" + 
			"    17  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [42]\n" + 
			"    20  new X [2]\n" + 
			"    23  dup\n" + 
			"    24  invokespecial X() [28]\n" + 
			"    27  invokevirtual X.foo() : void  [45]\n" + 
			"    30  return\n" + 
			"      Line numbers:\n" + 
			"        [pc: 0, line: 10]\n" + 
			"        [pc: 20, line: 11]\n" + 
			"        [pc: 30, line: 12]\n" + 
			"      Local variable table:\n" + 
			"        [pc: 0, pc: 31] local: args index: 0 type: java.lang.String[]\n" + 
			"  \n" + 
			"  // Method descriptor #6 ()V\n" + 
			"  // Stack: 2, Locals: 1\n" + 
			"  public void foo();\n" + 
			"     0  getstatic java.lang.System.out : java.io.PrintStream [27]\n" + 
			"     3  aload_0 [this]\n" + 
			"     4  invokevirtual X.e() : XA  [30]\n" + 
			"     7  pop\n" + 
			"     8  getstatic XB.CONST : XB [50]\n" + 
			"    11  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [42]\n" + 
			"    14  return\n" + 
			"      Line numbers:\n" + 
			"        [pc: 0, line: 14]\n" + 
			"        [pc: 14, line: 15]\n" + 
			"      Local variable table:\n" + 
			"        [pc: 0, pc: 15] local: this index: 0 type: X\n" + 
			"      Local variable type table:\n" + 
			"        [pc: 0, pc: 15] local: this index: 0 type: X<E>\n" + 
			"}";
		
		try {
			File f = new File(OUTPUT_DIR + File.separator + "X.class");
			byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
			ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
			String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
			int index = result.indexOf(expectedOutput);
			if (index == -1 || expectedOutput.length() == 0) {
				System.out.println(Util.displayString(result, 3));
			}
			if (index == -1) {
				assertEquals("Wrong contents", expectedOutput, result);
			}
		} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
			assertTrue(false);
		} catch (IOException e) {
			assertTrue(false);
		}
	}			

