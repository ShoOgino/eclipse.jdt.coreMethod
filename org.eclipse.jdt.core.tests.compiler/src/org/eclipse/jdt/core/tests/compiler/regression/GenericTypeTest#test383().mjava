	public void test383() {
		this.runNegativeTest(
			new String[] {
				"X.java",
				"public class X extends Y implements I { public <T> void foo(Class<T> s) {} }\n" + 
				"interface I { <T, S> void foo(Class<T> s); }\n" + 
				"class Y { public <T> void foo(Class<T> s) {} }\n"
			},
			"----------\n" + 
			"1. ERROR in X.java (at line 1)\n" + 
			"	public class X extends Y implements I { public <T> void foo(Class<T> s) {} }\n" + 
			"	             ^\n" + 
			"Class must implement the inherited abstract method I.foo(Class<T>)\n" + 
			"----------\n" + 
			"2. ERROR in X.java (at line 1)\n" + 
			"	public class X extends Y implements I { public <T> void foo(Class<T> s) {} }\n" + 
			"	                                                        ^^^^^^^^^^^^^^^\n" + 
			"Name clash : The method foo(Class<T>) of type X has the same erasure as foo(Class<T>) of type I but does not override it\n" + 
			"----------\n");
			/*
			X.java:1: X is not abstract and does not override abstract method <T,S>foo(java.lang.Class<T>) in I
			public class X extends Y implements I { public <T> void foo(Class<T> s) {} }
			       ^
       		*/
		this.runNegativeTest(
			new String[] {
				"X.java",
				"public class X extends Y implements I {}\n" + 
				"interface I { <T, S> void foo(Class<T> s); }\n" + 
				"class Y { public <T> void foo(Class<T> s) {} }\n"
			},
			"----------\n" + 
			"1. ERROR in X.java (at line 1)\n" + 
			"	public class X extends Y implements I {}\n" + 
			"	             ^\n" + 
			"Name clash : The method foo(Class<T>) of type Y has the same erasure as foo(Class<T>) of type I but does not override it\n" + 
			"----------\n" + 
			"2. ERROR in X.java (at line 1)\n" + 
			"	public class X extends Y implements I {}\n" + 
			"	             ^\n" + 
			"Class must implement the inherited abstract method I.foo(Class<T>)\n" + 
			"----------\n");
			/*
			X.java:1: X is not abstract and does not override abstract method <T,S>foo(java.lang.Class<T>) in I
			public class X extends Y implements I {}
			       ^
			*/
		this.runNegativeTest(
			new String[] {
				"X.java",
				"public abstract class X extends Y implements I {}\n" + // NOTE: X is abstract
				"interface I { <T> void foo(Class<T> s); }\n" + 
				"class Y { public <T, S> void foo(Class<T> s) {} }\n"
			},
			"----------\n" + 
			"1. ERROR in X.java (at line 1)\n" + 
			"	public abstract class X extends Y implements I {}\n" + 
			"	                      ^\n" + 
			"Name clash : The method foo(Class<T>) of type Y has the same erasure as foo(Class<T>) of type I but does not override it\n" + 
			"----------\n");
			/*
			X.java:1: name clash: <T,S>foo(java.lang.Class<T>) in Y and <T>foo(java.lang.Class<T>) in I have the same erasure, yet neither overrides the other
			public abstract class X extends Y implements I {}
			                ^
			 */
	}

