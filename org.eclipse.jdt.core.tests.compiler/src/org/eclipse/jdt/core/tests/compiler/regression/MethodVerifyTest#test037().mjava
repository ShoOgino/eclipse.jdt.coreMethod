	public void test037() { // test inheritance scenarios
		this.runNegativeTest(
			new String[] {
				"X.java",
				"public abstract class X implements I, J { }\n" +
				"abstract class Y implements J, I { }\n" +
				"abstract class Z implements K { }\n" +

				"class YYY implements J, I { public void foo(A a) {} }\n" +
				"class XXX implements I, J { public void foo(A a) {} }\n" +
				"class ZZZ implements K { public void foo(A a) {} }\n" +

				"interface I { void foo(A a); }\n" +
				"interface J { void foo(A<String> a); }\n" +
				"interface K extends I { void foo(A<String> a); }\n" +
				"class A<T> {}"
			},
			this.complianceLevel < ClassFileConstants.JDK1_7 ? 
			"----------\n" + 
			"1. WARNING in X.java (at line 4)\n" + 
			"	class YYY implements J, I { public void foo(A a) {} }\n" + 
			"	                                            ^\n" + 
			"A is a raw type. References to generic type A<T> should be parameterized\n" + 
			"----------\n" + 
			"2. WARNING in X.java (at line 5)\n" + 
			"	class XXX implements I, J { public void foo(A a) {} }\n" + 
			"	                                            ^\n" + 
			"A is a raw type. References to generic type A<T> should be parameterized\n" + 
			"----------\n" + 
			"3. WARNING in X.java (at line 6)\n" + 
			"	class ZZZ implements K { public void foo(A a) {} }\n" + 
			"	                                         ^\n" + 
			"A is a raw type. References to generic type A<T> should be parameterized\n" + 
			"----------\n" + 
			"4. WARNING in X.java (at line 7)\n" + 
			"	interface I { void foo(A a); }\n" + 
			"	                       ^\n" + 
			"A is a raw type. References to generic type A<T> should be parameterized\n" + 
			"----------\n" + 
			"5. ERROR in X.java (at line 9)\n" + 
			"	interface K extends I { void foo(A<String> a); }\n" + 
			"	                             ^^^^^^^^^^^^^^^^\n" + 
			"Name clash: The method foo(A<String>) of type K has the same erasure as foo(A) of type I but does not override it\n" + 
			"----------\n" : 
				"----------\n" + 
				"1. ERROR in X.java (at line 2)\n" + 
				"	abstract class Y implements J, I { }\n" + 
				"	               ^\n" + 
				"Name clash: The method foo(A<String>) of type J has the same erasure as foo(A) of type I but does not override it\n" + 
				"----------\n" + 
				"2. WARNING in X.java (at line 4)\n" + 
				"	class YYY implements J, I { public void foo(A a) {} }\n" + 
				"	                                            ^\n" + 
				"A is a raw type. References to generic type A<T> should be parameterized\n" + 
				"----------\n" + 
				"3. WARNING in X.java (at line 5)\n" + 
				"	class XXX implements I, J { public void foo(A a) {} }\n" + 
				"	                                            ^\n" + 
				"A is a raw type. References to generic type A<T> should be parameterized\n" + 
				"----------\n" + 
				"4. WARNING in X.java (at line 6)\n" + 
				"	class ZZZ implements K { public void foo(A a) {} }\n" + 
				"	                                         ^\n" + 
				"A is a raw type. References to generic type A<T> should be parameterized\n" + 
				"----------\n" + 
				"5. WARNING in X.java (at line 7)\n" + 
				"	interface I { void foo(A a); }\n" + 
				"	                       ^\n" + 
				"A is a raw type. References to generic type A<T> should be parameterized\n" + 
				"----------\n" + 
				"6. ERROR in X.java (at line 9)\n" + 
				"	interface K extends I { void foo(A<String> a); }\n" + 
				"	                             ^^^^^^^^^^^^^^^^\n" + 
				"Name clash: The method foo(A<String>) of type K has the same erasure as foo(A) of type I but does not override it\n" + 
				"----------\n");
	}

