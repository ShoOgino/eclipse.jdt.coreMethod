//various non-null expressions: class-literal, string-literal, casted 'this'
public void testExpressions03() {
	this.runNegativeTest(
		new String[] {
			"X.java",
			"public class X {\n" +
			"	 void foo() {\n" +
			"		if (X.class == null)\n" +
			"           System.out.println(\"null\");\n" +
			"    }\n" +
			"    void goo() {\n" +
			"        if (null != \"STRING\")\n" +
			"            System.out.println(\"nonnull\");\n" +
			"        if (null == (Object)this)\n" +
			"            System.out.println(\"I'm null\");\n" +
			"    }\n" +
			"}\n"
		},
		"----------\n" + 
		"1. ERROR in X.java (at line 3)\n" + 
		"	if (X.class == null)\n" + 
		"	    ^^^^^^^\n" + 
		"Null comparison always yields false: this expression cannot be null\n" + 
		"----------\n" + 
		"2. WARNING in X.java (at line 4)\n" + 
		"	System.out.println(\"null\");\n" + 
		"	^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
		"Dead code\n" + 
		"----------\n" + 
		"3. ERROR in X.java (at line 7)\n" + 
		"	if (null != \"STRING\")\n" + 
		"	            ^^^^^^^^\n" + 
		"Redundant null check: this expression cannot be null\n" + 
		"----------\n" + 
		"4. ERROR in X.java (at line 9)\n" + 
		"	if (null == (Object)this)\n" + 
		"	            ^^^^^^^^^^^^\n" + 
		"Null comparison always yields false: this expression cannot be null\n" + 
		"----------\n" + 
		"5. WARNING in X.java (at line 10)\n" + 
		"	System.out.println(\"I\'m null\");\n" + 
		"	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
		"Dead code\n" + 
		"----------\n"
	);
}

