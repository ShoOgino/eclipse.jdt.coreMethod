	// check code generation of annotation default attribute non array types
	public void test074() {
		this.runConformTest(
			new String[] {
				"X.java",
				"@interface Foo {\n" + 
				"    double value() default 0.0;\n" + 
				"    int id() default 0;\n" + 
				"}\n" + 
				"enum Color {" +
				"	BLUE, RED, GREEN\n" + 
				"}\n" + 
				"@interface I {\n" + 
				"    Color _enum() default Color.GREEN;\n" + 
				"    Foo _annotation() default @Foo();\n" + 
				"    int _int() default 0;\n" + 
				"    byte _byte() default 1;\n" + 
				"    short _short() default 3;\n" + 
				"    long _long() default Long.MIN_VALUE;\n" + 
				"    String _string() default \"\";\n" + 
				"    boolean _boolean() default true;\n" + 
				"    float _float() default Float.MAX_VALUE;\n" + 
				"    double _double() default Double.MAX_VALUE;\n" + 
				"    Class _class() default I.class;\n" + 
				"}\n" + 
				"public class X {\n" + 
				"    @I(_enum=Color.RED,\n" + 
				"		_annotation=@Foo(),\n" + 
				"		_int=2,\n" + 
				"		_byte=1,\n" + 
				"		_short=5,\n" + 
				"		_long=Long.MIN_VALUE,\n" + 
				"		_string=\"Hi\",\n" + 
				"		_boolean=true,\n" +
				"		_float=0.0f,\n" +
				"		_double=-0.0) void foo() {\n" + 
				"    }\n" + 
				"}\n"
			},
		"");
		
		ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
		String actualOutput = null;
		try {
			byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +"I.class"));
			actualOutput =
				disassembler.disassemble(
					classFileBytes,
					"\n",
					ClassFileBytesDisassembler.DETAILED); 
		} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
			assertTrue("ClassFormatException", false);
		} catch (IOException e) {
			assertTrue("IOException", false);
		}
		
		String expectedOutput = 
			"// Compiled from X.java (version 1.5 : 49.0, no super bit)\n" + 
			"abstract @interface I extends java.lang.Object implements java.lang.annotation.Annotation {\n" + 
			"  \n" + 
			"  // Method descriptor  #8 ()LColor;\n" + 
			"  abstract public Color _enum() default Color.GREEN;\n" + 
			"  \n" + 
			"  // Method descriptor  #13 ()LFoo;\n" + 
			"  abstract public Foo _annotation() default @Foo();\n" + 
			"  \n" + 
			"  // Method descriptor  #16 ()I\n" + 
			"  abstract public int _int() default (int) 0;\n" + 
			"  \n" + 
			"  // Method descriptor  #19 ()B\n" + 
			"  abstract public byte _byte() default (byte) 1;\n" + 
			"  \n" + 
			"  // Method descriptor  #22 ()S\n" + 
			"  abstract public short _short() default (short) 3;\n" + 
			"  \n" + 
			"  // Method descriptor  #25 ()J\n" + 
			"  abstract public long _long() default -9223372036854775808L;\n" + 
			"  \n" + 
			"  // Method descriptor  #29 ()Ljava/lang/String;\n" + 
			"  abstract public String _string() default \"\";\n" + 
			"  \n" + 
			"  // Method descriptor  #32 ()Z\n" + 
			"  abstract public boolean _boolean() default true;\n" + 
			"  \n" + 
			"  // Method descriptor  #34 ()F\n" + 
			"  abstract public float _float() default 3.4028235E38f;\n" + 
			"  \n" + 
			"  // Method descriptor  #37 ()D\n" + 
			"  abstract public double _double() default 1.7976931348623157E308;\n" + 
			"  \n" + 
			"  // Method descriptor  #41 ()Ljava/lang/Class;\n" + 
			"  abstract public Class _class() default I;\n" + 
			"}"; 
			
		if (actualOutput.indexOf(expectedOutput) == -1) {
			System.out.println(org.eclipse.jdt.core.tests.util.Util.displayString(actualOutput, 2));
		}
		assertTrue("unexpected bytecode sequence", actualOutput.indexOf(expectedOutput) != -1);
	}	

