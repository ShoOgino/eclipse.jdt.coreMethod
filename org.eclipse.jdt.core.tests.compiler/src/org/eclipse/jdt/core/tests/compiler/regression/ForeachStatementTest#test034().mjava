//https://bugs.eclipse.org/bugs/show_bug.cgi?id=108783 - variation
public void test034() { 
	this.runConformTest(
		new String[] {
			"X.java",
			"import java.util.*;\n" + 
			"\n" + 
			"public class X <T extends Bar> {\n" + 
			"	public static void main(String[] args) {\n" + 
			"		new X<Bar>().foo(new Bar());\n" + 
			"	}\n" + 
			"	void foo(T t) {\n" + 
			"		for (String s : t) {\n" + 
			"			System.out.print(s);\n" + 
			"		}\n" + 
			"		System.out.println();\n" + 
			"	}\n" + 
			"}\n" + 
			"class ArrayIterator<T> implements Iterator<T> {\n" + 
			"	T[] values;\n" + 
			"	int count;\n" + 
			"	ArrayIterator(T[] values) {\n" + 
			"		this.values = values;\n" + 
			"		this.count = 0;\n" + 
			"	}\n" + 
			"	public boolean hasNext() {\n" + 
			"		return this.count < this.values.length;\n" + 
			"	}\n" + 
			"	public T next() {\n" + 
			"		if (this.count >= this.values.length) throw new NoSuchElementException();\n" + 
			"		T value = this.values[this.count];\n" + 
			"		this.values[this.count++] = null; // clear\n" + 
			"		return value;\n" + 
			"	}\n" + 
			"	public void remove() {\n" + 
			"	}\n" + 
			"}\n" + 
			"class Bar implements Iterable<String> {\n" + 
			"	public Iterator<String> iterator() {\n" + 
			"		return new ArrayIterator<String>(new String[]{\"a\",\"b\"});\n" + 
			"	}\n" + 
			"}\n",
		},
		"ab");
	// 	ensure proper declaring class (Bar): 1  invokevirtual Bar.iterator() : java.util.Iterator  [33]
	String expectedOutput =
		"  // Method descriptor #25 (LBar;)V\n" + 
		"  // Signature: (TT;)V\n" + 
		"  // Stack: 2, Locals: 4\n" + 
		"  void foo(Bar t);\n" + 
		"     0  aload_1 [t]\n" + 
		"     1  invokevirtual Bar.iterator() : java.util.Iterator [30]\n" + 
		"     4  astore_3\n" + 
		"     5  goto 25\n" + 
		"     8  aload_3\n" + 
		"     9  invokeinterface java.util.Iterator.next() : java.lang.Object [34] [nargs: 1]\n" + 
		"    14  checkcast java.lang.String [40]\n" + 
		"    17  astore_2 [s]\n" + 
		"    18  getstatic java.lang.System.out : java.io.PrintStream [42]\n" + 
		"    21  aload_2 [s]\n" + 
		"    22  invokevirtual java.io.PrintStream.print(java.lang.String) : void [48]\n" + 
		"    25  aload_3\n" + 
		"    26  invokeinterface java.util.Iterator.hasNext() : boolean [54] [nargs: 1]\n" + 
		"    31  ifne 8\n" + 
		"    34  getstatic java.lang.System.out : java.io.PrintStream [42]\n" + 
		"    37  invokevirtual java.io.PrintStream.println() : void [58]\n" + 
		"    40  return\n" + 
		"      Line numbers:\n" + 
		"        [pc: 0, line: 8]\n" + 
		"        [pc: 18, line: 9]\n" + 
		"        [pc: 25, line: 8]\n" + 
		"        [pc: 34, line: 11]\n" + 
		"        [pc: 40, line: 12]\n" + 
		"      Local variable table:\n" + 
		"        [pc: 0, pc: 41] local: this index: 0 type: X\n" + 
		"        [pc: 0, pc: 41] local: t index: 1 type: Bar\n" + 
		"        [pc: 18, pc: 34] local: s index: 2 type: java.lang.String\n" + 
		"      Local variable type table:\n" + 
		"        [pc: 0, pc: 41] local: this index: 0 type: X<T>\n" + 
		"        [pc: 0, pc: 41] local: t index: 1 type: T\n";
	
	try {
		File f = new File(OUTPUT_DIR + File.separator + "X.class");
		byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
		ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
		String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
		int index = result.indexOf(expectedOutput);
		if (index == -1 || expectedOutput.length() == 0) {
			System.out.println(Util.displayString(result, 3));
		}
		if (index == -1) {
			assertEquals("Wrong contents", expectedOutput, result);
		}
	} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
		assertTrue(false);
	} catch (IOException e) {
		assertTrue(false);
	}		
}

