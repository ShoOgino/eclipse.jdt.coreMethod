	public void test011() throws Exception {
		// Test that a private inner class does not get a mandated enclosing instance parameter.
		
		this.runParameterNameTest(
			"X.java",
			"public class X {\n" +
			"    private class Y {}\n" +
			"}\n"
		);

		ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
		String path = OUTPUT_DIR + File.separator + "X$Y.class";
		byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(path));
		String actualOutput =
			disassembler.disassemble(
				classFileBytes,
				"\n",
				ClassFileBytesDisassembler.DETAILED);

		String expectedOutput =
				"  private X$Y(X this$0);\n" + 
				"     0  aload_0 [this]\n" + 
				"     1  aload_1 [this$0]\n" + 
				"     2  putfield X$Y.this$0 : X [10]\n" + 
				"     5  aload_0 [this]\n" + 
				"     6  invokespecial java.lang.Object() [12]\n" + 
				"     9  return\n" + 
				"      Line numbers:\n" + 
				"        [pc: 0, line: 2]\n" + 
				"      Method Parameters:\n" + 
				"        final synthetic this$0\n" + 
				"\n";

		assertSubstring(actualOutput, expectedOutput);
	}

