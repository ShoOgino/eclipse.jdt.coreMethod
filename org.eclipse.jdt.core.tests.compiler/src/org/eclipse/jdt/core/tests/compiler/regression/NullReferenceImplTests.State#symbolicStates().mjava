	static Iterator symbolicStates() {
		return new Iterator() {
			int nextSymbolic = -1;
			public boolean hasNext() {
				if (nextSymbolic == -1) {
					for (nextSymbolic = 0; nextSymbolic < states.length; nextSymbolic++) {
						if (states[nextSymbolic].symbolic) {
							break;
						}
					}
				} else {
					for (; nextSymbolic < states.length; nextSymbolic++) {
						if (states[nextSymbolic].symbolic) {
							break;
						}
					}
				}
				return nextSymbolic < states.length;
			}
			public Object next() {
				State result = null;
				if (nextSymbolic < states.length) {
					result = states[nextSymbolic];
					nextSymbolic++;
				}
				return result;
			}
			public void remove() {
				throw new RuntimeException("unimplemented");
			}
		};
	}

