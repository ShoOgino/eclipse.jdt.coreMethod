	/**
	 * Same-named classes should not conflict, since one is not accessible.
	 * Still a sub class of the inaccessible class can be accessed and used for a method argument.
	 */
	public void testApiLeak2() {
		File outputDirectory = new File(OUTPUT_DIR);
		Util.flushDirectoryContent(outputDirectory);
		String out = "bin";
		String directory = OUTPUT_DIR + File.separator + "src";
		
		String moduleLoc = directory + File.separator + "mod.one";
		writeFile(moduleLoc, "module-info.java", 
						"module mod.one { \n" +
						"	exports pm;\n" +
						"}");
		writeFile(moduleLoc + File.separator + "impl", "SomeImpl.java", 
						"package impl;\n" +
						"public class SomeImpl {\n" +
						"}\n");
		writeFile(moduleLoc + File.separator + "pm", "C1.java", 
						"package pm;\n" +
						"import impl.SomeImpl;\n" + 
						"public class C1 {\n" +
						"	public void m1(SomeImpl o) {}\n" + 
						"}\n");
		writeFile(moduleLoc + File.separator + "pm", "Other.java", 
						"package pm;\n" +
						"import impl.SomeImpl;\n" + 
						"public class Other extends SomeImpl {\n" +
						"}\n");

		moduleLoc = directory + File.separator + "mod.two";
		writeFile(moduleLoc, "module-info.java", 
						"module mod.two { \n" +
						"	requires mod.one;\n" +
						"}");
		writeFile(moduleLoc + File.separator + "impl", "SomeImpl.java", 
						"package impl;\n" +
						"public class SomeImpl {\n" + // pseudo-conflict to same named, but inaccessible class from mod.one
						"}\n");
		writeFile(moduleLoc + File.separator + "po", "Client.java", 
						"package po;\n" + 
						"import pm.C1;\n" + 
						"import pm.Other;\n" +
						"import impl.SomeImpl;\n" + 
						"public class Client {\n" + 
						"    void test1(C1 one) {\n" +
						"		 SomeImpl impl = new SomeImpl();\n" + // our own version 
						"        one.m1(impl);\n" + // incompatible to what's required 
						"		 one.m1(new Other());\n" + // OK
						"    }\n" + 
						"}\n");

		StringBuffer buffer = new StringBuffer();
		buffer.append("-d " + OUTPUT_DIR + File.separator + out )
			.append(" -9 ")
			.append(" -classpath \"")
			.append(Util.getJavaClassLibsAsString())
			.append("\" ")
			.append(" --module-source-path " + "\"" + directory + "\"");

		runNegativeTest(new String[]{}, 
				buffer.toString(), 
				"",
				"----------\n" + 
				"1. ERROR in ---OUTPUT_DIR_PLACEHOLDER---/src/mod.two/po/Client.java (at line 8)\n" + 
				"	one.m1(impl);\n" + 
				"	    ^^\n" + 
				"The method m1(impl.SomeImpl) in the type C1 is not applicable for the arguments (impl.SomeImpl)\n" + 
				"----------\n" + 
				"1 problem (1 error)\n",
				false);
	}

