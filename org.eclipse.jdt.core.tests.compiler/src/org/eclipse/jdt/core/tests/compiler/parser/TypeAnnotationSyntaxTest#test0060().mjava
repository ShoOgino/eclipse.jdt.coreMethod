// cast expression
public void test0060() throws IOException {
	String source = "public class Clazz {\n" +
					"public static void main(String[] args) {\n" +
					"int x;\n" +
					"x = (Integer)\n" +
					"(@Readonly Object)\n" +
					"(@Readonly HashMap<@Positive Integer, @Negative Integer>.Iterator[] @Normal(Value=0)[][] )\n" +
					"(@Readonly HashMap<@Positive Integer, @Negative Integer>.Iterator[] @SingleMember(0)[][] )\n" +
					"(@Readonly HashMap<@Positive Integer, @Negative Integer>.Iterator[] @Marker[][] )\n" +
					"(@Readonly Object)\n" +
					"(@Readonly HashMap<@Positive Integer, @Negative Integer>[] @Normal(Value=0)[][] )\n" +
					"(@Readonly HashMap<@Positive Integer, @Negative Integer>[] @SingleMember(0)[][] )\n" +
					"(@Readonly HashMap<@Positive Integer, @Negative Integer>[] @Marker[][] )\n" +
					"(@Readonly Object)\n" +
					"(@Readonly String[] @Normal(Value=0)[][] )\n" +
					"(@Readonly String[] @SingleMember(0)[][] )\n" +
					"(@Readonly String[] @Marker[][] )\n" +
					"(@Readonly Object)\n" +
					"(@Readonly int[] @Normal(Value=0)[][] )\n" +
					"(@Readonly int[] @SingleMember(0)[][] )\n" +
					"(@Readonly int[] @Marker[][] )\n" +
					"(@Readonly Object)\n" +
					"(@Readonly HashMap<@Positive Integer, @Negative Integer>.Iterator)\n" +
					"(@Readonly Object)\n" +
					"(@Readonly HashMap<@Positive Integer, @Negative Integer>)\n" +
					"(@Readonly Object)\n" +
					"(@ReadOnly String)\n" +
					"(@Readonly Object)\n" +
					"(@Readonly int) 10;\n" +
					"}\n" +
					"}\n";
	String expectedUnitToString = 
		"public class Clazz {\n" + 
		"  public Clazz() {\n" + 
		"    super();\n" + 
		"  }\n" + 
		"  public static void main(String[] args) {\n" + 
		"    int x;\n" + 
		"    x = (Integer) (@Readonly Object) ( @Readonly HashMap<@Positive Integer, @Negative Integer>.Iterator[] @Normal(Value = 0) [][]) ( @Readonly HashMap<@Positive Integer, @Negative Integer>.Iterator[] @SingleMember(0) [][]) ( @Readonly HashMap<@Positive Integer, @Negative Integer>.Iterator[] @Marker [][]) (@Readonly Object) (@Readonly HashMap<@Positive Integer, @Negative Integer>[] @Normal(Value = 0) [][]) (@Readonly HashMap<@Positive Integer, @Negative Integer>[] @SingleMember(0) [][]) (@Readonly HashMap<@Positive Integer, @Negative Integer>[] @Marker [][]) (@Readonly Object) (@Readonly String[] @Normal(Value = 0) [][]) (@Readonly String[] @SingleMember(0) [][]) (@Readonly String[] @Marker [][]) (@Readonly Object) (@Readonly int[] @Normal(Value = 0) [][]) (@Readonly int[] @SingleMember(0) [][]) (@Readonly int[] @Marker [][]) (@Readonly Object) ( @Readonly HashMap<@Positive Integer, @Negative Integer>.Iterator) (@Readonly Object) (@Readonly HashMap<@Positive Integer, @Negative Integer>) (@Readonly Object) (@ReadOnly String) (@Readonly Object) (@Readonly int) 10;\n" + 
		"  }\n" + 
		"}\n";
	checkParse(CHECK_ALL & ~CHECK_JAVAC_PARSER, source.toCharArray(), null, "test0060", expectedUnitToString);
}

