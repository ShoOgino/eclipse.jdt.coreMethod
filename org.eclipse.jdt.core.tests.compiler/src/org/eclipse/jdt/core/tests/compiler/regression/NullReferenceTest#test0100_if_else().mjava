	// null analysis -- if/else
	// check that obviously unreachable code does not modify the null
	// status of a local
	// the said code is not marked as unreachable per JLS 14.21 (the rationale
	// being the accommodation for the if (constant_flag_evaluating_to_false)
	// {code...} volontary code exclusion pattern)
	public void test0100_if_else() {
		this.runNegativeTest(
			new String[] {
				"X.java",
				"public class X {\n" + 
				"  public void foo() {\n" + 				
				"		 Object o = null;\n" + 
				"		 bar();\n" + // cannot affect o because it's a local
				"		 if (false) {\n" + 
				"			 o = new Object();\n" + 
				"		 }\n" + 
				"		 if (true) {\n" + 
				"			 //\n" + 
				"		 }\n" + 
				"		 else {\n" + 
				"			 o = new Object();\n" + 
				"		 }\n" + 
				"		 System.out.println(o.toString());\n" + 
				"	 }\n" + 
				"  void bar() {/* */}\n" + 				
				"}\n"},
			"----------\n" + 
			"1. WARNING in X.java (at line 14)\n" + 
			"	System.out.println(o.toString());\n" + 
			"	                   ^\n" + 
			"The variable o can only be null; it was either set to null or checked for null when last used\n" + 
			"----------\n"  
		);
	}

