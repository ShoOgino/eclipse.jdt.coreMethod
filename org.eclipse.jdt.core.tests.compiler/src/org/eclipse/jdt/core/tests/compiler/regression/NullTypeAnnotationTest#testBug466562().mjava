public void testBug466562() {
	runNegativeTestWithLibs(
		new String[] {
			"x/C.java",
			"package x;\n" +

			"import org.eclipse.jdt.annotation.NonNull;\n" +
			"import org.eclipse.jdt.annotation.NonNullByDefault;\n" +
			"import org.eclipse.jdt.annotation.Nullable;\n" +

			"@NonNullByDefault({})\n" +
			"public class C <T1 extends @Nullable Number> {\n" +
			"    String consume(T1 t) {\n" +
			"        @NonNull Object x = t; // error, should warn?\n" +
			"        x.toString();\n" +
			"        return t.toString(); // legal???\n" +
			"    }\n" +

			"    void y() {\n" +
			"        consume(null);  // illegal - OK\n" +
			"        @NonNull Object t = provide();  // error, should warn?\n" +
			"        t.toString();\n" +
			"    }\n" +

			"    T1 provide() {\n" +
			"        return null; // error, should warn?\n" +
			"    }\n" +

			"    C<Integer> cString;  // OK - Null constraint mismatch: The type 'Integer' is not a valid substitute for the type parameter 'T1 extends @Nullable Number'\n" +
			"    C<@NonNull Integer> c1String;  // Wrong: Null constraint mismatch: The type '@NonNull Integer' is not a valid substitute for the type parameter 'T1 extends @Nullable Number'\n" +
			"    C<@Nullable Integer> c2String; // legal - OK\n" +
			"}"
		},
		getCompilerOptions(),
		"----------\n" +
		"1. WARNING in x\\C.java (at line 5)\n" +
		"	@NonNullByDefault({})\n" +
		"	^^^^^^^^^^^^^^^^^\n" +
		"Nullness default is redundant with a default specified for the enclosing package x\n" +
		"----------\n" +
		"2. ERROR in x\\C.java (at line 8)\n" +
		"	@NonNull Object x = t; // error, should warn?\n" +
		"	                    ^\n" +
		"Null type safety: required \'@NonNull\' but this expression has type \'T1\', a free type variable that may represent a \'@Nullable\' type\n" +
		"----------\n" +
		"3. ERROR in x\\C.java (at line 10)\n" +
		"	return t.toString(); // legal???\n" +
		"	       ^\n" +
		"Potential null pointer access: this expression has type \'T1\', a free type variable that may represent a \'@Nullable\' type\n" +
		"----------\n" +
		"4. ERROR in x\\C.java (at line 13)\n" +
		"	consume(null);  // illegal - OK\n" +
		"	        ^^^^\n" +
		"Null type mismatch: required \'T1 extends @Nullable Number\' but the provided value is null\n" +
		"----------\n" +
		"5. ERROR in x\\C.java (at line 14)\n" +
		"	@NonNull Object t = provide();  // error, should warn?\n" +
		"	                    ^^^^^^^^^\n" +
		"Null type mismatch (type annotations): required \'@NonNull Object\' but this expression has type \'T1 extends @Nullable Number\'\n" +
		"----------\n" +
		"6. ERROR in x\\C.java (at line 18)\n" +
		"	return null; // error, should warn?\n" +
		"	       ^^^^\n" +
		"Null type mismatch: required \'T1 extends @Nullable Number\' but the provided value is null\n" +
		"----------\n"
	);
}

