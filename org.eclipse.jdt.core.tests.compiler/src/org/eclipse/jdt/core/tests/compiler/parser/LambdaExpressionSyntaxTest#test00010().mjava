	// type elided, unparenthesized parameter + expression body lambda in an initializer block
	public void test00010() throws IOException {
		String source = 
				"interface I {\n" +
				"    int square(int x);\n" +
				"}\n" +
				"public class X {\n" +
				"    static I i = x -> x * x;\n" +
				"    {\n" +
				"        i = x -> x * x * x;\n" +
				"    }\n" +
				"    static {\n" +
				"        i = x -> x * x * x;\n" +
				"    }\n" +
				"}\n";

		String expectedUnitToString = 
				"interface I {\n" + 
				"  int square(int x);\n" + 
				"}\n" + 
				"public class X {\n" + 
				"  static I i = (<no type> x) ->   (x * x);\n" + 
				"  {\n" + 
				"    i = (<no type> x) -> ((x * x) * x);\n" + 
				"  }\n" + 
				"  static {\n" + 
				"    i = (<no type> x) -> ((x * x) * x);\n" + 
				"  }\n" + 
				"  <clinit>() {\n" + 
				"  }\n" + 
				"  public X() {\n" + 
				"    super();\n" + 
				"  }\n" + 
				"}\n";
		checkParse(CHECK_PARSER | CHECK_JAVAC_PARSER , source.toCharArray(), null, "test00010", expectedUnitToString);
	}

