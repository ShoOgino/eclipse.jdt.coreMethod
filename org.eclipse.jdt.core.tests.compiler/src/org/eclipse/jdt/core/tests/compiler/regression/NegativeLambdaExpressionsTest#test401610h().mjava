// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401610, [1.8][compiler] Allow lambda/reference expressions in non-overloaded method invocation contexts
public void test401610h() {
this.runNegativeTest(
		new String[] {
				"X.java",
				"interface I {\n" +
				"	void foo();\n" +
				"}\n" +
				"interface J { \n" +
				"    String foo();\n" +
				"}\n" +
				"public class X {\n" +
				"	void foo(I it) { System.out.println(\"foo(I)\");}\n" +
				"	void foo(J it) { System.out.println(\"foo(J)\");}\n" +
				"	public static void main(String[] args) {\n" +
				"		new X().foo(()->{ return 10; });\n" +
				"	}\n" +
				"}\n",
				},
				"----------\n" +
				"1. ERROR in X.java (at line 11)\n" +
				"	new X().foo(()->{ return 10; });\n" +
				"	        ^^^\n" +
				"The method foo(I) in the type X is not applicable for the arguments (() -> {})\n" +
				"----------\n" +
				"2. ERROR in X.java (at line 11)\n" +
				"	new X().foo(()->{ return 10; });\n" +
				"	                  ^^^^^^^^^^\n" +
				"Void methods cannot return a value\n" +
				"----------\n");
}

