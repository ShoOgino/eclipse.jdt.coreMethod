public void testBug456508() {
	runNegativeTest(
		new String[] {
			"QueryAtom.java",
			"public class QueryAtom<T, P> {\n" + 
			"	public QueryAtom(SingularAttribute<? super T, P> path) {\n" + 
			"	}\n" + 
			"}\n",
			"SubqueryIn.java",
			"public class SubqueryIn<S, P>  {\n" + 
			"	public SubqueryIn(QueryAtom<S, P>... subqueryAtoms) {\n" + 
			"	}\n" + 
			"}\n",
			"Test.java",
			"class PAccount {}\n" + 
			"class PGroepAccount {}\n" + 
			"interface SingularAttribute<X, T> {}\n" + 
			"\n" + 
			"public class Test {\n" + 
			"    public static volatile SingularAttribute<PGroepAccount, PAccount> account;\n" + 
			"\n" + 
			"	public void nietInGroep() {\n" + 
			"		recordFilter(new SubqueryIn<>(new QueryAtom<>(account)));\n" + 
			"	}\n" + 
			"\n" + 
			"	protected <P> void recordFilter(SubqueryIn<?, P> atom) {\n" + 
			"	}\n" + 
			"}\n"
		},
		"----------\n" + 
		"1. WARNING in SubqueryIn.java (at line 2)\n" + 
		"	public SubqueryIn(QueryAtom<S, P>... subqueryAtoms) {\n" + 
		"	                                     ^^^^^^^^^^^^^\n" + 
		"Type safety: Potential heap pollution via varargs parameter subqueryAtoms\n" + 
		"----------\n" +
		"----------\n" + 
		"1. WARNING in Test.java (at line 9)\n" + 
		"	recordFilter(new SubqueryIn<>(new QueryAtom<>(account)));\n" + 
		"	             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
		"Type safety: A generic array of QueryAtom<PGroepAccount,PAccount> is created for a varargs parameter\n" + 
		"----------\n");
}

