public void test1134() {
	this.runNegativeTest(
		new String[] {
			"X.java",
			"import java.util.*;\n" + 
			"\n" + 
			"class Y<U> {\n" + 
			"	List<String> foo() { return null; }\n" + 
			"}\n" + 
			"\n" + 
			"public class X<T> extends Y<T> {\n" + 
			"	List<String> bar() { return null; }\n" + 
			"	\n" + 
			"	void m(X x) {\n" + 
			"		List<Object> l1 = x.foo();\n" + 
			"		List<Object> l2 = x.bar();\n" + 
			"		Zork z;\n" + 
			"	}\n" + 
			"}\n", // =================
		},
		"----------\n" + 
		"1. WARNING in X.java (at line 10)\n" + 
		"	void m(X x) {\n" + 
		"	       ^\n" + 
		"X is a raw type. References to generic type X<T> should be parameterized\n" + 
		"----------\n" + 
		"2. WARNING in X.java (at line 11)\n" + 
		"	List<Object> l1 = x.foo();\n" + 
		"	                  ^^^^^^^\n" + 
		"Type safety: The expression of type List needs unchecked conversion to conform to List<Object>\n" + 
		"----------\n" + 
		"3. WARNING in X.java (at line 12)\n" + 
		"	List<Object> l2 = x.bar();\n" + 
		"	                  ^^^^^^^\n" + 
		"Type safety: The expression of type List needs unchecked conversion to conform to List<Object>\n" + 
		"----------\n" + 
		"4. ERROR in X.java (at line 13)\n" + 
		"	Zork z;\n" + 
		"	^^^^\n" + 
		"Zork cannot be resolved to a type\n" + 
		"----------\n");
}

