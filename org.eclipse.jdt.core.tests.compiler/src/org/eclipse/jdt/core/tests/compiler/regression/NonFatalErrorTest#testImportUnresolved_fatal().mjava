	public void testImportUnresolved_fatal() {
		Map<String,String> options = getCompilerOptions();
		try {
			options.put(JavaCore.COMPILER_PB_UNUSED_IMPORT, JavaCore.ERROR);
			options.put(JavaCore.COMPILER_PB_FATAL_OPTIONAL_ERROR, JavaCore.ENABLED);
			options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.IGNORE);
			runNegativeTest(
					true, // flush dir
					new String[] {
							"p/Z.java",
							"package p;\n" +
									"public class Z {\n" +
									"	public static void main(String[] args) throws Exception {\n" +
									"		try {\n" +
									"			Class.forName(\"X\").newInstance();\n" + // forward reference, workaround by using reflection
									"		} catch (java.lang.Error e) {\n" +
									"			System.err.println(e.getMessage());\n" +
									"		}\n" +
									"	}\n" +
									"}\n",
									"X.java",
									"import com.bogus.Missing;\n" +
											"public class X {\n" +
											"	public static void main(String[] args) {\n" +
											"		new X().test();\n" +
											"	}\n" +
											"	void test() {\n" +
											"		System.out.println(\"OK\");\n" +
											"	}\n" +
											"}\n"
					},
					null, // libs
					options,
					"----------\n" + 
							"1. ERROR in X.java (at line 1)\n" + 
							"	import com.bogus.Missing;\n" + 
							"	       ^^^^^^^^^\n" + 
							"The import com.bogus cannot be resolved\n" + 
							"----------\n",
							"",
							"Unresolved compilation problem: \n" + 
									"	The import com.bogus cannot be resolved",
									JavacTestOptions.SKIP);
		} finally {
			options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);
		}
	}

