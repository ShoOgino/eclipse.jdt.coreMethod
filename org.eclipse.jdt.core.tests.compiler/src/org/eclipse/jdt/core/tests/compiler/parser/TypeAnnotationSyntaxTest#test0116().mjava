// To test Parser.consumeInsideCastExpressionLL1() with Type Annotations
public void test0116() throws IOException {
	String source =
		"class X{\n" +
		"  public void test1(){\n" +
		"    throw (@Marker Error) null; \n" +
		"  }  \n" +
		"  public void test2(){\n" +
		"    String s;\n" +
		"	 s = (@Marker @SingleMember(10) String) null;\n" +
		"	 byte b;\n" +
		"	 b = 0;\n" +
		"	 Byte i;\n" +
		"	 i = (@Positive Byte) b;\n" +
		"  }  \n" +
		"  public void test3(java.io.Serializable name) {\n" +
		"     Object temp;\n" +
		"	  temp = (Object)name;\n" +
		"     System.out.println( (String)temp );\n" +
		"  }\n" +
		"}";
	String expectedUnitToString =
		"class X {\n" +
		"  X() {\n" +
		"    super();\n" +
		"  }\n" +
		"  public void test1() {\n" +
		"    throw (@Marker Error) null;\n" +
		"  }\n" +
		"  public void test2() {\n" +
		"    String s;\n" +
		"    s = (@Marker @SingleMember(10) String) null;\n" +
		"    byte b;\n" +
		"    b = 0;\n" +
		"    Byte i;\n" +
		"    i = (@Positive Byte) b;\n" +
		"  }\n" +
		"  public void test3(java.io.Serializable name) {\n" +
		"    Object temp;\n" +
		"    temp = (Object) name;\n" +
		"    System.out.println((String) temp);\n" +
		"  }\n" +
		"}\n";
	checkParse(CHECK_ALL & ~CHECK_INDEXING_PARSER, source.toCharArray(), null, "test0116", expectedUnitToString );
}

