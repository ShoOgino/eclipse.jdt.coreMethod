	// method overriding
	public void test007() {
		Map<String, String> customOptions = new HashMap<>();
		customOptions.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);
		customOptions.put(CompilerOptions.OPTION_ReportTerminalDeprecation, CompilerOptions.ERROR);
		customOptions.put(CompilerOptions.OPTION_ReportDeprecationWhenOverridingDeprecatedMethod, CompilerOptions.ENABLED);
		this.runNegativeTest(
			true,
			new String[] {
				"p1/X.java",
				"package p1;\n" +
				"public class X {\n" +
				"	 @java.lang.Deprecated(forRemoval=false)\n" +
				"    public void foo() {}\n" +
				"	 @java.lang.Deprecated(forRemoval=true)\n" +
				"	 public void bar() {}\n" +
				"}\n",
				"p2/C.java",
				"package p2;\n" +
				"import p1.X;\n" +
				"public class C extends X {\n" +
				"    @Override public void foo() {}\n" +
				"    @Override public void bar() {}\n" +
				"}\n",
			},
			null, customOptions,
			"----------\n" + 
			"1. WARNING in p2\\C.java (at line 4)\n" + 
			"	@Override public void foo() {}\n" + 
			"	                      ^^^^^\n" + 
			"The method C.foo() overrides a deprecated method from X\n" + 
			"----------\n" + 
			"2. ERROR in p2\\C.java (at line 5)\n" + 
			"	@Override public void bar() {}\n" + 
			"	                      ^^^^^\n" + 
			"The method C.bar() overrides a method from X that has been deprecated and marked for removal\n" + 
			"----------\n",
			JavacTestOptions.Excuse.EclipseWarningConfiguredAsError);
	}

