//https://bugs.eclipse.org/bugs/show_bug.cgi?id=106744 - variation
public void test1308() {
	this.runNegativeTest(
			new String[] {
					"Y.java",
					"@interface MyAnnotation {\n" + 
					"}\n" + 
					"class MyAccessibleObject {\n" + 
					"	<T extends java.lang.annotation.Annotation> Object getAnnotation(Class<T> c) {\n" + 
					"		return null;\n" + 
					"	}\n" + 
					"}\n" + 
					"class MyConstructor<V> extends MyAccessibleObject {\n" + 
					"	<T extends java.lang.annotation.Annotation> T getAnnotation(Class<T> c) {\n" + 
					"		return null;\n" + 
					"	}\n" + 
					"}\n" + 
					"class X {\n" + 
					"	void bar1(java.lang.reflect.Constructor constr, Class<MyAnnotation> ann) {\n" + 
					"		MyAnnotation a = constr.getAnnotation(ann); // 1\n" + 
					"	}\n" + 
					"	void bar2(MyConstructor constr, Class<MyAnnotation> ann) {\n" + 
					"		MyAnnotation a = constr.getAnnotation(ann); // 2\n" + 
					"	}\n" + 
					"}\n", // =================
			},
			"----------\n" + 
			"1. WARNING in Y.java (at line 9)\n" + 
			"	<T extends java.lang.annotation.Annotation> T getAnnotation(Class<T> c) {\n" + 
			"	                                              ^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
			"The method getAnnotation(Class<T>) of type MyConstructor<V> should be tagged with @Override since it actually overrides a superclass method\n" + 
			"----------\n" + 
			"2. WARNING in Y.java (at line 14)\n" + 
			"	void bar1(java.lang.reflect.Constructor constr, Class<MyAnnotation> ann) {\n" + 
			"	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
			"Constructor is a raw type. References to generic type Constructor<T> should be parameterized\n" + 
			"----------\n" + 
			"3. WARNING in Y.java (at line 15)\n" + 
			"	MyAnnotation a = constr.getAnnotation(ann); // 1\n" + 
			"	                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
			"Type safety: The method getAnnotation(Class) belongs to the raw type Constructor. References to generic type Constructor<T> should be parameterized\n" + 
			"----------\n" + 
			"4. ERROR in Y.java (at line 15)\n" + 
			"	MyAnnotation a = constr.getAnnotation(ann); // 1\n" + 
			"	                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
			"Type mismatch: cannot convert from Annotation to MyAnnotation\n" + 
			"----------\n" + 
			"5. WARNING in Y.java (at line 17)\n" + 
			"	void bar2(MyConstructor constr, Class<MyAnnotation> ann) {\n" + 
			"	          ^^^^^^^^^^^^^\n" + 
			"MyConstructor is a raw type. References to generic type MyConstructor<V> should be parameterized\n" + 
			"----------\n" + 
			"6. WARNING in Y.java (at line 18)\n" + 
			"	MyAnnotation a = constr.getAnnotation(ann); // 2\n" + 
			"	                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
			"Type safety: The method getAnnotation(Class) belongs to the raw type MyConstructor. References to generic type MyConstructor<V> should be parameterized\n" + 
			"----------\n" + 
			"7. ERROR in Y.java (at line 18)\n" + 
			"	MyAnnotation a = constr.getAnnotation(ann); // 2\n" + 
			"	                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
			"Type mismatch: cannot convert from Annotation to MyAnnotation\n" + 
			"----------\n");
}

