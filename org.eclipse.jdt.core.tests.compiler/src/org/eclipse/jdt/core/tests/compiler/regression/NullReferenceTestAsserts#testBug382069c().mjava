// https://bugs.eclipse.org/382069 - [null] Make the null analysis consider JUnit's assertNotNull similarly to assertions
// junit's assertNull and dead code analysis
public void testBug382069c() throws IOException {
	Runner runner = new Runner();
	runner.testFiles =
		new String[] {
			JUNIT_ASSERT_NAME,
			JUNIT_ASSERT_CONTENT,
			"X.java",
			"public class X {\n" +
			"  boolean foo(String o1, String o2) {\n" +
			"    junit.framework.Assert.assertNull(\"something's wrong\", o1);\n" + 	// establish nullness
			"    if (o2 == null)\n" +
			"        return o1 != null;\n" +
			"    junit.framework.Assert.assertNull(o2);\n" + // will always throw
			"    return false; // dead code\n" +
			"  }\n" +
			"  void bar(X x) {\n" +
			"    if (x == null) {\n" +
			"      junit.framework.Assert.assertNotNull(x);\n" +
			"      return; // dead code\n" +
			"    }\n" +
			"  }\n" +
			"}\n"};
	runner.expectedCompilerLog =
			"----------\n" +
			"1. ERROR in X.java (at line 5)\n" +
			"	return o1 != null;\n" +
			"	       ^^\n" +
			"Null comparison always yields false: The variable o1 can only be null at this location\n" +
			"----------\n" +
			"2. WARNING in X.java (at line 7)\n" +
			"	return false; // dead code\n" +
			"	^^^^^^^^^^^^^\n" +
			"Dead code\n" +
			"----------\n" +
			"3. WARNING in X.java (at line 12)\n" +
			"	return; // dead code\n" +
			"	^^^^^^^\n" +
			"Dead code\n" +
			"----------\n";
	runner.javacTestOptions = JavacTestOptions.Excuse.EclipseWarningConfiguredAsError;
	runner.runNegativeTest();
}

