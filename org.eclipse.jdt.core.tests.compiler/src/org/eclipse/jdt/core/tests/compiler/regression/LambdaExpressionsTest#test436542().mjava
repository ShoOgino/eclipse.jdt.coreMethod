// https://bugs.eclipse.org/bugs/show_bug.cgi?id=436542 : Eclipse 4.4 compiler generates "bad class file" according to javac
public void test436542() throws Exception {
	this.runConformTest(
		new String[] {
			"Utility.java",
			"import java.util.Collection;\n" +
			"import java.util.List;\n" +
			"import java.util.function.Function;\n" +
			"import java.util.stream.Collectors;\n" +
			"public class Utility {\n" +
			"    public static void main(String[] args) {\n" +
			"        System.out.println(\"Success\");\n" +
			"    }\n" +
			"    public static <T, R> List<R> mapList(Collection<T> original, Function<T, R> func) {\n" +
			"        return original.stream().map(func).collect(Collectors.toList());\n" +
			"    }\n" +
			"    public static <S, T> void bindMap(List<T> dest, ObservableList<S> src, Function<S, T> func) {\n" +
			"        dest.addAll(mapList(src, func));\n" +
			"        src.addListener((ListChangeListener<S>) changes -> {\n" +
			"            for (int i = changes.getFrom(); i < changes.getTo(); i++)\n" +
			"                dest.set(i, func.apply(src.get(i)));\n" +
			"        });\n" +
			"    }\n" +
			"    public interface ObservableList<E> extends List<E> {\n" +
			"        public void addListener(ListChangeListener<? super E> listener);\n" +
			"    }\n" +
			"    @FunctionalInterface\n" +
			"    public interface ListChangeListener<E> {\n" +
			"        public abstract static class Change<E> {\n" +
			"            public abstract int getFrom();\n" +
			"            public abstract int getTo();\n" +
			"        }\n" +
			"        public void onChanged(Change<? extends E> c);\n" +
			"    }\n" +
			"}",
		},
		"Success",
		Util.concatWithClassLibs(new String[]{OUTPUT_DIR}, false),
		true,
		null);
	IClassFileReader classFileReader = ToolFactory.createDefaultClassFileReader(OUTPUT_DIR + File.separator + "Utility.class", IClassFileReader.ALL);
	IMethodInfo lambdaMethod = null;
	IMethodInfo[] methodInfos = classFileReader.getMethodInfos();
	int length = methodInfos.length;
	for (int i = 0; i < length; i++) {
		IMethodInfo methodInfo = methodInfos[i];
		if ("lambda$0".equals(new String(methodInfo.getName()))) {
			lambdaMethod = methodInfo;
			break;
		}
	}
	assertNotNull("Could not find lambda method",lambdaMethod);
	IClassFileAttribute signature = org.eclipse.jdt.internal.core.util.Util.getAttribute(lambdaMethod, IAttributeNamesConstants.SIGNATURE);
	assertNull("Found generic signature for lambda method", signature);
}

