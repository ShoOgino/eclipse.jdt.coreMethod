	// ReferenceExpression ::= Name BeginTypeArguments ReferenceExpressionTypeArgumentsAndTrunk '::' NonWildTypeArgumentsopt IdentifierOrNew
	public void test038() throws Exception {
		this.runNegativeTest(
				new String[] {
					"X.java",
					"interface I {\n" +
					"    Y foo(int x);\n" +
					"}\n" +
					"public class X  {\n" +
					"    class Z extends Y {\n" +
					"        public Z(int x) {\n" +
					"            super(x);\n" +
					"            System.out.println();\n" +
					"        }\n" +
					"    }\n" +
					"    public static void main(String [] args) {\n" +
					"        i = @Marker W<@Marker Integer>::<@Marker String> new;\n" +
					"    }\n" +
					"}\n" +
					"class W<T> extends Y {\n" +
					"    public W(T x) {\n" +
					"        super(0);\n" +
					"        System.out.println(x);\n" +
					"    }\n" +
					"}\n" +
					"class Y {\n" +
					"    public Y(int x) {\n" +
					"        System.out.println(x);\n" +
					"    }\n" +
					"}\n"


				},
				"----------\n" +
				"1. ERROR in X.java (at line 12)\n" +
				"	i = @Marker W<@Marker Integer>::<@Marker String> new;\n" +
				"	^\n" +
				"i cannot be resolved to a variable\n" +
				"----------\n" +
				"2. ERROR in X.java (at line 12)\n" +
				"	i = @Marker W<@Marker Integer>::<@Marker String> new;\n" +
				"	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" +
				"The target type of this expression must be a functional interface\n" +
				"----------\n" +
				"3. ERROR in X.java (at line 12)\n" +
				"	i = @Marker W<@Marker Integer>::<@Marker String> new;\n" +
				"	     ^^^^^^\n" +
				"Marker cannot be resolved to a type\n" +
				"----------\n" +
				"4. ERROR in X.java (at line 12)\n" +
				"	i = @Marker W<@Marker Integer>::<@Marker String> new;\n" +
				"	               ^^^^^^\n" +
				"Marker cannot be resolved to a type\n" +
				"----------\n" +
				"5. ERROR in X.java (at line 12)\n" +
				"	i = @Marker W<@Marker Integer>::<@Marker String> new;\n" +
				"	                                  ^^^^^^\n" +
				"Marker cannot be resolved to a type\n" +
				"----------\n");
	}

