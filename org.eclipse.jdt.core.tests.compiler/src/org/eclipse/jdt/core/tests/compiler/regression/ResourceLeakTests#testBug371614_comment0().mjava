public void testBug371614_comment0() {
	Map options = getCompilerOptions();
	options.put(CompilerOptions.OPTION_ReportPotentiallyUnclosedCloseable, CompilerOptions.ERROR);
	options.put(CompilerOptions.OPTION_ReportUnclosedCloseable, CompilerOptions.ERROR);
	runLeakTest(
		new String[] {
			"C.java",
			"import java.io.FileInputStream;\n" +
			"import java.io.IOException;\n" +
			"import java.io.InputStream;\n" +
			"\n" +
			"public class C {\n" +
			"	public static void main(String[] args) {\n" +
			"		FileInputStream fileInputStream= null;\n" +
			"		try {\n" +
			"			fileInputStream = new FileInputStream(args[0]);\n" +
			"			while (true) {\n" +
			"				if (fileInputStream.read() == -1) {\n" +
			"					System.out.println(\"done\");\n" +
			"// Resource leak: 'fileInputStream' is not closed at this location\n" +
			"					return;\n" +
			"				}\n" +
			"			}\n" +
			"		} catch (IOException e) {\n" +
			"			e.printStackTrace();\n" +
			"			return;\n" +
			"		} finally {\n" +
			"			closeStream(fileInputStream);\n" +
			"		}\n" +
			"	}\n" +
			"	\n" +
			"	private static void closeStream(InputStream stream) {\n" +
			"		if (stream != null) {\n" +
			"			try {\n" +
			"				stream.close();\n" +
			"			} catch (IOException e) {\n" +
			"				e.printStackTrace();\n" +
			"			}\n" +
			"		}\n" +
			"	}\n" +
			"}\n" +
			"\n"
		},
		"----------\n" +
		"1. ERROR in C.java (at line 14)\n" +
		"	return;\n" +
		"	^^^^^^^\n" +
		"Potential resource leak: \'fileInputStream\' may not be closed at this location\n" +
		"----------\n",
		options);
}

