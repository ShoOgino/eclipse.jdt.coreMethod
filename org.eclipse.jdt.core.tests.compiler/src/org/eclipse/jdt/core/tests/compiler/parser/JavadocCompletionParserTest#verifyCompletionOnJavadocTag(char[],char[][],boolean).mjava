	protected void verifyCompletionOnJavadocTag(char[] tag, char[][] expectedTags, boolean inline) {
		assertTrue("Invalid javadoc completion node!", this.javadoc.getCompletionNode() instanceof CompletionOnJavadocTag);
		CompletionOnJavadocTag completionTag = (CompletionOnJavadocTag) this.javadoc.getCompletionNode();
		StringBuffer expected = new StringBuffer("<CompleteOnJavadocTag:");
		if (inline) expected.append('{');
		expected.append('@');
		if (tag != null) expected.append(tag);
		if (inline) expected.append('}');
		if (expectedTags != null) {
			expected.append("\npossible tags:");
			int length = expectedTags.length;
			for (int i=0; i<length; i++) {
				expected.append("\n	- ");
				expected.append(expectedTags[i]);
			}
			expected.append('\n');
		}
		expected.append(">");
		if (expectedTags == null) {
			assertEquals("Invalid completion tag", expected.toString(), completionTag.toString());
		} else {
			String completionTagString = completionTag.toString();
			StringTokenizer completionTagTokenizer = new StringTokenizer(completionTagString, "\n");
			StringBuffer completionTagBuffer = new StringBuffer(completionTagString.length());
			boolean possibleLine = false, newLine = false;
			while (completionTagTokenizer.hasMoreTokens()) {
				String line = completionTagTokenizer.nextToken();
				if (line.startsWith("possible")) {
					if (!possibleLine) {
						possibleLine = true;
						completionTagBuffer.append("\npossible tags:");
					}
				} else {
					if (newLine) completionTagBuffer.append('\n');
					completionTagBuffer.append(line);
				}
				newLine = true;
			}
			assertEquals("Invalid completion tag", expected.toString(), completionTagBuffer.toString());
		}
	}

