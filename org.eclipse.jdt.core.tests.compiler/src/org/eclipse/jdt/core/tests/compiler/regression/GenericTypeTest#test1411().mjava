public void test1411() {
	this.runNegativeTest(
			new String[] {
				"X.java", //-----------------------------------------------------------------------
				"public class X<T> {\n" +
				"	static class Child extends X<Object> {	}\n" +
				"	static <U> X<U> create() {\n" +
				"		Child child = new Child();\n" +
				"		child.set(new Object());\n" +
				"		return (X<U>) child;\n" +
				"	}\n" +
				"	public static void main(String[] args) {\n" +
				"		X<Number> c = create();\n" +
				"		Number n = c.get();\n" +
				"	}\n" +
				"	T t;\n" +
				"	void set(T t) {\n" +
				"		this.t = t;\n" +
				"	}\n" +
				"	T get() {\n" +
				"		return t;\n" +
				"	}\n" +
				"	static X<Object> willWarn = new X<Object>();\n" +
				"	static <U> X<U> raisesTheWarning() {\n" +
				"		return (X<U>) willWarn;\n" +
				"	}\n" +
				"	Zork z;\n" +
				"}\n",//-----------------------------------------------------------------------
			},
			"----------\n" +
			"1. WARNING in X.java (at line 6)\n" +
			"	return (X<U>) child;\n" +
			"	       ^^^^^^^^^^^^\n" +
			"Type safety: Unchecked cast from X.Child to X<U>\n" +
			"----------\n" +
			"2. WARNING in X.java (at line 21)\n" +
			"	return (X<U>) willWarn;\n" +
			"	       ^^^^^^^^^^^^^^^\n" +
			"Type safety: Unchecked cast from X<Object> to X<U>\n" +
			"----------\n" +
			"3. ERROR in X.java (at line 23)\n" +
			"	Zork z;\n" +
			"	^^^^\n" +
			"Zork cannot be resolved to a type\n" +
			"----------\n");
}

