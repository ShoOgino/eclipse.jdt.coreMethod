	// default methods with various modifiers, positive cases
	public void testModifiers1() {
// Inject an unrelated compile error to prevent class file verification. TODO revert
// (even lambda-enabled JRE doesn't accept now-legal modifier combinations)
//		runConformTest(
		runNegativeTest(
		new String[] {
			"I.java",
			"import java.lang.annotation.*;\n" +
			"@Target(ElementType.METHOD) @interface Annot{}\n" +
			"public interface I {\n" +
			"    default void foo1()  {}\n" +
			"    public default synchronized void foo2() { System.exit(0); }\n" +
			"    strictfp default void foo3() {}\n" +
			"    public default strictfp synchronized void foo4() {}\n" +
			"    public default strictfp synchronized @Annot void foo5() {}\n" +
			"}\n" +
			"public class Wrong{}\n"}, // TODO remove me
		// TODO remove me:
		"----------\n" +
		"1. ERROR in I.java (at line 10)\n" +
		"	public class Wrong{}\n" +
		"	             ^^^^^\n" +
		"The public type Wrong must be defined in its own file\n" +
		"----------\n");
	}

