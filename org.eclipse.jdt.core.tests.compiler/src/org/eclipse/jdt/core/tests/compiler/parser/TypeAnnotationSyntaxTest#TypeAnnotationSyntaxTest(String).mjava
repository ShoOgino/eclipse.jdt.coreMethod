public TypeAnnotationSyntaxTest(String testName){
	super(testName, referenceCompiler, jsr308TestScratchArea);
	if (referenceCompiler != null) {
		File f = new File(jsr308TestScratchArea);
		if (!f.exists()) {
			f.mkdir();
		}
		if (f.exists()) {
			try {
				OutputStreamWriter w = new OutputStreamWriter(new FileOutputStream(new File(jsr308TestScratchArea + File.separator + "Marker.java")));
				w.write("@interface Marker {}\n".toCharArray());
				w.close();
				w = new OutputStreamWriter(new FileOutputStream(new File(jsr308TestScratchArea + File.separator + "Normal.java")));
				w.write("@interface Normal {\n\tint value() default 10;\n}\n".toCharArray());
				w.close();
				w = new OutputStreamWriter(new FileOutputStream(new File(jsr308TestScratchArea + File.separator + "SingleMember.java")));
				w.write("@interface SingleMember {\n\tint value() default 10;\n}\n".toCharArray());
				w.close();
				w = new OutputStreamWriter(new FileOutputStream(new File(jsr308TestScratchArea + File.separator + "Positive.java")));
				w.write("@interface Positive {}\n".toCharArray());
				w.close();
				w = new OutputStreamWriter(new FileOutputStream(new File(jsr308TestScratchArea + File.separator + "Negative.java")));
				w.write("@interface Negative{}\n".toCharArray());
				w.close();
				w = new OutputStreamWriter(new FileOutputStream(new File(jsr308TestScratchArea + File.separator + "Readonly.java")));
				w.write("@interface Readonly {}\n".toCharArray());
				w.close();
				w = new OutputStreamWriter(new FileOutputStream(new File(jsr308TestScratchArea + File.separator + "NonNull.java")));
				w.write("@interface NonNull {}\n".toCharArray());
				w.close();
				w = new OutputStreamWriter(new FileOutputStream(new File(jsr308TestScratchArea + File.separator + "HashMap.java")));
				w.write("class HashMap<X,Y> {\n class Iterator {}; \n}\n".toCharArray());
				w.close();
				CHECK_ALL |= CHECK_JAVAC_PARSER;
			} catch (IOException e) {
				// ignore
			}
		}
	}
}

