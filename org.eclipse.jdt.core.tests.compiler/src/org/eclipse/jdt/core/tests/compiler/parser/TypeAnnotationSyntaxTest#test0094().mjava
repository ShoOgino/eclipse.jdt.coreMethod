// To test Parser.consumeArrayCreationExpressionWithInitializer() with Type Annotations
public void test0094() throws IOException {
	String source =
		"class X {\n" +
		"	public boolean test() {\n" +
		"		String[] s;\n" +
		"		s = foo(new @Marker String @SingleMember(1) []{\"hello\"});\n" +
		"		return s != null;\n" +
		"	}\n" +
		"	public <@Marker F> F @SingleMember(1) [] foo(F[] f) {\n" +
		"		return f;\n" +
		"	}\n" +
		"}";
	String expectedUnitToString =
		"class X {\n" +
		"  X() {\n" +
		"    super();\n" +
		"  }\n" +
		"  public boolean test() {\n" +
		"    String[] s;\n" +
		"    s = foo(new @Marker String @SingleMember(1) []{\"hello\"});\n" +
		"    return (s != null);\n" +
		"  }\n" +
		"  public <@Marker F>F @SingleMember(1) [] foo(F[] f) {\n" +
		"    return f;\n" +
		"  }\n" +
		"}\n";
	checkParse(CHECK_ALL & ~CHECK_INDEXING_PARSER, source.toCharArray(), null, "test0094", expectedUnitToString );
}

