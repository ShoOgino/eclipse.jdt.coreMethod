	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=34373
	public void test080() throws ClassFormatException, IOException {
		String source =
			"public class X {\n" +
			"	X(int i, int j) {}\n" +
			"	void foo(String s, double d) throws Exception {\n" +
			"		try {\n" +
			"			int k = 0;\n" +
			"			System.out.println(s + d + k);\n" +
			"		} catch(Exception e) {\n" +
			"			e.printStackTrace();\n" +
			"			throw e;\n" +
			"		} finally {\n" +
			"			System.out.println(\"done\");\n" +
			"		}\n" +
			"	}\n" +
			"}";
		org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader classFileReader = getInternalClassFile("", "X", "X", source);
		IBinaryMethod[] methodInfos = classFileReader.getMethods();
		assertNotNull("No method infos", methodInfos);
		int length = methodInfos.length;
		assertTrue("At least one method", length > 0);
		for (int i = 0; i < length; i++) {
			char[][] argNames = methodInfos[i].getArgumentNames();
			assertNotNull("No names", argNames);
			assertEquals("Wrong size", 2, argNames.length);
			if (CharOperation.equals(methodInfos[i].getSelector(), "<init>".toCharArray())) {
				assertEquals("Wrong argument name", "i", new String(argNames[0]));
				assertEquals("Wrong argument name", "j", new String(argNames[1]));
			} else if (CharOperation.equals(methodInfos[i].getSelector(), "foo".toCharArray())) {
				assertEquals("Wrong argument name", "s", new String(argNames[0]));
				assertEquals("Wrong argument name", "d", new String(argNames[1]));
			}
		}
	}

