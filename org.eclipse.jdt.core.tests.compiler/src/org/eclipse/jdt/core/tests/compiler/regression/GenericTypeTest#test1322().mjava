//https://bugs.eclipse.org/bugs/show_bug.cgi?id=231094
public void test1322() {
	this.runNegativeTest(
			new String[] {
					"X.java", // =================
					"public class X {\n" +
					"	public static void main(String[] args) {\n" +
					"		X x = new X();\n" +
					"\n" +
					"		/** OK: Bob.class is correct. No idea about the Thingy */\n" +
					"		x.doStuff(Bob.class, new Thingy());\n" +
					"\n" +
					"		/**\n" +
					"		 * This line will fail when compiled with the Java 5 SDK: Test.java:25:\n" +
					"		 * <T>doStuff(java.lang.Class<T>,Thingy<T>) in Test cannot be applied to\n" +
					"		 * (java.lang.Class<Bill>,Thingy) test.doStuff(Bill.class, new\n" +
					"		 * Thingy()); ^ Note: Test.java uses unchecked or unsafe operations.\n" +
					"		 * Note: Recompile with -Xlint:unchecked for details. 1 error\n" +
					"		 */\n" +
					"		x.doStuff(Jim.class, new Thingy());\n" +
					"	}\n" +
					"	<T extends Bob> void doStuff(Class<T> klass, Thingy<T> thingy) {\n" +
					"	}\n" +
					"}\n" +
					"class Jim {}\n" +
					"class Bob {}\n" +
					"class Bob2 extends Bob {}\n" +
					"class Thingy<T extends Bob> {}\n", // =================
			},
			this.complianceLevel < ClassFileConstants.JDK1_8 ?
			"----------\n" +
			"1. WARNING in X.java (at line 6)\n" +
			"	x.doStuff(Bob.class, new Thingy());\n" +
			"	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" +
			"Type safety: Unchecked invocation doStuff(Class<Bob>, Thingy) of the generic method doStuff(Class<T>, Thingy<T>) of type X\n" +
			"----------\n" +
			"2. WARNING in X.java (at line 6)\n" +
			"	x.doStuff(Bob.class, new Thingy());\n" +
			"	                     ^^^^^^^^^^^^\n" +
			"Type safety: The expression of type Thingy needs unchecked conversion to conform to Thingy<Bob>\n" +
			"----------\n" +
			"3. WARNING in X.java (at line 6)\n" +
			"	x.doStuff(Bob.class, new Thingy());\n" +
			"	                         ^^^^^^\n" +
			"Thingy is a raw type. References to generic type Thingy<T> should be parameterized\n" +
			"----------\n" +
			"4. ERROR in X.java (at line 15)\n" +
			"	x.doStuff(Jim.class, new Thingy());\n" +
			"	  ^^^^^^^\n" +
			"Bound mismatch: The generic method doStuff(Class<T>, Thingy<T>) of type X is not applicable for the arguments (Class<Jim>, Thingy). The inferred type Jim is not a valid substitute for the bounded parameter <T extends Bob>\n" +
			"----------\n" +
			"5. WARNING in X.java (at line 15)\n" +
			"	x.doStuff(Jim.class, new Thingy());\n" +
			"	                         ^^^^^^\n" +
			"Thingy is a raw type. References to generic type Thingy<T> should be parameterized\n" +
			"----------\n" :
				"----------\n" +
				"1. WARNING in X.java (at line 6)\n" +
				"	x.doStuff(Bob.class, new Thingy());\n" +
				"	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" +
				"Type safety: Unchecked invocation doStuff(Class<Bob>, Thingy) of the generic method doStuff(Class<T>, Thingy<T>) of type X\n" +
				"----------\n" +
				"2. WARNING in X.java (at line 6)\n" +
				"	x.doStuff(Bob.class, new Thingy());\n" +
				"	                     ^^^^^^^^^^^^\n" +
				"Type safety: The expression of type Thingy needs unchecked conversion to conform to Thingy<Bob>\n" +
				"----------\n" +
				"3. WARNING in X.java (at line 6)\n" +
				"	x.doStuff(Bob.class, new Thingy());\n" +
				"	                         ^^^^^^\n" +
				"Thingy is a raw type. References to generic type Thingy<T> should be parameterized\n" +
				"----------\n" +
				"4. ERROR in X.java (at line 15)\n" +
				"	x.doStuff(Jim.class, new Thingy());\n" +
				"	  ^^^^^^^\n" +
				"The method doStuff(Class<T>, Thingy<T>) in the type X is not applicable for the arguments (Class<Jim>, Thingy)\n" +
				"----------\n" +
				"5. WARNING in X.java (at line 15)\n" +
				"	x.doStuff(Jim.class, new Thingy());\n" +
				"	                         ^^^^^^\n" +
				"Thingy is a raw type. References to generic type Thingy<T> should be parameterized\n" +
				"----------\n");
}

