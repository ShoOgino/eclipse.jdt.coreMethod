// To test Parser.consumeArrayCreationExpressionWithoutInitializer() with Type Annotations
public void test0099() throws IOException {
	String source =
		"import java.util.Arrays;\n" +
		"import java.util.List;\n" +
		"class X<@Marker T> {\n" +
		"	public void test() {\n" +
		"		List<@Marker X<?>> a;\n" +
		"		a = Arrays.asList(new @Marker X<?> @SingleMember(0) [0]);\n" +
		"		String @Marker [] @SingleMember(1) [] x;\n" +
		"		x = new @Readonly String @Normal(value = 5) [5] @SingleMember(1) [1];\n" +
		"	}\n" +
		"}";
	String expectedUnitToString =
		"import java.util.Arrays;\n" +
		"import java.util.List;\n" +
		"class X<@Marker T> {\n" +
		"  X() {\n" +
		"    super();\n" +
		"  }\n" +
		"  public void test() {\n" +
		"    List<@Marker X<?>> a;\n" +
		"    a = Arrays.asList(new @Marker X<?> @SingleMember(0) [0]);\n" +
		"    String @Marker [] @SingleMember(1) [] x;\n" +
		"    x = new @Readonly String @Normal(value = 5) [5] @SingleMember(1) [1];\n" +
		"  }\n" +
		"}\n";
	checkParse(CHECK_ALL & ~CHECK_INDEXING_PARSER, source.toCharArray(), null, "test0099", expectedUnitToString );
}

