	// 412149: [1.8][compiler] Emit repeated annotations into the designated container
	// Test that only repetitions go into the container 
	public void test037() {
		this.runConformTest(
			new String[] {
				"X.java",
				"import java.lang.annotation.Repeatable;\n" +
				"import java.lang.annotation.Retention;\n" +
				"import static java.lang.annotation.RetentionPolicy.*;\n" +
				"\n" +
				"@Retention(RUNTIME)\n" +
				"@interface AttrContainer {\n" +
				"  public Attr[] value();\n" +
				"}\n" +
				"@Retention(RUNTIME)\n" +
				"@Repeatable(AttrContainer.class)\n" + 
				"@interface Attr {\n" +
				"  public int value() default -1;\n" +
				"}\n" +
				"\n" +
				"public class X {\n" +
				"  @Attr(1) class Y1 {}\n" +
				"  @Attr(1) @Attr(2) class Y2 {} \n" +
				"  public static void main(String args[]) {\n" +
				"  	System.out.println(\"Y1: \" + Y1.class.getAnnotation(Attr.class));\n" +
				"  	System.out.println(\"Y2: \" + Y2.class.getAnnotation(Attr.class));\n" +
				"  	System.out.println(\"Y1: \" + Y1.class.getAnnotation(AttrContainer.class));\n" +
				"  	System.out.println(\"Y2: \" + Y2.class.getAnnotation(AttrContainer.class));\n" +
				"  }\n" +
				"}"
			},
			"Y1: @Attr(value=1)\n" + 
			"Y2: null\n" + 
			"Y1: null\n" + 
			"Y2: @AttrContainer(value=[@Attr(value=1), @Attr(value=2)])");
		
	}

