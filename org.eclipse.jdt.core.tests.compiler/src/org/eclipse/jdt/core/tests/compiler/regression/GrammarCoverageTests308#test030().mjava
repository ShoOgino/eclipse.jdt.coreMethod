	// ReferenceType2 ::= ClassOrInterface '<' TypeArgumentList3
	public void test030() throws Exception {
		this.runNegativeTest(
				new String[] {
					"X.java",
					"class Base {\n" +
					"}\n" +
					"class Foo<U extends Base, V extends Bar<U, @Marker Foo<U, V>>> {\n" +
					"}\n" +
					"class Bar<E extends Base, F extends Foo<E, @Marker Bar<E, F>>> {\n" +
					"}\n"
				},
				"----------\n" +
				"1. ERROR in X.java (at line 3)\n" +
				"	class Foo<U extends Base, V extends Bar<U, @Marker Foo<U, V>>> {\n" +
				"	                                           ^^^^^^^^^^^\n" +
				"Bound mismatch: The type Foo<U,V> is not a valid substitute for the bounded parameter <F extends Foo<E,Bar<E,F>>> of the type Bar<E,F>\n" +
				"----------\n" +
				"2. ERROR in X.java (at line 3)\n" +
				"	class Foo<U extends Base, V extends Bar<U, @Marker Foo<U, V>>> {\n" +
				"	                                            ^^^^^^\n" +
				"Marker cannot be resolved to a type\n" +
				"----------\n" +
				"3. ERROR in X.java (at line 5)\n" +
				"	class Bar<E extends Base, F extends Foo<E, @Marker Bar<E, F>>> {\n" +
				"	                                           ^^^^^^^^^^^\n" +
				"Bound mismatch: The type Bar<E,F> is not a valid substitute for the bounded parameter <V extends Bar<U,Foo<U,V>>> of the type Foo<U,V>\n" +
				"----------\n" +
				"4. ERROR in X.java (at line 5)\n" +
				"	class Bar<E extends Base, F extends Foo<E, @Marker Bar<E, F>>> {\n" +
				"	                                            ^^^^^^\n" +
				"Marker cannot be resolved to a type\n" +
				"----------\n");
	}

