/**
 * Complex multi-threaded test involving inner classes
 */
public void test018() {
	this.runConformTest(
		new String[] {
			/* MultiAnonymous.java */
			"MultiAnonymous.java",
			"public class MultiAnonymous {\n" +
			"	public static void main(String argv[]){\n" +
			"		try {\n" +
			"			new MultiAnonymous().performTasks(3);\n" +
			"		}\n" +
			"		catch(InterruptedException e){};\n" +
			"	}\n" +
			"	void notifyExecutionEnd() {\n" +
			"		System.out.println(\"EXECUTION FINISHED\");\n" +
			"	}\n" +
			"	void notifyExecutionStart() {\n" +
			"		System.out.println(\"EXECUTION STARTING\");\n" +
			"	}\n" +
			"	void performTasks(final int maxTasks) throws java.lang.InterruptedException {\n" +
			"		Thread workers[] = new Thread[maxTasks];\n" +
			"		Runnable tasks[] = new Runnable[maxTasks];\n" +
			"		final int maxIteration = 5;\n" +
			"		notifyExecutionStart();\n" +
			"		\n" +
			"		// Creating and launching the tasks\n" +
			"		for (int ii = 0; ii < maxTasks; ii++) {\n" +
			"			final int i = ii;\n" +
			"			tasks[i] = new Runnable() {			\n" +
			"				public String toString() { return ((i + 1) + \" of \" + maxTasks); }\n" +
			"				public void run() {\n" +
			"					for(int j = 0; j < maxIteration; j++)\n" +
			"						notifyCompletion( (int)((float) (j + 1) / maxIteration * 100));\n" +
			"				}		\n" +
			"			\n" +
			"				void notifyCompletion(int percentage) {\n" +
			"				}\n" +
			"			};\n" +
			"			workers[i] = new Thread(tasks[i],\"Running task(\"+(tasks[i].toString())+\")\");\n" +
			"			workers[i].start();\n" +
			"		}\n" +
			"		// Waiting for *all* tasks to be ended\n" +
			"		for (int i = 0; i < tasks.length; i++)\n" +
			"			workers[i].join();\n" +
			"		notifyExecutionEnd();\n" +
			"	}\n" +
			"}\n"
		},
		"EXECUTION STARTING\n" +
		"EXECUTION FINISHED"
	);
}

