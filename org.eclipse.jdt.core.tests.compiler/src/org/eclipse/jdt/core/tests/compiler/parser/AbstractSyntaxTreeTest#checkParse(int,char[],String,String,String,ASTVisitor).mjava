	public void checkParse(int parserToCheck, char[] source, String expectedSyntaxErrorDiagnosis,
			String testName, String expectedUnitToString, ASTVisitor visitor) throws IOException {
			
				CompilerOptions options = new CompilerOptions(getCompilerOptions());
				options.complianceLevel = ClassFileConstants.JDK1_8;
				options.sourceLevel = ClassFileConstants.JDK1_8;
				options.targetJDK = ClassFileConstants.JDK1_8;
			
				ICompilationUnit sourceUnit = null;
				CompilationResult compilationResult = null;
				CompilationUnitDeclaration unit = null;
			
				if (this.referenceCompiler != null && (parserToCheck & CHECK_JAVAC_PARSER) != 0) {
					String javaFilePath = this.referenceCompilerTestsScratchArea + "\\Xyz.java";
					File f = new File(javaFilePath);
					FileOutputStream o = new FileOutputStream(f);
					OutputStreamWriter w = new OutputStreamWriter(o);
					w.write(source);
					w.close();
					Process p = Runtime.getRuntime().exec (new String[] { this.referenceCompiler, "-sourcepath", this.referenceCompilerTestsScratchArea, javaFilePath }, null, new File(this.referenceCompilerTestsScratchArea));
					try {
						BufferedReader stdout  = new BufferedReader(new InputStreamReader(p.getInputStream()));
						BufferedReader stderr  = new BufferedReader(new InputStreamReader(p.getErrorStream()));
						String line;
						while ((line = stderr.readLine())!= null)
							System.out.println(line);
						while ((line = stdout.readLine())!= null)
							System.out.println(line);
						assertTrue("javac unhappy", p.waitFor() == 0);
					} catch (InterruptedException e) {
						System.err.println("Skipped javac behavior check due to interrupt...");
					}
				}
				if ((parserToCheck & CHECK_PARSER) != 0) {
					Parser parser1 =
						new Parser(
								new ProblemReporter(
										DefaultErrorHandlingPolicies.proceedWithAllProblems(),
										options,
										new DefaultProblemFactory(Locale.getDefault())),
										optimizeStringLiterals);
					sourceUnit = new CompilationUnit(source, testName, null);
					compilationResult = new CompilationResult(sourceUnit, 0, 0, 0);
					unit = parser1.parse(sourceUnit, compilationResult);
					parser1.getMethodBodies(unit);
					assertDianosticEquals(expectedSyntaxErrorDiagnosis, testName, compilationResult);
					assertParseTreeEquals(expectedUnitToString, unit.toString());
					if (visitor != null) {
						unit.traverse(visitor, (CompilationUnitScope) null);
					}
					parser1 = null;
				}
			
				if ((parserToCheck & CHECK_COMPLETION_PARSER) != 0) {
					CompletionParser parser2 = new CompletionParser(
							new ProblemReporter(
									DefaultErrorHandlingPolicies.proceedWithAllProblems(),
									options,
									new DefaultProblemFactory(Locale.getDefault())),
									false);
					compilationResult = new CompilationResult(sourceUnit, 0, 0, 0);
					unit = parser2.parse(sourceUnit, compilationResult, Integer.MAX_VALUE);
					parser2.getMethodBodies(unit);
					assertDianosticEquals(expectedSyntaxErrorDiagnosis, testName, compilationResult);
					assertParseTreeEquals(expectedUnitToString, unit.toString());
					parser2 = null;
				}
				if ((parserToCheck & CHECK_SELECTION_PARSER) != 0) {
					SelectionParser parser3 = new SelectionParser(
							new ProblemReporter(
									DefaultErrorHandlingPolicies.proceedWithAllProblems(),
									options,
									new DefaultProblemFactory(Locale.getDefault())));
					compilationResult = new CompilationResult(sourceUnit, 0, 0, 0);
					unit = parser3.parse(sourceUnit, compilationResult, Integer.MAX_VALUE, Integer.MAX_VALUE);
					parser3.getMethodBodies(unit);
					assertDianosticEquals(expectedSyntaxErrorDiagnosis, testName, compilationResult);
					assertParseTreeEquals(expectedUnitToString, unit.toString());
					parser3 = null;
				}
				if ((parserToCheck & CHECK_DOCUMENT_ELEMENT_PARSER) != 0) {
					DocumentElementParser parser4 = new DocumentElementParser(
							this,
							new DefaultProblemFactory(Locale.getDefault()),
							options);
					compilationResult = new CompilationResult(sourceUnit, 0, 0, 0);
					unit = parser4.parse(sourceUnit, compilationResult);
					parser4.getMethodBodies(unit);
					assertDianosticEquals(expectedSyntaxErrorDiagnosis, testName, compilationResult);
					assertParseTreeEquals(expectedUnitToString, unit.toString());
					parser4 = null;
				}
				if ((parserToCheck & CHECK_COMMENT_RECORDER_PARSER) != 0) {
					CommentRecorderParser parser5 = new CommentRecorderParser(
							new ProblemReporter(
									DefaultErrorHandlingPolicies.proceedWithAllProblems(),
									options,
									new DefaultProblemFactory(Locale.getDefault())),
									optimizeStringLiterals);
					compilationResult = new CompilationResult(sourceUnit, 0, 0, 0);
					unit = parser5.parse(sourceUnit, compilationResult);
					parser5.getMethodBodies(unit);
					assertDianosticEquals(expectedSyntaxErrorDiagnosis, testName, compilationResult);
					assertParseTreeEquals(expectedUnitToString, unit.toString());
					parser5 = null;
				}
				if ((parserToCheck & CHECK_SOURCE_ELEMENT_PARSER) != 0) {
					SourceElementParser parser6 = new SourceElementParser(this,
							new DefaultProblemFactory(Locale.getDefault()),
							options,
							true,
							optimizeStringLiterals);
					compilationResult = new CompilationResult(sourceUnit, 0, 0, 0);
					unit = parser6.parse(sourceUnit, compilationResult);
					parser6.getMethodBodies(unit);
					assertDianosticEquals(expectedSyntaxErrorDiagnosis, testName, compilationResult);
					assertParseTreeEquals(expectedUnitToString, unit.toString());
					parser6 = null;
				}
				if ((parserToCheck & CHECK_INDEXING_PARSER) != 0) {
					IndexingParser parser7 = new IndexingParser(this,
							new DefaultProblemFactory(Locale.getDefault()),
							options,
							true,
							optimizeStringLiterals, false);
					compilationResult = new CompilationResult(sourceUnit, 0, 0, 0);
					unit = parser7.parse(sourceUnit, compilationResult);
					parser7.getMethodBodies(unit);
					assertDianosticEquals(expectedSyntaxErrorDiagnosis, testName, compilationResult);
					assertParseTreeEquals(expectedUnitToString, unit.toString());
					parser7 = null;
				}
			}

