/*
 * Empty block action
 */
public void test016() throws Exception {
	this.runConformTest(
		new String[] {
			"X.java",
			"public class X {\n" +
			"    \n" +
			"	public static void main(String[] args) {\n" +
			"		int[] tab = new int[] { 1 };\n" +
			"		for (final int e : tab) {;\n" +
			"		}\n" +
			"		System.out.println(\"SUCCESS\");\n" +
			"	}\n" +
			"}\n",
		},
		"SUCCESS");

	String expectedOutput =
		"  // Method descriptor #15 ([Ljava/lang/String;)V\n" +
		"  // Stack: 4, Locals: 5\n" +
		"  public static void main(java.lang.String[] args);\n" +
		"     0  iconst_1\n" +
		"     1  newarray int [10]\n" +
		"     3  dup\n" +
		"     4  iconst_0\n" +
		"     5  iconst_1\n" +
		"     6  iastore\n" +
		"     7  astore_1 [tab]\n" +
		"     8  aload_1 [tab]\n" +
		"     9  dup\n" +
		"    10  astore 4\n" +
		"    12  arraylength\n" +
		"    13  istore_3\n" +
		"    14  iconst_0\n" +
		"    15  istore_2\n" +
		"    16  goto 22\n" +
		"    19  iinc 2 1\n" +
		"    22  iload_2\n" +
		"    23  iload_3\n" +
		"    24  if_icmplt 19\n" +
		"    27  getstatic java.lang.System.out : java.io.PrintStream [16]\n" +
		"    30  ldc <String \"SUCCESS\"> [22]\n" +
		"    32  invokevirtual java.io.PrintStream.println(java.lang.String) : void [24]\n" +
		"    35  return\n" +
		"      Line numbers:\n" +
		"        [pc: 0, line: 4]\n" +
		"        [pc: 8, line: 5]\n" +
		"        [pc: 27, line: 7]\n" +
		"        [pc: 35, line: 8]\n" +
		"      Local variable table:\n" +
		"        [pc: 0, pc: 36] local: args index: 0 type: java.lang.String[]\n" +
		"        [pc: 8, pc: 36] local: tab index: 1 type: int[]\n";

	File f = new File(OUTPUT_DIR + File.separator + "X.class");
	byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
	ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
	String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
	int index = result.indexOf(expectedOutput);
	if (index == -1 || expectedOutput.length() == 0) {
		System.out.println(Util.displayString(result, 3));
	}
	if (index == -1) {
		assertEquals("Wrong contents", expectedOutput, result);
	}
}

