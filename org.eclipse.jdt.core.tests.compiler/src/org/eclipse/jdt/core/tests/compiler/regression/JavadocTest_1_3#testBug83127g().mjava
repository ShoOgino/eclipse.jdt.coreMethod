	public void testBug83127g() {
		reportMissingJavadocTags = CompilerOptions.IGNORE;
		runNegativeTest(
			new String[] {
				"Unrelated1.java",
				"public class Unrelated1<E extends Number> {\n" + 
				"	public Unrelated1(E e) {}\n" + 
				"	public boolean add(E e) { return false; }\n" + 
				"}\n",
				"Test.java",
				"/** \n" + 
				" * @see Unrelated1#add(Integer)\n" + 
				" * @see Unrelated1#Unrelated1(Integer)\n" + 
				" *   - warning = \"The method add(Object) in the type Test is not applicable for\n" + 
				" *                the arguments (Integer)\"\n" + 
				" *   - method binding = Unrelated1.add(Number)\n" + 
				" *   - parameter binding = java.lang.Integer\n" + 
				" */\n" + 
				"public class Test<T>{\n" + 
				"	Test(T t) {}\n" + 
				"    public boolean add(T t) {\n" + 
				"        return true;\n" + 
				"    }\n" + 
				"}\n" + 
				"\n" + 
				"class Sub<E extends Number> extends Test<E> {\n" + 
				"	Sub (E e) {super(null);}\n" + 
				"    public boolean add(E e) {\n" + 
				"        if (e.doubleValue() > 0)\n" + 
				"            return false;\n" + 
				"        return super.add(e);\n" + 
				"    }\n" + 
				"}\n"
			},
			"----------\n" + 
			"1. ERROR in Unrelated1.java (at line 1)\n" + 
			"	public class Unrelated1<E extends Number> {\n" + 
			"	                        ^^^^^^^^^^^^^^^^\n" + 
			"Syntax error, type parameters are only available if source level is 1.5\n" + 
			"----------\n" + 
			"2. ERROR in Unrelated1.java (at line 2)\n" + 
			"	public Unrelated1(E e) {}\n" + 
			"	                  ^\n" + 
			"E cannot be resolved to a type\n" + 
			"----------\n" + 
			"3. ERROR in Unrelated1.java (at line 3)\n" + 
			"	public boolean add(E e) { return false; }\n" + 
			"	                   ^\n" + 
			"E cannot be resolved to a type\n" + 
			"----------\n" + 
			"----------\n" + 
			"1. ERROR in Test.java (at line 2)\n" + 
			"	* @see Unrelated1#add(Integer)\n" + 
			"	                  ^^^\n" + 
			"Javadoc: The method add(E) in the type Unrelated1 is not applicable for the arguments (Integer)\n" + 
			"----------\n" + 
			"2. ERROR in Test.java (at line 3)\n" + 
			"	* @see Unrelated1#Unrelated1(Integer)\n" + 
			"	                  ^^^^^^^^^^^^^^^^^^^\n" + 
			"Javadoc: The constructor Unrelated1(Integer) is undefined\n" + 
			"----------\n" + 
			"3. ERROR in Test.java (at line 9)\n" + 
			"	public class Test<T>{\n" + 
			"	                  ^\n" + 
			"Syntax error, type parameters are only available if source level is 1.5\n" + 
			"----------\n" + 
			"4. ERROR in Test.java (at line 10)\n" + 
			"	Test(T t) {}\n" + 
			"	     ^\n" + 
			"T cannot be resolved to a type\n" + 
			"----------\n" + 
			"5. ERROR in Test.java (at line 11)\n" + 
			"	public boolean add(T t) {\n" + 
			"	                   ^\n" + 
			"T cannot be resolved to a type\n" + 
			"----------\n" + 
			"6. ERROR in Test.java (at line 16)\n" + 
			"	class Sub<E extends Number> extends Test<E> {\n" + 
			"	          ^^^^^^^^^^^^^^^^\n" + 
			"Syntax error, type parameters are only available if source level is 1.5\n" + 
			"----------\n" + 
			"7. ERROR in Test.java (at line 16)\n" + 
			"	class Sub<E extends Number> extends Test<E> {\n" + 
			"	                                         ^\n" + 
			"Syntax error, parameterized types are only available if source level is 1.5\n" + 
			"----------\n" + 
			"8. ERROR in Test.java (at line 16)\n" + 
			"	class Sub<E extends Number> extends Test<E> {\n" + 
			"	                                         ^\n" + 
			"E cannot be resolved to a type\n" + 
			"----------\n" + 
			"9. ERROR in Test.java (at line 17)\n" + 
			"	Sub (E e) {super(null);}\n" + 
			"	     ^\n" + 
			"E cannot be resolved to a type\n" + 
			"----------\n" + 
			"10. ERROR in Test.java (at line 17)\n" + 
			"	Sub (E e) {super(null);}\n" + 
			"	           ^^^^^^^^^^^^\n" + 
			"The constructor Test(T) refers to the missing type T\n" + 
			"----------\n" + 
			"11. ERROR in Test.java (at line 18)\n" + 
			"	public boolean add(E e) {\n" + 
			"	                   ^\n" + 
			"E cannot be resolved to a type\n" + 
			"----------\n"
		);
	}

