public void testBug435767() {
	runConformTest(
		new String[] {
			"DummyClass.java",
			"import java.util.*;\n" +
			"import java.util.function.*;\n" +
			"import java.util.stream.*;\n" +
			"public class DummyClass {\n" + 
			"\n" + 
			"	public void method() {\n" + 
			"\n" + 
			"		// Cases where there is no error\n" + 
			"		final Supplier<Set<String>> suppliers = this.memoize(() -> new HashSet<>());\n" + 
			"\n" + 
			"		final Supplier<Map<Object, Object>> noMemoize = () -> suppliers.get().stream()\n" + 
			"				.filter(path -> path.startsWith(\"\"))\n" + 
			"				.collect(Collectors.toMap(path -> this.getKey(path), path -> this.getValue(path)));\n" + 
			"\n" + 
			"		// Case where there is errors.\n" + 
			"		final Supplier<Map<Object, Object>> memoize = this.memoize(() -> suppliers.get().stream()\n" + 
			"				.filter(path -> path.startsWith(\"\"))\n" + 
			"				.collect(Collectors.toMap(path -> this.getKey(path), path -> this.getValue(path))));\n" + 
			"\n" + 
			"		// Error message are : Description\n" + 
			"		// Resource	Path	Location	Type\n" + 
			"		// The method getKey(String) in the type DummyClass is not applicable for the arguments (Object)	DummyClass.java line 23	Java Problem\n" + 
			"		// The method getValue(String) in the type DummyClass is not applicable for the arguments (Object)	DummyClass.java line 23	Java Problem\n" + 
			"\n" + 
			"	}\n" + 
			"\n" + 
			"	private <T> Supplier<T> memoize(final Supplier<T> delegate) {\n" + 
			"		return delegate;\n" + 
			"	}\n" + 
			"\n" + 
			"	private Object getKey(final String path) {\n" + 
			"		return path;\n" + 
			"	}\n" + 
			"\n" + 
			"	private Object getValue(final String path) {\n" + 
			"		return path;\n" + 
			"	}\n" + 
			"}\n"
		},
		"");
}

