// https://bugs.eclipse.org/bugs/show_bug.cgi?id=388281
// Do inherit even if one parameter/return is annotated
// also features some basic overloading
public void testBug388281_04() {
	Map options = getCompilerOptions();
	options.put(JavaCore.COMPILER_INHERIT_NULL_ANNOTATIONS, JavaCore.ENABLED);
	runNegativeTestWithLibs(
		true /* shouldFlush*/,
		new String[] {
			"i/I.java",
			"package i;\n" +
			"import org.eclipse.jdt.annotation.*;\n" +
			"public interface I {\n" +
			"    @NonNull Object m1(@NonNull Object s1, @Nullable String s2);\n" +
			"    @Nullable Object m1(@Nullable String s1, @NonNull Object s2);\n" +
			"}\n",
			"ctest/C.java",
			"package ctest;\n" +
			"import org.eclipse.jdt.annotation.*;\n" +
			"public class C implements i.I {\n" +
			"    public Object m1(@Nullable Object o1, String s2) {\n" +
			"         System.out.println(s2.toString());   // (1)\n" +
			"         return null;                         // (2)\n" +
			"    }\n" +
			"    public @NonNull Object m1(String s1, Object o2) {\n" +
			"         System.out.println(s1.toString());   // (3)\n" +
			"         return new Object();\n" +
			"    }\n" +
			"}\n"
		},
		options,
		"----------\n" +
		"1. ERROR in ctest\\C.java (at line 5)\n" +
		"	System.out.println(s2.toString());   // (1)\n" +
		"	                   ^^\n" +
		variableMayBeNull("s2") +
		"----------\n" +
		"2. ERROR in ctest\\C.java (at line 6)\n" +
		"	return null;                         // (2)\n" +
		"	       ^^^^\n" +
		"Null type mismatch: required \'@NonNull Object\' but the provided value is null\n" +
		"----------\n" +
		"3. ERROR in ctest\\C.java (at line 9)\n" +
		"	System.out.println(s1.toString());   // (3)\n" +
		"	                   ^^\n" +
		variableMayBeNull("s1") +
		"----------\n");
}

