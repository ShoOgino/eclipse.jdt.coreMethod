//https://bugs.eclipse.org/bugs/show_bug.cgi?id=404146 - variation without sharing of inlined escaping finally-blocks
public void test042_not_shared() throws Exception {
	Map customOptions = getCompilerOptions();
	customOptions.put(CompilerOptions.OPTION_ShareCommonFinallyBlocks, CompilerOptions.DISABLED);
	customOptions.put(CompilerOptions.OPTION_InlineJsr, CompilerOptions.ENABLED);

	this.runConformTest(
			new String[] {
				"X.java",
				" public class X {\n" +
				" public static void main(String[] args) {\n" +
				"		System.out.println(new X().foo(args));\n" +
				"	}\n" +
				"	String foo(String[] args) {\n" +
				"		try {\n" +
				"			if (args == null) return \"KO\";\n" +
				"			switch(args.length) {\n" +
				"			case 0:\n" +
				"				return \"OK\";\n" +
				"			case 1:\n" +
				"				return \"KO\";\n" +
				"			case 3:\n" +
				"				return \"OK\";\n" +
				"			default:\n" +
				"				return \"KO\";\n" +
				"			}\n" +
				"		} finally {\n" +
				"			System.out.print(\"FINALLY:\");\n" +
				"		}\n" +
				"	}\n" +
				"}\n",
			},
			"FINALLY:OK",
			null,
			true,
			null,
			customOptions,
			null);

	String expectedOutput =
			"  // Method descriptor #26 ([Ljava/lang/String;)Ljava/lang/String;\n" +
			"  // Stack: 2, Locals: 3\n" +
			"  java.lang.String foo(java.lang.String[] args);\n" +
			"      0  aload_1 [args]\n" +
			"      1  ifnonnull 15\n" +
			"      4  getstatic java.lang.System.out : java.io.PrintStream [16]\n" +
			"      7  ldc <String \"FINALLY:\"> [35]\n" +
			"      9  invokevirtual java.io.PrintStream.print(java.lang.String) : void [37]\n" +
			"     12  ldc <String \"KO\"> [40]\n" +
			"     14  areturn\n" +
			"     15  aload_1 [args]\n" +
			"     16  arraylength\n" +
			"     17  tableswitch default: 81\n" +
			"          case 0: 48\n" +
			"          case 1: 59\n" +
			"          case 2: 81\n" +
			"          case 3: 70\n" +
			"     48  getstatic java.lang.System.out : java.io.PrintStream [16]\n" +
			"     51  ldc <String \"FINALLY:\"> [35]\n" +
			"     53  invokevirtual java.io.PrintStream.print(java.lang.String) : void [37]\n" +
			"     56  ldc <String \"OK\"> [42]\n" +
			"     58  areturn\n" +
			"     59  getstatic java.lang.System.out : java.io.PrintStream [16]\n" +
			"     62  ldc <String \"FINALLY:\"> [35]\n" +
			"     64  invokevirtual java.io.PrintStream.print(java.lang.String) : void [37]\n" +
			"     67  ldc <String \"KO\"> [40]\n" +
			"     69  areturn\n" +
			"     70  getstatic java.lang.System.out : java.io.PrintStream [16]\n" +
			"     73  ldc <String \"FINALLY:\"> [35]\n" +
			"     75  invokevirtual java.io.PrintStream.print(java.lang.String) : void [37]\n" +
			"     78  ldc <String \"OK\"> [42]\n" +
			"     80  areturn\n" +
			"     81  getstatic java.lang.System.out : java.io.PrintStream [16]\n" +
			"     84  ldc <String \"FINALLY:\"> [35]\n" +
			"     86  invokevirtual java.io.PrintStream.print(java.lang.String) : void [37]\n" +
			"     89  ldc <String \"KO\"> [40]\n" +
			"     91  areturn\n" +
			"     92  astore_2\n" +
			"     93  getstatic java.lang.System.out : java.io.PrintStream [16]\n" +
			"     96  ldc <String \"FINALLY:\"> [35]\n" +
			"     98  invokevirtual java.io.PrintStream.print(java.lang.String) : void [37]\n" +
			"    101  aload_2\n" +
			"    102  athrow\n" +
			"      Exception Table:\n" +
			"        [pc: 0, pc: 4] -> 92 when : any\n" +
			"        [pc: 15, pc: 48] -> 92 when : any\n" +
			"      Line numbers:\n" +
			"        [pc: 0, line: 7]\n" +
			"        [pc: 4, line: 19]\n" +
			"        [pc: 12, line: 7]\n" +
			"        [pc: 15, line: 8]\n" +
			"        [pc: 48, line: 19]\n" +
			"        [pc: 56, line: 10]\n" +
			"        [pc: 59, line: 19]\n" +
			"        [pc: 67, line: 12]\n" +
			"        [pc: 70, line: 19]\n" +
			"        [pc: 78, line: 14]\n" +
			"        [pc: 81, line: 19]\n" +
			"        [pc: 89, line: 16]\n" +
			"        [pc: 92, line: 18]\n" +
			"        [pc: 93, line: 19]\n" +
			"        [pc: 101, line: 20]\n" +
			"      Local variable table:\n" +
			"        [pc: 0, pc: 103] local: this index: 0 type: X\n" +
			"        [pc: 0, pc: 103] local: args index: 1 type: java.lang.String[]\n";

	File f = new File(OUTPUT_DIR + File.separator + "X.class");
	byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
	ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
	String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
	int index = result.indexOf(expectedOutput);
	if (index == -1 || expectedOutput.length() == 0) {
		System.out.println(Util.displayString(result, 3));
	}
	if (index == -1) {
		assertEquals("Wrong contents", expectedOutput, result);
	}
}

