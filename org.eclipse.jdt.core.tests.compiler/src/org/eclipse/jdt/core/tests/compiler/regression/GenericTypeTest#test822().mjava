public void test822() {
	this.runConformTest(
		new String[] {
			"X.java",
			"import java.io.Serializable;\n" + 
			"\n" + 
			"public class X<T extends Serializable & Runnable> {\n" + 
			"	void foo(T t) {\n" + 
			"		t.run();\n" + 
			"	}\n" + 
			"	public static void main(String[] args) {\n" + 
			"		new X<A>().foo(new A());\n" + 
			"	}\n" + 
			"}\n" + 
			"class A implements Serializable, Runnable {\n" + 
			"	public void run() {\n" + 
			"		System.out.println(\"AA\");\n" + 
			"	}\n" + 
			"}\n",
		},
		"AA");
	// 	ensure proper declaring class for #run() invocation
	String expectedOutput =
			"  // Method descriptor #17 (Ljava/io/Serializable;)V\n" + 
			"  // Signature: (TT;)V\n" + 
			"  // Stack: 1, Locals: 2\n" + 
			"  void foo(Serializable t);\n" + 
			"    0  aload_1 [t]\n" + 
			"    1  invokeinterface java.lang.Runnable.run() : void  [24] [nargs: 1]\n" + 
			"    6  return\n" + 
			"      Line numbers:\n" + 
			"        [pc: 0, line: 5]\n" + 
			"        [pc: 6, line: 6]\n" + 
			"      Local variable table:\n" + 
			"        [pc: 0, pc: 7] local: this index: 0 type: X\n" + 
			"        [pc: 0, pc: 7] local: t index: 1 type: java.io.Serializable\n" + 
			"      Local variable type table:\n" + 
			"        [pc: 0, pc: 7] local: this index: 0 type: X<T>\n" + 
			"        [pc: 0, pc: 7] local: t index: 1 type: T\n";
	
	try {
		File f = new File(OUTPUT_DIR + File.separator + "X.class");
		byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
		ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
		String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
		int index = result.indexOf(expectedOutput);
		if (index == -1 || expectedOutput.length() == 0) {
			System.out.println(Util.displayString(result, 3));
		}
		if (index == -1) {
			assertEquals("Wrong contents", expectedOutput, result);
		}
	} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
		assertTrue(false);
	} catch (IOException e) {
		assertTrue(false);
	}		
}

