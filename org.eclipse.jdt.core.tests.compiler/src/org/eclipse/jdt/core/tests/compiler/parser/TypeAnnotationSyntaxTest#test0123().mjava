// To test Parser.consumeTypeParameter1WithExtendsAndBounds() with Type Annotations
public void test0123() throws IOException {
	String source =
		"@Marker class Foo extends @Marker Foo1 implements @Marker @SingleMember(10) Comparable {\n" +
		"	public int compareTo(Object arg0) {\n" +
		"		return 0;\n" +
		"	}\n" +
		"}\n" +
		"class Foo1 {}\n" +
		"@Marker class X<@NonNull T extends @NonNull @Normal (value = 5) Object & @Marker Comparable, @NonNull V extends @Readonly Object> {\n" +
		"    public static void main(String[] args) {\n" +
		"        new @Marker @SingleMember(10) X<@Marker Foo, @SingleMember(0) Foo1>();\n" +
		"		 Class <@NonNull Foo> c;\n" +
		"    }\n" +
		"}\n";
	String expectedUnitToString =
		"@Marker class Foo extends @Marker Foo1 implements @Marker @SingleMember(10) Comparable {\n" +
		"  Foo() {\n" +
		"    super();\n" +
		"  }\n" +
		"  public int compareTo(Object arg0) {\n" +
		"    return 0;\n" +
		"  }\n" +
		"}\n" +
		"class Foo1 {\n" +
		"  Foo1() {\n" +
		"    super();\n" +
		"  }\n" +
		"}\n" +
		"@Marker class X<@NonNull T extends @NonNull @Normal(value = 5) Object & @Marker Comparable, @NonNull V extends @Readonly Object> {\n" +
		"  X() {\n" +
		"    super();\n" +
		"  }\n" +
		"  public static void main(String[] args) {\n" +
		"    new @Marker @SingleMember(10) X<@Marker Foo, @SingleMember(0) Foo1>();\n" +
		"    Class<@NonNull Foo> c;\n" +
		"  }\n" +
		"}\n";
	checkParse(source.toCharArray(), null, "test0123", expectedUnitToString );
}

