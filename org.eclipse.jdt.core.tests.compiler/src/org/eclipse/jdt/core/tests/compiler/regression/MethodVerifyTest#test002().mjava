	public void test002() { // separate files
		this.runNegativeTest(
			new String[] {
				"A.java",
				"class A {}\n",
				"B.java",
				"class B {}\n",
				"X.java",
				"class X<U> { public void foo(U u) {} }\n",
				"I.java",
				"interface I<U> { public void foo(U u); }\n",

				"J.java",
				"class J<T> implements I<B> { public void foo(T t) {} }\n",
				"K.java",
				"class K<T> implements I<T> { public void foo(T t) {} }\n",
				"L.java",
				"class L<T> implements I { public void foo(T t) {} }\n",

				"Y.java",
				"class Y<T> extends X<A> { public void foo(T t) { super.foo(t); } }\n",
				"Z.java",
				"class Z<T> extends X<T> { public void foo(T t) { super.foo(t); } }\n",
				"W.java",
				"class W<T> extends X { public void foo(T t) { super.foo(t); } }\n",
			},
			"----------\n" + 
			"1. ERROR in J.java (at line 1)\n" + 
			"	class J<T> implements I<B> { public void foo(T t) {} }\n" + 
			"	      ^\n" + 
			"The type J<T> must implement the inherited abstract method I<B>.foo(B)\n" + 
			"----------\n" + 
			"----------\n" + 
			"1. ERROR in L.java (at line 1)\n" + 
			"	class L<T> implements I { public void foo(T t) {} }\n" + 
			"	      ^\n" + 
			"The type L<T> must implement the inherited abstract method I.foo(Object)\n" + 
			"----------\n" + 
			"2. ERROR in L.java (at line 1)\n" + 
			"	class L<T> implements I { public void foo(T t) {} }\n" + 
			"	                                      ^^^^^^^^\n" + 
			"Name clash: The method foo(T) of type L<T> has the same erasure as foo(U) of type I but does not override it\n" + 
			"----------\n" + 
			"----------\n" + 
			"1. ERROR in Y.java (at line 1)\n" + 
			"	class Y<T> extends X<A> { public void foo(T t) { super.foo(t); } }\n" + 
			"	                                                       ^^^\n" + 
			"The method foo(A) in the type X<A> is not applicable for the arguments (T)\n" + 
			"----------\n" + 
			"----------\n" + 
			"1. ERROR in W.java (at line 1)\n" + 
			"	class W<T> extends X { public void foo(T t) { super.foo(t); } }\n" + 
			"	                                   ^^^^^^^^\n" + 
			"Name clash: The method foo(T) of type W<T> has the same erasure as foo(U) of type X but does not override it\n" + 
			"----------\n" + 
			"2. WARNING in W.java (at line 1)\n" + 
			"	class W<T> extends X { public void foo(T t) { super.foo(t); } }\n" + 
			"	                                              ^^^^^^^^^^^^\n" + 
			"Type safety: The method foo(Object) belongs to the raw type X. References to generic type X<U> should be parameterized\n" + 
			"----------\n"
			/*
			J.java:1: J is not abstract and does not override abstract method foo(B) in I
			L.java:1: L is not abstract and does not override abstract method foo(java.lang.Object) in I
			W.java:1: warning: [unchecked] unchecked call to foo(U) as a member of the raw type X
			Y.java:1: foo(A) in X<A> cannot be applied to (T)
			 */
		);
	}

