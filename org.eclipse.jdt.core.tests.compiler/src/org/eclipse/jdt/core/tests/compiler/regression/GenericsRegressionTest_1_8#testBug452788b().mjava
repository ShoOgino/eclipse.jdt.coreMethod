// variants:
public void testBug452788b() {
	runConformTest(
		new String[] {
			"Test.java",
			"import java.util.function.Function;\n" + 
			"\n" + 
			"interface Test<A> {\n" + 
			"\n" + 
			"	<B3> Test<B3> create(B3 b);\n" + 
			"\n" + 
			"	<B2> Test<B2> transform(Function<? extends A, Test<B2>> f);\n" + 
			"\n" + 
			"	default <B1> Test<B1> wrap(Function<? super A, ? extends B1> f) {\n" + 
			"		return transform((A a) -> create(f.apply(a)));\n" + // explicitly typed lambda
			"	}\n" +
			"	default <B> Function<? extends A, Test<B>> test1(Function<? super A, ? extends B> f) {\n" + 
			"		return a -> create(f.apply(a));\n" + // remove outer invocation
			"	}\n" + 
			"	default <B> Function<? extends A, Function<? extends A, Test<B>>> test2(Function<? super A, ? extends B> f) {\n" + 
			"		return a1 -> a2 -> create(f.apply(a2));\n" + // outer lambda instead of outer invocation
			"	}\n" + 
			"}\n"
		});
}

