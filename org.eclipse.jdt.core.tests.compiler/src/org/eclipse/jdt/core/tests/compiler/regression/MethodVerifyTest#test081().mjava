	//https://bugs.eclipse.org/bugs/show_bug.cgi?id=125956
	public void test081() {
		Map customOptions = getCompilerOptions();
		customOptions.put(
				CompilerOptions.OPTION_ReportMissingOverrideAnnotationForInterfaceMethodImplementation,
				CompilerOptions.DISABLED);
		this.runNegativeTest(
			true,
			new String[] {
				"X.java",
				"public abstract class X<U> implements I {\n" +
				"	public A<String> foo() { return null; }\n" +
				"	public <S> A<U> bar() { return null; }\n" +
				"}\n" +
				"interface I {\n" +
				"	<T> A<T> foo();\n" +
				"	<S> A<S> bar();\n" +
				"}\n" +
				"class A<V> {}"
			},
			null, customOptions,
			"----------\n" +
			"1. WARNING in X.java (at line 2)\r\n" +
			"	public A<String> foo() { return null; }\r\n" +
			"	       ^\n" +
			"Type safety: The return type A<String> for foo() from the type X<U> needs unchecked conversion to conform to A<Object> from the type I\n" +
			"----------\n" +
			"2. ERROR in X.java (at line 3)\r\n" +
			"	public <S> A<U> bar() { return null; }\r\n" +
			"	           ^^^^\n" +
			"The return type is incompatible with I.bar()\n" +
			"----------\n",
			// <S>bar() in X cannot implement <S>bar() in I; attempting to use incompatible return type
			// warning: foo() in X implements <T>foo() in I; return type requires unchecked conversion
			JavacTestOptions.SKIP);
	}

