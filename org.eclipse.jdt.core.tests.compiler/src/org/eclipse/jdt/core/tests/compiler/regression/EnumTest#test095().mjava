public void test095() { // check missing abstract cases from multiple interfaces
	this.runNegativeTest(
		new String[] {
			"X.java",
			"public enum X implements I, J { \n" +
			"	ROUGE;\n" +
			"}\n" +
			"interface I { void foo(); }\n" +
			"interface J { void foo(); }\n"
		},
		"----------\n" +
		"1. ERROR in X.java (at line 1)\n" +
		"	public enum X implements I, J { \n" +
		"	            ^\n" +
		"The type X must implement the inherited abstract method I.foo()\n" +
		"----------\n");
	this.runNegativeTest(
		new String[] {
			"X.java",
			"public enum X implements I, J { \n" +
			"	ROUGE;\n" +
			"	public void foo() {}\n" +
			"}\n" +
			"interface I { void foo(int i); }\n" +
			"interface J { void foo(); }\n"
		},
		this.complianceLevel < ClassFileConstants.JDK1_6 ?
		"----------\n" +
		"1. ERROR in X.java (at line 1)\n" +
		"	public enum X implements I, J { \n" +
		"	            ^\n" +
		"The type X must implement the inherited abstract method I.foo(int)\n" +
		"----------\n" : 		
			"----------\n" +
			"1. ERROR in X.java (at line 1)\n" +
			"	public enum X implements I, J { \n" +
			"	            ^\n" +
			"The type X must implement the inherited abstract method I.foo(int)\n" +
			"----------\n" +
			"2. WARNING in X.java (at line 3)\n" +
			"	public void foo() {}\n" +
			"	            ^^^^^\n" +
			"The method foo() of type X should be tagged with @Override since it actually overrides a superinterface method\n" +
			"----------\n");
}

