	public void testDeprecated() throws Exception {
		this.runConformTest(
			new String[] {
				"X.java",
				"import java.lang.annotation.ElementType;\n" +
				"import java.lang.annotation.Target;\n" +
				"@Deprecated\n" +		
				"@Target(ElementType.TYPE_USE)\n" +
				"@interface X {\n" +
				"	int value() default 0;\n" +
				"}\n"
			},
			"");
		String expectedOutput =
				"// Compiled from X.java (version 1.8 : 52.0, no super bit, deprecated)\n" + 
				"abstract @interface X extends java.lang.annotation.Annotation {\n" + 
				"  Constant pool:\n" + 
				"    constant #1 class: #2 X\n" + 
				"    constant #2 utf8: \"X\"\n" + 
				"    constant #3 class: #4 java/lang/Object\n" + 
				"    constant #4 utf8: \"java/lang/Object\"\n" + 
				"    constant #5 class: #6 java/lang/annotation/Annotation\n" + 
				"    constant #6 utf8: \"java/lang/annotation/Annotation\"\n" + 
				"    constant #7 utf8: \"value\"\n" + 
				"    constant #8 utf8: \"()I\"\n" + 
				"    constant #9 utf8: \"AnnotationDefault\"\n" + 
				"    constant #10 integer: 0\n" + 
				"    constant #11 utf8: \"SourceFile\"\n" + 
				"    constant #12 utf8: \"X.java\"\n" + 
				"    constant #13 utf8: \"Deprecated\"\n" + 
				"    constant #14 utf8: \"RuntimeVisibleAnnotations\"\n" + 
				"    constant #15 utf8: \"Ljava/lang/Deprecated;\"\n" + 
				"    constant #16 utf8: \"Ljava/lang/annotation/Target;\"\n" + 
				"    constant #17 utf8: \"Ljava/lang/annotation/ElementType;\"\n" + 
				"    constant #18 utf8: \"TYPE_USE\"\n" + 
				"  \n" + 
				"  // Method descriptor #8 ()I\n" + 
				"  public abstract int value();\n" + 
				"    Annotation Default: \n" + 
				"      (int) 0 (constant type)\n" + 
				"\n" + 
				"  RuntimeVisibleAnnotations: \n" + 
				"    #15 @java.lang.Deprecated(\n" + 
				"    )\n" + 
				"    #16 @java.lang.annotation.Target(\n" + 
				"      #7 value=[\n" + 
				"        java.lang.annotation.ElementType.TYPE_USE(enum type #17.#18)\n" + 
				"        ]\n" + 
				"    )\n" + 
				"}";
		checkDisassembledClassFile(OUTPUT_DIR + File.separator + "X.class", "X", expectedOutput, ClassFileBytesDisassembler.SYSTEM);
	}	

