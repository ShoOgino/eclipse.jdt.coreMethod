/*
 * Parse a method with completionNode check
 */
public void checkMethodParse(
		char[] source,
		int cursorLocation,
		String expectedCompletion,
		String expectedParentCompletion,
		String expectedUnitToString,
		String expectedCompletionIdentifier,
		String expectedReplacedSource,
		String[] expectedLabels,
		String testName) {

	CompilerOptions options = new CompilerOptions(getCompilerOptions());
	CompletionParser parser =
		new CompletionParser(
			new ProblemReporter(
				DefaultErrorHandlingPolicies.proceedWithAllProblems(),
				options,
				new DefaultProblemFactory(Locale.getDefault())),
			false);

	ICompilationUnit sourceUnit = new CompilationUnit(source, testName, null);
	CompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0, 0);

	CompilationUnitDeclaration unit = parser.dietParse(sourceUnit, compilationResult, cursorLocation);

	ASTNode foundMethod = null;
	if (unit.types != null) {
		for (int i = 0; i < unit.types.length; i++) {
			TypeDeclaration type = unit.types[i];
			ASTNode method = findMethod(type, cursorLocation);
			if (method != null) {
				foundMethod = method;
				break;
			}
		}
	}

	if (foundMethod != null) {
		if (foundMethod instanceof AbstractMethodDeclaration) {
			parser.parseBlockStatements((AbstractMethodDeclaration)foundMethod, unit);
		} else {
			TypeDeclaration type = (TypeDeclaration)foundMethod;
			if (type.fields != null) {
				done : for (int i = 0; i < type.fields.length; i++) {
					FieldDeclaration field = type.fields[i];
					if (field.declarationSourceStart <= cursorLocation && (cursorLocation <= field.declarationSourceEnd || field.declarationSourceEnd == 0)) {
						if (field instanceof Initializer) {
							parser.parseBlockStatements((Initializer)field, type, unit);
							break;
						}
						break done; // field initializer
					}
				}
			}
		}
	}

	checkParse(
			expectedCompletion,
			expectedParentCompletion,
			expectedUnitToString,
			expectedCompletionIdentifier,
			expectedReplacedSource,
			testName,
			parser,
			unit);
}

