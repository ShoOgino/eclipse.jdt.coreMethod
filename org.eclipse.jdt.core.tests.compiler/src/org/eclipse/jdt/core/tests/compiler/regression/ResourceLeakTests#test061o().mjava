// Bug 358903 - Filter practically unimportant resource leak warnings
// a resource wrapper is closed only in its local block, underlying resource may leak
public void test061o() {
	Map options = getCompilerOptions();
	options.put(CompilerOptions.OPTION_ReportUnclosedCloseable, CompilerOptions.ERROR);
	options.put(CompilerOptions.OPTION_ReportPotentiallyUnclosedCloseable, CompilerOptions.ERROR);
	this.runNegativeTest(
		new String[] {
			"X.java",
			"import java.io.File;\n" +
			"import java.io.FileInputStream;\n" +
			"import java.io.BufferedInputStream;\n" +
			"import java.io.IOException;\n" +
			"public class X {\n" +
			"    void foo(boolean bar) throws IOException {\n" +
			"        File file = new File(\"somefil\");\n" +
			"        FileInputStream fileStream  = new FileInputStream(file);\n" +
			"        BufferedInputStream bis = new BufferedInputStream(fileStream);   \n" +
			"        if (bar) {\n" +
			"            BufferedInputStream doubleWrap = new BufferedInputStream(bis);\n" +
			"            doubleWrap.close();\n" +
			"        }\n" +
			"    }\n" +
			"}\n"
		},
		"----------\n" +
		"1. ERROR in X.java (at line 9)\n" +
		"	BufferedInputStream bis = new BufferedInputStream(fileStream);   \n" +
		"	                    ^^^\n" +
		"Potential resource leak: \'bis\' may not be closed\n" +
		"----------\n",
		null,
		true,
		options);
}

