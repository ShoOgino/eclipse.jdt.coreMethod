/**
 * 1FZ2G7R: use of non static inner class in constuctor
 */
public void test003() {
	String errMessage = isMinimumCompliant(ClassFileConstants.JDK11) ?
			"----------\n" +
			"1. ERROR in A.java (at line 8)\n" +
			"	super(getRunnable(), new B().toString()); \n" +
			"	                     ^^^^^^^\n" +
			"No enclosing instance of type A is available due to some intermediate constructor invocation\n" +
			"----------\n"
			:
			"----------\n" +
			"1. WARNING in A.java (at line 8)\n" +
			"	super(getRunnable(), new B().toString()); \n" +
			"	                     ^^^^^^^\n" +
			"Access to enclosing constructor A.B() is emulated by a synthetic accessor method\n" +
			"----------\n" +
			"2. ERROR in A.java (at line 8)\n" +
			"	super(getRunnable(), new B().toString()); \n" +
			"	                     ^^^^^^^\n" +
			"No enclosing instance of type A is available due to some intermediate constructor invocation\n" +
			"----------\n";
	this.runNegativeTest(
		new String[] {
			/* A.java */
			"A.java",
			"public class A extends Thread { \n" +
			"	private class B { \n" +
			"	} \n" +
			"	private static Runnable getRunnable() { \n" +
			"		return null; \n" +
			"	} \n" +
			"	public A() { \n" +
			"		super(getRunnable(), new B().toString()); \n" +
			"	} \n" +
			"} \n"
		},
		errMessage);
}

