public void test77() {

	String s = 
		"package p;															\n"+
		"																		\n"+
		"import java.lang.*;													\n"+
		"																		\n"+
		"class IncompleteHanoi {												\n"+
		"private    Post[] posts;												\n"+
		"private    int numberOfDisks;											\n"+
		"																		\n"+
		"public Hanoi (int numberOfDisks) {										\n"+
		" this.numberOfDisks = numberOfDisks;									\n"+
		"'' this.posts = new Post[3];											\n"+
		" String[] postNames = new String[]{\"Left\", \"Middle\", \"Right\"};	\n"+
		"																		\n"+
		" for (int i = 0; i < 3; ++i)											\n"+
		"  this.posts[i] = new Post(postNames[i], numberOfDisks);				\n"+
		"}																		\n"+
		"																		\n"+
		"private void solve (int depth, Post start, Post free, Post end) {		\n"+
		" if (depth == 1)														\n"+
		"  moveDisk(start, end);												\n"+
		" else if (depth > 1) {													\n"+
		"  sol																	\n";
		
	String expectedDietUnitToString = 
		"package p;\n" + 
		"import java.lang.*;\n" + 
		"class IncompleteHanoi {\n" + 
		"  private Post[] posts;\n" + 
		"  private int numberOfDisks;\n" + 
		"  IncompleteHanoi() {\n" + 
		"  }\n" + 
		"  public Hanoi(int numberOfDisks) {\n" + 
		"  }\n" + 
		"  private void solve(int depth, Post start, Post free, Post end) {\n" + 
		"  }\n" + 
		"}\n";
		
	String expectedDietPlusBodyUnitToString = 
		"package p;\n" + 
		"import java.lang.*;\n" + 
		"class IncompleteHanoi {\n" + 
		"  private Post[] posts;\n" + 
		"  private int numberOfDisks;\n" + 
		"  IncompleteHanoi() {\n" + 
		"    super();\n" + 		
		"  }\n" + 
		"  public Hanoi(int numberOfDisks) {\n" + 
		"  }\n" + 
		"  private void solve(int depth, Post start, Post free, Post end) {\n" + 
		"  }\n" + 
		"}\n";
	
	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString = 
		"package p;\n" + 
		"import java.lang.*;\n" + 
		"class IncompleteHanoi {\n" + 
		"  private Post[] posts;\n" + 
		"  private int numberOfDisks;\n" + 
		"  IncompleteHanoi() {\n" + 
		"    super();\n" + 		
		"  }\n" + 
		"  public Hanoi(int numberOfDisks) {\n" + 
		"  }\n" + 
		"  private void solve(int depth, Post start, Post free, Post end) {\n" + 
		"    if ((depth == 1))\n" + 
		"        moveDisk(start, end);\n" + 
		"    else\n" + 
		"        if ((depth > 1))\n" + 
		"            {\n" + 
		"              sol = ;\n" + 
		"            }\n" + 
		"        else\n" + 
		"            ;\n" + 
		"  }\n" + 
		"}\n";
		
	String expectedFullUnitToString = expectedDietUnitToString;
	
	String expectedCompletionDietUnitToString = expectedDietUnitToString;
	
	String testName = "<should not recover duplicate field numberOfDisks>";
	checkParse(
		s.toCharArray(),
		expectedDietUnitToString,
		expectedDietPlusBodyUnitToString,
		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,		
		expectedFullUnitToString,
		expectedCompletionDietUnitToString, testName);
}
/*
 * Should not detect a field v (1/2)
 */

