public void testBug430296() {
	runNegativeTest(
		new String[] {
			"AnnotationCollector.java",
			"import java.lang.annotation.*;\n" +
			"import java.util.*;\n" +
			"import java.util.function.*;\n" +
			"import java.util.stream.*;\n" +
			"\n" +
			"public abstract class AnnotationCollector {\n" +
			"        \n" +
			"        Map<String, Person> test2(Stream<Person> persons) {\n" +
			"                return persons.collect(Collectors.toMap((Person p) -> p.getLastName(),\n" +
			"                                                                Function::identity,\n" +
			"                                                        (p1, p2) -> p1));\n" +
			"        }\n" +
			"}\n" +
			"\n" +
			"class Person {\n" +
			"        String getLastName() { return \"\"; }\n" +
			"}"
		},
		"----------\n" +
		"1. ERROR in AnnotationCollector.java (at line 9)\n" +
		"	return persons.collect(Collectors.toMap((Person p) -> p.getLastName(),\n" +
		"	                                  ^^^^^\n" +
		"The method toMap(Function<? super T,? extends K>, Function<? super T,? extends U>, BinaryOperator<U>) in the type Collectors is not applicable for the arguments ((Person p) -> {}, Function::identity, BinaryOperator<U>)\n" +
		"----------\n" +
		"2. ERROR in AnnotationCollector.java (at line 9)\n" +
		"	return persons.collect(Collectors.toMap((Person p) -> p.getLastName(),\n" +
		"	                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" +
		"Type mismatch: cannot convert from Function<Person,? extends K> to Function<? super T,? extends K>\n" +
		"----------\n" +
		"3. ERROR in AnnotationCollector.java (at line 10)\n" +
		"	Function::identity,\n" +
		"	^^^^^^^^^^^^^^^^^^\n" +
		"The type Function does not define identity(T) that is applicable here\n" +
		"----------\n");
}

