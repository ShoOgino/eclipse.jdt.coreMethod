	// checking scenario where generic type and method share the same type parameter name
	public void test344() {
		this.runNegativeTest(
			new String[] {	
				"X.java",
				"import java.io.IOException;\n" + 
				"\n" + 
				"public abstract class X<T extends Runnable> {\n" + 
				"	\n" + 
				"	public abstract <T extends Exception> T bar(T t);\n" + 
				"\n" + 
				"	static void foo(X x) {\n" + 
				"		x.<Exception>bar(null);\n" + 
				"		\n" + 
				"		class R implements Runnable {\n" + 
				"			public void run() {\n" + 
				"			}\n" + 
				"		}\n" + 
				"		X<R> xr = new X<R>(){  \n" + 
				"			public <T> T bar(T t) { \n" + 
				"				return t; \n" + 
				"			}\n" + 
				"		};\n" + 
				"		IOException e = xr.bar(new IOException());\n" + 
				"	}\n" + 
				"}\n"		
			},
			"----------\n" + 
			"1. ERROR in X.java (at line 8)\n" + 
			"	x.<Exception>bar(null);\n" + 
			"	             ^^^\n" + 
			"The method bar(Exception) of raw type X is no longer generic; it cannot be parameterized with arguments <Exception>\n" + 
			"----------\n" + 
			"2. ERROR in X.java (at line 14)\n" + 
			"	X<R> xr = new X<R>(){  \n" + 
			"	              ^^^^^^\n" + 
			"Class must implement the inherited abstract method X<R>.bar(T)\n" + 
			"----------\n");
	}

