// AST implementation - visiting binary expressions
// https://bugs.eclipse.org/bugs/show_bug.cgi?id=102728
// Adding combined binary expressions - checking recursive print
public void test0012_combined_binary_expression() {
	CombinedBinaryExpression.defaultArityMaxStartingValue = 2; 
	runConformTest(
		"X.java", 
		"public class X {\n" + 
		"  void foo() {\n" + 
		"    String s1 = \"s1\";\n" + 
		"    String s2 = \"s2\";\n" + 
		"    String s3 = \"s3\";\n" + 
		"    String s4 = \"s4\";\n" + 
		"    System.out.println(s1 + \"l1\" + s2 + \"l2\" +\n" +
		"      s3 + s1 + s4);\n" + 
		"  }\n" + 
		"}\n",
		defaultParser,
		new ASTCollector() {
			public boolean visit(BinaryExpression binaryExpression, 
					BlockScope scope) {
				super.visit(binaryExpression, scope);
				this.collector.append(binaryExpression);
				return true;
			}
		},
		"((((((s1 + \"l1\") + s2) + \"l2\") + s3) + s1) + s4)(((((s1 + \"l1\")" +
		" + s2) + \"l2\") + s3) + s1)((((s1 + \"l1\") + s2) + \"l2\") + s3)" +
		"(((s1 + \"l1\") + s2) + \"l2\")((s1 + \"l1\") + s2)(s1 + \"l1\")");
	CombinedBinaryExpression.defaultArityMaxStartingValue = 
		CombinedBinaryExpression.ARITY_MAX_MIN;
}

