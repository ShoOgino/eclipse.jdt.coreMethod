	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=147647
	// variant: having both methods in the same class should not change anything
	public void test021() {
		// http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6182950
		String expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?
		"----------\n" + 
		"1. WARNING in Y.java (at line 3)\n" + 
		"	public class Y<V extends String> extends X<V> {\n" + 
		"	                         ^^^^^^\n" + 
		"The type parameter V should not be bounded by the final type String. Final types cannot be further extended\n" + 
		"----------\n" + 
		"2. WARNING in Y.java (at line 4)\n" + 
		"	public static <W extends String> Y<W> make(Class<W> clazz) {\n" + 
		"	                         ^^^^^^\n" + 
		"The type parameter W should not be bounded by the final type String. Final types cannot be further extended\n" + 
		"----------\n" + 
		"3. WARNING in Y.java (at line 4)\n" + 
		"	public static <W extends String> Y<W> make(Class<W> clazz) {\n" + 
		"	                                      ^^^^^^^^^^^^^^^^^^^^\n" + 
		"Method make(Class<W>) has the same erasure make(Class<T>) as another method in type Y<V>\n" + 
		"----------\n" + 
		"4. WARNING in Y.java (at line 8)\n" + 
		"	public static <U extends Object> X<U> make(Class<U> clazz) {\n" + 
		"	                                      ^^^^^^^^^^^^^^^^^^^^\n" + 
		"Method make(Class<U>) has the same erasure make(Class<T>) as another method in type Y<V>\n" + 
		"----------\n" + 
		"5. WARNING in Y.java (at line 13)\n" + 
		"	Y.make(getClazz());\n" + 
		"	^^^^^^^^^^^^^^^^^^\n" + 
		"Type safety: Unchecked invocation make(Class) of the generic method make(Class<W>) of type Y\n" + 
		"----------\n" + 
		"6. WARNING in Y.java (at line 13)\n" + 
		"	Y.make(getClazz());\n" + 
		"	       ^^^^^^^^^^\n" + 
		"Type safety: The expression of type Class needs unchecked conversion to conform to Class<String>\n" + 
		"----------\n" + 
		"7. WARNING in Y.java (at line 15)\n" + 
		"	public static Class getClazz() {\n" + 
		"	              ^^^^^\n" + 
		"Class is a raw type. References to generic type Class<T> should be parameterized\n" + 
		"----------\n":
			"----------\n" + 
			"1. WARNING in Y.java (at line 3)\n" + 
			"	public class Y<V extends String> extends X<V> {\n" + 
			"	                         ^^^^^^\n" + 
			"The type parameter V should not be bounded by the final type String. Final types cannot be further extended\n" + 
			"----------\n" + 
			"2. WARNING in Y.java (at line 4)\n" + 
			"	public static <W extends String> Y<W> make(Class<W> clazz) {\n" + 
			"	                         ^^^^^^\n" + 
			"The type parameter W should not be bounded by the final type String. Final types cannot be further extended\n" + 
			"----------\n" + 
			"3. ERROR in Y.java (at line 4)\n" + 
			"	public static <W extends String> Y<W> make(Class<W> clazz) {\n" + 
			"	                                      ^^^^^^^^^^^^^^^^^^^^\n" + 
			"Method make(Class<W>) has the same erasure make(Class<T>) as another method in type Y<V>\n" + 
			"----------\n" + 
			"4. ERROR in Y.java (at line 8)\n" + 
			"	public static <U extends Object> X<U> make(Class<U> clazz) {\n" + 
			"	                                      ^^^^^^^^^^^^^^^^^^^^\n" + 
			"Method make(Class<U>) has the same erasure make(Class<T>) as another method in type Y<V>\n" + 
			"----------\n" + 
			"5. WARNING in Y.java (at line 13)\n" + 
			"	Y.make(getClazz());\n" + 
			"	^^^^^^^^^^^^^^^^^^\n" + 
			"Type safety: Unchecked invocation make(Class) of the generic method make(Class<W>) of type Y\n" + 
			"----------\n" + 
			"6. WARNING in Y.java (at line 13)\n" + 
			"	Y.make(getClazz());\n" + 
			"	       ^^^^^^^^^^\n" + 
			"Type safety: The expression of type Class needs unchecked conversion to conform to Class<String>\n" + 
			"----------\n" + 
			"7. WARNING in Y.java (at line 15)\n" + 
			"	public static Class getClazz() {\n" + 
			"	              ^^^^^\n" + 
			"Class is a raw type. References to generic type Class<T> should be parameterized\n" + 
			"----------\n";
		this.runNegativeTest(
			new String[] {
				"Y.java",
				"class X<T extends Object> {\n" +
				"}\n" +
				"public class Y<V extends String> extends X<V> {\n" +
				"  public static <W extends String> Y<W> make(Class<W> clazz) {\n" +
				"    System.out.print(true);\n" +
				"    return new Y<W>();\n" +
				"  }\n" +
				"  public static <U extends Object> X<U> make(Class<U> clazz) {\n" +
				"    System.out.print(false);\n" +
				"    return new X<U>();\n" +
				"  }\n" +
				"  public static void main(String[] args) throws Exception {\n" +
				"    Y.make(getClazz());\n" +
				"  }\n" +
				"  public static Class getClazz() {\n" +
				"    return String.class;\n" +
				"  }\n" +
				"}"
			},
			expectedCompilerLog
		);
/* javac 7
X.java:8: name clash: <U>make(Class<U>) and <W>make(Class<W>) have the same erasure
  public static <U extends Object> X<U> make(Class<U> clazz) {
                                        ^
  where U,W are type-variables:
    U extends Object declared in method <U>make(Class<U>)
    W extends String declared in method <W>make(Class<W>)
X.java:13: warning: [unchecked] unchecked conversion
    Y.make(getClazz());
                   ^
  required: Class<W#1>
  found:    Class
  where W#1,W#2 are type-variables:
    W#1 extends String declared in method <W#2>make(Class<W#2>)
    W#2 extends String declared in method <W#2>make(Class<W#2>)
X.java:13: warning: [unchecked] unchecked method invocation: method make in class Y is applied to given types
    Y.make(getClazz());
          ^
  required: Class<W>
  found: Class
  where W is a type-variable:
    W extends String declared in method <W>make(Class<W>)
1 error
2 warnings
 */
	}

