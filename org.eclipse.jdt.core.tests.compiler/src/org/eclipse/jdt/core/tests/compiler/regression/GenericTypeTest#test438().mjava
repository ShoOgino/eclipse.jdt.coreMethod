	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=78591
	public void test438() {
		this.runNegativeTest(
			new String[] {
				"X.java",
				"import java.util.List;\n" + 
				"public class X<T> {\n" + 
				"    Zork z;\n" +
				"    List<T> list;\n" + 
				"    void add(Object abs) {\n" + 
				"        list.add((T) list.get(0)); // checked cast\n" + 
				"        list.add((T) abs); // unchecked cast\n" + 
				"    }\n" + 
				"    void bar(List<? extends T> other) {\n" + 
				"    	list.add((T) other.get(0)); // checked cast\n" + 
				"    }\n" + 
				"    void baz(List<? super T> other) {\n" + 
				"    	list.add((T) other.get(0)); // unchecked cast\n" + 
				"    }\n" + 
				"}\n",
			},
			"----------\n" + 
			"1. ERROR in X.java (at line 3)\n" + 
			"	Zork z;\n" + 
			"	^^^^\n" + 
			"Zork cannot be resolved to a type\n" + 
			"----------\n" + 
			"2. WARNING in X.java (at line 6)\n" + 
			"	list.add((T) list.get(0)); // checked cast\n" + 
			"	         ^^^^^^^^^^^^^^^\n" + 
			"Unnecessary cast from T to T\n" + 
			"----------\n" + 
			"3. WARNING in X.java (at line 7)\n" + 
			"	list.add((T) abs); // unchecked cast\n" + 
			"	         ^^^^^^^\n" + 
			"Type safety: The cast from Object to T is actually checking against the erased type Object\n" + 
			"----------\n" + 
			"4. WARNING in X.java (at line 10)\n" + 
			"	list.add((T) other.get(0)); // checked cast\n" + 
			"	         ^^^^^^^^^^^^^^^^\n" + 
			"Unnecessary cast from capture-of ? extends T to T\n" + 
			"----------\n" + 
			"5. WARNING in X.java (at line 13)\n" + 
			"	list.add((T) other.get(0)); // unchecked cast\n" + 
			"	         ^^^^^^^^^^^^^^^^\n" + 
			"Type safety: The cast from capture-of ? super T to T is actually checking against the erased type Object\n" + 
			"----------\n");
	}		

