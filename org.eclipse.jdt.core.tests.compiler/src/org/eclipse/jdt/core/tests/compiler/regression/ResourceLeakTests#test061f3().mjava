// Bug 358903 - Filter practically unimportant resource leak warnings
// Bug 361073 - Avoid resource leak warning when the top level resource is closed explicitly
// a resource wrapper is sent to another method affecting also the underlying resource - from a real-world example
public void test061f3() throws IOException {
	Map options = getCompilerOptions();
	options.put(CompilerOptions.OPTION_ReportUnclosedCloseable, CompilerOptions.ERROR);
	options.put(CompilerOptions.OPTION_ReportPotentiallyUnclosedCloseable, CompilerOptions.ERROR);
	this.runNegativeTest(
		new String[] {
			"X.java",
			"import java.io.File;\n" +
			"import java.io.FileInputStream;\n" +
			"import java.io.FileNotFoundException;\n" +
			"import java.io.InputStream;\n" +
			"import java.io.BufferedInputStream;\n" +
			"public class X {\n" +
			"    String loadProfile(File profileFile) {\n" +
			"		try {\n" +
			"			InputStream stream = new BufferedInputStream(new FileInputStream(profileFile));\n" +
			"			return loadProfile(stream);\n" +
			"		} catch (FileNotFoundException e) {\n" +
			"			//null\n" +
			"		}\n" +
			"		return null;\n" +
			"	}\n" +
			"	private String loadProfile(InputStream stream) {\n" +
			"		return null;\n" +
			"	}\n" +
			"}\n"
		},
		"----------\n" +
		"1. ERROR in X.java (at line 10)\n" +
		"	return loadProfile(stream);\n" +
		"	^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" +
		"Potential resource leak: \'stream\' may not be closed at this location\n" +
		"----------\n",
		null,
		true,
		options);
}

