	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=380313
	// Verify the generated code does not have same branch target for the 2 return statements
	public void testBug380313() throws Exception {
		this.runConformTest(
				new String[] {
						"X.java",
						"public class X {\n" +
						"public void foo() throws Exception {\n" + 
						"        int i = 1;\n" + 
						"        try {\n" + 
						"            if (i == 1) {\n" + 
						"                int n = bar();\n" + 
						"                if (n == 35)\n" + 
						"                   return;\n" + 
						"            } else {\n" + 
						"                throw new Exception();\n" + 
						"            }\n" + 
						"            if (i == 0)\n" + 
						"               return;\n" + 
						"        } finally {\n" + 
						"            bar();\n" + 
						"        }\n" + 
						"    }\n" + 
						"\n" + 
						"    private int bar() {\n" + 
						"        return 0;\n" + 
						"    }\n" + 
						"\n" + 
						"    public static void main(String[] args) {\n" +
						"		System.out.println(\"SUCCESS\");\n" + 
						"    }\n" +
						"}\n"
				},
				"SUCCESS");

			ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
			byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +"X.class"));
			String actualOutput =
				disassembler.disassemble(
					classFileBytes,
					"\n",
					ClassFileBytesDisassembler.DETAILED);

			String xBarCall = isMinimumCompliant(ClassFileConstants.JDK11) ?
					"invokevirtual X.bar() : int [18]\n" : "invokespecial X.bar() : int [18]\n";
			String expectedOutput =
					"  // Method descriptor #6 ()V\n" + 
					"  // Stack: 2, Locals: 4\n" + 
					"  public void foo() throws java.lang.Exception;\n" + 
					"     0  iconst_1\n" + 
					"     1  istore_1 [i]\n" + 
					"     2  iload_1 [i]\n" + 
					"     3  iconst_1\n" + 
					"     4  if_icmpne 24\n" + 
					"     7  aload_0 [this]\n" + 
					"     8  " + xBarCall + 
					"    11  istore_2 [n]\n" + 
					"    12  iload_2 [n]\n" + 
					"    13  bipush 35\n" + 
					"    15  if_icmpne 32\n" + 
					"    18  aload_0 [this]\n" + 
					"    19  " + xBarCall + 
					"    22  pop\n" + 
					"    23  return\n" + 
					"    24  new java.lang.Exception [16]\n" + 
					"    27  dup\n" + 
					"    28  invokespecial java.lang.Exception() [22]\n" + 
					"    31  athrow\n" + 
					"    32  iload_1 [i]\n" + 
					"    33  ifne 50\n" + 
					"    36  aload_0 [this]\n" + 
					"    37  " + xBarCall + 
					"    40  pop\n" + 
					"    41  return\n" + 
					"    42  astore_3\n" + 
					"    43  aload_0 [this]\n" + 
					"    44  " + xBarCall + 
					"    47  pop\n" + 
					"    48  aload_3\n" + 
					"    49  athrow\n" + 
					"    50  aload_0 [this]\n" + 
					"    51  " + xBarCall + 
					"    54  pop\n" + 
					"    55  return\n" + 
					"      Exception Table:\n" + 
					"        [pc: 2, pc: 18] -> 42 when : any\n" + 
					"        [pc: 24, pc: 36] -> 42 when : any\n" + 
					"      Line numbers:\n" + 
					"        [pc: 0, line: 3]\n" + 
					"        [pc: 2, line: 5]\n" + 
					"        [pc: 7, line: 6]\n" + 
					"        [pc: 12, line: 7]\n" + 
					"        [pc: 18, line: 15]\n" + 
					"        [pc: 23, line: 8]\n" + 
					"        [pc: 24, line: 10]\n" + 
					"        [pc: 32, line: 12]\n" + 
					"        [pc: 36, line: 15]\n" + 
					"        [pc: 41, line: 13]\n" + 
					"        [pc: 42, line: 14]\n" + 
					"        [pc: 43, line: 15]\n" + 
					"        [pc: 48, line: 16]\n" + 
					"        [pc: 50, line: 15]\n" + 
					"        [pc: 55, line: 17]\n" + 
					"      Local variable table:\n" + 
					"        [pc: 0, pc: 56] local: this index: 0 type: X\n" + 
					"        [pc: 2, pc: 56] local: i index: 1 type: int\n" + 
					"        [pc: 12, pc: 24] local: n index: 2 type: int\n" + 
					"      Stack map table: number of frames 4\n" + 
					"        [pc: 24, append: {int}]\n" + 
					"        [pc: 32, same]\n" + 
					"        [pc: 42, same_locals_1_stack_item, stack: {java.lang.Throwable}]\n" + 
					"        [pc: 50, same]\n";
			int index = actualOutput.indexOf(expectedOutput);
			if (index == -1 || expectedOutput.length() == 0) {
				System.out.println(Util.displayString(actualOutput, 2));
			}
			if (index == -1) {
				assertEquals("Wrong contents", expectedOutput, actualOutput);
			}
	}

