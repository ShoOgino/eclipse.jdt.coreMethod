	public void testPackageConflict() {
		Map<String,String> options = getCompilerOptions();
		try {
			options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.IGNORE);

			runNegativeTest(
					true, // flush dir
					new String[] {
							"p/z.java",
							"package p;\n" +
									"public class z {\n" +
									"	public static void main(String[] args) throws Exception {\n" +
									"		try {\n" +
									"			Class.forName(\"p.z.X\").newInstance();\n" +
									"		} catch (ClassNotFoundException e) {\n" +
									"			System.out.println(e.getClass().getName());\n" +
									"		}\n" +
									"	}\n" +
									"}\n",
									"p/z/X.java",
									"package p.z;\n" +
											"public class X {\n" +
											"	public X() {\n" +
											"		System.out.println(\"OK\");\n" +
											"	}\n" +
											"}\n",
					},
					null, // libs
					options,
					"----------\n" + 
							"1. ERROR in p\\z\\X.java (at line 1)\n" + 
							"	package p.z;\n" + 
							"	        ^^^\n" + 
							"The package p.z collides with a type\n" + 
							"----------\n",
							"java.lang.ClassNotFoundException", // cannot generate code in presence of the above error
							"",
							JavacTestOptions.SKIP);
		} finally {
			options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);
		}
	}

