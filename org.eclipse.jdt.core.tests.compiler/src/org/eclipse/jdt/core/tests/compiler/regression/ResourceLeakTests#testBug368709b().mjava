// Bug 368709 - Endless loop in FakedTrackingVariable.markPassedToOutside
// minimal test case: constructing an indirect self-wrapper
public void testBug368709b() {
	if (this.complianceLevel < ClassFileConstants.JDK1_5) return;
	Map options = getCompilerOptions();
	options.put(CompilerOptions.OPTION_ReportUnclosedCloseable, CompilerOptions.ERROR);
	options.put(CompilerOptions.OPTION_ReportPotentiallyUnclosedCloseable, CompilerOptions.ERROR);
	this.runNegativeTest(
		new String[] {
			"X.java",
			"import java.io.*;\n" +
			"import java.util.zip.*;\n" +
			"public class X {\n" +
			"  void doit() throws IOException {\n" +
			"    InputStream in = new FileInputStream(\"somefile\");\n" +
			"    in = new BufferedInputStream(new InflaterInputStream(in, inflater(), 8192), 8192);\n" +
			"    process(in);\n" +
			"  }\n" +
			"  Inflater inflater() { return null; }\n" +
			"  void process(InputStream is) { }\n" +
			"}\n"
		},
		"----------\n" +
		"1. ERROR in X.java (at line 5)\n" +
		"	InputStream in = new FileInputStream(\"somefile\");\n" +
		"	            ^^\n" +
		"Potential resource leak: \'in\' may not be closed\n" +
		"----------\n",
		null,
		true,
		options);
}

