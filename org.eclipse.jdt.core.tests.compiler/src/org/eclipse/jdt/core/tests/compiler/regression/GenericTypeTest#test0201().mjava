	// parameterized explicit constructor call - non generic target constructor
	// **
	public void test0201() {
		if (this.complianceLevel < ClassFileConstants.JDK1_7) {
			this.runNegativeTest(
				new String[] {
					"X.java",
					"public class X {\n" + 
					"	public X(String t){\n" + 
					"		System.out.println(t);\n" + 
					"	}\n" + 
					"	public static void main(String[] args) {\n" + 
					"		class Local extends X {\n" + 
					"			Local() {\n" +
					"				<String>super(\"FAILED\");\n" + 
					"			}\n" + 
					"		};\n" + 
					"		new Local();\n" +				
					"	}\n" + 
					"}\n", 
				},
				"----------\n" + 
				"1. ERROR in X.java (at line 8)\n" + 
				"	<String>super(\"FAILED\");\n" + 
				"	        ^^^^^^^^^^^^^^^^\n" + 
				"The constructor X(String) of type X is not generic; it cannot be parameterized with arguments <String>\n" + 
				"----------\n");
			return;
		}
		this.runNegativeTest(
				new String[] {
					"X.java",
					"public class X {\n" + 
					"	public X(String t){\n" + 
					"		System.out.println(t);\n" + 
					"		Zork z;\n" +
					"	}\n" + 
					"	public static void main(String[] args) {\n" + 
					"		class Local extends X {\n" + 
					"			Local() {\n" +
					"				<String>super(\"FAILED\");\n" + 
					"			}\n" + 
					"		};\n" + 
					"		new Local();\n" +				
					"	}\n" + 
					"}\n", 
				},
				"----------\n" + 
				"1. ERROR in X.java (at line 4)\n" + 
				"	Zork z;\n" + 
				"	^^^^\n" + 
				"Zork cannot be resolved to a type\n" + 
				"----------\n" + 
				"2. WARNING in X.java (at line 9)\n" + 
				"	<String>super(\"FAILED\");\n" + 
				"	 ^^^^^^\n" + 
				"Unused type arguments for the non generic constructor X(String) of type X; it should not be parameterized with arguments <String>\n" + 
				"----------\n");
	}			

