	// check code generation of annotation default attribute (autowrapping)
	public void test073() {
		this.runConformTest(
			new String[] {
				"X.java",
				"@interface Foo {\n" + 
				"    double value() default 0.0;\n" + 
				"    int id() default 0;\n" + 
				"}\n" + 
				"enum Color {" +
				"	BLUE, RED, GREEN\n" + 
				"}\n" + 
				"@interface I {\n" + 
				"    Color[] enums() default Color.GREEN;\n" + 
				"    Foo[] annotations() default @Foo();\n" + 
				"    int[] ints() default 0;\n" + 
				"    byte[] bytes() default 1;\n" + 
				"    short[] shorts() default 3;\n" + 
				"    long[] longs() default Long.MIN_VALUE;\n" + 
				"    String[] strings() default \"\";\n" + 
				"    boolean[] booleans() default true;\n" + 
				"    float[] floats() default Float.MAX_VALUE;\n" + 
				"    double[] doubles() default Double.MAX_VALUE;\n" + 
				"    Class[] classes() default I.class;\n" + 
				"}\n" + 
				"\n" + 
				"public class X {\n" + 
				"    @I(enums=Color.RED,\n" + 
				"		annotations=@Foo(),\n" + 
				"		ints=2,\n" + 
				"		bytes=1,\n" + 
				"		shorts=5,\n" + 
				"		longs=Long.MIN_VALUE,\n" + 
				"		strings=\"Hi\",\n" + 
				"		booleans=true,\n" +
				"		floats=0.0f,\n" +
				"		doubles=-0.0) void foo() {\n" + 
				"    }\n" + 
				"}\n"
			},
		"");
		
		ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
		String actualOutput = null;
		try {
			byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +"I.class"));
			actualOutput =
				disassembler.disassemble(
					classFileBytes,
					"\n",
					ClassFileBytesDisassembler.DETAILED); 
		} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
			assertTrue("ClassFormatException", false);
		} catch (IOException e) {
			assertTrue("IOException", false);
		}
		
		String expectedOutput = 
			"// Compiled from X.java (version 1.5 : 49.0, no super bit)\n" + 
			"abstract @interface I extends java.lang.Object implements java.lang.annotation.Annotation {\n" + 
			"  \n" + 
			"  // Method descriptor  #8 ()[LColor;\n" + 
			"  abstract public Color[] enums() default {Color.GREEN};\n" + 
			"  \n" + 
			"  // Method descriptor  #13 ()[LFoo;\n" + 
			"  abstract public Foo[] annotations() default {@Foo()};\n" + 
			"  \n" + 
			"  // Method descriptor  #16 ()[I\n" + 
			"  abstract public int[] ints() default {(int) 0};\n" + 
			"  \n" + 
			"  // Method descriptor  #19 ()[B\n" + 
			"  abstract public byte[] bytes() default {(byte) 1};\n" + 
			"  \n" + 
			"  // Method descriptor  #22 ()[S\n" + 
			"  abstract public short[] shorts() default {(short) 3};\n" + 
			"  \n" + 
			"  // Method descriptor  #25 ()[J\n" + 
			"  abstract public long[] longs() default {-9223372036854775808L};\n" + 
			"  \n" + 
			"  // Method descriptor  #29 ()[Ljava/lang/String;\n" + 
			"  abstract public String[] strings() default {\"\"};\n" + 
			"  \n" + 
			"  // Method descriptor  #32 ()[Z\n" + 
			"  abstract public boolean[] booleans() default {true};\n" + 
			"  \n" + 
			"  // Method descriptor  #34 ()[F\n" + 
			"  abstract public float[] floats() default {3.4028235E38f};\n" + 
			"  \n" + 
			"  // Method descriptor  #37 ()[D\n" + 
			"  abstract public double[] doubles() default {1.7976931348623157E308};\n" + 
			"  \n" + 
			"  // Method descriptor  #41 ()[Ljava/lang/Class;\n" + 
			"  abstract public Class[] classes() default {I};\n" + 
			"}"; 
			
		if (actualOutput.indexOf(expectedOutput) == -1) {
			System.out.println(org.eclipse.jdt.core.tests.util.Util.displayString(actualOutput, 2));
		}
		assertTrue("unexpected bytecode sequence", actualOutput.indexOf(expectedOutput) != -1);
	}

