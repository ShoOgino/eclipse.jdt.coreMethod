//https://bugs.eclipse.org/bugs/show_bug.cgi?id=325567
public void test113() {
	Runner runner = new Runner();
	runner.testFiles =
		new String[] {
			"X.java",
			"import java.io.IOException;\n" +
			"public class X {\n" +
			"	public static void bar(int i) {\n" +
			"		final String before;\n" +
			"		try {\n" +
			"			before = foo();\n" +
			"		} catch (IOException e) {\n" +
			"			// ignore\n" +
			"		}\n" +
			"		B b = new B(new I() {\n" +
			"			public String bar() {\n" +
			"				return new String(before);\n" +
			"			}\n" +
			"		});\n" +
			"		try {\n" +
			"			b.toString();\n" +
			"		} catch(Exception e) {\n" +
			"			// ignore\n" +
			"		}\n" +
			"	}\n" +
			"	private static String foo() throws IOException {\n" +
			"		return null;\n" +
			"	}\n" +
			"	static class B {\n" +
			"		B(I i) {\n" +
			"			//ignore\n" +
			"		}\n" +
			"	}\n" +
			"	static interface I {\n" +
			"		String bar();\n" +
			"	}\n" +
			"}"
		};
	runner.expectedCompilerLog =
		"----------\n" +
		"1. ERROR in X.java (at line 12)\n" +
		"	return new String(before);\n" +
		"	                  ^^^^^^\n" +
		"The local variable before may not have been initialized\n" +
		"----------\n";
	runner.generateOutput =
		true;
	runner.runNegativeTest();

	runner = new Runner();
	runner.testFiles =
		new String[] {
			"Y.java", //-----------------------------------------------------------------------
			"public class Y {\n" +
			"	public static void main(String[] args) {\n" +
			"		try {\n" +
			"			X.bar(3);\n" +
			"		} catch(VerifyError e) {\n" +
			"			System.out.println(\"FAILED\");\n" +
			"		}\n" +
			"	}\n" +
			"}",
		};
	runner.expectedOutputString =
		"";
	runner.shouldFlushOutputDirectory =
		false;
	runner.javacTestOptions =
		JavacTestOptions.Excuse.JavacHasErrorsEclipseHasNone; // ecj can create .class from erroneous .java
	runner.runConformTest();
}

