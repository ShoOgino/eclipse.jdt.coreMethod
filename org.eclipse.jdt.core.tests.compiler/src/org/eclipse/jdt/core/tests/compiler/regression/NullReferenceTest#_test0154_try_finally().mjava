	// null analysis -- try/finally
	// origin: AssignmentTest#test017
	// REVIEW design choice
	// See also test0174. The whole issue here is whether or not to detect
	// premature exits. We follow JLS's conservative approach, which considers
	// that the try block may exit before the assignment is completed.
	public void _test0154_try_finally() {
		this.runNegativeTest(
			new String[] {
				"X.java",
				"public class X {\n" + 
				"	void foo(X x) {\n" + 
				"		x = this;\n" + 
				"		try {\n" + 
				"			x = null;\n" + 
				"		} finally {\n" + 
				"			if (x == null) {\n" + 
				"				x.foo(null);\n" + 
				"			}\n" + 
				"		}\n" + 
				"	}\n" + 
				"}\n",
			},
		"----------\n" + 
		"1. ERROR in X.java (at line 7)\n" + 
		"	if (x == null) {\n" + 
		"	    ^\n" + 
		"The variable x can only be null; it was either set to null or checked for null when last used\n" + 
		"----------\n" + 
		"2. ERROR in X.java (at line 8)\n" + 
		"	x.foo(null);\n" + 
		"	^\n" + 
		"The variable x can only be null; it was either set to null or checked for null when last used\n" + 
		"----------\n");
	}

