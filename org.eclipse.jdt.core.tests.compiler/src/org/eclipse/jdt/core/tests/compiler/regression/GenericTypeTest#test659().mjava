public void test659() {
	this.runNegativeTest(
		new String[] {
			"X.java",
			"import java.lang.ref.*;\n" + 
			"\n" + 
			"@SuppressWarnings(\"unusedLocal\")\n" + 
			"public class X<K, V> extends WeakReference<V> {\n" + 
			"	Zork z;\n" + 
			"	static ReferenceQueue<Integer> queue = new ReferenceQueue<Integer>();\n" + 
			"\n" + 
			"	private K key;\n" + 
			"\n" + 
			"	public X(K key, V value, ReferenceQueue<V> queue) {\n" + 
			"		super(value, queue);\n" + 
			"	}\n" + 
			"\n" + 
			"	public K getKey() {\n" + 
			"		return key;\n" + 
			"	}\n" + 
			"	@Override\n" + 
			"	public String toString() {\n" + 
			"		return \"key:\" + key;\n" + 
			"	}\n" + 
			"\n" + 
			"	public static void main(String[] arg) throws Exception {\n" + 
			"		X<String, Integer> ref = new X<String, Integer>(\"Dummy Key\", new Integer(5), queue);\n" + 
			"		new Thread() {\n" + 
			"			@Override\n" + 
			"			public void run() {\n" + 
			"				for (;;) {\n" + 
			"					// force ref to be cleared\n" + 
			"					System.gc();\n" + 
			"				}\n" + 
			"			}\n" + 
			"		}.start();\n" + 
			"\n" + 
			"		X<String, Integer> fromQueue = (X<String, Integer>) queue.remove();\n" + 
			"		System.out.println(fromQueue);\n" + 
			"		System.exit(0);\n" + 
			"	}\n" + 
			"}\n",
		},
		"----------\n" + 
		"1. ERROR in X.java (at line 5)\n" + 
		"	Zork z;\n" + 
		"	^^^^\n" + 
		"Zork cannot be resolved to a type\n" + 
		"----------\n" + 
		"2. WARNING in X.java (at line 34)\n" + 
		"	X<String, Integer> fromQueue = (X<String, Integer>) queue.remove();\n" + 
		"	                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
		"Type safety: The cast from Reference<capture-of ? extends Integer> to X<String,Integer> is actually checking against the erased type X\n" + 
		"----------\n");
}	

