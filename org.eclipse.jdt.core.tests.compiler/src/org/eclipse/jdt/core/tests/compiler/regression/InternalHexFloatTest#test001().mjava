	/**
	 */
	public void test001() {
		List x = new ArrayList();
		
		// various forms of zero
		x.add(new DoubleTest("0x0p0", 0x0L));
		x.add(new DoubleTest("0x0p0d", 0x0L));
		x.add(new DoubleTest("0x0p0D", 0x0L));
		x.add(new DoubleTest("0x0.0p0D", 0x0L));
		x.add(new DoubleTest("0x.0p0D", 0x0L));
		x.add(new DoubleTest("0x0.p0D", 0x0L));
		x.add(new DoubleTest("0x00000.00000000000p0D", 0x0L));
		x.add(new DoubleTest("0x0p99D", 0x0L));
		x.add(new DoubleTest("0x0p-99D", 0x0L));
		x.add(new DoubleTest("0x0p9999999D", 0x0L));
		x.add(new DoubleTest("0x0p-9999999D", 0x0L));
		
		// small doubles
		x.add(new DoubleTest("0x0.8p0D",       0x3fe0000000000000L));
		x.add(new DoubleTest("0x0.4p0D",       0x3fd0000000000000L));
		x.add(new DoubleTest("0x0.2p0D",       0x3fc0000000000000L));
		x.add(new DoubleTest("0x0.1p0D",       0x3fb0000000000000L));
		x.add(new DoubleTest("0x0.08p0D",      0x3fa0000000000000L));
		x.add(new DoubleTest("0x0.04p0D",      0x3f90000000000000L));
		x.add(new DoubleTest("0x0.02p0D",      0x3f80000000000000L));
		x.add(new DoubleTest("0x0.01p0D",      0x3f70000000000000L));
		x.add(new DoubleTest("0x0.010p0D",     0x3f70000000000000L));
		x.add(new DoubleTest("0x1p0D",         0x3ff0000000000000L));
		x.add(new DoubleTest("0x2p0D",         0x4000000000000000L));
		x.add(new DoubleTest("0x4p0D",         0x4010000000000000L));
		x.add(new DoubleTest("0x8p0D",         0x4020000000000000L));
		x.add(new DoubleTest("0x10p0D",        0x4030000000000000L));
		x.add(new DoubleTest("0x20p0D",        0x4040000000000000L));
		x.add(new DoubleTest("0x40p0D",        0x4050000000000000L));
		x.add(new DoubleTest("0x80p0D",        0x4060000000000000L));
		x.add(new DoubleTest("0x80.p0D",       0x4060000000000000L));
		x.add(new DoubleTest("0x80.8p0D",      0x4060100000000000L));
		x.add(new DoubleTest("0x80.80p0D",     0x4060100000000000L));
		x.add(new DoubleTest("0x123456789p0D", 0x41f2345678900000L));
		x.add(new DoubleTest("0xabcedfp0D",    0x416579dbe0000000L));
		x.add(new DoubleTest("0xABCDEFp0D",    0x416579bde0000000L));
				
		x.add(new DoubleTest("0x0.0100000000000000000000000000000000000000000000000p0d", 0x3f70000000000000L));
		x.add(new DoubleTest("0x0.0000000000000000000000000000000000000000000000001p0d", 0x33b0000000000000L));
		x.add(new DoubleTest("0x10000000000000000000000000000000000000000000000000000p0d", 0x4cf0000000000000L));
		
		// rounding to 53 bits
		x.add(new DoubleTest("0x823456789012380p0d", 0x43a0468acf120247L));
		x.add(new DoubleTest("0xFFFFFFFFFFFFF80p0d", 0x43afffffffffffffL));
		x.add(new DoubleTest("0xFFFFFFFFFFFFFC0p0d", 0x43b0000000000000L));
		x.add(new DoubleTest("0xFFFFFFFFFFFFFA0p0d", 0x43afffffffffffffL));
		x.add(new DoubleTest("0xFFFFFFFFFFFFF81p0d", 0x43afffffffffffffL));
		x.add(new DoubleTest("0x123456789abcd10p0d", 0x43723456789abcd1L));
		x.add(new DoubleTest("0x123456789abcd18p0d", 0x43723456789abcd2L));
		x.add(new DoubleTest("0x7FFFFFFFFFFFFC0p0d", 0x439fffffffffffffL));
		x.add(new DoubleTest("0x7FFFFFFFFFFFFE0p0d", 0x43a0000000000000L));
		x.add(new DoubleTest("0x3FFFFFFFFFFFFE0p0d", 0x438fffffffffffffL));
		x.add(new DoubleTest("0x3FFFFFFFFFFFFF0p0d", 0x4390000000000000L));
		x.add(new DoubleTest("0x1FFFFFFFFFFFFF0p0d", 0x437fffffffffffffL));
		x.add(new DoubleTest("0x1FFFFFFFFFFFFF8p0d", 0x4380000000000000L));
		
		// rounding to overflow at +1024; denormalized at -1022; underflow at -1075
		x.add(new DoubleTest("0x1p5000D",    0x7ff0000000000000L));
		x.add(new DoubleTest("0x1p-5000D",   0x7ff8000000000000L));
		x.add(new DoubleTest("0x1.0p1022d",  0x7fd0000000000000L));
		x.add(new DoubleTest("0x1.0p1023d",  0x7fe0000000000000L));
		x.add(new DoubleTest("0x1.0p1024d",  0x7ff0000000000000L));
		x.add(new DoubleTest("0x1.0p-1022d", 0x0010000000000000L));
		x.add(new DoubleTest("0x1.0p-1023d", 0x0008000000000000L));
		x.add(new DoubleTest("0x1.0p-1024d", 0x0004000000000000L));
		x.add(new DoubleTest("0x1.0p-1074d", 0x0000000000000001L));
		x.add(new DoubleTest("0x1.0p-1075d", 0x7ff8000000000000L));
		x.add(new DoubleTest("0x1.0p-1076d", 0x7ff8000000000000L));
		x.add(new DoubleTest("0x1.0p-1077d", 0x7ff8000000000000L));
		x.add(new DoubleTest("0x1.0p-1078d", 0x7ff8000000000000L));
		x.add(new DoubleTest("0x0.8p1023d",  0x7fd0000000000000L));
		x.add(new DoubleTest("0x0.8p1024d",  0x7fe0000000000000L));
		x.add(new DoubleTest("0x0.8p1025d",  0x7ff0000000000000L));
		x.add(new DoubleTest("0x0.8p-1021d", 0x0010000000000000L));
		x.add(new DoubleTest("0x0.8p-1022d", 0x0008000000000000L));
		x.add(new DoubleTest("0x0.8p-1023d", 0x0004000000000000L));
		x.add(new DoubleTest("0x0.8p-1024d", 0x0002000000000000L));
		x.add(new DoubleTest("0x0.8p-1074d", 0x7ff8000000000000L));
		x.add(new DoubleTest("0x0.8p-1075d", 0x7ff8000000000000L));
		x.add(new DoubleTest("0x0.8p-1076d", 0x7ff8000000000000L));
		x.add(new DoubleTest("0x0.4p-1021d", 0x0008000000000000L));
		x.add(new DoubleTest("0x0.4p-1022d", 0x0004000000000000L));
		x.add(new DoubleTest("0x0.4p-1023d", 0x0002000000000000L));
		x.add(new DoubleTest("0x0.4p-1073d", 0x7ff8000000000000L));
		x.add(new DoubleTest("0x0.4p-1074d", 0x7ff8000000000000L));
		x.add(new DoubleTest("0x0.4p-1075d", 0x7ff8000000000000L));
		x.add(new DoubleTest("0x0.2p-1020d", 0x0008000000000000L));
		x.add(new DoubleTest("0x0.2p-1021d", 0x0004000000000000L));
		x.add(new DoubleTest("0x0.2p-1022d", 0x0002000000000000L));
		x.add(new DoubleTest("0x0.2p-1072d", 0x7ff8000000000000L));
		x.add(new DoubleTest("0x0.2p-1073d", 0x7ff8000000000000L));
		x.add(new DoubleTest("0x0.2p-1074d", 0x7ff8000000000000L));
		x.add(new DoubleTest("0x0.1p-1019d", 0x0008000000000000L));
		x.add(new DoubleTest("0x0.1p-1020d", 0x0004000000000000L));
		x.add(new DoubleTest("0x0.1p-1021d", 0x0002000000000000L));
		x.add(new DoubleTest("0x0.1p-1071d", 0x7ff8000000000000L));
		x.add(new DoubleTest("0x0.1p-1072d", 0x7ff8000000000000L));
		x.add(new DoubleTest("0x0.1p-1073d", 0x7ff8000000000000L));
		
		for (Iterator it = x.iterator(); it.hasNext();) {
			DoubleTest t = (DoubleTest) it.next();
			String s = t.input;
			long expectedBits = t.output;
			double libExpected = 0.0d;
			boolean isJ2SE5;
			try {
				// note that next line only works with a 1.5 J2SE
				libExpected = Double.parseDouble(s);
				isJ2SE5 = true;
			} catch(NumberFormatException e) {
				isJ2SE5 = false;
			}
			double dActual = FloatUtil.valueOfHexDoubleLiteral(s.toCharArray());
			long actualBits = Double.doubleToLongBits(dActual);
			if (isJ2SE5) {
				// cross-check bits computed by J2SE 1.5 library
				long libExpectedBits = Double.doubleToRawLongBits(libExpected);
				if (expectedBits != libExpectedBits) {
					if (Double.isNaN(Double.longBitsToDouble(expectedBits)) && libExpected == 0.0d) {
						// this is ok - we return NaN where lib quietly underflows to 0
					} else {
						assertEquals("Test has wrong table value for " + s, libExpectedBits, expectedBits);
					}
				}
			}
			assertEquals("Wrong double value for " + s, expectedBits, actualBits);
		}
	}

