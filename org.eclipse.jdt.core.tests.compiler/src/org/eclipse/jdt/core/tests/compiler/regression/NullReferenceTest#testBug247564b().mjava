// null analysis -- simple case for static final field
// once dereferenced, treat as non null. Consistent with local variables.
public void testBug247564b() {
	this.runNegativeTest(
		new String[] {
			"X.java",
			"public class X {\n" +
			"  static final Object o = null;\n" +
			"  static final Object o1 = new Object();\n" +
			"  void foo() {\n" +
			"    if (o.toString() == \"\") {}\n" +
			"    if (o == null) {}\n" +
			"	 if (o != null) {}\n" +
			"	 if (o1 == null) {}\n" +
			"	 if (o1 != null) {}\n" +
			"  }\n" +
			"}\n"},
			"----------\n" + 
			"1. ERROR in X.java (at line 5)\n" + 
			"	if (o.toString() == \"\") {}\n" + 
			"	    ^\n" + 
			"Null pointer access: The field o can only be null at this location\n" + 
			"----------\n" + 
			"2. ERROR in X.java (at line 6)\n" + 
			"	if (o == null) {}\n" + 
			"	    ^\n" + 
			"Null comparison always yields false: The field o cannot be null at this location\n" + 
			"----------\n" + 
			"3. WARNING in X.java (at line 6)\n" + 
			"	if (o == null) {}\n" + 
			"	               ^^\n" + 
			"Dead code\n" + 
			"----------\n" + 
			"4. ERROR in X.java (at line 7)\n" + 
			"	if (o != null) {}\n" + 
			"	    ^\n" + 
			"Redundant null check: The field o cannot be null at this location\n" + 
			"----------\n" + 
			"5. ERROR in X.java (at line 8)\n" + 
			"	if (o1 == null) {}\n" + 
			"	    ^^\n" + 
			"Null comparison always yields false: The field o1 cannot be null at this location\n" + 
			"----------\n" + 
			"6. WARNING in X.java (at line 8)\n" + 
			"	if (o1 == null) {}\n" + 
			"	                ^^\n" + 
			"Dead code\n" + 
			"----------\n" + 
			"7. ERROR in X.java (at line 9)\n" + 
			"	if (o1 != null) {}\n" + 
			"	    ^^\n" + 
			"Redundant null check: The field o1 cannot be null at this location\n" + 
			"----------\n"
	);
}

