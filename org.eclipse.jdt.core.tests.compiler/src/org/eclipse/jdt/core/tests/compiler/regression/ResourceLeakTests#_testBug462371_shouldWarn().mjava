public void _testBug462371_shouldWarn() {
	Map options = getCompilerOptions();
	options.put(CompilerOptions.OPTION_ReportPotentiallyUnclosedCloseable, CompilerOptions.ERROR);
	options.put(CompilerOptions.OPTION_ReportUnclosedCloseable, CompilerOptions.ERROR);
	runNegativeTest(
		new String[] {
			"X.java",
			"import java.io.*;\n" +
			"interface IFile {\n" +
			"	InputStream getContents();\n" +
			"	boolean exists();\n" +
			"}\n" +
			"public class X {\n" +
			"	public static String getAnnotatedSignature(String typeName, IFile file, String selector, String originalSignature) {\n" + 
			"		if (file.exists()) {\n" + 
			"			try  {\n" + 
			"				BufferedReader reader = new BufferedReader(new InputStreamReader(file.getContents())); \n" + 
			"				reader.readLine();\n" + 
			"				while (true) {\n" + 
			"					String line = reader.readLine(); \n" + 
			"					// selector:\n" + 
			"					if (selector.equals(line)) {\n" + 
			"						// original signature:\n" + 
			"						line = reader.readLine();\n" + 
			"						if (originalSignature.equals(\"\")) {\n" + 
			"							// annotated signature:\n" + 
			"							return reader.readLine();\n" + 
			"						}\n" + 
			"					}\n" + 
			"					if (line == null)\n" + 
			"						break;\n" + 
			"				}\n" + 
			"			} catch (IOException e) {\n" + 
			"				return null;\n" + 
			"			}\n" + 
			"		}\n" + 
			"		return null;\n" + 
			"	}\n" +
			"}\n"
		},
		"----------\n" + 
		"1. ERROR in C.java (at line 14)\n" + 
		"	return;\n" + 
		"	^^^^^^^\n" + 
		"Potential resource leak: \'fileInputStream\' may not be closed at this location\n" + 
		"----------\n",
		null,
		true,
		options);
}

