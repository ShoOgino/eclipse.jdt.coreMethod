// synchronization - concurrent access to a resource with explicit and
// implicit locks
public void test0500_synchronization() {
	this.runConformTest(
		new String[] {
			"X.java",
			"public class X {\n" + 
			"static public void main (String args[]) {\n" + 
			"  new Lock().implicitLock();\n" + 
			"}\n" + 
			"}\n" + 
			"class Lock extends Thread {\n" + 
			"  byte step = 0;\n" + 
			"  void logStep(String start) {\n" + 
			"    System.out.println(start + \" \" + this.step); //$NON-NLS-1$\n" + 
			"  }\n" + 
			"  public void run() {\n" + 
			"    for (int i = 1; i < 3; i++) {\n" + 
			"      logStep(\"explicit lock\"); //$NON-NLS-1$\n" + 
			"      synchronized (this) {\n" + 
			"        this.step++;\n" + 
			"        notify();\n" + 
			"        while(this.step < 2 * i) {\n" + 
			"          try {\n" + 
			"            wait();\n" + 
			"          } catch (InterruptedException e) {\n" + 
			"            System.out.println(\"EXCEPTION\"); //$NON-NLS-1$\n" + 
			"          }\n" + 
			"        }\n" + 
			"      }\n" + 
			"    }\n" + 
			"  }\n" + 
			"  synchronized void implicitLock() {\n" + 
			"      this.start();\n" + 
			"      for (int i = 0; i < 2; i++) {\n" + 
			"        while (this.step < 1 + i * 2) {\n" + 
			"          try {\n" + 
			"            wait();\n" + 
			"          } catch (InterruptedException e) {\n" + 
			"            System.out.println(\"EXCEPTION\"); //$NON-NLS-1$\n" + 
			"          }\n" + 
			"        }\n" + 
			"        logStep(\"implicit lock\"); //$NON-NLS-1$\n" + 
			"        this.step++;\n" + 
			"        notify();\n" + 
			"      }\n" + 
			"      return;\n" + 
			"  }\n" + 
			"}\n"},
		"explicit lock 0\n" + 
		"implicit lock 1\n" + 
		"explicit lock 2\n" + 
		"implicit lock 3"
	);
}

