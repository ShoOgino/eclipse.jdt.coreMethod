/**
 * From JLS 12 16.1.8, Suppose that the switch expression has result expressions e1, â€¦, en, not all of
 * which are boolean-valued.
 * The following rules apply only if the switch block of a switch expression consists of switch labeled rules:
 * V is definitely unassigned after a switch expression iff for every switch labeled rule one of the following is true:
 * 		It is a switch labeled expression e and V is definitely unassigned after e.
 * 		It is a switch labeled block b and for every value break statement expression e contained in b that may exit the
 * 			switch expression, V is definitely unassigned before the value break statement
 * 			and V is definitely unassigned after e.
 * 		It is a switch labeled throw statement.
 */
public void testBug542707_026() {
	if (this.complianceLevel != ClassFileConstants.JDK12)
		return;
	Map<String, String> defaultOptions = super.getCompilerOptions();
	defaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_12);
	defaultOptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_12);
	defaultOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_12);
	defaultOptions.put(CompilerOptions.OPTION_EnablePreviews, CompilerOptions.ENABLED);
	defaultOptions.put(CompilerOptions.OPTION_ReportPreviewFeatures, CompilerOptions.IGNORE);
	String expectedProblemLog =
			"----------\n" + 
			"1. ERROR in X.java (at line 16)\n" + 
			"	return v + t;\n" + 
			"	       ^\n" + 
			"The local variable v may not have been initialized\n" + 
			"----------\n" + 
			"2. ERROR in X.java (at line 20)\n" + 
			"	Zork();\n" + 
			"	^^^^\n" + 
			"The method Zork() is undefined for the type X\n" + 
			"----------\n";
	String[] testFiles = new String[] {
			"X.java", // =================
			"import java.io.IOException;\n" +
			"\n" +
			"public class X {\n" +
			"	public static int foo(int i) throws IOException {\n" +
			"		int v ;\n" +
			"		int t = switch (i) {\n" +
			"		case 0 ->  1;\n" +
			"		case 2 -> {\n" +
			"			if (i > 1) {\n" +
			"				break  2;\n" +
			"			}\n" +
			"			break 3;\n" +
			"		}\n" +
			"		default -> throw new IOException();\n" +
			"		};\n" +
			"		return v + t;\n" +
			"	}\n" +
			"	\n" +
			"	public boolean bar() {\n" +
			"		Zork();\n" +
			"		return true;\n" +
			"	}\n" +
			"	public static void main(String[] args) {\n" +
			"		try {\n" +
			"			System.out.println(foo(3));\n" +
			"		} catch (IOException e) {\n" +
			"			// TODO Auto-generated catch block\n" +
			"			e.printStackTrace();\n" +
			"		}\n" +
			"	}\n" +
			"}\n",
	};
	this.runNegativeTest(
			testFiles,
			expectedProblemLog,
			null,
			true,
			defaultOptions);
}

