// Bug 362332 - Only report potential leak when closeable not created in the local scope
// a wrapper is obtained from another method
public void test063a() throws IOException {
	Map options = getCompilerOptions();
	options.put(CompilerOptions.OPTION_ReportUnclosedCloseable, CompilerOptions.ERROR);
	options.put(CompilerOptions.OPTION_ReportPotentiallyUnclosedCloseable, CompilerOptions.ERROR);
	this.runNegativeTest(
		new String[] {
			"X.java",
			"import java.io.File;\n" +
			"import java.io.FileInputStream;\n" +
			"import java.io.BufferedInputStream;\n" +
			"import java.io.IOException;\n" +
			"public class X {\n" +
			"    void read(File file) throws IOException {\n" +
			"        FileInputStream stream = new FileInputStream(file);\n" +
			"        BufferedInputStream bis = new BufferedInputStream(stream); // never since reassigned\n" +
			"        FileInputStream stream2 = new FileInputStream(file); // unsure since passed to method\n" +
			"        bis = getReader(stream2); // unsure since obtained from method\n" +
			"        bis.available();\n" +
			"    }\n" +
			"    BufferedInputStream getReader(FileInputStream stream) throws IOException {\n" +
			"        return new BufferedInputStream(stream);\n" +
			"    }\n" +
			"}\n"
		},
		"----------\n" +
		"1. ERROR in X.java (at line 7)\n" +
		"	FileInputStream stream = new FileInputStream(file);\n" +
		"	                ^^^^^^\n" +
		"Resource leak: \'stream\' is never closed\n" +
		"----------\n" +
		"2. ERROR in X.java (at line 9)\n" +
		"	FileInputStream stream2 = new FileInputStream(file); // unsure since passed to method\n" +
		"	                ^^^^^^^\n" +
		"Potential resource leak: \'stream2\' may not be closed\n" +
		"----------\n" +
		"3. ERROR in X.java (at line 10)\n" +
		"	bis = getReader(stream2); // unsure since obtained from method\n" +
		"	^^^^^^^^^^^^^^^^^^^^^^^^\n" +
		"Potential resource leak: \'bis\' may not be closed\n" +
		"----------\n",
		null,
		true,
		options);
}

