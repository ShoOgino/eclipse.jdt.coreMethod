	public void testBug512156_3() {
		runConformTest(
			new String[] {
				"TestFor3TypeParameters.java",
				"import java.util.Objects;\n" +
				"import java.util.stream.Stream;\n" +
				"import java.util.stream.StreamSupport;\n" +
				"\n" +
				"/**\n" +
				" * For comprehension for 3 iterables. Adapted from the http://javaslang.io library to help finding JDT performance bottlenecks.\n" +
				" *\n" +
				" */\n" +
				"public class TestFor3TypeParameters {\n" +
				"\n" +
				"    public interface Function3<T1, T2, T3, R> {\n" +
				"        R apply(T1 t1, T2 t2, T3 t3);\n" +
				"    }    \n" +
				"    \n" +
				"    public static class For3<T1, T2, T3> {\n" +
				"\n" +
				"        private final Iterable<T1> ts1;\n" +
				"        private final Iterable<T2> ts2;\n" +
				"        private final Iterable<T3> ts3;\n" +
				"\n" +
				"        private For3(Iterable<T1> ts1, Iterable<T2> ts2, Iterable<T3> ts3) {\n" +
				"            this.ts1 = ts1;\n" +
				"            this.ts2 = ts2;\n" +
				"            this.ts3 = ts3;\n" +
				"        }\n" +
				"\n" +
				"        /**\n" +
				"         * Yields a result for elements of the cross product of the underlying Iterables.\n" +
				"         *\n" +
				"         * @param f\n" +
				"         *            a function that maps an element of the cross product to a result\n" +
				"         * @param <R>\n" +
				"         *            type of the resulting {@code Iterator} elements\n" +
				"         * @return an {@code Iterator} of mapped results\n" +
				"         */\n" +
				"        public <R> Stream<R> yield(\n" +
				"                Function3<? super T1, ? super T2, ? super T3, ? extends R> f) {\n" +
				"            Objects.requireNonNull(f, \"f is null\");\n" +
				"            return this.stream(ts1)\n" +
				"                .flatMap(t1 ->\n" +
				"                    stream(ts2).flatMap(t2 -> \n" +
				"                        stream(ts3).map(t3 ->\n" +
				"                            f.apply(t1, t2, t3)\n" +
				"                        )\n" +
				"                    )\n" +
				"                );\n" +
				"        }\n" +
				"\n" +
				"        private <T> Stream<T> stream(Iterable<T> iterable) {\n" +
				"            return StreamSupport.stream(iterable.spliterator(), false);\n" +
				"        }\n" +
				"\n" +
				"    }\n" +
				"}\n"
			});
	}

