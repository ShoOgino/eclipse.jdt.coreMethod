	protected void checkDisassembledClassFile(String fileName, String className, String expectedOutput, int mode) {
		File classFile = new File(fileName);
		if (!classFile.exists()) {
			assertTrue(".class file doesn't exist", false);
		}
		String result = null;
		try {
			byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(classFile);
			ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
			result = disassembler.disassemble(classFileBytes, "\n", mode);
		} catch (IOException e) {
			e.printStackTrace();
			assertTrue("Should not happen : ", false);
		} catch (ClassFormatException e) {
			e.printStackTrace();
			assertTrue("Should not happen : ", false);
		}
		int index = result.indexOf(expectedOutput);
		if (index == -1 || expectedOutput.length() == 0) {
			System.out.println(Util.displayString(result, 2));
		}
		if (index == -1) {
			assertEquals("Wrong contents", expectedOutput, result);
		}
		
		try {
			FileInputStream stream = new FileInputStream(classFile);
			ClassFileReader.read(stream, className + ".class", true);
			stream.close();
		} catch (org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException e) {
			e.printStackTrace();
			assertTrue("ClassFormatException", false);
		} catch (IOException e) {
			e.printStackTrace();
			assertTrue("IOException", false);
		}
	}

