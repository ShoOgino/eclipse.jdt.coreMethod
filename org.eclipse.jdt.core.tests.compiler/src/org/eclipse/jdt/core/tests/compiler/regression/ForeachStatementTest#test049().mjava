//https://bugs.eclipse.org/bugs/show_bug.cgi?id=180471 - variation
public void test049() throws Exception {
	this.runConformTest(
		new String[] {
			"X.java",
			"public class X {\n" +
			"	void foo3(java.util.List l) {\n" +
			"		for (Object o : l) {\n" +
			"			System.out.println(o);\n" +
			"			break;\n" +
			"		}\n" +
			"	}\n" +
			"}\n", // =================
		},
		"");

	String expectedOutput =
		"  // Method descriptor #15 (Ljava/util/List;)V\n" +
		"  // Stack: 2, Locals: 4\n" +
		"  void foo3(java.util.List l);\n" +
		"     0  aload_1 [l]\n" +
		"     1  invokeinterface java.util.List.iterator() : java.util.Iterator [16] [nargs: 1]\n" +
		"     6  astore_3\n" +
		"     7  aload_3\n" +
		"     8  invokeinterface java.util.Iterator.hasNext() : boolean [22] [nargs: 1]\n" +
		"    13  ifeq 30\n" +
		"    16  aload_3\n" +
		"    17  invokeinterface java.util.Iterator.next() : java.lang.Object [28] [nargs: 1]\n" +
		"    22  astore_2 [o]\n" +
		"    23  getstatic java.lang.System.out : java.io.PrintStream [32]\n" +
		"    26  aload_2 [o]\n" +
		"    27  invokevirtual java.io.PrintStream.println(java.lang.Object) : void [38]\n" +
		"    30  return\n" +
		"      Line numbers:\n" +
		"        [pc: 0, line: 3]\n" +
		"        [pc: 23, line: 4]\n" +
		"        [pc: 30, line: 7]\n" +
		"      Local variable table:\n" +
		"        [pc: 0, pc: 31] local: this index: 0 type: X\n" +
		"        [pc: 0, pc: 31] local: l index: 1 type: java.util.List\n" +
		"        [pc: 23, pc: 30] local: o index: 2 type: java.lang.Object\n";

	File f = new File(OUTPUT_DIR + File.separator + "X.class");
	byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
	ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
	String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
	int index = result.indexOf(expectedOutput);
	if (index == -1 || expectedOutput.length() == 0) {
		System.out.println(Util.displayString(result, 3));
	}
	if (index == -1) {
		assertEquals("Wrong contents", expectedOutput, result);
	}
}

