// Test flows with ReferenceExpression regarding:
// - definite assignment
// - unused local
public void testReferenceExpression1() {
	Map options = getCompilerOptions();
	options.put(JavaCore.COMPILER_PB_UNUSED_LOCAL, JavaCore.ERROR);
	runNegativeTest(
		new String[] {
			 "I.java",
			 "public interface I {\n" +
			 "	public void bar();\n" +
			 "}\n",
			 "X.java",
			 "public class X {\n" +
			 "	public void moo() {}\n" +
			 "	public static void soo() {}\n" +
			 "	void testAssignment() {\n" +
			 "		X x;\n" +
			 "		I i = x::moo; // x is unassigned\n" +
			 "		i.bar();\n" +
			 "		I i2 = X::soo;\n" + // OK
			 "	}\n" +
			 "	void testStatic() {\n" +
			 "		X xs;\n" +
			 "		I is = xs::soo;\n" +
			 "	}\n" +
			 "	void testUse() {\n" +
			 "		X x1 = this, x2 = this; // x2 is not used, only x is\n" +
			 "		I i = x1::moo;\n" +
			 "		i.bar();\n" +
			 "	}\n" +
			 "}\n"
		},
		"----------\n" +
		"1. ERROR in X.java (at line 6)\n" +
		"	I i = x::moo; // x is unassigned\n" +
		"	      ^\n" +
		"The local variable x may not have been initialized\n" +
		"----------\n" +
		"2. ERROR in X.java (at line 12)\n" +
		"	I is = xs::soo;\n" +
		"	       ^^^^^^^\n" +
		"The method soo() from the type X should be accessed in a static way \n" +
		"----------\n" +
		"3. ERROR in X.java (at line 15)\n" +
		"	X x1 = this, x2 = this; // x2 is not used, only x is\n" +
		"	             ^^\n" +
		"The value of the local variable x2 is not used\n" +
		"----------\n",
		null/*libs*/, true/*flush*/, options);
}

