public void testBug371614_comment2() {
	if (this.complianceLevel < ClassFileConstants.JDK1_7) return; // t-w-r used
	Map options = getCompilerOptions();
	options.put(CompilerOptions.OPTION_ReportPotentiallyUnclosedCloseable, CompilerOptions.ERROR);
	options.put(CompilerOptions.OPTION_ReportUnclosedCloseable, CompilerOptions.ERROR);
	runConformTest(
		new String[] {
			"ResourceLeak.java",
			"import java.io.FileInputStream;\n" + 
			"import java.io.IOException;\n" + 
			"import java.io.InputStreamReader;\n" + 
			"import java.io.Reader;\n" + 
			"\n" + 
			"public class ResourceLeak {\n" + 
			"\n" + 
			"  boolean check(final Reader r) throws IOException {\n" + 
			"    final int i = r.read();\n" + 
			"    return (i != -1);\n" + 
			"  }\n" + 
			"\n" + 
			"  public void test1() throws IOException {\n" + 
			"    try (Reader r = new InputStreamReader(System.in);) {\n" + 
			"      while (check(r)) {\n" + 
			"        if (check(r))\n" + 
			"          throw new IOException(\"fail\");\n" + 
			"        if (!check(r))\n" + 
			"          throw new IOException(\"fail\");\n" + 
			"      }\n" + 
			"    }\n" + 
			"  }\n" + 
			"\n" + 
			"  public void test2() throws IOException {\n" + 
			"    try (Reader r = new InputStreamReader(new FileInputStream(\"test.txt\"));) {\n" + 
			"      while (check(r)) {\n" + 
			"        if (check(r))\n" + 
			"          throw new IOException(\"fail\");\n" + 
			"        if (!check(r))\n" + 
			"          throw new IOException(\"fail\");\n" + 
			"      }\n" + 
			"    }\n" + 
			"  }\n" + 
			"}\n"
		},
		options);
}

