// To test Parser.consumeInstanceOfExpressionWithName() with Type Annotations
public void test0118() throws IOException {
	String source =
		"class Outer<E> {\n" +
		"  Inner inner;\n" +
		"  class Inner {\n" +
		"    E e;\n" +
		"    @NonNull E getOtherElement(Object other) {\n" +
		"      if (!(other instanceof @Marker @SingleMember(10) Outer<?>.Inner))\n" +
		"       throw new @Marker IllegalArgumentException(String.valueOf(other));\n" +
		"      Inner that;\n" +
		"	   that = (@Marker Inner) other;\n" +
		"      return that.e;\n" +
		"    }\n" +
		"  }\n" +
		"}";
	String expectedUnitToString =
		"class Outer<E> {\n" +
		"  class Inner {\n" +
		"    E e;\n" +
		"    Inner() {\n" +
		"      super();\n" +
		"    }\n" +
		"    @NonNull E getOtherElement(Object other) {\n" +
		"      if ((! (other instanceof @Marker @SingleMember(10) Outer<?>.Inner)))\n" +
		"          throw new @Marker IllegalArgumentException(String.valueOf(other));\n" +
		"      Inner that;\n" +
		"      that = (@Marker Inner) other;\n" +
		"      return that.e;\n" +
		"    }\n" +
		"  }\n" +
		"  Inner inner;\n" +
		"  Outer() {\n" +
		"    super();\n" +
		"  }\n" +
		"}\n";
	checkParse(CHECK_ALL & ~CHECK_INDEXING_PARSER , source.toCharArray(), null, "test0118", expectedUnitToString );
}

