	public void test002() {
		this.runConformTest(
				new String[] {
					"X.java",
					"public class X {\n" + 
					"	public static void foo(double d, boolean b) {\n" + 
					"		double i;\n" + 
					"		try {\n" + 
					"			i = 0;\n" + 
					"			i++;\n" + 
					"			int j = (int) (i - 1);\n" + 
					"			if (b) {\n" + 
					"				double d1 = 0;\n" + 
					"				if (!b) {\n" + 
					"					d1 = 0;\n" + 
					"				}\n" + 
					"				double d2 = d + d1;\n" + 
					"			}\n" + 
					"			bar(j);\n" + 
					"		} catch(NullPointerException e) {\n" + 
					"			i = 2;\n" + 
					"		} finally {\n" + 
					"			i = 1;\n" + 
					"		}\n" + 
					"		long j = (long) (i + 1);\n" + 
					"		int k = (int) j;\n" + 
					"		k += j;\n" + 
					"	}\n" + 
					"	public static void bar(int i) {}\n" + 
					"	public static void main(String[] args) {\n" + 
					"		foo(0, true);\n" + 
					"		System.out.println(\"SUCCESS\");\n" + 
					"	}\n" + 
					"}",
				},
				"SUCCESS");
				
			ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
			String actualOutput = null;
			try {
				byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +"X.class"));
				actualOutput =
					disassembler.disassemble(
						classFileBytes,
						"\n",
						ClassFileBytesDisassembler.DETAILED); 
			} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
				assertTrue("ClassFormatException", false);
			} catch (IOException e) {
				assertTrue("IOException", false);
			}
			
			String expectedOutput = 
				"  // Method descriptor #15 (DZ)V\n" + 
				"  // Stack: 4, Locals: 11\n" + 
				"  public static void foo(double d, boolean b);\n" + 
				"     0  dconst_0\n" + 
				"     1  dstore_3 [i]\n" + 
				"     2  dload_3 [i]\n" + 
				"     3  dconst_1\n" + 
				"     4  dadd\n" + 
				"     5  dstore_3 [i]\n" + 
				"     6  dload_3 [i]\n" + 
				"     7  dconst_1\n" + 
				"     8  dsub\n" + 
				"     9  d2i\n" + 
				"    10  istore 5 [j]\n" + 
				"    12  iload_2 [b]\n" + 
				"    13  ifeq 32\n" + 
				"    16  dconst_0\n" + 
				"    17  dstore 6 [d1]\n" + 
				"    19  iload_2 [b]\n" + 
				"    20  ifne 26\n" + 
				"    23  dconst_0\n" + 
				"    24  dstore 6 [d1]\n" + 
				"    26  dload_0 [d]\n" + 
				"    27  dload 6 [d1]\n" + 
				"    29  dadd\n" + 
				"    30  dstore 8\n" + 
				"    32  iload 5 [j]\n" + 
				"    34  invokestatic X.bar(int) : void [16]\n" + 
				"    37  goto 56\n" + 
				"    40  astore 5 [e]\n" + 
				"    42  ldc2_w <Double 2.0> [20]\n" + 
				"    45  dstore_3 [i]\n" + 
				"    46  goto 56\n" + 
				"    49  astore 10\n" + 
				"    51  dconst_1\n" + 
				"    52  dstore_3 [i]\n" + 
				"    53  aload 10\n" + 
				"    55  athrow\n" + 
				"    56  dconst_1\n" + 
				"    57  dstore_3 [i]\n" + 
				"    58  dload_3 [i]\n" + 
				"    59  dconst_1\n" + 
				"    60  dadd\n" + 
				"    61  d2l\n" + 
				"    62  lstore 5 [j]\n" + 
				"    64  lload 5 [j]\n" + 
				"    66  l2i\n" + 
				"    67  istore 7 [k]\n" + 
				"    69  iload 7 [k]\n" + 
				"    71  i2l\n" + 
				"    72  lload 5 [j]\n" + 
				"    74  ladd\n" + 
				"    75  l2i\n" + 
				"    76  istore 7 [k]\n" + 
				"    78  return\n" + 
				"      Exception Table:\n" + 
				"        [pc: 0, pc: 40] -> 40 when : java.lang.NullPointerException\n" + 
				"        [pc: 0, pc: 49] -> 49 when : any\n" + 
				"      Line numbers:\n" + 
				"        [pc: 0, line: 5]\n" + 
				"        [pc: 2, line: 6]\n" + 
				"        [pc: 6, line: 7]\n" + 
				"        [pc: 12, line: 8]\n" + 
				"        [pc: 16, line: 9]\n" + 
				"        [pc: 19, line: 10]\n" + 
				"        [pc: 23, line: 11]\n" + 
				"        [pc: 26, line: 13]\n" + 
				"        [pc: 32, line: 15]\n" + 
				"        [pc: 40, line: 16]\n" + 
				"        [pc: 42, line: 17]\n" + 
				"        [pc: 49, line: 18]\n" + 
				"        [pc: 51, line: 19]\n" + 
				"        [pc: 53, line: 20]\n" + 
				"        [pc: 56, line: 19]\n" + 
				"        [pc: 58, line: 21]\n" + 
				"        [pc: 64, line: 22]\n" + 
				"        [pc: 69, line: 23]\n" + 
				"        [pc: 78, line: 24]\n" + 
				"      Local variable table:\n" + 
				"        [pc: 0, pc: 79] local: d index: 0 type: double\n" + 
				"        [pc: 0, pc: 79] local: b index: 2 type: boolean\n" + 
				"        [pc: 2, pc: 40] local: i index: 3 type: double\n" + 
				"        [pc: 46, pc: 49] local: i index: 3 type: double\n" + 
				"        [pc: 53, pc: 56] local: i index: 3 type: double\n" + 
				"        [pc: 58, pc: 79] local: i index: 3 type: double\n" + 
				"        [pc: 12, pc: 40] local: j index: 5 type: int\n" + 
				"        [pc: 19, pc: 32] local: d1 index: 6 type: double\n" + 
				"        [pc: 42, pc: 46] local: e index: 5 type: java.lang.NullPointerException\n" + 
				"        [pc: 64, pc: 79] local: j index: 5 type: long\n" + 
				"        [pc: 69, pc: 79] local: k index: 7 type: int\n" + 
				"      Stack map table: number of frames 5\n" + 
				"        [pc: 26, append: {double, int, double}]\n" + 
				"        [pc: 32, chop 1 local(s)]\n" + 
				"        [pc: 40, full, stack: {java.lang.NullPointerException}, locals: {double, int}]\n" + 
				"        [pc: 49, same_locals_1_stack_item, stack: {java.lang.Throwable}]\n" + 
				"        [pc: 56, append: {double}]\n";
			
			int index = actualOutput.indexOf(expectedOutput);
			if (index == -1 || expectedOutput.length() == 0) {
				System.out.println(Util.displayString(actualOutput, 2));
			}
			if (index == -1) {
				assertEquals("Wrong contents", expectedOutput, actualOutput);
			}
	}

