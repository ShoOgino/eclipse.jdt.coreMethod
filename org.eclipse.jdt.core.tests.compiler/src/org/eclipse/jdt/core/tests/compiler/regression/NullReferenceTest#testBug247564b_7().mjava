// null analysis -- case for static final field initialized inside static block with different values
// check if the resetting works properly i.e. null status for constant fields should not be 
// reset on method calls. Also, null info of constant field from static block is available in methods
public void testBug247564b_7() {
	this.runNegativeTest(
		new String[] {
			"X.java",
			"public class X {\n" +
			"  static final Object o;\n" +
			"  static final Object o1 = null;\n" +
			"  static final Object o2 = new Object();\n" +
			"  static {\n" +
			"		if (o1.hashCode() == 2){\n" + // report NPE. But dereferenced here, so later it should be treated as non null
			"			o = new Object();\n" +
			"		} else {\n" +
			"			o = null;\n" +
			"		}\n" +
			"  }\n" +
			"  void foo1() {\n" +
			"	 final Object local = null;\n" +
			"	 if (local == null) {\n" +
			"		local.toString();\n" +
			"	 }\n" +
			"	 local.toString();\n" +
			"	 if (o1 == null) {\n" +	// can't be null, was dereferenced in static initializer
			"		o1.toString();\n" + // dead
			"	 }\n" +
			"    local.toString();\n" + // try to diffuse status for o1 / o2
			"	 o1.toString();\n" +	// safe
			"	 if (o2 == null) {\n" + // report always false null check
			"		o2.toString();\n" + // dead code
			"	 }\n" +
			"	 o2.toString();" +
			"  }\n" +
			"}\n"},
			"----------\n" + 
			"1. ERROR in X.java (at line 6)\n" + 
			"	if (o1.hashCode() == 2){\n" + 
			"	    ^^\n" + 
			"Null pointer access: The field o1 can only be null at this location\n" + 
			"----------\n" + 
			"2. ERROR in X.java (at line 14)\n" + 
			"	if (local == null) {\n" + 
			"	    ^^^^^\n" + 
			"Redundant null check: The variable local can only be null at this location\n" + 
			"----------\n" + 
			"3. ERROR in X.java (at line 15)\n" + 
			"	local.toString();\n" + 
			"	^^^^^\n" + 
			"Null pointer access: The variable local can only be null at this location\n" + 
			"----------\n" + 
			"4. ERROR in X.java (at line 18)\n" + 
			"	if (o1 == null) {\n" + 
			"	    ^^\n" + 
			"Null comparison always yields false: The field o1 cannot be null at this location\n" + 
			"----------\n" + 
			"5. WARNING in X.java (at line 18)\n" + 
			"	if (o1 == null) {\n" + 
			"		o1.toString();\n" + 
			"	 }\n" + 
			"	                ^^^^^^^^^^^^^^^^^^^^^^\n" + 
			"Dead code\n" + 
			"----------\n" + 
			"6. ERROR in X.java (at line 23)\n" + 
			"	if (o2 == null) {\n" + 
			"	    ^^\n" + 
			"Null comparison always yields false: The field o2 cannot be null at this location\n" + 
			"----------\n" + 
			"7. WARNING in X.java (at line 23)\n" + 
			"	if (o2 == null) {\n" + 
			"		o2.toString();\n" + 
			"	 }\n" + 
			"	                ^^^^^^^^^^^^^^^^^^^^^^\n" + 
			"Dead code\n" + 
			"----------\n"
	);
}

