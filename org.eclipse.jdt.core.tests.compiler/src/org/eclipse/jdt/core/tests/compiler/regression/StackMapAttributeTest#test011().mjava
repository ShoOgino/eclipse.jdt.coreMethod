	public void test011() {
		this.runConformTest(
				new String[] {
					"X.java",
					"public class X {\n" + 
					"	Object o;\n" + 
					"\n" + 
					"	public static void main(String[] args) {\n" + 
					"		X x;\n" + 
					"		for (int i = 0; i < 10; i++) {\n" + 
					"			if (i < 90) {\n" + 
					"				x = new X();\n" + 
					"				if (i > 4) {\n" + 
					"					x.o = new Object();\n" + 
					"				} else {\n" + 
					"					x.o = \"0\";\n" + 
					"				}\n" + 
					"				switch (i) {\n" + 
					"					case 0:\n" + 
					"						if (x.o instanceof String) {\n" + 
					"							System.out.print(\"1\");\n" + 
					"						}\n" + 
					"						break;\n" + 
					"					default: {\n" + 
					"						Object diff = x.o;\n" + 
					"						if (diff != null) {\n" + 
					"							System.out.print(\"2\");\n" + 
					"						}\n" + 
					"					}\n" + 
					"				}\n" + 
					"			}\n" + 
					"		}\n" + 
					"	}\n" + 
					"}",
				},
				"1222222222");
				
			ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
			String actualOutput = null;
			try {
				byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +"X.class"));
				actualOutput =
					disassembler.disassemble(
						classFileBytes,
						"\n",
						ClassFileBytesDisassembler.DETAILED); 
			} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
				assertTrue("ClassFormatException", false);
			} catch (IOException e) {
				assertTrue("IOException", false);
			}
			
			String expectedOutput = 
				"  // Method descriptor #17 ([Ljava/lang/String;)V\n" + 
				"  // Stack: 3, Locals: 4\n" + 
				"  public static void main(java.lang.String[] args);\n" + 
				"      0  iconst_0\n" + 
				"      1  istore_2 [i]\n" + 
				"      2  goto 105\n" + 
				"      5  iload_2 [i]\n" + 
				"      6  bipush 90\n" + 
				"      8  if_icmpge 102\n" + 
				"     11  new X [1]\n" + 
				"     14  dup\n" + 
				"     15  invokespecial X() [18]\n" + 
				"     18  astore_1 [x]\n" + 
				"     19  iload_2 [i]\n" + 
				"     20  iconst_4\n" + 
				"     21  if_icmple 38\n" + 
				"     24  aload_1 [x]\n" + 
				"     25  new java.lang.Object [3]\n" + 
				"     28  dup\n" + 
				"     29  invokespecial java.lang.Object() [10]\n" + 
				"     32  putfield X.o : java.lang.Object [19]\n" + 
				"     35  goto 44\n" + 
				"     38  aload_1 [x]\n" + 
				"     39  ldc <String \"0\"> [21]\n" + 
				"     41  putfield X.o : java.lang.Object [19]\n" + 
				"     44  iload_2 [i]\n" + 
				"     45  tableswitch default: 85\n" + 
				"          case 0: 64\n" + 
				"     64  aload_1 [x]\n" + 
				"     65  getfield X.o : java.lang.Object [19]\n" + 
				"     68  instanceof java.lang.String [23]\n" + 
				"     71  ifeq 102\n" + 
				"     74  getstatic java.lang.System.out : java.io.PrintStream [25]\n" + 
				"     77  ldc <String \"1\"> [31]\n" + 
				"     79  invokevirtual java.io.PrintStream.print(java.lang.String) : void [33]\n" + 
				"     82  goto 102\n" + 
				"     85  aload_1 [x]\n" + 
				"     86  getfield X.o : java.lang.Object [19]\n" + 
				"     89  astore_3 [diff]\n" + 
				"     90  aload_3 [diff]\n" + 
				"     91  ifnull 102\n" + 
				"     94  getstatic java.lang.System.out : java.io.PrintStream [25]\n" + 
				"     97  ldc <String \"2\"> [39]\n" + 
				"     99  invokevirtual java.io.PrintStream.print(java.lang.String) : void [33]\n" + 
				"    102  iinc 2 1 [i]\n" + 
				"    105  iload_2 [i]\n" + 
				"    106  bipush 10\n" + 
				"    108  if_icmplt 5\n" + 
				"    111  return\n" + 
				"      Line numbers:\n" + 
				"        [pc: 0, line: 6]\n" + 
				"        [pc: 5, line: 7]\n" + 
				"        [pc: 11, line: 8]\n" + 
				"        [pc: 19, line: 9]\n" + 
				"        [pc: 24, line: 10]\n" + 
				"        [pc: 38, line: 12]\n" + 
				"        [pc: 44, line: 14]\n" + 
				"        [pc: 64, line: 16]\n" + 
				"        [pc: 74, line: 17]\n" + 
				"        [pc: 82, line: 19]\n" + 
				"        [pc: 85, line: 21]\n" + 
				"        [pc: 90, line: 22]\n" + 
				"        [pc: 94, line: 23]\n" + 
				"        [pc: 102, line: 6]\n" + 
				"        [pc: 111, line: 29]\n" + 
				"      Local variable table:\n" + 
				"        [pc: 0, pc: 112] local: args index: 0 type: java.lang.String[]\n" + 
				"        [pc: 19, pc: 102] local: x index: 1 type: X\n" + 
				"        [pc: 2, pc: 111] local: i index: 2 type: int\n" + 
				"        [pc: 90, pc: 102] local: diff index: 3 type: java.lang.Object\n" + 
				"      Stack map table: number of frames 8\n" + 
				"        [pc: 5, full, stack: {}, locals: {java.lang.String[], _, int}]\n" + 
				"        [pc: 38, full, stack: {}, locals: {java.lang.String[], X, int}]\n" + 
				"        [pc: 44, same]\n" + 
				"        [pc: 64, same]\n" + 
				"        [pc: 82, same]\n" + 
				"        [pc: 85, same]\n" + 
				"        [pc: 102, full, stack: {}, locals: {java.lang.String[], _, int}]\n" + 
				"        [pc: 105, same]\n";
			
			int index = actualOutput.indexOf(expectedOutput);
			if (index == -1 || expectedOutput.length() == 0) {
				System.out.println(Util.displayString(actualOutput, 2));
			}
			if (index == -1) {
				assertEquals("Wrong contents", expectedOutput, actualOutput);
			}
	}

