/**
 * Search the user hard-drive for a Java class library.
 * Returns null if none could be found.
 *
 * Example of use: [org.eclipse.jdt.core.tests.util.Util.getJavaClassLib()]
*/
public static String[] getJavaClassLibs() {
    String jreDir = getJREDirectory();
    final String osName = System.getProperty("os.name");
    if (jreDir == null) {
        return new String[] {};
    }
    if (osName.startsWith("Mac")) {
        return new String[] {
            toNativePath(jreDir + "/../Classes/classes.jar")
        };
    }
    final String vmName = System.getProperty("java.vm.name");
    if ("J9".equals(vmName)) {
        return new String[] {
            toNativePath(jreDir + "/lib/jclMax/classes.zip")
        };
    }
	if ("DRLVM".equals(vmName)) {
		FilenameFilter jarFilter = new FilenameFilter() {
			public boolean accept(File dir, String name) {
				return name.endsWith(".jar") & !name.endsWith("-src.jar");
			}
		};
		String[] jars = new File(jreDir + "/lib/boot/").list(jarFilter);
		for (int i = 0; i < jars.length; i++) {
			jars[i] = toNativePath(jreDir + "/lib/boot/" + jars[i]);
		}
		return jars;
	}
    ArrayList paths = new ArrayList();
    String[] jarsNames = new String[] {
    		"/lib/vm.jar",
    		"/lib/rt.jar",
    		"/lib/core.jar",
    		"/lib/security.jar",
    		"/lib/xml.jar",
    		"/lib/graphics.jar"
    };
    addJarEntries(jreDir, jarsNames, paths);
    String[] result = new String[paths.size()];
    paths.toArray(result);
    return result;
}

