	protected void setUp() {
		if (this.context == null) { // non null if called from subclass
			try (ServerSocket server = new ServerSocket(0)) {
				// Launch VM in evaluation mode
				int evalPort = server.getLocalPort();
				try {
					LocalVMLauncher launcher = LocalVMLauncher.getLauncher();
					launcher.setVMPath(JRE_PATH);
					launcher.setEvalPort(evalPort);
					launcher.setEvalTargetPath(EVAL_DIRECTORY);
					this.launchedVM = launcher.launch();
				} catch (TargetException e) {
					e.printStackTrace();
					throw new Error(e.getMessage(), e);
				}

				// Thread that read the stout of the VM so that the VM doesn't block
				try {
					startReader("VM's stdout reader", this.launchedVM.getInputStream(), System.out);
				} catch (TargetException e) {
					e.printStackTrace();
				}

				// Thread that read the sterr of the VM so that the VM doesn't block
				try {
					startReader("VM's sterr reader", this.launchedVM.getErrorStream(), System.err);
				} catch (TargetException e) {
					e.printStackTrace();
				}

				// Create context
				this.context = new EvaluationContext();

				// Create target
				this.target = new TargetInterface();
				// allow 30s max to connect (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=188127)
				// Increased to 60 s for https://bugs.eclipse.org/bugs/show_bug.cgi?id=547417
				this.target.connect(server, 60000); 
				
				assertTrue("Failed to connect VM server", this.target.isConnected());

				// Create name environment
				this.env = new FileSystem(Util.getJavaClassLibs(), new String[0], null);
			} catch (IOException e1) {
				e1.printStackTrace();
				throw new Error("Failed to open socket", e1);
			}
		}
		super.setUp();
	}

