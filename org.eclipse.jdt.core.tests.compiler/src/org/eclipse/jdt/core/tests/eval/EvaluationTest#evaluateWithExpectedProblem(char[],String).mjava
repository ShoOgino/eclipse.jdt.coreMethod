/**
 * Evaluates the given code snippet and makes sure the evaluation result has at least the given problem.
 */
protected void evaluateWithExpectedProblem(char[] codeSnippet, String problemsString) {
	Requestor requestor = new Requestor();
	try {
		context.evaluate(codeSnippet, getEnv(), getOptions(), requestor, getProblemFactory());
	} catch (InstallException e) {
		assertTrue("Target exception " + e.getMessage(), false);
	}
	assertTrue("Got one result", requestor.resultIndex == 0);
	EvaluationResult result = requestor.results[0];
	assertTrue("Has value", !result.hasValue());
	assertTrue("Has problem", result.hasProblems());
	assertEquals("Evaluation type", EvaluationResult.T_CODE_SNIPPET, result.getEvaluationType());
	assertEquals("Evaluation id", codeSnippet, result.getEvaluationID());
	StringBuffer problemBuffer = new StringBuffer(20);
	IProblem[] problems = result.getProblems();
	for (int i = 0; i < problems.length; i++) {
		problemBuffer.append(problems[i].getMessage()).append('\n');
	}
	assertEquals("Unexpected problems", problemsString, problemBuffer.toString());
}

