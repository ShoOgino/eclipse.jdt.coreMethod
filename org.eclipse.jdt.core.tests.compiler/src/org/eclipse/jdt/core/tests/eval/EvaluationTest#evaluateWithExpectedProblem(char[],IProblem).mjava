	/**
	 * Evaluates the given code snippet and makes sure the evaluation result has at least the given problem.
	 */
	protected void evaluateWithExpectedProblem(char[] codeSnippet, IProblem expected) {
		Requestor requestor = new Requestor();
		try {
			context.evaluate(codeSnippet, getEnv(), getCompilerOptions(), requestor, getProblemFactory());
		} catch (InstallException e) {
			assertTrue("Target exception " + e.getMessage(), false);
		}
		for (int i = 0; i <= requestor.resultIndex; i++) {
			EvaluationResult result = requestor.results[i];
			assertTrue("Has value", !result.hasValue());
			assertTrue("Has problem", result.hasProblems());
			assertEquals("Evaluation type", EvaluationResult.T_CODE_SNIPPET, result.getEvaluationType());
			assertEquals("Evaluation id", codeSnippet, result.getEvaluationID());
			IProblem[] problems = result.getProblems();
			if (equals(expected, problems[0])) {
				return;
			}
		}
		assertTrue("Expected problem not found", false);
	}

