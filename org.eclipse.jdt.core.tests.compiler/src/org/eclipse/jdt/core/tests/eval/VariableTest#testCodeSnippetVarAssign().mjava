/**
 * Tests the assignment of a global variable in a code snippet.
 */
public void testCodeSnippetVarAssign() {
	try {
		// Creates the variables
		GlobalVariable var1 = this.context.newVariable("int".toCharArray(), "var1".toCharArray(), null);
		GlobalVariable var2 = this.context.newVariable("boolean".toCharArray(), "var2".toCharArray(), null);
		GlobalVariable var3 = this.context.newVariable("char".toCharArray(), "var3".toCharArray(), null);
		GlobalVariable var4 = this.context.newVariable("float".toCharArray(), "var4".toCharArray(), null);
		GlobalVariable var5 = this.context.newVariable("double".toCharArray(), "var5".toCharArray(), null);
		GlobalVariable var6 = this.context.newVariable("short".toCharArray(), "var6".toCharArray(), null);
		GlobalVariable var7 = this.context.newVariable("long".toCharArray(), "var7".toCharArray(), null);
		GlobalVariable var8 = this.context.newVariable("String".toCharArray(), "var8".toCharArray(), null);
		GlobalVariable var9 = this.context.newVariable("Object".toCharArray(), "var9".toCharArray(), null);
		GlobalVariable var10 = this.context.newVariable("Object".toCharArray(), "var10".toCharArray(), null);

		// Install them
		installVariables(10);

		// Assign each of the variable and get its value
		evaluateWithExpectedDisplayString("var1 = 1;".toCharArray(), "1".toCharArray());
		evaluateWithExpectedValue(var1, "1".toCharArray(), "int".toCharArray());

		evaluateWithExpectedDisplayString("var2 = true;".toCharArray(), "true".toCharArray());
		evaluateWithExpectedValue(var2, "true".toCharArray(), "boolean".toCharArray());

		evaluateWithExpectedDisplayString("var3 = 'c';".toCharArray(), "c".toCharArray());
		evaluateWithExpectedValue(var3, "c".toCharArray(), "char".toCharArray());

		evaluateWithExpectedDisplayString("var4 = (float)1.0;".toCharArray(), "1.0".toCharArray());
		evaluateWithExpectedValue(var4, "1.0".toCharArray(), "float".toCharArray());

		evaluateWithExpectedDisplayString("var5 = 1.0;".toCharArray(), "1.0".toCharArray());
		evaluateWithExpectedValue(var5, "1.0".toCharArray(), "double".toCharArray());

		evaluateWithExpectedDisplayString("var6 = (short)1;".toCharArray(), "1".toCharArray());
		evaluateWithExpectedValue(var6, "1".toCharArray(), "short".toCharArray());

		evaluateWithExpectedDisplayString("var7 = (long)1;".toCharArray(), "1".toCharArray());
		evaluateWithExpectedValue(var7, "1".toCharArray(), "long".toCharArray());

		evaluateWithExpectedDisplayString("var8 = \"hello\";".toCharArray(), "hello".toCharArray());
		evaluateWithExpectedValue(var8, "hello".toCharArray(), "java.lang.String".toCharArray());

		evaluateWithExpectedDisplayString(buildCharArray(new String[] {
			"var9 = new Object() {",
			"	public String toString() {",
			"		return \"an object\";",
			"	}",
			"};"}), "an object".toCharArray());
		evaluateWithExpectedValue(var9, "an object".toCharArray(), "java.lang.Object".toCharArray());

		evaluateWithExpectedDisplayString("var10 = null;".toCharArray(), "null".toCharArray());
		evaluateWithExpectedValue(var10, "null".toCharArray(), "java.lang.Object".toCharArray());
	} finally {
		// Clean up
		GlobalVariable[] vars = this.context.allVariables();
		for (int i = 0; i < vars.length; i++) {
			this.context.deleteVariable(vars[i]);
		}
	}
}

