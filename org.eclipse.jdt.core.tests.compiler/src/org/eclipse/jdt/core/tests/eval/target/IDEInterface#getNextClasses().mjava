/**
 * Returns the class definitions of the classes that compose the next code snippet to evaluate.
 */
protected byte[][] getNextClasses() {
	if (this.socket == null) {
		return new byte[0][];
	}
	if (TIMING) {
		this.startTime = System.currentTimeMillis();
	}
	try {
		DataInputStream in = new DataInputStream(this.socket.getInputStream());
		int numberOfClasses = in.readInt();
		byte[][] result = new byte[numberOfClasses][];
		for (int i = 0; i < numberOfClasses; i++) {
			int lengthOfClassFile = in.readInt();
			byte[] classFile = new byte[lengthOfClassFile];
			int read = 0;
			while (read < lengthOfClassFile && read != -1) {
				read += in.read(classFile, read, lengthOfClassFile - read);
			}
			result[i] = classFile;
		}
		return result;
	} catch (IOException e) {
		// The socket has likely been closed on the other end, close this end too.
		disconnect();
		return new byte[0][];
	}
}

