	/**
	 * Evaluates the given code snippet and makes sure an evaluation result has at least the given warning, and that another evaluation result has the given display string.
	 */
	protected void evaluateWithExpectedWarningAndDisplayString(final char[] codeSnippet, final IProblem[] expected, final char[] displayString) {
		class ResultRequestor extends Requestor {
			ArrayList collectedProblems = new ArrayList();
			boolean gotDisplayString = false;
			public void acceptResult(EvaluationResult result) {
				assertEquals("Evaluation type", EvaluationResult.T_CODE_SNIPPET, result.getEvaluationType());
				//assertEquals("Evaluation id", codeSnippet, result.getEvaluationID());
				if (result.hasValue()) {
					if (CharOperation.equals(result.getValueDisplayString(), displayString)) {
						gotDisplayString = true;
					}
				} else {
					assertTrue("Has problem", result.hasProblems());
					IProblem[] problems = result.getProblems();
					for (int i = 0; i < problems.length; i++) {
						collectedProblems.add(problems[i]);
					}
				}
			}
		}
		ResultRequestor requestor = new ResultRequestor();
		try {
			context.evaluate(codeSnippet, getEnv(), getCompilerOptions(), requestor, getProblemFactory());
		} catch (InstallException e) {
			assertTrue("Target exception " + e.getMessage(), false);
		}
		if (expected.length == requestor.collectedProblems.size()) {
			for (int i = 0; i < expected.length; i++) {
				assertTrue("Problem mismatch" + requestor.collectedProblems.get(i), this.equals(expected[i], (IProblem)requestor.collectedProblems.get(i)));
			}
		} else {
			assertTrue("Wrong problem count", false);
		}
		assertTrue("Expected display string", requestor.gotDisplayString);
	}

