/**
 * Evaluates the given code snippet and makes sure it returns a result with the given display string and type name.
 */
protected void evaluateWithExpectedValue(char[] codeSnippet, char[] displayString, char[] typeName) {
	Requestor requestor = new Requestor();
	try {
		context.evaluate(codeSnippet, getEnv(), getOptions(), requestor, getProblemFactory());
	} catch (InstallException e) {
		assertTrue("Target exception " + e.getMessage(), false);
	}
	assertTrue("Got one result", requestor.resultIndex == 0);
	EvaluationResult result = requestor.results[0];
	if (displayString == null) {
		assertTrue("Has value", !result.hasValue());
	} else {
		assertTrue("Has value", result.hasValue());
		assertEquals("Evaluation type", EvaluationResult.T_CODE_SNIPPET, result.getEvaluationType());
		//assertEquals("Evaluation id", codeSnippet, result.getEvaluationID());
		assertEquals("Value display string", displayString, result.getValueDisplayString());
		assertEquals("Value type name", typeName, result.getValueTypeName());
	}
}

