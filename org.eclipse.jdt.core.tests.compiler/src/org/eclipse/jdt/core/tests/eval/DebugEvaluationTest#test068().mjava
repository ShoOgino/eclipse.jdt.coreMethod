public void test068() {
	if (this.complianceLevel < ClassFileConstants.JDK1_5) return;
	try {
		String sourceSuperA68 =
			"public class SuperA68 {\n"
				+ "\tprivate int i;\n"
				+ "\tpublic SuperA68() {\n"
				+ "\t}\n"
				+ "\tpublic <U> int foo(int i) {;\n"
				+ "\t\treturn i;\n"    
				+ "\t}\n"
				+ "}";
		compileAndDeploy15(sourceSuperA68, "SuperA68");
		String sourceA68 =
			"public class A68 extends SuperA68 {\n"
				+ "\tprivate int i;\n"
				+ "\tpublic A68() {\n"
				+ "\t}\n"
				+ "\tpublic <U> int foo(int i) {\n"
				+ "\t\treturn i;\n"    
				+ "\t}\n"               
				+ "\tpublic void bar() {\n"
				+ "\t}\n"
				+ "}";
		compileAndDeploy15(sourceA68, "A68");

		String userCode = "new A68().bar();";
		JDIStackFrame stackFrame =
			new JDIStackFrame(this.jdiVM, this, userCode, "A68", "bar", -1);

		DebugRequestor requestor = new DebugRequestor();
		char[] snippet = "return super.<Object>foo(3);".toCharArray();
		try {
			this.context.evaluate(
				snippet,
				stackFrame.localVariableTypeNames(),
				stackFrame.localVariableNames(),
				stackFrame.localVariableModifiers(),
				stackFrame.declaringTypeName(),
				stackFrame.isStatic(),
				stackFrame.isConstructorCall(),
				getEnv(),
				getCompilerOptions(),
				requestor,
				getProblemFactory());
		} catch (InstallException e) {
			assertTrue("No targetException " + e.getMessage(), false);
		}
		assertTrue(
			"Should get one result but got " + (requestor.resultIndex + 1),
			requestor.resultIndex == 0);
		EvaluationResult result = requestor.results[0];
		assertTrue("Code snippet should have problems", result.hasProblems());
		assertEquals("Wrong size", 1, result.getProblems().length);
		assertEquals("Wrong pb", 422, result.getProblems()[0].getID() & IProblem.IgnoreCategoriesMask);
	} finally {
		removeTempClass("A68");
		removeTempClass("SuperA68");
	}
}

