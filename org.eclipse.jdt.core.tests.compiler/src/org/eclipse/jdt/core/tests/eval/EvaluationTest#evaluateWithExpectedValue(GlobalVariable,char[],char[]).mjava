	/**
	 * Evaluates the given variable and makes sure it returns a result with the given display string and type name.
	 */
	protected void evaluateWithExpectedValue(GlobalVariable var, char[] displayString, char[] typeName) {
		Requestor requestor = new Requestor();
		try {
			context.evaluateVariable(var, getEnv(), getCompilerOptions(), requestor, getProblemFactory());
		} catch (InstallException e) {
			assertTrue("Target exception " + e.getMessage(), false);
		}
		if (requestor.resultIndex != 0) {
			for (int i = 0; i < requestor.resultIndex; i++) {
				System.out.println("unexpected result[" + i + "]: " + requestor.results[i]);
			}
		}
		assertTrue("Unexpected result", requestor.resultIndex == 0);
		EvaluationResult result = requestor.results[0];
		if (displayString == null) {
			assertTrue("Has value", !result.hasValue());
		} else {
			assertTrue("Has value", result.hasValue());
			assertEquals("Value display string", displayString, result.getValueDisplayString());
			assertEquals("Value type name", typeName, result.getValueTypeName());
		}
	}

