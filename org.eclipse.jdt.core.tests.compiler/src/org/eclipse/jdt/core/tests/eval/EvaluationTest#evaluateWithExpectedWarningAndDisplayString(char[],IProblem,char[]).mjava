/**
 * Evaluates the given code snippet and makes sure an evaluation result has at least the given warning,
 * and that another evaluation result has the given display string.
 */
protected void evaluateWithExpectedWarningAndDisplayString(final char[] codeSnippet, final IProblem expected, final char[] displayString) {
	class ResultRequestor extends Requestor {
		boolean gotProblem = false;
		boolean gotDisplayString = false;
		public void acceptResult(EvaluationResult result) {
			assertEquals("Evaluation type", EvaluationResult.T_CODE_SNIPPET, result.getEvaluationType());
			//assertEquals("Evaluation id", codeSnippet, result.getEvaluationID());
			if (result.hasValue()) {
				if (CharOperation.equals(result.getValueDisplayString(), displayString)) {
					gotDisplayString = true;
				}
			} else {
				assertTrue("Has problem", result.hasProblems());
				IProblem[] problems = result.getProblems();
				for (int i = 0; i < problems.length; i++) {
					if (EvaluationTest.this.equals(expected, problems[i])) {
						gotProblem = true;
					}
				}
			}
		}
	};
	ResultRequestor requestor = new ResultRequestor();
	try {
		context.evaluate(codeSnippet, getEnv(), getOptions(), requestor, getProblemFactory());
	} catch (InstallException e) {
		assertTrue("Target exception " + e.getMessage(), false);
	}
	assertTrue("Expected warning", requestor.gotProblem);
	assertTrue("Expected display string", requestor.gotDisplayString);
}

