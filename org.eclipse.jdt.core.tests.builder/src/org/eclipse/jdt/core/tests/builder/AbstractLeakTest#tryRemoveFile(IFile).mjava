	private void tryRemoveFile(IFile file) {
		// Note: this is a lame attempt to check for leaked file descriptor
		// This works on Windows only, because windows does not allow to delete
		// files opened for reading.
		// On Linux we need something like lsof -p <my_process_id> | grep file name
		try {
			file.delete(true, null);
		} catch (CoreException e) {
			try {
				// second attempt to avoid delays on teardown
				Files.deleteIfExists(file.getLocation().toFile().toPath());
			} catch (Exception e2) {
				file.getLocation().toFile().delete();
				// ignore
			}
			throw new IllegalStateException("File leaked during build: " + file, e);
		}
		assertFalse("File should be deleted: " + file, file.exists());
	}

