	/** Execute the given class. Expecting output and error must be specified.
	 */
	protected void executeClass(IPath projectPath, String className, String expectingOutput, String expectedError){
		TestVerifier verifier = new TestVerifier(false);
		Vector classpath = new Vector(5);
			
		IPath workspacePath = env.getWorkspaceRootPath();
			
		classpath.addElement(workspacePath.append(env.getOutputLocation(projectPath)).toOSString());
		IPath[] cp = env.getClasspath(projectPath);
		for (int i = 0; i < cp.length; i++) {
			IPath c = cp[i];
			String ext = c.getFileExtension();
			if(ext != null && (ext.equals("zip") || ext.equals("jar"))){
				if(c.getDevice() == null) {
					classpath.addElement(workspacePath.append(c).toOSString());
				} else {
					classpath.addElement(c.toOSString());
				}
			}
		}
		
		verifier.execute(className, (String[])classpath.toArray(new String[0]));
		
		if(DEBUG){
			System.out.println("ERRORS\n");
			System.out.println(Util.displayString(verifier.getExecutionError()));
			
			System.out.println("OUTPUT\n");
			System.out.println(Util.displayString(verifier.getExecutionOutput()));
		}
		String actualError = verifier.getExecutionError();
		if (!expectedError.equals(actualError)){
			System.out.println("ERRORS\n");
			System.out.println(Util.displayString(actualError));
		}
		assertTrue("unexpected error", actualError.indexOf(expectedError) != -1);

		String actualOutput = verifier.getExecutionOutput();
		if (!expectingOutput.equals(actualOutput)){
			System.out.println("OUTPUT\n");
			System.out.println(Util.displayString(actualOutput));
		}
		assertTrue("unexpected output", actualOutput.indexOf(expectingOutput) != -1);
		
	}

