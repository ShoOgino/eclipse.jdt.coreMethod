// two different source folders ignore only from one
public void test0109() throws JavaModelException {
	Hashtable options = JavaCore.getOptions();
	Hashtable newOptions = JavaCore.getOptions();
	newOptions.put(JavaCore.COMPILER_PB_UNUSED_LOCAL, JavaCore.ERROR);

	JavaCore.setOptions(newOptions);

	IPath projectPath = env.addProject("P");
	env.addExternalJars(projectPath, Util.getJavaClassLibs());

	// remove old package fragment root so that names don't collide
	env.removePackageFragmentRoot(projectPath, "");

	env.setOutputFolder(projectPath, "bin");
	IPath src = new Path("/P/src");
	IPath src2 = new Path("/P/src2");
	env.addEntry(projectPath, JavaCore.newSourceEntry(src, null, null,
			null, new IClasspathAttribute[] { ATTR_IGNORE_OPTIONAL_PROBLEMS_TRUE }));
	env.addEntry(projectPath, JavaCore.newSourceEntry(src2));

	env.addClass(src, "p", "X",
			"package p;\n" +
			"public class X {\n" +
			"	public void foo() {\n" +
			"		int i;\n" +
			"	}\n" +
			"}");

	IPath classY = env.addClass(src2, "q", "Y",
			"package q;\n" +
			"public class Y {\n" +
			"	public void foo() {\n" +
			"		int i;\n" +
			"	}\n" +
			"}");

	fullBuild(projectPath);
	expectingNoProblemsFor(src);
	expectingOnlySpecificProblemFor(classY, new Problem("q", "The value of the local variable i is not used", classY, 55, 56, CategorizedProblem.CAT_UNNECESSARY_CODE, IMarker.SEVERITY_ERROR));

	JavaCore.setOptions(options);
}

