	/**
	 * Test for Bug 530366: Changing class name in source leads to missing inner class compilation artifact
	 *
	 * Given classes:
	 *
	 * <ul>
	 * <li>MyClass1, MyClass1$InnerClass, both defined in MyClass1.java</li>
	 * <li>MyClass2, MyClass2$InnerClass, both defined in MyClass2.java</li>
	 * </ul>
	 *
	 * Changing the name of the class in MyClass2.java inside a Java editor, from MyClass2 to MyClass1,
	 * results in overwriting the compiled .class file for MyClass1$InnerClass.
	 *
	 * Changing the name of the class in MyClass2.java inside a Java editor, from MyClass1 back to MyClass2,
	 * results in a missing .class file for MyClass1$InnerClass.
	 */
	public void testBug530366() throws Exception {
		defineNestingClass("MyClass1");
		fullBuild();
		expectingNoProblems();

		IProject testProject = ResourcesPlugin.getWorkspace().getRoot().getProject("TestProjectBug530366");
		IFile myClass1InnerClass = testProject.getFile("bin/somepackage/MyClass1$InnerClass.class");

		URI compilationArtifactUri = myClass1InnerClass.getLocationURI();
		byte[] expectedContents = Files.readAllBytes(Paths.get(compilationArtifactUri));

		String sourceName = "MyClass2";
		String className = "MyClass1"; // deliberately mismatched source and class names
		IPath myClass2 = defineNestingClass(sourceName, className);

		incrementalBuild();
		expectProblems(myClass2);

		byte[] actualContents = Files.readAllBytes(Paths.get(compilationArtifactUri));

		assertEqualContents(expectedContents, actualContents);

		redefineNestingClass("MyClass2");
		incrementalBuild();
		expectingNoProblems();

		assertTrue("Java builder removed compilation artifact, but should not have",
				myClass1InnerClass.exists());
	}

