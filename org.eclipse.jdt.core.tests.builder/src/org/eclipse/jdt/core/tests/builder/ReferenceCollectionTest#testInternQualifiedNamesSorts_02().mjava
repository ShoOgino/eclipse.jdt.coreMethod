	public void testInternQualifiedNamesSorts_02() {
		char[][][] qualifiedNames = new char[][][] {
			CharOperation.splitOn('.', "java.lang.RuntimeException".toCharArray()),
			CharOperation.splitOn('.', "a.a.a".toCharArray()),
			CharOperation.splitOn('.', "b.b.b".toCharArray()),
			CharOperation.splitOn('.', "a.a".toCharArray()),
			CharOperation.splitOn('.', "a.b".toCharArray()),
			CharOperation.splitOn('.', "com".toCharArray()),
			CharOperation.splitOn('.', "a".toCharArray()),
			CharOperation.splitOn('.', "b".toCharArray())
		};
		char[][][] expectation = new char[][][] {
			CharOperation.splitOn('.', "a.a.a".toCharArray()),
			CharOperation.splitOn('.', "b.b.b".toCharArray()),
			CharOperation.splitOn('.', "a.a".toCharArray()),
			CharOperation.splitOn('.', "a.b".toCharArray()),
			CharOperation.splitOn('.', "a".toCharArray()),
			CharOperation.splitOn('.', "b".toCharArray())
		};
		Collections.shuffle(Arrays.asList(qualifiedNames));
		char[][][] internQualifiedNames = ReferenceCollection.internQualifiedNames(qualifiedNames, false);
		assertArrayEquals("Should be sorted, longest first, alphanumeric later",
				toStringArray(expectation),
				toStringArray(internQualifiedNames));
	}

