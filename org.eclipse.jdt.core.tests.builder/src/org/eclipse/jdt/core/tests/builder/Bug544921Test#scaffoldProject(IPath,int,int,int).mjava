	private void scaffoldProject(IPath projectPath, int maxPeripheral, int maxRegister, int maxFields) throws JavaModelException {
		env.addExternalJars(projectPath, Util.getJavaClassLibs());

		env.addClass(projectPath, "reg", "Field", //$NON-NLS-1$ //$NON-NLS-2$
			"package reg;\n" +
			"\n" +
			"import reg.Register.AccessType;\n" +
			"\n" +
			"public class Field {\n" +
			"    String name;\n" +
			"    String description;\n" +
			"    long bitRange;\n" +
			"    AccessType accessType;\n" +
			"\n" +
			"    public Field(String name, String description, long bitRange, AccessType accessType) {\n" +
			"        super();\n" +
			"        this.name = name;\n" +
			"        this.description = description;\n" +
			"        this.bitRange = bitRange;\n" +
			"        this.accessType = accessType;\n" +
			"    }\n" +
			"\n" +
			"	@Override\n" +
			"	public String toString() {\n" +
			"		return \"Field [name=\" + name + \", description=\" + description + \", bitRange=\" + bitRange + \", accessType=\"\n" +
			"				+ accessType + \"]\";\n" +
			"	}\n" +
			"   \n" +
			"}" //$NON-NLS-1$
		);

		env.addClass(projectPath, "reg", "Peripheral", //$NON-NLS-1$ //$NON-NLS-2$
			"package reg;\n" +
			"\n" +
			"import java.util.Collection;\n" +
			"import java.util.Map;\n" +
			"import java.util.TreeMap;\n" +
			"\n" +
			"public class Peripheral {\n" +
			"\n" +
			"    String name;\n" +
			"    String version;\n" +
			"    String description;\n" +
			"    String groupName;\n" +
			"    long baseAddress;\n" +
			"    long size;\n" +
			"\n" +
			"    Map<String, Register> registersMap;\n" +
			"\n" +
			"    public Peripheral(String name, String version, String description, String groupName,\n" +
			"            long baseAddress, long size) {\n" +
			"        super();\n" +
			"        this.name = name;\n" +
			"        this.version = version;\n" +
			"        this.description = description;\n" +
			"        this.groupName = groupName;\n" +
			"        this.baseAddress = baseAddress;\n" +
			"        this.size = size;\n" +
			"    }\n" +
			"\n" +
			"    private void initRegistersMap(){\n" +
			"    	if (registersMap != null) {\n" +
			"    		return;\n" +
			"    	}\n" +
			"    	registersMap = new TreeMap<>();\n" +
			"    	for (java.lang.reflect.Field field : this.getClass().getDeclaredFields()) {\n" +
			"        	if (!Register.class.isAssignableFrom(field.getType())){\n" +
			"        		continue;\n" +
			"        	}\n" +
			"        	try {\n" +
			"        		registersMap.put(field.getName(), (Register) field.get(this));\n" +
			"			} catch (Exception e) {\n" +
			"				e.printStackTrace();\n" +
			"			}\n" +
			"        }\n" +
			"    }\n" +
			"\n" +
			"    public Register getRegister(String name) {\n" +
			"    	return registersMap.get(name);\n" +
			"    }\n" +
			"    public Collection<Register> getRegisters(){\n" +
			"    	initRegistersMap();\n" +
			"    	return registersMap.values();\n" +
			"    }\n" +
			"}\n" //$NON-NLS-1$
		);

		env.addClass(projectPath, "reg", "Reg", //$NON-NLS-1$ //$NON-NLS-2$
				"package reg;\n" +
				"\n" +
				"public final class Reg {\n" +
				"\n" +
				"    Peripheral_TIMER0 peripheral_Timer0 = new Peripheral_TIMER0();\n" +
				"\n" +
				"    public static final class Peripheral_TIMER0 extends Peripheral {\n" +
				"\n" +
				"        public Peripheral_TIMER0() {\n" +
				"            super(\"TIMER0\", \"1.0\", \"desc\", \"groupName\", 0, 32);\n" +
				"        }\n" +
				"\n" +
				"        public Reg_CR regCR = new Reg_CR();\n" +
				"\n" +
				"        public static final class Reg_CR extends Register {\n" +
				"            public Reg_CR() {\n" +
				"                super(\"CR\", \"\", 0, 32, AccessType.readWrite, 0xf, 0x0);\n" +
				"            }\n" +
				"\n" +
				"            // fields of CR\n" +
				"            public Field_EN fieldEn = new Field_EN();\n" +
				"\n" +
				"            public static final class Field_EN extends Field {\n" +
				"                public Field_EN() {\n" +
				"                    super(\"EN\", \"description\", 0, AccessType.readWrite);\n" +
				"                }\n" +
				"            }\n" +
				"\n" +
				"            public Field_RST fieldRST = new Field_RST();\n" +
				"\n" +
				"            public static final class Field_RST extends Field {\n" +
				"                public Field_RST() {\n" +
				"                    super(\"RST\", \"description\", 1, AccessType.readWrite);\n" +
				"                }\n" +
				"            }\n" +
				"        }\n" +
				"    }\n" +
				"\n" +
				"    public static void main(String[] args) {\n" +
				"        Reg reg = new Reg();\n" +
				"\n" +
				"        System.out.println(reg.peripheral_Timer0.regCR.name + \": \" + reg.peripheral_Timer0.regCR.resetValue);\n" +
				"        System.out.println(reg.peripheral_Timer0.regCR.fieldEn.name + \": \" + reg.peripheral_Timer0.regCR.fieldEn.bitRange);\n" +
				"    }\n" +
				"}\n" //$NON-NLS-1$
			);

		env.addClass(projectPath, "reg", "Register", //$NON-NLS-1$ //$NON-NLS-2$
				"package reg;\n" +
				"\n" +
				"import java.util.Collection;\n" +
				"import java.util.Map;\n" +
				"import java.util.TreeMap;\n" +
				"\n" +
				"public class Register {\n" +
				"\n" +
				"    public enum AccessType {\n" +
				"        readOnly, readWrite;\n" +
				"    }\n" +
				"\n" +
				"    String name;\n" +
				"    String description;\n" +
				"    long addressOffset;\n" +
				"    long size;\n" +
				"    AccessType accessType;\n" +
				"    long resetValue;\n" +
				"    long resetMask;\n" +
				"    long value;\n" +
				"\n" +
				"    Map<String, Field> fieldsMap;\n" +
				"\n" +
				"    public Register(String name, String description, long addressOffset, long size,\n" +
				"            AccessType accessType, long resetValue, long resetMask) {\n" +
				"        this.name = name;\n" +
				"        this.description = description;\n" +
				"        this.addressOffset = addressOffset;\n" +
				"        this.size = size;\n" +
				"        this.accessType = accessType;\n" +
				"        this.resetValue = resetValue;\n" +
				"        this.resetMask = resetMask;\n" +
				"\n" +
				"    }\n" +
				"\n" +
				"    private void initFieldsMap(){\n" +
				"    	if (fieldsMap != null) {\n" +
				"    		return;\n" +
				"    	}\n" +
				"    	fieldsMap = new TreeMap<>();\n" +
				"    	for (java.lang.reflect.Field field : this.getClass().getDeclaredFields()) {\n" +
				"        	if (!Field.class.isAssignableFrom(field.getType())){\n" +
				"        		continue;\n" +
				"        	}\n" +
				"        	try {\n" +
				"				fieldsMap.put(field.getName(), (Field) field.get(this));\n" +
				"			} catch (Exception e) {\n" +
				"				e.printStackTrace();\n" +
				"			}\n" +
				"        }\n" +
				"    }\n" +
				"\n" +
				"    public void setValue(long value){\n" +
				"    	this.value = value;\n" +
				"    }\n" +
				"\n" +
				"    public long getValue(){\n" +
				"    	return this.value;\n" +
				"    }\n" +
				"\n" +
				"    public Collection<Field> getFields(){\n" +
				"    	initFieldsMap();\n" +
				"    	return fieldsMap.values();\n" +
				"    }\n" +
				"\n" +
				"	@Override\n" +
				"	public String toString() {\n" +
				"		return \"Register [name=\" + name + \", description=\" + description + \", addressOffset=\" + addressOffset\n" +
				"				+ \", size=\" + size + \", accessType=\" + accessType + \", resetValue=\" + resetValue + \", resetMask=\"\n" +
				"				+ resetMask + \"]\";\n" +
				"	}\n" +
				"\n" +
				"\n" +
				"}\n" //$NON-NLS-1$
			);

		env.addClass(projectPath, "reg.generate", "DeviceXY", genSource(maxPeripheral, maxRegister, maxFields));
	}

