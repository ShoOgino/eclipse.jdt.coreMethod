	public void testMissingProject() {
		IPath project1Path = env.addProject("MP1");
		env.addExternalJar(project1Path, Util.getJavaClassLib());

		IPath project2Path = env.addProject("MP2");
		env.addExternalJar(project2Path, Util.getJavaClassLib());
		env.addRequiredProject(project2Path, project1Path);

		fullBuild();
		expectingNoProblems();

		//----------------------------
		//           Step 2
		//----------------------------
		env.removeProject(project1Path);

		incrementalBuild();
		expectingOnlyProblemsFor(project2Path);
		expectingOnlySpecificProblemsFor(project2Path,
			new Problem[] {
				new Problem("", "The project was not built since it is involved in a cycle or has classpath problems.", project2Path),
				new Problem("Build path", "Missing required Java project: MP1.", project2Path)
			}
		);

		project1Path = env.addProject("MP1");
		env.addExternalJar(project1Path, Util.getJavaClassLib());

		incrementalBuild();
		expectingNoProblems();

		//----------------------------
		//           Step 3
		//----------------------------
		Hashtable options = JavaCore.getOptions();
		options.put(JavaCore.CORE_JAVA_BUILD_INVALID_CLASSPATH, JavaCore.IGNORE);
		JavaCore.setOptions(options);
		env.removeProject(project1Path);

		incrementalBuild();
		expectingOnlyProblemsFor(project2Path);
		expectingOnlySpecificProblemFor(project2Path,
			new Problem("Build path", "Missing required Java project: MP1.", project2Path)
		);

		project1Path = env.addProject("MP1");
		env.addExternalJar(project1Path, Util.getJavaClassLib());

		incrementalBuild();
		expectingNoProblems();

		options.put(JavaCore.CORE_JAVA_BUILD_INVALID_CLASSPATH, JavaCore.ABORT);
		JavaCore.setOptions(options);
	}

