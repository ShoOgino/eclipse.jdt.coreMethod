/*
 * Ensures that the changing a type in an external folder and refreshing triggers a rebuild
 */
public void testChangeExternalFolder() throws CoreException {
	String externalLib = Util.getOutputDirectory() + File.separator + "externalLib";
	try {
		new File(externalLib).mkdirs();
		Util.compile(
			new String[] {
				"p/X.java", 
				"package p;\n" +
				"public class X {\n" +
				"  public void foo() {\n" +
				"  }\n" +
				"}"
			},
			new HashMap(),
			externalLib
		);
		
		IPath projectPath = env.addProject("Project"); 
		env.addExternalJars(projectPath, Util.getJavaClassLibs());
		env.addExternalFolders(projectPath, new String[] {externalLib});

		IPath root = env.getPackageFragmentRootPath(projectPath, ""); //$NON-NLS-1$
		env.setOutputFolder(projectPath, ""); 

		IPath classY = env.addClass(root, "q", "Y",  
			"package q;\n"+ 
			"public class Y {\n" +
			"  void bar(p.X x) {\n" +
			"    x.foo();\n" +
			"  }\n" +
			"}"
		); 

		fullBuild(projectPath);
		expectingNoProblems();

		Util.compile(
			new String[] {
				"p/X.java", 
				"package p;\n" +
				"public class X {\n" +
				"}"
			},
			new HashMap(),
			externalLib
		);
		// work around for https://bugs.eclipse.org/bugs/show_bug.cgi?id=219566
		IProject externalFoldersProject = JavaModelManager.getExternalManager().getExternalFoldersProject();
		externalFoldersProject.refreshLocal(IResource.DEPTH_INFINITE, null);

		incrementalBuild(projectPath);
		expectingProblemsFor(
			classY,
			"Problem : The method foo() is undefined for the type X [ resource : </Project/q/Y.java> range : <54,57> category : <50> severity : <2>]"
		);
	} finally {
		new File(externalLib).delete();
	}
}

