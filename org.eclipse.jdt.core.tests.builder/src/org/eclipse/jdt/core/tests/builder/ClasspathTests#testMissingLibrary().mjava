	public void testMissingLibrary() {
		IPath projectPath = env.addProject("Project");
		env.removePackageFragmentRoot(projectPath, "");
		IPath root = env.addPackageFragmentRoot(projectPath, "src");
		IPath bin = env.setOutputFolder(projectPath, "bin");
		IPath classTest1 = env.addClass(root, "p1", "Test1",
			"package p1;\n"+
			"public class Test1 {}"
		);
		env.addClass(root, "p2", "Test2",
			"package p2;\n"+
			"public class Test2 {}"
		);
		env.addClass(root, "p2", "Test3",
			"package p2;\n"+
			"public class Test3 {}"
		);

		fullBuild();
		expectingOnlyProblemsFor(new IPath[] {projectPath, classTest1});
		expectingOnlySpecificProblemsFor(projectPath,
			new Problem[] {
				new Problem("", "The project was not built since its classpath is incomplete. Can not find the class file for java.lang.Object. Fix the classpath then try rebuilding this project", projectPath),
				new Problem("p1", "This compilation unit indirectly references the missing type java.lang.Object (typically some required class file is referencing a type outside the classpath)", classTest1)
			}
		);

		//----------------------------
		//           Step 2
		//----------------------------	
		env.addExternalJar(projectPath, env.getMinimalJarPath());

		incrementalBuild();
		expectingNoProblems();
		expectingPresenceOf(new IPath[]{
			bin.append("p1").append("Test1.class"),
			bin.append("p2").append("Test2.class"),
			bin.append("p2").append("Test3.class")
		});
	}

