	/** Verifies that the given element has specifics problems and
	 * only the given problems.
	 */
	protected void expectingOnlySpecificProblemsFor(IPath root, Problem[] expectedProblems){

		StringBuffer expectation = new StringBuffer(20);
		for (int k = 0; k < expectedProblems.length; k++){
			expectation.append("\tnew Problem(\"");
			expectation.append(expectedProblems[k].getLocation());
			expectation.append("\", \"");
			expectation.append(expectedProblems[k].getMessage());
			expectation.append("\", new Path(\"");
			expectation.append(expectedProblems[k].getResourcePath());
			expectation.append("\"))\n");				
		}
		String expectationString = expectation.toString();
		
		StringBuffer actual = new StringBuffer(20);
		Problem[] rootProblems = env.getProblemsFor(root);
		for (int k = 0; k < rootProblems.length; k++){
			actual.append("\tnew Problem(\"");
			actual.append(rootProblems[k].getLocation());
			actual.append("\", \"");
			actual.append(rootProblems[k].getMessage());
			actual.append("\", new Path(\"");
			actual.append(rootProblems[k].getResourcePath());
			actual.append("\"))\n");				
		}
		String actualString = actual.toString();
		
		if (!actualString.equals(expectationString)) {
			System.out.println(actualString);
		}		
		assertEquals("unexpected problems", expectationString, actualString);
	}

