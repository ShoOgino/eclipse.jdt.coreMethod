	public void testProcessAnnotationReferences2() throws JavaModelException {
		IPath projectPath = env.addProject("Project", "1.5"); //$NON-NLS-1$ //$NON-NLS-2$
		env.addExternalJars(projectPath, Util.getJavaClassLibs());
		env.removePackageFragmentRoot(projectPath, ""); //$NON-NLS-1$
		IPath root = env.addPackageFragmentRoot(projectPath, "src"); //$NON-NLS-1$
		env.setOutputFolder(projectPath, "bin"); //$NON-NLS-1$

		env.addClass(root, "", "Test", //$NON-NLS-1$ //$NON-NLS-2$
			"@GeneratedAnnotation\n" + //$NON-NLS-1$
			"public class Test extends p.GeneratedType {}\n" //$NON-NLS-1$
			);

		env.addClass(root, "", "GeneratedAnnotation", //$NON-NLS-1$ //$NON-NLS-2$
			"@interface GeneratedAnnotation{}\n"
			);

		// install compilationParticipant
		new BuildTestParticipant() {
			public boolean isAnnotationProcessor() {
				return true;
			}
			public void processAnnotations(ICompilationParticipantResult[] files) {
				// want to add a gen'ed source file that is referenced from the initial file to see if its recompiled
				ICompilationParticipantResult result = files[0];
				if (!"Test.java".equals(result.getFile().getName())) return; //$NON-NLS-1$
				IFile genedType = null;
				try {
					IFolder genedFolder = result.getFile().getParent().getFolder(new Path("p"));
					if (!genedFolder.exists())
						genedFolder.create(true, false, null);
					genedType = genedFolder.getFile(new Path("GeneratedType.java")); //$NON-NLS-1$
					if (genedType.exists()) return;
					genedType.create(new ByteArrayInputStream("package p; public class GeneratedType {}".getBytes()), true, null); //$NON-NLS-1$
				} catch (CoreException e) {
					e.printStackTrace();
				}
				result.recordAddedGeneratedFiles(new IFile[] {genedType});
			}
		};

		fullBuild(projectPath);
		expectingNoProblems();
	}

