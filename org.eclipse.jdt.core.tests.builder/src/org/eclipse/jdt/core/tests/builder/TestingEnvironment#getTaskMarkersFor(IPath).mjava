	/**
	 * Return all problems with the specified element.
	 */
	public IMarker[] getTaskMarkersFor(IPath path){
		IResource resource = null;
		if(path.equals(getWorkspaceRootPath())){
			resource = getWorkspace().getRoot();
		} else {
			IProject p = getProject(path);
			if(p != null && path.equals(p.getFullPath())) {
				resource = getProject(path.lastSegment());
			} else if(path.getFileExtension() == null) {
				resource = getWorkspace().getRoot().getFolder(path);
			} else {
				resource = getWorkspace().getRoot().getFile(path);
			}
		}
		try {
			if (resource != null) {
				final IMarker[] markers = resource.findMarkers(IJavaModelMarker.TASK_MARKER, true, IResource.DEPTH_INFINITE);
				Arrays.sort(markers, new Comparator() {
					public int compare(Object o1, Object o2) {
						IMarker marker1 = (IMarker) o1;
						IMarker marker2 = (IMarker) o2;
						try {
							final int start1 = ((Integer) marker1.getAttribute(IMarker.CHAR_START)).intValue();
							final int start2 = ((Integer) marker2.getAttribute(IMarker.CHAR_START)).intValue();
							return start1 - start2;
						} catch (CoreException e) {
							return 0;
						}
					}
				});
				return markers;
			}
		} catch(CoreException e){
			// ignore
		}
		return new IMarker[0];
	}

