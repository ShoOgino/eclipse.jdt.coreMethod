	public void testMemberTypeFromClassFile() {
		IPath projectPath = env.addProject("Project");
		env.addExternalJar(projectPath, env.getMinimalJarPath());
		env.addExternalJar(projectPath, env.getBuilderTestsJarPath());

		// remove old package fragment root so that names don't collide
		env.removePackageFragmentRoot(projectPath, "");

		IPath root = env.addPackageFragmentRoot(projectPath, "src");
		env.setOutputFolder(projectPath, "bin");

		env.addClass(root, "p", "A",
			"package p; \n"+
			"public class A extends Z {M[] m;}");

		env.addClass(root, "p", "B",
			"package p; \n"+
			"public class B {A a; E e; \n"+
			"void foo() { System.out.println(a.m); }}");

		env.addClass(root, "p", "E",
			"package p; \n"+
			"public class E extends Z { \n"+
			"void foo() { System.out.println(new M()); }}");

		env.addClass(root, "p", "Z",
			"package p; \n"+
			"public class Z {static class M {}}");

		fullBuild(projectPath);
		expectingNoProblems();

		env.addClass(root, "p", "B",
			"package p; \n"+
			"public class B {A a; E e; \n"+
			"void foo( ) { System.out.println(a.m); }}");

		env.addClass(root, "p", "E",
			"package p; \n"+
			"public class E extends Z { \n"+
			"void foo( ) { System.out.println(new M()); }}");

		env.addClass(root, "p", "Z",
			"package p; \n"+
			"public class Z { static class M {} }");

		int previous = org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.MAX_AT_ONCE;
		org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.MAX_AT_ONCE = 1; // reduce the lot size
		incrementalBuild(projectPath);
		org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.MAX_AT_ONCE = previous;
		expectingNoProblems();
	}

