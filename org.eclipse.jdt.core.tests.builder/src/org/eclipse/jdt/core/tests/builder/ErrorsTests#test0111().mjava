//non-optional errors cannot be ignored
public void test0111() throws JavaModelException {
	Hashtable options = JavaCore.getOptions();
	Hashtable newOptions = JavaCore.getOptions();
	newOptions.put(JavaCore.COMPILER_PB_UNUSED_LOCAL, JavaCore.ERROR);

	JavaCore.setOptions(newOptions);

	IPath projectPath = env.addProject("P");
	env.addExternalJars(projectPath, Util.getJavaClassLibs());

	// remove old package fragment root so that names don't collide
	env.removePackageFragmentRoot(projectPath, "");

	env.setOutputFolder(projectPath, "bin");
	IPath root = new Path("/P/src");
	env.addEntry(projectPath, JavaCore.newSourceEntry(root, null, null,
			null, new IClasspathAttribute[] { ATTR_IGNORE_OPTIONAL_PROBLEMS_TRUE }));

	IPath classX = env.addClass(root, "p", "X",
			"package p;\n" +
			"public class X {\n" +
			"	public void foo() {\n" +
			"		int i;\n" +
			"	}\n" +
			"	public void bar() {\n" +
			"		a++;\n" +
			"	}\n" +
			"}");

	fullBuild(projectPath);
	expectingOnlySpecificProblemFor(classX, new Problem("p", "a cannot be resolved to a variable", classX, 84, 85, CategorizedProblem.CAT_MEMBER, IMarker.SEVERITY_ERROR));

	JavaCore.setOptions(options);
}

