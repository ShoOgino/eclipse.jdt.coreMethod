	public void testIncrementalBuildTestChange() throws JavaModelException {
		IPath project1Path = env.addProject("Project1"); 
		env.removePackageFragmentRoot(project1Path, "");
		IPath src1 = env.addPackageFragmentRoot(project1Path, "src", null, "bin");
		IPath tests1 = env.addTestPackageFragmentRoot(project1Path, "tests");
		env.addExternalJars(project1Path, Util.getJavaClassLibs());		
	
		env.addClass(src1, "p1", "P1Class", 
				"package p1;\n" + 
				"\n" + 
				"public class P1Class {\n"+ 
				"}\n" 
				);
		env.addClass(tests1, "p1", "T1Class", 
				"package p1;\n" + 
				"\n" + 
				"public class T1Class {\n"+ 
				"}\n" 
				);
		env.addClass(tests1, "p1", "Test1", 
				"package p1;\n" + 
				"\n" + 
				"public class Test1 {\n" + 
				"	void test1() {\n" + 
				"		new P1Class();" + 
				"		new T1Class();" + 
				"	}\n" + 
				"}\n" + 
				"" 
				);

		IPath project2Path = env.addProject("Project2"); 
		env.removePackageFragmentRoot(project2Path, "");
		IPath src2 = env.addPackageFragmentRoot(project2Path, "src", null, "bin");
		IPath tests2 = env.addTestPackageFragmentRoot(project2Path, "tests");
		env.addExternalJars(project2Path, Util.getJavaClassLibs());
		env.addRequiredProject(project2Path, project1Path);
		env.addClass(src2, "p2", "P2Class", 
				"package p2;\n" + 
				"\n" + 
				"public class P2Class extends p1.P1Class {\n"+ 
				"}\n" 
				);
		env.addClass(tests2, "p2", "T2Class", 
				"package p2;\n" + 
				"\n" + 
				"public class T2Class extends p1.T1Class {\n"+ 
				"}\n" 
				);
		env.addClass(tests2, "p2", "Test2", 
				"package p2;\n" + 
				"\n" + 
				"public class Test2 extends p2.T2Class {\n" + 
				"	void test2(T2Class t) {\n" + 
				"	}\n" + 
				"}\n" + 
				"" 
				);

		fullBuild();
		expectingNoProblems();

		env.addClass(tests1, "p1", "T1Class", 
				"package p1;\n" + 
				"\n" + 
				"public class T1Class extends P1Class {\n"+ 
				"}\n" 
				);
		incrementalBuild();
		expectingNoProblems();
		expectingCompiledClasses(new String[] { "p1.T1Class", "p1.Test1", "p2.T2Class", "p2.Test2" });
		expectingCompilingOrder(new String[] { "/Project1/tests/p1/T1Class.java", "/Project1/tests/p1/Test1.java",
				"/Project2/tests/p2/T2Class.java", "/Project2/tests/p2/Test2.java" });
	}

