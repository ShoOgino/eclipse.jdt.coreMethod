public void test001() throws JavaModelException {
    IPath projectPath = env.addProject("Project", "1.5"); //$NON-NLS-1$
    env.addExternalJars(projectPath, Util.getJavaClassLibs());
    fullBuild(projectPath);
    
    // remove old package fragment root so that names don't collide
    env.removePackageFragmentRoot(projectPath, ""); //$NON-NLS-1$
    
    IPath root = env.addPackageFragmentRoot(projectPath, "src"); //$NON-NLS-1$
    env.setOutputFolder(projectPath, "bin"); //$NON-NLS-1$
    
    env.addClass(root, "pack", "Annot", //$NON-NLS-1$ //$NON-NLS-2$
        "package pack;\n"+ //$NON-NLS-1$
        "public @interface Annot {}" //$NON-NLS-1$
    );

    incrementalBuild(projectPath);
   
    IPath packageInfoPath = env.addFile(root, "pack/package-info.java", //$NON-NLS-1$ //$NON-NLS-2$
        "@Annot package p1" //$NON-NLS-1$
    );
        
    incrementalBuild(projectPath);
    expectingOnlyProblemsFor(packageInfoPath);
    final Problem[] problems = env.getProblems();
	Arrays.sort(problems);
    assertNotNull(problems);
    final StringWriter stringWriter = new StringWriter();
    final PrintWriter writer = new PrintWriter(stringWriter);
    final int problemsLength = problems.length;
    if (problemsLength == 1) {
        writer.print(problems[0].getMessage());    
    } else {
        for (int i = 0; i < problemsLength - 1; i++) {
            writer.println(problems[i].getMessage());
        }
        writer.print(problems[problemsLength - 1].getMessage());
    }
    writer.close();
    final String expectedOutput =
        "Syntax error on token \"p1\", ; expected after this token\n" + 
    	"The declared package does not match the expected package pack"; 
    assertSourceEquals("Different messages", expectedOutput, stringWriter.toString());
}

