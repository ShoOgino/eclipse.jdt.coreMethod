	// Bug 365992 - [builder] [null] Change of nullness for a parameter doesn't trigger a build for the files that call the method
	// Bug 366341 - Incremental compiler fails to detect right scope for annotation related code changes
	public void testReturnAnnotationDependency01() throws JavaModelException, IOException {
		// prepare the project:
		setupProjectForNullAnnotations();

		String test1Code = "package p1;\n" +
			"import org.eclipse.jdt.annotation.NonNull;\n" +
			"public class Test1 {\n" +
			"    public @NonNull Object foo() {\n" +
			"        return new Test2().bar();\n" +
			"    }\n" +
			"}";
		String test2Code = "package p1;\n" +
			"import org.eclipse.jdt.annotation.NonNull;\n" +
			"public class Test2 {\n" +
			"    public @NonNull Object bar() { return this; }\n" +
			"}";

		IPath test1Path = env.addClass( this.srcRoot, "p1", "Test1", test1Code );
		env.addClass( this.srcRoot, "p1", "Test2", test2Code );

		fullBuild( this.projectPath );
		expectingNoProblems();

		// edit Test2 to replace annotation
		String test2CodeB = "package p1;\n" +
			"import org.eclipse.jdt.annotation.Nullable;\n" +
			"public class Test2 {\n" +
			"    public @Nullable Object bar() { return null; }\n" +
			"}";
		env.addClass( this.srcRoot, "p1", "Test2", test2CodeB );
		incrementalBuild( this.projectPath );
		expectingProblemsFor(test1Path, 
			"Problem : Type mismatch: required \'@NonNull Object\' but the provided value can be null [ resource : </Project/src/p1/Test1.java> range : <126,143> category : <90> severity : <2>]");

		// verify that Test1 was recompiled
		expectingUniqueCompiledClasses(new String[] { "p1.Test1", "p1.Test2" });

		// remove annotation, error changes from can be null to unknown nullness
		String test2CodeC = "package p1;\n" +
			"public class Test2 {\n" +
			"    public Object bar() { return null; }\n" +
			"}";
		env.addClass( this.srcRoot, "p1", "Test2", test2CodeC );
		incrementalBuild( this.projectPath );
		expectingProblemsFor(test1Path, 
			"Problem : Potential type mismatch: required \'@NonNull Object\' but nullness of the provided value is unknown [ resource : </Project/src/p1/Test1.java> range : <126,143> category : <90> severity : <1>]");

		// verify that Test1 was recompiled
		expectingUniqueCompiledClasses(new String[] { "p1.Test1", "p1.Test2" });

		// back to initial OK version (re-add @NonNull annotation)
		env.addClass( this.srcRoot, "p1", "Test2", test2Code );
		incrementalBuild( this.projectPath );
		expectingNoProblems();

		// verify that Test1 was recompiled
		expectingUniqueCompiledClasses(new String[] { "p1.Test1", "p1.Test2" });
	}

