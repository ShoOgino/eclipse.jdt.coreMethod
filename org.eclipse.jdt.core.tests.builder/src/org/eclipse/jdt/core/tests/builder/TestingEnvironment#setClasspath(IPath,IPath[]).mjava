	/** Sets the classpath to the given package fragment
	 * roots.  The builder searches the classpath to
	 * find the java files it needs during a build.
	 */
	public void setClasspath(IPath projectPath, IPath[] packageFragmentRootsPath) {
		try {
			checkAssertion("a workspace must be open", fIsOpen); //$NON-NLS-1$
			IJavaProject javaProject =
				(IJavaProject) getProject(projectPath).getNature(JavaCore.NATURE_ID);
			IClasspathEntry[] entries =
				new IClasspathEntry[packageFragmentRootsPath.length];
			for (int i = 0; i < packageFragmentRootsPath.length; ++i) {
				IPath path = packageFragmentRootsPath[i];
				if ("jar".equals(path.getFileExtension()) //$NON-NLS-1$
					|| "zip".equals(path.getFileExtension())) { //$NON-NLS-1$
					entries[i] = JavaCore.newLibraryEntry(path, null, null, false);
				} else if (projectPath.isPrefixOf(packageFragmentRootsPath[i])) {
					entries[i] = JavaCore.newSourceEntry(path);
				} else {
					entries[i] = JavaCore.newProjectEntry(path);
				}
			}
			javaProject.setRawClasspath(entries, null);
		} catch (JavaModelException e) {
			e.printStackTrace();
			checkAssertion("JavaModelException", false); //$NON-NLS-1$
		} catch (CoreException e) {
			e.printStackTrace();
			checkAssertion("CoreException", false); //$NON-NLS-1$
		}
	}

