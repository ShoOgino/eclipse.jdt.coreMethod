	public static String genSource(int maxPeripheral, int maxRegister, int maxFields) {
		/*
		 *
		 * The example that took 25 minutes was generated with: int maxPeripheral = 10;
		 * int maxRegister = 500; int maxFields = 64;
		 *
		 * Still performs ok (less than a minute): int maxPeripheral = 2; int
		 * maxRegister = 500; int maxFields = 64;
		 *
		 * With this (8 MB) it gets already slow (few minutes): int maxPeripheral = 3;
		 * int maxRegister = 500; int maxFields = 64;
		 *
		 * This takes 5 minutes (14MB file-size): int maxPeripheral = 5; int maxRegister
		 * = 500; int maxFields = 64;
		 */

		StringBuilder source = new StringBuilder();

		source.append("package reg.generate;").append(System.lineSeparator());
		source.append("public class DeviceXY {").append(System.lineSeparator());
		source.append("private static DeviceXY instance;").append(System.lineSeparator());
		source.append("private DeviceXY() {}").append(System.lineSeparator());
		source.append("public static DeviceXY getInstance() {").append(System.lineSeparator());
		source.append("  if (instance == null) { instance = new DeviceXY(); }").append(System.lineSeparator());
		source.append("  return instance;").append(System.lineSeparator());
		source.append("}").append(System.lineSeparator());

		for (int peripheral = 0; peripheral < maxPeripheral; peripheral++) {
			String peripheralName = "peri_" + peripheral;
			String peripheralClassName = String.valueOf(Character.toUpperCase(peripheralName.charAt(0)))
					+ peripheralName.substring(1);

			source.append("public ").append(peripheralClassName).append(" ").append(peripheralName)
					.append(" = new ").append(peripheralClassName).append("();").append(System.lineSeparator());
			source.append("public static final class ").append(peripheralClassName)
					.append(" extends reg.Peripheral {").append(System.lineSeparator());
			// constructor start
			source.append("public ").append(peripheralClassName).append("() {").append(System.lineSeparator());
			source.append("  super(\"").append(peripheralName).append("\",")
					.append("\"1.0\",\"desc\", \"groupName\", 0, 32);").append(System.lineSeparator());
			source.append("}").append(System.lineSeparator());
			// constructor end

			for (int register = 0; register < maxRegister; register++) {
				String registerName = "reg_" + register;
				String registerClassName = String.valueOf(Character.toUpperCase(registerName.charAt(0)))
						+ registerName.substring(1);

				source.append("public ").append(registerClassName).append(" ").append(registerName)
						.append(" = new ").append(registerClassName).append("();").append(System.lineSeparator());

				source.append("/**").append(System.lineSeparator());
				source.append("* Register ").append(registerName).append(System.lineSeparator());
				source.append("*/").append(System.lineSeparator());
				source.append("public static final class ").append(registerClassName)
						.append(" extends reg.Register {").append(System.lineSeparator());
				// constructor start
				source.append("public ").append(registerClassName).append("() {")
						.append(System.lineSeparator());
				source.append("  super(\"").append(registerName).append("\",")
						.append("\"desc\", 0, 32, AccessType.readWrite, 0xf, 0x0);").append(System.lineSeparator());
				source.append("}").append(System.lineSeparator());
				// constructor end

				source.append("//fields").append(System.lineSeparator());

				for (int field = 0; field < maxFields; field++) {
					String fieldName = "field_" + field;
					source.append("public ").append("reg.Field").append(" ").append(fieldName)
							.append(" = new ").append("reg.Field").append("(\"").append(fieldName).append("\",")
							.append("\"desc\", 0, AccessType.readWrite);").append(System.lineSeparator());

				}

				source.append("}").append(System.lineSeparator());
			}
			source.append("}").append(System.lineSeparator());
		}


		source.append("}").append(System.lineSeparator());

		return source.toString();

	}

