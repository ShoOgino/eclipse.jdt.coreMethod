	/* (non-Javadoc)
	 * @see javax.lang.model.util.Types#getDeclaredType(javax.lang.model.element.TypeElement, javax.lang.model.type.TypeMirror[])
	 */
	@Override
	public DeclaredType getDeclaredType(TypeElement typeElem, TypeMirror... typeArgs) {
		int typeArgsLength = typeArgs.length;
		TypeElementImpl typeElementImpl = (TypeElementImpl) typeElem;
		ReferenceBinding referenceBinding = (ReferenceBinding) typeElementImpl._binding;
		TypeVariableBinding[] typeVariables = referenceBinding.typeVariables();
		int typeVariablesLength = typeVariables.length;
		if (typeArgsLength == 0) {
			if (referenceBinding.isGenericType()) {
				// must return a raw type
				return Factory.newDeclaredType(this._env.getLookupEnvironment().createRawType(referenceBinding, null));
			}
			return (DeclaredType)typeElem.asType();
		} else if (typeArgsLength != typeVariablesLength) {
			throw new IllegalArgumentException("Number of typeArguments doesn't match the number of formal parameters of typeElem"); //$NON-NLS-1$
		}
		TypeBinding[] typeArguments = new TypeBinding[typeArgsLength];
		for (int i = 0; i < typeArgsLength; i++) {
			TypeMirrorImpl typeMirrorImpl = (TypeMirrorImpl) typeArgs[i];
			Binding binding = typeMirrorImpl._binding;
			if (!(binding instanceof ReferenceBinding)) {
				throw new IllegalArgumentException("Invalid type for a type arguments : " + typeMirrorImpl); //$NON-NLS-1$
			}
			typeArguments[i] = (ReferenceBinding) binding;
		}
		return Factory.newDeclaredType(
				this._env.getLookupEnvironment().createParameterizedType(referenceBinding, typeArguments, null));
	}

