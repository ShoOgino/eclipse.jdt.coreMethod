	/* (non-Javadoc)
	 * @see javax.tools.JavaFileManager#handleOption(java.lang.String, java.util.Iterator)
	 */
	@Override
	public boolean handleOption(String current, Iterator<String> remaining) {
		try {
			switch(current) {
				case "-bootclasspath": //$NON-NLS-1$
					if (remaining.hasNext()) {
						final Iterable<? extends File> bootclasspaths = getPathsFrom(remaining.next());
						if (bootclasspaths != null) {
							Iterable<? extends File> iterable = getLocation(StandardLocation.PLATFORM_CLASS_PATH);
							if ((this.flags & EclipseFileManager.HAS_ENDORSED_DIRS) == 0
									&& (this.flags & EclipseFileManager.HAS_EXT_DIRS) == 0) {
								// override default bootclasspath
								setLocation(StandardLocation.PLATFORM_CLASS_PATH, bootclasspaths);
							} else if ((this.flags & EclipseFileManager.HAS_ENDORSED_DIRS) != 0) {
								// endorseddirs have been processed first
								setLocation(StandardLocation.PLATFORM_CLASS_PATH, 
										concatFiles(iterable, bootclasspaths));
							} else {
								// extdirs have been processed first
								setLocation(StandardLocation.PLATFORM_CLASS_PATH, 
										prependFiles(iterable, bootclasspaths));
							}
						}
						this.flags |= EclipseFileManager.HAS_BOOTCLASSPATH;
						return true;
					} else {
						throw new IllegalArgumentException();
					}
				case "--system": //$NON-NLS-1$
					if (remaining.hasNext()) {
						final Iterable<? extends File> classpaths = getPathsFrom(remaining.next());
						if (classpaths != null) {
							Iterable<? extends File> iterable = getLocation(StandardLocation.SYSTEM_MODULES);
							if (iterable != null) {
								setLocation(StandardLocation.SYSTEM_MODULES,
									concatFiles(iterable, classpaths));
							} else {
								setLocation(StandardLocation.SYSTEM_MODULES, classpaths);
							}
						}
						return true;
					} else {
						throw new IllegalArgumentException();
					}
				case "--upgrade-module-path": //$NON-NLS-1$
					if (remaining.hasNext()) {
						final Iterable<? extends File> classpaths = getPathsFrom(remaining.next());
						if (classpaths != null) {
							Iterable<? extends File> iterable = getLocation(StandardLocation.UPGRADE_MODULE_PATH);
							if (iterable != null) {
								setLocation(StandardLocation.UPGRADE_MODULE_PATH,
									concatFiles(iterable, classpaths));
							} else {
								setLocation(StandardLocation.UPGRADE_MODULE_PATH, classpaths);
							}
						}
						return true;
					} else {
						throw new IllegalArgumentException();
					}
				case "-classpath": //$NON-NLS-1$
				case "-cp": //$NON-NLS-1$
					if (remaining.hasNext()) {
						final Iterable<? extends File> classpaths = getPathsFrom(remaining.next());
						if (classpaths != null) {
							Iterable<? extends File> iterable = getLocation(StandardLocation.CLASS_PATH);
							if (iterable != null) {
								setLocation(StandardLocation.CLASS_PATH,
									concatFiles(iterable, classpaths));
							} else {
								setLocation(StandardLocation.CLASS_PATH, classpaths);
							}
							if ((this.flags & EclipseFileManager.HAS_PROCESSORPATH) == 0) {
								setLocation(StandardLocation.ANNOTATION_PROCESSOR_PATH, classpaths);
							} else if ((this.flags & EclipseFileManager.HAS_PROC_MODULEPATH) == 0) {
								if (this.isOnJvm9)
									setLocation(StandardLocation.ANNOTATION_PROCESSOR_MODULE_PATH, classpaths);
							}
						}
						return true;
					} else {
						throw new IllegalArgumentException();
					}
				case "--module-path": //$NON-NLS-1$
				case "-p": //$NON-NLS-1$
					final Iterable<? extends File> classpaths = getPathsFrom(remaining.next());
					if (classpaths != null) {
						Iterable<? extends File> iterable = getLocation(StandardLocation.MODULE_PATH);
						if (iterable != null) {
							setLocation(StandardLocation.MODULE_PATH, concatFiles(iterable, classpaths));
						} else {
							setLocation(StandardLocation.MODULE_PATH, classpaths);
						}
						if ((this.flags & EclipseFileManager.HAS_PROCESSORPATH) == 0) {
							setLocation(StandardLocation.ANNOTATION_PROCESSOR_PATH, classpaths);
						} else if ((this.flags & EclipseFileManager.HAS_PROC_MODULEPATH) == 0) {
							if (this.isOnJvm9)
								setLocation(StandardLocation.ANNOTATION_PROCESSOR_MODULE_PATH, classpaths);
						}
					}
					return true;
				case "-encoding": //$NON-NLS-1$
					if (remaining.hasNext()) {
						this.charset = Charset.forName(remaining.next());
						return true;
					} else {
						throw new IllegalArgumentException();
					}
				case "-sourcepath": //$NON-NLS-1$
					if (remaining.hasNext()) {
						final Iterable<? extends File> sourcepaths = getPathsFrom(remaining.next());
						if (sourcepaths != null) setLocation(StandardLocation.SOURCE_PATH, sourcepaths);
						return true;
					} else {
						throw new IllegalArgumentException();
					}
				case "--module-source-path": //$NON-NLS-1$
					if (remaining.hasNext()) {
						final Iterable<? extends File> sourcepaths = getPathsFrom(remaining.next());
						if (sourcepaths != null && this.isOnJvm9) 
							setLocation(StandardLocation.MODULE_SOURCE_PATH, sourcepaths);
						return true;
					} else {
						throw new IllegalArgumentException();
					}
				case "-extdirs": //$NON-NLS-1$
					if (this.isOnJvm9) {
						throw new IllegalArgumentException();
					}
					if (remaining.hasNext()) {
						Iterable<? extends File> iterable = getLocation(StandardLocation.PLATFORM_CLASS_PATH);
						setLocation(StandardLocation.PLATFORM_CLASS_PATH, 
								concatFiles(iterable, getExtdirsFrom(remaining.next())));
						this.flags |= EclipseFileManager.HAS_EXT_DIRS;
						return true;
					} else {
						throw new IllegalArgumentException();
					}
				case "-endorseddirs": //$NON-NLS-1$
					if (remaining.hasNext()) {
						Iterable<? extends File> iterable = getLocation(StandardLocation.PLATFORM_CLASS_PATH);
						setLocation(StandardLocation.PLATFORM_CLASS_PATH, 
								prependFiles(iterable, getEndorsedDirsFrom(remaining.next())));
						this.flags |= EclipseFileManager.HAS_ENDORSED_DIRS;
						return true;
					} else {
						throw new IllegalArgumentException();
					}
				case "-d": //$NON-NLS-1$
					if (remaining.hasNext()) {
						final Iterable<? extends File> outputDir = getOutputDir(remaining.next());
						if (outputDir != null) {
							setLocation(StandardLocation.CLASS_OUTPUT, outputDir);
						}
						return true;
					} else {
						throw new IllegalArgumentException();
					}
				case "-s": //$NON-NLS-1$
					if (remaining.hasNext()) {
						final Iterable<? extends File> outputDir = getOutputDir(remaining.next());
						if (outputDir != null) {
							setLocation(StandardLocation.SOURCE_OUTPUT, outputDir);
						}
						return true;
					} else {
						throw new IllegalArgumentException();
					}
				case "-processorpath": //$NON-NLS-1$
					if (remaining.hasNext()) {
						final Iterable<? extends File> processorpaths = getPathsFrom(remaining.next());
						if (processorpaths != null) {
							setLocation(StandardLocation.ANNOTATION_PROCESSOR_PATH, processorpaths);
						}
						this.flags |= EclipseFileManager.HAS_PROCESSORPATH;
						return true;
					} else {
						throw new IllegalArgumentException();
					}
				case "--processor-module-path": //$NON-NLS-1$
					if (remaining.hasNext()) {
						final Iterable<? extends File> processorpaths = getPathsFrom(remaining.next());
						if (processorpaths != null && this.isOnJvm9) {
							setLocation(StandardLocation.ANNOTATION_PROCESSOR_MODULE_PATH, processorpaths);
							this.flags |= EclipseFileManager.HAS_PROC_MODULEPATH;
						}
						return true;
					} else {
						throw new IllegalArgumentException();
					}
			}
		} catch (IOException e) {
			// ignore
		}
		return false;
	}

