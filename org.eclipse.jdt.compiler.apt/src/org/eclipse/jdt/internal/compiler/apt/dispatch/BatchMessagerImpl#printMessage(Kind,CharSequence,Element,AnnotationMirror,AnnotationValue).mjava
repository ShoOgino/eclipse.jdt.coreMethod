	/* (non-Javadoc)
	 * @see javax.annotation.processing.Messager#printMessage(javax.tools.Diagnostic.Kind, java.lang.CharSequence, javax.lang.model.element.Element, javax.lang.model.element.AnnotationMirror, javax.lang.model.element.AnnotationValue)
	 */
	@Override
	public void printMessage(Kind kind, CharSequence msg, Element e,
			AnnotationMirror a, AnnotationValue v) {
		ReferenceContext referenceContext = null;
		int startPosition = 0;
		int endPosition = 0;
		CategorizedProblem problem = null;
		if (e != null) {
			switch(e.getKind()) {
				case ANNOTATION_TYPE :
				case INTERFACE :
				case CLASS :
				case ENUM :
					TypeElementImpl typeElementImpl = (TypeElementImpl) e;
					Binding typeBinding = typeElementImpl._binding;
					if (typeBinding instanceof SourceTypeBinding) {
						SourceTypeBinding sourceTypeBinding = (SourceTypeBinding) typeBinding;
						TypeDeclaration typeDeclaration = (TypeDeclaration) sourceTypeBinding.scope.referenceContext();
						referenceContext = typeDeclaration;
						startPosition = typeDeclaration.sourceStart;
						endPosition = typeDeclaration.sourceEnd;
					}
					break;
				case PACKAGE :
					// nothing to do: there is no reference context for a package
					break;
				case CONSTRUCTOR :
				case METHOD :
					ExecutableElementImpl executableElementImpl = (ExecutableElementImpl) e;
					Binding binding = executableElementImpl._binding;
					if (binding instanceof MethodBinding) {
						MethodBinding methodBinding = (MethodBinding) binding;
						AbstractMethodDeclaration sourceMethod = methodBinding.sourceMethod();
						if (sourceMethod != null) {
							referenceContext = sourceMethod;
							startPosition = sourceMethod.sourceStart;
							endPosition = sourceMethod.sourceEnd;
						}
					}
					break;
				case ENUM_CONSTANT :
					break;
				case EXCEPTION_PARAMETER :
					break;
				case FIELD :
					VariableElementImpl variableElementImpl = (VariableElementImpl) e;
					binding = variableElementImpl._binding;
					if (binding instanceof FieldBinding) {
						FieldBinding fieldBinding = (FieldBinding) binding;
						FieldDeclaration fieldDeclaration = fieldBinding.sourceField();
						if (fieldDeclaration != null) {
							ReferenceBinding declaringClass = fieldBinding.declaringClass;
							if (declaringClass instanceof SourceTypeBinding) {
								SourceTypeBinding sourceTypeBinding = (SourceTypeBinding) declaringClass;
								TypeDeclaration typeDeclaration = (TypeDeclaration) sourceTypeBinding.scope.referenceContext();
								referenceContext = typeDeclaration;
							}
							startPosition = fieldDeclaration.sourceStart;
							endPosition = fieldDeclaration.sourceEnd;
						}
					}
					break;
				case INSTANCE_INIT :
				case STATIC_INIT :
					break;
				case LOCAL_VARIABLE :
					break;
				case PARAMETER :
					break;
				case TYPE_PARAMETER :
			}
		}
		StringBuilder builder = new StringBuilder(msg);
		switch(kind) {
			case ERROR :
				if (referenceContext != null) {
					CompilationResult result = referenceContext.compilationResult();
					int lineNumber = startPosition >= 0
							? Util.searchLineNumber(result.getLineSeparatorPositions(), startPosition)
							: 0;
					int columnNumber = startPosition >= 0
							? Util.searchColumnNumber(result.getLineSeparatorPositions(), lineNumber,startPosition)
							: 0;
					problem = new BatchAptProblem(
							result.fileName,
							String.valueOf(builder),
							0,
							NO_ARGUMENTS,
							ProblemSeverities.Error,
							startPosition,
							endPosition,
							lineNumber,
							columnNumber);
				} else {
					problem = new BatchAptProblem(
							null,
							String.valueOf(builder),
							0,
							NO_ARGUMENTS,
							ProblemSeverities.Error,
							startPosition,
							endPosition,
							0,
							1);
				}
				break;
			case MANDATORY_WARNING :
			case WARNING :
			case NOTE :
			case OTHER :
				if (referenceContext != null) {
					CompilationResult result = referenceContext.compilationResult();
					int lineNumber = startPosition >= 0
							? Util.searchLineNumber(result.getLineSeparatorPositions(), startPosition)
							: 0;
					int columnNumber = startPosition >= 0
							? Util.searchColumnNumber(result.getLineSeparatorPositions(), lineNumber,startPosition)
							: 0;
					problem = new BatchAptProblem(
							result.fileName,
							String.valueOf(builder),
							0,
							NO_ARGUMENTS,
							ProblemSeverities.Warning,
							startPosition,
							endPosition,
							lineNumber,
							columnNumber);
				} else {
					problem = new BatchAptProblem(
							null,
							String.valueOf(builder),
							0,
							NO_ARGUMENTS,
							ProblemSeverities.Warning,
							startPosition,
							endPosition,
							0,
							1);
				}
				break;
		}
		if (problem != null) {
			this._compiler.addExtraProblems(problem);
		}
	}

