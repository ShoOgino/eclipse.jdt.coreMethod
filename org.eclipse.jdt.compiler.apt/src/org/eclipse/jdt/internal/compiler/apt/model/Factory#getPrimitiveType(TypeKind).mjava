	/**
	 * Get a type mirror object representing the specified primitive type kind.
	 * This is used for VoidType, NoType and NullType as well as the usual int, float, etc. 
	 * @throw IllegalArgumentException if a non-primitive TypeKind is requested
	 */
	public static PrimitiveTypeImpl getPrimitiveType(TypeKind kind)
	{
		switch (kind) {
		case BOOLEAN:
			return PrimitiveTypeImpl.BOOLEAN;
		case BYTE:
			return PrimitiveTypeImpl.BYTE;
		case CHAR:
			return PrimitiveTypeImpl.CHAR;
		case DOUBLE:
			return PrimitiveTypeImpl.DOUBLE;
		case FLOAT:
			return PrimitiveTypeImpl.FLOAT;
		case INT:
			return PrimitiveTypeImpl.INT;
		case LONG:
			return PrimitiveTypeImpl.LONG;
		case NONE:
			// TODO: how can we represent the NONE type?
			throw new UnsupportedOperationException("NYI"); //$NON-NLS-1$
		case NULL:
			return PrimitiveTypeImpl.NULL;
		case SHORT:
			return PrimitiveTypeImpl.SHORT;
		case VOID:
			return PrimitiveTypeImpl.VOID;
		default:
			throw new IllegalStateException();
		}
	}

