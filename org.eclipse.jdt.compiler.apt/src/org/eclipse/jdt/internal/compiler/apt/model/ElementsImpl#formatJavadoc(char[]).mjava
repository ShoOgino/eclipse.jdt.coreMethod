	/**
	 * Strip the comment characters from a javadoc comment. Assume the comment is already
	 * missing its closing delimiter.
	 * 
	 * We mainly do not attempt to emulate the baroque behavior of javac with respect to
	 * treatment of whitespace. The rules here are simpler: eliminate the opening and
	 * closing delimiter, and eliminate [whitespace plus stars] at the beginning of each
	 * line. If the first or last line then contain only whitespace, discard them
	 * entirely.  Javac also does things like: expand tabs at the beginning of the line if
	 * the first non-whitespace char is not a star; if the first line contains whitespace
	 * after the delimiter, but no non-whitespace chars, then delete the whitespace but
	 * preserve the newline; and so forth.
	 */
	public static String formatJavadoc(char[] unparsed)
	{
		if (unparsed == null || unparsed.length < 5) { // delimiters take 5 chars
			return null;
		}
		
		String[] lines = new String(unparsed).split("\n"); //$NON-NLS-1$
		Matcher delimiterMatcher = INITIAL_DELIMITER.matcher(lines[0]);
		if (!delimiterMatcher.find()) {
			return null;
		}
		int iOpener = delimiterMatcher.end();
		lines[0] = lines[0].substring(iOpener);
		if (lines.length == 1) {
			// single-line comment.  Should trim(), but javac doesn't.
			return lines[0];
		}
		
		int firstLine = lines[0].trim().length() > 0 ? 0 : 1;
		
		// for each line after the first, including the last, if it starts with whitespace
		// followed by stars, skip all that. 
		for (int line = 1; line < lines.length; ++line) {
			Matcher whitespaceMatcher = INITIAL_WHITESPACE_STARS.matcher(lines[line]);
			if (whitespaceMatcher.find()) {
				int firstAfterStars = whitespaceMatcher.end();
				lines[line] = lines[line].substring(firstAfterStars);
			}
		}
		
		// If the last line is now empty, skip it
		int lastLine = lines[lines.length - 1].trim().length() > 0 ? lines.length - 1 : lines.length - 2;
		
		StringBuilder sb = new StringBuilder();
		for (int line = firstLine; line <= lastLine; ++line) {
			sb.append(lines[line]);
			// append a newline at the end of each line except the last, even if we skipped the last entirely
			if (line < lines.length - 1) {
				sb.append('\n');
			}
		}
		return sb.toString();
	}

