	/**
	 * Convert the JDT representation of a single constant into its javax.lang.model
	 * representation.  For instance, convert a StringConstant into a String, or
	 * a FieldBinding into a VariableElement.  This does not handle the case where
	 * value is an Object[].
	 * @param value the JDT object
	 * @param kind an int array whose first element will be set to the type of the
	 * converted object, represented with T_* values from TypeIds or from this class.
	 * @return
	 */
	private Object convertToJavaType(Object value, int kind[]) {
		if (value instanceof Constant) {
			kind[0] = ((Constant) value).typeID();
			switch (kind[0]) {
			case T_boolean:
				return ((BooleanConstant) value).booleanValue();
			case T_byte:
				return ((ByteConstant) value).byteValue();
			case T_char:
				return ((CharConstant) value).charValue();
			case T_double:
				return ((DoubleConstant) value).doubleValue();
			case T_float:
				return ((FloatConstant) value).floatValue();
			case T_int:
				return ((IntConstant) value).intValue();
			case T_JavaLangString:
				return ((StringConstant) value).stringValue();
			case T_long:
				return ((LongConstant) value).longValue();
			case T_short:
				return ((ShortConstant) value).shortValue();
			}
		} else if (value instanceof FieldBinding) {
			kind[0] = T_EnumConstant;
			return (VariableElement) Factory.newElement((FieldBinding) value);
		} else if (value instanceof TypeBinding) {
			kind[0] = T_ClassObject;
			return Factory.newTypeMirror((TypeBinding) value);
		} else if (value instanceof AnnotationBinding) {
			kind[0] = T_AnnotationMirror;
			return Factory.newAnnotationMirror((AnnotationBinding) value);
		} 
		throw new IllegalArgumentException("Unexpected type for annotation value: " + value); //$NON-NLS-1$
	}

