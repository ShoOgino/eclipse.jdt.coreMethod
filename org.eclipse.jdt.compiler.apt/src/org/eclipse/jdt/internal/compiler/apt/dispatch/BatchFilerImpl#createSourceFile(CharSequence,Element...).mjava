	/* (non-Javadoc)
	 * @see javax.annotation.processing.Filer#createSourceFile(java.lang.CharSequence, javax.lang.model.element.Element[])
	 */
	@Override
	public JavaFileObject createSourceFile(CharSequence name,
			Element... originatingElements) throws IOException {
		String moduleAndPkgString = name.toString();
		int slash = moduleAndPkgString.indexOf('/');
		String mod = null;
		if (slash != -1) {
			name = moduleAndPkgString.substring(slash + 1, name.length());
			mod = moduleAndPkgString.substring(0, slash);
		}
		TypeElement typeElement = _env._elementUtils.getTypeElement(name);
		if (typeElement != null) {
			throw new FilerException("Source file already exists : " + moduleAndPkgString); //$NON-NLS-1$
		}
		Location location = mod == null ? StandardLocation.SOURCE_OUTPUT : _fileManager.getLocationForModule(StandardLocation.SOURCE_OUTPUT, mod);
		JavaFileObject jfo = _fileManager.getJavaFileForOutput(location, name.toString(), JavaFileObject.Kind.SOURCE, null);
		URI uri = jfo.toUri();
		if (_createdFiles.contains(uri)) {
			throw new FilerException("Source file already created : " + name); //$NON-NLS-1$
		}

		_createdFiles.add(uri);
		// hook the file object's writers to create compilation unit and add to addedUnits()
		return new HookedJavaFileObject(jfo, jfo.getName(), name.toString(), this);
	}

