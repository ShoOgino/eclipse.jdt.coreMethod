	@Override
	public List<? extends Element> getEnclosedElements() {
		PackageBinding binding = (PackageBinding)_binding;
		LookupEnvironment environment = binding.environment;
		char[][][] typeNames = null;
		INameEnvironment nameEnvironment = binding.environment.nameEnvironment;
		if (nameEnvironment instanceof FileSystem) {
			typeNames = ((FileSystem) nameEnvironment).findTypeNames(binding.compoundName);
		}
		HashSet<Element> set = new HashSet<>(); 
		Set<ReferenceBinding> types = new HashSet<>();
		if (typeNames != null) {
			for (char[][] typeName : typeNames) {
				if (typeName == null) continue;
				ReferenceBinding type = environment.getType(typeName);
				if (type != null && type.isValidBinding()) {
					set.add(_env.getFactory().newElement(type));
					types.add(type);
				}
			}
		}
		if (binding.knownTypes != null) {
			ReferenceBinding[] knownTypes = binding.knownTypes.valueTable;
			for (ReferenceBinding referenceBinding : knownTypes) {
				if (referenceBinding != null && referenceBinding.isValidBinding() && referenceBinding.enclosingType() == null) {
					if (!types.contains(referenceBinding)) {
						set.add(_env.getFactory().newElement(referenceBinding));
					}
				}
			}
		}
		ArrayList<Element> list = new ArrayList<>(set.size());
		list.addAll(set);
		return Collections.unmodifiableList(list);
	}

