	private void initialize() throws IOException {
		// initialize packages
		this.packagesCache = new Hashtable<>();
		this.typesCache = new HashSet<>();
		if (!this.file.getName().equals(BOOT_MODULE)) return;
		java.nio.file.FileSystem fs = FileSystems.getFileSystem(JRT_URI);
		Iterable<java.nio.file.Path> roots = fs.getRootDirectories();
		for (java.nio.file.Path path : roots) {
			try (DirectoryStream<java.nio.file.Path> stream = Files.newDirectoryStream(path)) {
				for (final java.nio.file.Path subdir: stream) {
					if (subdir.toString().equals(MODULES_SUBDIR)) {
						Files.walkFileTree(subdir, new FileVisitor<java.nio.file.Path>() {

							@Override
							public FileVisitResult preVisitDirectory(java.nio.file.Path entry, BasicFileAttributes attrs)
									throws IOException {
								int count = entry.getNameCount();
								if (count < 2) return FileVisitResult.CONTINUE;
								return FileVisitResult.CONTINUE;
							}

							@Override
							public FileVisitResult visitFile(java.nio.file.Path entry, BasicFileAttributes attrs) throws IOException {
								int count = entry.getNameCount();
								if (entry == subdir || count < 3) return FileVisitResult.CONTINUE;
								if (count == 3) {
									cacheTypes(DEFAULT_PACKAGE, entry.getName(2).toString(), entry.getName(1).toString());
								} else {
									cacheTypes(entry.subpath(2, count - 1).toString(), 
										entry.getName(count - 1).toString(), entry.getName(1).toString());
								}
								return FileVisitResult.CONTINUE;
							}

							@Override
							public FileVisitResult visitFileFailed(java.nio.file.Path entry, IOException exc) throws IOException {
								return FileVisitResult.CONTINUE;
							}

							@Override
							public FileVisitResult postVisitDirectory(java.nio.file.Path entry, IOException exc) throws IOException {
								return FileVisitResult.CONTINUE;
							}
						});
					}
				}
			} catch (Exception e) {
				throw new IOException(e.getMessage());
			}
		}
	}

