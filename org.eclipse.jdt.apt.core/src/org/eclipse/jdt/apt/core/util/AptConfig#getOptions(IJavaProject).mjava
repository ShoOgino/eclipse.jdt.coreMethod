    /**
	 * Return the apt settings for this project, or the workspace settings
	 * if they are not overridden by project settings.
	 * TODO: efficiently handle the case of projects that don't have per-project settings
	 * (e.g., only cache one workspace-wide map, not a separate copy for each project).
	 * @param jproject
	 * @return
	 */
	private static Map<String,String> getOptions(IJavaProject jproject) {
		IProject project = jproject.getProject();
		assert(null != project);
		Map<String,String> options = _optionsMaps.get(project);
		if (options != null) {
			return options;
		}
		// We didn't already have an options map for this project, so create one.
		IPreferencesService service = Platform.getPreferencesService();
		// Don't need to do this, because it's the default-default already:
		//service.setDefaultLookupOrder(AptPlugin.PLUGIN_ID, null, lookupOrder);
		options = new HashMap(AptPreferenceConstants.NSETTINGS);
		
		_optionsMaps.put(project, options);
		// Load project values into the map
		ProjectScope projScope = new ProjectScope(project);
		IScopeContext[] contexts = new IScopeContext[] { projScope };
		for (String optionName : AptPreferenceConstants.OPTION_NAMES) {
			String val = service.getString(
					AptPlugin.PLUGIN_ID, 
					optionName, 
					AptPreferenceConstants.DEFAULT_OPTIONS_MAP.get(optionName), 
					contexts);
			if (val != null) {
				options.put(optionName, val);
			}
		}
		// Add change listener for this project, so we can update the map later on
		IEclipsePreferences projPrefs = projScope.getNode(AptPlugin.PLUGIN_ID);
		ChangeListener listener = new ChangeListener(project);
		projPrefs.addPreferenceChangeListener(listener);
		((IEclipsePreferences)projPrefs.parent()).addNodeChangeListener(listener);
        AptPlugin.getPlugin().getPluginPreferences().addPropertyChangeListener(listener);
		
		return options;
	}

