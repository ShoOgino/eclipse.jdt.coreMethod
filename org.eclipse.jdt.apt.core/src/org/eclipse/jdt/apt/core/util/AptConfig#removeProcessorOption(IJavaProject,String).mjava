	/**
     * Remove an option from the list of processor options.
     * This method is not synchronized.  If two threads simultaneously try 
     * to modify the processor options, one of the requests may be ignored.
     * @param jproj a project, or null to remove the option workspace-wide.
     * @param key must be a nonempty string.  It should only include the key;
     * that is, it should not start with "-A".
     * @return the old value, or null if the option was not previously set.
     */
    public static String removeProcessorOption(IJavaProject jproj, String key) {
    	String old;
    	IEclipsePreferences node;
    	synchronized (AptConfig.class) {
	    	Map<String, String> options = getRawProcessorOptions(jproj);
	    	old = options.get(key);
	    	options.remove(key);
	    	String serializedOptions = serializeProcessorOptions(options);
			IScopeContext context = (null != jproj) ? 
					new ProjectScope(jproj.getProject()) : new InstanceScope();
			node = context.getNode(AptPlugin.PLUGIN_ID);
			node.put(AptPreferenceConstants.APT_PROCESSOROPTIONS, serializedOptions);
    	}
    	// Do the flush outside of the synchronized block to avoid deadlock:
    	// flush causes a file write, which will block if the workspace is locked.
    	flushPreference(AptPreferenceConstants.APT_PROCESSOROPTIONS, node);
    	return old;
    }

