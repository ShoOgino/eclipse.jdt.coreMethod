	/**
	 * Returns all containers for the provided project, including disabled ones
	 * @param jproj The java project in question, or null for the workspace
	 */
	public static synchronized Map<FactoryContainer, Boolean> getAllContainers(IJavaProject jproj) {
		if (jproj != null) {
			Map<FactoryContainer, Boolean> projectContainers = null;
			if (_projectsWithFactoryPathLoaded.contains(jproj)) {
				projectContainers = _containerMaps.get(jproj);
			}
			else {
				// Load project-level containers
				try {
					projectContainers = FactoryPathUtil.readFactoryPathFile(jproj);
				}
				catch (CoreException ce) {
					ce.printStackTrace();
				}
				catch (IOException ioe) {
					ioe.printStackTrace();
				}
				_projectsWithFactoryPathLoaded.add(jproj);
				_containerMaps.put(jproj, projectContainers);
			}
			if (projectContainers != null) {
				return projectContainers;
			}
		}
		// Workspace
		if (!_workspaceFactoryPathLoaded) {
			// Load the workspace
			try {
				_workspaceFactories = FactoryPathUtil.readFactoryPathFile(null);
				if (_workspaceFactories == null) {
					// TODO: Need to get the default set of factories -- plugins only
				}
			}
			catch (CoreException ce) {
				ce.printStackTrace();
			}
			catch (IOException ioe) {
				ioe.printStackTrace();
			}
		}
		return new LinkedHashMap(_workspaceFactories);
	}

