    private Object getReflectionValue(final Object value, final Class targetType)
        throws Throwable
    {
        if( value == null ) return null;
        else if(value instanceof Boolean   ||
				value instanceof Byte      ||
				value instanceof Character ||
				value instanceof Double    || 
				value instanceof Float     ||
				value instanceof Integer   ||
				value instanceof Long      ||
				value instanceof Short     ||
				value instanceof String ) 
			return value;
        else if( value instanceof IVariableBinding )
		{
			final IVariableBinding varBinding = (IVariableBinding)value;
            final ITypeBinding declaringClass = varBinding.getDeclaringClass();
            if( declaringClass != null ){
                final String className = new String( declaringClass.getBinaryName() );

                ClassLoader classLoader = _env.getLatestProcessor().getClass().getClassLoader();
                Class clazz = classLoader.loadClass(className);
         
                final Field returnedField = clazz.getField( varBinding.getName() );
                if( returnedField.getType() != targetType )
                    throw new ClassCastException( targetType.getName() );
                return returnedField.get(null);
            }
		}
        else if (value instanceof Object[])
		{
			final Object[] elements = (Object[])value;
			assert targetType.isArray();
            final Class componentType = targetType.getComponentType();
            final int length = elements.length;;
            final Object array = Array.newInstance(componentType, length);
            if( length == 0) return array;

            for( int i=0; i<length; i++ ){                
                final Object returnObj = getReflectionValue( elements[i], componentType );
                // fill in the array.
                // If it is an array of some primitive type, we will need to unwrap it.
                if( componentType.isPrimitive() ){
                    if( componentType == boolean.class ){
                        final Boolean bool = (Boolean)returnObj;
                        Array.setBoolean( array, i, bool.booleanValue());
                    }
                    else if( componentType == byte.class ){
                        final Byte b = (Byte)returnObj;
                        Array.setByte( array, i, b.byteValue() );
                    }
                    else if( componentType == char.class ){
                        final Character c = (Character)returnObj;
                        Array.setChar( array, i, c.charValue() );
                    }
                    else if( componentType == double.class ){
                        final Double d = (Double)returnObj;
                        Array.setDouble( array, i, d.doubleValue() );
                    }
                    else if( componentType == float.class ){
                        final Float f = (Float)returnObj;
                        Array.setFloat( array, i, f.floatValue() );
                    }
                    else if( componentType == int.class ){
                        final Integer integer = (Integer)returnObj;
                        Array.setInt( array, i, integer.intValue() );
                    }
                    else if( componentType == long.class ){
                        final Long l = (Long)returnObj;
                        Array.setLong( array, i, l.longValue() );
                    }
                    else if( componentType == short.class ){
                        final Short s = (Short)returnObj;
                        Array.setShort( array, i, s.shortValue() );
                    }
                    else {
                        throw new IllegalStateException("unrecognized primitive type: "  + componentType ); //$NON-NLS-1$
                    }
                }
                else{
                    Array.set( array, i, returnObj );
                }
            }
		}
		// caller should have caught this case.
        else if( value instanceof ITypeBinding )
			throw new IllegalStateException();
		
        else if( value instanceof IResolvedAnnotation )
		{
			return Factory.createAnnotationMirror((IResolvedAnnotation)value, _annotated, _env);
		}

        return null;
    }

