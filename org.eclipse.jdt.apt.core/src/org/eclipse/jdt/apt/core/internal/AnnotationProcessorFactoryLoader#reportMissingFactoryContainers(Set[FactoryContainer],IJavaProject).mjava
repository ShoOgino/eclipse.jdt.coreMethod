	/** 
	 * Enter problem markers for factory containers that could not be found on 
	 * disk.  This routine does not check whether markers already exist.
	 * See class comments for information about the lifecycle of these markers.
	 * @param jarName the name of the jar file.  This string is used only in
	 * the text of the message, so it doesn't matter whether it's a relative
	 * path, absolute path, or complete garbage.
	 * @param jproj must not be null.  
	 */
	private void reportMissingFactoryContainers(Set<FactoryContainer> badContainers, IJavaProject jproj) {
		IProject project = jproj.getProject();
		for (FactoryContainer fc : badContainers) {
			try {
				String message = Messages.bind(
						Messages.AnnotationProcessorFactoryLoader_factorypath_missingLibrary, 
						new String[] {fc.getId(), project.getName()});
				IMarker marker = project.createMarker(AptPlugin.APT_BUILD_PROBLEM_MARKER);
				marker.setAttributes(
						new String[] {
							IMarker.MESSAGE, 
							IMarker.SEVERITY,
							IMarker.LOCATION
						},
						new Object[] {
							message,
							IMarker.SEVERITY_ERROR,
							Messages.AnnotationProcessorFactoryLoader_factorypath
						}
					);
			} catch (CoreException e) {
				AptPlugin.log(e, "Unable to create APT build problem marker on project " + project.getName()); //$NON-NLS-1$
			}
		}
	}

