	/**
	 * Load all Java 5 and Java 6 processors on the factory path.  This also resets the
	 * APT-related build problem markers.  Results are saved in the factory caches.
	 * @param containers an ordered map.
	 */
	private void loadFactories( 
			Map<FactoryContainer, FactoryPath.Attributes> containers, 
			IJavaProject project,
			LoadFailureHandler failureHandler)
	{
		Map<AnnotationProcessorFactory, FactoryPath.Attributes> java5Factories = 
			new LinkedHashMap<AnnotationProcessorFactory, FactoryPath.Attributes>();
		Map<IServiceFactory, FactoryPath.Attributes> java6Factories =
			new LinkedHashMap<IServiceFactory, FactoryPath.Attributes>();
		
		removeAptBuildProblemMarkers(project);
		Set<FactoryContainer> badContainers = verifyFactoryPath(project);
		if (badContainers != null) {
			for (FactoryContainer badFC : badContainers) {
				failureHandler.addFailedFactory(badFC.getId());
				containers.remove(badFC);
			}
		}
		
		// Need to use the cached classloader if we have one
		ClassLoader iterativeClassLoader = _iterativeLoaders.get(project);
		if (iterativeClassLoader == null) {
			iterativeClassLoader = _createIterativeClassLoader(containers);
			_iterativeLoaders.put(project, iterativeClassLoader);
		}
		
		_createBatchClassLoader(containers, project);
		ClassLoader batchClassLoader = _batchLoaders.get(project);
		
		for ( Map.Entry<FactoryContainer, FactoryPath.Attributes> entry : containers.entrySet() )
		{
			try {
				final FactoryContainer fc = entry.getKey();
				final FactoryPath.Attributes attr = entry.getValue();
				assert !attr.runInBatchMode() || (batchClassLoader != null);
				ClassLoader cl = attr.runInBatchMode() ? batchClassLoader : iterativeClassLoader;
				
				// First the Java 5 factories in this container...
				List<AnnotationProcessorFactory> java5FactoriesInContainer;
				java5FactoriesInContainer = loadJava5FactoryClasses(fc, cl, project, failureHandler);
				for ( AnnotationProcessorFactory apf : java5FactoriesInContainer ) {
					java5Factories.put( apf, entry.getValue() );
				}
				
				if (AptPlugin.canRunJava6Processors()) {
					// Now the Java 6 factories.  Use the same classloader for the sake of sanity.
					List<IServiceFactory> java6FactoriesInContainer;
					java6FactoriesInContainer = loadJava6FactoryClasses(fc, cl, project, failureHandler);
					for ( IServiceFactory isf : java6FactoriesInContainer ) {
						java6Factories.put( isf, entry.getValue() );
					}
				}
			}
			catch (FileNotFoundException fnfe) {
				// it would be bizarre to get this, given that we already checked for file existence up above.
				AptPlugin.log(fnfe, Messages.AnnotationProcessorFactoryLoader_jarNotFound + fnfe.getLocalizedMessage());
			}
			catch (IOException ioe) {
				AptPlugin.log(ioe, Messages.AnnotationProcessorFactoryLoader_ioError + ioe.getLocalizedMessage());
			}
		}
		_project2Java5Factories.put(project, java5Factories);
		_project2Java6Factories.put(project, java6Factories);
	}

