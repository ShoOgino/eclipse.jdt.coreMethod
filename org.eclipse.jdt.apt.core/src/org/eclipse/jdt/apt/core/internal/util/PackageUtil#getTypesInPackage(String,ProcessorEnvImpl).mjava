	private static List<IType> getTypesInPackage(
			final String packageName, 
			final ProcessorEnvImpl env) {
		
		if (packageName == null)
			throw new IllegalArgumentException("packageName cannot be null");
		if (env == null)
			throw new IllegalArgumentException("env cannot be null");
		
		final IJavaProject project = env.getJavaProject();
		
		final List<IType> types = new ArrayList<IType>();
		
		IJavaSearchScope scope = SearchEngine.createJavaSearchScope(new IJavaElement[] {project});
		SearchPattern pattern = SearchPattern.createPattern(
				packageName + ".*", 
				IJavaSearchConstants.TYPE, 
				IJavaSearchConstants.DECLARATIONS,
				SearchPattern.R_PATTERN_MATCH);
		assert pattern != null : "Failed to create a SearchPattern for the following package name: " + packageName;
		
		SearchRequestor requestor = new SearchRequestor() {
			public void acceptSearchMatch(SearchMatch match) {
				IType type = (IType)match.getElement();
				types.add(type);
			}
		};
		
		SearchEngine engine = new SearchEngine();
		try {
			engine.search(
				pattern, 
				new SearchParticipant[] {SearchEngine.getDefaultSearchParticipant()},
				scope,
				requestor,
				null);
		}
		catch (CoreException ce) {
			// We'll return the empty array later
		}
		return types;
	}

