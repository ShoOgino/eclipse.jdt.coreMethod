	private CompilationParticipantResult preBuildNotify( PreBuildCompilationEvent pbce )
	{		
		if ( pbce == null )
			return EMPTY_PRE_BUILD_COMPILATION_RESULT;

		IFile[] buildFiles = pbce.getFiles();
		IJavaProject javaProject = pbce.getJavaProject();
		
		if ( buildFiles == null || buildFiles.length == 0 )
			return EMPTY_PRE_BUILD_COMPILATION_RESULT;

		HashSet<IFile> newFiles = new HashSet<IFile>();
		HashSet<IFile> deletedFiles = new HashSet<IFile>();
		HashMap<IFile, Set<String>> newDependencies = new HashMap<IFile, Set<String>>();
		HashMap<IFile, List<IProblem>> problems = new HashMap<IFile, List<IProblem>>(4);
		for ( int i = 0; i < buildFiles.length; i++ )
		{
			APTResult result = APTDispatch.runAPTDuringBuild( 
					_factories, 
					buildFiles[i], 
					javaProject );
			newFiles.addAll( result.getNewFiles() );			
			deletedFiles.addAll( result.getDeletedFiles() );
			newDependencies.put( buildFiles[i], result.getNewDependencies() );	
			mergeMaps(result.getProblems(), problems);
		}
		
		// for apt, new files will always trump deleted files
		for ( IFile df : deletedFiles )
			if ( newFiles.contains( df ) )
				deletedFiles.remove( df );

		return new PreBuildCompilationResult( newFiles.toArray( new IFile[ newFiles.size() ] ), deletedFiles.toArray( new IFile[ deletedFiles.size() ] ), newDependencies, problems ); 
	}

