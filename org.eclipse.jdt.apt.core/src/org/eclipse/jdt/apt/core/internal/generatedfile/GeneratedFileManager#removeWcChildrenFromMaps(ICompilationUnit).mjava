	/**
	 * Remove the generated children of a working copy from the working copy dependency maps and
	 * lists.  Typically invoked when a working copy of a parent file has been discarded by the
	 * editor; in this case we want to remove any generated working copies that it parented.
	 * <p>
	 * This method does not touch disk nor create, modify, or discard working copies.  This
	 * method is atomic with regard to data structure integrity.
	 * 
	 * @param wc a compilation unit that is not necessarily a parent or generated file
	 * @return a list of generated working copies that are no longer referenced and should
	 * be discarded by calling {@link CompilationUnitHelper#discardWorkingCopy(ICompilationUnit)}
	 */
	private synchronized Set<ICompilationUnit> removeWcChildrenFromMaps(ICompilationUnit wc)
	{
		Set<ICompilationUnit> toDiscard = new HashSet<ICompilationUnit>();
		IFile file = (IFile)wc.getResource();
		// remove all the solely parented children
		Set<ICompilationUnit> genWCs = _parentToGenWorkingCopies.getValues(file);
		for (ICompilationUnit genWC : genWCs) {
			if (!_parentToGenWorkingCopies.valueHasOtherKeys(genWC, file)) {
				toDiscard.add(genWC);
				_parentToGenWorkingCopies.remove(file, genWC);
				ICompilationUnit removedWC = _workingCopies.remove(genWC.getResource());
				assert removedWC != null && removedWC.equals(genWC) : 
					"working copy in dependency map should also be in working copies list"; //$NON-NLS-1$
			}
		}
		
		assert checkIntegrity();
		return toDiscard;
	}

