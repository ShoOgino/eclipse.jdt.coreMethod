	/**
	 * @param projectEnablesReconcile true if reconcile-time processing is enabled in the current project
	 * @param isReconcile true if this call is during reconcile, e.g., processorEnv is a ReconcileEnv
	 */
	private void dispatchToFileBasedProcessor(
			final AbstractCompilationEnv processorEnv,
			boolean projectEnablesReconcile, boolean isReconcile){

		Map<String, AnnotationTypeDeclaration> annotationDecls = processorEnv.getAnnotationTypes();
		for( Map.Entry<AnnotationProcessorFactory, FactoryPath.Attributes> entry : _factories.entrySet() ){
			if( entry.getValue().runInBatchMode() ) continue;
			AnnotationProcessorFactory factory = entry.getKey();
			//TODO in 3.4: also consider factory path attributes
			boolean reconcileSupported = projectEnablesReconcile &&
				AbstractCompilationEnv.doesFactorySupportReconcile(factory);
			if (isReconcile && !reconcileSupported)
				continue;
			Set<AnnotationTypeDeclaration> factoryDecls = getFactorySupportedAnnotations(factory, annotationDecls);
			if( factoryDecls != null ){
				if(factoryDecls.size() == 0 ){
					factoryDecls = new HashSet<>(annotationDecls.values());
					annotationDecls.clear();
				}
			}
			if (factoryDecls != null && factoryDecls.size() > 0) {
				final AnnotationProcessor processor = factory
						.getProcessorFor(factoryDecls, processorEnv);
				if (processor != null)
				{
					if ( AptPlugin.DEBUG ) {
						trace( "runAPT: invoking file-based processor " + processor.getClass().getName() + " on " + processorEnv.getFile(), //$NON-NLS-1$ //$NON-NLS-2$
								processorEnv);
					}
					processorEnv.setCurrentProcessorFactory(factory, reconcileSupported);
					processor.process();
					processorEnv.setCurrentProcessorFactory(null, false);
				}
			}

			if (annotationDecls.isEmpty())
				break;
		}
		if( ! annotationDecls.isEmpty() ){
			// TODO: (theodora) log unclaimed annotations.
		}
	}

