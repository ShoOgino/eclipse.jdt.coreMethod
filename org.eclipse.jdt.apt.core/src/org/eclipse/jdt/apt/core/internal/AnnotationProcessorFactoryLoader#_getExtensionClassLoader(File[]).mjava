    /**
     * Get a class loader for loading the language implementations.
     * This is only called in the command-line compile case; in
     * the plugin case, Eclipse does the loading.
     *
     * @param jars the list of jars in the autoload directory
     * @return a classloader that can be used to load services from these jars
     */
    private ClassLoader _getExtensionClassLoader(final File[] jars)
    {
		//TODO: check that this is actually creating the right classLoader, in the apt/Eclipse world.
        final ClassLoader myLoader = getClass().getClassLoader();
 		if (_verboseLoad)
			System.err.println("I will create my own URL class loader to load these classes; my class loader type is \"" + 
					myLoader.getClass().getName() + "\".");
		final List<URL> temp = new ArrayList<URL>(jars.length);
		for (File jar : jars) {
			try {
				final URL url = jar.toURL();
				if (_verboseLoad) System.err.println("Conversion to URL succeeded: " + url);
				temp.add(url);
			}
			catch (MalformedURLException e) {
				if (_verboseLoad) System.err.println("This URL was malformed; skipping.");
			}
		}
		final URL[] urls = temp.toArray(new URL[temp.size()]);
		final ClassLoader jarLoader = new URLClassLoader(urls, myLoader);
        return jarLoader;
    }

