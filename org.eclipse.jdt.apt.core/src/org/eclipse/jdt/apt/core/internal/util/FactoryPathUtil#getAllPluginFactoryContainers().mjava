	/**
	 * Returns an ordered list of all the plugin factory containers that have 
	 * been registered as plugins.  Note that this does not take into account 
	 * any factory plugins that have been disabled by the user's configuration.
	 * Ordering is alphabetic by plugin id.
	 */
	public static Map<FactoryContainer, Boolean> getAllPluginFactoryContainers()
	{
		class PluginContents {
			public final PluginFactoryContainer fc;
			public final boolean b;
			public PluginContents(PluginFactoryContainer fc, boolean b) {
				this.fc = fc;
				this.b = b;
			}
		}
		
		// We want the list of plugins to be uniqued and alphabetically sorted.
		Map<String, PluginContents> plugins = 
			new TreeMap<String, PluginContents>();
	
		IExtensionPoint extensionPoint = Platform.getExtensionRegistry().getExtensionPoint(
				AptPlugin.PLUGIN_ID, // name of plugin that exposes this extension point
				"annotationProcessorFactory"); //$NON-NLS-1$ - extension id

		// Iterate over all declared extensions of this extension point.  
		// A single plugin may extend the extension point more than once, although it's not recommended.
		for (IExtension extension : extensionPoint.getExtensions())
		{
			// getNamespace() returns the plugin id
			String pluginId = extension.getNamespace();
			// Iterate over the children of the extension to find one named "factories".
			for(IConfigurationElement factories : extension.getConfigurationElements())
			{
				if (!"factories".equals(factories.getName())) { //$NON-NLS-1$ - name of configElement 
					continue;
				}
				// Get enableDefault.  If the attribute is missing, default to true.
				String enableDefaultStr = factories.getAttribute("enableDefault"); //$NON-NLS-1$
				boolean enableDefault = true;
				if ("false".equals(enableDefaultStr)) { //$NON-NLS-1$
					enableDefault = false;
				}
				// Iterate over the children of the "factories" element to find all the ones named "factory".
				for (IConfigurationElement factory : factories.getChildren()) {
					if (!"factory".equals(factory.getName())) { //$NON-NLS-1$
						continue;
					}
					PluginContents pc = plugins.get(pluginId);
					if ( pc == null )
					{
						PluginFactoryContainer fc = new PluginFactoryContainer(pluginId);
						pc = new PluginContents(fc, enableDefault);
						plugins.put( pluginId, pc );
					}
					pc.fc.addFactoryName( factory.getAttribute("class") ); //$NON-NLS-1$
				}
			}
		}
		Map<FactoryContainer, Boolean> map = new LinkedHashMap<FactoryContainer, Boolean>();
		for (PluginContents pc : plugins.values()) {
			map.put(pc.fc, new Boolean(pc.b));
		}
		return map;
	}

