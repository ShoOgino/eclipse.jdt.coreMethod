	/**
	 * Returns an ordered list of all the plugin factory containers that have 
	 * been registered as plugins.  Note that this does not take into account 
	 * any factory plugins that have been disabled by the user's configuration.
	 * Ordering is alphabetic by plugin id.
	 */
	public static List<PluginFactoryContainer> getAllPluginFactoryContainers()
	{
		// We want the list of plugins to be uniqued and alphabetically sorted.
		Map<String, PluginFactoryContainer> containers = 
			new TreeMap<String, PluginFactoryContainer>();
	
		IExtensionPoint extension = Platform.getExtensionRegistry().getExtensionPoint(
				"org.eclipse.jdt.apt.core",  //$NON-NLS-1$ - name of plugin that exposes this extension
				"annotationProcessorFactory"); //$NON-NLS-1$ - extension id

		IExtension[] extensions =  extension.getExtensions();
		// Iterate over all declared extensions of this extension point.  
		// A single plugin may extend the extension point more than once.
		for(int i = 0; i < extensions.length; i++) 
		{
			IConfigurationElement [] configElements = extensions[i].getConfigurationElements();
			// Iterate over all the factories in a single extension declaration.
			// An extension may define more than one factory.
			for(int j = 0; j < configElements.length; j++)
			{
				String elementName = configElements[j].getName();
				if ( "factory".equals( elementName ) ) //$NON-NLS-1$ - name of configElement 
				{ 
					String pluginId = extensions[i].getNamespace();
					PluginFactoryContainer container = containers.get(pluginId);
					if ( container == null )
					{
						// getNamespace() returns the plugin id
						container = new PluginFactoryContainer(pluginId);
						containers.put( pluginId, container );
					}
					container.addFactoryName( configElements[j].getAttribute("class") );
				}
			}
		}
		List<PluginFactoryContainer> list = new ArrayList<PluginFactoryContainer>(containers.values());
		
		return list;
	}

