	/**
	 * @param curResult
	 * @param lastGeneratedFiles files generated from previous apt run.
	 * @param generatedFiles all files generated from current apt run.
	 * @param modifiedGeneratedFiles new generated files or files differs from those from
	 *        previous run.   
	 * @param problems problems from current apt run.
	 * @param deps
	 * @param gfm
	 * @param processorEnv
	 */
	private void reportResult(
			BuildContext curResult,
			Set<IFile> java5GeneratedFiles,
			Set<IFile> modifiedGeneratedFiles,
			List<? extends CategorizedProblem> problems,
			Set<String> deps,
			GeneratedFileManager gfm, 
			BuildEnv processorEnv)
	{
		// Combine files generated by Java 5 and Java 6 processing phases
		Set<IFile> allGeneratedFiles = null;
		Set<IFile> java6GeneratedFiles = AptCompilationParticipant.getInstance().getJava6GeneratedFiles();
		if (java5GeneratedFiles == null || java5GeneratedFiles.isEmpty()) {
			if (java6GeneratedFiles.isEmpty()) {
				allGeneratedFiles = Collections.emptySet();
			}
			else {
				allGeneratedFiles = java6GeneratedFiles;
			}
		}
		else {
			if (java6GeneratedFiles.isEmpty()) {
				allGeneratedFiles = java5GeneratedFiles;
			}
			else {
				allGeneratedFiles = new HashSet<IFile>(java6GeneratedFiles);
				allGeneratedFiles.addAll(java5GeneratedFiles);
			}
		}
		
		// figure out exactly what got deleted
		final List<IFile> deletedFiles = new ArrayList<IFile>(); 
		IFile parentFile = curResult.getFile();
		cleanupNoLongerGeneratedFiles(
				parentFile, 
				allGeneratedFiles, 
				gfm,
				processorEnv,
				deletedFiles);
		// report newly created or modified generated files
		int numNewFiles = modifiedGeneratedFiles.size();
		if( numNewFiles > 0 ){
			final IFile[] newFilesArray = new IFile[numNewFiles];
			curResult.recordAddedGeneratedFiles(modifiedGeneratedFiles.toArray(newFilesArray));
		}
		
		// report deleted file.
		int numDeletedFiles = deletedFiles.size();
		if(numDeletedFiles > 0){
			final IFile[] deletedFilesArray = new IFile[numDeletedFiles];
			curResult.recordDeletedGeneratedFiles(deletedFiles.toArray(deletedFilesArray));
		}
		
		// report problems
		final int numProblems = problems.size();
		if( numProblems > 0 ){
			final CategorizedProblem[] catProblemsArray = new CategorizedProblem[numProblems];
			curResult.recordNewProblems(problems.toArray(catProblemsArray));
			// Tell compilation participant about the problems, so it can report them
			// again without reprocessing if a file is resubmitted.
			_problemRecorder.put(curResult.getFile(), catProblemsArray);
		}
		
		// report dependency
		final int numDeps = deps.size();
		if( numDeps > 0 ){
			final String[] depsArray = new String[numDeps];
			curResult.recordDependencies(deps.toArray(depsArray));
		}
	}

