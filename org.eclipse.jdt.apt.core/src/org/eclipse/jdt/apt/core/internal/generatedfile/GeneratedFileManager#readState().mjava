	/**
	 * Reads the last serialized build state. This includes dependency
	 * information so that we do not need to do a clean build in order to recreate
	 * our dependencies.
	 * 
	 * File format:
	 * 
	 * int version
	 * int sizeOfMap
	 *    String parentIFilePath
	 *    int numberOfChildren
	 *      String childIFilePath
	 * 
	 * We have two maps (_parentFile2GeneratedFiles and _generatedFile2ParentFiles)
	 * in order to do bi-directional lookups, but the
	 * information is redundant, so we only need to deserialize one.
	 * 
	 */
	private synchronized void readState() {
		File file = getSerializationFile(_jProject.getProject());
		if (file == null || !file.exists()) {
			// We'll just start with no dependencies
			return;
		}
		DataInputStream in = null;
		try {
			in= new DataInputStream(new BufferedInputStream(new FileInputStream(file)));
			int version = in.readInt();
			if (version != SERIALIZATION_VERSION) {
				throw new IOException("Dependency map file version does not match. Expected "  //$NON-NLS-1$
						+ SERIALIZATION_VERSION + ", but found " + version); //$NON-NLS-1$
			}
			int sizeOfMap = in.readInt();
			
			// For each entry, we'll have a parent and a set of children, 
			// which we can drop into the parent -> child map.
			for (int parentIndex=0; parentIndex<sizeOfMap; parentIndex++) {
				String parentPath = in.readUTF();
				IFile parent = convertPathToIFile(parentPath);
				Set<IFile> children = new HashSet<IFile>();
				_parentFile2GeneratedFiles.put(parent, children);
				
				int numChildren = in.readInt();
				for (int childIndex = 0; childIndex<numChildren; childIndex++) {
					String childPath = in.readUTF();
					IFile child = convertPathToIFile(childPath);
					// add the child to the parent->child map
					children.add(child);
					
					// Now we need to update the child -> parents map
					Set<IFile> parentSet = _generatedFile2ParentFiles.get(child);
					if (parentSet == null) {
						parentSet = new HashSet<IFile>();
						_generatedFile2ParentFiles.put(child, parentSet);
					}
					parentSet.add(parent);
				}
			}
		}
		catch (IOException ioe) {
			// We can safely continue without having read our dependencies.
			AptPlugin.log(ioe, "Could not deserialize APT dependencies"); //$NON-NLS-1$
		}
		finally {
			if (in != null) {
				try {in.close();} catch (IOException ioe) {}
			}
		}
	}

