    /**
     * Discover and load all annotation processor factories.
     * @param factoryClassName if specified, only this factory will be loaded.
     * @param factoryPaths if specified, this will be used instead of classpath.
     */
    private void _loadFromJars (final String factoryClassName, final File[] factoryPaths)
    {
        final long start = System.nanoTime();
		File[] jarPath;

		// Create an appropriate loader.  If factoryPaths is set, use it; otherwise use classpath.
        ClassLoader factoryLoader = null;
		if (factoryPaths.length > 0) {
			factoryLoader = _getExtensionClassLoader(factoryPaths);
			jarPath = factoryPaths;
		}
		else {
			factoryLoader = getClass().getClassLoader();
			jarPath = new File[0]; //TODO: how can I list all jars on compile cmdline classPath?
		}

		// If factoryClassName is specified, load only that; otherwise search all jars.
        if( factoryClassName != null ){
			_loadFactory(factoryClassName, factoryLoader);
			return;
        }
        else {
            final Set<String> classNames = new HashSet<String>();
			for (File jar : jarPath) {
                classNames.addAll(_getServiceClassnamesFromJar(jar));
			}
            for (String className : classNames) {
                final long loadStart = System.nanoTime();
                _loadFactory(className, factoryLoader);
                if (_verboseLoad) {
                    System.err.printf("\tLoading APT factory %s took %.2f seconds.", 
							className, (System.nanoTime() - loadStart) / 1000000000.0);
                    System.err.println();
                    System.err.println();
                }
            }
        }

        if (_verboseLoad) {
            System.err.println();
            System.err.printf("Loading all APT factories took %.2f seconds.", (System.nanoTime() - start) / 1000000000.0);
            System.err.println();
            System.err.println();
        }
    }

