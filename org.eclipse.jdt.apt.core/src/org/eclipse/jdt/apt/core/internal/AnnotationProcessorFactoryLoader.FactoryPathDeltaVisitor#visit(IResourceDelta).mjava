		/**
		 * @return true to visit children
		 */
		@Override
		public boolean visit(IResourceDelta delta) {
			switch (delta.getKind()) {
			default:
				return true;
			case IResourceDelta.ADDED :
			case IResourceDelta.REMOVED :
			case IResourceDelta.CHANGED :
				break;
			}
			// If the resource is a factory path file, then the project it
			// belongs to is affected.
			IResource res = delta.getResource();
			if (res == null) {
				return true;
			}
			IProject proj = res.getProject();
			if (FactoryPathUtil.isFactoryPathFile(res)) {
				addAffected(Collections.singleton(JavaCore.create(proj)));
				return true;
			}
			// If the resource is a jar file named in at least one factory
			// path, then the projects owning those factorypaths are affected.
			if (res.getType() != IResource.FILE) {
				return true;
			}
			IPath relativePath = res.getFullPath();
			String ext = relativePath.getFileExtension();
			try {
				if (JAR_EXTENSION.equals(ext)) {
					IPath absolutePath = res.getLocation();
					if (absolutePath == null) {
						synchronized (cacheMutex) {
							// Jar file within a deleted project.  In this case getLocation()
							// returns null, so we can't get a canonical path.  Bounce every
							// factory path that contains anything resembling this jar.
							for (Entry<String, Set<IJavaProject>> entry : _container2Project.entrySet()) {
								IPath jarPath = new Path(entry.getKey());
								if (relativePath.lastSegment().equals(jarPath.lastSegment())) {
									addAffected(entry.getValue());
								}
							}
						}
					}
					else {
						// Lookup key is the canonical path of the resource
						String key = null;
						key = absolutePath.toFile().getCanonicalPath();

						synchronized (cacheMutex) {
							Set<IJavaProject> projects = _container2Project.get(key);
							if (projects != null) {
								addAffected(projects);
							}
						}
					}
				}
			} catch (Exception e) {
				AptPlugin.log(e,
					"Couldn't determine whether any factory paths were affected by change to resource " + res.getName()); //$NON-NLS-1$
			}
			return true;
		}

