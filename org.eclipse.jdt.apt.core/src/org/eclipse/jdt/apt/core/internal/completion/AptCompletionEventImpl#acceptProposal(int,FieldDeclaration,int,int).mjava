	public void acceptProposal(int relevance, FieldDeclaration field, int replaceStart, int replaceEnd) {
		final int kind = COMPLETION_FIELD_REF;
		if( field == null || ignore(kind) ) return;
		final CompletionProposal p = 
			CompletionProposal.create(kind, getCompletionOffset());
		
		final char[] fieldName = field.getSimpleName().toCharArray();
		final TypeDeclaration type = field.getDeclaringType();
		p.setName(fieldName);
		final char[] typeSig = CompletionUtils.getSignature(type); 
		p.setDeclarationSignature(typeSig);
		
		setFlags((DeclarationImpl)field, p);
		boolean isEnum = field instanceof EnumConstantDeclaration;
		
		if( isEnum ){		
			
			final String typename = type.getSimpleName();
			final char[] fullname = new char[typename.length() + fieldName.length + 1];			
			int index = 0;
			for( int i=0, len=typename.length(); i<len; i++ )
				fullname[index++] = typename.charAt(i);				
			fullname[index++] = '.';
			System.arraycopy(fieldName, 0, fullname, index, fieldName.length);
			
			// set the completion text itself
			p.setCompletion(fullname);
			
			// set the type of the constant which is the same as the declaration types
			p.setSignature(typeSig);
		}
		else{
			p.setCompletion(fieldName);
			p.setSignature( CompletionUtils.getSignature(field.getType()));
		}
		
		// set relevance and replacement range.
		p.setReplaceRange(replaceStart, replaceEnd);	
		p.setRelevance( relevance < 1 ? 1 : relevance );
		
		_origEvent.accept(p);
	}

