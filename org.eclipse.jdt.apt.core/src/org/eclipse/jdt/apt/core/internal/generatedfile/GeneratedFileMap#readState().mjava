	/**
	 * Reads the last serialized build state into memory. This includes dependency
	 * information so that we do not need to do a clean build in order to recreate
	 * our dependencies.
	 *
	 * File format:
	 *
	 * int version
	 * int sizeOfMap
	 *    String parentIFilePath
	 *    int numberOfChildren
	 *      String childIFilePath
	 *
	 * This method is not synchronized because it is called only from this object's constructor.
	 */
	private void readState() {
		File file = getStateFile(_proj, _isTestCode);
		if (file == null || !file.exists()) {
			// We'll just start with no dependencies
			return;
		}
		DataInputStream in = null;
		try {
			in= new DataInputStream(new BufferedInputStream(new FileInputStream(file)));
			int version = in.readInt();
			if (version != SERIALIZATION_VERSION) {
				throw new IOException("Dependency map file version does not match. Expected "  //$NON-NLS-1$
						+ SERIALIZATION_VERSION + ", but found " + version); //$NON-NLS-1$
			}
			int sizeOfMap = in.readInt();

			// For each entry, we'll have a parent and a set of children,
			// which we can drop into the parent -> child map.
			for (int parentIndex=0; parentIndex<sizeOfMap; parentIndex++) {
				String parentPath = in.readUTF();
				IFile parent = convertPathToIFile(parentPath);
				int numChildren = in.readInt();
				for (int childIndex = 0; childIndex<numChildren; childIndex++) {
					String childPath = in.readUTF();
					IFile child = convertPathToIFile(childPath);
					// add the child to the parent->child map
					put(parent, child);
				}
			}

			// Now the _flags map:
			int sizeOfFlags = in.readInt();
			for (int i = 0; i < sizeOfFlags; ++i) {
				String childPath = in.readUTF();
				IFile child = convertPathToIFile(childPath);
				if (!containsValue(child)) {
					throw new IOException("Error in generated file attributes: did not expect file " + childPath); //$NON-NLS-1$
				}

				int attributeCount = in.readInt();
				EnumSet<Flags> flags = EnumSet.noneOf(Flags.class);
				for (int j = 0; j < attributeCount; ++j) {
					String attr = in.readUTF();
					Flags f = Flags.valueOf(attr);
					flags.add(f);
				}
				_flags.put(child, flags);
			}

			// our serialized and in-memory states are now identical
			clearDirtyBit();
		}
		catch (IOException ioe) {
			// Avoid partial initialization
			clear();
			// We can safely continue without having read our dependencies.
			AptPlugin.logWarning(ioe, "Could not read APT dependencies: generated files may not be deleted until the next clean"); //$NON-NLS-1$
		}
		catch (IllegalArgumentException iae) {
			// Avoid partial initialization
			clear();
			// We can safely continue without having read our dependencies.
			AptPlugin.logWarning(iae, "Could not read APT dependencies: generated files may not be deleted until the next clean"); //$NON-NLS-1$
		}
		finally {
			if (in != null) {
				try {in.close();} catch (IOException ioe) {}
			}
		}
	}

