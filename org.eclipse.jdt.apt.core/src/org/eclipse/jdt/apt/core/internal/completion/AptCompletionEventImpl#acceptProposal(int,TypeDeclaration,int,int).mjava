	public void acceptProposal(int relevance, TypeDeclaration type, int replaceStart, int replaceEnd) {
		final int kind = COMPLETION_TYPE_REF;
		if( type == null || ignore(kind) ) return;
		final CompletionProposal p = 
			CompletionProposal.create(kind, getCompletionOffset());		
		
		final char[] pkgName = getPackageName(type.getPackage());
		final int pkgNameLen = pkgName.length;		
		final char[] typeName = CompletionUtils.getSignature(type);
		final char[] completion;
		if(pkgNameLen == 0)
			completion = typeName;
		else{
			// -1 to take out the dot between package portion and type name portion
			// of the type qname.
			// -2 to take out the 'L' and ';' in the signature.
			int completionLen = typeName.length - pkgNameLen - 1 - 2;
			completion = new char[completionLen];
			int index = 0;
			for( int i=pkgNameLen+1, len = typeName.length-1; i<len; i++ ){
				completion[index] = typeName[i];
			}			
		}
		setFlags((DeclarationImpl)type, p);
		p.setCompletion(completion);
		p.setDeclarationSignature(pkgName);
		p.setSignature(typeName);				
		
		// set relevance and replacement range.
		p.setReplaceRange(replaceStart, replaceEnd);	
		p.setRelevance( relevance < 1 ? 1 : relevance );
		
	}	

