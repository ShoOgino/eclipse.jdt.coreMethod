	/**
	 * Parse and fully resolve all files. 
	 * @param javaProject
	 * @param parseUnits the files to be parsed and resolved.
	 * @return the array of ast units parallel to <code>files</code>
	 * Any entry in the returned array may be <code>null</code>. 
	 * This indicates an error while reading the file. 
	 */
	public static CompilationUnit[] createASTs(
			final IJavaProject javaProject, 
			final ICompilationUnit[] parseUnits)
	{
		if( parseUnits == null ) 
			return null;
		final int len = parseUnits.length;
		if( len == 0 )
			return NO_AST_UNITs;
		
		class CompilationUnitsRequestor extends ASTRequestor
		{	
			CompilationUnit[] domUnits = new CompilationUnit[len];
			CompilationUnitsRequestor(){
				for( int i=0; i<len; i++ ){
					// make sure we will not get any null.
					// setting it to an empty unit will guarantee that if the 
					// creation failed, the apt dispatch will do the cleanup work properly.
					domUnits[i] = EMPTY_AST_UNIT;
				}
			}
			public void acceptAST(ICompilationUnit source, CompilationUnit ast) {
				for( int i=0; i<len; i++ ){
					if( source == parseUnits[i] ){
						domUnits[i] = ast;
						break;
					}
				}
			}
		}
		
		CompilationUnitsRequestor requestor = new CompilationUnitsRequestor();
		ASTParser p = ASTParser.newParser( AST.JLS3 );
		p.setResolveBindings( true );
		p.setProject( javaProject );
		p.setKind( ASTParser.K_COMPILATION_UNIT );
		p.createASTs( parseUnits, NO_KEYS,  requestor, null);
		
		return requestor.domUnits;
	}

