	/**
	 * @param binding must be correspond to a type, method or field declaration
	 * @return the file that contains the declaration of given binding.
	 */
	public IFile getDeclaringFileForBinding(final IBinding binding)
	{
		assert binding.getKind() == IBinding.TYPE ||
		       binding.getKind() == IBinding.METHOD ||
		       binding.getKind() == IBinding.VARIABLE ;
		// check to see whether it is in the current file.
		IFile file = searchLocallyForIFile(binding);
		if( file != null ) 
			return file;
	
		final IMember member = (IMember)binding.getJavaElement();
		if( member != null ){
			final ICompilationUnit unit = member.getCompilationUnit();
			return (IFile)unit.getResource();
		}
		else{
			final ITypeBinding type = getDeclaringClass(binding);
			assert type.isTopLevel() : "type must be top-level type"; //$NON-NLS-1$
			final String qname = type.getQualifiedName();
			final String pathname = qname.replace('.', File.separatorChar);
			final IPath path = Path.fromOSString(pathname);
			try{
				// the element would be a compilation unit.
				final IJavaElement element = _javaProject.findElement(path);
				if( element == null ) return null;
				return (IFile)element.getResource();
			}
			catch(JavaModelException e){
				throw new IllegalStateException(e);
			}
		}
	}

