	private void filterFilesForProcessing(final IFile[] orig)
	{			
		int numFiles = orig.length;
		if( numFiles == 0 ){
			_allFilesRequireProcessing = NO_FILES;
			_remainingFiles = orig;
			return;
		}
		int count = 0;
		boolean[] needProcess = new boolean[numFiles];
		for( int i=0; i<numFiles; i++ ){
			if( ScannerUtil.hasAnnotationInstance(orig[i]) ){
				count ++;
				needProcess[i] = true;
			}
			else{
				needProcess[i] = false;
			}
		}
		if( count == 0 ){
			_allFilesRequireProcessing = NO_FILES;
			_remainingFiles = orig;
			return;
		}
		
		_allFilesRequireProcessing = new IFile[count];
		_remainingFiles = count == numFiles ? NO_FILES : new IFile[numFiles-count];
		int pIndex = 0;
		int rIndex = 0;
		for( int i=0; i<numFiles; i++ ){
			if( needProcess[i] )
				_allFilesRequireProcessing[pIndex++] = orig[i];
			else
				_remainingFiles[rIndex++] = orig[i];
		}
	}

