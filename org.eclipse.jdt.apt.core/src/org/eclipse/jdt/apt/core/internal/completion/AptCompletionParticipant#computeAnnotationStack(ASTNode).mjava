	/**
	 * @param node 
	 * @return the list of annotation nodes that are parents of the parameter.
	 *         The first in the returned list is annotation 'closest' to
	 *         the parameter
	 */
	private AnnotationsImpl computeAnnotationStack(final ASTNode node)
	{
		int size = 0;
		ASTNode temp = node;
		while( temp != null ){
			if( temp instanceof Annotation ){
				size ++;
			}
			temp = temp.getParent();
		}
		if(size == 0) return null;
		temp = node;
		if(size == 1){			
			Annotation anno = null;
			while( temp != null ){
				if( temp instanceof Annotation ){
					anno = (Annotation)temp;
					final IResolvedAnnotation resolved = anno.resolveAnnotation();
					final ITypeBinding type = resolved.getAnnotationType();
					// we won't know where to dispatch, so abort.
					if( type == null || !type.isAnnotation() )
						return null;
					break;
				}
				temp = temp.getParent();
			}
			if( temp == null )
				return null;
			return new AnnotationsImpl(anno);
		}
		else{
			Annotation[] annos = new Annotation[size];
			int index = 0;
			boolean haveSomeType = false;
			while( temp != null ){
				if( temp instanceof Annotation ){
					final Annotation anno = (Annotation)temp;
					annos[index++] = anno;
					final IResolvedAnnotation resolved = anno.resolveAnnotation();
					final ITypeBinding type = resolved.getAnnotationType();
					if( type != null && type.isAnnotation() )
						haveSomeType = true;
					break;
				}
				temp = temp.getParent();
			}
			if( haveSomeType)
				return new AnnotationsImpl(annos);
			else
				return null;
		}
	}

