	/**
	 * Return the type signature of the given object. If the type of the object
	 * is one of the primitive type wrapper, the corresponding primitive
	 * type signature would be returned. If the type is of <code>java.lang.String</code>
	 * then the String type signature would be returned. 
	 * Everything else will return in an exception.
	 *  
	 * @param obj either of type <code>java.lang.String</code> or a
	 * wrapper for primitve types. 
	 * @return the type signature corresponding to the type of the parameter
	 * @throws IllegalArgumentException if <code>obj</code> is not of type
	 * <code>java.lang.String</code> or a primitive type wrapper.
	 */
	public char[] getValueTypeSignature(Object obj){
		if( obj instanceof String ){	
			// the completion type name would look funny
			// if you use slashes instead of dots. 
			// if you don't use the 'L' and ';' things will blow up
			// along the way and the exception be swallowed and you 
			// won't see your completion.  -theodora
			return "Ljava.lang.String;".toCharArray(); //$NON-NLS-1$
		}
		else{
			final String name;
			if( obj instanceof Boolean )
				name = ITypeConstants.BOOLEAN;
			else if( obj instanceof Byte )
				name = ITypeConstants.BYTE;
			else if( obj instanceof Character )
				name = ITypeConstants.CHAR;
			else if( obj instanceof Double )
				name = ITypeConstants.DOUBLE;
			else if( obj instanceof Float )
				name = ITypeConstants.FLOAT;
			else if( obj instanceof Integer )
				name = ITypeConstants.INT;
			else if( obj instanceof Long )
				name = ITypeConstants.LONG;
			else if( obj instanceof Short )
				name = ITypeConstants.SHORT;
			else
				throw new IllegalArgumentException("Invalid argument " + obj ); //$NON-NLS-1$
			return CompletionUtils.getPrimitiveSig(name);
		}
	}

