	private void _createBatchClassLoader( 
			Map<FactoryContainer, FactoryPath.Attributes> containers, 
			ClassLoader iterativeClassLoader) {
		
		assert _batchClassLoader == null : "Previous batch classloader was non-null -- it was not closed"; //$NON-NLS-1$
		
		ArrayList<File> fileList = new ArrayList<File>( containers.size() );
		for (Map.Entry<FactoryContainer, FactoryPath.Attributes> entry : containers.entrySet()) {
			FactoryPath.Attributes attr = entry.getValue();
			FactoryContainer fc = entry.getKey();
			if (attr.runInBatchMode() && fc instanceof JarFactoryContainer) {
				
				JarFactoryContainer jfc = (JarFactoryContainer)fc;
				File f = jfc.getJarFile();
				fileList.add( f );
				
			}
		}
		
		if ( fileList.size() > 0 ) {
			//_batchClassLoader = new JarClassLoader( fileList, iterativeClassLoader );
//			 Temporary revert to URLClassLoader, as the JarClassLoader doesn't properly define packages
			List<URL> urls = new ArrayList<URL>(fileList.size());
			for (File f : fileList) {
				try {
					urls.add(f.toURL());
				}
				catch (MalformedURLException mue) {
					mue.printStackTrace();
				}
			}
			URL[] urlArray = urls.toArray(new URL[urls.size()]);
			_batchClassLoader = new URLClassLoader( urlArray, AnnotationProcessorFactoryLoader.class.getClassLoader() );
		}
		else {
			// No batch classloader
			_batchClassLoader = null;
		}		
	}

