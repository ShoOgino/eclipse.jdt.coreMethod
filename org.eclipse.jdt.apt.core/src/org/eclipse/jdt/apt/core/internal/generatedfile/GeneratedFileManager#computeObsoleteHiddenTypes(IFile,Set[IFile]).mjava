	/**
	 * Calculate the list of blank working copies that are no longer needed because the
	 * files that they hide have been deleted during a build. Remove these working copies
	 * from the _hiddenBuiltTypes list and return them in a list. The caller MUST then
	 * discard the contents of the list (outside of any synchronized block) by calling
	 * CompilationUnitHelper.discardWorkingCopy().
	 * <p>
	 * This method does not touch the disk and does not create, update, or discard working
	 * copies. This method is atomic with regard to data structure integrity.
	 *
	 * @param parentFile
	 *            used to be a parent but may no longer be.
	 * @param deletedFiles
	 *            a list of files which are being deleted, which might or might not have
	 *            been hidden by blank working copies.
	 *
	 * @return a list of working copies which the caller must discard
	 */
	private synchronized List<ICompilationUnit> computeObsoleteHiddenTypes(IFile parentFile, Set<IFile> deletedFiles)
	{
		List<ICompilationUnit> toDiscard = new ArrayList<>();
		for (IFile deletedFile : deletedFiles) {
			if (_reconcileNonDeps.remove(parentFile, deletedFile)) {
				ICompilationUnit wc = _hiddenBuiltTypes.remove(deletedFile);
				if (wc != null) {
					toDiscard.add(wc);
				}
			}
		}
		assert checkIntegrity();
		return toDiscard;
	}

