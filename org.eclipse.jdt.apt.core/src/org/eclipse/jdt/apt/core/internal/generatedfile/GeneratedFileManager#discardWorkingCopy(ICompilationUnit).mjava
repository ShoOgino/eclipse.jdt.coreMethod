	/**
	 * Prepare to discard a working copy, presumably of a generated type.  
	 * Removes the working copy from the maps, removes its generated children
	 * if it had any, and returns a list of working copies which must now
	 * be discarded with {@link CompilationUnitHelper#discardWorkingCopy(ICompilationUnit)}.
	 * <p>
	 * This does not itself touch disk nor create, modify, or discard any working copies.
	 * This is atomic with respect to data structure integrity.
	 * @param wc
	 * @return a list of compilation units to discard, including <code>wc</code> itself.
	 */
	private synchronized Set<ICompilationUnit> discardWorkingCopy(ICompilationUnit wc) {
		Set<ICompilationUnit> toDiscard;
		ICompilationUnit hidingWc = _hiddenBuiltTypes.remove(wc);
		if (null != hidingWc) {
			toDiscard = Collections.singleton(hidingWc);
		}
		else {
			toDiscard = removeWcChildrenFromMaps(wc);
			IFile file = (IFile) wc.getResource();
			_parentToGenWorkingCopies.removeKey(file);
			_workingCopies.remove(wc);
			toDiscard.add(wc);
		}
		assert checkIntegrity();
		return toDiscard;
	}

