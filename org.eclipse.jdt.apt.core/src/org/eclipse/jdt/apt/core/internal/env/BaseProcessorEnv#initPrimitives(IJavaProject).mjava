	private void initPrimitives(final IJavaProject project)
	{
		if(_primitives != null ) return;
		_primitives = new PrimitiveTypeImpl[8];
		class PrimitiveBindingRequestor extends ASTRequestor
		{
			public void acceptBinding(String bindingKey, IBinding binding)
			{
				if( binding.getKind() == IBinding.TYPE ){
					if( ITypeConstants.BOOLEAN.equals(binding.getName()) ) 
						_primitives[0] = new PrimitiveTypeImpl( (ITypeBinding)binding );
					else if( ITypeConstants.BYTE.equals(binding.getName()) )
						_primitives[1] = new PrimitiveTypeImpl( (ITypeBinding)binding );
					else if( ITypeConstants.CHAR.equals(binding.getName()) )
						_primitives[2] = new PrimitiveTypeImpl( (ITypeBinding)binding );
					else if( ITypeConstants.DOUBLE.equals(binding.getName()) ) 
						_primitives[3] = new PrimitiveTypeImpl( (ITypeBinding)binding );
					else if( ITypeConstants.FLOAT.equals(binding.getName()) ) 
						_primitives[4] = new PrimitiveTypeImpl( (ITypeBinding)binding );
					else if( ITypeConstants.INT.equals(binding.getName()) ) 
						_primitives[5] = new PrimitiveTypeImpl( (ITypeBinding)binding );
					else if( ITypeConstants.LONG.equals(binding.getName()) ) 
						_primitives[6] = new PrimitiveTypeImpl( (ITypeBinding)binding );
					else if( ITypeConstants.SHORT.equals(binding.getName()) ) 
						_primitives[7] = new PrimitiveTypeImpl( (ITypeBinding)binding );
					else if( ITypeConstants.VOID.equals(binding.getName()) ) 
						_voidType = new VoidTypeImpl( (ITypeBinding)binding );
					else
						System.err.println("got unexpected type " + binding.getName()); //$NON-NLS-1$
				}
				else
					System.err.println("got unexpected binding " + binding.getClass().getName() + binding );  //$NON-NLS-1$
			}
		}

		final String[] keys = { BindingKey.createTypeBindingKey(ITypeConstants.BOOLEAN),
				BindingKey.createTypeBindingKey(ITypeConstants.BYTE),
				BindingKey.createTypeBindingKey(ITypeConstants.CHAR),
				BindingKey.createTypeBindingKey(ITypeConstants.DOUBLE),
				BindingKey.createTypeBindingKey(ITypeConstants.FLOAT),
				BindingKey.createTypeBindingKey(ITypeConstants.INT),
				BindingKey.createTypeBindingKey(ITypeConstants.LONG),
				BindingKey.createTypeBindingKey(ITypeConstants.SHORT),
				BindingKey.createTypeBindingKey(ITypeConstants.VOID)};

		final PrimitiveBindingRequestor requestor = new PrimitiveBindingRequestor();
		final ASTParser parser = ASTParser.newParser(AST.JLS3);
		parser.setProject(project);
		parser.setResolveBindings(true);
		parser.createASTs(NO_UNIT, keys, requestor, null);
	}

