    /**
     * Creates a new text file, and returns a writer for it. The file is 
     * located along with either the newly created source or newly created 
     * binary files. It may be named relative to some package (as are source 
     * and binary files), and from there by an arbitrary pathname. In a loose 
     * sense, the pathname of the new file will be the concatenation of loc, 
     * pkg, and relPath. 
     * 
     * A charset for encoding the file may be provided. If none is given, 
     * the charset used to encode source files (see createSourceFile(String)) will be used. 
     *
     * @param loc - location of the new file
     * @param pkg - package relative to which the file should be named, or the empty string if none
     * @param relPath - final pathname components of the file
     * @param charsetName - the name of the charset to use, or null if none is being explicitly specified 
     * @return - a writer for the new file 
     */
    public PrintWriter createTextFile(Filer.Location loc, String pkg, File relPath, String charsetName) 
        throws IOException 
    {
    	// TODO - clean this up
    	File f = null;
    	GeneratedFileManager gfm = GeneratedFileManager.getGeneratedFileManager( _env.getProject() );
    	if ( loc == Filer.Location.CLASS_TREE )
    	{
    		try 
    		{
    			f = gfm.getGeneratedOutputFile( _env.getJavaProject() );
    		}
    		catch ( Exception e )
    		{
    			// TODO - stop throwing this exception
    			e.printStackTrace();
    			throw new IOException();
    		}
    	}
    	else if ( loc == Filer.Location.SOURCE_TREE )
    		f = gfm.getGeneratedSourceFolder().getRawLocation().toFile();
    			


        if( pkg != null )
            f = new File( f, pkg.replace('.', File.separatorChar) );

        f = new File( f, relPath.getPath() );

        // REVIEW: for no apparent reason it is sometimes necessary to create the
        // parent dir, else an IOException occurs creating f..
        File p = f.getParentFile();
        FileSystemUtil.mkdirs( p );
        return charsetName == null ? new PrintWriter( f ) : new PrintWriter( f, charsetName );
    }

