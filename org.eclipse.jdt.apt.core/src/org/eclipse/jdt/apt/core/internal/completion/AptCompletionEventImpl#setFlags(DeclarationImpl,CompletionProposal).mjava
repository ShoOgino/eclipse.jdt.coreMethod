	private void setFlags(final DeclarationImpl decl,
						  final CompletionProposal p)
	{
		if( decl == null ) return;
		final IBinding binding = decl.getDeclarationBinding();
		if(binding == null) return;
		int flags = 0;		
	    
        final int modBits = binding.getModifiers();
	        
        if( org.eclipse.jdt.core.dom.Modifier.isAbstract(modBits) )	
        	flags |= Flags.AccAbstract;        	
        if( org.eclipse.jdt.core.dom.Modifier.isFinal(modBits) ) 		
        	flags |= Flags.AccFinal;
        if( org.eclipse.jdt.core.dom.Modifier.isNative(modBits) ) 		
        	flags |= Flags.AccNative;
        if( org.eclipse.jdt.core.dom.Modifier.isPrivate(modBits) ) 		
        	flags |= Flags.AccPrivate;
        if( org.eclipse.jdt.core.dom.Modifier.isProtected(modBits) ) 
        	flags |= Flags.AccProtected;
        if( org.eclipse.jdt.core.dom.Modifier.isPublic(modBits) ) 	
        	flags |= Flags.AccPublic;
        if( org.eclipse.jdt.core.dom.Modifier.isStatic(modBits) ) 	
        	flags |= Flags.AccStatic;
        if( org.eclipse.jdt.core.dom.Modifier.isStrictfp(modBits) ) 
        	flags |= Flags.AccStrictfp;
        if( org.eclipse.jdt.core.dom.Modifier.isSynchronized(modBits) ) 
        	flags |= Flags.AccSynchronized;
        if( org.eclipse.jdt.core.dom.Modifier.isTransient(modBits) ) 
        	flags |= Flags.AccTransient;
        if( org.eclipse.jdt.core.dom.Modifier.isVolatile(modBits) ) 	
        	flags |= Flags.AccVolatile;
        
        if( decl instanceof EnumConstantDeclaration || 
    		decl instanceof EnumDeclaration	)
        	flags |= Flags.AccEnum;
        
        p.setFlags(flags);
	}

