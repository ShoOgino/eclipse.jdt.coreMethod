	/**
	 * Get a working copy for the specified generated type.  If we already have
	 * one cached, use that; if not, create a new one.  Update the reconcile-time
	 * dependency maps.
	 * <p>
	 * This method does not touch disk, nor does it update or discard any working
	 * copies.  However, it may call CompilationUnitHelper to get a new working copy.
	 * This method is atomic with respect to data structures.
	 * 
	 * @param parentFile the IFile whose processing is causing the new type to be generated
	 * @param typeName the name of the type to be generated
	 * @param cuh the CompilationUnitHelper utility object
	 * @return a working copy ready to be updated with the new type's contents
	 */
	private synchronized ICompilationUnit getWorkingCopyForReconcile(IFile parentFile, String typeName, CompilationUnitHelper cuh)
	{
		IPackageFragmentRoot root = _generatedPackageFragmentRoot.get().root;
		IFile generatedFile = getIFileForTypeName(typeName);
		ICompilationUnit workingCopy;
		
		workingCopy = _hiddenBuiltTypes.remove(generatedFile);
		if (null != workingCopy) {
			// file is currently hidden with a blank WC. Move that WC to the regular list.
			_reconcileNonDeps.remove(parentFile, generatedFile);
			_reconcileGenTypes.put(generatedFile, workingCopy);
			_reconcileDeps.put(parentFile, generatedFile);
			if (AptPlugin.DEBUG_GFM_MAPS) AptPlugin.trace(
					"moved working copy from hidden to regular list: " + generatedFile); //$NON-NLS-1$
		} else {
			workingCopy = _reconcileGenTypes.get(generatedFile);
			if (null != workingCopy) {
				if (AptPlugin.DEBUG_GFM_MAPS) AptPlugin.trace(
						"obtained existing working copy from regular list: " + generatedFile); //$NON-NLS-1$
			} else {
				// we've not yet created a working copy for this file, so make one now.
				workingCopy = cuh.getWorkingCopy(typeName, root);
				_reconcileDeps.put(parentFile, generatedFile);
				_reconcileGenTypes.put(generatedFile, workingCopy);
				if (AptPlugin.DEBUG_GFM_MAPS) AptPlugin.trace( 
						"added new working copy to regular list: " + generatedFile); //$NON-NLS-1$
			} 
		}

		assert checkIntegrity();
		return workingCopy;
	}

