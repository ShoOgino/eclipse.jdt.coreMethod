	private static void loadJava5Factories(IExtension extension, IConfigurationElement factories) {
		// Get enableDefault.  If the attribute is missing, default to true.
		String enableDefaultStr = factories.getAttribute("enableDefault"); //$NON-NLS-1$
		boolean enableDefault = true;
		if ("false".equals(enableDefaultStr)) { //$NON-NLS-1$
			enableDefault = false;
		}

		// Create and cache a PluginFactoryContainer for this plugin.
		String pluginId = extension.getNamespaceIdentifier();
		PluginFactoryContainer pfc = new PluginFactoryContainer(pluginId, enableDefault);
		PLUGIN_CONTAINER_MAP.put(pluginId, pfc);

		// Iterate over the children of the "factories" element to find all the ones named "factory".
		for (IConfigurationElement factory : factories.getChildren()) {
			if (!"factory".equals(factory.getName())) { //$NON-NLS-1$
				continue;
			}
			String factoryName = null;
			try {
				factoryName = factory.getAttribute("class"); //$NON-NLS-1$
				Object execExt = factory.createExecutableExtension("class"); //$NON-NLS-1$ - attribute name
				if (execExt instanceof AnnotationProcessorFactory){
					assert(execExt.getClass().getName().equals(factoryName));
					PLUGIN_JAVA5_FACTORY_MAP.put( factoryName, (AnnotationProcessorFactory)execExt );
					pfc.addFactoryName(factoryName, AptPlugin.JAVA5_FACTORY_NAME);
				}
				else {
					reportFailureToLoadProcessor(null, factory.getName(), extension.getNamespaceIdentifier());
				}
			} catch(CoreException e) {
				reportFailureToLoadProcessor(e, factory.getName(), extension.getNamespaceIdentifier());
			}
		}
	}

