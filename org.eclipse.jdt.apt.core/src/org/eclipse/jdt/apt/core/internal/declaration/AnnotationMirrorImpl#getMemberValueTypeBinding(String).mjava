    /**
     * @return the type(s) of the member value named <code>membername</code>.
     * If the value is a class literal, then return the type binding corresponding to the type requested.
     * Otherwise, return the type of the expression.
     * If the value is an array initialization, then the type of each of the initialization expresion will
     * be returned. Return null if no match is found.
     */
    public ITypeBinding[] getMemberValueTypeBinding(String membername)
    {
        if( membername == null ) return null;

        if( _annoAstNode.isMarkerAnnotation() ) return null;
        else if( _annoAstNode.isSingleMemberAnnotation() ) {
            final Expression value = ((SingleMemberAnnotation)_annoAstNode).getValue();
            if(value == null) return null;
            final ITypeBinding typeBinding = _annoAstNode.resolveTypeBinding();
            if( typeBinding.isAnnotation() ){
                final IMethodBinding[] methods  = typeBinding.getDeclaredMethods();
                // There should only be one since this is a single member annotation.
                if( methods != null && methods.length != 1 ){
                    IMethodBinding elementMethod = methods[0];
                    // make sure the name matches.
                    if( elementMethod.getName().equals(membername) )
                        return getExpressionTypeBindings(value);
                }
            }
        }
        else if( _annoAstNode.isNormalAnnotation() ){
            final NormalAnnotation normalAnnotation = (NormalAnnotation)_annoAstNode;
            final List<MemberValuePair> pairs = normalAnnotation.values();
            {
               for( MemberValuePair pair : pairs ){
                    final SimpleName simpleName = pair.getName();
                    if( simpleName == null ) continue;
                    final String name = simpleName.toString();
                    if( simpleName.toString().equals(membername) )
                        return getExpressionTypeBindings(pair.getValue());
                }
            }
        }
        // didn't find it in the ast, check the default values.
        final IMethodBinding binding = getMethodBinding(membername);
        final ITypeBinding declaringClass = binding.getDeclaringClass();
        if(binding == null || declaringClass == null ) return null;

        if( declaringClass.isFromSource() ){
            final AnnotationTypeMemberDeclaration methodDecl =
                (AnnotationTypeMemberDeclaration)_env.getASTNodeForBinding(binding);
            if( methodDecl != null )
                return getExpressionTypeBindings(methodDecl.getDefault());
            else
                return null;
        }
        else{
            // todo: (theodora) handle reading default value from binary.
            return null;
        }
    }

