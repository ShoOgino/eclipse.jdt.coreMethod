	/**
	 * Cleanup the classpath and schedule a job to delete the generated source folder.
	 * @param recreate if <code>true</code> configure the generated source directory.
	 */
	private void resetGeneratedSrcFolder(final IFolder srcFolder, boolean recreate){
		// clean up the classpath first so that when we actually delete the 
		// generated source folder and won't cause a classpath error.
		if( srcFolder != null ){
			try{	
				ClasspathUtil.removeFromProjectClasspath( _aptProject.getJavaProject(), srcFolder, null );		
			}catch(JavaModelException e){
				AptPlugin.log( e, "Error occurred deleting old generated src folder " + srcFolder.getName() ); //$NON-NLS-1$
			}
		}
		
		if( recreate )
			ensureGeneratedSourceFolder();
		
		// delete the generated source folder as well as
		// all of its derived ancestors that are containers only to the 
		// generated source folder
		if( srcFolder != null ){
			IFolder folderToDelete = srcFolder;		
			for( IContainer c = srcFolder.getParent(); 
			 	 c != null && (c instanceof IFolder); 
			 	 c = c.getParent() ){
				
				try{
					// members can't be empty, there has to be at least 1.
					// will only delete the parent if it contains only the 
					// folder that we want to delete.
					if( c.isDerived() && c.members().length == 1 ){
						folderToDelete = (IFolder)c;
					}
					else
						break;
				}catch(CoreException e){
					AptPlugin.log(e, "failure while accessing member of " + c.getName() ); //$NON-NLS-1$
					break;
				}
			}
			removeFolder(folderToDelete);
		}
	}

