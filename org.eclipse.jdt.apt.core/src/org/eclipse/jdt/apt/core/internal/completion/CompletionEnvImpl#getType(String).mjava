	public TypeMirror getType(String typeQualifiedName) {
		final int length = typeQualifiedName == null ? 0 : typeQualifiedName.length();
		if( length == 0 ) return null;
		final int dotIndex = typeQualifiedName.indexOf('.');
		if(dotIndex == -1){
			switch(length)
			{
			case 3: 
				if(ITypeConstants.INT.equals(typeQualifiedName) )
					return getIntType();
				break;
			case 4:
				if(ITypeConstants.CHAR.equals(typeQualifiedName) )
					return getCharType();
				else if(ITypeConstants.BYTE.equals(typeQualifiedName) )
					return getByteType();
				else if(ITypeConstants.LONG.equals(typeQualifiedName) )
					return getLongType();
				else if(ITypeConstants.VOID.equals(typeQualifiedName) )
					return getVoidType();
				break;
			case 5:
				if(ITypeConstants.DOUBLE.equals(typeQualifiedName) )
					return getDoubleType();
				else if(ITypeConstants.FLOAT.equals(typeQualifiedName) )
					return getFloatType();
				break;
			case 7:
				if(ITypeConstants.BOOLEAN.equals(typeQualifiedName) )
					return getBooleanType();
				break;
			}			
		}
		return getTypeUtils().getDeclaredType( getTypeDeclaration(typeQualifiedName) );
	}	

