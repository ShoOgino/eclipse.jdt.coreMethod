	/**
	 * Check integrity of data structures.
	 * @return true always, so that it can be called within an assert to turn it off at runtime
	 */
	private synchronized boolean checkIntegrity() throws IllegalStateException
	{
		if (!ENABLE_INTEGRITY_CHECKS || !AptPlugin.DEBUG_GFM_MAPS) {
			return true;
		}

		// There is a 1:1 correspondence between values in _reconcileDeps and
		// keys in _reconcileGenTypes.
		Set<IFile> depChildren = _reconcileDeps.getValueSet(); // copy - safe to modify
		Set<IFile> genTypes = _reconcileGenTypes.keySet(); // not a copy!
		List<IFile> extraFiles = new ArrayList<>();
		for (IFile f : genTypes) {
			if (!depChildren.remove(f)) {
				extraFiles.add(f);
			}
		}
		if (!extraFiles.isEmpty()) {
			logExtraFiles("File(s) in reconcile-generated list but not in reconcile dependency map: ", //$NON-NLS-1$
					extraFiles);
		}
		if (!depChildren.isEmpty()) {
			logExtraFiles("File(s) in reconcile dependency map but not in reconcile-generated list: ", //$NON-NLS-1$
					depChildren);
		}

		// Every file in _clearDuringReconcile must be a value in _buildDeps.
		List<IFile> extraClearDuringReconcileFiles = new ArrayList<>();
		for (IFile clearDuringReconcile : _clearDuringReconcile) {
			if (!_buildDeps.containsValue(clearDuringReconcile)) {
				extraClearDuringReconcileFiles.add(clearDuringReconcile);
			}
		}
		if (!extraClearDuringReconcileFiles.isEmpty()) {
			logExtraFiles("File(s) in list to clear during reconcile but not in build dependency map: ", //$NON-NLS-1$
					extraClearDuringReconcileFiles);
		}

		// Every key in _hiddenBuiltTypes must be a value in _reconcileNonDeps.
		List<IFile> extraHiddenTypes = new ArrayList<>();
		for (IFile hidden : _hiddenBuiltTypes.keySet()) {
			if (!_reconcileNonDeps.containsValue(hidden)) {
				extraHiddenTypes.add(hidden);
			}
		}
		if (!extraHiddenTypes.isEmpty()) {
			logExtraFiles("File(s) in hidden types list but not in reconcile-obsoleted list: ", //$NON-NLS-1$
					extraHiddenTypes);
		}

		// There can be no parent/child pairs that exist in both _reconcileDeps
		// and _reconcileNonDeps.
		Map<IFile, IFile> reconcileOverlaps = new HashMap<>();
		for (IFile parent : _reconcileNonDeps.getKeySet()) {
			for (IFile child : _reconcileNonDeps.getValues(parent)) {
				if (_reconcileDeps.containsKeyValuePair(parent, child)) {
					reconcileOverlaps.put(parent, child);
				}
			}
		}
		if (!reconcileOverlaps.isEmpty()) {
			logExtraFilePairs("Entries exist in both reconcile map and reconcile-obsoleted maps: ",  //$NON-NLS-1$
					reconcileOverlaps);
		}

		// Every parent/child pair in _reconcileNonDeps must have a matching
		// parent/child pair in _buildDeps.
		Map<IFile, IFile> extraNonDeps = new HashMap<>();
		for (IFile parent : _reconcileNonDeps.getKeySet()) {
			for (IFile child : _reconcileNonDeps.getValues(parent)) {
				if (!_buildDeps.containsKeyValuePair(parent, child)) {
					extraNonDeps.put(parent, child);
				}
			}
		}
		if (!extraNonDeps.isEmpty()) {
			logExtraFilePairs("Entries exist in reconcile-obsoleted map but not in build map: ", //$NON-NLS-1$
					extraNonDeps);
		}

		// Values in _hiddenBuiltTypes must not be null
		List<IFile> nullHiddenTypes = new ArrayList<>();
		for (Map.Entry<IFile, ICompilationUnit> entry : _hiddenBuiltTypes.entrySet()) {
			if (entry.getValue() == null) {
				nullHiddenTypes.add(entry.getKey());
			}
		}
		if (!nullHiddenTypes.isEmpty()) {
			logExtraFiles("Null entries in hidden type list: ", nullHiddenTypes); //$NON-NLS-1$
		}

		// Values in _reconcileGenTypes must not be null
		List<IFile> nullReconcileTypes = new ArrayList<>();
		for (Map.Entry<IFile, ICompilationUnit> entry : _reconcileGenTypes.entrySet()) {
			if (entry.getValue() == null) {
				nullReconcileTypes.add(entry.getKey());
			}
		}
		if (!nullReconcileTypes.isEmpty()) {
			logExtraFiles("Null entries in reconcile type list: ", nullReconcileTypes); //$NON-NLS-1$
		}

		return true;
	}

