	/**
	 * Construction can only take place from within 
	 * the factory method, getGeneratedFileManager().
	 */
	public GeneratedFileManager(final AptProject aptProject) {
		_aptProject = aptProject;
		final IJavaProject javaProject = aptProject.getJavaProject();
		
		// register a preference listener so that we can watch for changes 
		// to the gen src dir at the project scope...
		IScopeContext projScope = new ProjectScope(aptProject.getJavaProject().getProject());
		IEclipsePreferences projPrefs = projScope.getNode(AptPlugin.PLUGIN_ID);
		IPreferenceChangeListener projListener = new IPreferenceChangeListener() {
			public void preferenceChange(PreferenceChangeEvent event) {
				if (AptPreferenceConstants.APT_GENSRCDIR.equals(event.getKey())) {
					
					setGeneratedSourceFolderName( (String)event.getNewValue() );
				}
			}
		};
		projPrefs.addPreferenceChangeListener(projListener);
		
		// ...and at the workspace scope.
		// Note we check all projects, even those that have project-specific
		// settings, when the workspace setting changes.  For projects with
		// project-specific settings, the value of the setting won't change 
		// so the request will be ignored.
		IScopeContext wkspScope = new InstanceScope();
		IEclipsePreferences wkspPrefs = wkspScope.getNode(AptPlugin.PLUGIN_ID);
		IPreferenceChangeListener wkspListener = new IPreferenceChangeListener() {
			public void preferenceChange(PreferenceChangeEvent event) {
				if (AptPreferenceConstants.APT_GENSRCDIR.equals(event.getKey())) {
					setGeneratedSourceFolderName( AptConfig.getGenSrcDir(javaProject) );
				}
			}
		};
		wkspPrefs.addPreferenceChangeListener(wkspListener);
		
		// get generated source dir from config 
		// default value is set in org.eclipse.jdt.apt.core.internal.util.AptCorePreferenceInitializer
		_generatedSourceFolderName = AptConfig.getString( javaProject, AptPreferenceConstants.APT_GENSRCDIR);
		// properly initialize the GeneratedFileManager if project path is up-to-date and the generated 
		// source folder is there.
		final IFolder folder = javaProject.getProject().getFolder(_generatedSourceFolderName);
		if(folder.exists()){
			boolean uptodate = false;
			try{
				uptodate = isProjectClassPathUpToDate(javaProject, null, folder.getFullPath(), null);
			}catch(JavaModelException e){
				e.printStackTrace();
			}
			if( uptodate )
				_generatedSourceFolder = folder;
		}	
	}

