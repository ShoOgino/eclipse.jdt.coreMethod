    // does not generate dependencies
    public TypeDeclaration getTypeDeclaration(String name)
    {	
    	if( name == null || name.length() == 0 ) return null;

    	//First check cache
    	TypeDeclaration result = _typeCache.get(name);
    	if (result != null) return result;

    	// get rid of the generics parts.
		final int index = name.indexOf('<');
		if( index != -1 )
			name = name.substring(0, index);
		
		// first see if it is one of the well known types.
		// any AST is as good as the other.		
		ITypeBinding typeBinding = null;
		if( _astRoot != null )
			typeBinding = _astRoot.getAST().resolveWellKnownType(name);
		String typeKey = BindingKey.createTypeBindingKey(name);
		if(typeBinding == null){
			// then look into the current compilation units			
			ASTNode node = null;
			if( _astRoot != null )
				node = _astRoot.findDeclaringNode(typeKey);
						
			if( node != null ){
				final int nodeType = node.getNodeType();
				if( nodeType == ASTNode.TYPE_DECLARATION ||
					nodeType == ASTNode.ANNOTATION_TYPE_DECLARATION ||
					nodeType == ASTNode.ENUM_DECLARATION )
				typeBinding = ((AbstractTypeDeclaration)node).resolveBinding();
			}
		}
		
		// finally go search for it in the universe.
		if (typeBinding == null)
			typeBinding = getTypeDefinitionBindingFromName(name);
		
		result = Factory.createReferenceType(typeBinding, this);
    	
    	// update cache
    	if (result != null)
    		_typeCache.put(name, result);
    	return result;
    }

