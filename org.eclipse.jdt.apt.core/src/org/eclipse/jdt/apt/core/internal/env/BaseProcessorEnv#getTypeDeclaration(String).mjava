    // does not generated dependencies
    public TypeDeclaration getTypeDeclaration(String name)
    {	
    	if( name == null ) return null;
		// get rid of the generics parts.
		final int index = name.indexOf('<');
		if( index != -1 )
			name = name.substring(0, index);

		// first look into the current compilation unit
		final String typeKey = BindingKey.createTypeBindingKey(name);
		final ASTNode node = _astCompilationUnit.findDeclaringNode(typeKey);
		ITypeBinding typeBinding = null;
		if( node != null ){
			final int nodeType = node.getNodeType();
			if( nodeType == ASTNode.TYPE_DECLARATION ||
				nodeType == ASTNode.ANNOTATION_TYPE_DECLARATION ||
				nodeType == ASTNode.ENUM_DECLARATION )
			typeBinding = ((AbstractTypeDeclaration)node).resolveBinding();
		}
		if( typeBinding != null )
			return Factory.createReferenceType(typeBinding, this);

		// then go search for it else where.
		typeBinding = getTypeBinding(typeKey);
		if( typeBinding != null ){			
			return Factory.createReferenceType(typeBinding, this);
		}

		return null;
    }

