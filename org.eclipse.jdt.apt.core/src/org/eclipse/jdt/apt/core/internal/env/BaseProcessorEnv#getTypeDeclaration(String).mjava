    // does not generate dependencies
    public TypeDeclaration getTypeDeclaration(String name)
    {	
    	if( name == null || name.length() == 0 ) return null;

    	// get rid of the generics parts.
		final int index = name.indexOf('<');
		if( index != -1 )
			name = name.substring(0, index);
		
    	//First check cache
    	TypeDeclaration result = _typeCache.get(name);
    	if (result != null) return result;
    	if (_typeCache.containsKey(name)) {
    		// We've seen this before, and it doesn't exist
    		return null;
    	}

		// first see if it is one of the well known types.
		// any AST is as good as the other.		
		ITypeBinding typeBinding = null;
		CompilationUnit[] asts = getAsts();
		
		if( asts != null && asts.length > 0) {
			typeBinding = asts[0].getAST().resolveWellKnownType(name);

			if(typeBinding == null){
				// then look into the current compilation units			
				ASTNode node = null;
				String typeKey = BindingKey.createTypeBindingKey(name);
				for (int i=0, len=asts.length;i<len;i++) {
					node = asts[i].findDeclaringNode(typeKey);
							
					if( node != null ){
						final int nodeType = node.getNodeType();
						if( nodeType == ASTNode.TYPE_DECLARATION ||
							nodeType == ASTNode.ANNOTATION_TYPE_DECLARATION ||
							nodeType == ASTNode.ENUM_DECLARATION )
						typeBinding = ((AbstractTypeDeclaration)node).resolveBinding();
						break;
					}
				}
			}
		}
		
		// finally go search for it in the universe.
		if (typeBinding == null) {
			try {
				typeBinding = getTypeDefinitionBindingFromName(name);
			}
			catch (ArrayIndexOutOfBoundsException e) {
				// https://bugs.eclipse.org/bugs/show_bug.cgi?id=133947
				// if the name is invalid, JDT can throw an ArrayIndexOutOfBoundsException
				// We'll ignore this and return null to the user
				AptPlugin.log(e, "Unable to get type definition binding for: " + name); //$NON-NLS-1$
			}
		}
		
		result = Factory.createReferenceType(typeBinding, this);
    	
    	// update cache, nulls included
    	_typeCache.put(name, result);
    	return result;
    }

