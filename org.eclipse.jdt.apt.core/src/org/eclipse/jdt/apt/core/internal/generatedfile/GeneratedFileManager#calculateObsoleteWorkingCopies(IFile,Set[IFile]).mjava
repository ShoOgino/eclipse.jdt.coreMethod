	/**
	 * Prepare a list of working copies which are no longer being generated and can be
	 * discarded.
	 * <p>
	 * This method does not touch the disk and does not create, update, or discard working
	 * copies. This method is atomic with regard to data structure integrity.
	 * 
	 * @param parentFile
	 *            only children generated solely by this parent will be added to the list
	 *            to be discarded.
	 * @param newlyGeneratedFiles
	 *            a list of files which will be preserved; typically these are the files
	 *            that were generated on the most recent reconcile.
	 * 
	 * @return a list of working copies which are no longer in use and which should be
	 *         discarded by calling
	 *         {@link CompilationUnitHelper#discardWorkingCopy(ICompilationUnit)}.
	 */
	private synchronized List<ICompilationUnit> calculateObsoleteWorkingCopies(IFile parentFile,
			Set<IFile> newlyGeneratedFiles)
	{
		// Discard generated types that were never built and thus exist only
		// as in-memory working copies.
		// Only discard them if they have no other parents.
		List<ICompilationUnit> toDiscard = new ArrayList<ICompilationUnit>();
		Set<ICompilationUnit> generatedFromReconcile = _parentToGenWorkingCopies.getValues(parentFile);
		for (ICompilationUnit wc : generatedFromReconcile) {
			// spare types generated in the last round
			IFile generatedFile = (IFile) wc.getResource();
			if (!newlyGeneratedFiles.contains(generatedFile)) {
				Set<IFile> parentsOfGeneratedWC = _parentToGenWorkingCopies.getKeys(wc);
				if (parentsOfGeneratedWC.size() == 1 && parentsOfGeneratedWC.contains(parentFile)) {
					_parentToGenWorkingCopies.remove(parentFile, wc);
					assert !_parentToGenWorkingCopies.containsValue(wc) : "Working copy unexpectedly remains in dependency map: " + //$NON-NLS-1$
					wc.getElementName() + " <- " + _parentToGenWorkingCopies.getKeys(wc); //$NON-NLS-1$
					_workingCopies.remove(generatedFile);
					toDiscard.add(wc);
				}
			}
		}
		assert checkIntegrity();
		return toDiscard;
	}

