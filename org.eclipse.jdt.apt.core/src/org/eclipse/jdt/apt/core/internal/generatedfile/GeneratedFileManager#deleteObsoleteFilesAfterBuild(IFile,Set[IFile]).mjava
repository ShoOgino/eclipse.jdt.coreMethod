	/**
	 * Invoked at the end of a build to delete files that are no longer parented by
	 * <code>parentFile</code>. Files that are multiply parented will not actually be
	 * deleted, but the association from this parent to the generated file will be
	 * removed, so that when the last parent ceases to generate a given file it will be
	 * deleted at that time.
	 *
	 * @param newlyGeneratedFiles
	 *            the set of files generated by <code>parentFile</code> on the most
	 *            recent compilation; these files will be spared deletion.
	 * @return the set of source files that were actually deleted, or an empty set.
	 *            The returned set does not include non-source (e.g. text or xml) files.
	 */
	public Set<IFile> deleteObsoleteFilesAfterBuild(IFile parentFile, Set<IFile> newlyGeneratedFiles)
	{
		Set<IFile> deleted;
		List<ICompilationUnit> toDiscard = new ArrayList<>();
		Set<IFile> toReport = new HashSet<>();
		deleted = computeObsoleteFiles(parentFile, newlyGeneratedFiles, toDiscard, toReport);

		for (IFile toDelete : deleted) {
			if (AptPlugin.DEBUG_GFM) AptPlugin.trace(
					"deleted obsolete file during build: " + toDelete); //$NON-NLS-1$
			deletePhysicalFile(toDelete);
		}

		// Discard blank WCs *after* we delete the corresponding files:
		// we don't want the type to become briefly visible to a reconcile thread.
		for (ICompilationUnit wcToDiscard : toDiscard) {
			_CUHELPER.discardWorkingCopy(wcToDiscard);
		}

		return toReport;
	}

