	@SuppressWarnings("unchecked") // DOM AST API returns raw collections
	private IAnnotationBinding[] getAnnotationInstancesFromAST()
	{	
		IAnnotationBinding[] instances = null;
		List extendsMods = null;
		switch( _astNode.getNodeType() )
		{
		case ASTNode.TYPE_DECLARATION:
		case ASTNode.ANNOTATION_TYPE_DECLARATION:
		case ASTNode.ENUM_DECLARATION:
		case ASTNode.ANNOTATION_TYPE_MEMBER_DECLARATION:
		case ASTNode.METHOD_DECLARATION:
		case ASTNode.FIELD_DECLARATION:
		case ASTNode.ENUM_CONSTANT_DECLARATION:
			extendsMods = ((BodyDeclaration)_astNode).modifiers();
			break;
			
		case ASTNode.SINGLE_VARIABLE_DECLARATION:
			extendsMods = ((SingleVariableDeclaration)_astNode).modifiers();
			break;
		case ASTNode.VARIABLE_DECLARATION_FRAGMENT:
			final ASTNode parent = ((VariableDeclarationFragment)_astNode).getParent();
			if( parent instanceof BodyDeclaration )
				extendsMods = ((BodyDeclaration)parent).modifiers();
			break;
			
		default:			
			throw new IllegalStateException();
		}
		if( extendsMods != null ){
			int count = 0;
			for( Object obj : extendsMods ){
				final IExtendedModifier extMod = (IExtendedModifier)obj;
				if( extMod.isAnnotation() )
					count ++;
			}
			instances = new IAnnotationBinding[count];
			int index = 0;
			for( Object obj : extendsMods ){
				final IExtendedModifier extMod = (IExtendedModifier)obj;
				if( extMod.isAnnotation() )
					instances[index ++] = 
						((org.eclipse.jdt.core.dom.Annotation)extMod).resolveAnnotationBinding();
			}
		}
		return instances;
	}

