	public void run(IProgressMonitor monitor) 
	{
		assert( _file == null || _compilationUnit == null ) : "Either _file should be null or _compilationUnit should be null.";		
		
		//
		//  bail-out early if there aren't factories, or if there aren't any annotation instances
		// 
		if ( _factories == null || _factories.size() == 0 || 
				( _compilationUnit != null && ! ScannerUtil.hasAnnotationInstance( _compilationUnit ) ) ||
				( _file!= null && !  ScannerUtil.hasAnnotationInstance( _file ) ) )
		{
			// tracing
			if ( AptPlugin.DEBUG ) 
			{			
				String msg;
				if ( _factories == null || _factories.size() == 0 )
					msg = "no AnnotationProcessoryFactory instances registered.";
				else
					msg = "no annotation instances in file.";
				trace( "run():  leaving early because there are " + msg );
			}
			
			
			IFile f;
			if ( _file != null )
				f = _file;
			else
				f = (IFile)_compilationUnit.getResource();
			Set<IFile> deletedFiles = cleanupAllGeneratedFilesForParent( f );

			if ( deletedFiles.size() == 0 )
				_result =  EMPTY_APT_RESULT;
			else
				_result = new APTResult( Collections.<IFile>emptySet(), 
										 deletedFiles, 
										 Collections.<String>emptySet(),
										 Collections.<IFile, List<IProblem>>emptyMap() );
		}
		else
		{
			ProcessorEnvImpl processorEnv;
			
			if ( _compilationUnit != null )
			{
				processorEnv = ProcessorEnvImpl
					.newProcessorEnvironmentForReconcile(_compilationUnit, _javaProject);
			}
			else
			{
				processorEnv = ProcessorEnvImpl
					.newProcessorEnvironmentForBuild( _file, _javaProject);
			}
			_result = runAPT(_factories, processorEnv);
		}
	}

