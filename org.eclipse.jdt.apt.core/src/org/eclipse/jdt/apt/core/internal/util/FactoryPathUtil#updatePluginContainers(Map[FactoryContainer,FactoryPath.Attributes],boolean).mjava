	/**
	 * Removes missing plugin containers, and adds any plugin containers
	 * that were added since the map was originally created.  The order
	 * of the original list will be maintained, and new entries will be
	 * added to the end of the list in alphabetic order.  The resulting
	 * list has the same contents as PLUGIN_FACTORY_MAP (that is, all the
	 * loaded plugins and nothing else), but the order is as close as possible
	 * to the input.
	 *
	 * @param path the factory path (in raw Map form) to be modified.
	 * @param disableNewPlugins if true, newly discovered plugins will be
	 * disabled.  If false, they will be enabled or disabled according to
	 * their setting in the extension declaration.
	 */
	private static void updatePluginContainers(
			Map<FactoryContainer, FactoryPath.Attributes> path, boolean disableNewPlugins) {

		// Get the alphabetically-ordered list of all plugins we found at startup.
		Map<FactoryContainer, FactoryPath.Attributes> pluginContainers = FactoryPluginManager.getAllPluginFactoryContainers();

		// Remove from the path any plugins which we did not find at startup
		for (Iterator<FactoryContainer> i = path.keySet().iterator(); i.hasNext(); ) {
			FactoryContainer fc = i.next();
			if (fc.getType() == FactoryContainer.FactoryType.PLUGIN && !pluginContainers.containsKey(fc)) {
				i.remove();
			}
		}

		// Add to the end any plugins which are not in the path (i.e., which
		// have been discovered since the config was last saved)
		for (Map.Entry<FactoryContainer, FactoryPath.Attributes> entry : pluginContainers.entrySet()) {
			if (!path.containsKey(entry.getKey())) {
				FactoryPath.Attributes newAttr;
				FactoryPath.Attributes oldAttr = entry.getValue();
				if (disableNewPlugins) {
					newAttr = new FactoryPath.Attributes(false, oldAttr.runInBatchMode());
				} else {
					newAttr = oldAttr;
				}
				path.put(entry.getKey(), newAttr);
			}
		}
	}

