	/**
	 * This method will return the binary output location for the generated source folder.
	 * If the generated-source folder is not configured (i.e., not created or not added to
	 * the project's source path, then this method will return the default binary output
	 * location for the project. 
	 * 
	 * TODO - change this to return an IFolder
	 *
	 * @return the java.io.File corresponding to the binary output location for the
	 * generated source folder.  
	 * 
	 * @throws JavaModelException
	 * 
	 * @see #getGeneratedSourceFolder()
	 * @see #isGeneratedSourceFolderConfigured()
	 * @see #ensureGeneratedSourceFolder(IProgressMonitor)
	 */
	public java.io.File getGeneratedSourceFolderOutputLocation()
		 throws JavaModelException 
	{
		IPath outputRoot = null;
		IFolder f = getGeneratedSourceFolder();
		if ( f != null && f.exists() )
		{
			IClasspathEntry cpe = findProjectSourcePath( _javaProject, f, null );
			if ( cpe != null )
				outputRoot = cpe.getOutputLocation();
		}
		
		// no output root, so get project's default output location
		if ( outputRoot == null )
			outputRoot = _javaProject.getOutputLocation();

		// output location is relative to the workspace, we want to make it relative to project
		int segments = outputRoot.matchingFirstSegments( _javaProject.getPath() );
		outputRoot = outputRoot.removeFirstSegments( segments );
		
		// TODO - use getRawLocation() or getLocation()?  sometimes getRawLocation() returns null.  Investigate
		IPath projectRoot = _javaProject.getProject().getRawLocation();
		if ( projectRoot == null )
			projectRoot = _javaProject.getProject().getLocation();
		
		java.io.File file = projectRoot.toFile();
		file = new java.io.File( file, outputRoot.toFile().getPath() );
		return file;	
	}

