	private void build(){
	
		if ( !shouldBuild() )
		{
			// tracing
			if ( AptPlugin.DEBUG ) 
			{			
				String msg;
				if ( (_factories == null || _factories.size() == 0) && _dispatchedBatchFactories.isEmpty() )
					msg = "no AnnotationProcessoryFactory instances registered."; //$NON-NLS-1$
				else
					msg = "no files to dispatch to."; //$NON-NLS-1$
				trace( "run():  leaving project " + _aptProject.getJavaProject().getProject() +  //$NON-NLS-1$
						" early because there are " + msg, //$NON-NLS-1$
					   null);
			}
			cleanupAllGeneratedFiles();
		}
		else
		{
			assert _filesWithAnnotation != null :
				   "should never be invoked unless we are in build mode!"; //$NON-NLS-1$
			
			EnvCallback buildCallback = new EnvCallback() {
				@Override
				public void run(AbstractCompilationEnv env) {
					build((BuildEnv)env);
				}
			};
			boolean split = false;
			if (SPLIT_FILES && !hasBatchFactory()) { // don't split the files if batch processors are present
				split = _filesWithAnnotation.length > MAX_FILES_PER_ITERATION ? true : false;
			}
			if (!split) {
				// Construct build environment, this invokes the build inside a callback
				// in order to keep open the DOM AST pipeline
				BuildEnv.newBuildEnv(
						_filesWithAnnotation,
						_filesWithoutAnnotation,
						_aptProject.getJavaProject(),
						buildCallback);
			} else {
				// https://bugs.eclipse.org/bugs/show_bug.cgi?id=301894
				for (int index = 0; index < _filesWithAnnotation.length;) {
					int numberToProcess = (index + MAX_FILES_PER_ITERATION) > _filesWithAnnotation.length ? _filesWithAnnotation.length - index : MAX_FILES_PER_ITERATION;
					BuildContext[] filesToProcess = new BuildContext[numberToProcess];			 
					System.arraycopy(_filesWithAnnotation, index, filesToProcess, 0, numberToProcess);
					// Construct build environment, this invokes the build inside a callback
					// in order to keep open the DOM AST pipeline
					BuildEnv.newBuildEnv( 
							filesToProcess, 
							_filesWithoutAnnotation, 
							_aptProject.getJavaProject(),
							buildCallback);
					 index += numberToProcess;
				}
			}
		}
		
		// We need to save the file dependency state regardless of whether any Java 5 processing
		// was performed, because it may also contain Java 6 information.
		_aptProject.getGeneratedFileManager(_isTestCode).writeState();
	}

