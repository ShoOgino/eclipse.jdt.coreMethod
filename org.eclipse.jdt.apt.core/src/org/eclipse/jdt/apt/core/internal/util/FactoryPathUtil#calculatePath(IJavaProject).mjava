	/**
	 * Calculates the active factory path for the specified project.  This
	 * depends on the stored information in the .factorypath file, as well as
	 * on the set of plugins that were found at load time of this Eclipse instance.
	 * Returns all containers for the provided project, including disabled ones.
	 * @param jproj The java project in question, or null for the workspace
	 * @return an ordered map, where the key is the container and the value
	 * indicates whether the container is enabled.
	 */
	private static synchronized Map<FactoryContainer, FactoryPath.Attributes> calculatePath(IJavaProject jproj) {
		Map<FactoryContainer, FactoryPath.Attributes> map = null;
		boolean foundPerProjFile = false;
		if (jproj != null) {
			try {
				map = FactoryPathUtil.readFactoryPathFile(jproj);
				foundPerProjFile = (map != null);
			}
			catch (CoreException ce) {
				AptPlugin.log(ce, "Could not get factory containers for project: " + jproj); //$NON-NLS-1$
			}
		}
		// Workspace if no project data was found
		if (map == null) {
			try {
				map = FactoryPathUtil.readFactoryPathFile(null);
			}
			catch (CoreException ce) {
				AptPlugin.log(ce, "Could not get factory containers for project: " + jproj); //$NON-NLS-1$
			}
		}
		// if no project and no workspace data was found, we'll get the defaults
		if (map == null) {
			map = new LinkedHashMap<>();
		}
		boolean disableNewPlugins = (jproj != null) && foundPerProjFile;
		updatePluginContainers(map, disableNewPlugins);
		return map;
	}

