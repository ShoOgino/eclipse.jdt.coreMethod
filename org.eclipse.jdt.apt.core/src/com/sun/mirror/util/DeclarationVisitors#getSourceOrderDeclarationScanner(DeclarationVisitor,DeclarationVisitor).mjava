    /**
     * Return a <code>DeclarationVisitor</code> that will scan the
     * declaration structure, visiting declarations contained in
     * another declaration in source code order.  For example, when
     * visiting a class, the fields, methods, constructors, etc. of
     * the class are also visited.  The order in which the contained
     * declarations are visited is as close to source code order as
     * possible; declaration mirrors created from class files instead
     * of source code will not have source position information.
     *
     * <p>The <code>pre</code> and <code>post</code>
     * <code>DeclarationVisitor</code> parameters specify,
     * respectively, the processing the scanner will do before or
     * after visiting the contained declarations.  If only one of pre
     * and post processing is needed, use {@link
     * DeclarationVisitors#NO_OP DeclarationVisitors.NO_OP} for the other parameter.
     *
     * @param pre visitor representing processing to do before
     * visiting contained declarations.
     *
     * @param post visitor representing processing to do after
     * visiting contained declarations.
     */
    public static DeclarationVisitor getSourceOrderDeclarationScanner(DeclarationVisitor pre,
								      DeclarationVisitor post) {
	return new SourceOrderDeclScanner(pre, post);
    }

