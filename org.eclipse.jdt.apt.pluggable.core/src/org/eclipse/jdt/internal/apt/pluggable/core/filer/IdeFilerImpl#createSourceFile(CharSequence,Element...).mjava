	/**
	 * @param originatingElements should all be source types; binary types (ie elements in jar files)
	 * will be ignored.
	 * @see javax.annotation.processing.Filer#createSourceFile(java.lang.CharSequence, javax.lang.model.element.Element[])
	 */
	@Override
	public JavaFileObject createSourceFile(CharSequence name, Element... originatingElements)
			throws IOException 
	{
		// Pre-emptively check parameters here, rather than later on when the resource is written and closed.
		if (null == name) {
			throw new IllegalArgumentException("Name is null");
		}
		IFile file = _env.getAptProject().getGeneratedFileManager(_env.isTestCode()).getIFileForTypeName(name.toString());
		if (AptCompilationParticipant.getInstance().getJava6GeneratedFiles().contains(file)) {
			throw new FilerException("Source file already created: " + file.getFullPath()); //$NON-NLS-1$
		}
		// TODO: is the following correct?
		// JDK 9's createSourceFile API mentions '/' as separator for a module prefix. 
		// Otherwise shouldn't <code>name</code> already be "."-separated?
//		name = name.toString().replace('/', '.');
//		
//		ModuleBinding m = _env._current_module;
//		if (m == null)
//			m = _env.getCompiler().lookupEnvironment.UnNamedModule;
//		ReferenceBinding type = m.environment.getType(CharOperation.splitOn('.', name.toString().toCharArray()), m);
//		if (type != null && (type.tagBits & TagBits.HasMissingType) == 0) {
//			IFile classFile = getFileFromOutputLocation(StandardLocation.CLASS_OUTPUT, CharOperation.toString(type.fPackage.compoundName), new String(type.sourceName()) + ".class");
//			String fileName = new String(type.getFileName());
//			if (fileName != null) {
//				String osString = classFile.getFullPath().toOSString();
//				if (!osString.equals(fileName)) {
//					throw new FilerException("Source file already exists : " + name); //$NON-NLS-1$
//				}
//			}
//		}
		Set<IFile> parentFiles = Collections.emptySet();
		if (originatingElements != null && originatingElements.length > 0) {
			parentFiles = new HashSet<IFile>(originatingElements.length);
			for (Element elem : originatingElements) {
				IFile enclosing = _env.getEnclosingIFile(elem);
				if (null != enclosing) {
					parentFiles.add(enclosing);
				}
			}
		}
		return new IdeOutputJavaFileObject(_env, name, parentFiles);
	}

