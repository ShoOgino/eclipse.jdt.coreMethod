	/**
	 * @param originatingElements should all be source types; binary types (ie elements in jar files)
	 * will be ignored.
	 * @see javax.annotation.processing.Filer#createSourceFile(java.lang.CharSequence, javax.lang.model.element.Element[])
	 */
	@Override
	public JavaFileObject createSourceFile(CharSequence name, Element... originatingElements)
			throws IOException 
	{
		// Pre-emptively check parameters here, rather than later on when the resource is written and closed.
		if (null == name) {
			throw new IllegalArgumentException("Name is null");
		}
		IFile file = _env.getAptProject().getGeneratedFileManager(_env.isTestCode()).getIFileForTypeName(name.toString());
		if (AptCompilationParticipant.getInstance().getJava6GeneratedFiles().contains(file)) {
			throw new FilerException("Source file already created: " + file.getFullPath()); //$NON-NLS-1$
		}
		IJavaProject javaProject = _env.getJavaProject();
		IType type = null;
		try {
			name = name.toString().replace('/', '.');
			type = javaProject.findType(name.toString());
		} catch (JavaModelException e) {
		}
		if (type != null) {
			throw new FilerException("Source file already exists : " + name); //$NON-NLS-1$
		}
		Set<IFile> parentFiles = Collections.emptySet();
		if (originatingElements != null && originatingElements.length > 0) {
			parentFiles = new HashSet<IFile>(originatingElements.length);
			for (Element elem : originatingElements) {
				IFile enclosing = _env.getEnclosingIFile(elem);
				if (null != enclosing) {
					parentFiles.add(enclosing);
				}
			}
		}
		return new IdeOutputJavaFileObject(_env, name, parentFiles);
	}

