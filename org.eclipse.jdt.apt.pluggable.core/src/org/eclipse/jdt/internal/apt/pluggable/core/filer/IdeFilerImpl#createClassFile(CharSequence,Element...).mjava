	/* (non-Javadoc)
	 * @see javax.annotation.processing.Filer#createClassFile(java.lang.CharSequence, javax.lang.model.element.Element[])
	 */
	@Override
	public JavaFileObject createClassFile(CharSequence name, Element... originatingElements)
			throws IOException {
		
		// Pre-emptively check parameters here, rather than later on when the resource is written and closed.
		if (null == name) {
			throw new IllegalArgumentException("Name is null");
		}
    
    	String nameAsString = name.toString();
		IFile file = _env.getAptProject().getGeneratedFileManager(_env.isTestCode()).getIFileForTypeName(nameAsString);

    	GeneratedSourceFolderManager gsfm = _env.getAptProject().getGeneratedSourceFolderManager(_env.isTestCode());
    	IPath path = null;
    	try {
			path = gsfm.getBinaryOutputLocation();
		} catch (JavaModelException e) {
			Apt6Plugin.log(e, "Failure getting the binary output location"); //$NON-NLS-1$
			throw new IOException(e);
		}
    	int index = nameAsString.lastIndexOf('.');
    	String pkg = null;
    	if (index != -1) {
    		name = nameAsString.substring(index + 1);
    		pkg = nameAsString.substring(0, index);
    	} else {
    		pkg = "";
    	}
    	file = getFileFromOutputLocation(StandardLocation.CLASS_OUTPUT, pkg, name + ".class");
		path = path.append(nameAsString);
		path = new Path(path.toString() + ".class");
	
		return new IdeOutputClassFileObject(_env, file, nameAsString);
	}

