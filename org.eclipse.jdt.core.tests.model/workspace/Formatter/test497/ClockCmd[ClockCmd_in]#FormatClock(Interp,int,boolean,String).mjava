    /**
     *-----------------------------------------------------------------------------
     *
     * FormatClock --
     *
     *      Formats a time value based on seconds into a human readable
     *	string.
     *
     * Results:
     *      None.
     *
     * Side effects:
     *      The interpreter will contain the formatted string as result.
     *
     *-----------------------------------------------------------------------------
     */

    private void FormatClock(Interp interp, // Current interpreter.
            int clockVal, // Time in seconds.
            boolean useGMT, // Boolean
            String format) // Format string
            throws TclException // A standard Tcl exception.
    {
        Date date = new Date((long) clockVal * 1000);
        GregorianCalendar calendar = new GregorianCalendar();
        SimpleDateFormat fmt, locFmt;
        FieldPosition fp = new FieldPosition(0);
        StringBuffer result = new StringBuffer();

        if (format == null)
            {
                format = new String("%a %b %d %H:%M:%S %Z %Y");
            }

        if (useGMT)
            {
                calendar.setTimeZone(TimeZone.getTimeZone("GMT"));
            }
        calendar.setTime(date);
        fmt = new SimpleDateFormat("mm.dd.yy", Locale.US);
        fmt.setCalendar(calendar);

        if (format.equals("%Q"))
            { // Enterprise Stardate.
                int trekYear = calendar.get(Calendar.YEAR) + 377 - 2323;
                int trekDay = (calendar.get(Calendar.DAY_OF_YEAR) * 1000)
                        / (calendar.isLeapYear(calendar.get(Calendar.YEAR))
                                ? 366
                                : 365);
                int trekHour = (calendar.get(Calendar.HOUR_OF_DAY) * 60 + calendar
                        .get(Calendar.MINUTE)) / 144;

                interp.setResult("Stardate " + (trekYear < 10 ? "0" : "")
                        + (trekYear * 1000 + trekDay) + '.' + trekHour);
                return;
            }

        for (int ix = 0; ix < format.length(); ix++)
            {
                if (format.charAt(ix) == '%' && ix + 1 < format.length())
                    {
                        switch (format.charAt(++ix))
                        {
                            case '%' :
                                // Insert a %. 
                                result.append('%');
                                break;
                            case 'a' :
                                // Abbreviated weekday name (Mon, Tue, etc.). 
                                fmt.applyPattern("EEE");
                                fmt.format(date, result, fp);
                                break;
                            case 'A' :
                                // Full weekday name (Monday, Tuesday, etc.). 
                                fmt.applyPattern("EEEE");
                                fmt.format(date, result, fp);
                                break;
                            case 'b' :
                            case 'h' :
                                // Abbreviated month name (Jan,Feb,etc.). 
                                fmt.applyPattern("MMM");
                                fmt.format(date, result, fp);
                                break;
                            case 'B' :
                                // Full month name. 
                                fmt.applyPattern("MMMM");
                                fmt.format(date, result, fp);
                                break;
                            case 'c' :
                                // Locale specific date and time. 
                                locFmt = (SimpleDateFormat) DateFormat
                                        .getDateTimeInstance(DateFormat.SHORT,
                                                DateFormat.SHORT);
                                locFmt.setCalendar(calendar);
                                locFmt.format(date, result, fp);
                                break;
                            case 'C' :
                                // Century (00 - 99).
                                int century = calendar.get(Calendar.YEAR) / 100;
                                result.append((century < 10 ? "0" : "")
                                        + century);
                                break;
                            case 'd' :
                                // Day of month (01 - 31). 
                                fmt.applyPattern("dd");
                                fmt.format(date, result, fp);
                                break;
                            case 'D' :
                                // Date as %m/%d/%y. 
                                fmt.applyPattern("MM/dd/yy");
                                fmt.format(date, result, fp);
                                break;
                            case 'e' :
                                // Day of month (1 - 31), no leading zeros. 
                                fmt.applyPattern("d");
                                String day = fmt.format(date);
                                result.append((day.length() < 2 ? " " : "")
                                        + day);
                                break;
                            case 'H' :
                                // Hour in 24-hour format (00 - 23). 
                                fmt.applyPattern("HH");
                                fmt.format(date, result, fp);
                                break;
                            case 'I' :
                                // Hour in 12-hour format (01 - 12). 
                                fmt.applyPattern("hh");
                                fmt.format(date, result, fp);
                                break;
                            case 'j' :
                                // Day of year (001 - 366). 
                                fmt.applyPattern("DDD");
                                fmt.format(date, result, fp);
                                break;
                            case 'k' :
                                // Hour in 24-hour format (0 - 23), no leading zeros. 
                                fmt.applyPattern("H");
                                String h24 = fmt.format(date);
                                result.append((h24.length() < 2 ? " " : "")
                                        + h24);
                                break;
                            case 'l' :
                                // Hour in 12-hour format (1 - 12), no leading zeros. 
                                fmt.applyPattern("h");
                                String h12 = fmt.format(date);
                                result.append((h12.length() < 2 ? " " : "")
                                        + h12);
                                break;
                            case 'm' :
                                // Month number (01 - 12). 
                                fmt.applyPattern("MM");
                                fmt.format(date, result, fp);
                                break;
                            case 'M' :
                                // Minute (00 - 59). 
                                fmt.applyPattern("mm");
                                fmt.format(date, result, fp);
                                break;
                            case 'n' :
                                // Insert a newline. 
                                result.append('\n');
                                break;
                            case 'p' :
                                // AM/PM indicator. 
                                fmt.applyPattern("aa");
                                fmt.format(date, result, fp);
                                break;
                            case 'r' :
                                // Time as %I:%M:%S %p. 
                                fmt.applyPattern("KK:mm:ss aaaa");
                                fmt.format(date, result, fp);
                                break;
                            case 'R' :
                                // Time as %H:%M. 
                                fmt.applyPattern("hh:mm");
                                fmt.format(date, result, fp);
                                break;
                            case 's' :
                                // seconds since epoch. 
                                long millis = calendar.getTime().getTime();
                                if (useGMT)
                                    {
                                        Calendar localCalendar = Calendar
                                                .getInstance();
                                        localCalendar.setTime(calendar
                                                .getTime());
                                        millis -= localCalendar
                                                .get(Calendar.ZONE_OFFSET)
                                                + localCalendar
                                                        .get(Calendar.DST_OFFSET);
                                    }
                                result.append((int) (millis / 1000));
                                break;
                            case 'S' :
                                // Seconds (00 - 59). 
                                fmt.applyPattern("ss");
                                fmt.format(date, result, fp);
                                break;
                            case 't' :
                                // Insert a tab. 
                                result.append('\t');
                                break;
                            case 'T' :
                                // Time as %H:%M:%S. 
                                fmt.applyPattern("hh:mm:ss");
                                fmt.format(date, result, fp);
                                break;
                            case 'u' :
                                // Weekday number (1 - 7) Sunday = 7. 
                                int dayOfWeek17 = calendar
                                        .get(Calendar.DAY_OF_WEEK);
                                if (dayOfWeek17 == calendar.SUNDAY)
                                    {
                                        result.append(7);
                                    }
                                else
                                    {
                                        result.append(dayOfWeek17
                                                - Calendar.SUNDAY);
                                    }
                                break;
                            case 'U' :
                                // Week of year (01-52), Sunday is first day.
                                int weekS = GetWeek(calendar, Calendar.SUNDAY,
                                        false);
                                result.append((weekS < 10 ? "0" : "") + weekS);
                                break;
                            case 'V' :
                                // ISO 8601 Week Of Year (01 - 53). 
                                int isoWeek = GetWeek(calendar,
                                        Calendar.MONDAY, true);
                                result.append((isoWeek < 10 ? "0" : "")
                                        + isoWeek);
                                break;
                            case 'w' :
                                // Weekday number (0 - 6) Sunday = 0. 
                                int dayOfWeek06 = calendar
                                        .get(Calendar.DAY_OF_WEEK);
                                result.append(dayOfWeek06 - calendar.SUNDAY);
                                break;
                            case 'W' :
                                // Week of year (01-52), Monday is first day. 
                                int weekM = GetWeek(calendar, Calendar.MONDAY,
                                        false);
                                result.append((weekM < 10 ? "0" : "") + weekM);
                                break;
                            case 'x' :
                                // Locale specific date format. 
                                locFmt = (SimpleDateFormat) DateFormat
                                        .getDateInstance(DateFormat.SHORT);
                                locFmt.setCalendar(calendar);
                                locFmt.format(date, result, fp);
                                break;
                            case 'X' :
                                // Locale specific time format. 
                                locFmt = (SimpleDateFormat) DateFormat
                                        .getTimeInstance(DateFormat.SHORT);
                                locFmt.setCalendar(calendar);
                                locFmt.format(date, result, fp);
                                break;
                            case 'y' :
                                // Year without century (00 - 99). 
                                fmt.applyPattern("yy");
                                fmt.format(date, result, fp);
                                break;
                            case 'Y' :
                                // Year with century (e.g. 1990) 
                                fmt.applyPattern("yyyy");
                                fmt.format(date, result, fp);
                                break;
                            case 'Z' :
                                // Time zone name. 
                                fmt.applyPattern("zzz");
                                fmt.format(date, result, fp);
                                break;
                            default :
                                result.append(format.charAt(ix));
                                break;
                        }
                    }
                else
                    {
                        result.append(format.charAt(ix));
                    }
            }
        interp.setResult(result.toString());
    }

