    /**
     *-----------------------------------------------------------------------------
     *
     * ParseIso --
     *
     *      Parse an ISO 8601 point in time and sets the Calendar.
     *	An ISO 8601 point in time is valid, if it confirms to the
     *	following yacc rule:
     *	iso     : tISOBASE tZONE tISOBASE
     *	        | tISOBASE tZONE tUNUMBER ':' tUNUMBER ':' tUNUMBER
     *		| tISOBASE tISOBASE
     *		;
     *
     * Results:
     *      True, if an ISO 8601 point in time was read (parsePos was incremented
     *	and calendar was set according to the read point); false otherwise.
     *
     * Side effects:
     *      None.
     *
     *-----------------------------------------------------------------------------
     */

    private boolean ParseIso(ClockToken[] dt, // Input as scanned array of tokens
            ParsePosition parsePos, // Current position in input
            Calendar calendar) // calendar object to set
    {
        int pos = parsePos.getIndex();

        if (pos + 6 < dt.length && dt[pos].isIsoBase()
                && dt[pos + 1].is(ClockToken.ZONE) && dt[pos + 2].isUNumber()
                && dt[pos + 3].is(':') && dt[pos + 4].isUNumber()
                && dt[pos + 5].is(':') && dt[pos + 6].isUNumber())
            {
                calendar.set(Calendar.DAY_OF_MONTH, dt[pos].getInt() % 100);
                calendar.set(Calendar.MONTH,
                        (dt[pos].getInt() % 10000) / 100 - 1);
                calendar.set(Calendar.YEAR, dt[pos].getInt() / 10000);
                calendar.set(Calendar.HOUR_OF_DAY, dt[pos + 2].getInt());
                calendar.set(Calendar.MINUTE, dt[pos + 4].getInt());
                calendar.set(Calendar.SECOND, dt[pos + 6].getInt());
                parsePos.setIndex(pos + 7);
                return true;
            }
        if (pos + 2 < dt.length && dt[pos].isIsoBase()
                && dt[pos + 1].is(ClockToken.ZONE)
                && dt[pos + 1].getZone().getRawOffset() == -7 * MILLIS_PER_HOUR
                && dt[pos + 2].isIsoBase())
            {
                calendar.set(Calendar.DAY_OF_MONTH, dt[pos].getInt() % 100);
                calendar.set(Calendar.MONTH,
                        (dt[pos].getInt() % 10000) / 100 - 1);
                calendar.set(Calendar.YEAR, dt[pos].getInt() / 10000);
                calendar
                        .set(Calendar.HOUR_OF_DAY, dt[pos + 2].getInt() / 10000);
                calendar.set(Calendar.MINUTE,
                        (dt[pos + 2].getInt() % 10000) / 100);
                calendar.set(Calendar.SECOND, dt[pos + 2].getInt() % 100);
                parsePos.setIndex(pos + 3);
                return true;
            }
        if (pos + 1 < dt.length && dt[pos].isIsoBase()
                && dt[pos + 1].isIsoBase())
            {
                calendar.set(Calendar.DAY_OF_MONTH, dt[pos].getInt() % 100);
                calendar.set(Calendar.MONTH,
                        (dt[pos].getInt() % 10000) / 100 - 1);
                calendar.set(Calendar.YEAR, dt[pos].getInt() / 10000);
                calendar
                        .set(Calendar.HOUR_OF_DAY, dt[pos + 1].getInt() / 10000);
                calendar.set(Calendar.MINUTE,
                        (dt[pos + 1].getInt() % 10000) / 100);
                calendar.set(Calendar.SECOND, dt[pos + 1].getInt() % 100);
                parsePos.setIndex(pos + 2);
                return true;
            }
        return false;
    }

