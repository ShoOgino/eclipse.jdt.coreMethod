    /**
     *-----------------------------------------------------------------------------
     *
     * ParseDate --
     *
     *      Parse a date string and sets the Calendar.
     *	A date string is valid, if it confirms to the following yacc rule:
     *	date	: tUNUMBER '/' tUNUMBER
     *		| tUNUMBER '/' tUNUMBER '/' tUNUMBER
     *		| tISOBASE
     *	        | tUNUMBER '-' tMONTH '-' tUNUMBER
     *	        | tUNUMBER '-' tUNUMBER '-' tUNUMBER
     *		| tMONTH tUNUMBER
     *		| tMONTH tUNUMBER ',' tUNUMBER
     *		| tUNUMBER tMONTH
     *		| tEPOCH
     *		| tUNUMBER tMONTH tUNUMBER
     *		;
     *
     * Results:
     *      True, if a date was read (parsePos was incremented and calendar
     *	was set according to the read day); false otherwise.
     *
     * Side effects:
     *      None.
     *
     *-----------------------------------------------------------------------------
     */

    private boolean ParseDate(ClockToken[] dt, // Input as scanned array of tokens
            ParsePosition parsePos, // Current position in input
            Calendar calendar) // calendar object to set
    {
        int pos = parsePos.getIndex();

        if (pos + 4 < dt.length && dt[pos].isUNumber() && dt[pos + 1].is('/')
                && dt[pos + 2].isUNumber() && dt[pos + 3].is('/')
                && dt[pos + 4].isUNumber())
            {
                calendar.set(Calendar.DAY_OF_MONTH, dt[pos + 2].getInt());
                calendar.set(Calendar.MONTH, dt[pos].getInt() - 1);
                calendar.set(Calendar.YEAR, dt[pos + 4].getInt());
                parsePos.setIndex(pos + 5);
                return true;
            }
        if (pos + 4 < dt.length && dt[pos].isUNumber() && dt[pos + 1].is('-')
                && dt[pos + 2].is(ClockToken.MONTH) && dt[pos + 3].is('-')
                && dt[pos + 4].isUNumber())
            {
                calendar.set(Calendar.YEAR, dt[pos + 4].getInt());
                calendar.set(Calendar.MONTH, dt[pos + 2].getInt());
                calendar.set(Calendar.DAY_OF_MONTH, dt[pos].getInt());
                parsePos.setIndex(pos + 5);
                return true;
            }
        if (pos + 4 < dt.length && dt[pos].isUNumber() && dt[pos + 1].is('-')
                && dt[pos + 2].isUNumber() && dt[pos + 3].is('-')
                && dt[pos + 4].isUNumber())
            {
                calendar.set(Calendar.YEAR, dt[pos].getInt());
                calendar.set(Calendar.MONTH, dt[pos + 2].getInt() - 1);
                calendar.set(Calendar.DAY_OF_MONTH, dt[pos + 4].getInt());
                parsePos.setIndex(pos + 5);
                return true;
            }
        if (pos + 3 < dt.length && dt[pos].is(ClockToken.MONTH)
                && dt[pos + 1].isUNumber() && dt[pos + 2].is(',')
                && dt[pos + 3].isUNumber())
            {
                calendar.set(Calendar.DAY_OF_MONTH, dt[pos + 1].getInt());
                calendar.set(Calendar.MONTH, dt[pos].getInt());
                calendar.set(Calendar.YEAR, dt[pos + 3].getInt());
                parsePos.setIndex(pos + 4);
                return true;
            }
        if (pos + 2 < dt.length && dt[pos].isUNumber() && dt[pos + 1].is('/')
                && dt[pos + 2].isUNumber())
            {
                calendar.set(Calendar.DAY_OF_MONTH, dt[pos + 2].getInt());
                calendar.set(Calendar.MONTH, dt[pos].getInt() - 1);
                parsePos.setIndex(pos + 3);
                return true;
            }
        if (pos + 2 < dt.length && dt[pos].isUNumber()
                && dt[pos + 1].is(ClockToken.MONTH) && dt[pos + 2].isUNumber())
            {
                calendar.set(Calendar.DAY_OF_MONTH, dt[pos].getInt());
                calendar.set(Calendar.MONTH, dt[pos + 1].getInt());
                calendar.set(Calendar.YEAR, dt[pos + 2].getInt());
                parsePos.setIndex(pos + 3);
                return true;
            }
        if (pos + 1 < dt.length && dt[pos].is(ClockToken.MONTH)
                && dt[pos + 1].isUNumber())
            {
                calendar.set(Calendar.DAY_OF_MONTH, dt[pos + 1].getInt());
                calendar.set(Calendar.MONTH, dt[pos].getInt());
                parsePos.setIndex(pos + 2);
                return true;
            }
        if (pos + 1 < dt.length && dt[pos].isUNumber()
                && dt[pos + 1].is(ClockToken.MONTH))
            {
                calendar.set(Calendar.DAY_OF_MONTH, dt[pos].getInt());
                calendar.set(Calendar.MONTH, dt[pos + 1].getInt());
                parsePos.setIndex(pos + 2);
                return true;
            }
        if (pos < dt.length && dt[pos].isIsoBase())
            {
                calendar.set(Calendar.DAY_OF_MONTH, dt[pos].getInt() % 100);
                calendar.set(Calendar.MONTH,
                        (dt[pos].getInt() % 10000) / 100 - 1);
                calendar.set(Calendar.YEAR, dt[pos].getInt() / 10000);
                parsePos.setIndex(pos + 1);
                return true;
            }
        if (pos < dt.length && dt[pos].is(ClockToken.EPOCH))
            {
                calendar.set(Calendar.DAY_OF_MONTH, 1);
                calendar.set(Calendar.MONTH, 0);
                calendar.set(Calendar.YEAR, EPOCH_YEAR);
                parsePos.setIndex(pos + 1);
                return true;
            }
        return false;
    }

