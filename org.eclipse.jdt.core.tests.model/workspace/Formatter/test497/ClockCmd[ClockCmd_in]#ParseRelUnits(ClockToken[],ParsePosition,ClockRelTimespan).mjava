    /**
     *-----------------------------------------------------------------------------
     *
     * ParseRelUnits --
     *
     *      Parse a relative time unit and sets the time difference.
     *	A relative time unit is valid, if it confirms to the
     *	following yacc rule:
     *	relspec : '+' tUNUMBER unit
     *		| '-' tUNUMBER unit
     *	        | tUNUMBER unit
     *	        | tNEXT unit
     *	        | tNEXT tUNUMBER unit
     *	        | unit
     *		;
     *
     * Results:
     *      True, if a relative time specification was read (parsePos was
     *	incremented and the time difference was set according to the read
     *	relative time specification); false otherwise.
     *
     * Side effects:
     *      None.
     *
     *-----------------------------------------------------------------------------
     */

    private boolean ParseRelUnits(ClockToken[] dt, // Input as scanned array of tokens
            ParsePosition parsePos, // Current position in input
            ClockRelTimespan diff) // time difference to evaluate
    {
        int pos = parsePos.getIndex();

        if (pos + 2 < dt.length && dt[pos].is('+') && dt[pos + 1].isUNumber()
                && dt[pos + 2].isUnit())
            {
                diff.addUnit(dt[pos + 2], dt[pos + 1].getInt());
                parsePos.setIndex(pos + 3);
                return true;
            }
        if (pos + 2 < dt.length && dt[pos].is('-') && dt[pos + 1].isUNumber()
                && dt[pos + 2].isUnit())
            {
                diff.addUnit(dt[pos + 2], -dt[pos + 1].getInt());
                parsePos.setIndex(pos + 3);
                return true;
            }
        if (pos + 1 < dt.length && dt[pos].isUNumber() && dt[pos + 1].isUnit())
            {
                diff.addUnit(dt[pos + 1], dt[pos].getInt());
                parsePos.setIndex(pos + 2);
                return true;
            }
        else if (pos + 2 < dt.length && dt[pos].is(ClockToken.NEXT)
                && dt[pos + 1].isUNumber() && dt[pos + 2].isUnit())
            {
                diff.addUnit(dt[pos + 2], dt[pos + 1].getInt());
                parsePos.setIndex(pos + 3);
                return true;
            }
        if (pos + 1 < dt.length && dt[pos].is(ClockToken.NEXT)
                && dt[pos + 1].isUnit())
            {
                diff.addUnit(dt[pos + 1]);
                parsePos.setIndex(pos + 2);
                return true;
            }
        if (pos < dt.length && dt[pos].isUnit())
            {
                diff.addUnit(dt[pos]);
                parsePos.setIndex(pos + 1);
                return true;
            }
        return false;
    }

