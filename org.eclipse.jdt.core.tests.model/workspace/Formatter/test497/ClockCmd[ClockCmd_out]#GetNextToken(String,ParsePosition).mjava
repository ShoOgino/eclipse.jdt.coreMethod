    /**
     *-----------------------------------------------------------------------------
     *
     * GetNextToken --
     *
     *      Lexical analysis of the next token of input string.
     *
     * Results:
     *      A ClockToken representing the next token of the input string,
     *	(parsePos was incremented accordingly), if one was found.
     *	null otherwise (e.g. at end of input).
     *
     * Side effects:
     *      None.
     *
     *-----------------------------------------------------------------------------
     */

    private ClockToken GetNextToken(String in, // String to parse
            ParsePosition parsePos) // Current position in input
    {
        int pos = parsePos.getIndex();

        while (true)
            {
                while (pos < in.length()
                        && Character.isSpaceChar(in.charAt(pos)))
                    {
                        pos++;
                    }
                if (pos >= in.length())
                    {
                        break;
                    }

                char c = in.charAt(pos);
                if (Character.isDigit(c))
                    {
                        int number = 0;
                        int count = 0;
                        while (pos < in.length()
                                && Character.isDigit(c = in.charAt(pos)))
                            {
                                number = 10 * number + c - '0';
                                pos++;
                                count++;
                            }
                        parsePos.setIndex(pos);
                        return new ClockToken(number, count >= 6);
                    }
                if (Character.isLetter(c))
                    {
                        int beginPos = pos;
                        while (++pos < in.length())
                            {
                                c = in.charAt(pos);
                                if (!Character.isLetter(c) && c != '.')
                                    {
                                        break;
                                    }
                            }
                        parsePos.setIndex(pos);
                        return LookupWord(in.substring(beginPos, pos));
                    }
                parsePos.setIndex(pos + 1);
                return new ClockToken(in.charAt(pos));
            }
        parsePos.setIndex(pos + 1);
        return null;
    }

