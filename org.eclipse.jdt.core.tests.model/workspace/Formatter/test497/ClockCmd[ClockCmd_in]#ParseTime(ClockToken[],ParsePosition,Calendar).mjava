    /**
     *-----------------------------------------------------------------------------
     *
     * ParseTime --
     *
     *      Parse a time string and sets the Calendar.
     *	A time string is valid, if it confirms to the following yacc rule:
     *	time    : tUNUMBER tMERIDIAN
     *	        | tUNUMBER ':' tUNUMBER o_merid
     *	        | tUNUMBER ':' tUNUMBER '-' tUNUMBER
     *	        | tUNUMBER ':' tUNUMBER ':' tUNUMBER o_merid
     *	        | tUNUMBER ':' tUNUMBER ':' tUNUMBER '-' tUNUMBER
     *	        ;
     *
     * Results:
     *      True, if a time was read (parsePos was incremented and calendar
     *	was set according to the read time); false otherwise.
     *
     * Side effects:
     *      None.
     *
     *-----------------------------------------------------------------------------
     */

    private boolean ParseTime(ClockToken[] dt, // Input as scanned array of tokens
            ParsePosition parsePos, // Current position in input
            Calendar calendar) // calendar object to set
    {
        int pos = parsePos.getIndex();

        if (pos + 6 < dt.length && dt[pos].isUNumber() && dt[pos + 1].is(':')
                && dt[pos + 2].isUNumber() && dt[pos + 3].is(':')
                && dt[pos + 4].isUNumber() && dt[pos + 5].is('-')
                && dt[pos + 6].isUNumber())
            {
                ClockToken zone = GetTimeZoneFromRawOffset(-dt[pos + 6]
                        .getInt() / 100);
                if (zone != null)
                    {
                        calendar.set(Calendar.HOUR_OF_DAY, dt[pos].getInt());
                        calendar.set(Calendar.MINUTE, dt[pos + 2].getInt());
                        calendar.set(Calendar.SECOND, dt[pos + 4].getInt());
                        calendar.setTimeZone(zone.getZone());
                        parsePos.setIndex(pos + 7);
                        return true;
                    }
            }
        if (pos + 4 < dt.length && dt[pos].isUNumber() && dt[pos + 1].is(':')
                && dt[pos + 2].isUNumber() && dt[pos + 3].is(':')
                && dt[pos + 4].isUNumber())
            {
                parsePos.setIndex(pos + 5);
                ParseMeridianAndSetHour(dt, parsePos, calendar, dt[pos]
                        .getInt());
                calendar.set(Calendar.MINUTE, dt[pos + 2].getInt());
                calendar.set(Calendar.SECOND, dt[pos + 4].getInt());
                return true;
            }
        if (pos + 4 < dt.length && dt[pos].isUNumber() && dt[pos + 1].is(':')
                && dt[pos + 2].isUNumber() && dt[pos + 3].is('-')
                && dt[pos + 4].isUNumber())
            {
                ClockToken zone = GetTimeZoneFromRawOffset(-dt[pos + 4]
                        .getInt() / 100);
                if (zone != null)
                    {
                        calendar.set(Calendar.HOUR_OF_DAY, dt[pos].getInt());
                        calendar.set(Calendar.MINUTE, dt[pos + 2].getInt());
                        calendar.setTimeZone(zone.getZone());
                        parsePos.setIndex(pos + 5);
                        return true;
                    }
            }
        if (pos + 2 < dt.length && dt[pos].isUNumber() && dt[pos + 1].is(':')
                && dt[pos + 2].isUNumber())
            {
                parsePos.setIndex(pos + 3);
                ParseMeridianAndSetHour(dt, parsePos, calendar, dt[pos]
                        .getInt());
                calendar.set(Calendar.MINUTE, dt[pos + 2].getInt());
                return true;
            }
        if (pos + 1 < dt.length && dt[pos].isUNumber()
                && dt[pos + 1].is(ClockToken.MERIDIAN))
            {
                parsePos.setIndex(pos + 1);
                ParseMeridianAndSetHour(dt, parsePos, calendar, dt[pos]
                        .getInt());
                return true;
            }
        return false;
    }

