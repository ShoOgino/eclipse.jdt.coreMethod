    /**
     *-----------------------------------------------------------------------------
     *
     * ParseDay --
     *
     *      Parse a day string and sets the Calendar.
     *	A day string is valid, if it confirms to the following yacc rule:
     *	day     : tDAY
     *	        | tDAY ','
     *	        | tUNUMBER tDAY
     *	        | '+' tUNUMBER tDAY
     *	        | '-' tUNUMBER tDAY
     *	        | tNEXT tDAY
     *	        ;
     *
     * Results:
     *	True, if a day was read (parsePos was incremented and the time
     *	difference was set according to the read day); false otherwise.
     *
     * Side effects:
     *      None.
     *
     *-----------------------------------------------------------------------------
     */

    private boolean ParseDay(ClockToken[] dt, // Input as scanned array of tokens
            ParsePosition parsePos, // Current position in input
            ClockRelTimespan diff) // time difference to evaluate
    {
        int pos = parsePos.getIndex();

        if (pos + 2 < dt.length && dt[pos].is('+') && dt[pos + 1].isUNumber()
                && dt[pos + 2].is(ClockToken.DAY))
            {
                diff.setWeekday(dt[pos + 2].getInt(), dt[pos + 1].getInt());
                parsePos.setIndex(pos + 3);
                return true;
            }
        if (pos + 2 < dt.length && dt[pos].is('-') && dt[pos + 1].isUNumber()
                && dt[pos + 2].is(ClockToken.DAY))
            {
                diff.setWeekday(dt[pos + 2].getInt(), -dt[pos + 1].getInt());
                parsePos.setIndex(pos + 3);
                return true;
            }
        if (pos + 1 < dt.length && dt[pos].is(ClockToken.NEXT)
                && dt[pos + 1].is(ClockToken.DAY))
            {
                diff.setWeekday(dt[pos + 1].getInt(), 2);
                parsePos.setIndex(pos + 2);
                return true;
            }
        if (pos + 1 < dt.length && dt[pos].is(ClockToken.DAY)
                && dt[pos + 1].is(','))
            {
                diff.setWeekday(dt[pos].getInt());
                parsePos.setIndex(pos + 2);
                return true;
            }
        if (pos + 1 < dt.length && dt[pos].isUNumber()
                && dt[pos + 1].is(ClockToken.DAY))
            {
                diff.setWeekday(dt[pos + 1].getInt(), dt[pos].getInt());
                parsePos.setIndex(pos + 2);
                return true;
            }
        if (pos < dt.length && dt[pos].is(ClockToken.DAY))
            {
                diff.setWeekday(dt[pos].getInt());
                parsePos.setIndex(pos + 1);
                return true;
            }
        return false;
    }

