    /**
     *----------------------------------------------------------------------
     *
     * cmdProc --
     *
     *	This procedure is invoked as part of the Command interface to
     *	process the "clock" Tcl command.  See the user documentation
     *	for details on what it does.
     *
     * Results:
     *	None.
     *
     * Side effects:
     *	See the user documentation.
     *
     *----------------------------------------------------------------------
     */

    public void cmdProc(Interp interp, // Current interpreter.
            TclObject[] objv) // Argument list.
            throws TclException // A standard Tcl exception.
    {
        int clockVal; // Time value as seconds of epoch.
        String dateString; // Time value as string.
        int argIx; // Counter over arguments.
        String format = null; // User specified format string.
        boolean useGmt = false; // User specified flag to use gmt.
        TclObject baseObj = null; // User specified raw value of baseClock.
        Date baseClock; // User specified time value.
        Date date; // Parsed date value.

        if (objv.length < 2)
            {
                throw new TclNumArgsException(interp, 1, objv,
                        "option ?arg ...?");
            }
        int cmd = TclIndex.get(interp, objv[1], validCmds, "option", 0);

        switch (cmd)
        {
            case CMD_CLICKS :
                    {
                        if (objv.length > 3)
                            {
                                throw new TclNumArgsException(interp, 2, objv,
                                        "?-milliseconds?");
                            }
                        if (objv.length == 3)
                            {
                                // We can safely ignore the -milliseconds options, since
                                // we measure the clicks in milliseconds anyway...
                                TclIndex.get(interp, objv[2],
                                        clicksOpts, "switch", 0);
                            }
                        long millis = System.currentTimeMillis();
                        int clicks = (int) (millis % Integer.MAX_VALUE);
                        interp.setResult(clicks);
                        break;
                    }

            case CMD_FORMAT :
                    {
                        if ((objv.length < 3) || (objv.length > 7))
                            {
                                throw new TclNumArgsException(interp, 2, objv,
                                        "clockval ?-format string? ?-gmt boolean?");
                            }
                        clockVal = TclInteger.get(interp, objv[2]);

                        for (argIx = 3; argIx + 1 < objv.length; argIx += 2)
                            {
                                int formatOpt = TclIndex.get(interp,
                                        objv[argIx], formatOpts, "switch", 0);
                                switch (formatOpt)
                                {
                                    case OPT_FORMAT_FORMAT :
                                            {
                                                format = objv[argIx + 1]
                                                        .toString();
                                                break;
                                            }
                                    case OPT_FORMAT_GMT :
                                            {
                                                useGmt = TclBoolean.get(interp,
                                                        objv[argIx + 1]);
                                                break;
                                            }
                                }
                            }
                        if (argIx < objv.length)
                            {
                                throw new TclNumArgsException(interp, 2, objv,
                                        "clockval ?-format string? ?-gmt boolean?");
                            }
                        FormatClock(interp, clockVal, useGmt, format);
                        break;
                    }

            case CMD_SCAN :
                    {
                        if ((objv.length < 3) || (objv.length > 7))
                            {
                                throw new TclNumArgsException(interp, 2, objv,
                                        "dateString ?-base clockValue? ?-gmt boolean?");
                            }
                        dateString = objv[2].toString();

                        for (argIx = 3; argIx + 1 < objv.length; argIx += 2)
                            {
                                int scanOpt = TclIndex.get(interp, objv[argIx],
                                        scanOpts, "switch", 0);
                                switch (scanOpt)
                                {
                                    case OPT_SCAN_BASE :
                                            {
                                                baseObj = objv[argIx + 1];
                                                break;
                                            }
                                    case OPT_SCAN_GMT :
                                            {
                                                useGmt = TclBoolean.get(interp,
                                                        objv[argIx + 1]);
                                                break;
                                            }
                                }
                            }
                        if (argIx < objv.length)
                            {
                                throw new TclNumArgsException(interp, 2, objv,
                                        "clockval ?-format string? ?-gmt boolean?");
                            }
                        if (baseObj != null)
                            {
                                long seconds = TclInteger.get(interp, baseObj);
                                baseClock = new Date(seconds * 1000);
                            }
                        else
                            {
                                baseClock = new Date();
                            }

                        date = GetDate(dateString, baseClock, useGmt);
                        if (date == null)
                            {
                                throw new TclException(interp,
                                        "unable to convert date-time string \""
                                                + dateString + "\"");
                            }

                        int seconds = (int) (date.getTime() / 1000);
                        interp.setResult(seconds);
                        break;
                    }

            case CMD_SECONDS :
                    {
                        if (objv.length != 2)
                            {
                                throw new TclNumArgsException(interp, 2, objv,
                                        null);
                            }
                        long millis = System.currentTimeMillis();
                        int seconds = (int) (millis / 1000);
                        interp.setResult(seconds);
                        break;
                    }
        }
    }

