     /**
     * Generic (model-independent) implementation of deep copy algorithm for nodes.
     * This is available for use by any node implementations that choose to use it.
      * @param node The node to be copied
      * @param out The receiver to which events will be sent
      * @param namePool Namepool holding the name codes (used only to resolve namespace
      *          codes)
      * @param whichNamespaces Indicates which namespace nodes for an element should
      *          be copied
      * @param copyAnnotations Indicates whether type annotations should be copied
      * @throws TransformerException on any failure reported by the Receiver
     */

    public static void copy(NodeInfo node,
                            Receiver out,
                            NamePool namePool,
                            int whichNamespaces,
                            boolean copyAnnotations) throws TransformerException {

        switch (node.getNodeKind()) {
            case Type.DOCUMENT:
                AxisIterator children0 = node.iterateAxis(Axis.CHILD, new AnyNodeTest());
                while (true) {
                    NodeInfo child = (NodeInfo)children0.next();
                    if (child == null) {
                        return;
                    }
                    child.copy(out, whichNamespaces, copyAnnotations);
                }

            case Type.ELEMENT:
                out.startElement(node.getNameCode(), 0, 0);

                // output the namespaces

                if (whichNamespaces != NodeInfo.NO_NAMESPACES) {
                    node.outputNamespaceNodes(out, true);
                }

                // output the attributes

                AxisIterator attributes = node.iterateAxis(Axis.ATTRIBUTE, new AnyNodeTest());
                while (true) {
                    NodeInfo att = (NodeInfo)attributes.next();
                    if (att == null) {
                        break;
                    }
                    att.copy(out, whichNamespaces, copyAnnotations);
                }

                // output the children

                AxisIterator children = node.iterateAxis(Axis.CHILD, new AnyNodeTest());
                while (true) {
                    NodeInfo child = (NodeInfo)children.next();
                    if (child == null) {
                        break;
                    }
                    child.copy(out, whichNamespaces, copyAnnotations);
                }

                // finally the end tag

                out.endElement();
                return;

            case Type.ATTRIBUTE:
                out.attribute(node.getNameCode(), 0, node.getStringValue(), 0);
                return;

            case Type.TEXT:
                out.characters(node.getStringValue(), 0);
                return;

            case Type.COMMENT:
                out.comment(node.getStringValue(), 0);
                return;

            case Type.PROCESSING_INSTRUCTION:
                out.processingInstruction(node.getLocalPart(), node.getStringValue(), 0);
                return;

            case Type.NAMESPACE:
                out.namespace(namePool.allocateNamespaceCode(node.getLocalPart(), node.getStringValue()),0);
                return;

            default:

        }
    }

