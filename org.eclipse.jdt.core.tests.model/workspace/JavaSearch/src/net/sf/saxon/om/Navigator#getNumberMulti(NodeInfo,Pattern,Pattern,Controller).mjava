    /**
     * Get node number (level="multiple").
     * Return a vector giving the hierarchic position of this node. See the XSLT spec for details.
     *
     * @exception XPathException
     * @param node The node to be numbered
     * @param count Pattern that identifies which nodes (ancestors and
     *      their previous siblings) should be counted. Default (null) is the
     *      element name if the current node is an element, or "node()"
     *     otherwise.
     * @param from Pattern that specifies where counting starts from.
     *     Default (null) is the root node. Only nodes below the first (most
     *     recent) node that matches the 'from' pattern are counted.
     * @param controller The controller for the transformation
     * @return a vector containing for each ancestor-or-self that matches the
     *      count pattern and that is below the nearest node that matches the
     *      from pattern, an Integer which is one greater than the number of
     *     previous siblings that match the count pattern.
     */

    public static List getNumberMulti(NodeInfo node, Pattern count,
                    Pattern from, Controller controller) throws XPathException {

        //checkNumberable(node);

        ArrayList v = new ArrayList();

        if (count==null) {
            if (node.getFingerprint()==-1) {    // unnamed node
                count = NodeKindTest.makeNodeKindTest(node.getNodeKind());
            } else {
                count = new NameTest(node);
            }
        }

        NodeInfo curr = node;

        while(true) {
            if (count.matches(curr, controller)) {
                int num = getNumberSingle(curr, count, null, controller);
                v.add(0, new Long(num));
            }
            curr = curr.getParent();
            if (curr==null) break;
            if (from!=null && from.matches(curr, controller)) break;
        }

        return v;
    }

