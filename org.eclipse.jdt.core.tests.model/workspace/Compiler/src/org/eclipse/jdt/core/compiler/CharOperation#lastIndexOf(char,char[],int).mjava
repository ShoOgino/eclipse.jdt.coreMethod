	/**
	 * Answers the last index in the array for which the corresponding character is
	 * equal to toBeFound stopping at the index startIndex.
	 * Answers -1 if no occurrence of this character is found.
	 * <br>
	 * <br>
	 * For example:
	 * <ol>
	 * <li><pre>
	 *    toBeFound = 'c'
	 *    array = { ' a', 'b', 'c', 'd' }
	 *    startIndex = 2
	 *    result => 2
	 * </pre>
	 * </li>
	 * <li><pre>
	 *    toBeFound = 'c'
	 *    array = { ' a', 'b', 'c', 'd', 'e' }
	 *    startIndex = 3
	 *    result => -1
	 * </pre>
	 * </li>
	 * <li><pre>
	 *    toBeFound = 'e'
	 *    array = { ' a', 'b', 'c', 'd' }
	 *    startIndex = 0
	 *    result => -1
	 * </pre>
	 * </li>
	 * </ol>
	 *
	 * @param toBeFound the character to search
	 * @param array the array to be searched
	 * @param startIndex the stopping index
	 * @return the last index in the array for which the corresponding character is
	 * equal to toBeFound stopping at the index startIndex, -1 otherwise
	 * @throws NullPointerException if array is null
	 * @throws ArrayIndexOutOfBoundsException if startIndex is lower than 0
	 */
	public static final int lastIndexOf(
		char toBeFound,
		char[] array,
		int startIndex) {
		for (int i = array.length; --i >= startIndex;)
			if (toBeFound == array[i])
				return i;
		return -1;
	}

