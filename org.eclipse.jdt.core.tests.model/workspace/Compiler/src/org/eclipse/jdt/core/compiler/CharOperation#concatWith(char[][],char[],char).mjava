	/**
	 * Answers the concatenation of the given array parts using the given separator between each
	 * part and appending the given name at the end.
	 * <br>
	 * <br>
	 * For example:<br>
	 * <ol>
	 * <li><pre>
	 *    name = { 'c' }
	 *    array = { { 'a' }, { 'b' } }
	 *    separator = '.'
	 *    => result = { 'a', '.', 'b' , '.', 'c' }
	 * </pre>
	 * </li>
	 * <li><pre>
	 *    name = null
	 *    array = { { 'a' }, { 'b' } }
	 *    separator = '.'
	 *    => result = { 'a', '.', 'b' }
	 * </pre></li>
	 * <li><pre>
	 *    name = { ' c' }
	 *    array = null
	 *    separator = '.'
	 *    => result = { 'c' }
	 * </pre></li>
	 * </ol>
	 * 
	 * @param array the given array
	 * @param name the given name
	 * @param separator the given separator
	 * @return the concatenation of the given array parts using the given separator between each
	 * part and appending the given name at the end
	 */
	public static final char[] concatWith(
		char[][] array,
		char[] name,
		char separator) {
		int nameLength = name == null ? 0 : name.length;
		if (nameLength == 0)
			return concatWith(array, separator);

		int length = array == null ? 0 : array.length;
		if (length == 0)
			return name;

		int size = nameLength;
		int index = length;
		while (--index >= 0)
			if (array[index].length > 0)
				size += array[index].length + 1;
		char[] result = new char[size];
		index = 0;
		for (int i = 0; i < length; i++) {
			int subLength = array[i].length;
			if (subLength > 0) {
				System.arraycopy(array[i], 0, result, index, subLength);
				index += subLength;
				result[index++] = separator;
			}
		}
		System.arraycopy(name, 0, result, index, nameLength);
		return result;
	}

