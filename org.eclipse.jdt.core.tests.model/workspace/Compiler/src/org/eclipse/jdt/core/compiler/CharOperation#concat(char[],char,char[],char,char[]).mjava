	/**
	 * Answers the concatenation of the three arrays inserting the sep1 character between the 
	 * first two arrays and sep2 between the last two.
	 * It answers null if the three arrays are null.
	 * If the first array is null, then it answers the concatenation of second and third inserting
	 * the sep2 character between them.
	 * If the second array is null, then it answers the concatenation of first and third inserting
	 * the sep1 character between them.
	 * If the third array is null, then it answers the concatenation of first and second inserting
	 * the sep1 character between them.
	 * <br>
	 * <br>
	 * For example:
	 * <ol>
	 * <li><pre>
	 *    first = null
	 *    sep1 = '/'
	 *    second = { 'a' }
	 *    sep2 = ':'
	 *    third = { 'b' }
	 *    => result = { ' a' , ':', 'b' }
	 * </pre>
	 * </li>
	 * <li><pre>
	 *    first = { 'a' }
	 *    sep1 = '/'
	 *    second = null
	 *    sep2 = ':'
	 *    third = { 'b' }
	 *    => result = { ' a' , '/', 'b' }
	 * </pre>
	 * </li>
	 * <li><pre>
	 *    first = { 'a' }
	 *    sep1 = '/'
	 *    second = { 'b' }
	 *    sep2 = ':'
	 *    third = null
	 *    => result = { ' a' , '/', 'b' }
	 * </pre>
	 * </li>
	 * <li><pre>
	 *    first = { 'a' }
	 *    sep1 = '/'
	 *    second = { 'b' }
	 *    sep2 = ':'
	 *    third = { 'c' }
	 *    => result = { ' a' , '/', 'b' , ':', 'c' }
	 * </pre>
	 * </li>
	 * </ol>
	 * 
	 * @param first the first array to concatenate
	 * @param sep1 the character to insert
	 * @param second the second array to concatenate
	 * @param sep2 the character to insert
	 * @param third the second array to concatenate
	 * @return the concatenation of the three arrays inserting the sep1 character between the 
	 * two arrays and sep2 between the last two.
	 */
	public static final char[] concat(
		char[] first,
		char sep1,
		char[] second,
		char sep2,
		char[] third) {
		if (first == null)
			return concat(second, third, sep2);
		if (second == null)
			return concat(first, third, sep1);
		if (third == null)
			return concat(first, second, sep1);

		int length1 = first.length;
		int length2 = second.length;
		int length3 = third.length;
		char[] result = new char[length1 + length2 + length3 + 2];
		System.arraycopy(first, 0, result, 0, length1);
		result[length1] = sep1;
		System.arraycopy(second, 0, result, length1 + 1, length2);
		result[length1 + length2 + 1] = sep2;
		System.arraycopy(third, 0, result, length1 + length2 + 2, length3);
		return result;
	}

