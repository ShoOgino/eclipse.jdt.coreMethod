private String[] formattedComments(String source, boolean old) {
	boolean enableNewCommentFormatter = DefaultCodeFormatter.ENABLE_NEW_COMMENTS_FORMAT;
	try {
		DefaultCodeFormatter.ENABLE_NEW_COMMENTS_FORMAT = !old;
		DefaultCodeFormatter codeFormatter = codeFormatter();
		Scanner scanner = new Scanner(true, true, false/*nls*/, ClassFileConstants.JDK1_4/*sourceLevel*/, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);
		CodeSnippetParsingUtil codeSnippetParsingUtil = new CodeSnippetParsingUtil();
		CompilationUnitDeclaration compilationUnitDeclaration = codeSnippetParsingUtil.parseCompilationUnit(source.toCharArray(), getDefaultCompilerOptions(), true);
		final TypeDeclaration[] types = compilationUnitDeclaration.types;
		int headerEndPosition = types == null ? compilationUnitDeclaration.sourceEnd : types[0].declarationSourceStart;
		scanner.setSource(source.toCharArray());
		scanner.lineEnds = codeSnippetParsingUtil.recordedParsingInformation.lineEnds;
		int[][] commentsPositions = compilationUnitDeclaration.comments;
		int length = commentsPositions == null ? 0 : commentsPositions.length;
		String[] formattedComments = new String[length];
		for (int i=0; i<length; i++) {
			int[] positions = commentsPositions[i];
			int commentKind = CodeFormatter.K_JAVA_DOC;
			int commentStart = positions [0];
			int commentEnd = positions [1];
			if (commentEnd < 0) { // line or block comments have negative end position
				commentEnd = -commentEnd;
				if (commentStart > 0) { // block comments have positive start position
					commentKind = CodeFormatter.K_MULTI_LINE_COMMENT;
				} else {
					commentStart = -commentStart;
					commentKind = CodeFormatter.K_SINGLE_LINE_COMMENT;
				}
			}
			if (commentStart >= headerEndPosition) {
				int indentationLevel = getIndentationLevel(scanner, commentStart);
				formattedComments[i] = runFormatter(codeFormatter, source.substring(commentStart, commentEnd), commentKind, indentationLevel, 0, commentEnd - commentStart, LINE_SEPARATOR);
			}
		}
		return formattedComments;
	}
	finally {
		DefaultCodeFormatter.ENABLE_NEW_COMMENTS_FORMAT = enableNewCommentFormatter;
	}
}

