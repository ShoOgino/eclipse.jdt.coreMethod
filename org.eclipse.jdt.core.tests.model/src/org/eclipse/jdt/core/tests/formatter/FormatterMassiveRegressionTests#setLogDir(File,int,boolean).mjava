private static void setLogDir(File inputDir, int profiles, boolean verify) throws CoreException {

	// Compute log dir
	File rootLogDir = new File(System.getProperty("logDir"));
	if (!rootLogDir.exists()) {
		if (!rootLogDir.mkdirs()) {
			System.err.println("Cannot create specified log directory: "+rootLogDir+"!!!");
			return;
		}
	}

	// Compute log sub-directories depending on version
	rootLogDir = new File(rootLogDir, ECLIPSE_VERSION);
	String subRootDir;
	if (PATCH_BUG != null) {
		rootLogDir = new File(rootLogDir, "tests");
		rootLogDir = new File(rootLogDir, PATCH_BUG);
		subRootDir = PATCH_VERSION;
	} else if (JDT_CORE_HEAD) {
		subRootDir = "HEAD";
	} else {
		rootLogDir = new File(rootLogDir, ECLIPSE_MILESTONE);
		subRootDir = JDT_CORE_VERSION;
	}

	// Compute log sub-directories depending on profiles
	List subDirs = new ArrayList();
	if (profiles > 0) {
		subDirs.add("profiles");
		setProfilesDir(profiles, subDirs);
	}

	if (FILES_FILTER_KIND > 0) {
		subDirs.add("filter");
		subDirs.add(FILES_FILTER.replace('?', '_').replace('*', '%'));
	}

	// Create log stream
	File logDir = createDir(new File (rootLogDir, subRootDir), subDirs);
	String filePrefix = inputDir.getName().replaceAll("\\.", "");
	String logFileName = filePrefix+".txt";
	LOG_FILE = new File(logDir, logFileName);
	if (verify && LOG_FILE.exists()) {
		File saveDir = new File(new File(rootLogDir, "save"), subRootDir);
		saveDir.mkdirs();
		int i=0;
		while (true) {
			String dirN = Integer.toString(i);
			if (i<10) dirN = "0" + dirN;
			saveDir = new File(saveDir, dirN);
			logDir = createDir(saveDir, subDirs);
			File renamedFile = new File(logDir, logFileName);
			if (LOG_FILE.renameTo(renamedFile)) break;
			i++;
		}
	}
//	LOG_RESOURCE = folder.getFile(logFileName);
	try {
		LOG_STREAM = new PrintStream(new BufferedOutputStream(new FileOutputStream(LOG_FILE)));
		LOG_STREAM.flush();
	}
	catch (FileNotFoundException fnfe) {
		System.err.println("Can't create log file"+LOG_FILE); //$NON-NLS-1$
	}
//	if (LOG_RESOURCE.exists()) {
//		Util.delete(LOG_RESOURCE);
//	}
//	LOG_BUFFER = new StringBuffer();
}

