public void testBug260381_wksp2_05() throws JavaModelException {
	useOldCommentWidthCounting();
	useOldJavadocTagsFormatting();
	String source = 
		"package wksp2;\n" + 
		"\n" + 
		"public interface I05 {\n" + 
		"\n" + 
		"  /**\n" + 
		"   * Indexes the specified values into a {@code Multimap} by applying a\n" + 
		"   * specified function to each item in an {@code Iterable} of values. Each\n" + 
		"   * value will be stored as a value in the specified multimap. The key used to\n" + 
		"   * store that value in the multimap will be the result of calling the function\n" + 
		"   * on that value. Depending on the multimap implementation, duplicate entries\n" + 
		"   * (equal keys and equal values) may be collapsed.\n" + 
		"   *\n" + 
		"   * <p>For example,\n" + 
		"   *\n" + 
		"   * <pre class=\"code\">\n" + 
		"   * List&lt;String> badGuys =\n" + 
		"   *   Arrays.asList(\"Inky\", \"Blinky\", \"Pinky\", \"Pinky\", \"Clyde\");\n" + 
		"   * Function&lt;String, Integer> stringLengthFunction = ...;\n" + 
		"   * Multimap&lt;Integer, String> index = Multimaps.newHashMultimap();\n" + 
		"   * Multimaps.index(badGuys, stringLengthFunction, index);\n" + 
		"   * System.out.println(index); </pre>\n" + 
		"   *\n" + 
		"   * prints\n" + 
		"   *\n" + 
		"   * <pre class=\"code\">\n" + 
		"   * {4=[Inky], 5=[Pinky, Clyde], 6=[Blinky]} </pre>\n" + 
		"   *\n" + 
		"   * The {@link HashMultimap} collapses the duplicate occurrence of\n" + 
		"   * {@code (5, \"Pinky\")}.\n" + 
		"   *\n" + 
		"   * @param values the values to add to the multimap\n" + 
		"   * @param keyFunction the function used to produce the key for each value\n" + 
		"   * @param multimap the multimap to store the key value pairs\n" + 
		"   */\n" + 
		"  void foo();\n" + 
		"}\n";
	formatSource(source,
		"package wksp2;\n" + 
		"\n" + 
		"public interface I05 {\n" + 
		"\n" + 
		"	/**\n" + 
		"	 * Indexes the specified values into a {@code Multimap} by applying a\n" + 
		"	 * specified function to each item in an {@code Iterable} of values. Each\n" + 
		"	 * value will be stored as a value in the specified multimap. The key used\n" + 
		"	 * to store that value in the multimap will be the result of calling the\n" + 
		"	 * function on that value. Depending on the multimap implementation,\n" + 
		"	 * duplicate entries (equal keys and equal values) may be collapsed.\n" + 
		"	 *\n" + 
		"	 * <p>\n" + 
		"	 * For example,\n" + 
		"	 *\n" + 
		"	 * <pre class=\"code\">\n" + 
		"	 * List&lt;String> badGuys =\n" + 
		"	 *   Arrays.asList(\"Inky\", \"Blinky\", \"Pinky\", \"Pinky\", \"Clyde\");\n" + 
		"	 * Function&lt;String, Integer> stringLengthFunction = ...;\n" + 
		"	 * Multimap&lt;Integer, String> index = Multimaps.newHashMultimap();\n" + 
		"	 * Multimaps.index(badGuys, stringLengthFunction, index);\n" + 
		"	 * System.out.println(index);\n" + 
		"	 * </pre>\n" + 
		"	 *\n" + 
		"	 * prints\n" + 
		"	 *\n" + 
		"	 * <pre class=\"code\">\n" + 
		"	 * {4=[Inky], 5=[Pinky, Clyde], 6=[Blinky]}\n" + 
		"	 * </pre>\n" + 
		"	 *\n" + 
		"	 * The {@link HashMultimap} collapses the duplicate occurrence of\n" + 
		"	 * {@code (5, \"Pinky\")}.\n" + 
		"	 *\n" + 
		"	 * @param values\n" + 
		"	 *            the values to add to the multimap\n" + 
		"	 * @param keyFunction\n" + 
		"	 *            the function used to produce the key for each value\n" + 
		"	 * @param multimap\n" + 
		"	 *            the multimap to store the key value pairs\n" + 
		"	 */\n" + 
		"	void foo();\n" + 
		"}\n"
	);
}

