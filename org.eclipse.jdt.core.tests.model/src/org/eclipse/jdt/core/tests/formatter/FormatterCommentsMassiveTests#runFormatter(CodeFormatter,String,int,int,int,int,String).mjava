String runFormatter(CodeFormatter codeFormatter, String source, int kind, int indentationLevel, int offset, int length, String lineSeparator) {
	TextEdit edit = codeFormatter.format(kind, source, offset, length, indentationLevel, lineSeparator);//$NON-NLS-1$
	if (edit == null) return null;
	String result = org.eclipse.jdt.internal.core.util.Util.editedString(source, edit);

	int count = 1;
	if (!COMPARE && length == source.length()) {
		while (count++ < FORMAT_REPEAT) {
			edit = codeFormatter.format(kind, result, 0, result.length(), indentationLevel, lineSeparator);//$NON-NLS-1$
			if (edit == null) return null;
			String newResult = org.eclipse.jdt.internal.core.util.Util.editedString(result, edit);
			if (!result.equals(newResult)) {
				switch (IGNORE_SPACES) {
					case ALL_SPACES:
						String trimmedExpected = ModelTestsUtil.removeWhiteSpace(result);
						String trimmedActual= ModelTestsUtil.removeWhiteSpace(newResult);
						if (trimmedExpected.equals(trimmedActual)) {
							this.whitespacesFailures.add(this.path);
							this.hasSpaceFailure = true;
							return result;
						}
						break;
					case LINES_LEADING_SPACES:
						trimmedExpected = ModelTestsUtil.trimLinesLeadingWhitespaces(result);
						trimmedActual= ModelTestsUtil.trimLinesLeadingWhitespaces(newResult);
						if (trimmedExpected.equals(trimmedActual)) {
							this.leadingWhitespacesFailures.add(this.path);
							this.hasSpaceFailure = true;
							return result;
						}
						if (ModelTestsUtil.removeWhiteSpace(result).equals(ModelTestsUtil.removeWhiteSpace(newResult))) {
							this.whitespacesFailures.add(this.path);
							this.hasSpaceFailure = true;
							return result;
						}
						break;
					default:
						trimmedExpected = filterFormattingInComments(result);
						trimmedActual= filterFormattingInComments(newResult);
						if (trimmedExpected.equals(trimmedActual)) {
							this.whitespacesFailures.add(this.path);
							this.hasSpaceFailure = true;
							return result;
						}
						break;
				}
				if (!isExpectedFailure()) {
					assertSourceEquals("2nd formatting is different from first one!", Util.convertToIndependantLineDelimiter(result), Util.convertToIndependantLineDelimiter(newResult));
				}
			}
		}
	}
	return result;
}

