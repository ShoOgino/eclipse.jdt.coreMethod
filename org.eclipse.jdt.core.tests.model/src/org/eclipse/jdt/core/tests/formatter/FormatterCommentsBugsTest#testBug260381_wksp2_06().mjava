public void testBug260381_wksp2_06() throws JavaModelException {
	String source = 
		"package wksp2;\n" + 
		"\n" + 
		"public interface I06 {\n" + 
		"\n" + 
		"  /**\n" + 
		"   * Adds a number of occurrences of an element to this multiset. Note that if\n" + 
		"   * {@code occurrences == 1}, this method has the identical effect to {@link\n" + 
		"   * #add(Object)}. This method is functionally equivalent (except in the case\n" + 
		"   * of overflow) to the call {@code addAll(Collections.nCopies(element,\n" + 
		"   * occurrences))}, which would presumably perform much more poorly.\n" + 
		"   *\n" + 
		"   * @param element the element to add occurrences of; may be {@code null} only\n" + 
		"   *     if explicitly allowed by the implementation\n" + 
		"   * @param occurrences the number of occurrences of this element to add. May\n" + 
		"   *     be zero, in which case no change will be made.\n" + 
		"   * @return the previous count of this element before the operation; possibly\n" + 
		"   *     zero - TODO: make this the actual behavior!\n" + 
		"   * @throws IllegalArgumentException if {@code occurrences} is negative, or if\n" + 
		"   *     this operation would result in more than {@link Integer#MAX_VALUE}\n" + 
		"   *     occurrences of the element \n" + 
		"   * @throws NullPointerException if {@code element} is null and this\n" + 
		"   *     implementation does not permit null elements. Note that if {@code\n" + 
		"   *     occurrences} is zero, the implementation may opt to return normally.\n" + 
		"   */\n" + 
		"  boolean /*int*/ add(E element, int occurrences);\n" + 
		"}\n";
	formatSource(source,
		"package wksp2;\n" + 
		"\n" + 
		"public interface I06 {\n" + 
		"\n" + 
		"	/**\n" + 
		"	 * Adds a number of occurrences of an element to this multiset. Note that if\n" + 
		"	 * {@code occurrences == 1}, this method has the identical effect to\n" + 
		"	 * {@link #add(Object)}. This method is functionally equivalent (except in\n" + 
		"	 * the case of overflow) to the call\n" + 
		"	 * {@code addAll(Collections.nCopies(element,\n" + 
		"	 * occurrences))}, which would presumably perform much more poorly.\n" + 
		"	 *\n" + 
		"	 * @param element\n" + 
		"	 *            the element to add occurrences of; may be {@code null} only if\n" + 
		"	 *            explicitly allowed by the implementation\n" + 
		"	 * @param occurrences\n" + 
		"	 *            the number of occurrences of this element to add. May be zero,\n" + 
		"	 *            in which case no change will be made.\n" + 
		"	 * @return the previous count of this element before the operation; possibly\n" + 
		"	 *         zero - TODO: make this the actual behavior!\n" + 
		"	 * @throws IllegalArgumentException\n" + 
		"	 *             if {@code occurrences} is negative, or if this operation\n" + 
		"	 *             would result in more than {@link Integer#MAX_VALUE}\n" + 
		"	 *             occurrences of the element\n" + 
		"	 * @throws NullPointerException\n" + 
		"	 *             if {@code element} is null and this implementation does not\n" + 
		"	 *             permit null elements. Note that if {@code\n" + 
		"	 *     occurrences} is zero, the implementation may opt to return normally.\n" + 
		"	 */\n" + 
		"	boolean /* int */ add(E element, int occurrences);\n" + 
		"}\n"
	);
}

