	public void _test() {
		try {
			char[] contents = org.eclipse.jdt.internal.compiler.util.Util.getFileCharContent(new File("D:/workspaces/eclipse/plugins/TestingOlivier/src/FormatterRegressionTests.java"), null);
			ASTParser c = ASTParser.newParser(AST.LEVEL_2_0);
			c.setSource(contents);
			CompilationUnit compilationUnit = (CompilationUnit) c.createAST(null);
			List types = compilationUnit.types();
			TypeDeclaration typeDeclaration = (TypeDeclaration) types.get(0);
			MethodDeclaration[] methodDeclarations = typeDeclaration.getMethods();
			int testCaseCounter = 229;
			for (int i = 0, max = methodDeclarations.length; i < max; i++) {
				MethodDeclaration methodDeclaration = methodDeclarations[i];
				final SimpleName methodName = methodDeclaration.getName();
				if (methodName.getIdentifier().startsWith("test")) {
					Block block = methodDeclaration.getBody();
					List statements = block.statements();
					Statement statement = (Statement) statements.get(0);
					if (statement.getNodeType() == ASTNode.VARIABLE_DECLARATION_STATEMENT) {
						VariableDeclarationStatement localDeclaration = (VariableDeclarationStatement) statement;
						List fragments = localDeclaration.fragments();
						VariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);
						if (fragment.getName().getIdentifier().equals("source")) {
							Expression expression = fragment.getInitializer();
							StringBuffer buffer = new StringBuffer();
							switch(expression.getNodeType()) {
								case ASTNode.INFIX_EXPRESSION :
									InfixExpression expression2 = (InfixExpression) expression;
									List extendedOperands = expression2.extendedOperands();
									buffer.append(getSource(expression2.getLeftOperand(), contents));
									buffer.append(getSource(expression2.getRightOperand(), contents));
									for (int j = 0, max2 = extendedOperands.size(); j < max2; j++) {
										buffer.append(getSource((Expression) extendedOperands.get(j), contents));
									}
									break;
								case ASTNode.STRING_LITERAL :
									StringLiteral literal = (StringLiteral) expression;
									buffer.append(getSource(literal, contents));
									break;
							}
							createTestCase(buffer.toString(), testCaseCounter++);
						}
					}
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

