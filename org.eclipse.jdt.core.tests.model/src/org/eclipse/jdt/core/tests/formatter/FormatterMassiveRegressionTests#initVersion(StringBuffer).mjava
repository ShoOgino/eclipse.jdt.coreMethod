/*
 * Read JDT/Core build notes file to see what version is currently running.
 */
private static void initVersion(StringBuffer buffer) {
	BufferedReader buildnotesReader;
    try {
		URL platformURL = Platform.getBundle("org.eclipse.jdt.core").getEntry("/");
		String path = new File(FileLocator.toFileURL(platformURL).getFile(), "buildnotes_jdt-core.html").getAbsolutePath();
	    buildnotesReader = new BufferedReader(new InputStreamReader(new FileInputStream(path)));
    } catch (IOException ioe) {
	    ioe.printStackTrace();
	    return;
    }
	String line;
	JDT_CORE_HEAD = true;
	try {
		while ((line = buildnotesReader.readLine()) != null) {
			if (line.startsWith("<a name=\"")) {
				boolean first = JDT_CORE_VERSION == null;
				JDT_CORE_VERSION = line.substring(line.indexOf('"')+1, line.lastIndexOf('"'));
				if (!first) break;
			} else if (line.startsWith("Eclipse SDK ")) {
				StringTokenizer tokenizer = new StringTokenizer(line);
				tokenizer.nextToken(); // 'Eclipse'
				tokenizer.nextToken(); // 'SDK'
				String milestone = tokenizer.nextToken();
				ECLIPSE_VERSION = "v"+milestone.charAt(0)+milestone.charAt(2);
				ECLIPSE_MILESTONE = milestone.substring(3);
				tokenizer.nextToken(); // '-'
				JDT_CORE_HEAD = tokenizer.nextToken().equals("%date%");
			} else if (line.startsWith("<h2>What's new")) {
				line = buildnotesReader.readLine();
				if (line.startsWith("Patch")) {
					StringTokenizer tokenizer = new StringTokenizer(line);
					tokenizer.nextToken(); // 'Patch'
					String version = tokenizer.nextToken();
					if (version.length() == 3 && version.charAt(0) == 'v') {
						PATCH_VERSION = version;
					}
					while (tokenizer.hasMoreTokens()) {
						PATCH_BUG = tokenizer.nextToken();
					}
					try {
						Integer.parseInt(PATCH_BUG);
					}
					catch (NumberFormatException nfe) {
						System.err.println("Invalid patch bug number noticed in JDT/Core buildnotes:"+PATCH_BUG);
					}
				}
				if (!JDT_CORE_HEAD) break;
			}
		}
	} catch (Exception e) {
		try {
	        buildnotesReader.close();
        } catch (IOException ioe) {
	        ioe.printStackTrace();
        }
	}

	// Log version info
	buffer.append("Version   : ");
	if (PATCH_BUG != null) {
		buffer.append(PATCH_BUG);
		buffer.append(' ');
		buffer.append(PATCH_VERSION);
		buffer.append(" applied on ");
	}
	if (JDT_CORE_HEAD) {
		buffer.append("HEAD on top of ");
	}
	buffer.append(JDT_CORE_VERSION);
	buffer.append(LINE_SEPARATOR);
}

