public static Test suite() {

	TestSuite suite = new Suite(FormatterMassiveRegressionTests.class.getName());
	try {
		// Init version
		StringBuffer buffer = new StringBuffer();
		initVersion(buffer);
		
		// Init profiles
		initProfiles(buffer);

		// Log date of test
		long start = System.currentTimeMillis();
		SimpleDateFormat format = new SimpleDateFormat();
		Date now = new Date(start);
		buffer.append("Test date : ");
		buffer.append(format.format(now));
		buffer.append(LINE_SEPARATOR);

		// Get input dir
		buffer.append("Input dir : ");
		buffer.append(INPUT_DIR);

		// Output to console to show startup
		String firstBuffer = buffer.toString();
		System.out.println(firstBuffer);
		buffer.setLength(0);

		// Get files from input dir
		FileFilter filter = new FileFilter() {
			public boolean accept(File pathname) {
				String path = pathname.getPath();
				boolean accept = pathname.isDirectory() || path.endsWith(".java");
				if (accept) {
					switch (FILES_FILTER_KIND) {
						case 1: // Equals
							accept = path.equals(FILES_FILTER);
							break;
						case 2: // Starts with
							accept = path.startsWith(FILES_FILTER);
							break;
						case 3: // Starts with + same length
							accept = path.startsWith(FILES_FILTER) && path.length() == FILES_FILTER.length();
							break;
						case 4: // Pattern
							accept = path.matches(FILES_FILTER);
							break;
					}
				}
				return accept;
            }
		};
		File[] allFiles = ModelTestsUtil.getAllFiles(INPUT_DIR, filter);
		MAX_FILES = allFiles.length;
		MAX_DIGITS = (int) (Math.log(MAX_FILES)/Math.log(10));
		buffer.append("            ");
		buffer.append(MAX_FILES);
		buffer.append(" java files found");
		buffer.append(LINE_SEPARATOR);

		// Init directories
		boolean clean = initDirectories(buffer);
		buffer.append("Compare vs: ");
		if (CAN_COMPARE) {
			if (clean) {
				buffer.append(JDT_CORE_VERSION);
			} else {
				File versionFile = new File(OUTPUT_DIR, "version.txt");
				if (versionFile.exists()) {
					buffer.append(Util.fileContent(versionFile.getAbsolutePath()));
				} else {
					buffer.append("???");
				}
			}
		} else {
			buffer.append("none");
		}
//		buffer.append(LINE_SEPARATOR);

		// Write logs
		System.out.println(buffer.toString());
		if (LOG_STREAM != null) {
			LOG_STREAM.println(firstBuffer);
			LOG_STREAM.println(buffer.toString());
			LOG_STREAM.flush();
		}
		
		// Add tests to clean the output directory and rebuild the references
		if (clean) {
			suite.addTest(new FormatterMassiveRegressionTests());
			suite.addTest(new FormatterMassiveRegressionTests(allFiles));
		}
		
		// Add one test per found file
		for (int i=0; i<MAX_FILES; i++) {
			suite.addTest(new FormatterMassiveRegressionTests(allFiles[i], i, CAN_COMPARE));
		}
    } catch (Exception e) {
    	// skip
    }
	return suite;
}

