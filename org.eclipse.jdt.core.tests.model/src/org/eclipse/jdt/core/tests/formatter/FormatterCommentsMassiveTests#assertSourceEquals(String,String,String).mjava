/*
 * Asserts that the given actual source (usually coming from a file content) is equal to the expected one.
 * Note that 'expected' is assumed to have the '\n' line separator. 
 * The line separators in 'actual' are converted to '\n' before the comparison.
 */
protected void assertSourceEquals(String message, String expected, String actual) {
	if (actual == null) {
		assertEquals(message, expected, null);
		return;
	}
	actual = Util.convertToIndependantLineDelimiter(actual);
	if (ASSERT_EQUALS_STRINGS) {
		try {
			assertEquals(message, expected, actual);
		}
		catch (ComparisonFailure cf) {
			if (IGNORE_WHITESPACES) {
				String trimmedExpected = ModelTestsUtil.removeWhiteSpace(expected);
				String trimmedActual= ModelTestsUtil.removeWhiteSpace(actual);
				if (trimmedExpected.equals(trimmedActual)) {
					this.spaceFailures++;
					System.out.println("n�"+this.spaceFailures+": Different spaces than old formatter for "+this.file.getName());
					return;
				}
			} else if (IGNORE_LINES_LEADING_WHITESPACES) {
				String trimmedExpected = ModelTestsUtil.trimLinesLeadingWhitespaces(expected);
				String trimmedActual= ModelTestsUtil.trimLinesLeadingWhitespaces(actual);
				if (trimmedExpected.equals(trimmedActual)) {
					this.spaceFailures++;
					System.out.println("n�"+this.spaceFailures+": Different line leading spaces than old formatter for "+this.file.getName());
					return;
				}
			}
			this.failures++;
			ASSERT_EQUALS_STRINGS = this.failures < MAX_FAILURES;
			throw cf;
		}
	} else {
		assertTrue(message, actual.equals(expected));
	}
}

