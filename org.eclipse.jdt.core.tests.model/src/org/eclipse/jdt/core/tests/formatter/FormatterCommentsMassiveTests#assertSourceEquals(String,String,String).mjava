/*
 * Asserts that the given actual source (usually coming from a file content) is equal to the expected one.
 * Note that 'expected' is assumed to have the '\n' line separator. 
 * The line separators in 'actual' are converted to '\n' before the comparison.
 */
protected void assertSourceEquals(String message, String expected, String actual) {
	if (actual == null) {
		assertEquals(message, expected, null);
		return;
	}
	actual = Util.convertToIndependantLineDelimiter(actual);
	try {
		if (ASSERT_EQUALS_STRINGS) {
			assertEquals(message, expected, actual);
		} else {
			assertTrue(message, actual.equals(expected));
		}
	}
	catch (ComparisonFailure cf) {
		if (IGNORE_WHITESPACES) {
			String trimmedExpected = ModelTestsUtil.removeWhiteSpace(expected);
			String trimmedActual= ModelTestsUtil.removeWhiteSpace(actual);
			if (trimmedExpected.equals(trimmedActual)) {
				this.whitespacesFailures.add(this.path);
				return;
			}
		} else if (IGNORE_LINES_LEADING_WHITESPACES) {
			String trimmedExpected = ModelTestsUtil.trimLinesLeadingWhitespaces(expected);
			String trimmedActual= ModelTestsUtil.trimLinesLeadingWhitespaces(actual);
			if (trimmedExpected.equals(trimmedActual)) {
				this.leadingWhitespacesFailures.add(this.path);
				return;
			}
		}
		if (isExpectedFailure()) return;
		this.failures.add(this.path);
		ASSERT_EQUALS_STRINGS = this.failures.size() < MAX_FAILURES;
		throw cf;
	}
	catch (AssertionFailedError afe) {
		this.failures.add(this.path);
		throw afe;
	}
}

