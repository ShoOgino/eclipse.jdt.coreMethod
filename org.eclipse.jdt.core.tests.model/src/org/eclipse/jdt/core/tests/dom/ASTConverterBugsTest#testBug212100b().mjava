public void testBug212100b() throws JavaModelException {
	this.workingCopies = new ICompilationUnit[2];
	this.workingCopies[0] = getWorkingCopy("/Converter15/src/X.java", true/*resolve*/);
	String contents =
		"public class X {\n" +
		"	public class Y {\n" +
		"      void foo() {}\n" +
		"   }\n" +
		"}";
	this.workingCopies[0].getBuffer().setContents(contents);
	this.workingCopies[0].save(null, true);

	this.workingCopies[1] = getWorkingCopy("/Converter15/src/Z.java", true/*resolve*/);
	String contentsZ =
		"public class Z {\n" +
		"	public class W {\n" +
		"      void bar() {}\n" +
		"   }\n" +
		"}";
	this.workingCopies[1].getBuffer().setContents(contentsZ);
	this.workingCopies[1].save(null, true);

	final String keyX = "LX;";
	final String keyXY = "LX$Y;";
	final String keyZ = "LZ;";
	final String keyZW = "LZ$W;";

	resolveASTs(this.workingCopies,
			new String[] { keyX, keyZ },
			new ASTRequestor() {
				public void acceptBinding(String bindingKey, IBinding binding) {
					IBinding[] bindings = createBindings(new String[] {
							keyX, keyXY, keyZ, keyZW
					});
					assertNotNull("When accepting " + bindingKey + ", Binding for X should not be null", bindings[0]);
					assertNotNull("When accepting " + bindingKey + ", Binding for X.Y should not be null", bindings[1]);
					assertNotNull("When accepting " + bindingKey + ", Binding for Z should not be null", bindings[2]);
					assertNotNull("When accepting " + bindingKey + ", Binding for Z.W should not be null", bindings[3]);
				}
			},
			getJavaProject("Converter15"),
			null);
}

