	public void test013() throws Exception {
			String contents =
				"public class X extends Y<@Marker(10) Integer, String> {}\n" +
				"class Y<T, V> {}\n" +
				"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
				"@interface Marker {int value();}\n";

		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true/*resolve*/);
		ASTNode node = buildAST(contents, this.workingCopy);
		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
		CompilationUnit compilationUnit = (CompilationUnit) node;
		assertProblemsSize(compilationUnit, 0);
		List types = compilationUnit.types();
		assertEquals("Incorrect no of types", 3, types.size());
		TypeDeclaration typeDecl = (TypeDeclaration) types.get(0);
		ParameterizedType superClass = (ParameterizedType) typeDecl.getSuperclassType();
		List arguments = superClass.typeArguments();
		assertEquals("Incorrect no of type arguments", 2, arguments.size());
		Type type = (Type) arguments.get(0);

		verifyAnnotationOnType(type, new String[]{"@Marker(value = 10)"});
	}

