	/*
	 * Resolves the given cus and binding key as a batch. 
	 * While resolving, for the ASTNode that is marked, ensures that its binding key is the expected one.
	 * Ensures that the returned binding corresponds to the expected key.
	 */
	private void assertRequestedBindingFound(String[] pathAndSources, final String expectedKey) throws JavaModelException {
		ICompilationUnit[] workingCopies = null;
		try {
			final MarkerInfo[] markerInfos = createMarkerInfos(pathAndSources);
			workingCopies = createWorkingCopies(markerInfos, this.owner);
			class Requestor extends TestASTRequestor {
				String bindingKey;
				int index = -1;
				String foundKey;
				public void acceptAST(ICompilationUnit source, CompilationUnit cu) {
					super.acceptAST(source, cu);
					ASTNode node = findNode(cu, markerInfos[++this.index]);
					if (node != null) {
						IBinding binding = null;
						if (node instanceof PackageDeclaration) {
							binding = ((PackageDeclaration) node).resolveBinding();
						} else if (node instanceof TypeDeclaration) {
							binding = ((TypeDeclaration) node).resolveBinding();
						} else if (node instanceof AnonymousClassDeclaration) {
							binding = ((AnonymousClassDeclaration) node).resolveBinding();
						} else if (node instanceof TypeDeclarationStatement) {
							binding = ((TypeDeclarationStatement) node).resolveBinding();
						}
						this.bindingKey = binding == null ? null : binding.getKey();
					}
				}
				public void acceptBinding(String key, IBinding binding) {
					super.acceptBinding(key, binding);
					this.foundKey = binding.getKey();
				}
			};
			Requestor requestor = new Requestor();
			resolveASTs(workingCopies, new String[] {expectedKey}, requestor, this.owner);
			
			if (!expectedKey.equals(requestor.bindingKey))
				System.out.println(Util.displayString(expectedKey, 3));
			assertEquals("Unexpected binding for marked node", expectedKey, requestor.bindingKey);
			
			if (!expectedKey.equals(requestor.foundKey)) {
				System.out.println(Util.displayString(requestor.foundKey, 3));
			}
			assertEquals("Unexpected binding found by acceptBinding", expectedKey, requestor.foundKey);
		} finally {
			discardWorkingCopies(workingCopies);
		}
	}

