	public void testNumberLiteral() {
		long previousCount = ast.modificationCount();
		NumberLiteral x = ast.newNumberLiteral("1234");
		assertTrue(ast.modificationCount() > previousCount);
		previousCount = ast.modificationCount();
		assertTrue(x instanceof Expression);
		assertTrue(x.getAST() == ast);
		assertTrue(x.getParent() == null);
		assertTrue("1234".equals(x.getToken()));
		assertTrue(x.getNodeType() == ASTNode.NUMBER_LITERAL);
		// make sure that reading did not change modification count
		assertTrue(ast.modificationCount() == previousCount);

		// test other factory method
		previousCount = ast.modificationCount();
		NumberLiteral y = ast.newNumberLiteral();
		assertTrue(ast.modificationCount() > previousCount);
		assertTrue(y.getAST() == ast);
		assertTrue(y.getParent() == null);
		assertTrue("0".equals(y.getToken()));

		final String[] samples =
			{ "0", "1", "1234567890",
			  "0L", "1L", "1234567890L",
			  "0l", "1l", "1234567890l",
			  "077", "0177", "012345670",
			  "077L", "0177L", "012345670L",
			  "077l", "0177l", "012345670l",
			  "0x00", "0x1", "0x0123456789ABCDEF",
			  "0x00L", "0x1L", "0x0123456789ABCDEFL",
			  "0x00l", "0x1l", "0x0123456789ABCDEFl",
			  "1e1f", "2.f", ".3f", "0f", "3.14f", "6.022137e+23f",
			  "1e1", "2.", ".3", "0.0", "3.14", "1e-9d", "1e137",
			};
		for (int i = 0; i < samples.length; i++) {			
			previousCount = ast.modificationCount();
			x.setToken(samples[i]);
			assertTrue(ast.modificationCount() > previousCount);
			assertTrue(samples[i].equals(x.getToken()));
		}

		// check that property cannot be set to null
		try {
			x.setToken(null);
			assertTrue(false);
		} catch (RuntimeException e) {
			// pass
		}

	}		

