	public void testMemberTypeSource() throws CoreException, IOException {
		String contents = 
				"import java.lang.annotation.ElementType;\n" +
				"import java.lang.annotation.Target;\n" +
				"@Target(ElementType.TYPE_USE)\n" +
				"@interface T {\n" +
				"}\n" +
				"public class X {\n" +
				"    class Y {}\n" +
				"    @T X.Y xy;\n" +
				"}\n";
		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true);
		ASTNode node = buildAST(contents, this.workingCopy);
		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
		CompilationUnit compilationUnit = (CompilationUnit) node;
		assertProblemsSize(compilationUnit, 0);
		List types = compilationUnit.types();
		assertEquals("Incorrect no of types", 2, types.size());
		TypeDeclaration typeDecl = (TypeDeclaration) types.get(1);
		FieldDeclaration[] fields = typeDecl.getFields();
		assertEquals("Incorrect no of fields", 1, fields.length);
		FieldDeclaration field = fields[0];
		ITypeBinding binding = field.getType().resolveBinding();
		assertEquals("Wrong Type", "@T X", (binding = binding.getDeclaringClass()).toString());
		assertEquals("Wrong Type", "@T X.Y", (binding = binding.getDeclaredTypes()[0]).toString());
	}

