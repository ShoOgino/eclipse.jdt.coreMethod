	public void test002() throws Exception {
		String contents = 
						"public class X {\n" +
						"    @Marker <@Marker2 T> int x() { return 10; };\n" +
						"}\n" +
						"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_PARAMETER)\n" +
						"@interface Marker2{}\n" +
						"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
						"@interface Marker {}\n";

		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true/*resolve*/);
		ASTNode node = buildAST(contents, this.workingCopy);
		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
		CompilationUnit compilationUnit = (CompilationUnit) node;
		assertProblemsSize(compilationUnit, 0);
		List types = compilationUnit.types();
		assertEquals("Incorrect no of types", 3, types.size());
		TypeDeclaration typeDecl = (TypeDeclaration) types.get(0);
		MethodDeclaration[] methods = typeDecl.getMethods();
		assertEquals("Incorrect method", 1, methods.length);
		MethodDeclaration method = methods[0];
		List params = method.typeParameters();
		TypeParameter param = (TypeParameter) params.get(0);
		ITypeBinding binding = param.resolveBinding();
		verifyAnnotationsOnBinding(binding, new String[]{"@Marker2()"});
		verifyAnnotationOnType(method.getReturnType2(), new String[]{"@Marker()"});
	}

