	/*
	 * Verify that objects of Javadoc comment structure match their source positions
	 *
	private void verifyFragmentsPositions(Javadoc docComment, char[] source) {
		// Verify javadoc start and end position
		int start = docComment.getStartPosition();
		assertTrue("Misplaced javadoc start", source[start] == '/' && source[start+1] == '*' && source[start+2] == '*');
		int end = start+docComment.getLength()-1;
		assertTrue("Wrong javadoc length", end<source.length);
		assertTrue("Misplaced javadoc end", source[end-1] == '*' && source[end] == '/');
		// Verify tags
		Iterator tags = docComment.tags().listIterator();
		while (tags.hasNext()) {
			verifyFragmentsPositions((TagElement) tags.next(), source);
		}
	}

	/*
	 * Verify that objects of Javadoc tag structure match their source positions
	 *
	private void verifyFragmentsPositions(TagElement tagElement, char[] source) {
		// Verify tag name
		String tagName = tagElement.getTagName();
		if (tagName != null) {
			assertEquals("Misplaced tag name at "+tagElement.getStartPosition(), tagName, new String(source, tagElement.getStartPosition(), tagName.length()));
		}
		// Verify each fragment
		Iterator elements = tagElement.fragments().listIterator();
		while (elements.hasNext()) {
			ASTNode fragment = (ASTNode) elements.next();
			String text = null;
			if (fragment.getNodeType() == ASTNode.TEXT_ELEMENT) {
				text = new String(source, fragment.getStartPosition(), fragment.getLength());
				assertEquals("Misplaced or wrong text element at "+fragment.getStartPosition(), text, ((TextElement) fragment).getText());
			} else if (fragment.getNodeType() == ASTNode.TAG_ELEMENT) {
				verifyFragmentsPositions((TagElement) fragment, source);
			} else if (fragment.getNodeType() == ASTNode.MEMBER_REF) {
				MemberRef memberRef = (MemberRef) fragment;
				ASTNode node = memberRef.getQualifier();
				if (node != null) {
					text = new String(source, node.getStartPosition(), node.getLength());
					assertEquals("Misplaced or wrong member ref container at "+node.getStartPosition(), text, node.toString());
				}
				if (memberRef.getName() != null) {
					node = memberRef.getName();
					text = new String(source, node.getStartPosition(), node.getLength());
					assertEquals("Misplaced or wrong member ref name at "+node.getStartPosition(), text, node.toString());
				}
			} else if (fragment.getNodeType() == ASTNode.METHOD_REF) {
				MethodRef methodRef = (MethodRef) fragment;
				ASTNode node = methodRef.getQualifier();
				if (node != null) {
					text = new String(source, node.getStartPosition(), node.getLength());
					assertEquals("Misplaced or wrong method ref container at "+node.getStartPosition(), text, node.toString());
				}
				node = methodRef.getName();
				text = new String(source, node.getStartPosition(), node.getLength());
				assertEquals("Misplaced or wrong method ref name at "+node.getStartPosition(), text, node.toString());
				Iterator parameters = methodRef.parameters().listIterator();
				while (parameters.hasNext()) {
					MethodRefParameter param = (MethodRefParameter) parameters.next();
					node = param.getName();
					if (node != null) {
						text = new String(source, node.getStartPosition(), node.getLength());
						assertEquals("Misplaced or wrong method ref parameter name at "+node.getStartPosition(), text, node.toString());
					}
					node = param.getType();
					text = new String(source, node.getStartPosition(), node.getLength());
					assertEquals("Misplaced or wrong method ref parameter type at "+node.getStartPosition(), text, node.toString());
				}
			}
		}
	}

	/*
	 * Verify positions of tags in source
	 */
	private void verifyPositions(Javadoc docComment, char[] source) {
		// Verify javadoc start and end position
		int start = docComment.getStartPosition();
		int end = start+docComment.getLength()-1;
		assertTrue("Misplaced javadoc start", source[start++] == '/' && source[start++] == '*' && source[start++] == '*');
		// Get first meaningful character
		int tagStart = start;
		// Verify tags
		Iterator tags = docComment.tags().listIterator();
		while (tags.hasNext()) {
			while (source[tagStart] == '*' || Character.isWhitespace(source[tagStart])) {
				tagStart++; // purge non-stored characters
			}
			TagElement tagElement = (TagElement) tags.next();
			assertEquals("Tag element has wrong start position", tagStart, tagElement.getStartPosition());
//			int tagEnd = tagStart+tagElement.getLength()-1;
			verifyPositions(tagElement , source);
			tagStart += tagElement.getLength();
		}
		while (Character.isWhitespace(source[tagStart])) {
			tagStart++; // purge non-stored characters
		}
		assertTrue("Misplaced javadoc end", source[tagStart++] == '*' && source[tagStart] == '/');
		assertEquals("Wrong javadoc length", tagStart, end);
	}

