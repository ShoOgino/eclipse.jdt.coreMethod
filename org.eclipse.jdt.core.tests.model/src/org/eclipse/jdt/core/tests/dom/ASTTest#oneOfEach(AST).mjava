	/**
	 * Returns a subtree of sample of AST nodes. The sample includes
	 * one of each kind, but otherwise does not make sense.
	 */
	ASTNode oneOfEach(AST target) {
		CompilationUnit cu = target.newCompilationUnit();
		
		PackageDeclaration pd = target.newPackageDeclaration();
		cu.setPackage(pd);
		
		ImportDeclaration im = target.newImportDeclaration();
		cu.imports().add(im);
		
		TypeDeclaration td = target.newTypeDeclaration();
		td.setJavadoc(target.newJavadoc());
		cu.types().add(td);
		
		FieldDeclaration fd = 
			target.newFieldDeclaration(target.newVariableDeclarationFragment());
		td.bodyDeclarations().add(fd);	
		
		Initializer in = target.newInitializer();
		td.bodyDeclarations().add(in);	
		
		MethodDeclaration md = target.newMethodDeclaration();
		md.parameters().add(target.newSingleVariableDeclaration());
		td.bodyDeclarations().add(md);
		
		SimpleName sn1 = target.newSimpleName("one");
		SimpleName sn2 =target.newSimpleName("two");
		QualifiedName qn = target.newQualifiedName(sn1, sn2);

		SimpleType st = target.newSimpleType(qn);
		PrimitiveType pt = target.newPrimitiveType(PrimitiveType.INT);
		ArrayType at = target.newArrayType(st);

		md.setReturnType(at);
		fd.setType(pt);
		
		Block b = target.newBlock();
		md.setBody(b);
		
		// all statements (in alphabetic order of statement type)
		b.statements().add(target.newAssertStatement());
		b.statements().add(target.newBlock());
		b.statements().add(target.newBreakStatement());
		b.statements().add(target.newContinueStatement());
		b.statements().add(target.newConstructorInvocation());
		b.statements().add(target.newDoStatement());
		b.statements().add(target.newEmptyStatement());
		b.statements().add(target.newExpressionStatement(target.newNullLiteral()));
		b.statements().add(target.newForStatement());
		b.statements().add(target.newIfStatement());
		b.statements().add(target.newLabeledStatement());
		b.statements().add(target.newReturnStatement());
		b.statements().add(target.newSuperConstructorInvocation());
		SwitchStatement ss = target.newSwitchStatement();
			ss.statements().add(target.newSwitchCase());
			b.statements().add(ss);
		b.statements().add(target.newSwitchStatement());
		b.statements().add(target.newSwitchCase());
		b.statements().add(target.newSynchronizedStatement());
		b.statements().add(target.newThrowStatement());
		TryStatement tr = target.newTryStatement();
			tr.catchClauses().add(target.newCatchClause());
			b.statements().add(tr);
		b.statements().add(target.newTypeDeclarationStatement(target.newTypeDeclaration()));
		b.statements().add(target.newVariableDeclarationStatement(target.newVariableDeclarationFragment()));
		b.statements().add(target.newWhileStatement());

		// all expressions (in alphabetic order of expressions type)
		MethodInvocation inv = target.newMethodInvocation();
		b.statements().add(target.newExpressionStatement(inv));
		List z = inv.arguments();
		z.add(target.newArrayAccess());
		z.add(target.newArrayCreation());
		z.add(target.newArrayInitializer());
		z.add(target.newAssignment());
		z.add(target.newBooleanLiteral(true));
		z.add(target.newCastExpression());
		z.add(target.newCharacterLiteral());
		ClassInstanceCreation cic = target.newClassInstanceCreation();
		cic.setAnonymousClassDeclaration(target.newAnonymousClassDeclaration());
		z.add(cic);
		z.add(target.newConditionalExpression());
		z.add(target.newFieldAccess());
		z.add(target.newInfixExpression());
		z.add(target.newInstanceofExpression());
		z.add(target.newMethodInvocation());
		z.add(target.newName(new String[]{"a", "b"}));
		z.add(target.newNullLiteral());
		z.add(target.newNumberLiteral("1024"));
		z.add(target.newParenthesizedExpression());
		z.add(target.newPostfixExpression());
		z.add(target.newPrefixExpression());
		z.add(target.newStringLiteral());
		z.add(target.newSuperFieldAccess());
		z.add(target.newSuperMethodInvocation());
		z.add(target.newThisExpression());
		z.add(target.newTypeLiteral());
		z.add(target.newVariableDeclarationExpression(
				target.newVariableDeclarationFragment()));
		
		return cu;
	}	

