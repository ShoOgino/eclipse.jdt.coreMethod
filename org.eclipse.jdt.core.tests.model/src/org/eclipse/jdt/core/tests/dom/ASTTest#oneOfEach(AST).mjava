	/**
	 * Returns a subtree of sample of AST nodes. The sample includes
	 * one of each kind, but otherwise does not make sense.
	 */
	ASTNode oneOfEach(AST target) {
		CompilationUnit cu = target.newCompilationUnit();
		cu.setSourceRange(0, 1000);
		PackageDeclaration pd = target.newPackageDeclaration();
		pd.setSourceRange(0, 5);
		cu.setPackage(pd);
		
		ImportDeclaration im = target.newImportDeclaration();
		im.setSourceRange(6, 5);
		cu.imports().add(im);
		
		TypeDeclaration td = target.newTypeDeclaration();
		im.setSourceRange(11, 900);
		Javadoc javadoc = target.newJavadoc();
		javadoc.setSourceRange(11, 5);
		td.setJavadoc(javadoc);
		cu.types().add(td);
		
		VariableDeclarationFragment variableDeclarationFragment = target.newVariableDeclarationFragment();
		variableDeclarationFragment.setSourceRange(16, 5);
		FieldDeclaration fd = 
			target.newFieldDeclaration(variableDeclarationFragment);
		fd.setSourceRange(16, 5);
		td.bodyDeclarations().add(fd);	
		
		Initializer in = target.newInitializer();
		in.setSourceRange(21, 5);
		td.bodyDeclarations().add(in);	
		
		MethodDeclaration md = target.newMethodDeclaration();
		md.setSourceRange(26, 800);
		SingleVariableDeclaration singleVariableDeclaration = target.newSingleVariableDeclaration();
		singleVariableDeclaration.setSourceRange(30, 5);
		md.parameters().add(singleVariableDeclaration);
		td.bodyDeclarations().add(md);
		
		SimpleName sn1 = target.newSimpleName("one");
		sn1.setSourceRange(35, 5);
		SimpleName sn2 =target.newSimpleName("two");
		sn2.setSourceRange(41, 5);
		QualifiedName qn = target.newQualifiedName(sn1, sn2);
		qn.setSourceRange(35, 11);

		SimpleType st = target.newSimpleType(qn);
		st.setSourceRange(35, 11);
		PrimitiveType pt = target.newPrimitiveType(PrimitiveType.INT);
		pt.setSourceRange(41, 5);
		ArrayType at = target.newArrayType(st);
		at.setSourceRange(41, 7);

		md.setReturnType(at);
		fd.setType(pt);
		
		Block b = target.newBlock();
		b.setSourceRange(46, 700);
		md.setBody(b);
		
		// all statements (in alphabetic order of statement type)
		AssertStatement assertStatement = target.newAssertStatement();
		assertStatement.setSourceRange(46, 5);
		b.statements().add(assertStatement);
		Block block = target.newBlock();
		block.setSourceRange(51, 5);
		b.statements().add(block);
		BreakStatement breakStatement = target.newBreakStatement();
		breakStatement.setSourceRange(55, 5);
		b.statements().add(breakStatement);
		ContinueStatement continueStatement = target.newContinueStatement();
		continueStatement.setSourceRange(61, 5);
		b.statements().add(continueStatement);
		ConstructorInvocation constructorInvocation = target.newConstructorInvocation();
		constructorInvocation.setSourceRange(65, 5);
		b.statements().add(constructorInvocation);
		DoStatement doStatement = target.newDoStatement();
		doStatement.setSourceRange(70, 5);
		b.statements().add(doStatement);
		EmptyStatement emptyStatement = target.newEmptyStatement();
		emptyStatement.setSourceRange(75, 5);
		b.statements().add(emptyStatement);
		NullLiteral nullLiteral = target.newNullLiteral();
		nullLiteral.setSourceRange(80, 5);
		ExpressionStatement expressionStatement = target.newExpressionStatement(nullLiteral);
		expressionStatement.setSourceRange(80, 5);
		b.statements().add(expressionStatement);
		ForStatement forStatement = target.newForStatement();
		forStatement.setSourceRange(86, 5);
		b.statements().add(forStatement);
		IfStatement ifStatement = target.newIfStatement();
		ifStatement.setSourceRange(90, 5);
		b.statements().add(ifStatement);
		LabeledStatement labeledStatement = target.newLabeledStatement();
		labeledStatement.setSourceRange(95, 5);
		b.statements().add(labeledStatement);
		ReturnStatement returnStatement = target.newReturnStatement();
		returnStatement.setSourceRange(100, 5);
		b.statements().add(returnStatement);
		SuperConstructorInvocation superConstructorInvocation = target.newSuperConstructorInvocation();
		superConstructorInvocation.setSourceRange(105, 5);
		b.statements().add(superConstructorInvocation);
		SwitchStatement ss = target.newSwitchStatement();
		ss.setSourceRange(110, 5);
		SwitchCase switchCase = target.newSwitchCase();
		switchCase.setSourceRange(110, 5);
		ss.statements().add(switchCase);
		b.statements().add(ss);
		SwitchStatement switchStatement = target.newSwitchStatement();
		switchStatement.setSourceRange(115, 5);
		b.statements().add(switchStatement);
		SwitchCase switchCase2 = target.newSwitchCase();
		switchCase2.setSourceRange(120, 5);
		b.statements().add(switchCase2);
		SynchronizedStatement synchronizedStatement = target.newSynchronizedStatement();
		synchronizedStatement.setSourceRange(125, 5);
		b.statements().add(synchronizedStatement);
		ThrowStatement throwStatement = target.newThrowStatement();
		throwStatement.setSourceRange(130, 5);
		b.statements().add(throwStatement);
		TryStatement tr = target.newTryStatement();
		tr.setSourceRange(135, 5);
		CatchClause catchClause = target.newCatchClause();
		catchClause.setSourceRange(135, 5);
			tr.catchClauses().add(catchClause);
			b.statements().add(tr);
		
		TypeDeclaration typeDeclaration = target.newTypeDeclaration();
		typeDeclaration.setSourceRange(140, 5);
		TypeDeclarationStatement typeDeclarationStatement = target.newTypeDeclarationStatement(typeDeclaration);
		typeDeclarationStatement.setSourceRange(140, 6);
		b.statements().add(typeDeclarationStatement);
		VariableDeclarationFragment variableDeclarationFragment2 = target.newVariableDeclarationFragment();
		variableDeclarationFragment2.setSourceRange(150, 5);
		VariableDeclarationStatement variableDeclarationStatement = target.newVariableDeclarationStatement(variableDeclarationFragment2);
		variableDeclarationStatement.setSourceRange(150, 6);
		b.statements().add(variableDeclarationStatement);
		WhileStatement whileStatement = target.newWhileStatement();
		whileStatement.setSourceRange(155, 5);
		b.statements().add(whileStatement);

		// all expressions (in alphabetic order of expressions type)
		MethodInvocation inv = target.newMethodInvocation();
		inv.setSourceRange(200, 300);
		ExpressionStatement expressionStatement2 = target.newExpressionStatement(inv);
		expressionStatement2.setSourceRange(400, 5);
		b.statements().add(expressionStatement2);
		List z = inv.arguments();
		ArrayAccess arrayAccess = target.newArrayAccess();
		arrayAccess.setSourceRange(200, 5);
		z.add(arrayAccess);
		ArrayCreation arrayCreation = target.newArrayCreation();
		arrayCreation.setSourceRange(210, 5);
		z.add(arrayCreation);
		ArrayInitializer arrayInitializer = target.newArrayInitializer();
		arrayInitializer.setSourceRange(220, 5);
		z.add(arrayInitializer);
		Assignment assignment = target.newAssignment();
		assignment.setSourceRange(230, 5);
		z.add(assignment);
		BooleanLiteral booleanLiteral = target.newBooleanLiteral(true);
		booleanLiteral.setSourceRange(240, 5);
		z.add(booleanLiteral);
		CastExpression castExpression = target.newCastExpression();
		castExpression.setSourceRange(250, 5);
		z.add(castExpression);
		CharacterLiteral characterLiteral = target.newCharacterLiteral();
		characterLiteral.setSourceRange(260, 5);
		z.add(characterLiteral);
		ClassInstanceCreation cic = target.newClassInstanceCreation();
		cic.setSourceRange(270, 9);
		AnonymousClassDeclaration anonymousClassDeclaration = target.newAnonymousClassDeclaration();
		anonymousClassDeclaration.setSourceRange(270, 5);
		cic.setAnonymousClassDeclaration(anonymousClassDeclaration);
		z.add(cic);
		ConditionalExpression conditionalExpression = target.newConditionalExpression();
		conditionalExpression.setSourceRange(280, 5);
		z.add(conditionalExpression);
		FieldAccess fieldAccess = target.newFieldAccess();
		fieldAccess.setSourceRange(290, 5);
		z.add(fieldAccess);
		InfixExpression infixExpression = target.newInfixExpression();
		infixExpression.setSourceRange(300, 5);
		z.add(infixExpression);
		InstanceofExpression instanceofExpression = target.newInstanceofExpression();
		instanceofExpression.setSourceRange(310, 5);
		z.add(instanceofExpression);
		MethodInvocation methodInvocation = target.newMethodInvocation();
		methodInvocation.setSourceRange(320, 5);
		z.add(methodInvocation);
		Name name = target.newName(new String[]{"a", "b"});
		name.setSourceRange(330, 5);
		z.add(name);
		NullLiteral nullLiteral2 = target.newNullLiteral();
		nullLiteral2.setSourceRange(336, 3);
		z.add(nullLiteral2);
		NumberLiteral numberLiteral = target.newNumberLiteral("1024");
		numberLiteral.setSourceRange(340, 5);
		z.add(numberLiteral);
		ParenthesizedExpression parenthesizedExpression = target.newParenthesizedExpression();
		parenthesizedExpression.setSourceRange(350, 5);
		z.add(parenthesizedExpression);
		PostfixExpression postfixExpression = target.newPostfixExpression();
		postfixExpression.setSourceRange(360, 5);
		z.add(postfixExpression);
		PrefixExpression prefixExpression = target.newPrefixExpression();
		prefixExpression.setSourceRange(370, 5);
		z.add(prefixExpression);
		StringLiteral stringLiteral = target.newStringLiteral();
		stringLiteral.setSourceRange(380, 5);
		z.add(stringLiteral);
		SuperFieldAccess superFieldAccess = target.newSuperFieldAccess();
		superFieldAccess.setSourceRange(390, 5);
		z.add(superFieldAccess);
		SuperMethodInvocation superMethodInvocation = target.newSuperMethodInvocation();
		superMethodInvocation.setSourceRange(400, 5);
		z.add(superMethodInvocation);
		ThisExpression thisExpression = target.newThisExpression();
		thisExpression.setSourceRange(410, 6);
		z.add(thisExpression);
		TypeLiteral typeLiteral = target.newTypeLiteral();
		typeLiteral.setSourceRange(420, 5);
		z.add(typeLiteral);
		VariableDeclarationFragment variableDeclarationFragment3 = target.newVariableDeclarationFragment();
		variableDeclarationFragment3.setSourceRange(430, 5);
		VariableDeclarationExpression variableDeclarationExpression = target.newVariableDeclarationExpression(variableDeclarationFragment3);
		variableDeclarationExpression.setSourceRange(430, 5);
		z.add(variableDeclarationExpression);

		ASTNode clone = ASTNode.copySubtree(ast, cu);
		assertTrue(cu.subtreeMatch(new CheckPositionsMatcher(), clone));
		
		return cu;
	}	

