	/*
	 * Convert Javadoc source to match Javadoc.toString().
	 * Store converted comments and their corresponding tags respectively
	 * in this.comments and this.allTags fields
	 */
	void setSourceComment(char[] source) {
		this.comments = new ArrayList();
		this.allTags = new ArrayList();
		StringBuffer buffer = null;
		int comment = 0;
		boolean end = false, lineStarted = false;
		String tag = null;
		List tags = new ArrayList();
		for (int i=0; i<source.length; i++) {
			if (comment == 0) {
				if (source[i] == '/') {
					switch (source[++i]) {
						case '/':
							comment = 1; // line comment
							buffer = new StringBuffer("//");
							i++;
							break;
						case '*':
							if (source[++i] == '*') {
								if (source[++i] == '/') { // empty block comment
									this.comments.add("/**/");
									this.allTags.add(new ArrayList());
									i++;
								} else {
									comment = 3; // javadoc
									buffer = new StringBuffer("/**");
								}
							} else {
								comment = 2; // block comment
								buffer = new StringBuffer("/*");
							}
							break;
					}
				}
			}
			switch (comment) {
				case 1: // line comment
					buffer.append(source[i]);
					if (source[i] == '\r' || source[i] == '\n') {
						if (source[i] == '\r' && source[i+1] == '\n') {
							buffer.append(source[++i]);
						}
						comment = 0;
						this.comments.add(buffer.toString());
						this.allTags.add(tags);
					}
					break;
				case 3: // javadoc comment
					if (tag != null) {
						if (source[i] >= 'a' && source[i] <= 'z') {
							tag += source[i];
						} else {
							tags.add(tag);
							tag = null;
						}
					}
					switch (source[i]) {
						case '@':
							if (!lineStarted || source[i-1] == '{') {
								tag = "";
								lineStarted = true;
							}
							break;
						case '\r':
						case '\n':
							lineStarted = false;
							break;
						case '*':
							break;
						default:
							if (!Character.isWhitespace(source[i])) {
								lineStarted = true;
							}
					}
				case 2: // block comment
					buffer.append(source[i]);
					if (end && source[i] == '/') {
						comment = 0;
						lineStarted = false;
						this.comments.add(buffer.toString());
						this.allTags.add(tags);
						tags = new ArrayList();
					}
					end = source[i] == '*';
					break;
				default:
					// do nothing
					break;
			}
		}
	}

