	public void test014() throws Exception {
		String contents = 
				"public class X<T extends Object & Comparable<? super @Marker String>> {}\n" +
				"class Y<T> {}\n" +
				"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
				"@interface Marker {}\n";

		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true/*resolve*/);
		ASTNode node = buildAST(contents, this.workingCopy);
		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
		CompilationUnit compilationUnit = (CompilationUnit) node;
		assertProblemsSize(compilationUnit, 0);
		List types = compilationUnit.types();
		assertEquals("Incorrect no of types", 3, types.size());
		TypeDeclaration typeDecl = (TypeDeclaration) types.get(0);
		List typeParams = typeDecl.typeParameters();

		TypeParameter typeParam = (TypeParameter) typeParams.get(0);
		List bounds = typeParam.typeBounds();
		assertEquals("Incorrect no of type bounds", 2, bounds.size());
		ParameterizedType type = (ParameterizedType) bounds.get(1);
		typeParams = type.typeArguments();
		assertEquals("Incorrect type params", 1, typeParams.size());
		WildcardType wildcard = (WildcardType)typeParams.get(0);
		Type bound = wildcard.getBound();
		assertNotNull("Bound should not be null", bound);
		verifyAnnotationOnType(bound, new String[]{"@Marker()"});
	}

