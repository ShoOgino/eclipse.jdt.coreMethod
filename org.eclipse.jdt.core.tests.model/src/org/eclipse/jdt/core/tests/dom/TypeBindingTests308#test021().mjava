	public void test021() throws Exception {
		String contents = 
				"import java.io.Serializable;\n" +
				"import java.util.List;\n" +
				"public class X<T extends Comparable<T> & Serializable> {\n" +
				"	void foo(List<? extends @Marker @Marker2 Comparable<T>> p) {} \n" +
				"}\n" +
				"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
				"@interface Marker {}\n" +
				"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
				"@interface Marker2 {}\n";

		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true);
		ASTNode node = buildAST(contents, this.workingCopy);
		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
		CompilationUnit compilationUnit = (CompilationUnit) node;
		assertProblemsSize(compilationUnit, 0);
		List types = compilationUnit.types();
		assertEquals("Incorrect no of types", 3, types.size());
		TypeDeclaration typeDecl = (TypeDeclaration) types.get(0);
		MethodDeclaration method = typeDecl.getMethods()[0];
		SingleVariableDeclaration param = (SingleVariableDeclaration) method.parameters().get(0);
		Type type = param.getType();
		assertEquals("Should be a parameterized type", ASTNode.PARAMETERIZED_TYPE, type.getNodeType());
		List typeArgs = ((ParameterizedType) type).typeArguments();
		assertEquals("Incorrect type args", 1, typeArgs.size());
		WildcardType wildcard = (WildcardType) typeArgs.get(0);
		ParameterizedType bound = (ParameterizedType) wildcard.getBound();
		verifyAnnotationOnType(bound, new String[]{"@Marker()", "@Marker2()"});
	}

