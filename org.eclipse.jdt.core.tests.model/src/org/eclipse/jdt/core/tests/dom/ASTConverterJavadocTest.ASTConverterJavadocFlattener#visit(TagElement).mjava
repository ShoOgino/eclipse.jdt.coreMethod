		/*
		 * @see ASTVisitor#visit(TagElement)
		 * @since 3.0
		 */
		public boolean visit(TagElement node) {
			Javadoc javadoc = null;
			int start = 0;
			if (node.isNested()) {
				// nested tags are always enclosed in braces
				this.buffer.append("{");//$NON-NLS-1$
				javadoc = (Javadoc) node.getParent().getParent();
				start++;
			} else {
				javadoc = (Javadoc) node.getParent();
			}
			start += node.getStartPosition()-javadoc.getStartPosition();
			if (node.getTagName() != null) {
				this.buffer.append(node.getTagName());
				start += node.getTagName().length();
			}
			for (Iterator it = node.fragments().iterator(); it.hasNext(); ) {
				ASTNode e = (ASTNode) it.next();
				try {
					this.buffer.append(this.comment.substring(start, e.getStartPosition()-javadoc.getStartPosition()));
					start = e.getStartPosition()-javadoc.getStartPosition();
				} catch (IndexOutOfBoundsException ex) {
					// do nothing
				}
				start += e.getLength();
				e.accept(this);
			}
			if (node.isNested()) {
				this.buffer.append("}");//$NON-NLS-1$
			}
			return false;
		}

