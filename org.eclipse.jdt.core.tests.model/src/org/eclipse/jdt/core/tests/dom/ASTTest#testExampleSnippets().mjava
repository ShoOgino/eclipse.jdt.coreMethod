	/**
	 * Snippets that show how to...
	 */
	public void testExampleSnippets() {
		{
			AST ast = new AST();
			CompilationUnit cu = ast.newCompilationUnit();

			// package com.example;
			PackageDeclaration pd = ast.newPackageDeclaration();
			pd.setName(ast.newName(new String[]{"com", "example"}));
			cu.setPackage(pd);
			assertTrue(pd.getRoot() == cu);

			// import java.io;*;
			ImportDeclaration im1 = ast.newImportDeclaration();
			im1.setName(ast.newName(new String[]{"java", "io"}));
			im1.setOnDemand(true);
			cu.imports().add(im1);
			assertTrue(im1.getRoot() == cu);
			
			// import java.util.List;
			ImportDeclaration im2 = ast.newImportDeclaration();
			im2.setName(ast.newName(new String[]{"java", "util", "List"}));
			im2.setOnDemand(false);
			cu.imports().add(im2);
			assertTrue(im2.getRoot() == cu);
			
			// public class MyClass {}
			TypeDeclaration td = ast.newTypeDeclaration();
			td.setModifiers(Modifier.PUBLIC);
			td.setInterface(false); 
			td.setName(ast.newSimpleName("MyClass"));
			cu.types().add(td);
			assertTrue(td.getRoot() == cu);
			
			// private static boolean DEBUG = true;
			VariableDeclarationFragment f1 = ast.newVariableDeclarationFragment();
			f1.setName(ast.newSimpleName("DEBUG"));
			f1.setInitializer(ast.newBooleanLiteral(true));
			FieldDeclaration fd = ast.newFieldDeclaration(f1);
			fd.setType(ast.newPrimitiveType(PrimitiveType.BOOLEAN));
			fd.setModifiers(Modifier.PRIVATE | Modifier.STATIC);
			td.bodyDeclarations().add(fd);
			assertTrue(fd.getRoot() == cu);
			
			// public static void main();
			MethodDeclaration md = ast.newMethodDeclaration();
			md.setModifiers(Modifier.PUBLIC | Modifier.STATIC);
			md.setConstructor(false);
			md.setName(ast.newSimpleName("main"));
			md.setReturnType(ast.newPrimitiveType(PrimitiveType.VOID));
			td.bodyDeclarations().add(md);
			assertTrue(md.getRoot() == cu);
			
			// String[] args
			SingleVariableDeclaration a1 = ast.newSingleVariableDeclaration();
			a1.setType(ast.newArrayType(
				ast.newSimpleType(ast.newSimpleName("String"))));
			a1.setName(ast.newSimpleName("args"));
			md.parameters().add(a1);
			assertTrue(a1.getRoot() == cu);
			
			// {}
			Block b = ast.newBlock();
			md.setBody(b);
			assertTrue(b.getRoot() == cu);

			// System.out.println("hello world");		
			MethodInvocation e = ast.newMethodInvocation();
			e.setExpression(ast.newName(new String[] {"System", "out"}));
			e.setName(ast.newSimpleName("println"));
			StringLiteral h = ast.newStringLiteral();
			h.setLiteralValue("hello world");
			e.arguments().add(h);
			
			b.statements().add(ast.newExpressionStatement(e));
			assertTrue(e.getRoot() == cu);
			assertTrue(h.getRoot() == cu);
			
			// new String[len]
			ArrayCreation ac1 = ast.newArrayCreation();
			ac1.setType(
				ast.newArrayType(
					ast.newSimpleType(ast.newSimpleName("String"))));
			ac1.dimensions().add(ast.newSimpleName("len"));
			b.statements().add(ast.newExpressionStatement(ac1));
			assertTrue(ac1.getRoot() == cu);

			// new double[7][24][]
			ArrayCreation ac2 = ast.newArrayCreation();
			ac2.setType(
				ast.newArrayType(
					ast.newPrimitiveType(PrimitiveType.DOUBLE), 3));
			ac2.dimensions().add(ast.newNumberLiteral("7"));
			ac2.dimensions().add(ast.newNumberLiteral("24"));
			b.statements().add(ast.newExpressionStatement(ac2));
			assertTrue(ac2.getRoot() == cu);

			// new int[] {1, 2}
			ArrayCreation ac3 = ast.newArrayCreation();
			ac3.setType(
				ast.newArrayType(
					ast.newPrimitiveType(PrimitiveType.INT)));
			ArrayInitializer ai = ast.newArrayInitializer();
			ac3.setInitializer(ai);
			ai.expressions().add(ast.newNumberLiteral("1"));
			ai.expressions().add(ast.newNumberLiteral("2"));
			b.statements().add(ast.newExpressionStatement(ac3));
			assertTrue(ac3.getRoot() == cu);
			assertTrue(ai.getRoot() == cu);
			
			// new String(10)
			ClassInstanceCreation cr1 = ast.newClassInstanceCreation();
			cr1.setName(ast.newSimpleName("String"));
			cr1.arguments().add(ast.newNumberLiteral("10"));		
			b.statements().add(ast.newExpressionStatement(cr1));
			assertTrue(cr1.getRoot() == cu);

			// new Listener() {public void handleEvent() {} }
			ClassInstanceCreation cr2 = ast.newClassInstanceCreation();
			AnonymousClassDeclaration ad1 = ast.newAnonymousClassDeclaration();
			cr2.setAnonymousClassDeclaration(ad1);
			cr2.setName(ast.newSimpleName("Listener"));
			MethodDeclaration md0 = ast.newMethodDeclaration();
			md0.setModifiers(Modifier.PUBLIC);
			md0.setName(ast.newSimpleName("handleEvent"));
			md0.setBody(ast.newBlock());
			ad1.bodyDeclarations().add(md0);
			b.statements().add(ast.newExpressionStatement(cr2));
			assertTrue(cr2.getRoot() == cu);
			assertTrue(md0.getRoot() == cu);
			assertTrue(ad1.getRoot() == cu);

		}
	}

