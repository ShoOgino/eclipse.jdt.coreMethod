	/*
	 * Test the creation of 3 batches of ASTs with resolving.
	 */
	public void test004() throws CoreException {
		ICompilationUnit[][] workingCopyBatches = new ICompilationUnit[3][];
		try {
			MarkerInfo[] firstMarkerInfos = createMarkerInfos(new String[] {
				"/P/p1/X.java",
				"package p1;\n" +
				"/*start*/public class X extends Y {\n" +
				"}/*end*/",
				"/P/p1/Y.java",
				"package p1;\n" +
				"public class Y {\n" +
				"}",
			});
			workingCopyBatches[0] = createWorkingCopies(firstMarkerInfos);
			workingCopyBatches[1] = createWorkingCopies(new String[] {});
			MarkerInfo[] lastMarkerInfos = createMarkerInfos(new String[] {
				"/P/p1/Z.java",
				"package p1;\n" +
				"public class Z {\n" +
				"  Object foo() {\n" +
				"    return new /*start*/X/*end*/();\n" +
				"  }\n" +
				"}",
			});
			workingCopyBatches[2] = createWorkingCopies(lastMarkerInfos);
			
			TestASTRequestor requestor = new TestASTRequestor(workingCopyBatches);
			resolveASTs(requestor);
			assertASTNodesEqual(
				"package p1;\n" + 
				"public class X extends Y {\n" + 
				"}\n" + 
				"\n" + 
				"package p1;\n" + 
				"public class Y {\n" + 
				"}\n" + 
				"\n" + 
				"package p1;\n" + 
				"public class Z {\n" + 
				"  Object foo(){\n" + 
				"    return new X();\n" + 
				"  }\n" + 
				"}\n" + 
				"\n",
				requestor.asts
			);
			
			// compare the bindings coming from the first AST and the last AST
			TypeDeclaration typeX = (TypeDeclaration) findNode((CompilationUnit) requestor.asts.get(0), firstMarkerInfos[0]);
			Type newX = (Type) findNode((CompilationUnit) requestor.asts.get(2), lastMarkerInfos[0]);
			IBinding typeXBinding = typeX.resolveBinding();
			IBinding newXBinding = newX.resolveBinding();
			assertTrue("Declaration of X and new X() should have the same binding", typeXBinding == newXBinding);
		} finally {
			discardWorkingCopies(workingCopyBatches);
		}
	}

