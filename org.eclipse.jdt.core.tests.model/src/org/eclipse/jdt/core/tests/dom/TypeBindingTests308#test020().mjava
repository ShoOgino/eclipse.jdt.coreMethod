	public void test020() throws Exception {
		String contents =
				"public class X  {\n" +
				"    public static void main(String [] args) {\n" +
				"        Map.Entry<String, String> [] e = (Map.@Marker Entry<String, String> []) null;\n" +
				"    }\n" +
				"}\n" +
				"class Map<K, V> {\n" +
				"	interface Entry<K, V> {}\n" +
				"}\n" +
				"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
				"@interface Marker {}\n";

		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true);
		ASTNode node = buildAST(contents, this.workingCopy);
		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
		CompilationUnit compilationUnit = (CompilationUnit) node;
		assertProblemsSize(compilationUnit, 0);
		List types = compilationUnit.types();
		assertEquals("Incorrect no of types", 3, types.size());
		TypeDeclaration typeDecl = (TypeDeclaration) types.get(0);
		MethodDeclaration method = typeDecl.getMethods()[0];
		List statements = method.getBody().statements();
		assertEquals("Incorrect no of statements", 1, statements.size());
		VariableDeclarationStatement statement = (VariableDeclarationStatement) statements.get(0);
		VariableDeclarationFragment fragment = (VariableDeclarationFragment) statement.fragments().get(0);
		CastExpression castExp = (CastExpression) fragment.getInitializer();
		ArrayType arrayType = (ArrayType) castExp.getType();
		verifyAnnotationOnType(arrayType, new String[]{});
		ParameterizedType type = (ParameterizedType) arrayType.getElementType();
		verifyAnnotationOnType(type.getType(), new String[]{"@Marker()"});
	}

