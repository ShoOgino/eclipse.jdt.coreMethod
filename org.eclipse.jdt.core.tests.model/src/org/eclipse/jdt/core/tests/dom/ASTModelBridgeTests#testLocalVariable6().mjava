	/*
	 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=48420
	 */
	public void testLocalVariable6() throws JavaModelException {
		ASTNode node = buildAST(
			"public class X {\n" +
			"	{\n" +
			"		int local;\n" +
			"	}\n" +
			"	public void foo() {\n" +
			"		int i = 0;\n" +
			"	}\n" +
			"	public static void foo(final int n) {\n" +
			"		int i;\n" +
			"	}\n" +
			"	public X(final int j) {\n" +
			"		int i;\n" +
			"	}\n" +
			"}"
		);
		node.accept(new ASTVisitor() {
			public boolean visit(VariableDeclarationFragment fragment) {
				final IVariableBinding binding = fragment.resolveBinding();
				final IJavaElement javaElement = binding.getJavaElement();
				assertNotNull("No java element", javaElement);
				final int type = javaElement.getElementType();
				assertEquals("Wrong type", IJavaElement.LOCAL_VARIABLE, type);
				ILocalVariable variable = (ILocalVariable) javaElement;
				final ITypeRoot typeRoot = variable.getTypeRoot();
				assertNotNull("Not type root", typeRoot);
				assertTrue("Invalid", typeRoot.exists());
				assertNotNull("No declaring element", variable.getDeclaringMember());
				int flags = variable.getFlags();
				assertFalse("wrong modifier for " + variable.getElementName(), Flags.isFinal(flags));
				assertFalse("wrong value for isParameter" + variable.getElementName(), variable.isParameter());
				return true;
			}
			public boolean visit(SingleVariableDeclaration variableDeclaration) {
				final IVariableBinding binding = variableDeclaration.resolveBinding();
				final IJavaElement javaElement = binding.getJavaElement();
				assertNotNull("No java element", javaElement);
				final int type = javaElement.getElementType();
				assertEquals("Wrong type", IJavaElement.LOCAL_VARIABLE, type);
				ILocalVariable variable = (ILocalVariable) javaElement;
				final ITypeRoot typeRoot = variable.getTypeRoot();
				assertNotNull("Not type root", typeRoot);
				assertTrue("Invalid", typeRoot.exists());
				assertNotNull("No declaring element", variable.getDeclaringMember());
				int flags = variable.getFlags();
				assertTrue("wrong modifier for " + variable.getElementName(), Flags.isFinal(flags));
				assertTrue("wrong value for isParameter" + variable.getElementName(), variable.isParameter());
				return true;
			}
		});
	}

