	public void testStructuralProperties() {
		final ASTNode root = SampleASTs.oneOfEach(ast);
		
		final Set simpleProperties = new HashSet(400);
		final Set childProperties = new HashSet(400);
		final Set childListProperties = new HashSet(400);
		final Set visitedProperties = new HashSet(400);
		final Set nodeClasses = new HashSet(100);
		
		ASTVisitor v = new ASTVisitor(true) {
			public void postVisit(ASTNode node) {
				StructuralPropertyDescriptor me = node.getLocationInParent();
				if (me != null) {
					visitedProperties.add(me);
				}
				visitedProperties.add(me);
				nodeClasses.add(node.getClass());
				List ps = node.structuralPropertiesForType();
				for (Iterator it = ps.iterator(); it.hasNext(); ) {
					StructuralPropertyDescriptor p = (StructuralPropertyDescriptor) it.next();
					Object o = node.getStructuralProperty(p);
					if (p.isSimpleProperty()) {
						simpleProperties.add(p);
						// slam simple properties
						node.setStructuralProperty(p, o);
					} else if (p.isChildProperty()) {
						childProperties.add(p);
						// replace child with a copy
						ASTNode copy = ASTNode.copySubtree(ast, (ASTNode) o);
						node.setStructuralProperty(p, copy);
					} else if (p.isChildListProperty()) {
						childListProperties.add(p);
						// replace child list with copies
						List list = (List) o;
						List copy = ASTNode.copySubtrees(ast, list);
						list.clear();
						list.addAll(copy);
					}
				}
			}
		};
		root.accept(v);
		System.out.println("Total visited node classes: " + nodeClasses.size());
		System.out.println("Total visited properties: " + visitedProperties.size());
		System.out.println("Total properties hit: "
				+ simpleProperties.size() + " simple, "
				+ childProperties.size() + " child, "
				+ childListProperties.size() + " child list");
		
		// visit should rebuild tree
		ASTNode newRoot = SampleASTs.oneOfEach(ast);
		assertTrue(root.subtreeMatch(new ASTMatcher(), newRoot));
	}

