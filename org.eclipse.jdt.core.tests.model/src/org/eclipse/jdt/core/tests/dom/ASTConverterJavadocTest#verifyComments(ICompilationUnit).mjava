	/*
	 * Verify the comments of a compilation unit.
	 */
	protected void verifyComments(ICompilationUnit unit) throws JavaModelException {
		// Get test file
		this.sourceUnit = unit;
		this.prefix = unit.getElementName()+": ";

		// Create DOM AST nodes hierarchy
		String sourceStr = this.sourceUnit.getSource();
		IJavaProject project = this.sourceUnit.getJavaProject();
		Map originalOptions = project.getOptions(true);
		List unitComments = null;
		try {
			project.setOption(JavaCore.COMPILER_PB_INVALID_JAVADOC, this.compilerOption);
			project.setOption(JavaCore.COMPILER_PB_MISSING_JAVADOC_TAGS, this.compilerOption);
			project.setOption(JavaCore.COMPILER_PB_MISSING_JAVADOC_COMMENTS, this.compilerOption);
			project.setOption(JavaCore.COMPILER_PB_METHOD_WITH_CONSTRUCTOR_NAME, JavaCore.IGNORE);
			CompilationUnit compilUnit = (CompilationUnit) runConversion(this.sourceUnit, this.resolveBinding); // resolve bindings
			if (this.compilerOption.equals(JavaCore.ERROR)) {
				assumeEquals(this.prefix+"Unexpected problems", 0, compilUnit.getProblems().length); //$NON-NLS-1$
			} else if (this.compilerOption.equals(JavaCore.WARNING)) {
				IProblem[] problemsList = compilUnit.getProblems();
				int length = problemsList.length;
				if (length > 0) {
					problems.append("  - "+this.prefix+length+" problems:"); //$NON-NLS-1$
					for (int i = 0; i < problemsList.length; i++) {
						problems.append("	+ "+problemsList[i]);
					}
				}
			}
			unitComments = compilUnit.getCommentList();
		} finally {
			project.setOptions(originalOptions);
		}
		assumeNotNull(this.prefix+"Unexpected problems", unitComments);
		
		// Verify source regardings converted comments
		char[] source = sourceStr.toCharArray();
		verifyComments(sourceStr, source, unitComments);
	}

