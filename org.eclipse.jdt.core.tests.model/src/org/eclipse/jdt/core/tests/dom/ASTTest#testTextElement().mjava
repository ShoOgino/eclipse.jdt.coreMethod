	public void testTextElement() {
		long previousCount = this.ast.modificationCount();
		final TextElement x = this.ast.newTextElement();
		assertTrue(this.ast.modificationCount() > previousCount);
		previousCount = this.ast.modificationCount();
		assertTrue(x.getAST() == this.ast);
		assertTrue(x.getParent() == null);
		assertTrue(x.getNodeType() == ASTNode.TEXT_ELEMENT);
		assertTrue(x.getText().length() == 0);
		assertTrue(x.structuralPropertiesForType() ==
			TextElement.propertyDescriptors(this.ast.apiLevel()));
		// make sure that reading did not change modification count
		assertTrue(this.ast.modificationCount() == previousCount);

		// text property
		previousCount = this.ast.modificationCount();
		String s1 = new String("hello");
		x.setText(s1);
		assertTrue(this.ast.modificationCount() > previousCount);
		assertTrue(x.getText() == s1);
		previousCount = this.ast.modificationCount();
		String s2 = new String("");
		x.setText(s2);
		assertTrue(x.getText() == s2);
		assertTrue(this.ast.modificationCount() > previousCount);
		// check that property cannot be set to null
		previousCount = this.ast.modificationCount();
		try {
			x.setText(null);
			assertTrue(false);
		} catch (RuntimeException e) {
			// pass
		}
		assertTrue(this.ast.modificationCount() == previousCount);
		// check that property cannot include */
		previousCount = this.ast.modificationCount();
		try {
			x.setText("this would be the */ end of it");  //$NON-NLS-1$
			assertTrue(false);
		} catch (RuntimeException e) {
			// pass
		}
		assertTrue(this.ast.modificationCount() == previousCount);
	}

