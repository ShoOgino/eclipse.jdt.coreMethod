	public void testMemberType() throws CoreException, IOException {
		String jarName = "TypeBindingTests308.jar";
		String srcName = "TypeBindingTests308_src.zip";
		final IJavaProject javaProject = getJavaProject("Converter18");
		try {
			String[] pathAndContents = new String[] {
				"Outer.java",
				"public class Outer  {\n" +
				"	class Inner {\n" +
				"	}\n" +
				"}\n"
			};
			
			HashMap libraryOptions = new HashMap(javaProject.getOptions(true));
			libraryOptions.put(CompilerOptions.OPTION_Store_Annotations, CompilerOptions.ENABLED);
			addLibrary(javaProject, jarName, srcName, pathAndContents, JavaCore.VERSION_1_8, libraryOptions);
			
			String contents = 
					"public class X {\n" +
					"    void foo(@T Outer o) {\n" +
					"    }\n" +
					"}\n" +
					"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
					"@interface T {\n" +
					"}\n";
					
			
			this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true);
			ASTNode node = buildAST(contents, this.workingCopy);
			assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
			CompilationUnit compilationUnit = (CompilationUnit) node;
			assertProblemsSize(compilationUnit, 0);
			List types = compilationUnit.types();
			assertEquals("Incorrect no of types", 2, types.size());
			TypeDeclaration typeDecl = (TypeDeclaration) types.get(0);
			
			MethodDeclaration[] methods = typeDecl.getMethods();
			assertEquals("Incorrect no of methods", 1, methods.length);
			MethodDeclaration method = methods[0];
			List parameters = method.parameters();
			SingleVariableDeclaration parameter = (SingleVariableDeclaration) parameters.get(0);
			ITypeBinding binding = parameter.resolveBinding().getType();
			assertEquals("@T Outer", binding.toString());
			ITypeBinding [] memberTypes = binding.getDeclaredTypes();
			assertEquals("Incorrect no of types", 1, memberTypes.length);
			assertEquals("Incorrect no of types", "@T Outer.Inner", memberTypes[0].toString());
			assertEquals("Incorrect no of types", "@T Outer", memberTypes[0].getEnclosingType().toString());
		} finally {
			removeLibrary(javaProject, jarName, srcName);
		}
	}

