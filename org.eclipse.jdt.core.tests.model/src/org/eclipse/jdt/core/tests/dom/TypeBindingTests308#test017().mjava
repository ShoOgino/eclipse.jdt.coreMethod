	public void test017() throws Exception {
		String contents = 
				"public class X<P, C> {\n" +
				"  public X() {\n" +
				"    if (!(this instanceof @Marker X)) {}\n" +
				"  }\n" +
				"}\n" +
				"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
				"@interface Marker {}\n";

		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true);
		ASTNode node = buildAST(contents, this.workingCopy);
		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
		CompilationUnit compilationUnit = (CompilationUnit) node;
		assertProblemsSize(compilationUnit, 0);
		List types = compilationUnit.types();
		assertEquals("Incorrect no of types", 2, types.size());
		TypeDeclaration typeDecl = (TypeDeclaration) types.get(0);
		MethodDeclaration method = typeDecl.getMethods()[0];
		IfStatement ifStmt = (IfStatement) method.getBody().statements().get(0);
		PrefixExpression prefix = (PrefixExpression ) ifStmt.getExpression();
		ParenthesizedExpression operand = (ParenthesizedExpression) prefix.getOperand();
		InstanceofExpression expression = (InstanceofExpression) operand.getExpression();
		verifyAnnotationOnType(expression.getRightOperand(), new String[]{"@Marker()"});
	}

