	/*
	 * Verify positions of fragments in source
	 */
	private void verifyPositions(TagElement tagElement, char[] source) {
		String text = null;
		// Verify tag name
		String tagName = tagElement.getTagName();
		int tagStart = tagElement.getStartPosition();
		if (tagElement.isNested()) {
			assertEquals("Wrong start position for "+tagElement, '{', source[tagStart++]);
		}
		if (tagName != null) {
			text= new String(source, tagStart, tagName.length());
			assertEquals("Misplaced tag name at "+tagStart, tagName, text);
			tagStart += tagName.length();
		}
		// Verify each fragment
		ASTNode previousFragment = null;
		Iterator elements = tagElement.fragments().listIterator();
		while (elements.hasNext()) {
			ASTNode fragment = (ASTNode) elements.next();
			if (fragment.getNodeType() == ASTNode.TEXT_ELEMENT) {
				if (previousFragment != null && previousFragment.getNodeType() == ASTNode.TEXT_ELEMENT) {
					assertTrue("Wrong length for text element "+previousFragment, source[tagStart] == '\r' || source[tagStart] == '\n');
					while (source[tagStart] == '*' || Character.isWhitespace(source[tagStart])) {
						tagStart++; // purge non-stored characters
					}
				}
				text = new String(source, tagStart, fragment.getLength());
				assertEquals("Misplaced or wrong text element at "+tagStart, text, ((TextElement) fragment).getText());
			} else {
				while (source[tagStart] == '*' || Character.isWhitespace(source[tagStart])) {
					tagStart++; // purge non-stored characters
				}
				if (fragment.getNodeType() == ASTNode.SIMPLE_NAME || fragment.getNodeType() == ASTNode.QUALIFIED_NAME) {
					verifyNamePositions(tagStart, (Name) fragment, source);
				} else if (fragment.getNodeType() == ASTNode.TAG_ELEMENT) {
					TagElement inlineTag = (TagElement) fragment;
					assertEquals("Tag element has wrong start position", tagStart, inlineTag.getStartPosition());
					verifyPositions(inlineTag, source);
				} else if (fragment.getNodeType() == ASTNode.MEMBER_REF) {
					MemberRef memberRef = (MemberRef) fragment;
					// Store start position
					int start = tagStart;
					// Verify qualifier position
					Name qualifier = memberRef.getQualifier();
					if (qualifier != null) {
						text = new String(source, start, qualifier.getLength());
						assertEquals("Misplaced or wrong member ref qualifier at "+start, text, qualifier.toString());
						verifyNamePositions(start, qualifier, source);
						start += qualifier.getLength();
						while (source[start] == '*' || Character.isWhitespace(source[start])) {
							start++; // purge non-stored characters
						}
					}
					// Verify member separator position
					assertEquals("Misplace # separator for member ref"+memberRef, '#', source[start]);
					start++;
					while (source[start] == '*' || Character.isWhitespace(source[start])) {
						start++; // purge non-stored characters
					}
					// Verify member name position
					Name name = memberRef.getName();
					text = new String(source, start, name.getLength());
					assertEquals("Misplaced or wrong member ref name at "+start, text, name.toString());
					verifyNamePositions(start, name, source);
				} else if (fragment.getNodeType() == ASTNode.METHOD_REF) {
					MethodRef methodRef = (MethodRef) fragment;
					// Store start position
					int start = tagStart;
					// Verify qualifier position
					Name qualifier = methodRef.getQualifier();
					if (qualifier != null) {
						text = new String(source, start, qualifier.getLength());
						assertEquals("Misplaced or wrong member ref qualifier at "+start, text, qualifier.toString());
						verifyNamePositions(start, qualifier, source);
						start += qualifier.getLength();
						while (source[start] == '*' || Character.isWhitespace(source[start])) {
							start++; // purge non-stored characters
						}
					}
					// Verify member separator position
					assertEquals("Misplace # separator for member ref"+methodRef, '#', source[start]);
					start++;
					while (source[start] == '*' || Character.isWhitespace(source[start])) {
						start++; // purge non-stored characters
					}
					// Verify member name position
					Name name = methodRef.getName();
					text = new String(source, start, name.getLength());
					assertEquals("Misplaced or wrong member ref name at "+start, text, name.toString());
					verifyNamePositions(start, name, source);
					start += name.getLength();
					while (source[start] == '(' || source[start] == '*' || Character.isWhitespace(source[start])) {
						start++; // purge non-stored characters
					}
					// Verify parameters
					Iterator parameters = methodRef.parameters().listIterator();
					while (parameters.hasNext()) {
						MethodRefParameter param = (MethodRefParameter) parameters.next();
						// Verify parameter type positions
						Type type = param.getType();
						text = new String(source, start, type.getLength());
						assertEquals("Misplaced or wrong method ref parameter type at "+start, text, type.toString());
						if (type.isSimpleType()) {
							verifyNamePositions(start, ((SimpleType)type).getName(), source);
						}
						start += type.getLength();
						while (Character.isWhitespace(source[start])) {
							 start++; // purge non-stored characters
						}
						// Verify parameter name positions
						name = param.getName();
						if (name != null) {
							text = new String(source, start, name.getLength());
							assertEquals("Misplaced or wrong method ref parameter name at "+start, text, name.toString());
							start += name.getLength();
						}
						while (source[start] == ',' || source[start] == ')' || source[start] == '*' || Character.isWhitespace(source[start])) {
							char ch = source[start++];
							 if (ch == ',' || ch == ')') {
							 	break;
							 }
						}
					}
				}
			}
			tagStart += fragment.getLength();
//			if (source[tagStart] == '\r' || source[tagStart] == '\n') {
//				while (source[tagStart] == '*' || Character.isWhitespace(source[tagStart])) {
//					tagStart++; // purge non-stored characters
//				}
//			}
			previousFragment = fragment;
		}
		if (tagElement.isNested()) {
			assertEquals("Wrong end character for "+tagElement, '}', source[tagStart++]);
		}
	}

