	/*
	 * Ensures that a method with different paramter types is not a subsignature of its super method.
	 * (regression test for bug 111093 More problems with IMethodBinding#isSubsignature(..))
	 */
	public void test041() throws JavaModelException {
		IMethodBinding[] bindings = createMethodBindings(
			new String[] {
				"/P/p1/A.java",
				"package p1;\n" +
				"public class A<S> {\n" + 
				"  public <X, Y> void tp1_foo2(S s, X x, Y y) {\n" + 
				"  }\n" + 
				"}\n" +
				"class B extends A<String> {\n" + 
				"  @Override\n" + 
				"  public void tp1_foo2(String s, Object x, Object y) {\n" + 
				"  }\n" + 
				"}",
			},
			new String[] {
				"Lp1/A;.tp1_foo2<X:Ljava/lang/Object;Y:Ljava/lang/Object;>(TS;TX;TY;)V",
				"Lp1/A~B;.tp1_foo2(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V"
			});	
		assertTrue("B#tp1_foo2() should be a subsignature of A#tp1_foo2()", bindings[1].isSubsignature(bindings[0]));
	}

