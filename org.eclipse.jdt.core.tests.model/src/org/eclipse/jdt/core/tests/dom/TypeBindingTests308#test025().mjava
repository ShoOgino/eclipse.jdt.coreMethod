	public void test025() throws Exception {
		String contents = 
				"interface I {}\n" +
				"interface J {}\n" +
				"interface K extends @Marker I, @Marker2 J {}\n" +
				"interface L {}\n" +
				"public class X implements @Marker2 K, @Marker L {\n" +
				"}\n" +
				"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
				"@interface Marker {}\n" +
				"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
				"@interface Marker2 {}\n";

		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true);
		ASTNode node = buildAST(contents, this.workingCopy);
		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
		CompilationUnit compilationUnit = (CompilationUnit) node;
		assertProblemsSize(compilationUnit, 0);
		List types = compilationUnit.types();
		assertEquals("Incorrect no of types", 7, types.size());
		TypeDeclaration typeDecl = (TypeDeclaration) types.get(2);
		List interfaces = typeDecl.superInterfaceTypes();
		assertEquals("Incorrect no of super interfaces", 2, interfaces.size());
		verifyAnnotationOnType((Type) interfaces.get(0), new String[]{"@Marker()"});
		verifyAnnotationOnType((Type) interfaces.get(1), new String[]{"@Marker2()"});
		
		typeDecl = (TypeDeclaration) types.get(4);
		interfaces = typeDecl.superInterfaceTypes();
		assertEquals("Incorrect no of super interfaces", 2, interfaces.size());
		verifyAnnotationOnType((Type) interfaces.get(0), new String[]{"@Marker2()"});
		verifyAnnotationOnType((Type) interfaces.get(1), new String[]{"@Marker()"});
	}

