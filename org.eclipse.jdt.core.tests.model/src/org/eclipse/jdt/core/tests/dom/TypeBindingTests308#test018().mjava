	public void test018() throws Exception {
		String contents =
				"interface I {\n" +
				"    void foo(Y<String>.Z z, int x);\n" +
				"}\n" +
				"public class X  {\n" +
				"    public static void main(String [] args) {\n" +
				"        I i = Y<String>.@Marker Z::foo;\n" +
				"        i.foo(new Y<String>().new Z(), 10); \n" +
				"    }\n" +
				"}\n" +
				"class Y<T> {\n" +
				"    class Z {\n" +
				"        void foo(int x) {\n" +
				"        }\n" +
				"    }\n" +
				"}\n" +
				"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
				"@interface Marker {}\n";

		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true);
		ASTNode node = buildAST(contents, this.workingCopy);
		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
		CompilationUnit compilationUnit = (CompilationUnit) node;
		assertProblemsSize(compilationUnit, 0);
		List types = compilationUnit.types();
		assertEquals("Incorrect no of types", 4, types.size());
		TypeDeclaration typeDecl = (TypeDeclaration) types.get(1);
		MethodDeclaration method = typeDecl.getMethods()[0];
		VariableDeclarationStatement statement = (VariableDeclarationStatement) method.getBody().statements().get(0);
		VariableDeclarationFragment fragment = (VariableDeclarationFragment) statement.fragments().get(0);
		TypeMethodReference initializer = (TypeMethodReference) fragment.getInitializer();
		Type type = initializer.getType();
		assertTrue(type.isQualifiedType());
		QualifiedType qualifiedType = (QualifiedType) type;
		checkSourceRange(qualifiedType.getName(), "Z", contents);
		verifyAnnotationOnType(type, new String[]{"@Marker()"});
		assertEquals("Should be a qualified type", ASTNode.QUALIFIED_TYPE, type.getNodeType());
		verifyAnnotationOnType(((QualifiedType) type).getQualifier() , new String[]{});
	}

