	public void test009() throws Exception {
		String contents = 
				"interface I {\n" +
				"    Object copy(int [] ia);\n" +
				"}\n" +
				"public class X  {\n" +
				"    public static void main(String [] args) {\n" +
				"        I i = @Marker int @Marker2 []::clone;\n" +
				"    }\n" +
				"}\n" +
				"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
				"@interface Marker {}\n" +
				"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
				"@interface Marker2 {}\n";

		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true/*resolve*/);
		ASTNode node = buildAST(contents, this.workingCopy);
		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
		CompilationUnit compilationUnit = (CompilationUnit) node;
		assertProblemsSize(compilationUnit, 0);
		List types = compilationUnit.types();
		assertEquals("Incorrect no of types", 4, types.size());
		TypeDeclaration typeDecl = (TypeDeclaration) types.get(1);
		MethodDeclaration[] methods = typeDecl.getMethods();
		assertEquals("Incorrect method", 1, methods.length);
		MethodDeclaration method = methods[0];
		List statements = method.getBody().statements();
		VariableDeclarationStatement stmt = (VariableDeclarationStatement) statements.get(0);
		VariableDeclarationFragment fragment = (VariableDeclarationFragment) stmt.fragments().get(0);
		TypeMethodReference lambda = (TypeMethodReference) fragment.getInitializer();
		ArrayType type = (ArrayType) lambda.getType();

		verifyAnnotationOnType(type, new String[]{"@Marker2()"});
		ITypeBinding binding = type.resolveBinding();
		binding = binding.getComponentType();
		verifyAnnotationsOnBinding(binding, new String[]{"@Marker()"});
	}

