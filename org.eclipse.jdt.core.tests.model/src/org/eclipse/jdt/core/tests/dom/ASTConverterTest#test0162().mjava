	/**
	 * Check ITypeBinding APIs:
	 *  - getModifiers()
	 *  - getElementType() when it is not an array type
	 *  - getDimensions() when it is not an array type
	 *  - getDeclaringClass()
	 *  - getDeclaringName()
	 *  - getName()
	 *  - isNested()
	 *  - isAnonymous()
	 *  - isLocal()
	 *  - isMember()
	 *  - isArray()
	 *  - getDeclaredMethods() => returns binding for default constructor
	 *  - isPrimitive()
	 *  - isTopLevel()
	 *  - getSuperclass()
	 */
	public void test0162() throws JavaModelException {
		ICompilationUnit sourceUnit = getCompilationUnit("Converter" , "", "test0162", "Test.java");
		ASTNode result = runConversion(sourceUnit, true);
		assertNotNull("Expression should not be null", result); //$NON-NLS-1$
		assertTrue("The result is not a compilation unit", result instanceof CompilationUnit);
		CompilationUnit compilationUnit = (CompilationUnit) result;
		List types = compilationUnit.types();
		assertTrue("The types list is empty", types.size() != 0);
		TypeDeclaration typeDeclaration = (TypeDeclaration) types.get(0);
		ITypeBinding typeBinding = typeDeclaration.resolveBinding();
		assertNotNull("The type binding should not be null", typeBinding);
		assertEquals("The modifier is PUBLIC", Modifier.PUBLIC, typeBinding.getModifiers());
		assertNull("There is no element type", typeBinding.getElementType());
		assertEquals("There is no dimension", 0, typeBinding.getDimensions());
		assertNull("This is not a member type", typeBinding.getDeclaringClass());
		IMethodBinding[] methods = typeBinding.getDeclaredMethods();
		assertEquals("Contains no methos", 0, methods.length);
		assertEquals("The name is not Test", "Test", typeBinding.getName());
		assertTrue("An anonymous class", !typeBinding.isAnonymous());
		assertTrue("A local class", !typeBinding.isLocal());
		assertTrue("A nested class", !typeBinding.isNested());
		assertTrue("A member class", !typeBinding.isMember());
		assertTrue("An array", !typeBinding.isArray());
		assertTrue("A class", !typeBinding.isClass());
		assertTrue("Not an interface", typeBinding.isInterface());
		assertTrue("Not from source", typeBinding.isFromSource());
		assertTrue("Is nested", typeBinding.isTopLevel());
		assertTrue("A primitive type", !typeBinding.isPrimitive());
		ITypeBinding superclass = typeBinding.getSuperclass();
		assertNull("No superclass", superclass);
		assertEquals("Has fields", 0, typeBinding.getDeclaredFields().length);
	}

