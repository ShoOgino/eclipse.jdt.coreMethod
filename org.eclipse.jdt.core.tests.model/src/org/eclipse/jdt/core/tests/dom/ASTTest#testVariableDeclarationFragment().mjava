	public void testVariableDeclarationFragment() {
		long previousCount = this.ast.modificationCount();
		final VariableDeclarationFragment x = this.ast.newVariableDeclarationFragment();
		assertTrue(this.ast.modificationCount() > previousCount);
		previousCount = this.ast.modificationCount();
		assertTrue(x.getAST() == this.ast);
		assertTrue(x.getParent() == null);
		assertTrue(x.getName().getParent() == x);
		assertTrue(x.getName().isDeclaration() == true);
		assertTrue(x.getExtraDimensions() == 0);
		assertTrue(x.getInitializer() == null);
		assertTrue(x.getNodeType() == ASTNode.VARIABLE_DECLARATION_FRAGMENT);
		assertTrue(x.structuralPropertiesForType() ==
			VariableDeclarationFragment.propertyDescriptors(this.ast.apiLevel()));
		// make sure that reading did not change modification count
		assertTrue(this.ast.modificationCount() == previousCount);

		previousCount = this.ast.modificationCount();
		if (this.ast.apiLevel() < AST.JLS8) {
			setExtraDimensions(x, 1);
		} else {
			x.extraDimensions().add(this.ast.newDimension());
		}
		assertTrue(this.ast.modificationCount() > previousCount);
		assertTrue(x.getExtraDimensions() == 1);

		previousCount = this.ast.modificationCount();
		if (this.ast.apiLevel() < AST.JLS8) {
			setExtraDimensions(x, 0);
		} else {
			x.extraDimensions().remove(0);
		}
		assertTrue(this.ast.modificationCount() > previousCount);
		assertTrue(x.getExtraDimensions() == 0);

		// check that property cannot be set negative
		if (this.ast.apiLevel() < AST.JLS8) {
			try {
				setExtraDimensions(x, -1);
				fail();
			} catch (IllegalArgumentException e) {
				// pass
			}
		}

		genericPropertyTest(x, new Property("Name", true, SimpleName.class) { //$NON-NLS-1$
			public ASTNode sample(AST targetAst, boolean parented) {
				SimpleName result = targetAst.newSimpleName("foo"); //$NON-NLS-1$
				if (parented) {
					targetAst.newExpressionStatement(result);
				}
				return result;
			}
			public ASTNode get() {
				return x.getName();
			}
			public void set(ASTNode value) {
				x.setName((SimpleName) value);
			}
		});

		if (this.ast.apiLevel() >= AST.JLS8) {
			genericPropertyListTest(x, x.extraDimensions(),
					new Property("ExtraDimensions", true, Dimension.class) { //$NON-NLS-1$
						public ASTNode sample(AST targetAst, boolean parented) {
							Dimension result = targetAst.newDimension();
							if (parented) {
								targetAst.newMethodDeclaration().extraDimensions().add(result);
							}
							return result;
						}
					});
		}
		
		genericPropertyTest(x, new Property("Initializer", false, Expression.class) { //$NON-NLS-1$
			public ASTNode sample(AST targetAst, boolean parented) {
				SimpleName result = targetAst.newSimpleName("foo"); //$NON-NLS-1$
				if (parented) {
					targetAst.newExpressionStatement(result);
				}
				return result;
			}
			public ASTNode wrap() {
				// return an Expression that embeds x
				VariableDeclarationExpression s1 =
					ASTTest.this.ast.newVariableDeclarationExpression(x);
				return s1;
			}
			public void unwrap() {
				VariableDeclarationExpression s1 =
					(VariableDeclarationExpression) x.getParent();
				s1.fragments().remove(x);
			}
			public ASTNode get() {
				return x.getInitializer();
			}
			public void set(ASTNode value) {
				x.setInitializer((Expression) value);
			}
		});
	}

