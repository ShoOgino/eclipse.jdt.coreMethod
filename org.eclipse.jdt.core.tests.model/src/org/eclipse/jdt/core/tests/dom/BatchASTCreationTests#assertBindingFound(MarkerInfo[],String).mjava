	/*
	 * Resolves the given cus as a batch. 
	 * While resolving, for the ASTNode that is marked, ensures that its binding key is the given one.
	 * On the cuNumber acceptAST(...), retrieve the binding from the given binding key and return it.
	 */
	private void assertBindingFound(final MarkerInfo[] markerInfos, final String expectedKey) throws JavaModelException {
		ICompilationUnit[] workingCopies;
		workingCopies = createWorkingCopies(markerInfos);
		class Requestor extends TestASTRequestor {
			String bindingKey;
			int index = -1;
			String foundKey;
			public void acceptAST(CompilationUnit cu, ICompilationUnit source) {
				super.acceptAST(cu, source);
				ASTNode node = findNode(cu, markerInfos[++this.index]);
				if (node != null) {
					IBinding binding = null;
					if (node instanceof PackageDeclaration) {
						binding = ((PackageDeclaration) node).resolveBinding();
					} else if (node instanceof TypeDeclaration) {
						binding = ((TypeDeclaration) node).resolveBinding();
					} else if (node instanceof AnonymousClassDeclaration) {
						binding = ((AnonymousClassDeclaration) node).resolveBinding();
					}
					this.bindingKey = binding == null ? null : binding.getKey();
				}
			}
			public void acceptBinding(IBinding binding, String key) {
				super.acceptBinding(binding, key);
				this.foundKey = binding.getKey();
			}
		};
		Requestor requestor = new Requestor();
		resolveASTs(workingCopies, new String[] {expectedKey}, requestor);
		
		if (!expectedKey.equals(requestor.bindingKey))
			System.out.println(Util.displayString(expectedKey, 3));
		assertEquals("Unexpected binding for marked node", expectedKey, requestor.bindingKey);
		
		if (!expectedKey.equals(requestor.foundKey)) {
			System.out.println(Util.displayString(requestor.foundKey, 3));
		}
		assertEquals("Unexpected binding found by acceptBinding", expectedKey, requestor.foundKey);
	}

