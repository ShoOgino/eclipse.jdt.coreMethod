	// Bug 353474 - type converters should include more annotations
	// secondary type comes from binary
	public void testBug353474a() throws CoreException {
		String jarLocation = getWorkspacePath()+"Converter15/bins/bug353474.jar";
		IJavaProject jp = createJavaProject("Bug353464a", new String[]{"src"}, new String[]{"CONVERTER_JCL15_LIB", jarLocation}, "bin", "1.5");
		try {
			this.workingCopy = getWorkingCopy("/Bug353464a/src/testBug353474/p1/C2.java", true/*resolve*/);
			String contents =
				"package testBug353474.p1;\n" +
				"public class C2 {\n" +
				"	 public String bar(C1a c1) {\n" +
				"        return c1.foo(null);\n" +
				"    }\n" +
				"}\n";
			ASTNode node = buildAST(
					contents,
					this.workingCopy,
					true);
			assertNotNull("No node", node);
			assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
			CompilationUnit compilationUnit = (CompilationUnit) node;
			TypeDeclaration c2 = (TypeDeclaration) compilationUnit.types().get(0);
			MethodDeclaration bar = (MethodDeclaration) c2.bodyDeclarations().get(0);
			ReturnStatement returnStat = (ReturnStatement) bar.getBody().statements().get(0);
			MethodInvocation fooCall = (MethodInvocation) returnStat.getExpression();
			IMethodBinding resolvedFoo = fooCall.resolveMethodBinding();
			IAnnotationBinding[] parameterAnnotations0 = resolvedFoo.getParameterAnnotations(0);
			assertNotNull("Parameter annotation should not be null", parameterAnnotations0);
			assertEquals("Should have exactly one annotation", 1, parameterAnnotations0.length);
			assertEquals("Unexpected annotation name", "Nullable", parameterAnnotations0[0].getName());

			IAnnotationBinding[] returnAnnotations = resolvedFoo.getAnnotations();
			assertNotNull("Return annotation should not be null", returnAnnotations);
			assertEquals("Should have exactly one return annotation", 1, returnAnnotations.length);
			assertEquals("Unexpected annotation name", "Nullable", returnAnnotations[0].getName());
		} finally {
			deleteProject(jp);
		}
	}

