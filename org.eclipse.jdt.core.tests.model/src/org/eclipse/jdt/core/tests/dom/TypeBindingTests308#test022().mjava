	public void test022() throws Exception {
		String contents = 
				"public class X {\n" +
				"    X x = new @Marker X();\n" +
				"    X y = new <String> @Marker X();\n" +	
				"	<T> X(){}\n" +
				"}\n" +
				"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
				"@interface Marker {}\n";

		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true);
		ASTNode node = buildAST(contents, this.workingCopy);
		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
		CompilationUnit compilationUnit = (CompilationUnit) node;
		assertProblemsSize(compilationUnit, 0);
		List types = compilationUnit.types();
		assertEquals("Incorrect no of types", 2, types.size());
		TypeDeclaration typeDecl = (TypeDeclaration) types.get(0);
		FieldDeclaration[] fields = typeDecl.getFields();
		assertEquals("Incorrect no of fields", 2, fields.length);
		FieldDeclaration field = fields[0];
		VariableDeclarationFragment fragment = (VariableDeclarationFragment) field.fragments().get(0);
		ClassInstanceCreation creation = (ClassInstanceCreation) fragment.getInitializer();
		verifyAnnotationOnType(creation.getType(), new String[]{"@Marker()"});
		
		field = fields[1];
		fragment = (VariableDeclarationFragment) field.fragments().get(0);
		creation = (ClassInstanceCreation) fragment.getInitializer();
		verifyAnnotationOnType(creation.getType(), new String[]{"@Marker()"});
	}

