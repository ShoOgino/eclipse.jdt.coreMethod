	public void test027() throws Exception {
		String contents = 
				"interface I {\n" +
				"    Y foo(int x);\n" +
				"}\n" +
				"public class X  {\n" +
				"    class Z extends Y {\n" +
				"        public Z(int x) {\n" +
				"            super(x);\n" +
				"        }\n" +
				"    }\n" +
				"    public static void main(String [] args) {\n" +
				"        I i = @Marker W<@Marker2 Integer>::<@Marker3 String> new;\n" +
				"    }\n" +
				"}\n" +
				"class W<T> extends Y {\n" +
				"    public <C> W(T x) {\n" +
				"        super(0);\n" +
				"    }\n" +
				"}\n" +
				"class Y {\n" +
				"    public Y(int x) {\n" +
				"    }\n" +
				"}\n" +
				"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
				"@interface Marker {}\n" +
				"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
				"@interface Marker2 {}\n" +
				"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
				"@interface Marker3 {}\n";

		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true);
		ASTNode node = buildAST(contents, this.workingCopy);
		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
		CompilationUnit compilationUnit = (CompilationUnit) node;
		assertProblemsSize(compilationUnit, 0);
		List types = compilationUnit.types();
		assertEquals("Incorrect no of types", 7, types.size());
		TypeDeclaration typeDecl = (TypeDeclaration) types.get(1);
		MethodDeclaration method = typeDecl.getMethods()[0];
		List statements = method.getBody().statements();
		VariableDeclarationStatement statement = (VariableDeclarationStatement) statements.get(0);
		VariableDeclarationFragment fragment = (VariableDeclarationFragment) statement.fragments().get(0);
		CreationReference lambda = (CreationReference) fragment.getInitializer();
		Type type = lambda.getType();
		verifyAnnotationOnType(type, new String[]{"@Marker()"});
		ParameterizedType paramType = (ParameterizedType) type;
		verifyAnnotationOnType((Type) paramType.typeArguments().get(0), new String[]{"@Marker2()"});
		List typeArgs = lambda.typeArguments();
		verifyAnnotationOnType((Type) typeArgs.get(0), new String[]{"@Marker3()"});
	}

