	/** @deprecated using deprecated code */
	public void testInitializer() {
		long previousCount = this.ast.modificationCount();
		final Initializer x = this.ast.newInitializer();
		assertTrue(this.ast.modificationCount() > previousCount);
		previousCount = this.ast.modificationCount();
		assertTrue(x.getAST() == this.ast);
		assertTrue(x.getParent() == null);
		assertTrue(x.getJavadoc() == null);
		if (this.ast.apiLevel() == AST.JLS2) {
			assertTrue(x.getModifiers() == Modifier.NONE);
		} else {
			assertTrue(x.modifiers().size() == 0);
		}
		assertTrue(x.getBody().getParent() == x);
		assertTrue(x.getBody().statements().size() == 0);
		assertTrue(x.getNodeType() == ASTNode.INITIALIZER);
		assertTrue(x.structuralPropertiesForType() ==
			Initializer.propertyDescriptors(this.ast.apiLevel()));
		// make sure that reading did not change modification count
		assertTrue(this.ast.modificationCount() == previousCount);

		tJavadocComment(x);
		tModifiers(x);

		if (this.ast.apiLevel() == AST.JLS2) {
			int legal = Modifier.STATIC;
			previousCount = this.ast.modificationCount();
			x.setModifiers(legal);
			assertTrue(this.ast.modificationCount() > previousCount);
			assertTrue(x.getModifiers() == legal);

			previousCount = this.ast.modificationCount();
			x.setModifiers(Modifier.NONE);
			assertTrue(this.ast.modificationCount() > previousCount);
			assertTrue(x.getModifiers() == Modifier.NONE);
		}

		genericPropertyTest(x, new Property("Body", true, Block.class) { //$NON-NLS-1$
			public ASTNode sample(AST targetAst, boolean parented) {
				Block result = targetAst.newBlock();
				if (parented) {
					Block b2 = targetAst.newBlock();
					b2.statements().add(result);
				}
				return result;
			}
			public ASTNode wrap() {
				// return Block that embeds x
				Block s1 = ASTTest.this.ast.newBlock();
				TypeDeclaration s2 = ASTTest.this.ast.newTypeDeclaration();
				s1.statements().add(ASTTest.this.ast.newTypeDeclarationStatement(s2));
				s2.bodyDeclarations().add(x);
				return s1;
			}
			public void unwrap() {
				TypeDeclaration s2 = (TypeDeclaration) x.getParent();
				s2.bodyDeclarations().remove(x);
			}
			public ASTNode get() {
				return x.getBody();
			}
			public void set(ASTNode value) {
				x.setBody((Block) value);
			}
		});
	}

