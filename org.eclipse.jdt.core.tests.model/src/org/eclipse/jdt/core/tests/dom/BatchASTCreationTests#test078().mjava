//https://bugs.eclipse.org/bugs/show_bug.cgi?id=152060
public void test078() throws CoreException, IOException {
	try {
		IJavaProject project = createJavaProject("P078", new String[] {}, Util.getJavaClassLibs(), "", "1.5");
		ICompilationUnit compilationUnits[] = new ICompilationUnit[1];
		compilationUnits[0] = getWorkingCopy(
			"P078/Test.java",
			"import java.util.*;\n" +
			"public class Test {\n" +
			"        public interface ExtraIterator<T> extends Iterator {\n" +
			"                public void extra();\n" +
			"        }\n" +
			"        public class Test2<T> implements ExtraIterator<T> {\n" +
			"            public boolean hasNext() {\n" +
			"                return false;\n" +
			"            }\n" +
			"            public T next() {\n" +
			"                return null;\n" +
			"            }\n" +
			"            public void remove() {\n" +
			"            }\n" +
			"            public void extra() {\n" +
			"            }\n" +
			"        }\n" +
			"}");
		ASTParser parser = ASTParser.newParser(JLS3_INTERNAL);
		parser.setResolveBindings(true);
		parser.setProject(project);
       	final IBinding[] bindings = new IBinding[1];
		final String key = "LTest$ExtraIterator<>;";
		parser.createASTs(
			compilationUnits,
			new String[] {
				key
			},
			new ASTRequestor() {
                public void acceptAST(ICompilationUnit source, CompilationUnit localAst) {
                	// do nothing
                }
                public void acceptBinding(String bindingKey, IBinding binding) {
                	if (key.equals(bindingKey)) {
                		bindings[0] = binding;
                 	}
                }
			},
			null);
		IBinding binding = bindings[0];
		assertNotNull("Should not be null", binding);
		assertEquals("Not a type binding", IBinding.TYPE, binding.getKind());
		ITypeBinding typeBinding = (ITypeBinding) binding;
		assertEquals("Wrong name", "Test.ExtraIterator", typeBinding.getQualifiedName());
		assertTrue("Not a raw type", typeBinding.isRawType());
	} finally {
		deleteProject("P078");
	}
}

