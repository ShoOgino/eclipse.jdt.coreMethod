	/**
	 * Check method binding
	 */
	public void test0172() throws JavaModelException {
		ICompilationUnit sourceUnit = getCompilationUnit("Converter" , "", "test0172", "Test.java");
		ASTNode result = runConversion(sourceUnit, true);
		assertNotNull("Expression should not be null", result); //$NON-NLS-1$
		assertTrue("The result is not a compilation unit", result instanceof CompilationUnit);
		CompilationUnit compilationUnit = (CompilationUnit) result;
		List types = compilationUnit.types();
		assertTrue("The types list is empty", types.size() != 0);
		TypeDeclaration typeDeclaration = (TypeDeclaration) types.get(0);
		ITypeBinding typeBinding = typeDeclaration.resolveBinding();
		assertNotNull("Binding not null", typeBinding);
		IMethodBinding[] methods = typeBinding.getDeclaredMethods();
		assertEquals("methods.length != 4", 4, methods.length);
		List bodyDeclarations = typeDeclaration.bodyDeclarations();
		assertEquals("body declaration size != 3", 3, bodyDeclarations.size());
		MethodDeclaration method1 = (MethodDeclaration) bodyDeclarations.get(0);
		IMethodBinding methodBinding1 = method1.resolveBinding();
		assertNotNull("No method binding for foo", methodBinding1);
		SimpleName simpleName = method1.getName();
		assertTrue("not a declaration", simpleName.isDeclaration());
		IBinding binding = simpleName.resolveBinding();
		assertNotNull("No binding", binding);
		assertEquals("wrong name", binding.getName(), simpleName.getIdentifier());
		assertTrue("Canonical method binding", methodBinding1 == methods[1]);
		assertTrue("declaring class is canonical", typeBinding == methodBinding1.getDeclaringClass());
		ITypeBinding[] exceptionTypes = methodBinding1.getExceptionTypes();
		assertNotNull("No exception types", exceptionTypes);
		assertEquals("One exception", 1, exceptionTypes.length);
		assertEquals("wrong name for exception", "IOException", exceptionTypes[0].getName());
		assertEquals("wrong modifier", Modifier.NONE, methodBinding1.getModifiers());
		assertEquals("wrong name for method", "foo", methodBinding1.getName());
		ITypeBinding[] parameters = methodBinding1.getParameterTypes();
		assertNotNull("No parameters", parameters);
		assertEquals("wrong size", 1, parameters.length);
		assertEquals("wrong type", "int[]", parameters[0].getName());
		assertEquals("wrong return type", "void", methodBinding1.getReturnType().getName());
		assertTrue("A constructor", !methodBinding1.isConstructor());
		
		MethodDeclaration method2 = (MethodDeclaration) bodyDeclarations.get(1);
		IMethodBinding methodBinding2 = method2.resolveBinding();
		assertNotNull("No method binding for main", methodBinding2);
		assertTrue("Canonical method binding", methodBinding2 == methods[2]);
		assertTrue("declaring class is canonical", typeBinding == methodBinding2.getDeclaringClass());
		ITypeBinding[] exceptionTypes2 = methodBinding2.getExceptionTypes();
		assertNotNull("No exception types", exceptionTypes2);
		assertEquals("No exception", 0, exceptionTypes2.length);
		assertEquals("wrong modifier", Modifier.PUBLIC | Modifier.STATIC, methodBinding2.getModifiers());
		assertEquals("wrong name for method", "main", methodBinding2.getName());
		ITypeBinding[] parameters2 = methodBinding2.getParameterTypes();
		assertNotNull("No parameters", parameters2);
		assertEquals("wrong size", 1, parameters2.length);
		assertEquals("wrong type for parameter2[0]", "String[]", parameters2[0].getName());
		assertEquals("wrong return type", "void", methodBinding2.getReturnType().getName());
		assertTrue("A constructor", !methodBinding2.isConstructor());
		
		MethodDeclaration method3 = (MethodDeclaration) bodyDeclarations.get(2);
		IMethodBinding methodBinding3 = method3.resolveBinding();
		assertNotNull("No method binding for main", methodBinding3);
		assertTrue("Canonical method binding", methodBinding3 == methods[3]);
		assertTrue("declaring class is canonical", typeBinding == methodBinding3.getDeclaringClass());
		ITypeBinding[] exceptionTypes3 = methodBinding3.getExceptionTypes();
		assertNotNull("No exception types", exceptionTypes3);
		assertEquals("No exception", 1, exceptionTypes3.length);
		assertEquals("wrong modifier", Modifier.PRIVATE, methodBinding3.getModifiers());
		assertEquals("wrong name for method", "bar", methodBinding3.getName());
		ITypeBinding[] parameters3 = methodBinding3.getParameterTypes();
		assertNotNull("No parameters", parameters3);
		assertEquals("wrong size", 1, parameters3.length);
		assertEquals("wrong type", "String", parameters3[0].getName());
		assertEquals("wrong return type", "String", methodBinding3.getReturnType().getName());
		assertTrue("A constructor", !methodBinding3.isConstructor());
		assertTrue("The binding is not canonical", parameters3[0] == methodBinding3.getReturnType());
	}

