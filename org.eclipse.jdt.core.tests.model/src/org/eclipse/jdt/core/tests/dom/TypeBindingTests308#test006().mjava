	public void test006() throws Exception {
		String contents = 
						"public class X {\n" +
						"    int x() {\n" +
						"        try {\n" +
						"        } catch (@Marker NullPointerException | @Marker2 ArrayIndexOutOfBoundsException e) {\n" +
						"        }\n" +
						"        return 10;\n" +
						"    }\n" +
						"}\n" +
						"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
						"@interface Marker {}\n" +
						"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
						"@interface Marker2 {}\n";

		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true/*resolve*/);
		ASTNode node = buildAST(contents, this.workingCopy);
		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
		CompilationUnit compilationUnit = (CompilationUnit) node;
		assertProblemsSize(compilationUnit, 0);
		List types = compilationUnit.types();
		assertEquals("Incorrect no of types", 3, types.size());
		TypeDeclaration typeDecl = (TypeDeclaration) types.get(0);
		MethodDeclaration[] methods = typeDecl.getMethods();
		assertEquals("Incorrect method", 1, methods.length);
		MethodDeclaration method = methods[0];
		List statements = method.getBody().statements();
		TryStatement trySt = (TryStatement) statements.get(0);
		CatchClause catchCl = (CatchClause) trySt.catchClauses().get(0);
		UnionType union = (UnionType) catchCl.getException().getType();
		types = union.types();
		assertEquals("Incorrect union types", 2, types.size());
		Type type = (Type) types.get(0);
		verifyAnnotationOnType(type, new String[]{"@Marker()"});
		
		type = (Type) types.get(1);
		verifyAnnotationOnType(type, new String[]{"@Marker2()"});
	}	

