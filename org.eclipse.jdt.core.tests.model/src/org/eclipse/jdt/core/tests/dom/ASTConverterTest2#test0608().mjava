	/*
	 * Ensures that no exception is thrown in case of a syntax error in a for statement
	 * (regression test for bug 199668 IAE in ASTNode.setSourceRange while editing a class)
	 */
	public void test0608() throws CoreException {
		ICompilationUnit workingCopy = null;
		try {
			workingCopy = getWorkingCopy(
				"/Converter/src/X.java", 
				"public class X {\n" +
				"  void foo() {\n" +
				"    for (int i=0,; i<10; i++) {\n" +
				"    }\n" +
				"  }\n" +
				"}"
			);
			ASTNode node = buildAST(null, workingCopy, false, true);
			assertNotNull("Should get an AST", node);
			assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
			node = getASTNode((CompilationUnit) node, 0, 0, 0);
			assertEquals("Not a for statement", ASTNode.FOR_STATEMENT, node.getNodeType());
			ForStatement forStatement = (ForStatement) node;
			List initializers = forStatement.initializers();
			assertEquals("Wrong size", 1, initializers.size());
			VariableDeclarationExpression expression = (VariableDeclarationExpression) initializers.get(0);
			List fragments = expression.fragments();
			assertEquals("Wrong size", 1, fragments.size());
			VariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);
			assertEquals("Wrong name", "i", fragment.getName().getIdentifier());
			assertTrue("Should be a recovered fragment", isRecovered(expression));
		} finally {
			if (workingCopy != null)
				workingCopy.discardWorkingCopy();
		}
	}

