	public void testBinarySuperInterfaces() throws CoreException, IOException {
		String jarName = "TypeBindingTests308.jar";
		String srcName = "TypeBindingTests308_src.zip";
		final IJavaProject javaProject = getJavaProject("Converter18");
		try {
			String[] pathAndContents = new String[] {
				"Y.java",
				"import java.lang.annotation.ElementType;\n" +
				"import java.lang.annotation.Target;\n" +
				"@Target(ElementType.TYPE_USE)\n" +
				"@interface T1 {\n" +
				"}\n" +
				"public abstract class Y implements Comparable<@T1 Y>{  \n" +
				"}\n"
			};

			HashMap libraryOptions = new HashMap(javaProject.getOptions(true));
			libraryOptions.put(CompilerOptions.OPTION_Store_Annotations, CompilerOptions.ENABLED);
			addLibrary(javaProject, jarName, srcName, pathAndContents, JavaCore.VERSION_1_8, libraryOptions);

			String contents =
					"public class X {\n" +
					"    void foo(Y y) {\n" +
					"    }\n" +
					"}\n";

			this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true);
			ASTNode node = buildAST(contents, this.workingCopy);
			assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
			CompilationUnit compilationUnit = (CompilationUnit) node;
			assertProblemsSize(compilationUnit, 0);
			List types = compilationUnit.types();
			assertEquals("Incorrect no of types", 1, types.size());
			TypeDeclaration typeDecl = (TypeDeclaration) types.get(0);

			MethodDeclaration[] methods = typeDecl.getMethods();
			assertEquals("Incorrect no of methods", 1, methods.length);
			MethodDeclaration method = methods[0];
			List parameters = method.parameters();
			SingleVariableDeclaration parameter = (SingleVariableDeclaration) parameters.get(0);
			ITypeBinding binding = parameter.resolveBinding().getType();
			ITypeBinding binding2 = binding.getInterfaces()[0].getTypeArguments()[0];
			assertEquals("Wrong type", "@T1 Y", binding2.toString());
			assertEquals("Wrong type", "Comparable<@T1 Y>", binding2.getInterfaces()[0].toString());
		} finally {
			removeLibrary(javaProject, jarName, srcName);
		}
	}

