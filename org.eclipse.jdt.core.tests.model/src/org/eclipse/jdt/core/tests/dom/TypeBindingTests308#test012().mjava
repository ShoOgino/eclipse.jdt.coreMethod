	public void test012() throws Exception {
		String contents = 
				"public class X  {\n" +
				"    public static void main(String args) {\n" +
				"        if (args instanceof @Marker String) {\n" +
				"        }\n" +
				"    }\n" +
				"}\n" +
				"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
				"@interface Marker {}\n";

		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true/*resolve*/);
		ASTNode node = buildAST(contents, this.workingCopy);
		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
		CompilationUnit compilationUnit = (CompilationUnit) node;
		assertProblemsSize(compilationUnit, 0);
		List types = compilationUnit.types();
		assertEquals("Incorrect no of types", 2, types.size());
		TypeDeclaration typeDecl = (TypeDeclaration) types.get(0);
		MethodDeclaration[] methods = typeDecl.getMethods();
		assertEquals("Incorrect method", 1, methods.length);
		MethodDeclaration method = methods[0];
		List statements = method.getBody().statements();
		IfStatement ifStmt = (IfStatement) statements.get(0);
		InstanceofExpression instanceOf = (InstanceofExpression) ifStmt.getExpression();
		Type type = instanceOf.getRightOperand();
		verifyAnnotationOnType(type, new String[]{"@Marker()"});
	}

