		private void appendNodeType(ASTNode node, StringBuffer buffer) {
			switch (node.getNodeType()) {
				case ASTNode.ANNOTATION_TYPE_DECLARATION :
					buffer.append("ANNOTATION_TYPE_DECLARATION");break;
				case ASTNode.ANNOTATION_TYPE_MEMBER_DECLARATION :
					buffer.append("ANNOTATION_TYPE_MEMBER_DECLARATION");break;
				case ASTNode.ANONYMOUS_CLASS_DECLARATION :
					buffer.append("ANONYMOUS_CLASS_DECLARATION");break;
				case ASTNode.ARRAY_ACCESS :
					buffer.append("ARRAY_ACCESS");break;
				case ASTNode.ARRAY_CREATION :
					buffer.append("ARRAY_CREATION");break;
				case ASTNode.ARRAY_INITIALIZER :
					buffer.append("ARRAY_INITIALIZER");break;
				case ASTNode.ARRAY_TYPE :
					buffer.append("ARRAY_TYPE");break;
				case ASTNode.ASSERT_STATEMENT :
					buffer.append("ASSERT_STATEMENT");break;
				case ASTNode.ASSIGNMENT :
					buffer.append("ASSIGNMENT");break;
				case ASTNode.BLOCK :
					buffer.append("BLOCK");break;
				case ASTNode.BLOCK_COMMENT :
					buffer.append("BLOCK_COMMENT");break;
				case ASTNode.BOOLEAN_LITERAL :
					buffer.append("BOOLEAN_LITERAL");break;
				case ASTNode.BREAK_STATEMENT :
					buffer.append("BREAK_STATEMENT");break;
				case ASTNode.CAST_EXPRESSION :
					buffer.append("CAST_EXPRESSION");break;
				case ASTNode.CATCH_CLAUSE :
					buffer.append("CATCH_CLAUSE");break;
				case ASTNode.CHARACTER_LITERAL :
					buffer.append("CHARACTER_LITERAL");break;
				case ASTNode.CLASS_INSTANCE_CREATION :
					buffer.append("CLASS_INSTANCE_CREATION");break;
				case ASTNode.COMPILATION_UNIT :
					buffer.append("COMPILATION_UNIT");break;
				case ASTNode.CONDITIONAL_EXPRESSION :
					buffer.append("CONDITIONAL_EXPRESSION");break;
				case ASTNode.CONSTRUCTOR_INVOCATION :
					buffer.append("CONSTRUCTOR_INVOCATION");break;
				case ASTNode.CONTINUE_STATEMENT :
					buffer.append("CONTINUE_STATEMENT");break;
				case ASTNode.DO_STATEMENT :
					buffer.append("DO_STATEMENT");break;
				case ASTNode.EMPTY_STATEMENT :
					buffer.append("EMPTY_STATEMENT");break;
				case ASTNode.ENHANCED_FOR_STATEMENT :
					buffer.append("ENHANCED_FOR_STATEMENT");break;
				case ASTNode.ENUM_CONSTANT_DECLARATION :
					buffer.append("ENUM_CONSTANT_DECLARATION");break;
				case ASTNode.ENUM_DECLARATION :
					buffer.append("ENUM_DECLARATION");break;
				case ASTNode.EXPRESSION_STATEMENT :
					buffer.append("EXPRESSION_STATEMENT");break;
				case ASTNode.EXPORTS_DIRECTIVE :
					buffer.append("EXPORTS_STATEMENT");break;
				case ASTNode.FIELD_ACCESS :
					buffer.append("FIELD_ACCESS");break;
				case ASTNode.FIELD_DECLARATION :
					buffer.append("FIELD_DECLARATION");break;
				case ASTNode.FOR_STATEMENT :
					buffer.append("FOR_STATEMENT");break;
				case ASTNode.IF_STATEMENT :
					buffer.append("IF_STATEMENT");break;
				case ASTNode.IMPORT_DECLARATION :
					buffer.append("IMPORT_DECLARATION");break;
				case ASTNode.INFIX_EXPRESSION :
					buffer.append("INFIX_EXPRESSION");break;
				case ASTNode.INITIALIZER :
					buffer.append("INITIALIZER");break;
				case ASTNode.INSTANCEOF_EXPRESSION :
					buffer.append("INSTANCEOF_EXPRESSION");break;
				case ASTNode.JAVADOC :
					buffer.append("JAVADOC");break;
				case ASTNode.LABELED_STATEMENT :
					buffer.append("LABELED_STATEMENT");break;
				case ASTNode.LINE_COMMENT :
					buffer.append("LINE_COMMENT");break;
				case ASTNode.MARKER_ANNOTATION :
					buffer.append("MARKER_ANNOTATION");break;
				case ASTNode.MEMBER_REF :
					buffer.append("MEMBER_REF");break;
				case ASTNode.MEMBER_VALUE_PAIR :
					buffer.append("MEMBER_VALUE_PAIR");break;
				case ASTNode.METHOD_DECLARATION :
					buffer.append("METHOD_DECLARATION");break;
				case ASTNode.METHOD_INVOCATION :
					buffer.append("METHOD_INVOCATION");break;
				case ASTNode.METHOD_REF :
					buffer.append("METHOD_REF");break;
				case ASTNode.METHOD_REF_PARAMETER :
					buffer.append("METHOD_REF_PARAMETER");break;
				case ASTNode.MODIFIER :
					buffer.append("MODIFIER");break;
				case ASTNode.MODULE_DECLARATION :
					buffer.append("MODULE_DECLARATION");break;
				case ASTNode.NORMAL_ANNOTATION :
					buffer.append("NORMAL_ANNOTATION");break;
				case ASTNode.NULL_LITERAL :
					buffer.append("NULL_LITERAL");break;
				case ASTNode.NUMBER_LITERAL :
					buffer.append("NUMBER_LITERAL");break;
				case ASTNode.OPENS_DIRECTIVE :
					buffer.append("OPENS_STATEMENT");break;
				case ASTNode.PACKAGE_DECLARATION :
					buffer.append("PACKAGE_DECLARATION");break;
				case ASTNode.PARAMETERIZED_TYPE :
					buffer.append("PARAMETERIZED_TYPE");break;
				case ASTNode.PARENTHESIZED_EXPRESSION :
					buffer.append("PARENTHESIZED_EXPRESSION");break;
				case ASTNode.POSTFIX_EXPRESSION :
					buffer.append("POSTFIX_EXPRESSION");break;
				case ASTNode.PREFIX_EXPRESSION :
					buffer.append("PREFIX_EXPRESSION");break;
				case ASTNode.PRIMITIVE_TYPE :
					buffer.append("PRIMITIVE_TYPE");break;
				case ASTNode.PROVIDES_DIRECTIVE :
					buffer.append("PROVIDES_STATEMENT");break;
				case ASTNode.QUALIFIED_NAME :
					buffer.append("QUALIFIED_NAME");break;
				case ASTNode.QUALIFIED_TYPE :
					buffer.append("QUALIFIED_TYPE");break;
				case ASTNode.REQUIRES_DIRECTIVE :
					buffer.append("REQUIRES_STATEMENT");break;
				case ASTNode.RETURN_STATEMENT :
					buffer.append("RETURN_STATEMENT");break;
				case ASTNode.SIMPLE_NAME :
					buffer.append("SIMPLE_NAME");break;
				case ASTNode.SIMPLE_TYPE :
					buffer.append("SIMPLE_TYPE");break;
				case ASTNode.SINGLE_MEMBER_ANNOTATION :
					buffer.append("SINGLE_MEMBER_ANNOTATION");break;
				case ASTNode.SINGLE_VARIABLE_DECLARATION :
					buffer.append("SINGLE_VARIABLE_DECLARATION");break;
				case ASTNode.STRING_LITERAL :
					buffer.append("STRING_LITERAL");break;
				case ASTNode.SUPER_CONSTRUCTOR_INVOCATION :
					buffer.append("SUPER_CONSTRUCTOR_INVOCATION");break;
				case ASTNode.SUPER_FIELD_ACCESS :
					buffer.append("SUPER_FIELD_ACCESS");break;
				case ASTNode.SUPER_METHOD_INVOCATION :
					buffer.append("SUPER_METHOD_INVOCATION");break;
				case ASTNode.SWITCH_CASE:
					buffer.append("SWITCH_CASE");break;
				case ASTNode.SWITCH_STATEMENT :
					buffer.append("SWITCH_STATEMENT");break;
				case ASTNode.SYNCHRONIZED_STATEMENT :
					buffer.append("SYNCHRONIZED_STATEMENT");break;
				case ASTNode.TAG_ELEMENT :
					buffer.append("TAG_ELEMENT");break;
				case ASTNode.TEXT_ELEMENT :
					buffer.append("TEXT_ELEMENT");break;
				case ASTNode.THIS_EXPRESSION :
					buffer.append("THIS_EXPRESSION");break;
				case ASTNode.THROW_STATEMENT :
					buffer.append("THROW_STATEMENT");break;
				case ASTNode.TRY_STATEMENT :
					buffer.append("TRY_STATEMENT");break;
				case ASTNode.TYPE_DECLARATION :
					buffer.append("TYPE_DECLARATION");break;
				case ASTNode.TYPE_DECLARATION_STATEMENT :
					buffer.append("TYPE_DECLARATION_STATEMENT");break;
				case ASTNode.TYPE_LITERAL :
					buffer.append("TYPE_LITERAL");break;
				case ASTNode.TYPE_PARAMETER :
					buffer.append("TYPE_PARAMETER");break;
				case ASTNode.USES_DIRECTIVE :
					buffer.append("USES_STATEMENT");break;
				case ASTNode.VARIABLE_DECLARATION_EXPRESSION :
					buffer.append("VARIABLE_DECLARATION_EXPRESSION");break;
				case ASTNode.VARIABLE_DECLARATION_FRAGMENT :
					buffer.append("VARIABLE_DECLARATION_FRAGMENT");break;
				case ASTNode.VARIABLE_DECLARATION_STATEMENT :
					buffer.append("VARIABLE_DECLARATION_STATEMENT");break;
				case ASTNode.WHILE_STATEMENT :
					buffer.append("WHILE_STATEMENT");break;
				case ASTNode.WILDCARD_TYPE :
					buffer.append("WILDCARD_TYPE");break;
				default:
					buffer.append("UNKNOWN");
			}
		}

