	public void testCharacterLiteral() {
		long previousCount = ast.modificationCount();
		CharacterLiteral x = ast.newCharacterLiteral();
		assertTrue(ast.modificationCount() > previousCount);
		assertTrue(x instanceof Expression);
		assertTrue(x.getAST() == ast);
		assertTrue(x.getParent() == null);
		assertTrue(x.getEscapedValue().startsWith("\'"));
		assertTrue(x.getEscapedValue().endsWith("\'"));
		assertTrue(x.getNodeType() == ASTNode.CHARACTER_LITERAL);

		previousCount = ast.modificationCount();
		x.setEscapedValue("\'z\'");
		assertTrue(ast.modificationCount() > previousCount);
		assertTrue("\'z\'".equals(x.getEscapedValue()));
		assertTrue(x.charValue() == 'z');

		// test other factory method
		previousCount = ast.modificationCount();
		CharacterLiteral y = ast.newCharacterLiteral();
		assertTrue(ast.modificationCount() > previousCount);
		assertTrue(y instanceof Expression);
		assertTrue(y.getAST() == ast);
		assertTrue(y.getParent() == null);
		String v = y.getEscapedValue();
		assertTrue(v.length() >= 3 && v.charAt(0) == '\'' & v.charAt(v.length()-1 ) == '\'');

		// check that property cannot be set to null
		try {
			x.setEscapedValue(null);
			assertTrue(false);
		} catch (RuntimeException e) {
			// pass
		}
		
		// test escaped characters
		// b, t, n, f, r, ", ', \, 0, 1, 2, 3, 4, 5, 6, or 7
		try {
			x.setEscapedValue("\'\\b\'");
			x.setEscapedValue("\'\\t\'");
			x.setEscapedValue("\'\\n\'");
			x.setEscapedValue("\'\\f\'");
			x.setEscapedValue("\'\\\"\'");
			x.setEscapedValue("\'\\'\'");
			x.setEscapedValue("\'\\\\\'");
			x.setEscapedValue("\'\\0\'");
			x.setEscapedValue("\'\\1\'");
			x.setEscapedValue("\'\\2\'");
			x.setEscapedValue("\'\\3\'");
			x.setEscapedValue("\'\\4\'");
			x.setEscapedValue("\'\\5\'");
			x.setEscapedValue("\'\\6\'");
			x.setEscapedValue("\'\\7\'");
			x.setEscapedValue("\'\\u0041\'");
			assertTrue(x.charValue() == 'A');
		} catch(IllegalArgumentException e) {
			assertTrue(false);
		}
		
		x.setCharValue('\u0041');
		assertTrue(x.getEscapedValue().equals("\'A\'"));
		x.setCharValue('\t');
		assertTrue(x.getEscapedValue().equals("\'\\t\'"));
		x.setEscapedValue("\'\\\\\'");
		assertTrue(x.getEscapedValue().equals("\'\\\\\'"));
		assertTrue(x.charValue() == '\\');
		x.setEscapedValue("\'\\\'\'");
		assertTrue(x.getEscapedValue().equals("\'\\\'\'"));
		assertTrue(x.charValue() == '\'');		
		x.setCharValue('\'');
		assertTrue(x.getEscapedValue().equals("\'\\\'\'"));
		assertTrue(x.charValue() == '\'');		
		x.setCharValue('\\');
		assertTrue(x.getEscapedValue().equals("\'\\\\\'"));
		assertTrue(x.charValue() == '\\');		
	}		

