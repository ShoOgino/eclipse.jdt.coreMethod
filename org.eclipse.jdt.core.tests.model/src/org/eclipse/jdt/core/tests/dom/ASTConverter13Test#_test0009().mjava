	public void _test0009() throws JavaModelException {
		String contents =
				"public class X {\n" +
						"	public String _test001() {\n" + 
						"		String s = \"\"\"\n" + 
						"      	<html>\n" + 
						"        <body>\n" + 
						"            <p>Hello, world</p>\n" + 
						"        </body>\n" + 
						"    	</html>\n" + 
						"    	\"\"\";\n" + 
						"    	System.out.println(s);" +
						"		return s;\n" + 
						"	}" +
						"}" ;
		this.workingCopy = getWorkingCopy("/Converter13/src/X.java", true/*resolve*/);
		IJavaProject javaProject = this.workingCopy.getJavaProject();
		String old = javaProject.getOption(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, true);
		try {
			javaProject.setOption(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);
			javaProject.setOption(JavaCore.COMPILER_PB_REPORT_PREVIEW_FEATURES, JavaCore.IGNORE);
			ASTNode node = buildAST(
					contents,
					this.workingCopy);
			assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
			CompilationUnit compilationUnit = (CompilationUnit) node;
			assertProblemsSize(compilationUnit, 0);
			node = getASTNode(compilationUnit, 0, 0, 0);
			assertEquals("Text block statement", node.getNodeType(), ASTNode.VARIABLE_DECLARATION_STATEMENT);
			List fragments = ((VariableDeclarationStatement) node).fragments();
			assertEquals("Incorrect no of fragments", 1, fragments.size());
			node = (ASTNode) fragments.get(0);
			assertEquals("Switch statement", node.getNodeType(), ASTNode.VARIABLE_DECLARATION_FRAGMENT);
			VariableDeclarationFragment fragment = (VariableDeclarationFragment) node;
			Expression initializer = fragment.getInitializer();
			assertTrue("Initializer is not a TextBlock", initializer instanceof TextBlock);
			ITypeBinding binding = initializer.resolveTypeBinding();
			assertNotNull("No binding", binding);
			assertEquals("Wrong qualified name", "java.lang.String", binding.getQualifiedName());
			
			String escapedValue = ((TextBlock) initializer).getEscapedValue();

			assertTrue("String should not be empty", escapedValue.length() != 0);
			assertTrue("String should start with \"\"\"", escapedValue.startsWith("\"\"\""));
			assertEquals("escaped value not correct", 
					"\"\"\"\n" + 
					"      	<html>\n" + 
					"        <body>\n" + 
					"            <p>Hello, world</p>\n" + 
					"        </body>\n" + 
					"    	</html>\n" + 
					"    	\"\"\"", 
					escapedValue);
			
			String literal = ((TextBlock) initializer).getLiteralValue();
			assertEquals("literal value not correct", 
					"      	<html>\n" + 
					"        <body>\n" + 
					"            <p>Hello, world</p>\n" + 
					"        </body>\n" + 
					"    	</html>\n" + 
					"    	", 
					literal);
		} finally {
			javaProject.setOption(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, old);
		}
	}

