	public void testBug535249_002() throws JavaModelException {
		String contents =
				"public class X {\n" +
				"	public static void main(String[] args) {\n" +
				"		I lambda = (var x, var y) -> {System.out.println(x);};\n" +
				"       lambda.apply(10, 20);\n" +
				"	}\n" +
				"}\n" +
				"interface I {\n" +
				"	public void apply(Integer k, Integer l);\n" +
				"}";
			this.workingCopy = getWorkingCopy("/Converter11/src/X.java", true/*resolve*/);
			ASTNode node = buildAST(contents, this.workingCopy);
			assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
			node = getASTNode((CompilationUnit)node, 0, 0);
			MethodDeclaration methodDeclaration = (MethodDeclaration) node;
			VariableDeclarationStatement vStmt = (VariableDeclarationStatement) methodDeclaration.getBody().statements().get(0);
			checkSourceRange(vStmt, "I lambda = (var x, var y) -> {System.out.println(x);};", contents);
			VariableDeclarationFragment fragment = (VariableDeclarationFragment) vStmt.fragments().get(0);
			LambdaExpression lambda = (LambdaExpression) fragment.getInitializer();
			for (int i = 0, l = lambda.parameters().size(); i < l; ++i) {
				SingleVariableDeclaration varDecl = (SingleVariableDeclaration) lambda.parameters().get(i);
				Type type = varDecl.getType();
				assertTrue("Not SimpleType", type instanceof SimpleType);
				SimpleType simpleType = (SimpleType) type;
				assertTrue("not a var", simpleType.isVar());
				ITypeBinding binding = simpleType.resolveBinding();
				assertTrue("null binding", binding != null);
				SimpleName simpleName = (SimpleName) simpleType.getName();
				binding = simpleName.resolveTypeBinding();
				assertTrue("null binding", binding != null);
				assertTrue("Wrong Binding", "Integer".equals(simpleName.resolveBinding().getName()));

			}
	}
// Add new tests here

