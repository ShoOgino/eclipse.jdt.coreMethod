	/**
	 * @bug 103304: [Javadoc] Wrong reference proposal for inner classes.
	 * @see "http://bugs.eclipse.org/bugs/show_bug.cgi?id=103304"
	 */
	public void testBug103304() throws JavaModelException {
		this.packageBinding = false; // do NOT verify that qualification only can be package name
		workingCopies = new ICompilationUnit[1];
		workingCopies[0] = getWorkingCopy("/Converter15/src/javadoc/b103304/Test.java",
			"package javadoc.b103304;\n" + 
			"interface IAFAState {\n" + 
			"    public class ValidationException extends Exception {\n" + 
			"        public ValidationException(String variableName, IAFAState subformula) {\n" + 
			"            super(\"Variable \'\"+variableName+\"\' may be unbound in \'\"+subformula+\"\'\");\n" + 
			"        }\n" + 
			"    }\n" + 
			"}\n" +
			"public class Test {\n" + 
			"	/**\n" + 
			"	 * @see IAFAState.ValidationException#IAFAState.ValidationException(String, IAFAState)\n" + 
			"	 */\n" + 
			"	IAFAState.ValidationException valid;\n" + 
			"}\n"
		);
		CompilationUnit compilUnit = (CompilationUnit) runConversion(workingCopies[0], true);
		verifyWorkingCopiesComments();
		if (docCommentSupport.equals(JavaCore.ENABLED)) {
			// Verify comment type
			Iterator unitComments = compilUnit.getCommentList().iterator();
			while (unitComments.hasNext()) {
				Comment comment = (Comment) unitComments.next();
				assertEquals("Comment should be javadoc", comment.getNodeType(), ASTNode.JAVADOC);
				Javadoc javadoc = (Javadoc) comment;

				// Verify that there's always a method reference in tags
				List tags = javadoc.tags();
				int size = tags.size();
				for (int i=0; i<size; i++) {
					TagElement tag = (TagElement) javadoc.tags().get(i);				
					assertEquals("Invalid number of fragment for see reference: "+tag, 1, tag.fragments().size());
					ASTNode node = (ASTNode) tag.fragments().get(0);
					assertEquals("Invalid kind of name reference for tag element: "+tag, ASTNode.METHOD_REF, node.getNodeType());
				}
			}
		}
	}

