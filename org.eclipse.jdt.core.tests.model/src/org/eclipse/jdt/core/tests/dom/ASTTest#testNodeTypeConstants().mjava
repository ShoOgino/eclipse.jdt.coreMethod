	public void testNodeTypeConstants() {
		// it would be a breaking API change to change the numeric values of
		// public static final ints
		assertSame(ASTNode.ANONYMOUS_CLASS_DECLARATION, 1);
		assertSame(ASTNode.ARRAY_ACCESS, 2);
		assertSame(ASTNode.ARRAY_CREATION, 3);
		assertSame(ASTNode.ARRAY_INITIALIZER, 4);
		assertSame(ASTNode.ARRAY_TYPE, 5);
		assertSame(ASTNode.ASSERT_STATEMENT, 6);
		assertSame(ASTNode.ASSIGNMENT, 7);
		assertSame(ASTNode.BLOCK, 8);
		assertSame(ASTNode.BOOLEAN_LITERAL, 9);
		assertSame(ASTNode.BREAK_STATEMENT, 10);
		assertSame(ASTNode.CAST_EXPRESSION, 11);
		assertSame(ASTNode.CATCH_CLAUSE, 12);
		assertSame(ASTNode.CHARACTER_LITERAL, 13);
		assertSame(ASTNode.CLASS_INSTANCE_CREATION, 14);
		assertSame(ASTNode.COMPILATION_UNIT, 15);
		assertSame(ASTNode.CONDITIONAL_EXPRESSION, 16);
		assertSame(ASTNode.CONSTRUCTOR_INVOCATION, 17);
		assertSame(ASTNode.CONTINUE_STATEMENT, 18);
		assertSame(ASTNode.DO_STATEMENT, 19);
		assertSame(ASTNode.EMPTY_STATEMENT, 20);
		assertSame(ASTNode.EXPRESSION_STATEMENT, 21);
		assertSame(ASTNode.FIELD_ACCESS, 22);
		assertSame(ASTNode.FIELD_DECLARATION, 23);
		assertSame(ASTNode.FOR_STATEMENT, 24);
		assertSame(ASTNode.IF_STATEMENT, 25);
		assertSame(ASTNode.IMPORT_DECLARATION, 26);
		assertSame(ASTNode.INFIX_EXPRESSION, 27);
		assertSame(ASTNode.INITIALIZER, 28);
		assertSame(ASTNode.JAVADOC, 29);
		assertSame(ASTNode.LABELED_STATEMENT, 30);
		assertSame(ASTNode.METHOD_DECLARATION, 31);
		assertSame(ASTNode.METHOD_INVOCATION, 32);
		assertSame(ASTNode.NULL_LITERAL, 33);
		assertSame(ASTNode.NUMBER_LITERAL, 34);
		assertSame(ASTNode.PACKAGE_DECLARATION, 35);
		assertSame(ASTNode.PARENTHESIZED_EXPRESSION, 36);
		assertSame(ASTNode.POSTFIX_EXPRESSION, 37);
		assertSame(ASTNode.PREFIX_EXPRESSION, 38);
		assertSame(ASTNode.PRIMITIVE_TYPE, 39);
		assertSame(ASTNode.QUALIFIED_NAME, 40);
		assertSame(ASTNode.RETURN_STATEMENT, 41);
		assertSame(ASTNode.SIMPLE_NAME, 42);
		assertSame(ASTNode.SIMPLE_TYPE, 43);
		assertSame(ASTNode.SINGLE_VARIABLE_DECLARATION, 44);
		assertSame(ASTNode.STRING_LITERAL, 45);
		assertSame(ASTNode.SUPER_CONSTRUCTOR_INVOCATION, 46);
		assertSame(ASTNode.SUPER_FIELD_ACCESS, 47);
		assertSame(ASTNode.SUPER_METHOD_INVOCATION, 48);
		assertSame(ASTNode.SWITCH_CASE, 49);
		assertSame(ASTNode.SWITCH_STATEMENT, 50);
		assertSame(ASTNode.SYNCHRONIZED_STATEMENT, 51);
		assertSame(ASTNode.THIS_EXPRESSION, 52);
		assertSame(ASTNode.THROW_STATEMENT, 53);
		assertSame(ASTNode.TRY_STATEMENT, 54);
		assertSame(ASTNode.TYPE_DECLARATION, 55);
		assertSame(ASTNode.TYPE_DECLARATION_STATEMENT, 56);
		assertSame(ASTNode.TYPE_LITERAL, 57);
		assertSame(ASTNode.VARIABLE_DECLARATION_EXPRESSION, 58);
		assertSame(ASTNode.VARIABLE_DECLARATION_FRAGMENT, 59);
		assertSame(ASTNode.VARIABLE_DECLARATION_STATEMENT, 60);
		assertSame(ASTNode.WHILE_STATEMENT, 61);
		assertSame(ASTNode.INSTANCEOF_EXPRESSION, 62);
		assertSame(ASTNode.LINE_COMMENT, 63);
		assertSame(ASTNode.BLOCK_COMMENT, 64);
		assertSame(ASTNode.TAG_ELEMENT, 65);
		assertSame(ASTNode.TEXT_ELEMENT, 66);
		assertSame(ASTNode.MEMBER_REF, 67);
		assertSame(ASTNode.METHOD_REF, 68);
		assertSame(ASTNode.METHOD_REF_PARAMETER, 69);
		assertSame(ASTNode.ENHANCED_FOR_STATEMENT, 70);
		assertSame(ASTNode.ENUM_DECLARATION, 71);
		assertSame(ASTNode.ENUM_CONSTANT_DECLARATION, 72);
		assertSame(ASTNode.TYPE_PARAMETER, 73);
		assertSame(ASTNode.PARAMETERIZED_TYPE, 74);
		assertSame(ASTNode.QUALIFIED_TYPE, 75);
		assertSame(ASTNode.WILDCARD_TYPE, 76);
		assertSame(ASTNode.NORMAL_ANNOTATION, 77);
		assertSame(ASTNode.MARKER_ANNOTATION, 78);
		assertSame(ASTNode.SINGLE_MEMBER_ANNOTATION, 79);
		assertSame(ASTNode.MEMBER_VALUE_PAIR, 80);
		assertSame(ASTNode.ANNOTATION_TYPE_DECLARATION, 81);
		assertSame(ASTNode.ANNOTATION_TYPE_MEMBER_DECLARATION, 82);
		assertSame(ASTNode.MODIFIER, 83);

		// ensure that all constants are distinct, positive, and small
		// (this may seem paranoid, but this test did uncover a stupid bug!)
		int[] all= {
	      	  ASTNode.ANNOTATION_TYPE_DECLARATION,
			  ASTNode.ANNOTATION_TYPE_MEMBER_DECLARATION,
              ASTNode.ANONYMOUS_CLASS_DECLARATION,
              ASTNode.ARRAY_ACCESS,
              ASTNode.ARRAY_CREATION,
              ASTNode.ARRAY_INITIALIZER,
              ASTNode.ARRAY_TYPE,
              ASTNode.ASSERT_STATEMENT,
              ASTNode.ASSIGNMENT,
              ASTNode.BLOCK,
        	  ASTNode.BLOCK_COMMENT,
              ASTNode.BOOLEAN_LITERAL,
              ASTNode.BREAK_STATEMENT,
              ASTNode.CAST_EXPRESSION,
              ASTNode.CATCH_CLAUSE,
              ASTNode.CHARACTER_LITERAL,
              ASTNode.CLASS_INSTANCE_CREATION,
              ASTNode.COMPILATION_UNIT,
              ASTNode.CONDITIONAL_EXPRESSION,
              ASTNode.CONSTRUCTOR_INVOCATION,
              ASTNode.CONTINUE_STATEMENT,
              ASTNode.DO_STATEMENT,
              ASTNode.EMPTY_STATEMENT,
              ASTNode.ENHANCED_FOR_STATEMENT,
              ASTNode.ENUM_CONSTANT_DECLARATION,
              ASTNode.ENUM_DECLARATION,
              ASTNode.EXPRESSION_STATEMENT,
              ASTNode.FIELD_ACCESS,
              ASTNode.FIELD_DECLARATION,
              ASTNode.FOR_STATEMENT,
              ASTNode.IF_STATEMENT,
              ASTNode.IMPORT_DECLARATION,
              ASTNode.INFIX_EXPRESSION,
              ASTNode.INSTANCEOF_EXPRESSION,
              ASTNode.INITIALIZER,
              ASTNode.JAVADOC,
              ASTNode.LABELED_STATEMENT,
        	  ASTNode.LINE_COMMENT,
      		  ASTNode.MARKER_ANNOTATION,
        	  ASTNode.MEMBER_REF,
      		  ASTNode.MEMBER_VALUE_PAIR,
              ASTNode.METHOD_DECLARATION,
              ASTNode.METHOD_INVOCATION,
        	  ASTNode.METHOD_REF,
        	  ASTNode.METHOD_REF_PARAMETER,
      		  ASTNode.MODIFIER,
			  ASTNode.NORMAL_ANNOTATION,
              ASTNode.NULL_LITERAL,
              ASTNode.NUMBER_LITERAL,
              ASTNode.PACKAGE_DECLARATION,
              ASTNode.PARAMETERIZED_TYPE,
              ASTNode.PARENTHESIZED_EXPRESSION,
              ASTNode.POSTFIX_EXPRESSION,
              ASTNode.PREFIX_EXPRESSION,
              ASTNode.PRIMITIVE_TYPE,
              ASTNode.QUALIFIED_NAME,
              ASTNode.QUALIFIED_TYPE,
              ASTNode.RETURN_STATEMENT,
              ASTNode.SIMPLE_NAME,
              ASTNode.SIMPLE_TYPE,
      		  ASTNode.SINGLE_MEMBER_ANNOTATION,
              ASTNode.SINGLE_VARIABLE_DECLARATION,
              ASTNode.STRING_LITERAL,
              ASTNode.SUPER_CONSTRUCTOR_INVOCATION,
              ASTNode.SUPER_FIELD_ACCESS,
              ASTNode.SUPER_METHOD_INVOCATION,
              ASTNode.SWITCH_CASE,
              ASTNode.SWITCH_STATEMENT,
              ASTNode.SYNCHRONIZED_STATEMENT,
        	  ASTNode.TAG_ELEMENT,
        	  ASTNode.TEXT_ELEMENT,
              ASTNode.THIS_EXPRESSION,
              ASTNode.THROW_STATEMENT,
              ASTNode.TRY_STATEMENT,
              ASTNode.TYPE_DECLARATION,
              ASTNode.TYPE_DECLARATION_STATEMENT,
              ASTNode.TYPE_LITERAL,
              ASTNode.TYPE_PARAMETER,
              ASTNode.VARIABLE_DECLARATION_EXPRESSION,
              ASTNode.VARIABLE_DECLARATION_FRAGMENT,
              ASTNode.VARIABLE_DECLARATION_STATEMENT,
              ASTNode.WHILE_STATEMENT,
              ASTNode.WILDCARD_TYPE,
		};
		int MIN = 1;
		int MAX = 100;
		Set s = new HashSet();
		for (int i=0; i<all.length; i++) {
			assertTrue(MIN <= all[i] && all[i] <= MAX);
			s.add(new Integer(all[i]));
		}
		assertTrue(s.size() == all.length);
		// ensure that Integers really do compare properly with equals
		assertTrue(new Integer(1).equals(new Integer(1)));
	}

