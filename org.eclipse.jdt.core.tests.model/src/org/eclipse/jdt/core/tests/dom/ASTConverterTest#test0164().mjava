	/**
	 * Test binding for member type declaration
	 */
	public void test0164() throws JavaModelException {
		ICompilationUnit sourceUnit = getCompilationUnit("Converter" , "", "test0164", "Test.java");
		ASTNode result = runConversion(sourceUnit, true);
		ASTNode node = getASTNode((CompilationUnit) result, 0, 0);
		assertNotNull("Expression should not be null", node); //$NON-NLS-1$
		assertTrue("Not an type declaration", node instanceof TypeDeclaration);
		TypeDeclaration typeDeclaration = (TypeDeclaration) node;
		ITypeBinding typeBinding = typeDeclaration.resolveBinding();
		assertNotNull("No binding", typeBinding);
		assertTrue("An anonymous class", !typeBinding.isAnonymous());
		assertEquals("The modifier is not default", Modifier.PRIVATE, typeBinding.getModifiers());
		assertNull("There is no element type", typeBinding.getElementType());
		assertEquals("There is no dimension", 0, typeBinding.getDimensions());
		assertNotNull("This is not a member type", typeBinding.getDeclaringClass());
		assertEquals("The name is not 'B'", "B", typeBinding.getName());
		IMethodBinding[] methods = typeBinding.getDeclaredMethods();
		assertEquals("Contains the default constructor", 1, methods.length);
		assertTrue("A local class", !typeBinding.isLocal());
		assertTrue("Not a nested class", typeBinding.isNested());
		assertTrue("Not a member class", typeBinding.isMember());
		assertTrue("An array", !typeBinding.isArray());
		assertTrue("Not a class", typeBinding.isClass());
		assertTrue("An interface", !typeBinding.isInterface());
		assertTrue("Not from source", typeBinding.isFromSource());
		assertTrue("Is a top level", !typeBinding.isTopLevel());
		assertTrue("A primitive type", !typeBinding.isPrimitive());
		ITypeBinding superclass = typeBinding.getSuperclass();
		assertNotNull("No superclass", superclass);
		assertEquals("Has fields", 0, typeBinding.getDeclaredFields().length);
	}

