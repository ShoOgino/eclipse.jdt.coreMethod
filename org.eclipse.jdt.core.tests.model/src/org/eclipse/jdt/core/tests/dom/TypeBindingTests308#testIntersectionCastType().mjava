	public void testIntersectionCastType() throws CoreException, IOException {
		String contents = 
				"import java.lang.annotation.ElementType;\n" +
						"import java.lang.annotation.Target;\n" +
						"@Target(ElementType.TYPE_USE)\n" +
						"@interface T1 {\n" +
						"}\n" +
						"@Target(ElementType.TYPE_USE)\n" +
						"@interface T2 {\n" +
						"}\n" +
						"@Target(ElementType.TYPE_USE)\n" +
						"@interface T3 {\n" +
						"}\n" +
						"public class X {\n" +
						"	Object o = (@T1 Object & @T2 Runnable & java.io.@T3 Serializable) null;\n" +
						"	Object p = (@T1 Object & @T2 Runnable & java.io.@T3 Serializable) null;\n" +
						"}\n";
		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true);
		ASTNode node = buildAST(contents, this.workingCopy);
		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
		CompilationUnit compilationUnit = (CompilationUnit) node;
		assertProblemsSize(compilationUnit, 0);
		List types = compilationUnit.types();
		assertEquals("Incorrect no of types", 4, types.size());
		TypeDeclaration typeDecl = (TypeDeclaration) types.get(3);
		FieldDeclaration[] fields = typeDecl.getFields();
		assertEquals("Incorrect no of fields", 2, fields.length);
		FieldDeclaration field = fields[0];
		List fragments = field.fragments();
		assertEquals("Incorrect no of fragments", 1, fragments.size());
		VariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);
		CastExpression cast = (CastExpression) fragment.getInitializer();
		Type castType = cast.getType();
		ITypeBinding binding1 = castType.resolveBinding();
		assertEquals("Wrong annotations", "@T1 Object & @T2 Runnable & @T3 Serializable", binding1.toString());
		
		field = fields[1];
		fragments = field.fragments();
		assertEquals("Incorrect no of fragments", 1, fragments.size());
		fragment = (VariableDeclarationFragment) fragments.get(0);
		cast = (CastExpression) fragment.getInitializer();
		castType = cast.getType();
		ITypeBinding binding2 = castType.resolveBinding();
		assertEquals("Wrong annotations", "@T1 Object & @T2 Runnable & @T3 Serializable", binding2.toString());
		assertSame("Should be equal", binding1, binding2);
	}

