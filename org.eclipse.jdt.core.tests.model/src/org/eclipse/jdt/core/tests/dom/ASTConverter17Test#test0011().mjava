	/*
	 * Union types (update for bug 340608)
	 */
	public void test0011() throws JavaModelException {
		String contents =
			"public class X {\n" +
			"    public static void main(String[] args) {\n" +
			"        try {\n" +
			"            int option= 1;\n" +
			"            throw option == 1 ? new ExceptionA() : new ExceptionB();\n" +
			"        } catch (/*final*/ ExceptionA | ExceptionB ex) {\n" +
			"            System.out.println(\"type of ex: \" + ex.getClass());\n" +
			"            // next 2 methods on 'ex' use different parts of lub:\n" +
			"            ex.myMethod();\n" +
			"            throw ex;\n" +
			"        }\n" +
			"    }\n" +
			"}\n" +
			"interface Mix {\n" +
			"    public void myMethod();\n" +
			"}\n" +
			"class ExceptionA extends RuntimeException implements Mix {\n" +
			"    private static final long serialVersionUID = 1L;\n" +
			"    public void myMethod() {\n" +
			"        System.out.println(\"ExceptionA.myMethod()\");\n" +
			"    }\n" +
			"    public void onlyA() {\n" +
			"        System.out.println(\"ExceptionA.onlyA()\");\n" +
			"    }\n" +
			"}\n" +
			"class ExceptionB extends RuntimeException implements Mix {\n" +
			"    private static final long serialVersionUID = 1L;\n" +
			"    public void myMethod() {\n" +
			"        System.out.println(\"ExceptionB.myMethod()\");\n" +
			"    }\n" +
			"    public void onlyB() {\n" +
			"        System.out.println(\"ExceptionA.onlyB()\");\n" +
			"    }\n" +
			"}";
		this.workingCopy = getWorkingCopy("/Converter17/src/X.java", true/*resolve*/);
		this.workingCopy.getBuffer().setContents(contents);
		ASTNode node = runConversion(getJLS4(), this.workingCopy, true);
		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
		CompilationUnit unit = (CompilationUnit) node;
		assertProblemsSize(unit, 0);
		node = getASTNode(unit, 0, 0, 0);
		assertEquals("Not a try statement", ASTNode.TRY_STATEMENT, node.getNodeType());
		TryStatement tryStatement = (TryStatement) node;
		List catchClauses = tryStatement.catchClauses();
		CatchClause clause = (CatchClause) catchClauses.get(0);
		SingleVariableDeclaration exception = clause.getException();
		Type type = exception.getType();
		assertEquals("Not an union type", ASTNode.UNION_TYPE, type.getNodeType());
		checkSourceRange(type, "ExceptionA | ExceptionB", contents);
		ITypeBinding typeBinding = type.resolveBinding();
		assertNotNull("No binding", typeBinding);
		typeBinding = typeBinding.getGenericTypeOfWildcardType();
		assertNull("This should be null for intersection type", typeBinding);
	}

