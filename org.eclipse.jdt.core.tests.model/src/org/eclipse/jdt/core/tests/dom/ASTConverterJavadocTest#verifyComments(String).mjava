	/* (non-Javadoc)
	 * @see junit.framework.TestCase#setUp()
	 */
	protected void verifyComments(String testNbre) throws JavaModelException {
		// Get test file
		ICompilationUnit sourceUnit = getCompilationUnit("Converter" , "src", "javadoc.test"+testNbre, "Test.java"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
		assertNotNull("Test file Converter/src/javadoc/test"+testNbre+"/Test.java was not found!", sourceUnit);

		// Create DOM AST nodes hierarchy
		String sourceStr = sourceUnit.getSource();
		CompilationUnit compilUnit = (CompilationUnit) runConversion(sourceUnit, true); // resolve bindings
		Comment[] unitComments = compilUnit.getCommentTable();

		// Get comments infos from test file
		char[] source = sourceStr.toCharArray();
		setSourceComment(source);
		
		// Basic comments verification
		assertEquals("Wrong number of comments", this.comments.size(), unitComments.length);
		
		// Verify comments positions
//		Enumeration commentStrings = commentsInfo.keys();
//		Enumeration commentTags = commentsInfo.elements();
		for (int i=0; i<unitComments.length; i++) {
			String comment = (String) this.comments.get(i);
			List tags = (List) allTags.get(i);
//			int start = unitComments[i].getStartPosition();
//			assertEquals("Comment at position "+start+" does NOT match source!", comment, sourceStr.substring(start, start+unitComments[i].getLength()));
			if (unitComments[i].isDocComment()) {
				Javadoc docComment = (Javadoc)unitComments[i];
				assertEquals("Invalid tags number! ", tags.size(), allTags(docComment));
				assertEquals("Flattened javadoc does NOT match source!", comment, docComment.toString());
				verifyFragmentsPositions(docComment, source);
				verifyBindings(docComment);
			}
		}
		
		/* Verify each javadoc
		Iterator types = compilUnit.types().listIterator();
		while (types.hasNext()) {
			TypeDeclaration typeDeclaration = (TypeDeclaration) types.next();
			verifyJavadoc(typeDeclaration.getJavadoc());
		}
		*/
	}

