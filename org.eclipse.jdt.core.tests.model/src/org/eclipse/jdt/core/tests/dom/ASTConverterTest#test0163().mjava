	/**
	 * Test binding for anonymous declaration: new java.lang.Object() {}
	 */
	public void test0163() throws JavaModelException {
		ICompilationUnit sourceUnit = getCompilationUnit("Converter" , "", "test0163", "Test.java");
		ASTNode result = runConversion(sourceUnit, true);
		ASTNode expression = getASTNodeToCompare((CompilationUnit) result);
		assertNotNull("Expression should not be null", expression); //$NON-NLS-1$
		assertTrue("Not an anonymous type declaration", expression instanceof ClassInstanceCreation);
		ClassInstanceCreation anonymousClass = (ClassInstanceCreation) expression;
		ITypeBinding typeBinding = anonymousClass.resolveTypeBinding();
		assertNotNull("No binding", typeBinding);
		assertTrue("Not an anonymous class", typeBinding.isAnonymous());
		assertEquals("The modifier is not default", Modifier.NONE, typeBinding.getModifiers());
		assertNull("There is no element type", typeBinding.getElementType());
		assertEquals("There is no dimension", 0, typeBinding.getDimensions());
		assertNotNull("This is a member type", typeBinding.getDeclaringClass());
		assertEquals("The name is not empty", "", typeBinding.getName());
		IMethodBinding[] methods = typeBinding.getDeclaredMethods();
		assertEquals("Contains the default constructor", 1, methods.length);
		assertTrue("Not a local class", typeBinding.isLocal());
		assertTrue("Not a nested class", typeBinding.isNested());
		assertTrue("A member class", !typeBinding.isMember());
		assertTrue("An array", !typeBinding.isArray());
		assertTrue("Not a class", typeBinding.isClass());
		assertTrue("An interface", !typeBinding.isInterface());
		assertTrue("Not from source", typeBinding.isFromSource());
		assertTrue("Is a top level", !typeBinding.isTopLevel());
		assertTrue("A primitive type", !typeBinding.isPrimitive());
		assertEquals("wrong qualified name", "", typeBinding.getQualifiedName());
		ITypeBinding superclass = typeBinding.getSuperclass();
		assertNotNull("No superclass", superclass);
		assertEquals("Has fields", 0, typeBinding.getDeclaredFields().length);
	}

