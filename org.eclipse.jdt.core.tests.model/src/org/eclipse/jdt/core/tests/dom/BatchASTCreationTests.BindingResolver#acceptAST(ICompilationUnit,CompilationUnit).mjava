		public void acceptAST(ICompilationUnit source, CompilationUnit cu) {
			super.acceptAST(source, cu);
			ASTNode node = findNode(cu, this.markerInfos[++this.index]);
			if (node != null && !(node instanceof CompilationUnit)) {
				IBinding binding = null;
				switch (node.getNodeType()) {
					case ASTNode.PACKAGE_DECLARATION:
						binding = ((PackageDeclaration) node).resolveBinding();
						break;
					case ASTNode.TYPE_DECLARATION:
						binding = ((TypeDeclaration) node).resolveBinding();
						break;
					case ASTNode.ANONYMOUS_CLASS_DECLARATION:
						binding = ((AnonymousClassDeclaration) node).resolveBinding();
						break;
					case ASTNode.TYPE_DECLARATION_STATEMENT:
						binding = ((TypeDeclarationStatement) node).resolveBinding();
						break;
					case ASTNode.METHOD_DECLARATION:
						binding = ((MethodDeclaration) node).resolveBinding();
						break;
					case ASTNode.METHOD_INVOCATION:
						binding = ((MethodInvocation) node).resolveMethodBinding();
						break;
					case ASTNode.TYPE_PARAMETER:
						binding = ((TypeParameter) node).resolveBinding();
						break;
				}
				this.bindingKey = binding == null ? null : binding.getKey();
			}
		}

