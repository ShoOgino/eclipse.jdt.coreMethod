		public void acceptAST(ICompilationUnit source, CompilationUnit cu) {
			super.acceptAST(source, cu);
			ASTNode node = findNode(cu, this.markerInfos[++this.index]);
			if (node != null && !(node instanceof CompilationUnit)) {
				IBinding binding = null;
				if (node instanceof PackageDeclaration) {
					binding = ((PackageDeclaration) node).resolveBinding();
				} else if (node instanceof TypeDeclaration) {
					binding = ((TypeDeclaration) node).resolveBinding();
				} else if (node instanceof AnonymousClassDeclaration) {
					binding = ((AnonymousClassDeclaration) node).resolveBinding();
				} else if (node instanceof TypeDeclarationStatement) {
					binding = ((TypeDeclarationStatement) node).resolveBinding();
				} else if (node instanceof MethodDeclaration) {
					binding = ((MethodDeclaration) node).resolveBinding();
				} else if (node instanceof MethodInvocation) {
					binding = ((MethodInvocation) node).resolveMethodBinding();
				}
				this.bindingKey = binding == null ? null : binding.getKey();
			}
		}

