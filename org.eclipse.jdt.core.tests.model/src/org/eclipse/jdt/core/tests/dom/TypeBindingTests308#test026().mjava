	public void test026() throws Exception {
		String contents =
				"interface I {\n" +
				"    void foo(int x);\n" +
				"}\n" +
				"public class X  {\n" +
				"    public static void main(String [] args) {\n" +
				"        I i = A.Y.@Marker Z ::foo;\n" +
				"        i.foo(10); \n" +
				"    }\n" +
				"}\n" +
				"class A {\n" +
				"  static class Y {\n" +
				"    static class Z {\n" +
				"        public static void foo(int x) {\n" +
				"	        System.out.println(x);\n" +
				"        }\n" +
				"    }\n" +
				"  }\n" +
				"}\n" +
				"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
				"@interface Marker {}\n";

		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true);
		ASTNode node = buildAST(contents, this.workingCopy);
		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
		CompilationUnit compilationUnit = (CompilationUnit) node;
		assertProblemsSize(compilationUnit, 0);
		List types = compilationUnit.types();
		assertEquals("Incorrect no of types", 4, types.size());
		TypeDeclaration typeDecl = (TypeDeclaration) types.get(1);
		MethodDeclaration method = typeDecl.getMethods()[0];
		List statements = method.getBody().statements();

		VariableDeclarationStatement stmt = (VariableDeclarationStatement) statements.get(0);
		VariableDeclarationFragment fragment = (VariableDeclarationFragment) stmt.fragments().get(0);
		TypeMethodReference lambda = (TypeMethodReference) fragment.getInitializer();
		Type type = lambda.getType();

		verifyAnnotationOnType(type, new String[]{"@Marker()"});
	}

