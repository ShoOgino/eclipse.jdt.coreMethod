	public void test015() throws Exception {
		String contents = 
				"public class X {\n" +
				"	void foo(Map<@Marker ? super @Marker2 Object, @Marker3 ? extends @Marker4 String> m){}\n" +
				"   void goo(Map<@Marker4 ? extends @Marker3 Object, @Marker2 ? super @Marker String> m){}\n" +
				"}\n" +
				"class Map<K, V>{}\n" +
				"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
				"@interface Marker {}\n" +
				"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
				"@interface Marker2 {}\n" +
				"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
				"@interface Marker3 {}\n" +
				"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
				"@interface Marker4 {}\n";

		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true/*resolve*/);
		ASTNode node = buildAST(contents, this.workingCopy);
		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
		CompilationUnit compilationUnit = (CompilationUnit) node;
		assertProblemsSize(compilationUnit, 0);
		List types = compilationUnit.types();
		assertEquals("Incorrect no of types", 6, types.size());
		
		MethodDeclaration[] methods = ((TypeDeclaration) types.get(0)).getMethods();
		assertEquals("Incorrect no of metods", 2, methods.length);
		MethodDeclaration method = methods[0];
		SingleVariableDeclaration arg = (SingleVariableDeclaration) method.parameters().get(0);
		
		
		List typeArgs = ((ParameterizedType) arg.getType()).typeArguments();
		
		WildcardType wildcard = (WildcardType) typeArgs.get(0);
		verifyAnnotationOnType(wildcard, new String[]{"@Marker()"});
		Type type = wildcard.getBound();
		verifyAnnotationOnType(type, new String[]{"@Marker2()"});

		wildcard = (WildcardType) typeArgs.get(1);
		verifyAnnotationOnType(wildcard, new String[]{"@Marker3()"});
		type = wildcard.getBound();
		verifyAnnotationOnType(type, new String[]{"@Marker4()"});
		
		method = methods[1];
		arg = (SingleVariableDeclaration) method.parameters().get(0);
		typeArgs = ((ParameterizedType) arg.getType()).typeArguments();

		wildcard = (WildcardType) typeArgs.get(0);
		verifyAnnotationOnType(wildcard, new String[]{"@Marker4()"});
		type = wildcard.getBound();
		verifyAnnotationOnType(type, new String[]{"@Marker3()"});

		wildcard = (WildcardType) typeArgs.get(1);
		verifyAnnotationOnType(wildcard, new String[]{"@Marker2()"});
		type = wildcard.getBound();
		verifyAnnotationOnType(type, new String[]{"@Marker()"});
	}

