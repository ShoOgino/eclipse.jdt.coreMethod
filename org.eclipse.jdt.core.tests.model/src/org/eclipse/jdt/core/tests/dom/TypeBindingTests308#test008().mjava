	public void test008() throws Exception {
		String contents = 
				"public class X {\n" +
						"    int x() {\n" +
						"        for (@Marker int i: new int[3]) {}\n" +
						"        for (final @Marker int i: new int[3]) {}\n" +
						"        for (@Marker final int i: new int[3]) {}\n" +
						"        return 10;\n" +
						"    }\n" +
						"}\n" +
						"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
						"@interface Marker {}\n";

		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true/*resolve*/);
		ASTNode node = buildAST(contents, this.workingCopy);
		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
		CompilationUnit compilationUnit = (CompilationUnit) node;
		assertProblemsSize(compilationUnit, 0);
		List types = compilationUnit.types();
		assertEquals("Incorrect no of types", 2, types.size());
		TypeDeclaration typeDecl = (TypeDeclaration) types.get(0);
		MethodDeclaration[] methods = typeDecl.getMethods();
		assertEquals("Incorrect method", 1, methods.length);
		MethodDeclaration method = methods[0];
		List statements = method.getBody().statements();
		EnhancedForStatement forStmt = (EnhancedForStatement) statements.get(0);
		SingleVariableDeclaration param = forStmt.getParameter();
		Type type = param.getType();
		assertNotNull("Resource type should not be null", type);
		ITypeBinding binding = param.resolveBinding().getType();
		verifyAnnotationsOnBinding(binding, new String[]{"@Marker()"});
		binding = type.resolveBinding();
		verifyAnnotationsOnBinding(binding, new String[]{"@Marker()"});
	}	

