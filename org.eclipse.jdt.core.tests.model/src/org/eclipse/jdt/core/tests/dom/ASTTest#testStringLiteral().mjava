	public void testStringLiteral() {
		long previousCount = ast.modificationCount();
		// check 0-arg factory first
		StringLiteral x = ast.newStringLiteral();
		assertTrue(ast.modificationCount() > previousCount);
		assertTrue(x instanceof Expression);
		assertTrue(x.getAST() == ast);
		assertTrue(x.getParent() == null);
		assertTrue("\"\"".equals(x.getEscapedValue()));
		assertTrue("".equals(x.getLiteralValue()));
		assertTrue(x.getNodeType() == ASTNode.STRING_LITERAL);
		
		previousCount = ast.modificationCount();
		x.setEscapedValue("\"bye\"");
		assertTrue(ast.modificationCount() > previousCount);
		assertTrue("\"bye\"".equals(x.getEscapedValue()));
		assertTrue("bye".equals(x.getLiteralValue()));

		previousCount = ast.modificationCount();
		x.setLiteralValue("hi");
		assertTrue(ast.modificationCount() > previousCount);
		assertTrue("\"hi\"".equals(x.getEscapedValue()));
		assertTrue("hi".equals(x.getLiteralValue()));

		// check that property cannot be set to null
		try {
			x.setEscapedValue(null);
			assertTrue(false);
		} catch (RuntimeException e) {
			// pass
		}

		// check that property cannot be set to null
		try {
			x.setLiteralValue(null);
			assertTrue(false);
		} catch (RuntimeException e) {
			// pass
		}
	}		

