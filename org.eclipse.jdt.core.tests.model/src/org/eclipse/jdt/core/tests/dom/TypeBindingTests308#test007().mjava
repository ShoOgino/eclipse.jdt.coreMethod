	public void test007() throws Exception {
		String contents = 
				"package java.lang;\n" +
				"public class X {\n" +
				"    public void x() throws Exception {\n" +
				"        try (@Marker LocalStream p = null; final @Marker2 LocalStream q = null; @Marker3 final LocalStream r = null) {}\n" +
				"    }\n" +
				"}\n" +
				"class LocalStream implements AutoCloseable {\n" +
				"    public void close() throws Exception {}\n" +
				"}\n" +
				"interface AutoCloseable {}\n" +
				"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
				"@interface Marker {}\n" +
				"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
				"@interface Marker2 {}\n" +
				"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
				"@interface Marker3 {}\n";

		this.workingCopy = getWorkingCopy("/Converter18/src/java/lang/X.java", true/*resolve*/);
		ASTNode node = buildAST(contents, this.workingCopy);
		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
		CompilationUnit compilationUnit = (CompilationUnit) node;
		assertProblemsSize(compilationUnit, 0);
		List types = compilationUnit.types();
		assertEquals("Incorrect no of types", 6, types.size());
		TypeDeclaration typeDecl = (TypeDeclaration) types.get(0);
		MethodDeclaration[] methods = typeDecl.getMethods();
		assertEquals("Incorrect method", 1, methods.length);
		MethodDeclaration method = methods[0];
		List statements = method.getBody().statements();
		TryStatement trySt = (TryStatement) statements.get(0);
		List resources = trySt.resources();
		assertEquals("Incorrect no of resources", 3, resources.size());
		VariableDeclarationExpression resource = (VariableDeclarationExpression) resources.get(0);
		Type type = resource.getType();
		assertNotNull("Resource type should not be null", type);
		verifyAnnotationOnType(type, new String[]{"@Marker()"});
		
		resource = (VariableDeclarationExpression) resources.get(1);
		type = resource.getType();
		assertNotNull("Resource type should not be null", type);
		verifyAnnotationOnType(type, new String[]{"@Marker2()"});
		
		resource = (VariableDeclarationExpression) resources.get(2);
		type = resource.getType();
		assertNotNull("Resource type should not be null", type);
		verifyAnnotationOnType(type, new String[]{"@Marker3()"});
	}

