	/**
	 * QualifiedName
	 */
	public void test0227() throws JavaModelException {
		ICompilationUnit sourceUnit = getCompilationUnit("Converter" , "", "test0227", "Test.java");
		char[] source = sourceUnit.getSource().toCharArray();
		ASTNode result = runConversion(sourceUnit, true);
		ASTNode node2 = getASTNode((CompilationUnit) result, 3, 2, 0);
		assertTrue("ReturnStatement", node2 instanceof ReturnStatement);
		ReturnStatement returnStatement = (ReturnStatement) node2;
		Expression expr = returnStatement.getExpression();
		assertTrue("Not a qualifiedName", expr instanceof QualifiedName);
		QualifiedName qualifiedName = (QualifiedName) expr;
		ITypeBinding typeBinding = expr.resolveTypeBinding();
		assertNotNull("No type binding", typeBinding);
		assertEquals("Not an long (typeBinding)", "long", typeBinding.getName());
		checkSourceRange(qualifiedName, "field.fB.fA.j", source);

		SimpleName simpleName = qualifiedName.getName();
		checkSourceRange(simpleName, "j", source);
		ITypeBinding typeBinding2 = simpleName.resolveTypeBinding();
		assertEquals("Not an long (typeBinding2)", "long", typeBinding2.getName());
		IBinding binding = simpleName.resolveBinding();
		assertNotNull("No binding", binding);
		assertTrue("VariableBinding", binding instanceof IVariableBinding);
		IVariableBinding variableBinding = (IVariableBinding) binding;
		assertEquals("Not A", "A", variableBinding.getDeclaringClass().getName());
		assertEquals("Not default", Modifier.NONE, variableBinding.getModifiers());
		assertEquals("wrong name", "j", variableBinding.getName());

		Name qualifierName = qualifiedName.getQualifier();
		assertTrue("Not a qualified name", qualifierName.isQualifiedName());
		checkSourceRange(qualifierName, "field.fB.fA", source);
		qualifiedName = (QualifiedName) qualifierName;
		ITypeBinding typeBinding3 = qualifiedName.resolveTypeBinding();
		assertNotNull("No type binding3", typeBinding3);
		assertEquals("Not an A", "A", typeBinding3.getName());
		simpleName = qualifiedName.getName();
		checkSourceRange(simpleName, "fA", source);
		ITypeBinding typeBinding4 = simpleName.resolveTypeBinding();
		assertNotNull("No typeBinding4", typeBinding4);
		assertEquals("Not an A", "A", typeBinding4.getName());
		IBinding binding2 = qualifiedName.resolveBinding();
		assertNotNull("No binding2", binding2);
		assertTrue("VariableBinding", binding2 instanceof IVariableBinding);
		IVariableBinding variableBinding2 = (IVariableBinding) binding2;
		assertEquals("Not B", "B", variableBinding2.getDeclaringClass().getName());
		assertEquals("Not default", Modifier.NONE, variableBinding2.getModifiers());
		assertEquals("wrong name", "fA", variableBinding2.getName());
		
		qualifierName = qualifiedName.getQualifier();
		assertTrue("Not a qualified name", qualifierName.isQualifiedName());
		checkSourceRange(qualifierName, "field.fB", source);
		qualifiedName = (QualifiedName) qualifierName;
		ITypeBinding typeBinding5 = qualifiedName.resolveTypeBinding();
		assertNotNull("No typeBinding5", typeBinding5);
		assertEquals("Not a B", "B", typeBinding5.getName());
		simpleName = qualifiedName.getName();
		checkSourceRange(simpleName, "fB", source);
		ITypeBinding typeBinding6 = simpleName.resolveTypeBinding();
		assertNotNull("No typebinding6", typeBinding6);
		assertEquals("not a B", "B", typeBinding6.getName());
		IBinding binding3 = qualifiedName.resolveBinding();
		assertNotNull("No binding2", binding3);
		assertTrue("VariableBinding", binding3 instanceof IVariableBinding);
		IVariableBinding variableBinding3 = (IVariableBinding) binding3;
		assertEquals("Not C", "C", variableBinding3.getDeclaringClass().getName());
		assertEquals("Not default", Modifier.NONE, variableBinding3.getModifiers());
		assertEquals("wrong name", "fB", variableBinding3.getName());
		
		qualifierName = qualifiedName.getQualifier();
		assertTrue("Not a simple name", qualifierName.isSimpleName());
		checkSourceRange(qualifierName, "field", source);
		simpleName = (SimpleName) qualifierName;
		ITypeBinding typeBinding7 = simpleName.resolveTypeBinding();
		assertNotNull("No typeBinding7", typeBinding7);
		assertEquals("Not a C", "C", typeBinding7.getName());
		IBinding binding4 = simpleName.resolveBinding();
		assertNotNull("No binding4", binding4);
		assertTrue("VariableBinding", binding4 instanceof IVariableBinding);
		IVariableBinding variableBinding4 = (IVariableBinding) binding4;
		assertEquals("Not Test", "Test", variableBinding4.getDeclaringClass().getName());
		assertEquals("Not public", Modifier.PUBLIC, variableBinding4.getModifiers());
		assertEquals("wrong name", "field", variableBinding4.getName());
		assertEquals("wrong return type", "C", variableBinding4.getType().getName());
	}

