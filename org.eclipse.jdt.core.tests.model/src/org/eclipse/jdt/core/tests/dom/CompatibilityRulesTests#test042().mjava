	/*
	 * Ensures that a method with different paramter types is not a subsignature of its super method.
	 * (regression test for bug 111093 More problems with IMethodBinding#isSubsignature(..))
	 */
	public void test042() throws JavaModelException {
		IMethodBinding[] bindings = createMethodBindings(
			new String[] {
				"/P/p1/A.java",
				"package p1;\n" +
				"public abstract class A<T> {\n" + 
				"  void g2 (T t) {\n" + 
				"  }\n" + 
				"}\n" + 
				"class B extends A<List<Number>> {\n" + 
				"  void g2 (List<Number> t) {\n" + 
				"  }\n" + 
				"}\n" + 
				"class List<T> {\n" + 
				"}\n" +
				"class Number {\n" +
				"}",
			},
			new String[] {
				"Lp1/A~B;.g2(Lp1/List<Lp1/Number;>;)V"
			});	
		ITypeBinding superType = bindings[0].getDeclaringClass().getSuperclass(); // parameterized type
		IMethodBinding ag2 = superType.getDeclaredMethods()[1];
		assertTrue("B#g2() should be a subsignature of A#g2()", bindings[0].isSubsignature(ag2));
	}

