    /**
     * The last value passed to this method in the body of a testXXX method
     * will be used to determine whether or not the presence of non-OK status objects
     * in the log should fail the test. If the logged number of non-OK status objects
     * differs from the last value passed, the test is failed. If this method is not called
     * at all, the expected number defaults to zero.
     * @param count the expected number of logged error and warning messages
     */
    public void setExpectedNumberOfLoggedNonOKStatusObjects(int count) {
    	fExpectedLoggedNonOK= count;
    }
//
//    /**
//     * Some test steps need synchronizing against a CModel event. This class
//     * is a very basic means of doing that.
//     */
//    static protected class ModelJoiner implements IElementChangedListener {
//		private final boolean[] changed= new boolean[1];
//
//		public ModelJoiner() {
//			CoreModel.getDefault().addElementChangedListener(this);
//		}
//
//		public void clear() {
//			synchronized (changed) {
//				changed[0]= false;
//				changed.notifyAll();
//			}
//		}
//
//		public void join() throws CoreException {
//			try {
//				synchronized(changed) {
//					while (!changed[0]) {
//						changed.wait();
//					}
//				}
//			} catch (InterruptedException e) {
//				throw new CoreException(CCorePlugin.createStatus("Interrupted", e));
//			}
//		}
//
//		public void dispose() {
//			CoreModel.getDefault().removeElementChangedListener(this);
//		}
//
//		@Override
//		public void elementChanged(ElementChangedEvent event) {
//			// Only respond to post change events
//			if (event.getType() != ElementChangedEvent.POST_CHANGE)
//				return;
//
//			synchronized (changed) {
//				changed[0]= true;
//				changed.notifyAll();
//			}
//		}
//	}

