	/**
	 * Tests that if there are multiple free blocks of different sizes and of
	 * exactly one of the requested size, that one is always selected.
	 */
	public void testBestBlockIsAlwaysSelected() throws Exception {
		int[] sizes = { 11, 2, 6, 1, 9, 10, 7, 8, 12, 20, 15, 3 };
		long[] pointers = new long[sizes.length];

		for (int idx = 0; idx < sizes.length; idx++) {
			pointers[idx] = mallocChunks(sizes[idx]);
			mallocChunks(1);
		}

		int chunkCount = this.db.getChunkCount();

		for (int idx = 0; idx < pointers.length; idx++) {
			free(pointers[idx]);
		}

		for (int idx = 0; idx < sizes.length; idx++) {
			long nextPointer = mallocChunks(sizes[idx]);
			assertEquals("Returned wrong pointer for malloc of " + sizes[idx] + " chunks", pointers[idx], nextPointer);
			assertEquals("A chunk should have been reused", chunkCount, this.db.getChunkCount());
		}
	}

