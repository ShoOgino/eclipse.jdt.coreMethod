/*
 * Returns a new classpath from the given folders and their respective exclusion/inclusion patterns.
 * The folder path is an absolute workspace-relative path. If the given project name is non-null, 
 * the folder path is considered a project path if it has 1 segment that is different from the project name.
 * The given array as the following form:
 * [<folder>, "<pattern>[|<pattern]*"]*
 * E.g. new String[] {
 *   "/P/src1", "p/A.java",
 *   "/P", "*.txt|com.tests/**"
 * }
 */
protected IClasspathEntry[] createClasspath(String projectName, String[] foldersAndPatterns, boolean hasInclusionPatterns, boolean hasExclusionPatterns) {
	int length = foldersAndPatterns.length;
	int increment = 1;
	if (hasInclusionPatterns) increment++;
	if (hasExclusionPatterns) increment++;
	IClasspathEntry[] classpath = new IClasspathEntry[length/increment];
	for (int i = 0; i < length; i+=increment) {
		String src = foldersAndPatterns[i];
		IPath[] inclusionPatternPaths = new IPath[0];
		if (hasInclusionPatterns) {
			String patterns = foldersAndPatterns[i+1];
			StringTokenizer tokenizer = new StringTokenizer(patterns, "|");
			int patternsCount =  tokenizer.countTokens();
			inclusionPatternPaths = new IPath[patternsCount];
			for (int j = 0; j < patternsCount; j++) {
				inclusionPatternPaths[j] = new Path(tokenizer.nextToken());
			}
		}
		IPath[] exclusionPatternPaths = new IPath[0];
		if (hasExclusionPatterns) {
			String patterns = foldersAndPatterns[i+increment-1];
			StringTokenizer tokenizer = new StringTokenizer(patterns, "|");
			int patternsCount =  tokenizer.countTokens();
			exclusionPatternPaths = new IPath[patternsCount];
			for (int j = 0; j < patternsCount; j++) {
				exclusionPatternPaths[j] = new Path(tokenizer.nextToken());
			}
		}
		IPath folderPath = new Path(src);
		if (projectName != null && folderPath.segmentCount() == 1 && !projectName.equals(folderPath.lastSegment())) {
			classpath[i/increment] = JavaCore.newProjectEntry(folderPath, inclusionPatternPaths, exclusionPatternPaths, false); 
		} else {
			classpath[i/increment] = JavaCore.newSourceEntry(folderPath, inclusionPatternPaths, exclusionPatternPaths, null); 
		}
	}
	return classpath;
}

