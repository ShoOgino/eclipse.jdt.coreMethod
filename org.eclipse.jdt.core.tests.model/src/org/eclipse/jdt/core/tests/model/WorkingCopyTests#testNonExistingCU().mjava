/**
 * Creates a working copy on a non-existing compilation unit.
 * (regression test for bug 8921  DCR - Need a way to create a working copy ignoring existing files)
 */
public void testNonExistingCU() throws JavaModelException {
	ICompilationUnit cu = this.getCompilationUnit("P/src/x/y/NonExisting.java");
	IWorkingCopy copy = null;
	try {
		// getBuffer()
		copy = (IWorkingCopy)cu.getWorkingCopy();
		assertSourceEquals("Buffer should be empty", "", ((IOpenable)copy).getBuffer().getContents());
		
		// exists()
		assertTrue("Working copy should exists", ((IJavaElement)copy).exists());
		
		// getCorrespondingResource()
		assertEquals("Corresponding resource should be null", null, ((IJavaElement)copy).getCorrespondingResource());
		
		// getOriginalElement()
		assertEquals("Unexpected orginal element", cu, copy.getOriginalElement());
		
		// getPath()
		assertEquals("Unexpected path", new Path("/P/src/x/y/NonExisting.java"), ((IJavaElement)copy).getPath());
		
		// getResource()
		assertEquals("Unexpected resource", null, ((IJavaElement)copy).getResource());
		
		// isConsistent()
		assertTrue("Working copy should be consistent", ((IOpenable)copy).isConsistent());
		
		// restore()
		boolean exception = false;
		try {
			copy.restore();
		} catch (JavaModelException e) {
			exception = true;
		}
		assertTrue("Should not be able to restore from original element", exception);
		
		// makeConsistent()
		((IOpenable)copy).getBuffer().setContents(
			"public class X {\n" +
			"}");
		assertTrue("Working copy should not be consistent", !((IOpenable)copy).isConsistent());
		((IOpenable)copy).makeConsistent(null);
		assertTrue("Working copy should be consistent", ((IOpenable)copy).isConsistent());
		
		// save()
		((IOpenable)copy).getBuffer().setContents(
			"public class Y {\n" +
			"}");
		((IOpenable)copy).save(null, false);
		assertTrue("Working copy should be consistent after save", ((IOpenable)copy).isConsistent());
		assertTrue("Original cu should not exist", !cu.exists());
		
		// commit()
		copy.commit(false, null);
		assertTrue("Original cu should exist", cu.exists());

		// isBasedOn()
		assertTrue("Working copy should not be based on original resource", !copy.isBasedOn(cu.getResource()));
		
	} finally {
		if (copy != null) {
			copy.destroy();
		}
		if (cu.exists()) {
			cu.delete(true, null);
		}
	}
}

