	// Test implicitly permitted sub types in binary
	public void test006() throws Exception {
		String[] permitted = new String[] {"p.X", "p.Y"};
		try {
			String[] sources = {
					"p/X.java",
					"package p;\n;" +
							"sealed interface I {}\n" +
							"public non-sealed class X implements I {}\n" +
							"non-sealed interface Y extends I {}\n"
			};
			String outputDirectory = Util.getOutputDirectory();

			String jarPath = outputDirectory + File.separator + "sealed.jar";
			Util.createJar(sources, jarPath, "15", true);

			IJavaProject project = createJavaProject("SealedTypes");
			addClasspathEntry(project, JavaCore.newLibraryEntry(new Path(jarPath), null, null, null, null, false));
			project.open(null);
			project.getProject().build(IncrementalProjectBuilder.FULL_BUILD, null);
			IPackageFragmentRoot[] roots = project.getPackageFragmentRoots();
			IPackageFragmentRoot root = null;
			for (IPackageFragmentRoot iRoot : roots) {
				if (iRoot.getRawClasspathEntry().getPath().toString().endsWith("sealed.jar")) {
					root = iRoot;
				}
			}
			assertNotNull("root should not be null", root);
			IPackageFragment packageFragment = root.getPackageFragment("p");
			assertNotNull("package is null", packageFragment);
			IOrdinaryClassFile classFile = packageFragment.getOrdinaryClassFile("I.class");
			assertNotNull("class is null", classFile);
			IType type = classFile.getType();
			assertNotNull("type is null", type);
			String[] permittedSubtypeNames = type.getPermittedSubtypeNames();
			assertEquals("incorrect permitted sub types", permitted.length, permittedSubtypeNames.length);
			for (int i = 0; i < permitted.length; i++) {
				assertEquals("incorrect permitted sub type", permitted[i], permittedSubtypeNames[i]);
			}
			assertTrue("modifier should contain sealed", type.isSealed());

			classFile = packageFragment.getOrdinaryClassFile("X.class");
			assertNotNull("class is null", classFile);
			type = classFile.getType();
			assertNotNull("type is null", type);
			permittedSubtypeNames = type.getPermittedSubtypeNames();
			assertEquals("incorrect permitted sub types", 0, permittedSubtypeNames.length);
			assertFalse("modifier should not contain sealed", type.isSealed());

			classFile = packageFragment.getOrdinaryClassFile("Y.class");
			assertNotNull("class is null", classFile);
			type = classFile.getType();
			assertNotNull("type is null", type);
			permittedSubtypeNames = type.getPermittedSubtypeNames();
			assertEquals("incorrect permitted sub types", 0, permittedSubtypeNames.length);
			assertFalse("modifier should not contain sealed", type.isSealed());
		}
		finally {
			deleteProject("SealedTypes");
		}
	}

