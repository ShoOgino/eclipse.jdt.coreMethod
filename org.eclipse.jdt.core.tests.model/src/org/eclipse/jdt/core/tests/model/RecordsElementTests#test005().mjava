	// Test record with compact canonical constructor
	public void test005() throws Exception {
		try {
			this.workingCopies = new ICompilationUnit[1];
			IJavaProject project = createJavaProject("RecordsElement");
			project.open(null);
			String fileContent =  "public record Point(int x1, int x2) {\n" +
					"	public Point {\n" +
					"		x1 = 1;\n" +
					"	}\n" +
					"}\n";
			createFile(	"/RecordsElement/src/X.java",	fileContent);
			ICompilationUnit unit = getCompilationUnit("/RecordsElement/src/X.java");
			IType[] types = unit.getTypes();
			assertEquals("Incorret no of types", 1, types.length);
			assertTrue("type should be a record", types[0].isRecord());
			assertEquals("type should be a record", IJavaElement.TYPE, types[0].getElementType());
			IMethod[] methods = types[0].getMethods();
			assertNotNull("should not be null", methods);
			assertEquals("Incorret no of elements", 1, methods.length);
			IMethod constructor = methods[0];
			assertTrue("should be a constructor", constructor.isConstructor());
			//assertTrue("should be a canonical constructor", constructor.isCanonicalConstructor());
			assertEquals("incorrect number of parameters", 2, constructor.getNumberOfParameters());
			String[] parameterNames = constructor.getParameterNames();
			assertEquals("incorrect numer of names", 2, parameterNames.length);
			assertEquals("incorrect parameter names", "x1", parameterNames[0]);
			assertEquals("incorrect parameter names", "x2", parameterNames[1]);

			this.workingCopies[0] = getWorkingCopy("/RecordsElement/src/X.java", fileContent);
			// Test code select
			String str = this.workingCopies[0].getSource();
			String selection = "x1";
			int start = str.lastIndexOf(selection);
			int length = selection.length();

			IJavaElement[] elements = this.workingCopies[0].codeSelect(start, length);
			assertEquals("Incorret no of types", 1, elements.length);
			IJavaElement element = elements[0];
			assertEquals("type should be a record", IJavaElement.LOCAL_VARIABLE, element.getElementType());
			element = element.getParent();
			assertNotNull("should not be null", element);
			// unlike constructors whose parameters are explicitly declared,
			// in case of compact constructors, the element is attached as a child of
			// the field that represents the record component.
			assertEquals("should be a method", IJavaElement.FIELD, element.getElementType());
		}
		finally {
			deleteProject("RecordsElement");
		}
	}

