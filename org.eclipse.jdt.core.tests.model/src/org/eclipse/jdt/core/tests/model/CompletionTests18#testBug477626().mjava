public void testBug477626() throws Exception {
	this.workingCopies = new ICompilationUnit[1];
	this.workingCopies[0] = getWorkingCopy(
			"/Completion/src/p/Snippet29.java",
			"package p;\n" +
			"import java.util.Arrays;\n" + 
			"import java.util.function.Consumer;\n" + 
			"\n" + 
			"public class Snippet29 {\n" + 
			"\n" + 
			"class Display {\n" + 
			"	public void asyncExec(Runnable runnable) { }\n" + 
			"}\n" + 
			"class Shell {\n" + 
			"	Shell(Display display) {}\n" + 
			"	public Shell(Shell shell, int i) { }\n" + 
			"	public void setLayout(GridLayout gridLayout) { }\n" + 
			"	public void setText(String string) { }\n" + 
			"	public void pack() { }\n" + 
			"	public Point getLocation() { return null; }\n" + 
			"	public void open() { }\n" + 
			"	public void close() { }\n" + 
			"	public void setLocation(int i, int j) { }\n" + 
			"}\n" + 
			"class Point {\n" + 
			"	int x, y;\n" + 
			"}\n" + 
			"class GridLayout {\n" + 
			"	public GridLayout() { }\n" + 
			"	public GridLayout(int i, boolean b) { }\n" + 
			"}\n" + 
			"class GridData {\n" + 
			"	public GridData(int fill, int fill2, boolean b, boolean c, int i, int j) { }\n" + 
			"	public GridData(int fill, int fill2, boolean b, boolean c) { }\n" + 
			"}\n" + 
			"class Widget {\n" + 
			"	public void setText(String string) { }\n" + 
			"	public void setLayoutData(GridData gridData) { }\n" + 
			"}\n" + 
			"class Button extends Widget {\n" + 
			"	Button(Shell shell, int style) { }\n" + 
			"	public void addListener(int selection, Consumer<Event> listener) { }\n" + 
			"}\n" + 
			"class Label extends Widget {\n" + 
			"	public Label(Shell dialog, int none) { }\n" + 
			"}\n" + 
			"class Event {}\n" + 
			"class SWT {\n" + 
			"	public static final int PUSH = 1;\n" + 
			"	public static final int Selection = 2;\n" + 
			"	protected static final int DIALOG_TRIM = 3;\n" + 
			"	protected static final int APPLICATION_MODAL = 4;\n" + 
			"	protected static final int NONE = 5;\n" + 
			"	protected static final int FILL = 6;\n" + 
			"}\n" + 
			"class Timer {\n" + 
			"	public void schedule(TimerTask timerTask, int i) { }\n" + 
			"}\n" + 
			"abstract class TimerTask implements Runnable {}\n" + 
			"public static void main (String [] args) {\n" + 
			"	Display display = new Display ();\n" + 
			"	Shell shell = new Shell (display);\n" + 
			"	shell.setLayout(new GridLayout());\n" + 
			"	Button b = new Button(shell, SWT.PUSH);\n" + 
			"	b.setText(\"Open dialog in 3s\");\n" + 
			"	b.addListener(SWT.Selection, e -> {\n" + 
			"		new Timer().schedule(new TimerTask() {\n" + 
			"			@Override\n" + 
			"			public void run() {\n" + 
			"				display.asyncExec(new Runnable() {\n" + 
			"					@Override\n" + 
			"					public void run() {\n" + 
			"						Shell dialog = new Shell(shell, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);\n" + 
			"						dialog.setText(\"Question\");\n" + 
			"						dialog.setLayout(new GridLayout(3, true));\n" + 
			"						Label label = new Label(dialog, SWT.NONE);\n" + 
			"						label.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 3, 1));\n" + 
			"						label.setText(\"Do you really want to clear the runtime workspace?\");\n" + 
			"						Arrays.asList(\"Yes\", \"No\", \"Cancel\").forEach(t -> {\n" + 
			"							Button button = new Button(dialog, SWT.PUSH);\n" + 
			"							button.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n" + 
			"							button.setText(t);\n" + 
			"							button.addListener(SWT.Selection, e -> { dialog.close(); });\n" + 
			"						});\n" + 
			"						dialog.pack();\n" + 
			"						dialog.setLocation(shell.getLocation().x + 40, shell.getLocation().y + 80);\n" + 
			"						dialog.open();\n" + 
			"					}\n" + 
			"				}).;\n" + 
			"			}\n" + 
			"		}, 2000);\n" + 
			"	});\n" + 
			"}\n" + 
			"\n" + 
			"} \n");

	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
	String str = this.workingCopies[0].getSource();
	String completeBehind = "}).";
	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
	this.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);

	assertResults(
			"",
			requestor.getResults());
}

