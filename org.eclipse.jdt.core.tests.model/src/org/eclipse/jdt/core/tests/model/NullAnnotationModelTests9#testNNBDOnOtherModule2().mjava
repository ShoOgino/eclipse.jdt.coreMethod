	// assert that @NonNullByDefault on module mod.one is respected when regarding its API from another module
	// - binary module
	public void testNNBDOnOtherModule2() throws CoreException, InterruptedException, IOException {
		IJavaProject p = null;
		IJavaProject p2 = null;
    	try {
			p2 =  createJavaProject("mod.two", new String[] {"src"}, new String[] {"JCL19_LIB"}, "bin", "9");

			Map<String,String> options = new HashMap<>();
    		options.put(JavaCore.COMPILER_ANNOTATION_NULL_ANALYSIS, JavaCore.ENABLED);
    		createJar(new String[] {
    				"/mod.one/src/module-info.java",
					"@org.eclipse.jdt.annotation.NonNullByDefault\n" +
					"module mod.one {\n" +
					"	requires org.eclipse.jdt.annotation;\n" +
					"	exports p.q;\n" +
					"}\n",
					"/mod.one/src/p/q/API.java",
					"package p.q;\n" +
					"public class API {\n" +
					"	public String id(String in) { return in; }\n" +
					"}\n"
    			},
				p2.getProject().getLocation().append("mod.one.jar").toOSString(),
    			new String[] {this.ANNOTATION_LIB},
    			"9",
    			options);
    		p2.getResource().refreshLocal(1, null);
			
			IClasspathAttribute[] attr = { JavaCore.newClasspathAttribute(IClasspathAttribute.MODULE, "true") };
			addClasspathEntry(p2, JavaCore.newLibraryEntry(new Path("/mod.two/mod.one.jar"), null, null, null, attr, false));
			addClasspathEntry(p2, JavaCore.newLibraryEntry(new Path(this.ANNOTATION_LIB), null, null, null, attr, false));
			p2.setOption(JavaCore.COMPILER_ANNOTATION_NULL_ANALYSIS, JavaCore.ENABLED);

			createFolder("/mod.two/src/client");
			createFile("/mod.two/src/module-info.java",
					"module mod.two {\n" +
					"		requires static org.eclipse.jdt.annotation;\n" +
					"		requires mod.one;\n" +
					"}\n");
			String clientSource =
					"package client;\n" +
					"import p.q.API;\n" +
					"public class Client {\n" +
					"    	void foo(API api) {\n" +
					"        api.id(api.id(\"\")); // OK\n" +
					"        api.id(null); // NOK\n" +
					"    	}\n" +
					"}\n";
			createFile("/mod.two/src/client/Client.java", clientSource);
			
			// full build:
			getWorkspace().build(IncrementalProjectBuilder.FULL_BUILD, null);
			IMarker[] markers = p2.getProject().findMarkers(null, true, IResource.DEPTH_INFINITE);
			assertMarkers("Unexpected markers in mod.one", 
					"Null type mismatch: required \'@NonNull String\' but the provided value is null",
					markers);

			// reconcile:
			this.problemRequestor.initialize(clientSource.toCharArray());
			getCompilationUnit("/mod.two/src/client/Client.java").getWorkingCopy(this.wcOwner, null);

			assertProblems("Unexpected problems",
					"----------\n" +
					"1. ERROR in /mod.two/src/client/Client.java (at line 6)\n" + 
					"	api.id(null); // NOK\n" + 
					"	       ^^^^\n" + 
					"Null type mismatch: required \'@NonNull String\' but the provided value is null\n" + 
					"----------\n");
    	} finally {
    		if (p != null)
    			deleteProject(p);
    		if (p2 != null)
    			deleteProject(p2);
    	}
    }

