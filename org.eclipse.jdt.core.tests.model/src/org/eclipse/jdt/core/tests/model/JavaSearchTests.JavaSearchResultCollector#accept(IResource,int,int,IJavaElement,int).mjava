	public void accept(IResource resource, int start, int end, IJavaElement element, int accuracy) {
		try {
			if (results.length() > 0) results.append("\n");
			IPath path = resource.getProjectRelativePath();
			if (path.segmentCount() == 0) {
				IJavaElement root = element;
				while (root != null && !(root instanceof IPackageFragmentRoot)) {
					root = root.getParent();
				}
				if (root != null) {
					IPackageFragmentRoot pkgFragmentRoot = (IPackageFragmentRoot)root;
					if (pkgFragmentRoot.isExternal()) {
						results.append(pkgFragmentRoot.getPath().toOSString());
					} else {
						results.append(pkgFragmentRoot.getPath());
					}
				}
			} else {
				results.append(path);
			}
			ICompilationUnit unit = null;
			if (element instanceof IMethod) {
				results.append(" ");
				IMethod method = (IMethod)element;
				results.append(method.getDeclaringType().getFullyQualifiedName());
				if (!method.isConstructor()) {
					results.append(".");
					results.append(method.getElementName());
				}
				results.append("(");
				String[] parameters = method.getParameterTypes();			
				for (int i = 0; i < parameters.length; i++) {
					results.append(Signature.toString(parameters[i]));
					if (i < parameters.length-1) {
						results.append(", ");
					}
				}
				results.append(")");
				if (!method.isConstructor()) {
					results.append(" -> ");
					results.append(Signature.toString(method.getReturnType()));
				}
				unit = method.getCompilationUnit();
			} else if (element instanceof IType) {
				results.append(" ");
				IType type = (IType)element;
				results.append(type.getFullyQualifiedName());
				unit = type.getCompilationUnit();
			} else if (element instanceof IField) {
				results.append(" ");
				IField field = (IField)element;
				results.append(field.getDeclaringType().getFullyQualifiedName());
				results.append(".");
				results.append(field.getElementName());
				unit = field.getCompilationUnit();
			} else if (element instanceof IInitializer) {
				results.append(" ");
				IInitializer initializer = (IInitializer)element;
				results.append(initializer.getDeclaringType().getFullyQualifiedName());
				results.append(".");
				if (Flags.isStatic(initializer.getFlags())) {
					results.append("static ");
				}
				results.append("{}");
				unit = initializer.getCompilationUnit();
			} else if (element instanceof IPackageFragment) {
				results.append(" ");
				results.append(element.getElementName());
			}
			if (resource instanceof IFile) {
				char[] contents;
				if (!resource.equals(element.getUnderlyingResource())) {
					// working copy
					contents = unit.getBuffer().getCharacters();
				} else {
					contents = new org.eclipse.jdt.internal.compiler.batch.CompilationUnit(
						null, 
						((IFile) resource).getLocation().toFile().getPath(),
						null).getContents();
				}
				results.append(" [");
				if (start > -1) {
					results.append(CharOperation.subarray(contents, start, end));
				} else {
					results.append("No source");
				}
				results.append("]");
			}
			if (showAccuracy) {
				results.append(" ");
				switch (accuracy) {
					case EXACT_MATCH:
						results.append("EXACT_MATCH");
						break;
					case POTENTIAL_MATCH:
						results.append("POTENTIAL_MATCH");
						break;
				}
			}
		} catch (JavaModelException e) {
			results.append("\n");
			results.append(e.toString());
		}
	}

