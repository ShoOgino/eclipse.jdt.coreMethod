	public void testBug473921() throws Exception {
		try {
			IJavaProject p = this.createJavaProject(
				"P",
				new String[] {},
				new String[] { "/P/lib473921.jar", "JCL17_LIB" },
				new String[][] {{ "p/*" }, { }},
				new String[][] {{ "**/*" }, { }},
				null/*no project*/,
				null/*no inclusion pattern*/,
				null/*no exclusion pattern*/,
				null/*no exported project*/,
				"",
				null/*no source outputs*/,
				null/*no inclusion pattern*/,
				null/*no exclusion pattern*/,
				"1.7"
			);
			org.eclipse.jdt.core.tests.util.Util.createJar(
					new String[] {
							"p/Enclosing.java",
							"package p;\n" +
							"public class Enclosing { enum Nested { A, B; class Matryoshka { } } }\n",
							"classified/CEnclosing.java",
							"package classified;\n" +
							"public class CEnclosing { interface CNested { class CMatryoshka { } } }\n"
					},
					p.getProject().getLocation().append("lib473921.jar").toOSString(),
					"1.7");
			refresh(p);
			
			IJavaSearchScope scope = SearchEngine.createJavaSearchScope(new IJavaElement[] { p });
			class Collector extends TypeNameMatchRequestor {
				List<TypeNameMatch> matches = new ArrayList<>();
				@Override
				public void acceptTypeNameMatch(TypeNameMatch match) {
					this.matches.add(match);
				}
			}
			Collector collector = new Collector();
			new SearchEngine().searchAllTypeNames(
				null,
				new char[][] { "Nested".toCharArray(), "Enclosing".toCharArray(), "Matryoshka".toCharArray() },
				scope,
				collector,
				IJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH,
				null);
			assertEquals(3, collector.matches.size());
			assertEquals(IAccessRule.K_ACCESSIBLE, collector.matches.get(0).getAccessibility());
			assertEquals(IAccessRule.K_ACCESSIBLE, collector.matches.get(1).getAccessibility()); // bug 482309
			assertEquals(IAccessRule.K_ACCESSIBLE, collector.matches.get(2).getAccessibility()); // bug 482309 (double-nested type)
			
			collector = new Collector();
			new SearchEngine().searchAllTypeNames(
					null,
					new char[][] { "CNested".toCharArray(), "CEnclosing".toCharArray(), "CMatryoshka".toCharArray() },
					scope,
					collector,
					IJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH,
					null);
			assertEquals(3, collector.matches.size());
			assertEquals(IAccessRule.K_NON_ACCESSIBLE, collector.matches.get(0).getAccessibility());
			assertEquals(IAccessRule.K_NON_ACCESSIBLE, collector.matches.get(1).getAccessibility()); // bug 482309
			assertEquals(IAccessRule.K_NON_ACCESSIBLE, collector.matches.get(2).getAccessibility()); // bug 482309 (double-nested type)
		} finally {
			deleteProject("P");
		}
	}

