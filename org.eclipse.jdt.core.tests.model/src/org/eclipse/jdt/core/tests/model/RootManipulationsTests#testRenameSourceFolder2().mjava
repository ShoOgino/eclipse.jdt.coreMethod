/*
 * Ensure that renaming a source root keeps the same roots order,
 * and that it triggers the right delta and that the model is up-to-date.
 */
public void testRenameSourceFolder2() throws CoreException {
	try {
		IJavaProject project = this.createJavaProject("P", new String[] {"src1", "src2", "src3"}, "bin");
		
		// rename src1
		IPackageFragmentRoot root = this.getPackageFragmentRoot("/P/src1");
		this.startDeltas();
		this.move(root, new Path("/P/src4"));
		assertDeltas(
			"Unexpected delta after renaming src1",
			"P[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\n" + 
			"	src1[-]: {MOVED_TO(src4 [in P])}\n" + 
			"	src4[+]: {MOVED_FROM(src1 [in P])}\n" + 
			"	ResourceDelta(/P/.classpath)[*]"
		);
		assertJavaProject(
			"P\n" + 
			"	src4\n" + 
			"		<default>\n" + 
			"	src2\n" + 
			"		<default>\n" + 
			"	src3\n" + 
			"		<default>\n" + 
			"	L/P/.classpath\n" + 
			"	L/P/.project",
			project);
			
		// rename src2
		root = this.getPackageFragmentRoot("/P/src2");
		this.clearDeltas();
		this.move(root, new Path("/P/src5"));
		assertDeltas(
			"Unexpected delta after renaming src2",
			"P[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\n" + 
			"	src2[-]: {MOVED_TO(src5 [in P])}\n" + 
			"	src5[+]: {MOVED_FROM(src2 [in P])}\n" + 
			"	ResourceDelta(/P/.classpath)[*]"
		);
		assertJavaProject(
			"P\n" + 
			"	src4\n" + 
			"		<default>\n" + 
			"	src5\n" + 
			"		<default>\n" + 
			"	src3\n" + 
			"		<default>\n" + 
			"	L/P/.classpath\n" + 
			"	L/P/.project",
			project);		

		// rename src3
		root = this.getPackageFragmentRoot("/P/src3");
		this.clearDeltas();
		this.move(root, new Path("/P/src6"));
		assertDeltas(
			"Unexpected delta after renaming src3",
			"P[*]: {CHILDREN | CONTENT | CLASSPATH CHANGED}\n" + 
			"	src3[-]: {MOVED_TO(src6 [in P])}\n" + 
			"	src6[+]: {MOVED_FROM(src3 [in P])}\n" + 
			"	ResourceDelta(/P/.classpath)[*]"
		);
		assertJavaProject(
			"P\n" + 
			"	src4\n" + 
			"		<default>\n" + 
			"	src5\n" + 
			"		<default>\n" + 
			"	src6\n" + 
			"		<default>\n" + 
			"	L/P/.classpath\n" + 
			"	L/P/.project",
			project);		
	} finally {
		this.stopDeltas();
		this.deleteProject("P");
	}
}

