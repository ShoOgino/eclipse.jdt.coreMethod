/*
 * References to a all types (using '*' string pattern)
 */
private void setUpTypeRefAll() throws JavaModelException {
	final ProblemRequestor problemRequestor = new ProblemRequestor();
	this.wcOwner = new WorkingCopyOwner() {
		public IProblemRequestor getProblemRequestor(ICompilationUnit workingCopy) {
			return problemRequestor;
		}
	};
	this.workingCopies = new ICompilationUnit[3];
	this.workingCopies[0] = getWorkingCopy("/JavaSearch15/src/type/def/Types.java",
		"package type.def;\n" +
		"@Bug\n" +
		"@ATest\n" +
		"public class Types extends Exception implements ITest1, ITest2 {\n" +
		"	ITest1 test1;\n" +
		"	ITest2 test2;\n" +
		"}\n" +
		"@Bug\n" +
		"interface ITest1 {}\n" +
		"@ATest\n" +
		"interface ITest2 extends ITest1 {}\n" +
		"@Bug\n" +
		"@ATest\n" +
		"enum ETest {}\n" +
		"@Bug\n" +
		"@interface ATest {}\n"
	);
	this.workingCopies[1] = getWorkingCopy("/JavaSearch15/src/type/def/Bug.java",
		"package type.def;\n" +
		"public @interface Bug {\n" +
		"	int num() default 0;\n" +
		"	String comment() default \"\";\n" +
		"}\n"
	);
	this.workingCopies[2] = getWorkingCopy("/JavaSearch15/src/all/types/ref/TestTypes.java",
		"package all.types.ref;\n" +
		"\n" +
		"import type.def.Bug;\n" +
		"import type.def.Types;\n" +
		"\n" +
		"@Bug(num=155013)\n" +
		"public class TestTypes extends Types {\n" +
		"	@Bug(comment=\"field\")\n" +
		"	Types field = new Types(), local, other = new Types();\n" +
		"	{\n" +
		"		Object o;\n" +
		"		Types t;\n" +
		"		if (this.field == null) {\n" +
		"			try {\n" +
		"				t = new TestTypes();\n" +
		"			} catch (RuntimeException e) {\n" +
		"				t = new Types();\n" +
		"			} \n" +
		"		} else {\n" +
		"			o = this.field;\n" +
		"			t = (Types) o;\n" +
		"		}\n" +
		"		local = t;\n" +
		"	};\n" +
		"	@Bug(comment=\"method\", num=155013)\n" +
		"	Types method(Types param) throws Types {\n" +
		"		Object obj = new Types();\n" +
		"		Types local = (Types) obj;\n" +
		"		return local;\n" +
		"	}\n" +
		"	Bug bar(Bug bug) {\n" +
		"		try {\n" +
		"			method(this);\n" +
		"		}\n" +
		"		catch (Types ex) {}\n" +
		"		catch (Exception ex) {}\n" +
		"		return bug; \n" +
		"	}\n" +
		"	// Other types references\n" +
		"	Object object;\n" +
		"	String str;\n" +
		"	TestTypes() throws Types, RuntimeException {\n" +
		"		if (this.object instanceof String) {\n" +
		"			this.str = (String) this.object;\n" +
		"		} else {\n" +
		"			this.str = new String();\n" +
		"			this.object = new Object();\n" +
		"		}\n" +
		"	}\n" +
		"}\n"
	);
	assertEquals("CU Should not have any problem!",
		"----------\n" +
		"----------\n",
		problemRequestor.problems.toString()
	);
	this.resultCollector.showSelection = true;
	this.resultCollector.showOffset = true;
}

