// https://bugs.eclipse.org/bugs/show_bug.cgi?id=338789
// To verify that we get proposals for the parameter of a multi-catch clause
// with its type as the LUB of all the types caught.
public void testBug338789c() throws JavaModelException {
	Map<String, String> options = COMPLETION_PROJECT.getOptions(true);
	String savedOptionCompliance = options.get(CompilerOptions.OPTION_Compliance);
	try {
		options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_7);
		COMPLETION_PROJECT.setOptions(options);
		this.workingCopies = new ICompilationUnit[5];
		this.workingCopies[0] = getWorkingCopy(
			"/Completion/src/test/Test.java",
			"package test;"+
			"public class Test {\n" +
			"	public void throwing() throws IZZBException, IZZException {}\n" +
			"	public void foo() {\n" +
			"      try {\n" +
			"         throwing();\n" +
			"      }\n" +
			"      catch (IZZException | IZZBException e) {\n" +
			"         e.myM;\n" +
			"      }\n" +
			"   }" +
			"}\n");

		this.workingCopies[1] = getWorkingCopy(
				"/Completion/src/test/IZZAException.java",
				"package test;"+
				"public class IZZAException extends Exception {\n" +
				"}\n");

		this.workingCopies[2] = getWorkingCopy(
				"/Completion/src/test/IZZBException.java",
				"package test;"+
				"public class IZZBException extends Exception implements CommonInt{\n" +
				"	public void myMethod(){}\n" +
				"}\n");

		this.workingCopies[3] = getWorkingCopy(
				"/Completion/src/test/IZZException.java",
				"package test;"+
				"public class IZZException extends Exception implements CommonInt {\n" +
				"	public void myMethod(){}\n" +
				"}\n");

		this.workingCopies[4] = getWorkingCopy(
				"/Completion/src/test/CommonInt.java",
				"package test;"+
				"public interface CommonInt {\n" +
				"	public void myMethod();\n" +
				"}\n");

		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
		String str = this.workingCopies[0].getSource();
		String completeBehind = "e.myM";
		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
		this.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);

		assertResults(
			"myMethod[METHOD_REF]{myMethod(), Ltest.CommonInt;, ()V, myMethod, null, " + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_STATIC + R_NON_RESTRICTED) + "}",
			requestor.getResults());
	} finally {
		// Restore compliance settings.
		options.put(CompilerOptions.OPTION_Compliance, savedOptionCompliance);
		COMPLETION_PROJECT.setOptions(options);
	}
}

