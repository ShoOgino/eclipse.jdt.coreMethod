public void test010() throws CoreException {
	try {
		this.createFile(
			"/P/src/SuperReference.java",
			"public class SuperReference extends ThisReference {\r\n" +			"	\r\n" +			"public SuperReference(int sourceStart, int sourceEnd) {\r\n" +			"	super(sourceStart, sourceEnd);\r\n" +			"}\r\n" +			"public static ExplicitConstructorCall implicitSuperConstructorCall() {\r\n" +			"	return new ExplicitConstructorCall(ExplicitConstructorCall.ImplicitSuper);\r\n" +			"}\r\n" +			"public boolean isImplicitThis() {\r\n" +			"	\r\n" +			"	return false;\r\n" +			"}\r\n" +			"public boolean isSuper() {\r\n" +			"	\r\n" +			"	return true;\r\n" +			"}\r\n" +			"public boolean isThis() {\r\n" +			"	\r\n" +			"	return false ;\r\n" +			"}\r\n" +			"public TypeBinding resolveType(BlockScope scope) {\r\n" +			"	constant = NotAConstant;\r\n" +			"	if (!checkAccess(scope.methodScope()))\r\n" +			"		return null;\r\n" +			"	SourceTypeBinding enclosingTb = scope.enclosingSourceType();\r\n" +			"	if (scope.isJavaLangObject(enclosingTb)) {\r\n" +			"		scope.problemReporter().cannotUseSuperInJavaLangObject(this);\r\n" +			"		return null;\r\n" +			"	}\r\n" +			"	return this.resolvedType = enclosingTb.superclass;\r\n" +			"}\r\n" +			"public String toStringExpression(){\r\n" +			"\r\n" +			"	return \"super\"; //$NON-NLS-1$\r\n" +			"	\r\n" +			"}\r\n" +			"public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope) {\r\n" +			"	visitor.visit(this, blockScope);\r\n" +			"	visitor.endVisit(this, blockScope);\r\n" +			"}\r\n" +			"}"
		);
		String expectedResult = "public class SuperReference extends ThisReference {\r\n" +			"public static ExplicitConstructorCall implicitSuperConstructorCall() {\r\n" +			"	return new ExplicitConstructorCall(ExplicitConstructorCall.ImplicitSuper);\r\n" +			"}\r\n" +			"	\r\n" +			"public SuperReference(int sourceStart, int sourceEnd) {\r\n" +			"	super(sourceStart, sourceEnd);\r\n" +			"}\r\n" +			"public boolean isImplicitThis() {\r\n" +			"	\r\n" +			"	return false;\r\n" +			"}\r\n" +			"public boolean isSuper() {\r\n" +			"	\r\n" +			"	return true;\r\n" +			"}\r\n" +			"public boolean isThis() {\r\n" +			"	\r\n" +			"	return false ;\r\n" +			"}\r\n" +			"public TypeBinding resolveType(BlockScope scope) {\r\n" +			"	constant = NotAConstant;\r\n" +			"	if (!checkAccess(scope.methodScope()))\r\n" +			"		return null;\r\n" +			"	SourceTypeBinding enclosingTb = scope.enclosingSourceType();\r\n" +			"	if (scope.isJavaLangObject(enclosingTb)) {\r\n" +			"		scope.problemReporter().cannotUseSuperInJavaLangObject(this);\r\n" +			"		return null;\r\n" +			"	}\r\n" +			"	return this.resolvedType = enclosingTb.superclass;\r\n" +			"}\r\n" +			"public String toStringExpression(){\r\n" +			"\r\n" +			"	return \"super\"; //$NON-NLS-1$\r\n" +			"	\r\n" +			"}\r\n" +			"public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope) {\r\n" +			"	visitor.visit(this, blockScope);\r\n" +			"	visitor.endVisit(this, blockScope);\r\n" +			"}\r\n" +			"}";
		sortUnit(this.getCompilationUnit("/P/src/SuperReference.java"), expectedResult);
	} finally {
		this.deleteFile("/P/src/SuperReference.java");
	}
}

