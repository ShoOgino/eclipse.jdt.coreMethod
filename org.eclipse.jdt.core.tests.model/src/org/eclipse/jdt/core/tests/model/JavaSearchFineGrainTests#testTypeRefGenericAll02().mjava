public void testTypeRefGenericAll02() throws CoreException {
	setUpTypeRefGeneric02();
	search("*", TYPE, REFERENCES, getJavaSearchWorkingCopiesScope());
	assertSearchResults(
		"src/test02/Test.java test02.Test.field:<anonymous>#1 [	Test<A, ? extends B, ? super C> field = new �|Test|�<A, Z<String>, X<String>> () {@91] EXACT_MATCH\n" +
		"src/test02/Test.java test02.Test.field:<anonymous>#1.x [		�|X|�<String> x;@128] EXACT_MATCH\n" +
		"src/test02/Test.java test02.Test.field:<anonymous>#1.x [		X<�|String|�> x;@130] EXACT_MATCH\n" +
		"src/test02/Test.java test02.Test.field:<anonymous>#1.t [		�|Test|�<A, B, C> t;@143] EXACT_MATCH\n" +
		"src/test02/Test.java test02.Test.field:<anonymous>#1.t [		Test<�|A|�, B, C> t;@148] EXACT_MATCH\n" +
		"src/test02/Test.java test02.Test.field:<anonymous>#1.t [		Test<A, �|B|�, C> t;@151] EXACT_MATCH\n" +
		"src/test02/Test.java test02.Test.field:<anonymous>#1.t [		Test<A, B, �|C|�> t;@154] EXACT_MATCH\n" +
		"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [		�|Test|�<X<Y<Z<String>>>, Y<Z<String>>, Z<String>> bar() {@162] EXACT_MATCH\n" +
		"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [		Test<�|X|�<Y<Z<String>>>, Y<Z<String>>, Z<String>> bar() {@167] EXACT_MATCH\n" +
		"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [		Test<X<�|Y|�<Z<String>>>, Y<Z<String>>, Z<String>> bar() {@169] EXACT_MATCH\n" +
		"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [		Test<X<Y<�|Z|�<String>>>, Y<Z<String>>, Z<String>> bar() {@171] EXACT_MATCH\n" +
		"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [		Test<X<Y<Z<�|String|�>>>, Y<Z<String>>, Z<String>> bar() {@173] EXACT_MATCH\n" +
		"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [		Test<X<Y<Z<String>>>, �|Y|�<Z<String>>, Z<String>> bar() {@184] EXACT_MATCH\n" +
		"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [		Test<X<Y<Z<String>>>, Y<�|Z|�<String>>, Z<String>> bar() {@186] EXACT_MATCH\n" +
		"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [		Test<X<Y<Z<String>>>, Y<Z<�|String|�>>, Z<String>> bar() {@188] EXACT_MATCH\n" +
		"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [		Test<X<Y<Z<String>>>, Y<Z<String>>, �|Z|�<String>> bar() {@198] EXACT_MATCH\n" +
		"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [		Test<X<Y<Z<String>>>, Y<Z<String>>, Z<�|String|�>> bar() {@200] EXACT_MATCH\n" +
		"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [			return new �|Test|�<X<Y<Z<String>>>, Y<Z<String>>, Z<String>>();@231] EXACT_MATCH\n" +
		"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [			return new Test<�|X|�<Y<Z<String>>>, Y<Z<String>>, Z<String>>();@236] EXACT_MATCH\n" +
		"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [			return new Test<X<�|Y|�<Z<String>>>, Y<Z<String>>, Z<String>>();@238] EXACT_MATCH\n" +
		"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [			return new Test<X<Y<�|Z|�<String>>>, Y<Z<String>>, Z<String>>();@240] EXACT_MATCH\n" +
		"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [			return new Test<X<Y<Z<�|String|�>>>, Y<Z<String>>, Z<String>>();@242] EXACT_MATCH\n" +
		"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [			return new Test<X<Y<Z<String>>>, �|Y|�<Z<String>>, Z<String>>();@253] EXACT_MATCH\n" +
		"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [			return new Test<X<Y<Z<String>>>, Y<�|Z|�<String>>, Z<String>>();@255] EXACT_MATCH\n" +
		"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [			return new Test<X<Y<Z<String>>>, Y<Z<�|String|�>>, Z<String>>();@257] EXACT_MATCH\n" +
		"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [			return new Test<X<Y<Z<String>>>, Y<Z<String>>, �|Z|�<String>>();@267] EXACT_MATCH\n" +
		"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [			return new Test<X<Y<Z<String>>>, Y<Z<String>>, Z<�|String|�>>();@269] EXACT_MATCH\n" +
		"src/test02/Test.java test02.Test.field [	Test<A, ? extends B, ? super C> field = new Test<�|A|�, Z<String>, X<String>> () {@96] EXACT_MATCH\n" +
		"src/test02/Test.java test02.Test.field [	Test<A, ? extends B, ? super C> field = new Test<A, �|Z|�<String>, X<String>> () {@99] EXACT_MATCH\n" +
		"src/test02/Test.java test02.Test.field [	Test<A, ? extends B, ? super C> field = new Test<A, Z<�|String|�>, X<String>> () {@101] EXACT_MATCH\n" +
		"src/test02/Test.java test02.Test.field [	Test<A, ? extends B, ? super C> field = new Test<A, Z<String>, �|X|�<String>> () {@110] EXACT_MATCH\n" +
		"src/test02/Test.java test02.Test.field [	Test<A, ? extends B, ? super C> field = new Test<A, Z<String>, X<�|String|�>> () {@112] EXACT_MATCH\n" +
		"src/test02/Test.java test02.Test.field [	�|Test|�<A, ? extends B, ? super C> field = new Test<A, Z<String>, X<String>> () {@47] EXACT_MATCH\n" +
		"src/test02/Test.java test02.Test.field [	Test<�|A|�, ? extends B, ? super C> field = new Test<A, Z<String>, X<String>> () {@52] EXACT_MATCH\n" +
		"src/test02/Test.java test02.Test.field [	Test<A, ? extends �|B|�, ? super C> field = new Test<A, Z<String>, X<String>> () {@65] EXACT_MATCH\n" +
		"src/test02/Test.java test02.Test.field [	Test<A, ? extends B, ? super �|C|�> field = new Test<A, Z<String>, X<String>> () {@76] EXACT_MATCH\n" +
		"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [	�|Test|�<? super A, B, ? extends C> foo(Test<? extends A, ? super B, C> param) {@290] EXACT_MATCH\n" +
		"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [	Test<? super �|A|�, B, ? extends C> foo(Test<? extends A, ? super B, C> param) {@303] EXACT_MATCH\n" +
		"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [	Test<? super A, �|B|�, ? extends C> foo(Test<? extends A, ? super B, C> param) {@306] EXACT_MATCH\n" +
		"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [	Test<? super A, B, ? extends �|C|�> foo(Test<? extends A, ? super B, C> param) {@319] EXACT_MATCH\n" +
		"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [	Test<? super A, B, ? extends C> foo(�|Test|�<? extends A, ? super B, C> param) {@326] EXACT_MATCH\n" +
		"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [	Test<? super A, B, ? extends C> foo(Test<? extends �|A|�, ? super B, C> param) {@341] EXACT_MATCH\n" +
		"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [	Test<? super A, B, ? extends C> foo(Test<? extends A, ? super �|B|�, C> param) {@352] EXACT_MATCH\n" +
		"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [	Test<? super A, B, ? extends C> foo(Test<? extends A, ? super B, �|C|�> param) {@355] EXACT_MATCH\n" +
		"src/test02/Test.java test02.C [class C extends �|X|�<String> {}@426] EXACT_MATCH\n" +
		"src/test02/Test.java test02.C [class C extends X<�|String|�> {}@428] EXACT_MATCH\n" +
		"src/test02/Test.java test02.Y [class Y<S> extends �|A|� {}@472] EXACT_MATCH\n" +
		"src/test02/Test.java test02.Z [class Z<P> extends �|B|� {}@496] EXACT_MATCH"
	);
}

