	public void testBug70827_NotFixed() throws CoreException {
		workingCopies = new ICompilationUnit[3];
		workingCopies[0] = getWorkingCopy("/JavaSearchBugs/src/b70827/not/fixed/ConditionalFlowInfo.java",
			"package b70827.not.fixed;\n" + 
			"public class ConditionalFlowInfo extends FlowInfo {\n" + 
			"	public FlowInfo info;\n" + 
			"	ConditionalFlowInfo(FlowInfo info){\n" + 
			"		this.info = info;\n" + 
			"	}\n" + 
			"	public void markAsDefinitelyNull(FieldBinding field) {\n" + 
			"		info.markAsDefinitelyNull(field);\n" + 
			"	}\n" + 
			"	public void markAsDefinitelyNull(LocalVariableBinding local) {\n" + 
			"		info.markAsDefinitelyNull(local);\n" + 
			"	}\n" + 
			"}\n"
		);
		workingCopies[1] = getWorkingCopy("/JavaSearchBugs/src/b70827/not/fixed/FlowInfo.java",
			"package b70827.not.fixed;\n" + 
			"\n" + 
			"class FieldBinding {\n" + 
			"	int id;\n" + 
			"}\n" + 
			"class LocalVariableBinding extends FieldBinding {}\n" + 
			"\n" + 
			"public abstract class FlowInfo {\n" + 
			"	abstract public void markAsDefinitelyNull(LocalVariableBinding local);\n" + 
			"	abstract public void markAsDefinitelyNull(FieldBinding field);\n" + 
			"}\n"
			);
		workingCopies[2] = getWorkingCopy("/JavaSearchBugs/src/b70827/not/fixed/UnconditionalFlowInfo.java",
			"package b70827.not.fixed;\n" + 
			"public class UnconditionalFlowInfo extends FlowInfo {\n" + 
			"	final private void markAsDefinitelyNull(int position) {}\n" + 
			"	public void markAsDefinitelyNull(FieldBinding field) {\n" + 
			"		markAsDefinitelyNull(field.id);\n" + 
			"	}\n" + 
			"	public void markAsDefinitelyNull(LocalVariableBinding local) {\n" + 
			"		markAsDefinitelyNull(local.id + 1);\n" + 
			"	}\n" + 
			"}\n"
			);
		IType type = workingCopies[2].getType("UnconditionalFlowInfo");
		search(type.getMethods()[2], REFERENCES);
		assertSearchResults(
			"src/b70827/not/fixed/ConditionalFlowInfo.java void b70827.not.fixed.ConditionalFlowInfo.markAsDefinitelyNull(LocalVariableBinding) [markAsDefinitelyNull(local)] EXACT_MATCH"
		);
	}

