	/**
	 * Test that we find potential matches in binaries even if we can't resolve the entire
	 * class file.
	 * (Regression test for 1G4IN3E: ITPJCORE:WINNT - AbortCompilation using J9 to search for class declaration) 
	 */
	public void testPotentialMatchInBinary2() throws CoreException {
		IJavaProject project = this.getJavaProject("JavaSearch");
		IClasspathEntry[] classpath = project.getRawClasspath();
		try {
			// add AbortCompilation.jar to classpath
			int length = classpath.length;
			IClasspathEntry[] newClasspath = new IClasspathEntry[length+1];
			System.arraycopy(classpath, 0, newClasspath, 0, length);
			newClasspath[length] = JavaCore.newLibraryEntry(new Path("/JavaSearch/AbortCompilation.jar"), null, null);
			project.setRawClasspath(newClasspath, null);
			
			// potential match for a method declaration
		//	JavaSearchResultCollector resultCollector = new JavaSearchResultCollector();
			resultCollector.showAccuracy = true;
			search(
				"MissingArgumentType.foo*",
				METHOD,
				DECLARATIONS, 
				getJavaSearchScope(), 
				this.resultCollector);
			assertSearchResults(
				"AbortCompilation.jar void AbortCompilation.MissingArgumentType.foo() [No source] POTENTIAL_MATCH\n" + 
				"AbortCompilation.jar void AbortCompilation.MissingArgumentType.foo(java.util.EventListener) [No source] POTENTIAL_MATCH\n" + 
				"AbortCompilation.jar void AbortCompilation.MissingArgumentType.foo2() [No source] POTENTIAL_MATCH",
				this.resultCollector);
		} finally {
			// reset classpath
			project.setRawClasspath(classpath, null);
		}
	}	

