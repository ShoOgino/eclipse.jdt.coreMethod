	public void testAddExports_JRE() throws CoreException, IOException {
		if (!isJRE9) return;
		try {
			String[] sources = {
				"src/module-info.java",
				"module org.astro {\n" +
				"	requires java.base;\n" +
				"	requires java.desktop;\n" +
				"	requires java.datatransfer;\n" +
				"	requires java.sql;\n" +
				"}\n",
				"src/org/astro/Test2.java",
				"package org.astro;\n" +
				"public class Test2 {\n" +
				"	int test(jdk.internal.misc.Unsafe unsafe) {\n" + 
				"		return unsafe.addressSize();\n" + 
				"	}" +
				"}\n",
			};
			IClasspathAttribute[] attrs = new IClasspathAttribute[] {
					JavaCore.newClasspathAttribute(IClasspathAttribute.MODULE, "true"),
					JavaCore.newClasspathAttribute(IClasspathAttribute.ADD_EXPORTS, "java.base/jdk.internal.misc=org.astro")
			};
			IJavaProject project = createJava9ProjectWithJREAttributes("org.astro", new String[] {"src"}, attrs);
			createSourceFiles(project, sources);
			getWorkspace().build(IncrementalProjectBuilder.FULL_BUILD, null);
			IMarker[] markers = project.getProject().findMarkers(null, true, IResource.DEPTH_INFINITE);
			assertMarkers("Unexpected markers",
					"",
					markers);

			IClasspathAttribute[] newAttrs = {
					JavaCore.newClasspathAttribute(IClasspathAttribute.MODULE, "true")
			};
			setJRECPAttributes(project, newAttrs);

			getWorkspace().build(IncrementalProjectBuilder.AUTO_BUILD, null);

			markers = project.getProject().findMarkers(null, true, IResource.DEPTH_INFINITE);
			assertMarkers("Unexpected markers",
					"The type jdk.internal.misc.Unsafe is not accessible",
					markers);
		} finally {
			this.deleteProject("org.astro");
		}
	}

