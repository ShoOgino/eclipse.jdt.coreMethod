// Verify that no NPE was raised on following case (which produces compiler error)
public void testBug73336c() throws CoreException {
	workingCopies = new ICompilationUnit[4];
	WorkingCopyOwner owner = new WorkingCopyOwner() {};
	workingCopies[0] = getWorkingCopy("/JavaSearchBugs/src/b73336c/A.java",
		"package b73336c;\n" + 
		"public class A {}\n",
		owner
	);
	workingCopies[1] = getWorkingCopy("/JavaSearchBugs/src/b73336c/B.java",
		"package b73336c;\n" + 
		"public class B extends X<A, A> {\n" + 
		"}\n",
		owner
	);
	workingCopies[2] = getWorkingCopy("/JavaSearchBugs/src/b73336c/C.java",
		"package b73336c;\n" + 
		"public class C implements X<A, A>.Interface<A>  {\n" + 
		"	void bar() {}\n" + 
		"}\n",
		owner
	);
	workingCopies[3] = getWorkingCopy("/JavaSearchBugs/src/b73336c/X.java",
		"package b73336c;\n" + 
		"public class X<T, U> {\n" + 
		"	interface Interface<V> {\n" + 
		"		void bar();\n" + 
		"	}\n" + 
		"}\n",
		owner
	);
	// search for first and second method should both return 2 inaccurate matches
	IType type = workingCopies[0].getType("A");
//	search(type, REFERENCES, getJavaSearchScopeBugs("b73336c", false));
	search(type, REFERENCES); //, getJavaSearchScopeBugs("b73336", false));
	assertSearchResults(
		"src/b73336c/B.java b73336c.B [A] EXACT_MATCH\n" + 
		"src/b73336c/B.java b73336c.B [A] EXACT_MATCH\n" + 
		"src/b73336c/C.java b73336c.C [A] EXACT_MATCH\n" + 
		"src/b73336c/C.java b73336c.C [A] EXACT_MATCH\n" + 
		"src/b73336c/C.java b73336c.C [A] EXACT_MATCH"
	);
}

