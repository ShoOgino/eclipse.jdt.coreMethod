	/*
	 * Overrides super method to create parent folders if necessary
	 *
	public ICompilationUnit getWorkingCopy(String fileName, String source) throws JavaModelException {
		IPath folder = new Path(fileName).removeLastSegments(1);
		try {
			createFolder(folder);
		} catch (CoreException e) {
			e.printStackTrace();
		}
		ICompilationUnit workingCopy = super.getWorkingCopy(fileName, source, true);
		workingCopy.commitWorkingCopy(true, null);	// need to commit to index file
		return workingCopy;
	}
	/*
	 * Overrides super method to create parent folders if necessary
	 *
	public ICompilationUnit getWorkingCopy(String fileName, String source, WorkingCopyOwner owner, boolean computeProblems) throws JavaModelException {
		ICompilationUnit workingCopy = super.getWorkingCopy(fileName, source, owner, computeProblems);
		workingCopy.commitWorkingCopy(true, null);	// need to commit to index file
		return workingCopy;
	}
	/*
	 * Overrides super method to create parent folders if necessary
	 *
	public ICompilationUnit getWorkingCopy(String fileName, String source, WorkingCopyOwner owner) throws JavaModelException {
		IPath folder = new Path(fileName).removeLastSegments(1);
		try {
			createFolder(folder);
		} catch (CoreException e) {
			e.printStackTrace();
		}
		ICompilationUnit workingCopy = super.getWorkingCopy(fileName, source, owner, true);
		workingCopy.commitWorkingCopy(true, null);	// need to commit to index file
		return workingCopy;
	}
	protected void search(SearchPattern searchPattern, IJavaSearchScope scope, SearchRequestor requestor) throws CoreException {
		new SearchEngine().search(
			searchPattern, 
			new SearchParticipant[] {SearchEngine.getDefaultSearchParticipant()},
			scope,
			requestor,
			null);
	}
	*/
	protected void search(IJavaElement element, int limitTo, IJavaSearchScope scope) throws CoreException {
		search(element, limitTo, EXACT_RULE, scope, resultCollector);
	}

