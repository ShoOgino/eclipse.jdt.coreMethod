// not solely a search issue but easily reproducible using search
public void test473343_0001() throws CoreException, IOException {
	try {
		IJavaProject project = createJavaProject("P", new String[] {"a-b"}, new String[] {"JCL18_LIB"}, "bin", "1.8", true);
		String source = "interface Consumer<T> {\n" +
				"	void accept(T t);\n" +
				"}\n" +
				"\n" +
				"public class X {\n" +
				"	Consumer<? super Y> action = (i_) -> X.foo(i_);\n" +
				"	private static void foo(Y tb) {\n" +
				"	}\n" +
				"}\n";
		createFile("/P/a-b/X.java", source);
		createFile("/P/a-b/Y.java", "public class Y{}");
		waitForAutoBuild();

		ICompilationUnit unit = getCompilationUnit("/P/a-b/X.java");
		String foo = "foo";
		IJavaElement[] elements = unit.codeSelect(source.indexOf(foo), foo.length());
		SearchPattern pattern = SearchPattern.createPattern(elements[0], REFERENCES, ERASURE_RULE);
		search(pattern, SearchEngine.createJavaSearchScope(new IJavaElement[] { project }, IJavaSearchScope.SOURCES), this.resultCollector);
		LambdaMethod method = (LambdaMethod) this.resultCollector.match.getElement();
  		try {
			SearchPattern.createPattern(method, REFERENCES, ERASURE_RULE);
		} catch (IllegalArgumentException e) {
			assertFalse("Test Failed", true);
		}
	} finally {
		deleteProject("P");
	}
}

