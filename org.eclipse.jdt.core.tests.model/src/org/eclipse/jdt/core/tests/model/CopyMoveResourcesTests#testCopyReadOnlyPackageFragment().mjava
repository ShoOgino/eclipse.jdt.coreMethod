/**
 * Ensures that a package fragment can be copied to a different package fragment root.
 */
public void testCopyReadOnlyPackageFragment() throws CoreException {
	IPackageFragment pkgSource = null;
	IPackageFragment pkg2 = null;
	try {
		this.createFolder("/P/src/p1/p2/p3");
		this.createFile(
			"/P/src/p1/p2/p3/X.java",
			"package p1.p2.p3;\n" +
			"public class X {\n" +
			"}"
		);
		getFile("/P/src/p1/p2/p3/X.java").setReadOnly(true);
		pkgSource = getPackage("/P/src/p1");
		pkgSource.getResource().setReadOnly(true);
		pkg2 = getPackage("/P/src/p1/p2/p3");
		pkg2.getResource().setReadOnly(true);
	
		IPackageFragmentRoot rootDest= getPackageFragmentRoot("P", "src2");
	
		copyPositive(pkg2, rootDest, null, null, false);
		
		assertTrue("Not readOnly", getPackage("/P/src2/p1").getResource().isReadOnly());
		assertTrue("Is readOnly", !getPackage("/P/src2/p1/p2").getResource().isReadOnly());
		assertTrue("Not readOnly", getPackage("/P/src2/p1/p2/p3").getResource().isReadOnly());
		assertTrue("Is readOnly", getFile("/P/src2/p1/p2/p3/X.java").isReadOnly());
	} finally {
		IFile xSrcFile = getFile("/P/src/p1/p2/p3/X.java");
		if (xSrcFile != null) {
			xSrcFile.setReadOnly(false);
		}
		if (pkg2 != null) {
			pkg2.getResource().setReadOnly(false);
		}
		if (pkgSource != null) {
			pkgSource.getResource().setReadOnly(false);
		}
		IPackageFragment p1Fragment = getPackage("/P/src2/p1");
		if (p1Fragment != null) {
			p1Fragment.getResource().setReadOnly(false);
		}
		IPackageFragment p3Fragment = getPackage("/P/src2/p1/p2/p3");
		if (p3Fragment != null) {
			p3Fragment.getResource().setReadOnly(false);
		}
		IFile xFile = getFile("/P/src2/p1/p2/p3/X.java");
		if (xFile != null) {
			xFile.setReadOnly(false);
		}
		deleteFolder("/P/src/p1");
	}
}

