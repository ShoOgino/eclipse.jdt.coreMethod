public void testModule2() throws CoreException, IOException {
	if (!isJRE9) {
		System.err.println(this.getClass().getName()+'.'+getName()+" needs a Java 9 JRE - skipped");
		return;
	}
	try {
		IJavaProject prj = createJava9Project("Test", new String[]{"src"});
		String moduleSrc =
			"module test {\n" +
			"	requires oracle.net;\n" +
			"}\n";
		createFile("/Test/src/module-info.java", moduleSrc);
		prj.getProject().build(IncrementalProjectBuilder.FULL_BUILD, null);
		IMarker[] markers = prj.getProject().findMarkers(null, true, IResource.DEPTH_INFINITE);
		if (markers.length == 1 && markers[0].toString().contains("oracle.net cannot be resolved to a module")) {
			System.out.println("Skipping "+getClass().getName()+".testModule2() because module oracle.net is unavailable");
			return; // oracle.net is missing from openjdk builds
		}
		ICompilationUnit unit = getCompilationUnit("/Test/src/module-info.java");
		int start = moduleSrc.indexOf("oracle.net");
		int length = "oracle.net".length();
		IJavaElement[] elements = unit.codeSelect(start, length);
		assertEquals("expected #elements", 1, elements.length);

		IModuleDescription oracleNet = (IModuleDescription) elements[0];
		IModularClassFile cf = (IModularClassFile) oracleNet.getClassFile();
		assertSourceEquals(
			"Unexpected source for class file oracle.net/module-info.class",
			null,
			cf.getSource());
		ISourceRange javadocRange = oracleNet.getJavadocRange();
		assertEquals("javadoc from source", null, javadocRange);
	} finally {
		deleteProject("Test");
	}
}

