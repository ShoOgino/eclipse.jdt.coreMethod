	/*
	 * Ensures that computing binding for an AST tales the owner's working copies into account.
	 */
	public void testParseCompilationUnit1() throws CoreException {
		ICompilationUnit workingCopy1 = null;
		ICompilationUnit workingCopy2 = null;
		try {
			TestWorkingCopyOwner owner = new TestWorkingCopyOwner();
			workingCopy1 = getCompilationUnit("P/X.java").getWorkingCopy(owner, null, null);
			workingCopy1.getBuffer().setContents(
				"public class X implements I {\n" +
				"}"
			);
			workingCopy1.makeConsistent(null);
			
			workingCopy2 = getCompilationUnit("P/I.java").getWorkingCopy(owner, null, null);
			workingCopy2.getBuffer().setContents(
				"public interface I {\n" +
				"}"
			);
			workingCopy2.makeConsistent(null);

			CompilationUnit cu = AST.parseCompilationUnit(workingCopy1, true, owner);
			TypeDeclaration type = (TypeDeclaration)cu.types().get(0);
			ITypeBinding typeBinding = type.resolveBinding();
			ITypeBinding[] interfaces = typeBinding.getInterfaces();
			assertEquals("Should implement one interface", 1, interfaces.length);
			assertEquals("Unexpected interface name", "I", interfaces[0].getName());
		} finally {
			if (workingCopy1 != null) {
				workingCopy1.discardWorkingCopy();
			}
			if (workingCopy2 != null) {
				workingCopy2.discardWorkingCopy();
			}
		}
	}

