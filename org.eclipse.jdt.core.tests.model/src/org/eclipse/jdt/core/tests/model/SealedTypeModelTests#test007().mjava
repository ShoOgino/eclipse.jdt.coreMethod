	// Test sealed types for reconciler
	public void test007() throws Exception {
		String[] permitted = new String[] {"p.X"};
		try {
			IJavaProject project = createJavaProject("SealedTypes");
			project.open(null);
			String fileContent =  "package p;\n" +
								  "sealed interface I permits p.X {}\n";
			createFolder("/SealedTypes/src/p");
			createFile("/SealedTypes/src/p/I.java", fileContent);
			fileContent =  "package p;\n" +
						   "public non-sealed class X implements p.I {}\n";
			createFile(	"/SealedTypes/src/p/X.java", fileContent);

			ICompilationUnit unit = getCompilationUnit("/SealedTypes/src/p/I.java");

			this.workingCopies = new ICompilationUnit[1];
			char[] sourceChars = fileContent.toCharArray();
			this.problemRequestor.initialize(sourceChars);
			this.workingCopies[0] = unit.getWorkingCopy(this.wcOwner, null);
			assertProblems(
					"Unexpected problems",
					"----------\n" +
					"----------\n",
					this.problemRequestor);

			IType[] types = unit.getTypes();
			assertEquals("Incorret no of types", 1, types.length);
			for (IType iType : types) {
				if (iType.getElementName().equals("I")) {
					assertTrue("modifier should contain sealed", iType.isSealed());
					String[] permittedSubtypeNames = iType.getPermittedSubtypeNames();
					assertEquals("incorrect permitted sub types", permitted.length, permittedSubtypeNames.length);
					for (int i = 0; i < permitted.length; i++) {
						assertEquals("incorrect permitted sub type", permitted[i], permittedSubtypeNames[i]);
					}
				}
			}
		}
		finally {
			deleteProject("SealedTypes");
		}
	}

