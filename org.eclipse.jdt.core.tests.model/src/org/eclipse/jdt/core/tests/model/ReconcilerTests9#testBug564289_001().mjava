public void testBug564289_001() throws Exception {
	if (!isJRE9)
		return;
	IJavaProject p = null;
	String outputDirectory = Util.getOutputDirectory();
	try {
		String lib1path = "externalLib/foo.jar";
		Util.createJar(
				new String[] {
					"net/openhft/chronicle/core/io/IORuntimeException.java",
					"package net.openhft.chronicle.core.io;\n" +
					"public class IORuntimeException extends java.lang.RuntimeException {\n" +
					"	private static final long serialVersionUID = 1L;\n" +
					"	public IORuntimeException(java.lang.String message) {}\n" +
					"}",
					"net/openhft/chronicle/bytes/ReadBytesMarshallable.java",
					"package net.openhft.chronicle.bytes;\n" +
					"public abstract interface ReadBytesMarshallable {\n" +
					"	public abstract void readMarshallable() throws net.openhft.chronicle.core.io.IORuntimeException;\n" +
					"}",
					"net/openhft/chronicle/bytes/BytesMarshallable.java",
					"package net.openhft.chronicle.bytes;\n" +
					"public abstract interface BytesMarshallable extends net.openhft.chronicle.bytes.ReadBytesMarshallable {\n" +
					"	  public default void readMarshallable() throws net.openhft.chronicle.core.io.IORuntimeException {\n" +
					"	  }\n" +
					"}",
					"java/lang/Sri420.java",
					"package java.lang;\n" +
					"public class Sri420 {\n" +
					"}",
				},
				null,
				getExternalResourcePath(lib1path),
				JavaCore.VERSION_1_8);

		p = createJava9Project("p", "11");
		addLibraryEntry(p, new Path(getExternalResourcePath(lib1path)), null, null, null, null, null, false);

		createFolder("p/src/X");
		createFile("p/src/X.java",
				"import net.openhft.chronicle.bytes.BytesMarshallable; \n" +
				"/** */\n" +
				"public class X {\n" +
				"    public static void main(String[] args) {\n" +
				"        System.out.println(\"BytesMarshallable: \" + new BytesMarshallable() {});\n" +
				"    } \n" +
				"}\n");
		p.getProject().build(IncrementalProjectBuilder.INCREMENTAL_BUILD, null);
		waitForAutoBuild();
		IMarker[] markers = p.getProject().findMarkers(null, true, IResource.DEPTH_INFINITE);
		String expected = "Type java.lang.String is indirectly referenced from required .class files but cannot be resolved"
				+ " since the declaring package java.lang exported from module java.base conflicts with a package accessible"
				+ " from module <unnamed>";
		assertMarkers("Unexpected markers",	expected,  markers);

		this.workingCopy.discardWorkingCopy();
		this.workingCopy = getCompilationUnit("p/src/X.java").getWorkingCopy(this.wcOwner, null);
		this.problemRequestor.initialize(this.workingCopy.getSource().toCharArray());
		this.workingCopy.reconcile(JLS_LATEST, true, this.wcOwner, null);
		String expectedErrorMessage = 		"----------\n" +
				"1. ERROR in /p/src/X.java (at line 1)\n" +
				"	import net.openhft.chronicle.bytes.BytesMarshallable; \n" +
				"	^\n" +
				expected + "\n" +
				"----------\n";
		assertProblems("Expecting  problems",expectedErrorMessage, this.problemRequestor);

		markers = p.getProject().findMarkers(null, true, IResource.DEPTH_INFINITE);
		assertMarkers("Unexpected markers", expected,  markers);
	} finally {
		deleteExternalResource("externalLib");
		deleteProject(p);
		File outputDir = new File(outputDirectory);
		if (outputDir.exists())
			Util.flushDirectoryContent(outputDir);
	}
}

