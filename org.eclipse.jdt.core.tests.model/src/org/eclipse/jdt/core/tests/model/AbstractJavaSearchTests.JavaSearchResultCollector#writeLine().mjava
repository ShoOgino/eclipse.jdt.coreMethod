		protected void writeLine() throws CoreException {
			try {
				IResource resource = this.match.getResource();
				IJavaElement element = getElement(this.match);
				this.line = new StringBuffer();
				if (this.showMatchKind) {
					String matchClassName = this.match.getClass().getName();
					this.line.append(matchClassName.substring(matchClassName.lastIndexOf('.')+1));
					this.line.append(": ");
				}
				this.line.append(getPathString(resource, element));
				if (this.showProject) {
					IProject project = element.getJavaProject().getProject();
					this.line.append(" [in ");
					this.line.append(project.getName());
					this.line.append("]");
				}
				ICompilationUnit unit = null;
				if (element instanceof IMethod) {
					this.line.append(" ");
					IMethod method = (IMethod)element;
					append(method);
					unit = method.getCompilationUnit();
				} else if (element instanceof IType) {
					this.line.append(" ");
					IType type = (IType)element;
					append(type);
					unit = type.getCompilationUnit();
				} else if (element instanceof IField) {
					this.line.append(" ");
					IField field = (IField)element;
					append(field);
					unit = field.getCompilationUnit();
				} else if (element instanceof IInitializer) {
					this.line.append(" ");
					IInitializer initializer = (IInitializer)element;
					append(initializer);
					unit = initializer.getCompilationUnit();
				} else if (element instanceof IPackageFragment) {
					this.line.append(" ");
					append((IPackageFragment)element);
				} else if (element instanceof ILocalVariable) {
					this.line.append(" ");
					ILocalVariable localVar = (ILocalVariable)element;
					IJavaElement parent = localVar.getParent();
					if (parent instanceof IInitializer) {
						IInitializer initializer = (IInitializer)parent;
						append(initializer);
					} else { // IMethod
						IMethod method = (IMethod)parent;
						append(method);
					}
					this.line.append(".");
					this.line.append(localVar.getElementName());
					unit = (ICompilationUnit)localVar.getAncestor(IJavaElement.COMPILATION_UNIT);
				} else if (element instanceof ITypeParameter) {
					this.line.append(" ");
					ITypeParameter typeParam = (ITypeParameter)element;
					IJavaElement parent = typeParam.getParent();
					if (parent instanceof IType) {
						IType type = (IType)parent;
						append(type);
						unit = type.getCompilationUnit();
					} else if (parent instanceof IMethod) {
						IMethod method = (IMethod)parent;
						append(method);
						unit = method.getCompilationUnit();
					} else {
						this.line.append("<Unexpected kind of parent for type parameter>");
						unit = (ICompilationUnit)typeParam.getAncestor(IJavaElement.COMPILATION_UNIT);
					}
					this.line.append(".");
					this.line.append(typeParam.getElementName());
				} else if (element instanceof IImportDeclaration) {
					IImportDeclaration importDeclaration = (IImportDeclaration)element;
					unit = (ICompilationUnit)importDeclaration.getAncestor(IJavaElement.COMPILATION_UNIT);
				} else if (element instanceof IPackageDeclaration) {
					IPackageDeclaration packageDeclaration = (IPackageDeclaration)element;
					unit = (ICompilationUnit)packageDeclaration.getAncestor(IJavaElement.COMPILATION_UNIT);
				} else if (element instanceof IAnnotation) {
					this.line.append(" ");
					append((IAnnotation)element);
					unit = (ICompilationUnit) element.getAncestor(IJavaElement.COMPILATION_UNIT);
				}
				if (resource instanceof IFile) {
					char[] contents = getSource(resource, element, unit);
					int start = this.match.getOffset();
					int end = start + this.match.getLength();
					if (start == -1 || (contents != null && contents.length > 0)) { // retrieving attached source not implemented here
						this.line.append(" [");
						if (start > -1) {
							if (this.showSelection) {
								int lineStart1 = CharOperation.lastIndexOf('\n', contents, 0, start);
								int lineStart2 = CharOperation.lastIndexOf('\r', contents, 0, start);
								int lineStart = Math.max(lineStart1, lineStart2) + 1;
								this.line.append(CharOperation.subarray(contents, lineStart, start));
								this.line.append("�|");
							}
							this.line.append(CharOperation.subarray(contents, start, end));
							if (this.showSelection) {
								this.line.append("|�");
								int lineEnd1 = CharOperation.indexOf('\n', contents, end);
								int lineEnd2 = CharOperation.indexOf('\r', contents, end);
								int lineEnd = lineEnd1 > 0 && lineEnd2 > 0 ? Math.min(lineEnd1, lineEnd2) : Math.max(lineEnd1, lineEnd2);
								if (lineEnd == -1) lineEnd = contents.length;
								this.line.append(CharOperation.subarray(contents, end, lineEnd));
							}
							if (this.showOffset) {
								this.line.append('@');
								this.line.append(start);
							}
						} else {
							this.line.append("No source");
						}
						this.line.append("]");
					}
				}
				if (this.showAccuracy) {
					this.line.append(" ");
					if (this.match.getAccuracy() == SearchMatch.A_ACCURATE) {
						if (this.showRule) {
							if (this.match.isExact()) {
								this.line.append("EXACT_");
							} else if (this.match.isEquivalent()) {
								this.line.append("EQUIVALENT_");
							} else if (this.match.isErasure()) {
								this.line.append("ERASURE_");
							} else {
								this.line.append("INVALID_RULE_");
							}
							if (this.match.isRaw()) {
								this.line.append("RAW_");
							}
						} else {
							this.line.append("EXACT_");
						}
						this.line.append("MATCH");
					} else {
						this.line.append("POTENTIAL_MATCH");
					}
				}
				if (this.showInsideDoc) {
					this.line.append(" ");
					if (this.match.isInsideDocComment()) {
						this.line.append("INSIDE_JAVADOC");
					} else {
						this.line.append("OUTSIDE_JAVADOC");
					}
				}
				if (this.showSynthetic) {
					if (this.match instanceof MethodReferenceMatch) {
						MethodReferenceMatch methRef = (MethodReferenceMatch) this.match;
						if (methRef.isSynthetic()) {
							this.line.append(" SYNTHETIC");
						}
					}
				}
				if (this.showFlavors > 0) {
					if (this.match instanceof MethodReferenceMatch) {
						MethodReferenceMatch methRef = (MethodReferenceMatch) this.match;
						if (methRef.isSuperInvocation() && showSuperInvocation()) {
							this.line.append(" SUPER INVOCATION");
						}
					}
				}
				if (this.showAccess) {
					if (this.match instanceof FieldReferenceMatch) {
						FieldReferenceMatch fieldRef = (FieldReferenceMatch) this.match;
						if (fieldRef.isReadAccess()) {
							this.line.append(" READ");
							if (fieldRef.isWriteAccess()) this.line.append("/WRITE");
							this.line.append(" ACCESS");
						} else if (fieldRef.isWriteAccess()) {
							this.line.append(" WRITE ACCESS");
						}
					} else if (this.match instanceof LocalVariableReferenceMatch) {
						LocalVariableReferenceMatch variableRef = (LocalVariableReferenceMatch) this.match;
						if (variableRef.isReadAccess()) {
							this.line.append(" READ");
							if (variableRef.isWriteAccess()) this.line.append("/WRITE");
							this.line.append(" ACCESS");
						} else if (variableRef.isWriteAccess()) {
							this.line.append(" WRITE ACCESS");
						}
					}
				}
			} catch (JavaModelException e) {
				this.line.append("\n");
				this.line.append(e.toString());
			}
		}

