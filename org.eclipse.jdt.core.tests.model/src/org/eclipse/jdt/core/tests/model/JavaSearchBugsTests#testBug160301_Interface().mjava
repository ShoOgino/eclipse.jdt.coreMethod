public void testBug160301_Interface() throws CoreException {
	resultCollector.showRule = true;
	workingCopies = new ICompilationUnit[1];
	workingCopies[0] = getWorkingCopy("/JavaSearchBugs/src/Test.java",
		"public class Test {\n" + 
		"	interface I {\n" + 
		"		void foo();\n" + 
		"	}\n" + 
		"	class A1 implements I {\n" + 
		"		public void foo() {}\n" + 
		"		void a1() {\n" + 
		"			foo();\n" + 
		"		}\n" + 
		"	}\n" + 
		"	class B1 extends A1 {\n" + 
		"		void b1() {\n" + 
		"			foo();\n" + 
		"		}\n" + 
		"	}\n" + 
		"	class C1 extends B1 {\n" + 
		"		public void foo() {}\n" + 
		"		void c1() {\n" + 
		"			foo();\n" + 
		"		}\n" + 
		"	}\n" + 
		"	abstract class A2 implements I {\n" + 
		"		void a2() {\n" + 
		"			foo();\n" + 
		"		}\n" + 
		"	}\n" + 
		"	class B2 extends A2 {\n" + 
		"		public void foo() {}\n" + 
		"		void b2() {\n" + 
		"			foo();\n" + 
		"		}\n" + 
		"	}\n" + 
		"	class A3 implements I {\n" + 
		"		public void foo() {}\n" + 
		"		void a3() {\n" + 
		"			foo();\n" + 
		"		}\n" + 
		"	}\n" + 
		"}"
	);
	IMethod method = workingCopies[0].getType("Test").getType("I").getMethod("foo", new String[0]);
	search(method, REFERENCES);
	assertSearchResults(
		"src/Test.java void Test$A1.a1() [foo()] EXACT_MATCH\n" + 
		"src/Test.java void Test$B1.b1() [foo()] EXACT_MATCH\n" + 
		"src/Test.java void Test$A2.a2() [foo()] EXACT_MATCH\n" + 
		"src/Test.java void Test$B2.b2() [foo()] EXACT_MATCH\n" + 
		"src/Test.java void Test$A3.a3() [foo()] EXACT_MATCH"
	);
}

