/*
 * A test for bug 162621. Tests that a library jar that is initially invalid but transitions
 * to being valid becomes visible in name lookup. Previously the jar would stay in the invalid
 * archive cache until a classpath change was generated, and would not make it into the project's
 * JavaProjectElementInfo cache without restarting Eclipse or closing and reopening the project.
 */
public void testTransitionFromInvalidToValidJar() throws CoreException, IOException {
	String transitioningJar = getExternalPath() + "transitioningJar.jar";
	java.nio.file.Path transitioningJarPath = FileSystems.getDefault().getPath(transitioningJar);
	IPath transitioningIPath = Path.fromOSString(transitioningJar);

	try {
		Util.createJar(
				new String[] {
						"test1/IResource.java", //$NON-NLS-1$
						"package test1;\n" + //$NON-NLS-1$
						"public class IResource {\n" + //$NON-NLS-1$
						"}" //$NON-NLS-1$
					},
				new String[] {
					"META-INF/MANIFEST.MF",
					"Manifest-Version: 1.0\n"
				},
				transitioningJar,
				JavaCore.VERSION_1_4);

		// Set up the project with the invalid jar and allow all of the classpath validation
		// and delta processing to complete.
		JavaModelManager.throwIoExceptionsInGetZipFile = true;
		JavaProject proj = (JavaProject) createJavaProject("P", new String[] {}, new String[] {transitioningJar}, "bin");
		JavaModelManager.getJavaModelManager().getJavaModel().refreshExternalArchives(null, null);
		waitForAutoBuild();

		assertTrue("The invalid archive cache should report that the jar is invalid",
				!JavaModelManager.getJavaModelManager().getArchiveValidity(transitioningIPath).isValid());
		IType type = getNameLookup(proj).findType("test1.IResource", false, NameLookup.ACCEPT_CLASSES);
		assertEquals("Name lookup should fail when the jar is invalid", null, type);

		// Cause IO exceptions to be thrown on all file operations
		JavaModelManager.throwIoExceptionsInGetZipFile = false;

		// Since the timestamp hasn't changed, an external archive refresh isn't going
		// to update the caches or cause name lookups to work.
		JavaModelManager.getJavaModelManager().getJavaModel().refreshExternalArchives(null, null);
		assertTrue("External archive refresh sees no changes, so the invalid archive cache should be unchanged",
				!JavaModelManager.getJavaModelManager().getArchiveValidity(transitioningIPath).isValid());
		type = getNameLookup(proj).findType("test1.IResource", false, NameLookup.ACCEPT_CLASSES);
		assertEquals("External archive refresh sees no changes, so the project cache should be unchanged",
				null, type);

		// Re-validating the jar via validateClasspathEntry() forces eviction from the
		// invalid archive cache more quickly than waiting for the time-based eviction,
		// allowing the test to run more quickly.
		IClasspathEntry transitioningEntry = JavaCore.newLibraryEntry(transitioningIPath, null, null);
		ClasspathEntry.validateClasspathEntry(proj, transitioningEntry, false, false);

		assertFalse("The invalid archive cache should no longer report the jar as invalid",
				!JavaModelManager.getJavaModelManager().getArchiveValidity(transitioningIPath).isValid());
		type = getNameLookup(proj).findType("test1.IResource", false, NameLookup.ACCEPT_CLASSES);
		assertFalse("Name lookup should be able to find types in the valid jar", type == null);
	} finally {
		Files.deleteIfExists(transitioningJarPath);
		deleteProject("P");
	}
}

