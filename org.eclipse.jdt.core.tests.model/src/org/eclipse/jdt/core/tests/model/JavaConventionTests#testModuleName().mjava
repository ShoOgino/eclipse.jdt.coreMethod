	public void testModuleName() {
		int length = VERSIONS.length;
		for (int i = 0; i < length; i++) { // source level
			for (int j = 0; j < length; j++) { // compliance level
				if (i >= 8 && j >= 8) { // source and compliance level > VERSION_9
					validateModuleName(null, VERSIONS[i], VERSIONS[j], IStatus.ERROR, "A module name must not be null");
					validateModuleName("mod.one", VERSIONS[i], VERSIONS[j], IStatus.OK, "OK");
					validateModuleName("mod_one", VERSIONS[i], VERSIONS[j], IStatus.OK, "OK");
					validateModuleName("one.java", VERSIONS[i], VERSIONS[j], IStatus.OK, "OK");
					validateModuleName("m0d.one", VERSIONS[i], VERSIONS[j], IStatus.OK, "OK");
					validateModuleName("1mod1. one", VERSIONS[i], VERSIONS[j], IStatus.ERROR, "'1mod1' is not a valid Java identifier");
					validateModuleName("mod1.2one", VERSIONS[i], VERSIONS[j], IStatus.ERROR, "'2one' is not a valid Java identifier");
					validateModuleName("mod..one", VERSIONS[i], VERSIONS[j], IStatus.ERROR, "A module name must not contain consecutive dots");
					validateModuleName(".mod.one", VERSIONS[i], VERSIONS[j], IStatus.ERROR, "A module name cannot start or end with a dot");
					validateModuleName("mod.one.", VERSIONS[i], VERSIONS[j], IStatus.ERROR, "A module name cannot start or end with a dot");
					validateModuleName(".mod.one.", VERSIONS[i], VERSIONS[j], IStatus.ERROR, "A module name cannot start or end with a dot");
					validateModuleName("mod.one ", VERSIONS[i], VERSIONS[j], IStatus.ERROR, "A module name must not start or end with a blank");
					validateModuleName(" mod.one", VERSIONS[i], VERSIONS[j], IStatus.ERROR, "A module name must not start or end with a blank");
					validateModuleName("java one", VERSIONS[i], VERSIONS[j], IStatus.ERROR, "'java one' is not a valid Java identifier");
					validateModuleName("mod,one", VERSIONS[i], VERSIONS[j], IStatus.ERROR, "'mod,one' is not a valid Java identifier");
					validateModuleName("mod1.one", VERSIONS[i], VERSIONS[j], IStatus.WARNING, "A module name should avoid terminal digits");
					validateModuleName("mod.one1.two", VERSIONS[i], VERSIONS[j], IStatus.WARNING, "A module name should avoid terminal digits");
					validateModuleName("java.one", VERSIONS[i], VERSIONS[j], IStatus.WARNING, "java is reserved for system modules");
					validateModuleName("mod. one", VERSIONS[i], VERSIONS[j], IStatus.OK, "OK");

					// Now try using keywords
					validateModuleName("module.requires", VERSIONS[i], VERSIONS[j], IStatus.OK, "OK");
					validateModuleName("exports.to", VERSIONS[i], VERSIONS[j], IStatus.OK, "OK");
					validateModuleName("provides.with", VERSIONS[i], VERSIONS[j], IStatus.OK, "OK");
					validateModuleName("opens.uses", VERSIONS[i], VERSIONS[j], IStatus.OK, "OK");
					validateModuleName("transitive.open", VERSIONS[i], VERSIONS[j], IStatus.OK, "OK");
					validateModuleName("static.requires", VERSIONS[i], VERSIONS[j], IStatus.ERROR, "'static' is not a valid Java identifier");
					validateModuleName("class.interface.method", VERSIONS[i], VERSIONS[j], IStatus.ERROR, "'class' is not a valid Java identifier");
				}
			}
		}
	}

