	public void testReconcileSingleProject02() throws CoreException {
		ICompilationUnit workingCopy = null;
		try {
			createJavaProject("P", new String[] {""}, new String[] {"JCL_LIB"}, "bin");
			String source = 
				"public class Test {\n" + 
				"	public static void main(String[] args) {\n" + 
				"		new SFoo().foo();\n" + 
				"		new SBar().bar();\n" + 
				"	}\n" + 
				"}\n";
			createFile(
				"/P/Foo.java", 
				"class SFoo { void foo() {} }\n"
			);
			createFile(
				"/P/Test.java", 
				source
			);
			createFile(
				"/P/Bar.java", 
				"class SBar{ void bar() {} }\n"
			);
			ProblemRequestor problemRequestor =  new ProblemRequestor();
			workingCopy = getCompilationUnit("/P/Test.java").getWorkingCopy(new WorkingCopyOwner() {}, problemRequestor, null);
			problemRequestor.initialize(source.toCharArray());
			workingCopy.getBuffer().setContents(source);
			workingCopy.reconcile(AST.JLS3, true, null, null);
			if (problemRequestor.problemCount > 0) {
				assertEquals("Working copy should NOT have any problem!", "", problemRequestor.problems.toString());
			}

			// Delete secondary type => should get a problem
			waitUntilIndexesReady();
			deleteFile("/P/Bar.java");
			workingCopy.reconcile(AST.JLS3, true, null, null);
			assertEquals("Working copy should not find secondary type 'Bar'!", 1, problemRequestor.problemCount);
			assertEquals("Working copy should have problem!",
				"----------\n" +
				"----------\n" +
				"----------\n" +
				"1. ERROR in /P/Test.java (at line 4)\n" +
				"	new SBar().bar();\n" +
				"	    ^^^^\n" +
				"SBar cannot be resolved to a type\n" +
				"----------\n",
				problemRequestor.problems.toString()
			);

			// Fix the problem
			source = 
				"public class Test {\n" + 
				"	public static void main(String[] args) {\n" + 
				"		new SFoo().foo();\n" + 
				"	}\n" + 
				"}\n";
			problemRequestor.initialize(source.toCharArray());
			workingCopy.getBuffer().setContents(source);
			workingCopy.reconcile(AST.JLS3, true, null, null);
			if (problemRequestor.problemCount > 0) {
				assertEquals("Working copy should NOT have any problem!", "", problemRequestor.problems.toString());
			}
		} finally {
			if (workingCopy != null) workingCopy.discardWorkingCopy();
			deleteProject("P");
		}
	}

