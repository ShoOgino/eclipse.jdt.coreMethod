/**
 * 32905 - deadlocked if activating initializer while some concurrent action is populating the JavaModel
 */
public void testDeadlock01() throws CoreException {

	System.out.println("Test deadlock scenario");
	try {
		ContainerInitializer.setInitializer(new ClasspathInitializerTests.DefaultContainerInitializer(new String[] {"P", ""}){
			public void initialize(IPath containerPath, IJavaProject project) throws CoreException {
				System.out.println(Thread.currentThread() + "initializer has started: attempting to acquire workspace lock");
				super.initialize(containerPath, project);
				System.out.println(Thread.currentThread() + "initializer has finished");
			}

		});
		final IJavaProject project = this.createJavaProject(
				"P", 
				new String[] {}, 
				new String[] {"org.eclipse.jdt.core.tests.model.TEST_CONTAINER"}, 
				"");
		
		// simulate state on startup (flush containers, and discard their previous values)
		project.getJavaModel().close();
		JavaModelManager.PreviousSessionContainers = new HashMap(5);
		JavaModelManager.Containers = new HashMap(5);
		JavaModelManager.getJavaModelManager().removePerProjectInfo((JavaProject)project);

		// use a thread to hold the lock, so as to recreate potential deadlock situation
		final Semaphore permissionToPopulateModel = new Semaphore(0); // first acquisition will wait
		final Semaphore permissionToModifyResource = new Semaphore(0); // first acquisition to wait
		final Semaphore hasCompleted = new Semaphore(0); 
		
		// trigger some delta notification in different thread
		Thread performJavaOperationInsideWorkspaceLock = new Thread(new Runnable(){
				public void run() {
					try {
						ResourcesPlugin.getWorkspace().run(new IWorkspaceRunnable() {
							public void run(IProgressMonitor monitor)	throws CoreException {
								System.out.println(Thread.currentThread() + " got workspace lock");
								permissionToPopulateModel.release();
								permissionToModifyResource.acquire(); // ensure the java model lock is taken
								ThreadSafetyTests.this.createFile("/P/X.java", "public class X {}");
								System.out.println(Thread.currentThread() + " created file X.java");
							}
						}, null);
					} catch (CoreException e) {
					}
					hasCompleted.release();
					System.out.println(Thread.currentThread() +" ResourceModification DONE");
				}
			},"ModifyResource");
		performJavaOperationInsideWorkspaceLock.setDaemon(true);
		performJavaOperationInsideWorkspaceLock.start();

		Thread attemptPopulateTheJavaModel = new Thread(new Runnable(){
				public void run() {
					try {
						//synchronized(JavaModelManager.getJavaModelManager()) {
							permissionToPopulateModel.acquire(); // ensure workspace lock is taken already
							System.out.println(Thread.currentThread() + " about to take Java model lock");
							// needs the JavaModel lock to populate the project
							project.getChildren(); // trigger classpath initializer activation (requires workspace lock)
							permissionToModifyResource.release();
							System.out.println(Thread.currentThread() + " done populating the model");
						//}
					} catch (JavaModelException e) {
					}
					hasCompleted.release();
					System.out.println(Thread.currentThread() +" Populate JavaModel DONE");
				}
			},"PopulateModel");
		attemptPopulateTheJavaModel.setDaemon(true);
		attemptPopulateTheJavaModel.start();

		hasCompleted.acquire(); // ensure both actions did complete
		hasCompleted.acquire();
		System.out.println("SUCCESS - no deadlock encountered");
	} finally {
		// cleanup  
		this.deleteProject("P");
	}
}

