/*
 * Ensures that if the initializer doesn't initialize a variable, it can be
 * initialized later on.
 */
public void testVariableInitializer6() throws CoreException {
	try {
		final StringBuffer buffer = new StringBuffer();
		VariablesInitializer.setInitializer(new VariablesInitializer.ITestInitializer() {
			public void initialize(String variable) throws JavaModelException {
				// do nothing
				buffer.append("Ignoring request to initialize");
			}
		});
		
		// cause variable initializer to be called
		IPath path = JavaCore.getClasspathVariable("TEST_SRC");
		assertEquals(
			"Unexpected value of TEST_SRC after initializer was called",
			null,
			path);
		assertEquals(
			"Unexpected trace of initializer 1",
			"Ignoring request to initialize",
			buffer.toString());
			
		// explicitely set classpath var
		buffer.delete(0, buffer.length());
		IPath varValue = new Path("src.zip");
		JavaCore.setClasspathVariable("TEST_SRC", varValue, null);
		path = JavaCore.getClasspathVariable("TEST_SRC");
		assertEquals(
			"Unexpected value of TEST_SRC after setting it",
			varValue,
			path);
		assertEquals(
			"Unexpected trace of initializer 2",
			"",
			buffer.toString());
	} finally {
		VariablesInitializer.reset();
	}
}

