//
//	/*
//	 * Search several occurences of a selection in a compilation unit source and returns its start and length.
//	 * If occurence is negative, then perform a backward search from the end of file.
//	 * If selection starts or ends with a comment (to help identification in source), it is removed from returned selection info.
//	 */
//	protected int[] selectionInfo(ICompilationUnit cu, String selection, int occurences) throws JavaModelException {
//		String source = cu.getSource();
//		int index = occurences < 0 ? source.lastIndexOf(selection) : source.indexOf(selection);
//		int max = Math.abs(occurences)-1;
//		for (int n=0; index >= 0 && n<max; n++) {
//			index = occurences < 0 ? source.lastIndexOf(selection, index) : source.indexOf(selection, index+selection.length());
//		}
//		StringBuffer msg = new StringBuffer("Selection '");
//		msg.append(selection);
//		if (index >= 0) {
//			if (selection.startsWith("/**")) { // comment is before
//				int start = source.indexOf("*/", index);
//				if (start >=0) {
//					return new int[] { start+2, selection.length()-(start+2-index) };
//				} else {
//					msg.append("' starts with an unterminated comment");
//				}
//			} else if (selection.endsWith("*/")) { // comment is after
//				int end = source.lastIndexOf("/**", index+selection.length());
//				if (end >=0) {
//					return new int[] { index, index-end };
//				} else {
//					msg.append("' ends with an unstartted comment");
//				}
//			} else { // no comment => use whole selection
//				return new int[] { index, selection.length() };
//			}
//		} else {
//			msg.append("' was not found in ");
//		}
//		msg.append(cu.getElementName());
//		msg.append(":\n");
//		msg.append(source);
//		assertTrue(msg.toString(), false);
//		return null;
//	}
//
//	/**
//	 * Select a local variable in a compilation unit identified with the first occurence in the source of a given selection.
//	 * @param unit
//	 * @param selection
//	 * @return IType
//	 * @throws JavaModelException
//	 */
//	protected ILocalVariable selectLocalVariable(ICompilationUnit unit, String selection) throws JavaModelException {
//		return selectLocalVariable(unit, selection, 1);
//	}
//
//	/**
//	 * Select a local variable in a compilation unit identified with the nth occurence in the source of a given selection.
//	 * @param unit
//	 * @param selection
//	 * @param occurences
//	 * @return IType
//	 * @throws JavaModelException
//	 */
//	protected ILocalVariable selectLocalVariable(ICompilationUnit unit, String selection, int occurences) throws JavaModelException {
//		return (ILocalVariable) selectJavaElement(unit, selection, occurences, IJavaElement.LOCAL_VARIABLE);
//	}
//
//	/**
//	 * Select a method in a compilation unit identified with the first occurence in the source of a given selection.
//	 * @param unit
//	 * @param selection
//	 * @return IMethod
//	 * @throws JavaModelException
//	 */
//	protected IMethod selectMethod(ICompilationUnit unit, String selection) throws JavaModelException {
//		return selectMethod(unit, selection, 1);
//	}
//
//	/**
//	 * Select a method in a compilation unit identified with the nth occurence in the source of a given selection.
//	 * @param unit
//	 * @param selection
//	 * @param occurences
//	 * @return IMethod
//	 * @throws JavaModelException
//	 */
//	protected IMethod selectMethod(ICompilationUnit unit, String selection, int occurences) throws JavaModelException {
//		return (IMethod) selectJavaElement(unit, selection, occurences, IJavaElement.METHOD);
//	}
//
//	/**
//	 * Select a parameterized source method in a compilation unit identified with the first occurence in the source of a given selection.
//	 * @param unit
//	 * @param selection
//	 * @return ParameterizedSourceMethod
//	 * @throws JavaModelException
//	 */
//	protected ResolvedSourceMethod selectParameterizedMethod(ICompilationUnit unit, String selection) throws JavaModelException {
//		return selectParameterizedMethod(unit, selection, 1);
//	}
//	
//	/**
//	 * Select a parameterized source method in a compilation unit identified with the nth occurence in the source of a given selection.
//	 * @param unit
//	 * @param selection
//	 * @param occurences
//	 * @return ParameterizedSourceMethod
//	 * @throws JavaModelException
//	 */
//	protected ResolvedSourceMethod selectParameterizedMethod(ICompilationUnit unit, String selection, int occurences) throws JavaModelException {
//		IMethod type = selectMethod(unit, selection, occurences);
//		assertTrue("Not a parameterized source type: "+type.getElementName(), type instanceof ResolvedSourceMethod);
//		return (ResolvedSourceMethod) type;
//	}
//
//	/**
//	 * Select a parameterized source type in a compilation unit identified with the first occurence in the source of a given selection.
//	 * @param unit
//	 * @param selection
//	 * @return ParameterizedSourceType
//	 * @throws JavaModelException
//	 */
//	protected ResolvedSourceType selectParameterizedType(ICompilationUnit unit, String selection) throws JavaModelException {
//		return selectParameterizedType(unit, selection, 1);
//	}
//	
//	/**
//	 * Select a parameterized source type in a compilation unit identified with the nth occurence in the source of a given selection.
//	 * @param unit
//	 * @param selection
//	 * @param occurences
//	 * @return ParameterizedSourceType
//	 * @throws JavaModelException
//	 */
//	protected ResolvedSourceType selectParameterizedType(ICompilationUnit unit, String selection, int occurences) throws JavaModelException {
//		IType type = selectType(unit, selection, occurences);
//		assertTrue("Not a parameterized source type: "+type.getElementName(), type instanceof ResolvedSourceType);
//		return (ResolvedSourceType) type;
//	}
//
//	/**
//	 * Select a type in a compilation unit identified with the first occurence in the source of a given selection.
//	 * @param unit
//	 * @param selection
//	 * @return IType
//	 * @throws JavaModelException
//	 */
//	protected IType selectType(ICompilationUnit unit, String selection) throws JavaModelException {
//		return selectType(unit, selection, 1);
//	}
//
//	/**
//	 * Select a type in a compilation unit identified with the nth occurence in the source of a given selection.
//	 * @param unit
//	 * @param selection
//	 * @param occurences
//	 * @return IType
//	 * @throws JavaModelException
//	 */
//	protected IType selectType(ICompilationUnit unit, String selection, int occurences) throws JavaModelException {
//		return (IType) selectJavaElement(unit, selection, occurences, IJavaElement.TYPE);
//	}
//
//	/**
//	 * Select a type parameter in a compilation unit identified with the first occurence in the source of a given selection.
//	 * @param unit
//	 * @param selection
//	 * @return IType
//	 * @throws JavaModelException
//	 */
//	protected ITypeParameter selectTypeParameter(ICompilationUnit unit, String selection) throws JavaModelException {
//		return selectTypeParameter(unit, selection, 1);
//	}
//
//	/**
//	 * Select a type parameter in a compilation unit identified with the nth occurence in the source of a given selection.
//	 * @param unit
//	 * @param selection
//	 * @param occurences
//	 * @return IType
//	 * @throws JavaModelException
//	 */
//	protected ITypeParameter selectTypeParameter(ICompilationUnit unit, String selection, int occurences) throws JavaModelException {
//		return (ITypeParameter) selectJavaElement(unit, selection, occurences, IJavaElement.TYPE_PARAMETER);
//	}
//
//	/**
//	 * Select a java element in a compilation unit identified with the nth occurence in the source of a given selection.
//	 * Do not allow subclasses to call this method as we want to verify IJavaElement kind.
//	 */
//	private IJavaElement selectJavaElement(ICompilationUnit unit, String selection, int occurences, int elementType) throws JavaModelException {
//		int[] selectionPositions = selectionInfo(unit, selection, occurences);
//		IJavaElement[] elements = unit.codeSelect(selectionPositions[0], selectionPositions[1]);
//		assertEquals("Invalid selection number", 1, elements.length);
//		assertEquals("Invalid java element type: "+elements[0].getElementName(), elements[0].getElementType(), elementType);
//		return elements[0];
//	}
	protected void setUp () throws Exception {
		super.setUp();
		this.resultCollector = new JavaSearchResultCollector();
//		if (discard) workingCopies = null;
//		discard = true;
	}
//	protected void tearDown() throws Exception {
//		if (discard && workingCopies != null) {
//			discardWorkingCopies(workingCopies);
//		}
//	}

