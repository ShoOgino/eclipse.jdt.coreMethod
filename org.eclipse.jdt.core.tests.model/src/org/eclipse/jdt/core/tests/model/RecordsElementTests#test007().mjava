	// Test things from a binary
	public void test007() throws Exception {
		try {
			String[] sources = {
					"p/Point.java",
					"package p;\n;" +
					"public record Point(int x1, int x2) {\n" +
					"	public Point(int x1, int x2) {\n" +
					"		this.x1 = x1;\n" +
					"		this.x2 = x2;\n" +
					"	}\n" +
					"	public Point(int x1, int x2, int x3) {\n" +
					"		this(x1, x2);\n" +
					"	}\n" +
					"	public Point(int x1, float f2) {\n" +
					"		this(0, 0);\n" +
					"	}\n" +
					"}\n"
				};
			String outputDirectory = Util.getOutputDirectory();

			String jarPath = outputDirectory + File.separator + "records.jar";
			Util.createJar(sources, jarPath, "15", true);

			IJavaProject project = createJavaProject("RecordsElement");
			addClasspathEntry(project, JavaCore.newLibraryEntry(new Path(jarPath), null, null, null, null, false));
			project.open(null);
			project.getProject().build(IncrementalProjectBuilder.FULL_BUILD, null);
			IPackageFragmentRoot[] roots = project.getPackageFragmentRoots();
			IPackageFragmentRoot root = null;
			for (IPackageFragmentRoot iRoot : roots) {
				if (iRoot.getRawClasspathEntry().getPath().toString().endsWith("records.jar")) {
					root = iRoot;
				}
			}
			assertNotNull("root should not be null", root);
			IPackageFragment packageFragment = root.getPackageFragment("p");
			assertNotNull("package is null", packageFragment);
			IOrdinaryClassFile classFile = packageFragment.getOrdinaryClassFile("Point.class");
			assertNotNull("class is null", classFile);
			IType type = classFile.getType();
			assertNotNull("type is null", type);
			assertTrue("should be a record", type.isRecord());
			assertEquals("type should be a record", IJavaElement.TYPE, type.getElementType());

			IField[] fields = type.getFields();
			assertEquals("Incorret no of fields", 0, fields.length);

			IMethod[] methods = type.getMethods();
			assertNotNull("should not be null", methods);
			assertEquals("Incorret no of elements", 8, methods.length); // Point(),  Point(), x1(), x2(), toString(), hashCode(), equals()
			IMethod constructor = methods[0];
			assertTrue("should be a constructor", constructor.isConstructor());
//			assertTrue("should be a canonical constructor", constructor.isCanonicalConstructor());
			assertEquals("incorrect number of parameters", 2, constructor.getNumberOfParameters());
			String[] parameterNames = constructor.getParameterNames();
			assertEquals("incorrect numer of names", 2, parameterNames.length);
			assertEquals("incorrect parameter names", "x1", parameterNames[0]);
			assertEquals("incorrect parameter names", "x2", parameterNames[1]);

			constructor = methods[1];
			assertTrue("should be a constructor", constructor.isConstructor());
//			assertFalse("should not be a canonical constructor", constructor.isCanonicalConstructor());
			assertEquals("incorrect number of parameters", 3, constructor.getNumberOfParameters());

			constructor = methods[2];
			assertTrue("should be a constructor", constructor.isConstructor());
//			assertFalse("should not be a canonical constructor", constructor.isCanonicalConstructor());
			assertEquals("incorrect number of parameters", 2, constructor.getNumberOfParameters());
		}
		finally {
			deleteProject("RecordsElement");
		}
	}

