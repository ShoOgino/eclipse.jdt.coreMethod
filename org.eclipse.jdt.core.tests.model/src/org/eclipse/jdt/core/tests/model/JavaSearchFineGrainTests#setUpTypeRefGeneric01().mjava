/*
 * References to a specific generic IType and all types.
 */
private IType setUpTypeRefGeneric01() throws JavaModelException {
	final ProblemRequestor problemRequestor = new ProblemRequestor();
	this.wcOwner = new WorkingCopyOwner() {
		public IProblemRequestor getProblemRequestor(ICompilationUnit workingCopy) {
			return problemRequestor;
		}
	};
	workingCopies = new ICompilationUnit[3];
	workingCopies[0] = getWorkingCopy("/JavaSearch15/src/type/def/Types.java",
		"package type.def;\n" + 
		"public class Types {}\n"
	);
	workingCopies[1] = getWorkingCopy("/JavaSearch15/src/test01/Generic.java",
		"package test01;\n" + 
		"import java.io.Serializable;\n" + 
		"import type.def.Types;\n" + 
		"public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {\n" + 
		"	Generic<? extends Types, ?, ?> field;\n" + 
		"	Comparable<String> comp;\n" + 
		"	Class<? extends Exception> clazz;\n" + 
		"}\n" + 
		"class A<R> {}\n"
	);
	workingCopies[2] = getWorkingCopy("/JavaSearch15/src/test01/TestGeneric.java",
		"package test01;\n" + 
		"import java.io.Serializable;\n" + 
		"import type.def.Types;\n" + 
		"public class TestGeneric<T> extends Generic<Types, UClass, VClass> {\n" + 
		"	TestGeneric<Types> test;\n" + 
		"	TestGeneric<String> foo(TestGeneric<Types> param1, Comparable<String> param2) {\n" + 
		"		return  null;\n" + 
		"	}\n" + 
		"	Comparable<TestGeneric<Types>> bar() {\n" + 
		"		return null;\n" + 
		"	} \n" + 
		"}\n" + 
		"class UClass extends Types implements Comparable<Types>, Serializable {\n" + 
		"	private static final long serialVersionUID = 1L;\n" + 
		"	public int compareTo(Types o) {\n" + 
		"		return 0;\n" + 
		"	}\n" + 
		"}\n" + 
		"class VClass extends A<Types> {}\n"
	);
	assertEquals("CU Should not have any problem!",
		"----------\n" +
		"----------\n",
		problemRequestor.problems.toString()
	);
	this.resultCollector.showSelection = true;
	this.resultCollector.showOffset = true;
	return workingCopies[0].getType("Types");
}

