/**
 * @bug 429012
 * @test tests search for Reference expression - X<T>.Y<K> :: new form, with type arguments
 *
 * @see "https://bugs.eclipse.org/bugs/show_bug.cgi?id=429012"
 *
 */
public void testBug429012_0015() throws CoreException {
	this.workingCopies = new ICompilationUnit[1];
	this.workingCopies[0] = getWorkingCopy("/JavaSearchBugs/src/b429012/X.java",
			"interface I<T> {\n"+
			"    T get();\n"+
			"}\n"+
			"/**\n"+
			" * @see Y#Y()\n"+
			" */\n"+
			"public class X  {\n"+
			"    public static void main(String [] args) {\n"+
			"        I<Y<String>> s = Y<String>::<Integer>new;\n"+
			"        s.get().equals(new Y<String>()); \n"+
			"    }\n"+
			"}\n"+
			"class Y<E> {\n"+
			"    <T> Y() {\n"+
			"        System.out.println(\"Y<E>::<T>new\");\n"+
			"    }\n"+
			"}\n"
	);
	IType type = this.workingCopies[0].getType("Y");
	IMethod method = type.getMethod("Y", new String[] {});
	search(method, METHOD_REFERENCE_EXPRESSION, ERASURE_RULE);
	assertSearchResults(
			"src/b429012/X.java void b429012.X.main(String[]) [Y<String>::<Integer>new] EXACT_MATCH"
	);
}// https://bugs.eclipse.org/bugs/show_bug.cgi?id=429012, [1.8][search] Add finegrain (limitTo) option for method reference expressions

