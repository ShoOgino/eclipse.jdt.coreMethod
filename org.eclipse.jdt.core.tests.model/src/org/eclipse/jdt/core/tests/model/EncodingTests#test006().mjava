	/**
	 * Get compilation unit source on a file written in UTF-8 charset using no specific encoding.
	 * Verification is done by comparing source with file contents read directly with no specific encoding...
	 */
	// TODO (frederic) put back assertions when failure on linux platform will be fixed
	public void test006() throws JavaModelException, CoreException {

		// Get compilation unit and compare source
		this.utf8Source = getCompilationUnit(this.utf8File.getFullPath().toString());
		String source = this.utf8Source.getSource();
		String encodedContents = new String (Util.getResourceContentsAsCharArray(this.utf8File));
		System.out.println("Encoding tests006:");
		System.out.println("  - file encoding: "+this.utf8File.getCharset());
		System.out.println("  - project encoding: "+this.encodingProject.getDefaultCharset());
		System.out.println("  - workspace encoding: "+getWorkspaceRoot().getDefaultCharset());
		if (encodedContents.equals(source)) {
			System.out.println("  => SUCCESS: sources are identical");
		} else {
			System.out.println("  => FAIL: Encoded UTF-8 source should have been decoded the same way!");
		}
//		assertTrue("Encoded UTF-8 source should have been decoded the same way!", encodedContents.equals(source));
			
		// Now compare bytes array
		byte[] sourceBytes = source.getBytes();
		byte[] encodedBytes = Util.getResourceContentsAsByteArray(this.utf8File);
		if (encodedBytes.length == sourceBytes.length) {
			System.out.println("  => SUCCESS: bytes arrays have same size");
		} else {
			System.out.println("  => FAIL: Wrong size of encoded string");
		}
//		assertEquals("Wrong size of encoded string", encodedBytes.length, sourceBytes.length);
		for (int i = 0, max = sourceBytes.length; i < max; i++) {
			if (sourceBytes[i] != encodedBytes[i]) {
				System.out.println("  => FAIL: Wrong size of encoded character at " + i);
				break;
			}
//			assertTrue("Wrong size of encoded character at " + i, sourceBytes[i] == encodedBytes[i]);
		}
	}

