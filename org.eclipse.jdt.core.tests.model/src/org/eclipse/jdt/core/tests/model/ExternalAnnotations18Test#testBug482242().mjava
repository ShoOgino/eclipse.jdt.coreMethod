	@SuppressWarnings("deprecation")
	public void testBug482242() throws CoreException, IOException {
		try {
			String projectName = "Bug482242";
			setupJavaProject(projectName, true, true);
			this .project.setOption(JavaCore.COMPILER_PB_ANNOTATED_TYPE_ARGUMENT_TO_UNANNOTATED, JavaCore.WARNING);
			addEeaToVariableEntry("JCL18_FULL", "/"+projectName+"/annots");
			IPackageFragment fragment = this.project.getPackageFragmentRoots()[0].createPackageFragment("test1", true, null);
			ICompilationUnit unit = fragment.getCompilationUnit("Test.java").getWorkingCopy(new NullProgressMonitor());
			CompilationUnit reconciled = unit.reconcile(AST.JLS8, true, null, new NullProgressMonitor());
			IProblem[] problems = reconciled.getProblems();
			assertProblems(problems,
					new String[] {
						"Pb(983) Unsafe null type conversion (type annotations): The value of type 'Collector<@NonNull String,capture#of ?,Set<@NonNull String>>' " +
						"is made accessible using the less-annotated type 'Collector<? super String,Object,Set<@NonNull String>>'",
					},
					new int[] {11},
					new int[] { ProblemSeverities.Warning });

			this.project.getProject().build(IncrementalProjectBuilder.FULL_BUILD, null);
			IMarker[] markers = this.project.getProject().findMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, false, IResource.DEPTH_INFINITE);
			sortMarkers(markers);
			assertMarkers("Markers after full build",
					"Unsafe null type conversion (type annotations): The value of type 'Collector<@NonNull String,capture#of ?,Set<@NonNull String>>' is made accessible using the less-annotated type 'Collector<? super String,Object,Set<@NonNull String>>'",
					markers);
			int[] severities = new int[] { IMarker.SEVERITY_WARNING };
			for (int i = 0; i < markers.length; i++) {
				IMarker marker = markers[i];
				assertEquals("severity of "+marker.getAttribute(IMarker.MESSAGE),
						severities[i], marker.getAttribute(IMarker.SEVERITY));
			}
		} finally {
			deleteProject("Bug500024");
		}
	}

