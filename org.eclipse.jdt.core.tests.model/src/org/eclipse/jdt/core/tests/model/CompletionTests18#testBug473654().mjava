public void testBug473654() throws Exception {
	this.workingCopies = new ICompilationUnit[1];
	this.workingCopies[0] = getWorkingCopy(
		"/Completion/src/Foo.java",
		"class Foo {\n" + 
		"    Runnable foo() {\n" + 
		"        return () -> new Object() {\n" + 
		"            // press Ctrl+Space before the comment\n" + 
		"        };\n" + 
		"    }\n" + 
		"    \n" + 
		"    static void bar() { /**/ }\n" + 
		"}\n");
	
	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
	String str = this.workingCopies[0].getSource();
	String completeBefore = "// press Ctrl+Space before the comment";
	int cursorLocation = str.indexOf(completeBefore);
	this.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);

	int keywordRelevance = R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED + R_CASE;
	int overrideRelevance = R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED + R_CASE + R_METHOD_OVERIDE;

	assertResults(
			"[POTENTIAL_METHOD_DECLARATION]{, LObject;, ()V, , null, "+(R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED)+"}\n" + 
			"abstract[KEYWORD]{abstract, null, null, abstract, null, "+keywordRelevance+"}\n" + 
			"class[KEYWORD]{class, null, null, class, null, "+keywordRelevance+"}\n" + 
			"enum[KEYWORD]{enum, null, null, enum, null, "+keywordRelevance+"}\n" + 
			"final[KEYWORD]{final, null, null, final, null, "+keywordRelevance+"}\n" + 
			"interface[KEYWORD]{interface, null, null, interface, null, "+keywordRelevance+"}\n" + 
			"native[KEYWORD]{native, null, null, native, null, "+keywordRelevance+"}\n" + 
			"private[KEYWORD]{private, null, null, private, null, "+keywordRelevance+"}\n" + 
			"protected[KEYWORD]{protected, null, null, protected, null, "+keywordRelevance+"}\n" + 
			"public[KEYWORD]{public, null, null, public, null, "+keywordRelevance+"}\n" + 
			"static[KEYWORD]{static, null, null, static, null, "+keywordRelevance+"}\n" + 
			"strictfp[KEYWORD]{strictfp, null, null, strictfp, null, "+keywordRelevance+"}\n" + 
			"synchronized[KEYWORD]{synchronized, null, null, synchronized, null, "+keywordRelevance+"}\n" + 
			"transient[KEYWORD]{transient, null, null, transient, null, "+keywordRelevance+"}\n" + 
			"volatile[KEYWORD]{volatile, null, null, volatile, null, "+keywordRelevance+"}\n" + 
			"Foo[TYPE_REF]{Foo, , LFoo;, null, null, "+(R_DEFAULT + R_RESOLVED + R_INTERESTING + R_NON_RESTRICTED + R_CASE + R_UNQUALIFIED)+"}\n" + 
			"clone[METHOD_DECLARATION]{protected Object clone() throws CloneNotSupportedException, Ljava.lang.Object;, ()Ljava.lang.Object;, clone, null, "+overrideRelevance+"}\n" + 
			"equals[METHOD_DECLARATION]{public boolean equals(Object obj), Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, (obj), "+overrideRelevance+"}\n" + 
			"finalize[METHOD_DECLARATION]{protected void finalize() throws Throwable, Ljava.lang.Object;, ()V, finalize, null, "+overrideRelevance+"}\n" + 
			"hashCode[METHOD_DECLARATION]{public int hashCode(), Ljava.lang.Object;, ()I, hashCode, null, "+overrideRelevance+"}\n" + 
			"toString[METHOD_DECLARATION]{public String toString(), Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, "+overrideRelevance+"}",
			requestor.getResults());
}

