	public void testBug73336b() throws CoreException {
		ICompilationUnit[] workingCopies = new ICompilationUnit[4];
		try {
			WorkingCopyOwner owner = new WorkingCopyOwner() {};
			workingCopies[0] = getWorkingCopy("/JavaSearchBugs/src/b73336b/A.java",
				"package b73336b;\n" + 
				"public class A {}\n",
				owner
				);
			workingCopies[1] = getWorkingCopy("/JavaSearchBugs/src/b73336b/B.java",
				"package b73336b;\n" + 
				"public class B extends X<A, A> {\n" + 
				"}\n",
				owner,
				true);
			workingCopies[2] = getWorkingCopy("/JavaSearchBugs/src/b73336b/C.java",
				"package b73336b;\n" + 
				"public class C extends X<A, A>.Member<A> {\n" + 
				"	public C() {\n" + 
				"		new X<A, A>().super();\n" + 
				"	}\n" + 
				"}\n",
				owner,
				true);
			workingCopies[3] = getWorkingCopy("/JavaSearchBugs/src/b73336b/X.java",
				"package b73336b;\n" + 
				"public class X<T, U> {\n" + 
				"	<V> void foo(V v) {}\n" + 
				"	class Member<T> {\n" + 
				"		void foo() {}\n" + 
				"	}\n" + 
				"}\n",
				owner,
				true	);
			// search for first and second method should both return 2 inaccurate matches
			IType type = workingCopies[0].getType("A");
			search(type,
				REFERENCES,
				getJavaSearchScopeBugs("b73336b", false), 
				this.resultCollector);
			assertSearchResults(
				"src/b73336b/B.java b73336b.B [A] EXACT_MATCH\n" + 
				"src/b73336b/B.java b73336b.B [A] EXACT_MATCH\n" + 
				"src/b73336b/C.java b73336b.C [A] EXACT_MATCH\n" + 
				"src/b73336b/C.java b73336b.C [A] EXACT_MATCH\n" + 
				"src/b73336b/C.java b73336b.C [A] EXACT_MATCH\n" + 
				"src/b73336b/C.java b73336b.C() [A] EXACT_MATCH\n" + 
				"src/b73336b/C.java b73336b.C() [A] EXACT_MATCH"
			);
		}
		finally {
			discardWorkingCopies(workingCopies);
		}
	}

