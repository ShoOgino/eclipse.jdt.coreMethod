	public void test18() throws JavaModelException {
		setUnit("Test.java",
			"/**\n" + 
			" * @see Test.Method#foo()\n" + 
			" */\n" + 
			"public class Test {\n" + 
			"	/**\n" + 
			"	 * @see Method#foo()\n" + 
			"	 */\n" + 
			"	class Method {\n" + 
			"		/**\n" + 
			"		 * @see #foo()\n" + 
			"		 * @see Method#foo()\n" + 
			"		 * @see Test.Method#foo()\n" + 
			"		 */\n" + 
			"		void foo() {}\n" + 
			"	}\n" + 
			"}"
		);
		IJavaElement[] elements = new IJavaElement[11];
		elements[0] = selectType(this.workingCopies[0], "Test", 2);
		elements[1] = selectType(this.workingCopies[0], "Method");
		elements[2] = selectMethod(this.workingCopies[0], "foo");
		elements[3] = selectType(this.workingCopies[0], "Method", 2);
		elements[4] = selectMethod(this.workingCopies[0], "foo", 2);
		elements[5] = selectMethod(this.workingCopies[0], "foo", 3);
		elements[6] = selectType(this.workingCopies[0], "Method", 4);
		elements[7] = selectMethod(this.workingCopies[0], "foo", 4);
		elements[8] = selectType(this.workingCopies[0], "Test", 3);
		elements[9] = selectType(this.workingCopies[0], "Method", 5);
		elements[10] = selectMethod(this.workingCopies[0], "foo", 5);
		assertElementsEqual("Invalid selection(s)",
			"Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\n" + 
			"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\n" + 
			"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\n" + 
			"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\n" + 
			"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\n" + 
			"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\n" + 
			"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\n" + 
			"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\n" + 
			"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\n" + 
			"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\n" + 
			"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]",
			elements
		);
	}

