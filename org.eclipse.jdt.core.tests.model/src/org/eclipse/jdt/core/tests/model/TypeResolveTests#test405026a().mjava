//405026 - IJavaProject#findType(String) finds secondary type if editor is open
//Partial Match is not set for the API Calls.
public void test405026a() throws CoreException, IOException {
	try {
		JavaProject project = (JavaProject) createJavaProject("P", new String[] {"src"}, new String[] {"JCL15_LIB"}, "bin", "1.5");
		String source = "package p;\n"  +
						"\n" +
						"public interface test13 {\n"  +
						"}\n"  +
						"\n"  +
						"/**\n" +
						" * @noreference\n"  +
						" */\n"  +
						"interface test13outer {}\n"  +
						"class Foo {}\n";
		createFolder("/P/src/p");
		createFile("/P/src/p/test13.java", source);
		waitForAutoBuild();
		IType itype = project.findType("p.test13");
		assertNotNull(itype);
		itype = project.findType("p.test13outer");
		assertNull("Should be a null", itype);

		ICompilationUnit[] workingCopy = new ICompilationUnit[1];
		workingCopy[0] = getWorkingCopy("/P/src/p/test13.java", source);
		NameLookup nameLookup = project.newNameLookup(workingCopy);
		itype = nameLookup.findType("p.test13", false, NameLookup.ACCEPT_ALL);
		assertEquals("test13", itype.getElementName());
		Answer answer = nameLookup.findType("p.test13outer", false, /*NameLookup.ACCEPT_ALL*/ NameLookup.ACCEPT_INTERFACES, false, true, false, null);
		assertNull(answer);

		itype = project.findType("p.test13outer", (IProgressMonitor) null);
		assertEquals("test13outer", itype.getElementName());

		itype = project.findType("p", "test13");
		assertEquals("test13", itype.getElementName());

		itype = project.findType("p", "test13outer");
		assertNull(itype);

		itype = project.findType("p.test13", workingCopy[0].getOwner());
		assertEquals("test13", itype.getElementName());

		itype = project.findType("p.test13outer", workingCopy[0].getOwner());
		assertNull(itype);

		itype = project.findType("p", "test13outer", (IProgressMonitor) null);
		assertEquals("test13outer", itype.getElementName());

		itype = project.findType("p", "test13", workingCopy[0].getOwner());
		assertEquals("test13", itype.getElementName());

		itype = project.findType("p", "test13outer", workingCopy[0].getOwner());
		assertNull(itype);

		itype = project.findType("p.test13outer", workingCopy[0].getOwner(), (IProgressMonitor) null);
		assertEquals("test13outer", itype.getElementName());

		itype = project.findType("p", "test13outer", workingCopy[0].getOwner(), (IProgressMonitor) null);
		assertEquals("test13outer", itype.getElementName());

		itype = nameLookup.findType("p.test13outer", false, NameLookup.ACCEPT_ALL);
		assertEquals("test13outer", itype.getElementName());

		answer = nameLookup.findType("p.test13outer", false, NameLookup.ACCEPT_ALL, false);
		assertEquals("test13outer", answer.type.getElementName());

		IPackageFragment[] packageFragments = project.newNameLookup(workingCopy[0].getOwner()).findPackageFragments("p", false);
		itype = nameLookup.findType("test13outer", packageFragments[0], false, NameLookup.ACCEPT_ALL);
		assertNull(itype);

		itype = nameLookup.findType("test13", packageFragments[0], false, NameLookup.ACCEPT_ALL);
		assertEquals("test13", itype.getElementName());

		answer = nameLookup.findType("test13outer", "p", false, NameLookup.ACCEPT_ALL, false);
		assertEquals("test13outer", answer.type.getElementName());

		answer = nameLookup.findType("test13", "p", false, NameLookup.ACCEPT_ALL, false);
		assertEquals("test13", answer.type.getElementName());

		itype = nameLookup.findType("test13outer", packageFragments[0], false, NameLookup.ACCEPT_ALL, false, /* considerSecondaryTypes */ true);
		assertEquals("test13outer", itype.getElementName());

		itype = nameLookup.findType("test13outer", packageFragments[0], false, NameLookup.ACCEPT_ALL, false, /* considerSecondaryTypes */ false);
		assertNull(itype);

		itype = nameLookup.findType("test13", packageFragments[0], false, NameLookup.ACCEPT_ALL, false, /* considerSecondaryTypes */ false);
		assertEquals("test13", itype.getElementName());

		answer = nameLookup.findType("p.test13", false, NameLookup.ACCEPT_ALL, /* considerSecondaryTypes */ false, true, false, null);
		assertEquals("test13", answer.type.getElementName());

		answer = nameLookup.findType("test13", "p", false, NameLookup.ACCEPT_ALL, /* considerSecondaryTypes */ false, true, false, null);
		assertEquals("test13", answer.type.getElementName());

		answer = nameLookup.findType("test13outer", "p", false, NameLookup.ACCEPT_ALL, /* considerSecondaryTypes */ false, true, false, null);
		assertNull(answer);

		answer = nameLookup.findType("test13outer", "p", false, NameLookup.ACCEPT_ALL, /* considerSecondaryTypes */ true, true, false, null);
		assertEquals("test13outer", answer.type.getElementName());
	} finally {
		deleteProject("P");
	}
}

