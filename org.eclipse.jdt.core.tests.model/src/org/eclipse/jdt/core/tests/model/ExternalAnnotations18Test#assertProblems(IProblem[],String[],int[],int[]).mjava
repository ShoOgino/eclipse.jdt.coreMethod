	protected void assertProblems(IProblem[] problems, String[] messages, int[] lines, int[] severities) throws CoreException {
		int nMatch = 0;
		for (int i = 0; i < problems.length; i++) {
			for (int j = 0; j < messages.length; j++) {
				if (messages[j] == null) continue;
				if (problems[i].toString().equals(messages[j])) {
					if (problems[i].getSourceLineNumber() == lines[j]) {
						switch(severities[j] & ProblemSeverities.CoreSeverityMASK ) {
						case ProblemSeverities.Error:
							if (!problems[i].isError()) {
								System.err.println("Not an error as expected: "+messages[j]);					
								continue;
							}
							break;
						case ProblemSeverities.Warning:
							if (!problems[i].isWarning()) {
								System.err.println("Not a warning as expected: "+messages[j]);					
								continue;
							}
							break;
						case ProblemSeverities.Info:
							if (!problems[i].isInfo()) {
								System.err.println("Not an info as expected: "+messages[j]);					
								continue;
							}
							break;
						default:
							throw new IllegalArgumentException("Bad severity expected: "+severities[j]);
						}
						messages[j] = null;
						problems[i] = null;
						nMatch++;
						break;
					} else {
						System.err.println("Match at wrong line: "+problems[i].getSourceLineNumber()+" vs. "+lines[j]+": "+messages[j]);
					}
				}
			}
		}
		for (int i = 0; i < problems.length; i++) {
			if (problems[i] != null)
				fail("Unexpected problem "+problems[i]+" at "+problems[i].getSourceLineNumber());
		}
		for (int i = 0; i < messages.length; i++) {
			if (messages[i] != null)
				System.err.println("Unmatched problem "+messages[i]);
		}
		assertEquals("Number of problems", messages.length, nMatch);
	}

