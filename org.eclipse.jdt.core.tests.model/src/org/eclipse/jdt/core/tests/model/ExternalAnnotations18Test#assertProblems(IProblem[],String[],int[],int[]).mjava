	protected void assertProblems(IProblem[] problems, String[] messages, int[] lines, int[] severities) throws CoreException {
		int nMatch = 0;
		for (int i = 0; i < problems.length; i++) {
			for (int j = 0; j < messages.length; j++) {
				if (messages[j] == null) continue;
				if (problems[i].toString().equals(messages[j])
						&& problems[i].getSourceLineNumber() == lines[j]) {
					switch(severities[j] & ProblemSeverities.CoreSeverityMASK ) {
					case ProblemSeverities.Error:
						if (!problems[i].isError()) continue;
						break;
					case ProblemSeverities.Warning:
						if (!problems[i].isWarning()) continue;
						break;
					case ProblemSeverities.Info:
						if (!problems[i].isInfo()) continue;
						break;
					default:
						throw new IllegalArgumentException("Bad severity expected: "+severities[j]);
					}
					messages[j] = null;
					problems[i] = null;
					nMatch++;
					break;
				}
			}
		}
		for (int i = 0; i < problems.length; i++) {
			if (problems[i] != null)
				fail("Unexpected problem "+problems[i]+" at "+problems[i].getSourceLineNumber());
		}
		for (int i = 0; i < messages.length; i++) {
			if (messages[i] != null)
				System.err.println("Unmatched problem "+messages[i]);
		}
		assertEquals("Number of problems", messages.length, nMatch);
	}

