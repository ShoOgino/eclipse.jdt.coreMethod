	/*
	 * Ensure an OperationCanceledException is correcly thrown when progress monitor is canceled
	 */
	public void testBecomeWorkingCopy4() throws CoreException {
		ICompilationUnit workingCopy = null;
		try {
			workingCopy = getCompilationUnit("P/X.java");

			// count the number of time isCanceled() is called when converting this source unit
			CancelCounter counter = new CancelCounter();
			workingCopy.becomeWorkingCopy(null, counter);
			workingCopy.discardWorkingCopy();

			// throw an OperatonCanceledException at each point isCanceled() is called
			for (int i = 0; i < counter.count; i++) {
				boolean gotException = false;
				try {
					workingCopy.becomeWorkingCopy(null, new Canceler(i));
				} catch (OperationCanceledException e) {
					gotException = true;
				}
				assertTrue("Should get an OperationCanceledException (" + i + ")", gotException);
				workingCopy.discardWorkingCopy();
			}
			
			// last should not throw an OperationCanceledException
			workingCopy.becomeWorkingCopy(null, new Canceler(counter.count));
		} finally {
			if (workingCopy != null) {
				workingCopy.discardWorkingCopy();
			}
		}
	}

