	public void testVarWithIntersectionType() throws CoreException {
		this.wc = getWorkingCopy(
				"/Resolve/src/Hey.java",
				"interface Cloneable {}\n" +
				"\n" +
				"abstract class AbstractSet<S> {}\n" +
				"\n" +
				"class TreeSet<E> extends AbstractSet<E>\n" + 
				"    implements Cloneable, java.io.Serializable\n" + 
				"{}\n" +
				"\n" +
				"class HashSet<E>\n" + 
				"    extends AbstractSet<E>\n" + 
				"    implements Cloneable, java.io.Serializable\n" + 
				"{}\n" + 
				"\n" + 
				"public class Hey {\n" + 
				"    public static void main(String[] args) {\n" + 
				"        var x = args.length > 0 ? new TreeSet<>() : new HashSet<>();\n" + 
				"        x.add(1);\n" + 
				"    }\n" + 
				"}\n");
	
		String str = this.wc.getSource();
		String selection = "x";
		int start = str.lastIndexOf(selection);
		int length = selection.length();
	
		IJavaElement[] elements = this.wc.codeSelect(start, length);
		assertElementsEqual(
			"Unexpected elements",
			"x [in main(String[]) [in Hey [in [Working copy] Hey.java [in <default> [in src [in Resolve]]]]]]",
			elements
		);
		
		String typeSignature = ((LocalVariable)elements[0]).getTypeSignature();
		assertEquals("type signature", "&LAbstractSet<Ljava.lang.Object;>;:LCloneable;:Ljava.io.Serializable;", typeSignature);
		
		assertStringsEqual(
				"Unexpected intersection type bounds",
				"LAbstractSet<Ljava.lang.Object;>;\n" +
				"LCloneable;\n" +
				"Ljava.io.Serializable;\n",
				Signature.getUnionTypeBounds(typeSignature) // method name is wrong, it actually means: getIntersectionTypeBounds
			);
	}

