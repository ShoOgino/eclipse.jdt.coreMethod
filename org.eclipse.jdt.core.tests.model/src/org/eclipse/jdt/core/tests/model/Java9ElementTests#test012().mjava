	public void test012() throws Exception {
		try {
			IJavaProject project = createJavaProject("Java9Elements", new String[] {"src"}, new String[] {"JCL19_LIB"}, "bin", "1.9");
			project.open(null);
				String fileContent =  "module my.mod{" +
									"	provides a.b.C with a.b.CImpl, a.b.DImpl;\n" + 
									"}\n";
				createFolder("/Java9Elements/src/a/b");
				createFile("/Java9Elements/src/a/b/C.java",
						"package a.b;\n" + 
						"public interface C {}");
				createFile("/Java9Elements/src/a/b/CImpl.java",
						"package a.b;\n" + 
						"public class CImpl implements C {}");
				createFile(	"/Java9Elements/src/module-info.java",	fileContent);

				ICompilationUnit unit = getCompilationUnit("/Java9Elements/src/module-info.java");
				IModuleDescription mod = unit.getModule();
				assertNotNull("Module should not be null", mod);
				IProvidedService[] services = mod.getProvidedServices();
				assertNotNull("should not be null", services);
				assertEquals("Incorrect no of services", 1, services.length);
				assertEquals("incorrect service name", "a.b.C", services[0].getServiceName());
				
				String[] implementationNames = services[0].getImplementationNames();
				assertNotNull("should not be null", implementationNames);
				assertEquals("Incorrect no of implementations", 2, implementationNames.length);
				assertEquals("incorrect service implementation name", "a.b.CImpl", implementationNames[0]);
				assertEquals("incorrect service implementation name", "a.b.DImpl", implementationNames[1]);
		}
		finally {
			deleteProject("Java9Elements");
		}
	}

