/*
 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=66908
 */
public void testCompletionSameClass() throws JavaModelException {
	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionSameClass.java");

	String str = cu.getSource();
	String completeBehind = "(CompletionSameClas";
	int cursorLocation = str.indexOf(completeBehind) + completeBehind.length();
	cu.codeComplete(cursorLocation, requestor);

	assertEquals(
			"element:CompletionSameClass    completion:CompletionSameClass    relevance:" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED),
			requestor.getResults());
}
/*
public void testCompletionBasicPackage1() throws JavaModelException {
	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionBasicPackage1.java");

	String str = cu.getSource();
	String completeBehind = "java.lan";
	int cursorLocation = str.indexOf(completeBehind) + completeBehind.length();
	cu.codeComplete(cursorLocation, requestor);

	assertResults(
			"java.lang[PACKAGE_REF]{java.lang, java.lang, null, null, [41, 49], " + (R_DEFAULT + R_INTERESTING + R_CASE + R_QUALIFIED) + "}",
			requestor.getResults());
}
public void testCompletionBasicType1() throws JavaModelException {
	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionBasicType1.java");

	String str = cu.getSource();
	String completeBehind = "Objec";
	int cursorLocation = str.indexOf(completeBehind) + completeBehind.length();
	cu.codeComplete(cursorLocation, requestor);

	assertResults(
			"Object[TYPE_REF]{Object, java.lang, Ljava.lang.Object;, null, [54, 59], " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED) + "}",
			requestor.getResults());
}
public void testCompletionBasicField1() throws JavaModelException {
	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionBasicField1.java");

	String str = cu.getSource();
	String completeBehind = "zzvar";
	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
	cu.codeComplete(cursorLocation, requestor);

	assertResults(
			"zzvarzz[FIELD_REF]{zzvarzz, LCompletionBasicField1;, I, zzvarzz, [77, 82], " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED) + "}",
			requestor.getResults());
}
public void testCompletionBasicMethod1() throws JavaModelException {
	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionBasicMethod1.java");

	String str = cu.getSource();
	String completeBehind = "zzfo";
	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
	cu.codeComplete(cursorLocation, requestor);

	assertResults(
			"zzfoo[METHOD_REF]{zzfoo(), LCompletionBasicMethod1;, ()V, zzfoo, [58, 62], " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED) + "}",
			requestor.getResults());
}
public void testCompletionBasicLocalVariable1() throws JavaModelException {
	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionBasicLocalVariable1.java");

	String str = cu.getSource();
	String completeBehind = "zzvar";
	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
	cu.codeComplete(cursorLocation, requestor);

	assertResults(
			"zzvarzz[LOCAL_VARIABLE_REF]{zzvarzz, null, I, zzvarzz, [79, 84], " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED) + "}",
			requestor.getResults());
}
public void testCompletionBasicKeyword1() throws JavaModelException {
	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionBasicKeyword1.java");

	String str = cu.getSource();
	String completeBehind = "whil";
	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
	cu.codeComplete(cursorLocation, requestor);

	assertResults(
			"while[KEYWORD]{while, null, null, while, [57, 61], " + (R_DEFAULT + R_INTERESTING + R_CASE) + "}",
			requestor.getResults());
}
public void testCompletionBasicVariableDeclaration1() throws JavaModelException {
	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionBasicVariableDeclaration1.java");

	String str = cu.getSource();
	String completeBehind = "obj";
	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
	cu.codeComplete(cursorLocation, requestor);

	assertResults(
			"object[VARIABLE_DECLARATION]{object, null, Ljava.lang.Object;, object, [67, 70], " + (R_DEFAULT + R_INTERESTING + R_CASE) + "}",
			requestor.getResults());
}
public void testCompletionBasicMethodDeclaration1() throws JavaModelException {
	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionBasicMethodDeclaration1.java");

	String str = cu.getSource();
	String completeBehind = "equals";
	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
	cu.codeComplete(cursorLocation, requestor);

	assertResults(
			"equals[POTENTIAL_METHOD_DECLARATION]{equals, LCompletionBasicMethodDeclaration1;, ()V, equals, [51, 57], " + (R_DEFAULT + R_INTERESTING) + "}\n" +
			"equals[METHOD_DECLARATION]{public boolean equals(Object obj), Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, [51, 57], " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_EXACT_NAME) + "}",
			requestor.getResults());
}
public void testCompletionBasicAnonymousDeclaration1() throws JavaModelException {
	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionBasicAnonymousDeclaration1.java");

	String str = cu.getSource();
	String completeBehind = "new Object(";
	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
	cu.codeComplete(cursorLocation, requestor);

	assertResults(
			"Object[ANONYMOUS_CLASS_DECLARATION]{), Ljava.lang.Object;, ()V, null, [81, 81], " + (R_DEFAULT + R_INTERESTING) + "}\n" +
			"Object[METHOD_REF]{), Ljava.lang.Object;, ()V, Object, [81, 81], " + (R_DEFAULT + R_INTERESTING) + "}",
			requestor.getResults());
}
public void testCompletionBasicPotentialMethodDeclaration1() throws JavaModelException {
	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionBasicPotentialMethodDeclaration1.java");

	String str = cu.getSource();
	String completeBehind = "zzpot";
	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
	cu.codeComplete(cursorLocation, requestor);

	assertResults(
			"zzpot[POTENTIAL_METHOD_DECLARATION]{zzpot, LCompletionBasicPotentialMethodDeclaration1;, ()V, zzpot, [60, 65], " + (R_DEFAULT + R_INTERESTING) + "}",
			requestor.getResults());
}*/

