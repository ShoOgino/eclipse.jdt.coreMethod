public static Test suite() {
	//TODO: Use OrderedTestSuite to avoid manual addition of test cases.
	TestSuite suite = new Suite(TypeHierarchyTests.class.getName());
	suite.addTest(new TypeHierarchyTests("testAnonymousType01"));
	suite.addTest(new TypeHierarchyTests("testAnonymousType02"));
	suite.addTest(new TypeHierarchyTests("testAnonymousType03"));
	suite.addTest(new TypeHierarchyTests("testAnonymousType04"));
	suite.addTest(new TypeHierarchyTests("testAnonymousType05"));
	suite.addTest(new TypeHierarchyTests("testAnonymousType06"));
	suite.addTest(new TypeHierarchyTests("testAnonymousType07"));
	suite.addTest(new TypeHierarchyTests("testAnonymousType08"));
	suite.addTest(new TypeHierarchyTests("testAnonymousType09"));
	suite.addTest(new TypeHierarchyTests("testAnonymousType10"));
	suite.addTest(new TypeHierarchyTests("testAnonymousType11"));
	suite.addTest(new TypeHierarchyTests("testAnonymousType12"));
	suite.addTest(new TypeHierarchyTests("testBinaryInnerTypeGetSuperclass"));
	suite.addTest(new TypeHierarchyTests("testBinaryInnerTypeGetSuperInterfaces"));
	suite.addTest(new TypeHierarchyTests("testBinaryInWrongPackage"));
	suite.addTest(new TypeHierarchyTests("testBinarySubclass"));
	suite.addTest(new TypeHierarchyTests("testBinaryTypeGetSuperclass"));
	suite.addTest(new TypeHierarchyTests("testBinaryTypeGetSuperclass2"));
	suite.addTest(new TypeHierarchyTests("testBinaryTypeGetSuperInterfaces"));
	suite.addTest(new TypeHierarchyTests("testBinaryTypeGetSuperInterfaces2"));
	suite.addTest(new TypeHierarchyTests("testBinaryTypeHiddenByOtherJar"));
	suite.addTest(new TypeHierarchyTests("testBinaryTypeInDotClassJar"));
	suite.addTest(new TypeHierarchyTests("testCancel"));
	suite.addTest(new TypeHierarchyTests("testContains1"));
	suite.addTest(new TypeHierarchyTests("testContains2"));
	suite.addTest(new TypeHierarchyTests("testContains3"));
	suite.addTest(new TypeHierarchyTests("testCycle"));
	suite.addTest(new TypeHierarchyTests("testCycle2"));
	suite.addTest(new TypeHierarchyTests("testEfficiencyMultipleProjects"));
	suite.addTest(new TypeHierarchyTests("testEmptyWorkingCopyPotentialSubtype"));
	suite.addTest(new TypeHierarchyTests("testExternalFolder"));
	suite.addTest(new TypeHierarchyTests("testZIPArchive"));
	suite.addTest(new TypeHierarchyTests("testFindObject"));
	suite.addTest(new TypeHierarchyTests("testFocusWithLocalAndAnonymousTypes"));
	suite.addTest(new TypeHierarchyTests("testGeneric01"));
	suite.addTest(new TypeHierarchyTests("testGeneric02"));
	suite.addTest(new TypeHierarchyTests("testGeneric03"));
	suite.addTest(new TypeHierarchyTests("testGeneric04"));
	suite.addTest(new TypeHierarchyTests("testGeneric05"));
	suite.addTest(new TypeHierarchyTests("testGeneric06"));
	suite.addTest(new TypeHierarchyTests("testGeneric07"));
	suite.addTest(new TypeHierarchyTests("testGeneric08"));
	suite.addTest(new TypeHierarchyTests("testGeneric09"));
	suite.addTest(new TypeHierarchyTests("testGeneric10"));
	suite.addTest(new TypeHierarchyTests("testGeneric11"));
	suite.addTest(new TypeHierarchyTests("testGeneric12"));
	suite.addTest(new TypeHierarchyTests("testGetAllClassesInRegion"));
	suite.addTest(new TypeHierarchyTests("testGetAllInterfacesInRegion"));
	suite.addTest(new TypeHierarchyTests("testGetAllSubtypes"));
	suite.addTest(new TypeHierarchyTests("testGetAllSubtypesFromBinary"));
	suite.addTest(new TypeHierarchyTests("testGetAllSuperclasses"));
	suite.addTest(new TypeHierarchyTests("testGetAllSuperclassesFromBinary"));
	suite.addTest(new TypeHierarchyTests("testGetAllSuperclassesFromBinary2"));
	suite.addTest(new TypeHierarchyTests("testGetAllSuperInterfaces"));
	suite.addTest(new TypeHierarchyTests("testGetAllSupertypes"));
	suite.addTest(new TypeHierarchyTests("testGetAllSupertypes2"));
	suite.addTest(new TypeHierarchyTests("testGetAllSupertypes3"));
	suite.addTest(new TypeHierarchyTests("testGetAllSupertypes4"));
	suite.addTest(new TypeHierarchyTests("testGetAllTypes"));
	suite.addTest(new TypeHierarchyTests("testGetCachedFlags"));
	suite.addTest(new TypeHierarchyTests("testGetExtendingInterfaces"));
	suite.addTest(new TypeHierarchyTests("testGetImplementingClasses"));
	suite.addTest(new TypeHierarchyTests("testGetRootClasses"));
	suite.addTest(new TypeHierarchyTests("testGetRootInterfaces"));
	suite.addTest(new TypeHierarchyTests("testGetRootInterfacesFromRegion"));
	suite.addTest(new TypeHierarchyTests("testGetSubclasses"));
	suite.addTest(new TypeHierarchyTests("testGetSubtypes"));
	suite.addTest(new TypeHierarchyTests("testGetSuperclassInRegion"));
	suite.addTest(new TypeHierarchyTests("testGetSupertypesInRegion"));
	suite.addTest(new TypeHierarchyTests("testGetSupertypesWithProjectRegion"));
	suite.addTest(new TypeHierarchyTests("testGetType"));
	suite.addTest(new TypeHierarchyTests("testImplementBinaryInnerInterface"));
	suite.addTest(new TypeHierarchyTests("testInnerType1"));
	suite.addTest(new TypeHierarchyTests("testInnerType2"));
	suite.addTest(new TypeHierarchyTests("testLocalType1"));
	suite.addTest(new TypeHierarchyTests("testLocalType2"));
	suite.addTest(new TypeHierarchyTests("testLocalType3"));
	suite.addTest(new TypeHierarchyTests("testLocalType4"));
	suite.addTest(new TypeHierarchyTests("testLocalType5"));
	suite.addTest(new TypeHierarchyTests("testMemberTypeSubtypeDifferentProject"));
	suite.addTest(new TypeHierarchyTests("testMissingInterface"));
	suite.addTest(new TypeHierarchyTests("testMissingBinarySuperclass1"));
	suite.addTest(new TypeHierarchyTests("testMissingBinarySuperclass2"));
	suite.addTest(new TypeHierarchyTests("testPotentialSubtypeInDependentProject"));
	suite.addTest(new TypeHierarchyTests("testPotentialSubtypeNotInClasspath"));
	suite.addTest(new TypeHierarchyTests("testProgressWhileIndexing"));
	suite.addTest(new TypeHierarchyTests("testRegion1"));
	suite.addTest(new TypeHierarchyTests("testRegion2"));
	suite.addTest(new TypeHierarchyTests("testRegion3"));
	suite.addTest(new TypeHierarchyTests("testRegion4"));
	suite.addTest(new TypeHierarchyTests("testRegion5"));
	suite.addTest(new TypeHierarchyTests("testRegion_Bug150289"));
	suite.addTest(new TypeHierarchyTests("testResilienceToMissingBinaries"));
	suite.addTest(new TypeHierarchyTests("testResolvedTypeAsFocus"));
	suite.addTest(new TypeHierarchyTests("testRootOrder"));
	suite.addTest(new TypeHierarchyTests("testSourceTypeGetSuperclass"));
	suite.addTest(new TypeHierarchyTests("testSourceTypeGetSuperclass2"));
	suite.addTest(new TypeHierarchyTests("testSourceTypeGetSuperclass3"));
	suite.addTest(new TypeHierarchyTests("testSourceTypeGetSuperclass4"));
	suite.addTest(new TypeHierarchyTests("testSourceTypeGetSuperInterfaces"));
	suite.addTest(new TypeHierarchyTests("testSupertypeHierarchyGetSubclasses"));
	suite.addTest(new TypeHierarchyTests("testSupertypeHierarchyGetSubtypes"));
	suite.addTest(new TypeHierarchyTests("testSupertypeHierarchyOnWorkingCopy"));
	suite.addTest(new TypeHierarchyTests("testSuperTypeHierarchyWithMissingBinary"));
	suite.addTest(new TypeHierarchyTests("testVisibility1"));
	suite.addTest(new TypeHierarchyTests("testVisibility2"));
	suite.addTest(new TypeHierarchyTests("testBug186781"));
	suite.addTest(new TypeHierarchyTests("testBug215841"));
	suite.addTest(new TypeHierarchyTests("testBug254738"));
	suite.addTest(new TypeHierarchyTests("testBug288698"));
	suite.addTest(new TypeHierarchyTests("testBug329663"));
	suite.addTest(new TypeHierarchyTests("testBug329663a"));
	suite.addTest(new TypeHierarchyTests("testBug300576"));
	suite.addTest(new TypeHierarchyTests("testBug300576b"));
	suite.addTest(new TypeHierarchyTests("testBug393192"));
	suite.addTest(new TypeHierarchyTests("testBug436155"));
	return suite;
}

