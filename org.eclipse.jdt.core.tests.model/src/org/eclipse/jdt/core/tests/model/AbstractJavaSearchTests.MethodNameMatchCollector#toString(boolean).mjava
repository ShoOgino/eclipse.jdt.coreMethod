		private String toString(boolean withTypeName) {
			int size = size();
			if (size == 0) return "";
			String[] strings = new String[size];
			for (int i=0; i<size; i++) {
				IMethod method = (IMethod) this.matches.get(i);
				IType type = method.getDeclaringType();
				String path = type.getPath().toPortableString();
				String declaringTypeName = type.getFullyQualifiedName('.');
				String[] parameterTypes = method.getParameterTypes();
				String[] parameterNames;
				try {
					parameterNames = method.getParameterNames();
				} catch (JavaModelException e1) {
					parameterNames = new String[] {Util.EMPTY_STRING};
				}
				int nParameterNames = parameterNames.length;
				
				StringBuffer buf = new StringBuffer();
				buf.append(path);
				buf.append(' ');
				try {
					buf.append(Signature.toString(Signature.getTypeErasure(method.getReturnType())));
					buf.append(' ');
				} catch (JavaModelException e) {
					// do nothing
				}
				if (withTypeName) {
					buf.append(declaringTypeName);
					buf.append('.');
				}
				buf.append(method.getElementName());
				buf.append('(');
				int l = parameterTypes.length;
				if (l > 0) {
					buf.append(Signature.toString(Signature.getTypeErasure(parameterTypes[0])));
					if (nParameterNames > 0) {
						buf.append(' ');
						buf.append(parameterNames[0]);
					}
					for (int j = 1; j < l; ++j) {
						buf.append(',');
						buf.append(Signature.toString(Signature.getTypeErasure(parameterTypes[j])));
						if (j < nParameterNames) {
							buf.append(' ');
							buf.append(parameterNames[j]);
						}
					}
				}
				buf.append(')');
				if (i < size - 1) buf.append('\n');
				strings[i] = buf.toString();
			}
			StringBuffer buffer = new StringBuffer();
			for (int i=0; i<size; i++) {
				buffer.append(strings[i]);
			}
			return buffer.toString();
		}

