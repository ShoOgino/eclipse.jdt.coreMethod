/*
 * References to all qualified types (using '*' string pattern)
 */
private void setUpTypeRefQualifiedAll() throws JavaModelException {
	final ProblemRequestor problemRequestor = new ProblemRequestor();
	this.wcOwner = new WorkingCopyOwner() {
		public IProblemRequestor getProblemRequestor(ICompilationUnit workingCopy) {
			return problemRequestor;
		}
	};
	workingCopies = new ICompilationUnit[3];
	workingCopies[0] = getWorkingCopy("/JavaSearch15/src/type/def/Types.java",
		"package type.def;\n" + 
		"@Bug\n" + 
		"@ATest\n" + 
		"public class Types extends Exception implements ITest1, ITest2 {\n" +
		"	ITest1 test1;\n" +
		"	ITest2 test2;\n" +
		"}\n" + 
		"@Bug\n" + 
		"interface ITest1 {}\n" + 
		"@ATest\n" + 
		"interface ITest2 extends ITest1 {}\n" + 
		"@Bug\n" + 
		"@ATest\n" + 
		"enum ETest {}\n" + 
		"@Bug\n" + 
		"@interface ATest {}\n"
	);
	workingCopies[1] = getWorkingCopy("/JavaSearch15/src/type/def/Bug.java",
		"package type.def;\n" + 
		"public @interface Bug {\n" + 
		"	int num() default 0;\n" + 
		"	String comment() default \"\";\n" + 
		"}\n"
	);
	workingCopies[2] = getWorkingCopy("/JavaSearch15/src/all/types/ref/TestTypes.java",
		"package all.types.ref;\n" + 
		"\n" + 
		"@type.def.Bug(num=155013)\n" + 
		"public class TestTypes extends type.def.Types {\n" + 
		"	@type.def.Bug(comment=\"field\")\n" + 
		"	type.def.Types field = new type.def.Types(), local, other = new type.def.Types();\n" + 
		"	{\n" + 
		"		Object o;\n" + 
		"		type.def.Types t;\n" + 
		"		if (this.field == null) {\n" + 
		"			try {\n" + 
		"				t = new TestTypes();\n" + 
		"			} catch (RuntimeException e) {\n" + 
		"				t = new type.def.Types();\n" + 
		"			} \n" + 
		"		} else {\n" + 
		"			o = this.field;\n" + 
		"			t = (type.def.Types) o;\n" + 
		"		}\n" + 
		"		local = t;\n" + 
		"	};\n" + 
		"	@type.def.Bug(comment=\"method\", num=155013)\n" + 
		"	type.def.Types method(type.def.Types param) throws type.def.Types {\n" + 
		"		Object obj = new type.def.Types();\n" + 
		"		type.def.Types local = (type.def.Types) obj;\n" + 
		"		return local;\n" + 
		"	}\n" + 
		"	type.def.Bug bar(type.def.Bug bug) {\n" + 
		"		try {\n" + 
		"			method(this);\n" + 
		"		}\n" + 
		"		catch (type.def.Types ex) {}\n" + 
		"		catch (Exception ex) {}\n" + 
		"		return bug; \n" + 
		"	}\n" + 
		"	// Other types references\n" + 
		"	Object object;\n" + 
		"	String str;\n" + 
		"	TestTypes() throws type.def.Types, RuntimeException {\n" + 
		"		if (this.object instanceof String) {\n" + 
		"			this.str = (String) this.object;\n" + 
		"		} else {\n" + 
		"			this.str = new String();\n" + 
		"			this.object = new Object();\n" + 
		"		}\n" + 
		"	}\n" + 
		"}\n"
	);
	assertEquals("CU Should not have any problem!",
		"----------\n" +
		"----------\n",
		problemRequestor.problems.toString()
	);
	this.resultCollector.showSelection = true;
	this.resultCollector.showOffset = true;
}

