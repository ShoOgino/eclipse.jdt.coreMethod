	/**
	 * Get class file from jar file with an associated source written in UTF-8 charset using no specific encoding for file.
	 * Verification is done by comparing source with file contents read directly with no specific encoding...
	 */
	// TODO (frederic) put back assertions when failure on linux platform will be fixed
	public void test013() throws JavaModelException, CoreException {

		// Get class file and compare source
		IPackageFragmentRoot root = getPackageFragmentRoot("Encoding", "testUTF8.jar");
		this.utf8Source = root.getPackageFragment("testUTF8").getClassFile("Test.class");
		assertNotNull(this.utf8Source);
		String source = this.utf8Source.getSource();
		assertNotNull(source);
		String encodedContents = new String (Util.getResourceContentsAsCharArray(this.utf8File, null));
//		String independentEncodedContents = org.eclipse.jdt.core.tests.util.Util.convertToIndependantLineDelimiter(encodedContents);
		String independentSource = org.eclipse.jdt.core.tests.util.Util.convertToIndependantLineDelimiter(source);
//		assertEquals("Encoded UTF-8 source should have been decoded the same way!", independentEncodedContents, independentSource);
//		assertSourceEquals("Encoded UTF-8 source should have been decoded the same way!", source, encodedContents);
		System.out.println("Encoding tests013:");
		System.out.println("  - file encoding: "+this.utf8File.getCharset());
		System.out.println("  - project encoding: "+this.encodingProject.getDefaultCharset());
		System.out.println("  - workspace encoding: "+getWorkspaceRoot().getDefaultCharset());
		if (encodedContents.equals(independentSource)) {
			System.out.println("  => SUCCESS: sources are identical");
		} else {
//			System.out.println("  => FAIL: Encoded UTF-8 source should have been decoded the same way!");
		}

		// Cannot compare bytes array without encoding as we're dependent of linux/windows os for new lines delimiter
	}

