	protected void setUpProjectCompliance(IJavaProject javaProject, String compliance) throws JavaModelException, IOException {
		// Look for version to set and return if that's already done
		String version = compliance; // assume that the values of CompilerOptions.VERSION_* are used
		if (version.equals(javaProject.getOption(CompilerOptions.OPTION_Compliance, false))) {
			return;
		}
		String jclLibString;
		String newJclLibString;
		String newJclSrcString;
		if (compliance.charAt(2) > '4') {
			jclLibString = "JCL_LIB";
			newJclLibString = "JCL15_LIB";
			newJclSrcString = "JCL15_SRC";
		} else {
			jclLibString = "JCL15_LIB";
			newJclLibString = "JCL_LIB";
			newJclSrcString = "JCL_SRC";
		}

		// ensure variables are set
		setUpJCLClasspathVariables(compliance);

		// set options
		Map options = new HashMap();
		options.put(CompilerOptions.OPTION_Compliance, version);
		options.put(CompilerOptions.OPTION_Source, version);
		options.put(CompilerOptions.OPTION_TargetPlatform, version);
		javaProject.setOptions(options);

		// replace JCL_LIB with JCL15_LIB, and JCL_SRC with JCL15_SRC
		IClasspathEntry[] classpath = javaProject.getRawClasspath();
		IPath jclLib = new Path(jclLibString);
		for (int i = 0, length = classpath.length; i < length; i++) {
			IClasspathEntry entry = classpath[i];
			if (entry.getPath().equals(jclLib)) {
				classpath[i] = JavaCore.newVariableEntry(
						new Path(newJclLibString),
						new Path(newJclSrcString),
						entry.getSourceAttachmentRootPath(),
						entry.getAccessRules(),
						new IClasspathAttribute[0],
						entry.isExported());
				break;
			}
		}
		javaProject.setRawClasspath(classpath, null);
	}

