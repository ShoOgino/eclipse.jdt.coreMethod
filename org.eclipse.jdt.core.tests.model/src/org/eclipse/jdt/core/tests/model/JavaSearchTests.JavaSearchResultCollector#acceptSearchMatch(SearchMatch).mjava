	public void acceptSearchMatch(SearchMatch match) throws CoreException {
		try {
			if (results.length() > 0) results.append("\n");
			IResource resource = match.getResource();
			IPath path = resource.getProjectRelativePath();
			IJavaElement element = (IJavaElement) match.getElement();
			if (path.segmentCount() == 0) {
				IJavaElement root = element;
				while (root != null && !(root instanceof IPackageFragmentRoot)) {
					root = root.getParent();
				}
				if (root != null) {
					IPackageFragmentRoot pkgFragmentRoot = (IPackageFragmentRoot)root;
					if (pkgFragmentRoot.isExternal()) {
						results.append(pkgFragmentRoot.getPath().toOSString());
					} else {
						results.append(pkgFragmentRoot.getPath());
					}
				}
			} else {
				results.append(path);
			}
			if (this.showProject) {
				IProject project = element.getJavaProject().getProject();
				results.append(" [in ");
				results.append(project.getName());
				results.append("]");
			}
			ICompilationUnit unit = null;
			if (element instanceof IMethod) {
				results.append(" ");
				IMethod method = (IMethod)element;
				append(method);
				unit = method.getCompilationUnit();
			} else if (element instanceof IType) {
				results.append(" ");
				IType type = (IType)element;
				append(type);
				unit = type.getCompilationUnit();
			} else if (element instanceof IField) {
				results.append(" ");
				IField field = (IField)element;
				append(field);
				unit = field.getCompilationUnit();
			} else if (element instanceof IInitializer) {
				results.append(" ");
				IInitializer initializer = (IInitializer)element;
				append(initializer);
				unit = initializer.getCompilationUnit();
			} else if (element instanceof IPackageFragment) {
				results.append(" ");
				append((IPackageFragment)element);
			} else if (element instanceof ILocalVariable) {
				results.append(" ");
				ILocalVariable localVar = (ILocalVariable)element;
				IJavaElement parent = localVar.getParent();
				if (parent instanceof IInitializer) {
					IInitializer initializer = (IInitializer)parent;
					append(initializer);
				} else { // IMethod
					IMethod method = (IMethod)parent;
					append(method);
				}
				results.append(".");
				results.append(localVar.getElementName());
				unit = (ICompilationUnit)localVar.getAncestor(IJavaElement.COMPILATION_UNIT);
			}
			if (resource instanceof IFile) {
				char[] contents = null;
				if ("java".equals(resource.getFileExtension())) {
					ICompilationUnit cu = (ICompilationUnit)element.getAncestor(IJavaElement.COMPILATION_UNIT);
					if (cu != null && cu.isWorkingCopy()) {
						// working copy
						contents = unit.getBuffer().getCharacters();
					} else {
						contents = new org.eclipse.jdt.internal.compiler.batch.CompilationUnit(
							null, 
							((IFile) resource).getLocation().toFile().getPath(),
							null).getContents();
					}
				}
				int start = match.getOffset();
				int end = start + match.getLength();
				if (start == -1 || contents != null) { // retrieving attached source not implemented here
					results.append(" [");
					if (start > -1) {
						if (this.showContext) {
							int lineStart1 = CharOperation.lastIndexOf('\n', contents, 0, start);
							int lineStart2 = CharOperation.lastIndexOf('\r', contents, 0, start);
							int lineStart = Math.max(lineStart1, lineStart2) + 1;
							results.append(CharOperation.subarray(contents, lineStart, start));
							results.append("<");
						}
						results.append(CharOperation.subarray(contents, start, end));
						if (this.showContext) {
							results.append(">");
							int lineEnd1 = CharOperation.indexOf('\n', contents, end);
							int lineEnd2 = CharOperation.indexOf('\r', contents, end);
							int lineEnd = lineEnd1 > 0 && lineEnd2 > 0 ? Math.min(lineEnd1, lineEnd2) : Math.max(lineEnd1, lineEnd2);
							if (lineEnd == -1) lineEnd = contents.length;
							results.append(CharOperation.subarray(contents, end, lineEnd));
						}
					} else {
						results.append("No source");
					}
					results.append("]");
				}
			}
			if (this.showAccuracy) {
				results.append(" ");
				switch (match.getAccuracy()) {
					case SearchMatch.A_ACCURATE:
						results.append("EXACT_MATCH");
						break;
					case SearchMatch.A_INACCURATE:
						results.append("POTENTIAL_MATCH");
						break;
				}
			}
			if (this.showInsideDoc) {
				results.append(" ");
				if (match.insideDocComment()) {
					results.append("INSIDE_JAVADOC");
				} else {
					results.append("OUTSIDE_JAVADOC");
				}
			}
		} catch (JavaModelException e) {
			results.append("\n");
			results.append(e.toString());
		}
	}

