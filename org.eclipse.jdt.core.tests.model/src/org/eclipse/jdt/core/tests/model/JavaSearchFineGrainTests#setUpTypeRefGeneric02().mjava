/*
 * Same test than previous ones with another example
 */
private IType setUpTypeRefGeneric02() throws JavaModelException {
	final ProblemRequestor problemRequestor = new ProblemRequestor();
	this.wcOwner = new WorkingCopyOwner() {
		public IProblemRequestor getProblemRequestor(ICompilationUnit workingCopy) {
			return problemRequestor;
		}
	};
	this.workingCopies = new ICompilationUnit[1];
	this.workingCopies[0] = getWorkingCopy("/JavaSearch15/src/test02/Test.java",
		"package test02;\n" +
		"public class Test <T, U, V> {\n" +
		"	Test<A, ? extends B, ? super C> field = new Test<A, Z<String>, X<String>> () {\n" +
		"		X<String> x;\n" +
		"		Test<A, B, C> t;\n" +
		"		Test<X<Y<Z<String>>>, Y<Z<String>>, Z<String>> bar() {\n" +
		"			return new Test<X<Y<Z<String>>>, Y<Z<String>>, Z<String>>();\n" +
		"		}\n" +
		"	};\n" +
		"	Test<? super A, B, ? extends C> foo(Test<? extends A, ? super B, C> param) {\n" +
		"		return null;\n" +
		"	};\n" +
		"}\n" +
		"class A {}\n" +
		"class B {}\n" +
		"class C extends X<String> {}\n" +
		"class X<R> {}\n" +
		"class Y<S> extends A {}\n" +
		"class Z<P> extends B {}\n" +
		"\n"
	);
	assertEquals("CU Should not have any problem!",
		"----------\n" +
		"----------\n",
		problemRequestor.problems.toString()
	);
	this.resultCollector.showSelection();
	this.resultCollector.showOffset();
	return this.workingCopies[0].getType("Types");
}

