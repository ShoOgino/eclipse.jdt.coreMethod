	public void test23() throws JavaModelException {
		setUnit("Test.java",
			"public class Test {\n" + 
			"	void bar() {\n" + 
			"		new Object() {\n" + 
			"			/**\n" + 
			"			 * @see Field#foo\n" + 
			"			 */\n" + 
			"			class Field {\n" + 
			"				/**\n" + 
			"				 * @see #foo\n" + 
			"				 * @see Field#foo\n" + 
			"				 */\n" + 
			"				int foo;\n" + 
			"			}\n" + 
			"		};\n" + 
			"	}\n" + 
			"}\n"
		);
		IJavaElement[] elements = new IJavaElement[5];
		elements[0] = selectType(this.workingCopies[0], "Field");
		elements[1] = selectField(this.workingCopies[0], "foo");
		elements[2] = selectField(this.workingCopies[0], "foo", 2);
		elements[3] = selectType(this.workingCopies[0], "Field", 3);
		elements[4] = selectField(this.workingCopies[0], "foo", 3);
		// Running test with Unix/Windows do not matter even if result includes positions as we use working copies
		assertElementsEqual("Invalid selection(s)",
			"Field {key=LTest$95;} [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]\n" + 
			"foo {key=LTest$95;.foo} [in Field [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]]\n" + 
			"foo {key=LTest$95;.foo} [in Field [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]]\n" + 
			"Field {key=LTest$95;} [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]\n" + 
			"foo {key=LTest$95;.foo} [in Field [in <anonymous #1> [in bar() [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]]]",
			elements
		);
	}

