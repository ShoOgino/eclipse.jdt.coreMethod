/**
 * @see Signature
 */
public void testGetParameterTypes() {
	String methodSig = "(QString;QObject;I)I";
	String[] parameterTypes = Signature.getParameterTypes(methodSig);
	assertEquals("Signature#getParameterTypes is not correct1", 3, parameterTypes.length);
	assertEquals("Signature#getParameterTypes is not correct2", "QObject;", parameterTypes[1]);
	try {
		Signature.getParameterTypes("");
		assertTrue("Signature#getParameterTypes is not correct: exception", false);
	} catch (IllegalArgumentException iae) {
		// do nothing
	}

	// primitive types
	methodSig = "(BCDFIJSVZ)V";
	parameterTypes = Signature.getParameterTypes(methodSig);
	assertEquals("Signature#getParameterTypes 4", 9,
			parameterTypes.length);
	assertEquals("Signature#getParameterTypes 4", "B",
			parameterTypes[0]);
	assertEquals("Signature#getParameterTypes 4", "C",
			parameterTypes[1]);
	assertEquals("Signature#getParameterTypes 4", "D",
			parameterTypes[2]);
	assertEquals("Signature#getParameterTypes 4", "F",
			parameterTypes[3]);
	assertEquals("Signature#getParameterTypes 4", "I",
			parameterTypes[4]);
	assertEquals("Signature#getParameterTypes 4", "J",
			parameterTypes[5]);
	assertEquals("Signature#getParameterTypes 4", "S",
			parameterTypes[6]);
	assertEquals("Signature#getParameterTypes 4", "V",
			parameterTypes[7]);
	assertEquals("Signature#getParameterTypes 4", "Z",
			parameterTypes[8]);

	// array types
	methodSig = "([I[[J[[[B[Qstring;[Tv;[Lstring;)V";
	parameterTypes = Signature.getParameterTypes(methodSig);
	assertEquals("Signature#getParameterTypes 5", 6,
			parameterTypes.length);
	assertEquals("Signature#getParameterTypes 5", "[I",
			parameterTypes[0]);
	assertEquals("Signature#getParameterTypes 5", "[[J",
			parameterTypes[1]);
	assertEquals("Signature#getParameterTypes 5", "[[[B",
			parameterTypes[2]);
	assertEquals("Signature#getParameterTypes 5", "[Qstring;",
			parameterTypes[3]);
	assertEquals("Signature#getParameterTypes 5", "[Tv;",
			parameterTypes[4]);
	assertEquals("Signature#getParameterTypes 5", "[Lstring;",
			parameterTypes[5]);

	// resolved types
	methodSig = "(La;)V";
	parameterTypes = Signature.getParameterTypes(methodSig);
	assertEquals("Signature#getParameterTypes 6", 1, parameterTypes.length);
	assertEquals("Signature#getParameterTypes 6", "La;", parameterTypes[0]);

	methodSig = "(La<TE;>;)V";
	parameterTypes = Signature.getParameterTypes(methodSig);
	assertEquals("Signature#getParameterTypes 6", 1,
			parameterTypes.length);
	assertEquals("Signature#getParameterTypes 6", "La<TE;>;",
			parameterTypes[0]);

	methodSig = "(La.b.c<TE;>.d<TF;>;)V";
	parameterTypes = Signature.getParameterTypes(methodSig);
	assertEquals("Signature#getParameterTypes 6", 1,
			parameterTypes.length);
	assertEquals("Signature#getParameterTypes 6", "La.b.c<TE;>.d<TF;>;",
			parameterTypes[0]);

	// signature with type variable
	methodSig = "<TYPE:Ljava.lang.Object;>(Ljava.lang.Object;Ljava.lang.Class<TTYPE;>;)TTYPE;";
	parameterTypes = Signature.getParameterTypes(methodSig);
	assertEquals("Signature#getParameterTypes 7", 2,
			parameterTypes.length);
	assertEquals("Signature#getParameterTypes 7", "Ljava.lang.Object;",
			parameterTypes[0]);
	assertEquals("Signature#getParameterTypes 7", "Ljava.lang.Class<TTYPE;>;",
			parameterTypes[1]);
}

