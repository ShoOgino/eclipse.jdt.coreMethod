private void denseCycleDetection(int numberOfParticipants) throws CoreException {
	
	long start = System.currentTimeMillis();
	IJavaProject[] projects = new IJavaProject[numberOfParticipants];
	int[] allProjectsInCycle = new int[numberOfParticipants];
	try {
		for (int i = 0; i < numberOfParticipants; i++){
			projects[i] = this.createJavaProject("P"+i, new String[]{""}, "");
			allProjectsInCycle[i] = 1;
		}		
		for (int i = 0; i < numberOfParticipants; i++){
			IClasspathEntry[] extraEntries = new IClasspathEntry[numberOfParticipants-1];
			int index = 0;
			for (int j = 0; j < numberOfParticipants; j++){
				if (i == j) continue;
				extraEntries[index++] = JavaCore.newProjectEntry(projects[j].getPath());
			}
			// append project references			
			IClasspathEntry[] oldClasspath = projects[i].getRawClasspath();
			IClasspathEntry[] newClasspath = new IClasspathEntry[oldClasspath.length+extraEntries.length];
			System.arraycopy(oldClasspath, 0 , newClasspath, 0, oldClasspath.length);
			for (int j = 0; j < extraEntries.length; j++){
				newClasspath[oldClasspath.length+j] = extraEntries[j];
			}			
			// set classpath
			projects[i].setRawClasspath(newClasspath, null);
		};
		
		//System.out.println("Dense cycle check ("+numberOfParticipants+" participants) : "+ (System.currentTimeMillis()-start)+" ms");
		for (int i = 0; i < numberOfParticipants; i++){
			// check cycle markers
			this.assertCycleMarkers(projects[i], projects, allProjectsInCycle);
		}
		
	} finally {
		if (projects != null){
			for (int i = 0; i < numberOfParticipants; i++){
				if (projects[i] != null)
					this.deleteProject(projects[i].getElementName());
			}
		}
	}
}

