	public void testConvertToModule() throws CoreException, IOException {
		if (!isJRE9) return;
		Hashtable<String, String> javaCoreOptions = JavaCore.getOptions();
		try {
			IJavaProject project = setUpJavaProject("ConvertToModule", "9");
			if (!project.getOption("org.eclipse.jdt.core.compiler.compliance", true).equals("9")) {
				return;
			}
			project.getProject().build(IncrementalProjectBuilder.FULL_BUILD, null);
			IPackageFragmentRoot[] roots = project.getPackageFragmentRoots();
			IPackageFragmentRoot theRoot = null;
			for (IPackageFragmentRoot root : roots) {
				if (root.getElementName().equals("jdt.test")) {
					theRoot = root;
					break;
				}
			}
			assertNotNull("should not be null", theRoot);
			IModuleDescription mod = JavaCore.createModuleFromPackageRoot(null, project);
			assertEquals("incorrect value", "ConvertToModule", mod.getElementName());
			IModuleDescription.IPackageExport[] exports = mod.getExportedPackages();
			assertEquals("incorrect value", 2, exports.length);
			assertEquals("incorrect value", "org.eclipse.jdt.test", exports[0].getPackageName());
			assertEquals("incorrect value", "org.eclipse.test", exports[1].getPackageName());
			
			IModuleDescription.IModuleReference[] mods = mod.getRequiredModules();
			assertEquals("incorrect value", 4, mods.length);
			assertEquals("incorrect value", "java.base", mods[0].getModuleName());
			assertEquals("incorrect value", "java.desktop", mods[1].getModuleName());
			assertEquals("incorrect value", "java.rmi", mods[2].getModuleName());
			assertEquals("incorrect value", "java.sql", mods[3].getModuleName());

		} finally {
			this.deleteProject("ConvertToModule");
			 JavaCore.setOptions(javaCoreOptions);
		}
	}

