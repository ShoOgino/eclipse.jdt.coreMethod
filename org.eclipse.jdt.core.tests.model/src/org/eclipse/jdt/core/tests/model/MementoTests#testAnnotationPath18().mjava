public void testAnnotationPath18() throws CoreException, IOException {
	// tests annotationpath in memento for a regular jar library:
	try {
		IJavaProject project = createJavaProject("Test", new String[] {"src"}, null, "bin", "1.8", false);
		addLibraryWithExternalAnnotations(project, "1.8", "lib.jar", "/Test/annots", 
				new String[] {
					"test/Test.java",
					"package test;\n" +
					"public class Test{}\n"
				},
				null);
		String[] expectedIdentifiers = {
			"=Test/src",
			"=Test/lib.jar=/annotationpath=/\\/Test\\/annots"	
		};
		IPackageFragmentRoot[] roots = project.getPackageFragmentRoots();
		boolean archiveSeen = false;
		for (int i = 0; i < roots.length; i++) {
			// JarPackageFragmentRoot
			IPackageFragmentRoot packageRoot = roots[i];
			String handleIdentifier = packageRoot.getHandleIdentifier();
			assertEquals("Root mementos", expectedIdentifiers[i], handleIdentifier);
			IJavaElement element = JavaCore.create(handleIdentifier, null);
			assertEquals("Root equivalence", packageRoot, element);
			if (packageRoot.isArchive()) {
				archiveSeen = true;
				// PackageFragment
				IPackageFragment test = packageRoot.getPackageFragment("test");
				handleIdentifier = test.getHandleIdentifier();
				String expected = expectedIdentifiers[i]+"<test"; 
				assertEquals("PackageFragment mementos", expected, handleIdentifier);
				element = JavaCore.create(handleIdentifier, null);
				assertEquals("PackageFragment equivalence", test, element);
				// ClassFile:
				IClassFile classFile = test.getClassFile("Test.class");
				handleIdentifier = classFile.getHandleIdentifier();
				assertEquals("ClassFile mementos", expected+"(Test.class", handleIdentifier);
				element = JavaCore.create(handleIdentifier);
				assertEquals("ClassFile equivalence", classFile, element);
			}
		}
		assertTrue("Should have seen an archive", archiveSeen);
	} finally {
		deleteProject("Test");
	}
}

