	@SuppressWarnings("rawtypes")
	public void testRecord_007() throws Exception {
		if (checkAPILevel()) {
			return;
		}
		IPackageFragment pack1= this.sourceFolder.createPackageFragment("test1", false, null);
		StringBuffer buf= new StringBuffer();
		buf.append("package test1;\n");
		buf.append("public record C(int param1){\n");
		buf.append("\n");
		buf.append("}\n");
		ICompilationUnit cu= pack1.createCompilationUnit("C.java", buf.toString(), false, null);

		CompilationUnit astRoot= createAST(cu);
		ASTRewrite rewrite= ASTRewrite.create(astRoot.getAST());

		assertTrue("Parse errors", (astRoot.getFlags() & ASTNode.MALFORMED) == 0);
		AbstractTypeDeclaration type= findAbstractTypeDeclaration(astRoot, "C");
		assertTrue("Not a record", type instanceof RecordDeclaration);
		RecordDeclaration record = (RecordDeclaration)type;
		{ // rename record component
			List recordComponents = record.recordComponents();
			assertTrue("must be 1 parameters", recordComponents.size() == 1);
			SingleVariableDeclaration newParam= astRoot.getAST().newSingleVariableDeclaration();
			newParam.setType(astRoot.getAST().newPrimitiveType(PrimitiveType.INT));
			newParam.setName(astRoot.getAST().newSimpleName("param2"));
			rewrite.replace((SingleVariableDeclaration)recordComponents.get(0), newParam, null);

		}
		String preview= evaluateRewrite(cu, rewrite);

		buf= new StringBuffer();
		buf.append("package test1;\n");
		buf.append("public record C(int param2){\n");
		buf.append("\n");
		buf.append("}\n");
		assertEqualString(preview, buf.toString());
	}

