	public void testMoveTags() throws Exception {
		IPackageFragment pack1= this.sourceFolder.createPackageFragment("test1", false, null);
		StringBuffer buf= new StringBuffer();
		buf.append("package test1;\n");
		buf.append("public class E {\n");
		buf.append("\n");
		buf.append("    /**\n");		
		buf.append("     * @author Mr X\n");
		buf.append("     *         and friends\n");
		buf.append("     * @since 1.1\n");
		buf.append("     *         maybe less\n");
		buf.append("     */\n");
		buf.append("    static {\n");
		buf.append("    }\n");
		buf.append("}\n");
		ICompilationUnit cu= pack1.createCompilationUnit("E.java", buf.toString(), false, null);			

		CompilationUnit astRoot= createAST(cu);
		ASTRewrite rewrite= ASTRewrite.create(astRoot.getAST());
	
		{
			TypeDeclaration type= findTypeDeclaration(astRoot, "E");
			Initializer initializer= (Initializer) type.bodyDeclarations().get(0);
			Javadoc javadoc = initializer.getJavadoc();
			List tags= javadoc.tags();
			ASTNode node1 = (ASTNode) tags.get(0);
			ASTNode placeholder1 = rewrite.createMoveTarget(node1);
			ASTNode node2 = (ASTNode) tags.get(1);
			ASTNode placeholder2 = rewrite.createMoveTarget(node2);
			
			rewrite.replace(node1, placeholder2, null);
			rewrite.replace(node2, placeholder1, null);
		}

		String preview= evaluateRewrite(cu, rewrite);
		
		buf= new StringBuffer();
		buf.append("package test1;\n");
		buf.append("public class E {\n");
		buf.append("\n");
		buf.append("    /**\n");	
		buf.append("     * @since 1.1\n");
		buf.append("     *         maybe less\n");
		buf.append("     * @author Mr X\n");
		buf.append("     *         and friends\n");
		buf.append("     */\n");
		buf.append("    static {\n");
		buf.append("    }\n");
		buf.append("}\n");
		assertEqualString(preview, buf.toString());

	}

