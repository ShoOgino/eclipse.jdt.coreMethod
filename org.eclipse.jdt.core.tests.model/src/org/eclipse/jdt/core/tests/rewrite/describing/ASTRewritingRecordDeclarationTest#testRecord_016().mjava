	public void testRecord_016() throws Exception {
		if (checkAPILevel()) {
			return;
		}
		IPackageFragment pack1= this.sourceFolder.createPackageFragment("test1", false, null);
		StringBuffer buf= new StringBuffer();
		buf.append("package test1;\n");
		buf.append("public record C() {\n");
		buf.append("		public C {\n");
		buf.append("			System.out.println(\"error\");\n");
		buf.append("		}\n");
		buf.append("\n");
		buf.append("}\n");
		ICompilationUnit cu= pack1.createCompilationUnit("C.java", buf.toString(), false, null);

		CompilationUnit astRoot= createAST(cu);
		ASTRewrite rewrite= ASTRewrite.create(astRoot.getAST());

		AST ast= astRoot.getAST();

		assertTrue("Parse errors", (astRoot.getFlags() & ASTNode.MALFORMED) == 0);
		AbstractTypeDeclaration type= findAbstractTypeDeclaration(astRoot, "C");
		assertTrue("Not a record", type instanceof RecordDeclaration);
		RecordDeclaration record = (RecordDeclaration)type;
		MethodDeclaration methodDecl= findMethodDeclaration(record, "C");
		{ // replace compact constructor
			MethodDeclaration methodDecl1 = ast.newMethodDeclaration();
			methodDecl1.setName(ast.newSimpleName("C"));
			SingleVariableDeclaration newParam= ast.newSingleVariableDeclaration();
			newParam.setType(ast.newPrimitiveType(PrimitiveType.INT));
			newParam.setName(ast.newSimpleName("param1"));
			methodDecl1.parameters().add(newParam);
			methodDecl1.setConstructor(Boolean.TRUE);
			methodDecl1.modifiers().add(ast.newModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD));
			Block body= ast.newBlock();
			MethodInvocation methodInvocation = ast.newMethodInvocation();
			QualifiedName name =
				ast.newQualifiedName(
				ast.newSimpleName("System"),//$NON-NLS-1$
				ast.newSimpleName("out"));//$NON-NLS-1$
			methodInvocation.setExpression(name);
			methodInvocation.setName(ast.newSimpleName("println")); //$NON-NLS-1$
			StringLiteral literal = ast.newStringLiteral();
			literal.setLiteralValue("Hello world");//$NON-NLS-1$
			methodInvocation.arguments().add(literal);
			ExpressionStatement expressionStatement = ast.newExpressionStatement(methodInvocation);
			body.statements().add(expressionStatement);
			methodDecl1.setBody(body);
			ListRewrite listRewrite= rewrite.getListRewrite(record, RecordDeclaration.BODY_DECLARATIONS_PROPERTY);
			listRewrite.replace(methodDecl, methodDecl1, null);

		}

		String preview= evaluateRewrite(cu, rewrite);

		buf= new StringBuffer();
		buf.append("package test1;\n");
		buf.append("public record C() {\n");
		buf.append("		public C(int param1) {\n");
		buf.append("            System.out.println(\"Hello world\");\n");
		buf.append("        }\n");
		buf.append("\n");
		buf.append("}\n");

		assertEqualString(preview, buf.toString());

	}

