	public void testReceiver2_since_8() throws Exception {
		IPackageFragment pack1 = this.sourceFolder.createPackageFragment("test1", false, null);
		StringBuffer buf = new StringBuffer();
		buf.append("package test1;\n");
		buf.append("class X {\n");
		buf.append("	class Y {\n");
		buf.append("    	public Y(@A X this, int i, @B boolean b, @A int j) {\n");
		buf.append("    	}\n");
		buf.append("    }\n");
		buf.append("}\n");
		ICompilationUnit cu = pack1.createCompilationUnit("X.java", buf.toString(), false, null);
		CompilationUnit astRoot = createAST(cu);
		ASTRewrite rewrite = ASTRewrite.create(astRoot.getAST());
		AST ast = astRoot.getAST();
		TypeDeclaration type = (TypeDeclaration) findTypeDeclaration(astRoot, "X").bodyDeclarations().get(0);
		MethodDeclaration method = (MethodDeclaration) type.bodyDeclarations().get(0);
		List params = method.parameters();

		SingleVariableDeclaration first = (SingleVariableDeclaration) params.get(0);
		SingleVariableDeclaration second = (SingleVariableDeclaration) params.get(1);
		SingleVariableDeclaration third = (SingleVariableDeclaration) params.get(2);
		rewrite.replace(first.getName(), ast.newSimpleName("i"), null);
		rewrite.replace(second.getName(), ast.newSimpleName("b"), null);

		ASTNode copy1 = rewrite.createCopyTarget(first);
		ASTNode copy2 = rewrite.createCopyTarget(second);

		rewrite.replace(first, copy2, null);
		rewrite.replace(second, copy1, null);
		rewrite.remove(third, null);

		String preview = evaluateRewrite(cu, rewrite);
		buf = new StringBuffer();
		buf.append("package test1;\n");
		buf.append("class X {\n");
		buf.append("	class Y {\n");
		buf.append("    	public Y(@A X this, @B boolean b, int i) {\n");
		buf.append("    	}\n");
		buf.append("    }\n");
		buf.append("}\n");
		assertEqualString(preview, buf.toString());
	}

