	public void test0009() throws Exception {
		IPackageFragment pack1= this.sourceFolder.createPackageFragment("test0007", false, null);
		StringBuffer buf= new StringBuffer();
		buf.append("package test0007;\n");
		buf.append("\n");
		buf.append("public class X {\n");
		buf.append("    /**\n");
		buf.append("     * NOTHING\n");
		buf.append("     */\n");
		buf.append("    void foo() {\n");
		buf.append("    \n");
		buf.append("    }\n");
		buf.append("    void bar() {\n");
		buf.append("    \n");
		buf.append("    }\n");
		buf.append("}\n");
		ICompilationUnit cu= pack1.createCompilationUnit("X.java", buf.toString(), false, null);

		ASTParser astParser = ASTParser.newParser(getJLS3());
		astParser.setSource(cu);
		CompilationUnit compilationUnit = (CompilationUnit) astParser.createAST(new NullProgressMonitor());
		AST ast = compilationUnit.getAST();

		compilationUnit.recordModifications();

		List types = compilationUnit.types();
		TypeDeclaration typeDeclaration = (TypeDeclaration)types.get(0);
		MethodDeclaration methodDeclaration1 = typeDeclaration.getMethods()[0];
		MethodDeclaration methodDeclaration2 = typeDeclaration.getMethods()[1];
		Javadoc javadoc1 = methodDeclaration1.getJavadoc();
		Javadoc javadoc2 = (Javadoc)ASTNode.copySubtree(ast, javadoc1);
		methodDeclaration2.setJavadoc(javadoc2);

		String preview = evaluateRewrite(cu, compilationUnit);

		buf= new StringBuffer();
		buf.append("package test0007;\n");
		buf.append("\n");
		buf.append("public class X {\n");
		buf.append("    /**\n");
		buf.append("     * NOTHING\n");
		buf.append("     */\n");
		buf.append("    void foo() {\n");
		buf.append("    \n");
		buf.append("    }\n");
		buf.append("    /**\n");
		buf.append("     * NOTHING\n");
		buf.append("     */\n");
		buf.append("    void bar() {\n");
		buf.append("    \n");
		buf.append("    }\n");
		buf.append("}\n");
		assertEqualString(Util.convertToIndependantLineDelimiter(preview), Util.convertToIndependantLineDelimiter(buf.toString()));
	}

