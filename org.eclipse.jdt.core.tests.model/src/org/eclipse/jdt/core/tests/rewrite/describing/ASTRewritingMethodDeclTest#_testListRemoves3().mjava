	//https://bugs.eclipse.org/bugs/show_bug.cgi?id=331111
	public void _testListRemoves3() throws Exception {
		Map options = this.project1.getOptions(true);
		Map newOptions = this.project1.getOptions(true);
		try {
			newOptions.put(
					DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_METHOD_DECLARATION,
					JavaCore.INSERT);
			newOptions.put(
					DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_METHOD_DECLARATION,
					JavaCore.INSERT);
			newOptions.put(
					DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_METHOD_DECLARATION,
					JavaCore.DO_NOT_INSERT);
			this.project1.setOptions(newOptions);
			IPackageFragment pack1= this.sourceFolder.createPackageFragment("test1", false, null);
			StringBuffer buf= new StringBuffer();
			buf.append("package test1;\n");
			buf.append("public class E {\n");
			buf.append("    public void foo( String s ) {}\n");
			buf.append("}\n");
			ICompilationUnit cu= pack1.createCompilationUnit("E.java", buf.toString(), false, null);

			CompilationUnit astRoot= createAST(cu);
			ASTRewrite rewrite= ASTRewrite.create(astRoot.getAST());
			TypeDeclaration type = (TypeDeclaration) astRoot.types().get(0);

			{ // delete param, insert new
				MethodDeclaration methodDecl= (MethodDeclaration) type.bodyDeclarations().get(0);
				List parameters= methodDecl.parameters();
				rewrite.remove((ASTNode) parameters.get(0), null);
			}
			String preview= evaluateRewrite(cu, rewrite);

			buf= new StringBuffer();
			buf.append("package test1;\n");
			buf.append("public class E {\n");
			buf.append("    public void foo() {}\n");
			buf.append("}\n");

			assertEqualString(preview, buf.toString());
		} finally {
			this.project1.setOptions(options);
		}
	}

