	public void _testReceiver4_since_8() throws Exception {
		IPackageFragment pack1 = this.sourceFolder.createPackageFragment("test1", false, null);
		StringBuffer buf = new StringBuffer();
		buf.append("package test1;\n");
		buf.append("class XYZ {\n");
		buf.append("	class Y {\n");
		buf.append("    	public Y(@A XYZ XYZ.this, @B int i) {}\n");
		buf.append("    	public Y(@A XYZ XYZ.this, @B int i, @C int j) {}\n");
		buf.append("    	public Y(@A XYZ XYZ.this, @B float e) {}\n");
		buf.append("    	public Y(@A XYZ XYZ.this, @B float e, @C float f) {}\n");
		buf.append("    	public Y(@A XYZ XYZ.this, @B int i, @C float f) {}\n");
		buf.append("    	public Y(@A XYZ XYZ.this, @B float f, @C int i) {}\n");
		buf.append("    	public Y(@A XYZ XYZ.this, @B boolean b1) {}\n");
		buf.append("    	public Y(@A XYZ XYZ.this, @B boolean b2, @C int i) {}\n");
		buf.append("    	public Y(@B boolean b, @C float f) {}\n");
		buf.append("    	public Y(@B boolean b, @C boolean c) {}\n");
		buf.append("    	public Y(@B boolean b, String str) {}\n");
		buf.append("    	public Y(@A XYZ XYZ.this, @B int i, @C int j, @D int k) {}\n");
		buf.append("    	public Y(@A XYZ XYZ.this) {}\n");
		buf.append("    }\n");
		buf.append("}\n");
		ICompilationUnit cu = pack1.createCompilationUnit("XYZ.java", buf.toString(), false, null);
		CompilationUnit astRoot = createAST(cu);
		ASTRewrite rewrite = ASTRewrite.create(astRoot.getAST());
		AST ast = astRoot.getAST();
		TypeDeclaration type = (TypeDeclaration) findTypeDeclaration(astRoot, "XYZ").bodyDeclarations().get(0);
		MethodDeclaration method1 = (MethodDeclaration) type.bodyDeclarations().get(0); // Remove the receiver type and qualifying name
		MethodDeclaration method2 = (MethodDeclaration) type.bodyDeclarations().get(1); // Remove the receiver but not the qualifier
		MethodDeclaration method3 = (MethodDeclaration) type.bodyDeclarations().get(2); // Remove the qualifier only 
		MethodDeclaration method4 = (MethodDeclaration) type.bodyDeclarations().get(3); // Remove the qualifier and receiver annotation
		MethodDeclaration method5 = (MethodDeclaration) type.bodyDeclarations().get(4); // Remove the receiver type and all parameters
		MethodDeclaration method6 = (MethodDeclaration) type.bodyDeclarations().get(5); // Remove the receiver type and add a param
		MethodDeclaration method7 = (MethodDeclaration) type.bodyDeclarations().get(6); // Remove the qualifier and remove a param
		MethodDeclaration method8 = (MethodDeclaration) type.bodyDeclarations().get(7); // Remove the qualifier and replace a param
		MethodDeclaration method9 = (MethodDeclaration) type.bodyDeclarations().get(8); // Add a receiver type and qualifier with annotation
		MethodDeclaration method10 = (MethodDeclaration) type.bodyDeclarations().get(9); // Add a receiver type and qualifier with annotations and add one parameter
		MethodDeclaration method11 = (MethodDeclaration) type.bodyDeclarations().get(10); // Add a receiver type with qualifier & annotations and remove all parameters
		MethodDeclaration method12 = (MethodDeclaration) type.bodyDeclarations().get(11); // Keep the receiver type and qualifier, but alter parameters
		MethodDeclaration method13 = (MethodDeclaration) type.bodyDeclarations().get(12); // Keep the receiver type and qualifier, but alter parameters

		rewrite.set(method1, MethodDeclaration.RECEIVER_TYPE_PROPERTY, null, null);
		rewrite.set(method1, MethodDeclaration.RECEIVER_QUALIFIER_PROPERTY, null, null);
		rewrite.set(method2, MethodDeclaration.RECEIVER_TYPE_PROPERTY, null, null);
		rewrite.set(method3, MethodDeclaration.RECEIVER_QUALIFIER_PROPERTY, null, null);

		rewrite.set(method4, MethodDeclaration.RECEIVER_QUALIFIER_PROPERTY, null, null);
		ListRewrite listRewrite = rewrite.getListRewrite(method4.getReceiverType(), SimpleType.ANNOTATIONS_PROPERTY);
		listRewrite.remove((ASTNode) ((AnnotatableType) method4.getReceiverType()).annotations().get(0), null);

		rewrite.set(method5, MethodDeclaration.RECEIVER_TYPE_PROPERTY, null, null);
		List params = method5.parameters();
		SingleVariableDeclaration first = (SingleVariableDeclaration) params.get(0);
		listRewrite = rewrite.getListRewrite(method5, MethodDeclaration.PARAMETERS_PROPERTY);
		listRewrite.remove(first, null);
		first = (SingleVariableDeclaration) params.get(1);
		listRewrite.remove(first, null);

		rewrite.set(method6, MethodDeclaration.RECEIVER_TYPE_PROPERTY, null, null);
		listRewrite = rewrite.getListRewrite(method6, MethodDeclaration.PARAMETERS_PROPERTY);
		SingleVariableDeclaration paramCopy = ast.newSingleVariableDeclaration();
		SimpleType typeCopy = ast.newSimpleType(ast.newSimpleName("Object"));
		MarkerAnnotation markerAnnotation= ast.newMarkerAnnotation();
		markerAnnotation.setTypeName(ast.newSimpleName("A"));
		typeCopy.annotations().add(markerAnnotation);
		paramCopy.setType(typeCopy);
		paramCopy.setName(ast.newSimpleName("obj"));
		listRewrite.insertFirst(paramCopy, null);

		rewrite.set(method7, MethodDeclaration.RECEIVER_QUALIFIER_PROPERTY, null, null);
		params = method7.parameters();
		first = (SingleVariableDeclaration) params.get(0);
		listRewrite = rewrite.getListRewrite(method7, MethodDeclaration.PARAMETERS_PROPERTY);
		listRewrite.remove(first, null);
		params = method8.parameters();
		rewrite.set(method8, MethodDeclaration.RECEIVER_QUALIFIER_PROPERTY, null, null);
		listRewrite = rewrite.getListRewrite(method8, MethodDeclaration.PARAMETERS_PROPERTY);
		listRewrite.remove((SingleVariableDeclaration) params.get(0), null);
		listRewrite.remove((SingleVariableDeclaration) params.get(1), null);
		listRewrite.insertLast(paramCopy, null);

		SimpleType receiverType = ast.newSimpleType(ast.newSimpleName("XYZ"));
		SimpleName qual = ast.newSimpleName("XYZ");
		markerAnnotation= ast.newMarkerAnnotation();
		markerAnnotation.setTypeName(ast.newSimpleName("A"));
		receiverType.annotations().add(markerAnnotation);

		rewrite.set(method9, MethodDeclaration.RECEIVER_TYPE_PROPERTY, receiverType, null);
		rewrite.set(method9, MethodDeclaration.RECEIVER_QUALIFIER_PROPERTY, qual, null);

		rewrite.set(method10, MethodDeclaration.RECEIVER_TYPE_PROPERTY, receiverType, null);
		rewrite.set(method10, MethodDeclaration.RECEIVER_QUALIFIER_PROPERTY, qual, null);
		listRewrite = rewrite.getListRewrite(method10, MethodDeclaration.PARAMETERS_PROPERTY);
		listRewrite.insertFirst(paramCopy, null);

		rewrite.set(method11, MethodDeclaration.RECEIVER_TYPE_PROPERTY, receiverType, null);
		rewrite.set(method11, MethodDeclaration.RECEIVER_QUALIFIER_PROPERTY, qual, null);
		listRewrite = rewrite.getListRewrite(method11, MethodDeclaration.PARAMETERS_PROPERTY);
		listRewrite.remove((ASTNode) method11.parameters().get(0), null);
		listRewrite.remove((ASTNode) method11.parameters().get(1), null);

		listRewrite = rewrite.getListRewrite(method12, MethodDeclaration.PARAMETERS_PROPERTY);
		listRewrite.remove((ASTNode) method12.parameters().get(1), null);

		listRewrite = rewrite.getListRewrite(method13, MethodDeclaration.PARAMETERS_PROPERTY);
		listRewrite.insertFirst(paramCopy, null);

		String preview = evaluateRewrite(cu, rewrite);
		buf = new StringBuffer();
		buf.append("package test1;\n");
		buf.append("class XYZ {\n");
		buf.append("	class Y {\n");
		buf.append("    	public Y(@B int i) {}\n");
		buf.append("    	public Y(@B int i, @C int j) {}\n");
		buf.append("    	public Y(@A XYZ this, @B float e) {}\n");
		buf.append("    	public Y(XYZ this, @B float e, @C float f) {}\n");
		buf.append("    	public Y() {}\n");
		buf.append("    	public Y(@A Object obj, @B float f, @C int i) {}\n");
		buf.append("    	public Y(@A XYZ this) {}\n");
		buf.append("    	public Y(@A XYZ this, @A Object obj) {}\n");
		buf.append("    	public Y(@A XYZ XYZ.this, @B boolean b, @C float f) {}\n");
		buf.append("    	public Y(@A XYZ XYZ.this, @A Object obj, @B boolean b, @C boolean c) {}\n");
		buf.append("    	public Y(@A XYZ XYZ.this) {}\n");
		buf.append("    	public Y(@A XYZ XYZ.this, @B int i, @D int k) {}\n");
		buf.append("    	public Y(@A XYZ XYZ.this, @A Object obj) {}\n");
		buf.append("    }\n");
		buf.append("}\n");
		assertEqualString(preview, buf.toString());
	}

