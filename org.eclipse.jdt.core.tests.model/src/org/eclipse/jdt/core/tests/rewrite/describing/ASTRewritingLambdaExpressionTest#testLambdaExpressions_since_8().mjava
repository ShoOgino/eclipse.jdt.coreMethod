	public void testLambdaExpressions_since_8() throws Exception {
		IPackageFragment pack1= this.sourceFolder.createPackageFragment("test1", false, null);
		StringBuffer buf= new StringBuffer();
		buf.append("package test1;\n");
		buf.append("interface I {\n");
		buf.append("	int foo(int x);\n");
		buf.append("}\n");
		buf.append("interface J {\n");
		buf.append("	int foo();\n");
		buf.append("}\n");
		buf.append("public class X {\n");
		buf.append(" I i =  vlambda -> {return 200;};\n");
		buf.append(" J j =  () -> 1729;\n");
		buf.append("}\n");
		ICompilationUnit cu= pack1.createCompilationUnit("X.java", buf.toString(), false, null);

		CompilationUnit astRoot= createAST(cu);
		ASTRewrite rewrite= ASTRewrite.create(astRoot.getAST());
		AST ast= astRoot.getAST();

		TypeDeclaration typedeclaration= findTypeDeclaration(astRoot, "I");

		{ // change return type
			MethodDeclaration methodDecl= findMethodDeclaration(typedeclaration, "foo");
			assertTrue("null return type: foo", methodDecl.getReturnType2() != null);

			Type returnType= methodDecl.getReturnType2();
			Type newReturnType= astRoot.getAST().newPrimitiveType(PrimitiveType.FLOAT);
			rewrite.replace(returnType, newReturnType, null);
		}
		{ // add a parameter to the singleton function in the interface.
			MethodDeclaration methodDecl= findMethodDeclaration(typedeclaration, "foo");
			List parameters= methodDecl.parameters();
			assertTrue("must be 1 parameter", parameters.size() == 1);

			SingleVariableDeclaration decl= ast.newSingleVariableDeclaration();
			decl.setType(ast.newPrimitiveType(PrimitiveType.INT));
			decl.setName(ast.newSimpleName("y"));
			rewrite.getListRewrite(methodDecl, MethodDeclaration.PARAMETERS_PROPERTY).insertLast(decl, null);
		}

		{ // insert a parameter
			typedeclaration= findTypeDeclaration(astRoot, "J");
			MethodDeclaration methodDecl = findMethodDeclaration(typedeclaration, "foo");
			List parameters = methodDecl.parameters();
			assertTrue("must be 0 parameters", parameters.size() == 0);

			SingleVariableDeclaration newParam= ast.newSingleVariableDeclaration();
			newParam.setName(ast.newSimpleName("x"));
			newParam.setType(ast.newPrimitiveType(PrimitiveType.INT));
			rewrite.getListRewrite(methodDecl, MethodDeclaration.PARAMETERS_PROPERTY).insertFirst(newParam, null);
		}

		typedeclaration= findTypeDeclaration(astRoot, "X");
		FieldDeclaration fieldDeclaration = (FieldDeclaration) typedeclaration.bodyDeclarations().get(0);
		VariableDeclarationFragment fragment = (VariableDeclarationFragment)fieldDeclaration.fragments().get(0);
		Expression expression = fragment.getInitializer();
		assertTrue(expression instanceof LambdaExpression);
		LambdaExpression lambdaExpression = (LambdaExpression)expression;
		
		{// add a parameter to the lambda expression
			List parameters= lambdaExpression.parameters();
			assertTrue("must be 1 parameter", parameters.size() == 1);
			ASTNode firstParam= (ASTNode) parameters.get(0);
			VariableDeclarationFragment newParam= ast.newVariableDeclarationFragment();
			newParam.setName(ast.newSimpleName("wlambda"));
			rewrite.getListRewrite(lambdaExpression, LambdaExpression.PARAMETERS_PROPERTY).insertAfter(newParam, firstParam, null);		
		}
		
		{// replace the block body with a float literal expression body.
			ASTNode body = lambdaExpression.getBody();
			ASTNode newBody = ast.newNumberLiteral("3.14");
			rewrite.replace(body, newBody, null);
		}

		fieldDeclaration = (FieldDeclaration) typedeclaration.bodyDeclarations().get(1);
		fragment = (VariableDeclarationFragment)fieldDeclaration.fragments().get(0);
		expression = fragment.getInitializer();
		assertTrue(expression instanceof LambdaExpression);
		lambdaExpression = (LambdaExpression)expression;
		
		{// add a parameter to the lambda expression - border case - empty list initially
			List parameters= lambdaExpression.parameters();
			assertTrue("must be 0 parameter", parameters.size() == 0);
			VariableDeclarationFragment newParam= ast.newVariableDeclarationFragment();
			newParam.setName(ast.newSimpleName("vlambda"));
			rewrite.getListRewrite(lambdaExpression, LambdaExpression.PARAMETERS_PROPERTY).insertFirst(newParam, null);		
		}
		String preview= evaluateRewrite(cu, rewrite);

		buf= new StringBuffer();
		buf.append("package test1;\n");
		buf.append("interface I {\n");
		buf.append("	float foo(int x, int y);\n");
		buf.append("}\n");
		buf.append("interface J {\n");
		buf.append("	int foo(int x);\n");
		buf.append("}\n");
		buf.append("public class X {\n");
		buf.append(" I i =  (vlambda, wlambda) -> 3.14;\n");
		buf.append(" J j =  (vlambda) -> 1729;\n");
		buf.append("}\n");
		assertEqualString(preview, buf.toString());
	}

