	public void testImportDeclaration() throws Exception {
		IPackageFragment pack1= this.sourceFolder.createPackageFragment("test1", false, null);
		StringBuffer buf= new StringBuffer();
		buf.append("package test1;\n");
		buf.append("import java.util.Vector;\n");
		buf.append("import java.util.Vector;\n");
		buf.append("import java.net.*;\n");
		buf.append("import java.text.*;\n");
		buf.append("import static java.lang.Math.*;\n");
		buf.append("import java.lang.Math.*;\n");
		buf.append("public class Z {\n");
		buf.append("}\n");
		ICompilationUnit cu= pack1.createCompilationUnit("Z.java", buf.toString(), false, null);

		CompilationUnit astRoot= createAST3(cu);
		ASTRewrite rewrite= ASTRewrite.create(astRoot.getAST());
		AST ast= astRoot.getAST();

		assertTrue("Parse errors", (astRoot.getFlags() & ASTNode.MALFORMED) == 0);

		List imports= astRoot.imports();
		assertTrue("Number of imports not 6", imports.size() == 6);

		{ // rename import
			ImportDeclaration imp= (ImportDeclaration) imports.get(0);

			Name name= ast.newName(new String[] { "org", "eclipse", "X" });
			rewrite.replace(imp.getName(), name, null);
		}
		{ // change to import on demand
			ImportDeclaration imp= (ImportDeclaration) imports.get(1);

			Name name= ast.newName(new String[] { "java", "util" });
			rewrite.replace(imp.getName(), name, null);

			rewrite.set(imp, ImportDeclaration.ON_DEMAND_PROPERTY, Boolean.TRUE, null);
		}
		{ // change to single import
			ImportDeclaration imp= (ImportDeclaration) imports.get(2);

			rewrite.set(imp, ImportDeclaration.ON_DEMAND_PROPERTY, Boolean.FALSE, null);
		}
		{ // rename import
			ImportDeclaration imp= (ImportDeclaration) imports.get(3);

			Name name= ast.newName(new String[] { "org", "eclipse" });
			rewrite.replace(imp.getName(), name, null);
		}
		{ // remove static
			ImportDeclaration imp= (ImportDeclaration) imports.get(4);

			rewrite.set(imp, ImportDeclaration.STATIC_PROPERTY, Boolean.FALSE, null);
		}
		{ // add static
			ImportDeclaration imp= (ImportDeclaration) imports.get(5);

			rewrite.set(imp, ImportDeclaration.STATIC_PROPERTY, Boolean.TRUE, null);
		}

		String preview= evaluateRewrite(cu, rewrite);

		buf= new StringBuffer();
		buf.append("package test1;\n");
		buf.append("import org.eclipse.X;\n");
		buf.append("import java.util.*;\n");
		buf.append("import java.net;\n");
		buf.append("import org.eclipse.*;\n");
		buf.append("import java.lang.Math.*;\n");
		buf.append("import static java.lang.Math.*;\n");
		buf.append("public class Z {\n");
		buf.append("}\n");
		assertEqualString(preview, buf.toString());

	}

