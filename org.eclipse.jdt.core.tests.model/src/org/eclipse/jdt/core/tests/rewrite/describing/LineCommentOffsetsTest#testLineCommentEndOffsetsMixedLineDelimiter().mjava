	public void testLineCommentEndOffsetsMixedLineDelimiter() throws Exception {
		IPackageFragment pack1= this.sourceFolder.createPackageFragment("test1", false, null);

		StringBuffer buf= new StringBuffer();
		buf.append("package test1;\n");
		buf.append("/* comment */\r\n");
		buf.append("// comment Y\n");
		buf.append("public class E {\r\n");
		buf.append("    public void foo() {\n");
		buf.append("        while (i == 0) {\n");
		buf.append("            foo();\n");
		buf.append("            i++; // comment Y\r\n");
		buf.append("            i++;\n");
		buf.append("        }// comment// comment Y\r");
		buf.append("        return;\n");
		buf.append("    }\r\n");
		buf.append("} // comment Y");
		String content= buf.toString();

		ICompilationUnit cu= pack1.createCompilationUnit("E.java", content, false, null);
		CompilationUnit astRoot= createAST(cu);

		LineCommentEndOffsets offsets= new LineCommentEndOffsets(astRoot.getCommentList());
		HashSet expectedOffsets= new HashSet();

		for (int i= 0; i < content.length(); i++) {
			char ch= content.charAt(i);
			if (ch == 'Y') {
				expectedOffsets.add(Integer.valueOf(i + 1));
			}
		}

		int count= 0;

		char[] charContent= content.toCharArray();
		for (int i= 0; i <= content.length() + 5; i++) {
			boolean expected= i > 0 && i <= content.length() && charContent[i - 1] == 'Y';
			boolean actual= offsets.isEndOfLineComment(i, charContent);
			assertEquals(expected, actual);
			if (expected) {
				count++;
			}

		}
		assertEquals(4, count);
	}

