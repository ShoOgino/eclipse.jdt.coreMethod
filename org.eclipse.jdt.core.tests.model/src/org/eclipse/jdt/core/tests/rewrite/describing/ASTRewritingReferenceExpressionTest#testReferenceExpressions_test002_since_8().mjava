	/**
	 * tests various aspects of CreationReference (Constructor Method Reference) with ArrayType as lhs
	 * @throws Exception
	 */
	public void testReferenceExpressions_test002_since_8() throws Exception {
		IPackageFragment pack1= this.sourceFolder.createPackageFragment("test407131", false, null);
		String contents = "package test407131;\n" +
				"interface I {\n" +
				"	Object foo(int x);\n" +
				"}\n" +
				"public class X {\n" +
				"	@SuppressWarnings(\"unused\")\n" +
				"	public static void main (String [] args) {\n" +
				"		I i1 = int[] :: new;\n" +
				"	}\n" +
				"}\n" +
				"\n" ;
		StringBuffer buf= new StringBuffer(contents);
		ICompilationUnit cu= pack1.createCompilationUnit("X.java", buf.toString(), false, null);
		CompilationUnit astRoot= createAST(cu);
		ASTRewrite rewrite= ASTRewrite.create(astRoot.getAST());
		AST ast= astRoot.getAST();

		TypeDeclaration typedeclaration= findTypeDeclaration(astRoot, "X");

		MethodDeclaration methodDecl= findMethodDeclaration(typedeclaration, "main");
		{
			// replace the primitive type of lhs from int to char.
			VariableDeclarationStatement variableDeclarationStatement = (VariableDeclarationStatement) methodDecl.getBody().statements().get(0);
			VariableDeclarationFragment variableDeclarationFragment = (VariableDeclarationFragment) variableDeclarationStatement.fragments().get(0);
			CreationReference creationReference = (CreationReference) variableDeclarationFragment.getInitializer();
			ArrayType arrayType = (ArrayType) creationReference.getType();
			rewrite.replace(arrayType.getElementType(), ast.newPrimitiveType(PrimitiveType.CHAR), null);
		}
		String preview= evaluateRewrite(cu, rewrite);
		contents = "package test407131;\n" +
				"interface I {\n" +
				"	Object foo(int x);\n" +
				"}\n" +
				"public class X {\n" +
				"	@SuppressWarnings(\"unused\")\n" +
				"	public static void main (String [] args) {\n" +
				"		I i1 = char[] :: new;\n" +
				"	}\n" +
				"}\n" +
				"\n" ;
		buf= new StringBuffer(contents);
		assertEqualString(preview, buf.toString());
	}

