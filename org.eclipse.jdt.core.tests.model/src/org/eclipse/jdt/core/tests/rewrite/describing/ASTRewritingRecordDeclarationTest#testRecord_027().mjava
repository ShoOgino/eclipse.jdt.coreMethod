	@SuppressWarnings("rawtypes")
	public void testRecord_027() throws Exception {
		if (checkAPILevel()) {
			return;
		}
		IPackageFragment pack1= this.sourceFolder.createPackageFragment("test1", false, null);
		StringBuffer buf= new StringBuffer();
		buf.append("package test1;\n");
		buf.append("import java.lang.annotation.ElementType;\n");
		buf.append("import java.lang.annotation.Target;\n");
		buf.append("record X(int lo) {\n");
		buf.append("	public int lo() {\n");
		buf.append("		return this.lo;\\n");
		buf.append("	}\n");
		buf.append("}\n");
		buf.append("@Target({ElementType.RECORD_COMPONENT})\n");
		buf.append("@interface MyAnnot {}");
		ICompilationUnit cu= pack1.createCompilationUnit("X.java", buf.toString(), false, null);

		CompilationUnit astRoot= createAST(cu);
		ASTRewrite rewrite= ASTRewrite.create(astRoot.getAST());

		assertTrue("Parse errors", (astRoot.getFlags() & ASTNode.MALFORMED) == 0);
		AbstractTypeDeclaration type= findAbstractTypeDeclaration(astRoot, "X");
		assertTrue("Not a record", type instanceof RecordDeclaration);
		RecordDeclaration record = (RecordDeclaration)type;
		AST ast= astRoot.getAST();
		{
			List recordComponents = record.recordComponents();
			assertTrue("must be 1 parameter", recordComponents.size() == 1);
			SingleVariableDeclaration recordComp = (SingleVariableDeclaration)recordComponents.get(0);
			// add annotation
			ListRewrite listRewrite= rewrite.getListRewrite(recordComp, SingleVariableDeclaration.MODIFIERS2_PROPERTY);
			MarkerAnnotation annot= ast.newMarkerAnnotation();
			annot.setTypeName(ast.newSimpleName("MyAnnot"));
			listRewrite.insertFirst(annot, null);
		}

		String preview= evaluateRewrite(cu, rewrite);

		buf= new StringBuffer();
		buf.append("package test1;\n");
		buf.append("import java.lang.annotation.ElementType;\n");
		buf.append("import java.lang.annotation.Target;\n");
		buf.append("record X(@MyAnnot int lo) {\n");
		buf.append("	public int lo() {\n");
		buf.append("		return this.lo;\\n");
		buf.append("	}\n");
		buf.append("}\n");
		buf.append("@Target({ElementType.RECORD_COMPONENT})\n");
		buf.append("@interface MyAnnot {}");

		assertEqualString(preview, buf.toString());

	}

