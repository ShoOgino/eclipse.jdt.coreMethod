	public void testReceiver1_since_8() throws Exception {
		IPackageFragment pack1 = this.sourceFolder.createPackageFragment("test1", false, null);
		StringBuffer buf = new StringBuffer();
		buf.append("package test1;\n");
		buf.append("class X {\n");
		buf.append("    public void foo(@A @B @C X this, int i, int j) {\n");
		buf.append("    }\n");
		buf.append("}\n");
		ICompilationUnit cu= pack1.createCompilationUnit("X.java", buf.toString(), false, null);
		CompilationUnit astRoot = createAST(cu);
		ASTRewrite rewrite = ASTRewrite.create(astRoot.getAST());
		AST ast = astRoot.getAST();
		MethodDeclaration method = (MethodDeclaration) findTypeDeclaration(astRoot, "X").bodyDeclarations().get(0);
		AnnotatableType receiverType = method.getReceiverType();
		assertEquals("Invalid receiver type", ASTNode.SIMPLE_TYPE, receiverType.getNodeType());
		MarkerAnnotation annot = ast.newMarkerAnnotation();
		annot.setTypeName(ast.newSimpleName("Marker"));
		ListRewrite listRewrite = rewrite.getListRewrite(receiverType, SimpleType.ANNOTATIONS_PROPERTY);
		listRewrite.insertFirst(annot, null);

		String preview = evaluateRewrite(cu, rewrite);
		buf = new StringBuffer();
		buf.append("package test1;\n");
		buf.append("class X {\n");
		buf.append("    public void foo(@Marker @A @B @C X this, int i, int j) {\n");
		buf.append("    }\n");
		buf.append("}\n");
		assertEqualString(preview, buf.toString());
	}

