	public void testBug128422b() throws Exception {
		
		IPackageFragment pack1= this.sourceFolder.createPackageFragment("test1", false, null);
		StringBuffer buf= new StringBuffer();
		buf.append("package test1;\n");
		buf.append("public class E {\n");
		buf.append("  void foo() {\n");
		buf.append("    foo(); //comment\n");
		buf.append("    foo();\n");
		buf.append("  }\n");	
		buf.append("}\n");	
		ICompilationUnit cu= pack1.createCompilationUnit("E.java", buf.toString(), false, null);
		
		CompilationUnit astRoot= createAST3(cu);
		ASTRewrite rewrite= ASTRewrite.create(astRoot.getAST());
		
		AST ast= astRoot.getAST();
		
		assertTrue("Parse errors", (astRoot.getFlags() & ASTNode.MALFORMED) == 0);
		TypeDeclaration type= findTypeDeclaration(astRoot, "E");
		MethodDeclaration method= (MethodDeclaration) type.bodyDeclarations().get(0);
		List statements= method.getBody().statements();
		ASTNode copy= rewrite.createCopyTarget((ASTNode) statements.get(0));
		
		Block newBlock= ast.newBlock();
		newBlock.statements().add(newStatement(ast));
		newBlock.statements().add(copy);
		newBlock.statements().add(newStatement(ast));
		
		rewrite.getListRewrite(method.getBody(), Block.STATEMENTS_PROPERTY).insertLast(newBlock, null);

		String preview= evaluateRewrite(cu, rewrite);
		
		buf= new StringBuffer();
		buf.append("package test1;\n");
		buf.append("public class E {\n");
		buf.append("  void foo() {\n");
		buf.append("    foo(); //comment\n");
		buf.append("    foo();\n");
		buf.append("    {\n");
		buf.append("        bar();\n");
		buf.append("        foo(); //comment\n");
		buf.append("        bar();\n");
		buf.append("    }\n");
		buf.append("  }\n");	
		buf.append("}\n");	
		assertEqualString(preview, buf.toString());
	}

