	public void testArrayCreation2_since_8() throws Exception {
		IPackageFragment pack1= this.sourceFolder.createPackageFragment("test1", false, null);
		this.project1.setOption(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_8);
		StringBuffer buf= new StringBuffer();
		buf.append("package test1;\n");
		buf.append("public class E {\n");
		buf.append("    public void foo() {\n");
		buf.append("        goo();\n");
		buf.append("    }\n");
		buf.append("}\n");
		ICompilationUnit cu= pack1.createCompilationUnit("E.java", buf.toString(), false, null);
	
		CompilationUnit astRoot= createAST(cu);
		ASTRewrite rewrite= ASTRewrite.create(astRoot.getAST());
	
		AST ast= astRoot.getAST();
	
		assertTrue("Parse errors", (astRoot.getFlags() & ASTNode.MALFORMED) == 0);
		TypeDeclaration type= findTypeDeclaration(astRoot, "E");
		MethodDeclaration methodDecl= findMethodDeclaration(type, "foo");
		Block block= methodDecl.getBody();
		List statements= block.statements();
		assertTrue("Number of statements not 1", statements.size() == 1);
		ExpressionStatement statement= (ExpressionStatement) statements.get(0);
		MethodInvocation invocation= (MethodInvocation) statement.getExpression();
	
		{	// add a new ArrayCreation with annotations
			ArrayCreation arrayCreation= ast.newArrayCreation();
			SimpleType elementType= ast.newSimpleType(ast.newName("java.lang.String"));
			
			ArrayType arrayType= ast.newArrayType(elementType);
			NormalAnnotation annotationC= ast.newNormalAnnotation();
			annotationC.setTypeName(ast.newSimpleName("C"));
			MemberValuePair memberValuePair= ast.newMemberValuePair();
			memberValuePair.setName(ast.newSimpleName("v"));
			memberValuePair.setValue(ast.newNumberLiteral("99"));
			annotationC.values().add(memberValuePair);
			Dimension dim0 = (Dimension) arrayType.dimensions().get(0);
			dim0.annotations().add(annotationC);
			
			SingleMemberAnnotation annotationB= ast.newSingleMemberAnnotation();
			annotationB.setTypeName(ast.newSimpleName("B"));
			annotationB.setValue(ast.newNumberLiteral("0"));
			Dimension dim1 = ast.newDimension();
			dim1.annotations().add(annotationB);
			arrayType.dimensions().add(0, dim1);
			
			MarkerAnnotation annotationA= ast.newMarkerAnnotation();
			annotationA.setTypeName(ast.newSimpleName("A"));
			Dimension dim2 = ast.newDimension();
			dim2.annotations().add(annotationA);
			arrayType.dimensions().add(0, dim2);
			
			arrayCreation.dimensions().add(ast.newNumberLiteral("1"));
			arrayCreation.dimensions().add(ast.newNumberLiteral("2"));
			arrayCreation.setType(arrayType);
			
			rewrite.getListRewrite(invocation, MethodInvocation.ARGUMENTS_PROPERTY).insertLast(arrayCreation, null);
		}
	
		String preview= evaluateRewrite(cu, rewrite);
	
		buf= new StringBuffer();
		buf.append("package test1;\n");
		buf.append("public class E {\n");
		buf.append("    public void foo() {\n");
		buf.append("        goo(new java.lang.String @A [1] @B(0) [2] @C(v = 99) []);\n");
		buf.append("    }\n");
		buf.append("}\n");
		assertEqualString(preview, buf.toString());
	
	}

